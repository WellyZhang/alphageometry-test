I0123 11:02:36.657691 139878739914752 inference_utils.py:69] Parsing gin configuration.
I0123 11:02:36.657865 139878739914752 inference_utils.py:71] Added Gin search path meliad_lib/meliad/transformer/configs
I0123 11:02:36.658096 139878739914752 inference_utils.py:74] Loading Gin config file base_htrans.gin
I0123 11:02:36.658132 139878739914752 inference_utils.py:74] Loading Gin config file size/medium_150M.gin
I0123 11:02:36.658163 139878739914752 inference_utils.py:74] Loading Gin config file options/positions_t5.gin
I0123 11:02:36.658192 139878739914752 inference_utils.py:74] Loading Gin config file options/lr_cosine_decay.gin
I0123 11:02:36.658221 139878739914752 inference_utils.py:74] Loading Gin config file options/seq_1024_nocache.gin
I0123 11:02:36.658248 139878739914752 inference_utils.py:74] Loading Gin config file geometry_150M_generate.gin
I0123 11:02:36.658277 139878739914752 inference_utils.py:76] Overriding Gin param DecoderOnlyLanguageModelGenerate.output_token_losses=True
I0123 11:02:36.658305 139878739914752 inference_utils.py:76] Overriding Gin param TransformerTaskConfig.batch_size=32
I0123 11:02:36.658332 139878739914752 inference_utils.py:76] Overriding Gin param TransformerTaskConfig.sequence_length=128
I0123 11:02:36.658360 139878739914752 inference_utils.py:76] Overriding Gin param Trainer.restore_state_variables=False
I0123 11:02:36.658413 139878739914752 resource_reader.py:50] system_path_file_exists:base_htrans.gin
E0123 11:02:36.658555 139878739914752 resource_reader.py:55] Path not found: base_htrans.gin
I0123 11:02:36.658773 139878739914752 resource_reader.py:50] system_path_file_exists:trainer_configuration.gin
E0123 11:02:36.658879 139878739914752 resource_reader.py:55] Path not found: trainer_configuration.gin
I0123 11:02:36.665163 139878739914752 resource_reader.py:50] system_path_file_exists:size/medium_150M.gin
E0123 11:02:36.665302 139878739914752 resource_reader.py:55] Path not found: size/medium_150M.gin
I0123 11:02:36.665632 139878739914752 resource_reader.py:50] system_path_file_exists:options/positions_t5.gin
E0123 11:02:36.665757 139878739914752 resource_reader.py:55] Path not found: options/positions_t5.gin
I0123 11:02:36.666047 139878739914752 resource_reader.py:50] system_path_file_exists:options/lr_cosine_decay.gin
E0123 11:02:36.666158 139878739914752 resource_reader.py:55] Path not found: options/lr_cosine_decay.gin
I0123 11:02:36.666570 139878739914752 resource_reader.py:50] system_path_file_exists:options/seq_1024_nocache.gin
E0123 11:02:36.666680 139878739914752 resource_reader.py:55] Path not found: options/seq_1024_nocache.gin
I0123 11:02:36.670397 139878739914752 training_loop.py:334] ==== Training loop: initializing model ====
I0123 11:02:36.770404 139878739914752 xla_bridge.py:660] Unable to initialize backend 'rocm': NOT_FOUND: Could not find registered platform with name: "rocm". Available platform names are: CUDA
I0123 11:02:36.771319 139878739914752 xla_bridge.py:660] Unable to initialize backend 'tpu': INTERNAL: Failed to open libtpu.so: libtpu.so: cannot open shared object file: No such file or directory
I0123 11:02:36.778056 139878739914752 training_loop.py:335] Process 0 of 1
I0123 11:02:36.778122 139878739914752 training_loop.py:336] Local device count = 1
I0123 11:02:36.778166 139878739914752 training_loop.py:337] Number of replicas = 1
I0123 11:02:36.778201 139878739914752 training_loop.py:339] Using random number seed 42
I0123 11:02:37.262104 139878739914752 training_loop.py:359] Initializing the model.
I0123 11:02:37.665473 139878739914752 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.666177 139878739914752 decoder_stack.py:316] dstack: scanning over 1 windows.
I0123 11:02:37.666299 139878739914752 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 11:02:37.666384 139878739914752 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 11:02:37.666469 139878739914752 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 11:02:37.666559 139878739914752 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 11:02:37.666638 139878739914752 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 11:02:37.666711 139878739914752 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 11:02:37.666785 139878739914752 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 11:02:37.666855 139878739914752 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 11:02:37.666928 139878739914752 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 11:02:37.666999 139878739914752 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 11:02:37.667071 139878739914752 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 11:02:37.667141 139878739914752 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 11:02:37.667183 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:37.667232 139878739914752 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 11:02:37.667354 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:37.667399 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:37.667433 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:37.669528 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.675241 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:37.686486 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.686792 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:37.691297 139878739914752 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:37.702511 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:37.702578 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:37.702622 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:37.702658 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.702725 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.703992 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.704082 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.704811 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.707388 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.713316 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.715080 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.715172 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:37.715213 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:37.715280 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.715415 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:37.715767 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:37.715824 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:37.717805 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.717921 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:37.720877 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.720966 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:37.721476 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:37.731923 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:37.740932 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.741043 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:37.741354 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.741447 139878739914752 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 11:02:37.741563 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:37.741605 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:37.741651 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:37.743578 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.746141 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:37.751879 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.752155 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:37.754867 139878739914752 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:37.758795 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:37.758859 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:37.758898 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:37.758933 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.758997 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.759586 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.759671 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.760044 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.760855 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.763434 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.764068 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.764155 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:37.764194 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:37.764257 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.764389 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:37.764733 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:37.764785 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:37.766801 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.766917 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:37.769478 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.769568 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:37.770028 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:37.772408 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:37.774385 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.774489 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:37.774789 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.774876 139878739914752 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 11:02:37.774991 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:37.775032 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:37.775067 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:37.777007 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.779437 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:37.785563 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.785848 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:37.788567 139878739914752 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:37.792543 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:37.792607 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:37.792647 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:37.792682 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.792746 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.793326 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.793410 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.793797 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.794605 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.797169 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.797873 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.797965 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:37.798004 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:37.798066 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.798201 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:37.798531 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:37.798583 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:37.800554 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.800657 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:37.803238 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.803338 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:37.803844 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:37.806191 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:37.808155 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.808262 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:37.808563 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.808652 139878739914752 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 11:02:37.808768 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:37.808809 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:37.808845 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:37.810786 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.813250 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:37.819044 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.819319 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:37.822040 139878739914752 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:37.825958 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:37.826022 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:37.826062 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:37.826096 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.826161 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.826737 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.826821 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.827194 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.827995 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.830622 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.831266 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.831352 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:37.831392 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:37.831456 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.831595 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:37.831923 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:37.831975 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:37.833961 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.834064 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:37.836729 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.836825 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:37.837273 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:37.839620 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:37.841597 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.841709 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:37.842016 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.842106 139878739914752 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 11:02:37.842223 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:37.842265 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:37.842300 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:37.844249 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.846748 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:37.852575 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.852857 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:37.855635 139878739914752 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:37.859516 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:37.859581 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:37.859622 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:37.859658 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.859724 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.860312 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.860400 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.860778 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.861578 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.864565 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.865212 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.865303 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:37.865343 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:37.865407 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.865553 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:37.865906 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:37.865961 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:37.867932 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.868033 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:37.870650 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.870738 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:37.871180 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:37.873517 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:37.875527 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.875636 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:37.875942 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.876033 139878739914752 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 11:02:37.876148 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:37.876195 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:37.876232 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:37.878129 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.880592 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:37.886394 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.886674 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:37.889422 139878739914752 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:37.893279 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:37.893343 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:37.893383 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:37.893417 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.893481 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.894110 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.894196 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.894571 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.895384 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.897959 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.898598 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.898685 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:37.898724 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:37.898786 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.898928 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:37.899262 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:37.899314 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:37.901261 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.901362 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:37.903965 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.904057 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:37.904501 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:37.906877 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:37.908864 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.908968 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:37.909272 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.909363 139878739914752 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 11:02:37.909479 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:37.909525 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:37.909559 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:37.911453 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.913990 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:37.919752 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.920028 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:37.922763 139878739914752 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:37.926666 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:37.926730 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:37.926772 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:37.926806 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.926871 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.927453 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.927539 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.927930 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.928737 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.931321 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.931963 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.932048 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:37.932086 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:37.932148 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.932287 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:37.932629 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:37.932681 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:37.934709 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.934812 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:37.937360 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.937449 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:37.937946 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:37.940679 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:37.942660 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.942774 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:37.943081 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:37.943170 139878739914752 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 11:02:37.943287 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:37.943331 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:37.943367 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:38.089383 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.092897 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:38.099053 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.099376 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:38.102165 139878739914752 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:38.106245 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:38.106319 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:38.106361 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:38.106399 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.106469 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.107104 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.107195 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.107579 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.108399 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.111090 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.111761 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.111850 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:38.111891 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:38.111955 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.112090 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:38.112450 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:38.112503 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.114467 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.114577 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.117198 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.117286 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:38.117747 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:38.120127 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.122108 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.122240 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.122539 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.122631 139878739914752 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 11:02:38.122748 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:38.122792 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:38.122827 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:38.124820 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.127285 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:38.133063 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.133344 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:38.136113 139878739914752 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:38.139984 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:38.140050 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:38.140090 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:38.140124 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.140188 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.140768 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.140854 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.141223 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.142022 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.144620 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.145263 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.145349 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:38.145388 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:38.145449 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.145579 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:38.145924 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:38.145977 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.147903 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.148006 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.150625 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.150715 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:38.151155 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:38.153455 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.155459 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.155565 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.155865 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.155968 139878739914752 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 11:02:38.156084 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:38.156126 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:38.156161 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:38.158039 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.160524 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:38.166179 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.166458 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:38.169532 139878739914752 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:38.173339 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:38.173404 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:38.173444 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:38.173479 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.173544 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.174169 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.174263 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.174646 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.175440 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.177980 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.178623 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.178709 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:38.178748 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:38.178809 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.178938 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:38.179269 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:38.179321 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.181261 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.181363 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.183938 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.184027 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:38.184461 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:38.186823 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.188759 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.188863 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.189165 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.189264 139878739914752 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 11:02:38.189383 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:38.189429 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:38.189463 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:38.191346 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.193863 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:38.199595 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.199878 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:38.202608 139878739914752 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:38.206474 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:38.206541 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:38.206580 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:38.206615 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.206681 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.207267 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.207354 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.207726 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.208519 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.211083 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.211731 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.211817 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:38.211855 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:38.211916 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.212049 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:38.212381 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:38.212435 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.214469 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.214574 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.217385 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.217474 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:38.217932 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:38.220337 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.222306 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.222413 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.222715 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.222806 139878739914752 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 11:02:38.222933 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:38.222979 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:38.223014 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:38.224946 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.227428 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:38.233168 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.233450 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:38.236129 139878739914752 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:38.240036 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:38.240101 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:38.240141 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:38.240176 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.240242 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.240820 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.240908 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.241286 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.242095 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.244653 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.245659 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.245747 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:38.245786 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:38.245849 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.245983 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:38.246315 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:38.246367 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.248322 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.248425 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.250987 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.251080 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:38.251577 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:38.253896 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.255838 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.255947 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.256247 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.256537 139878739914752 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 11:02:38.256615 139878739914752 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 11:02:38.256684 139878739914752 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 11:02:38.256744 139878739914752 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 11:02:38.256803 139878739914752 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 11:02:38.256860 139878739914752 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 11:02:38.256915 139878739914752 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 11:02:38.256971 139878739914752 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 11:02:38.257025 139878739914752 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 11:02:38.257079 139878739914752 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 11:02:38.257135 139878739914752 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 11:02:38.257190 139878739914752 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 11:02:38.257230 139878739914752 decoder_stack.py:344] dstack: Final layernorm.
I0123 11:02:38.260799 139878739914752 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:38.309547 139878739914752 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.309648 139878739914752 decoder_stack.py:333] dstack: autoregressive generator.
I0123 11:02:38.309709 139878739914752 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 11:02:38.309819 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:38.309861 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:38.309895 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:38.309961 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.312454 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:38.318085 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.318358 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:38.321062 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:38.338144 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:38.338212 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:38.338254 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:38.338290 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.338356 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.339507 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.339595 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.340327 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.342396 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.347291 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.348645 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.348744 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:38.348785 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:38.348850 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.348992 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:38.349110 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:38.349153 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.351125 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.351231 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.353766 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.353856 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:38.353973 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:38.356276 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.358301 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.358408 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.358710 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.358801 139878739914752 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 11:02:38.358918 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:38.358961 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:38.358995 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:38.359061 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.361390 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:38.367011 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.367284 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:38.370055 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:38.383546 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:38.383610 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:38.383651 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:38.383685 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.383753 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.384327 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.384413 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.384785 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.385510 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.388099 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.388737 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.388823 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:38.388871 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:38.388934 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.389075 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:38.389190 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:38.389234 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.391239 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.391344 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.393829 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.393916 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:38.394029 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:38.396287 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.398291 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.398397 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.398698 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.398789 139878739914752 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 11:02:38.398906 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:38.398951 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:38.398988 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:38.399056 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.401377 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:38.407012 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.407286 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:38.410084 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:38.423221 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:38.423285 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:38.423324 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:38.423359 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.423424 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.424002 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.424089 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.424462 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.425192 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.427774 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.428422 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.428508 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:38.428547 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:38.428619 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.428761 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:38.428875 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:38.428919 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.430908 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.431012 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.433508 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.433598 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:38.433718 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:38.436060 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.438056 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.438162 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.438462 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.438552 139878739914752 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 11:02:38.438667 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:38.438709 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:38.438744 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:38.438810 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.441140 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:38.446767 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.447043 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:38.449817 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:38.462959 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:38.463023 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:38.463063 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:38.463097 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.463160 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.463738 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.463823 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.464187 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.464896 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.467444 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.468085 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.468172 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:38.468211 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:38.468272 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.468421 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:38.468537 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:38.468581 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.470575 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.470680 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.473151 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.473240 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:38.473354 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:38.475627 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.477552 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.477665 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.477963 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.478053 139878739914752 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 11:02:38.478168 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:38.478212 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:38.478247 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:38.478313 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.480973 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:38.486567 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.486848 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:38.489526 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:38.502560 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:38.502625 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:38.502665 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:38.502700 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.502765 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.503341 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.503427 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.503795 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.504512 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.507132 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.507793 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.507879 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:38.507919 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:38.507982 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.508128 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:38.508244 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:38.508287 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.510227 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.510329 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.512785 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.512876 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:38.512990 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:38.515360 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.517286 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.517390 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.517699 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.517790 139878739914752 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 11:02:38.517904 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:38.517946 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:38.517982 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:38.518049 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.520370 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:38.525952 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.526222 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:38.528977 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:38.542022 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:38.542086 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:38.542129 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:38.542164 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.542230 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.542804 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.542891 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.543260 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.543982 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.546551 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.547196 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.547282 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:38.547320 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:38.547382 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.547519 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:38.547647 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:38.547693 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.549693 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.549797 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.552264 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.552353 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:38.552468 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:38.554763 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.556672 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.556778 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.557072 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.557162 139878739914752 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 11:02:38.557278 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:38.557321 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:38.557357 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:38.557423 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.559757 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:38.565434 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.565719 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:38.568389 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:38.581451 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:38.581515 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:38.581553 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:38.581587 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.581657 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.582225 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.582311 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.582680 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.583397 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.585942 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.586955 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.587044 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:38.587083 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:38.587145 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.587285 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:38.587398 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:38.587446 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.589393 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.589497 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.591982 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.592072 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:38.592187 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:38.594494 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.596486 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.596590 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.596890 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.596981 139878739914752 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 11:02:38.597096 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:38.597141 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:38.597177 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:38.597243 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.599545 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:38.605085 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.605371 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:38.608095 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:38.621081 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:38.621145 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:38.621185 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:38.621219 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.621283 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.621914 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.621999 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.622373 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.623084 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.625622 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.626276 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.626363 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:38.626401 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:38.626463 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.626605 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:38.626720 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:38.626772 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.628709 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.628813 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.631350 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.631438 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:38.631552 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:38.633836 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.635748 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.635853 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.636147 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.636237 139878739914752 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 11:02:38.636352 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:38.636394 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:38.636429 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:38.636495 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.638811 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:38.644451 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.644722 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:38.647422 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:38.660467 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:38.660531 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:38.660571 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:38.660605 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.660669 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.661237 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.661322 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.661700 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.662416 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.664985 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.665685 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.665773 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:38.665812 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:38.665878 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.666016 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:38.666130 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:38.666173 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.668097 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.668199 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.670656 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.670746 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:38.670860 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:38.673132 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.675141 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.675245 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.675541 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.675631 139878739914752 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 11:02:38.675747 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:38.675788 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:38.675823 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:38.675889 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.678202 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:38.683754 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.684027 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:38.686785 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:38.700116 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:38.700181 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:38.700221 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:38.700256 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.700322 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.700945 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.701031 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.701400 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.702128 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.704674 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.705315 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.705401 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:38.705439 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:38.705500 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.705631 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:38.705756 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:38.705800 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.707729 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.707840 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.710357 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.710445 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:38.710557 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:38.712822 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.714736 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.714840 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.715136 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.715226 139878739914752 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 11:02:38.715342 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:38.715383 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:38.715419 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:38.715484 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.717800 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:38.723465 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.723736 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:38.726438 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:38.739462 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:38.739526 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:38.739567 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:38.739600 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.739665 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.740236 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.740321 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.740693 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.741410 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.743988 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.744678 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.744763 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:38.744801 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:38.744863 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.744999 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:38.745115 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:38.745158 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.747102 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.747217 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.750099 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.750187 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:38.750301 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:38.752557 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.754546 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.754650 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.754945 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.755036 139878739914752 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 11:02:38.755151 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:38.755194 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:38.755229 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:38.755295 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.757604 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:38.763179 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.763457 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:38.766219 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:38.779200 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:38.779267 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:38.779307 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:38.779342 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.779407 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.779973 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.780061 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.780426 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.781186 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.783747 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.784382 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.784470 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:38.784508 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:38.784571 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.784703 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:38.784824 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:38.784869 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.786800 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.786903 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.789380 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.789469 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:38.789583 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:38.791925 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.793865 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.793970 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.794269 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.794364 139878739914752 decoder_stack.py:344] dstack: Final layernorm.
I0123 11:02:38.797298 139878739914752 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:38.854058 139878739914752 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.854155 139878739914752 decoder_stack.py:333] dstack: autoregressive generator.
I0123 11:02:38.854217 139878739914752 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 11:02:38.854330 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:38.854373 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:38.854405 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:38.854472 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.857202 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:38.862734 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.863012 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:38.865687 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:38.878525 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:38.878591 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:38.878634 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:38.878670 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.878738 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.879317 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.879403 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.879773 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.880470 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.883038 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.883674 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.883761 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:38.883800 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:38.883864 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.884000 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:38.884131 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:38.884175 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.886078 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.886183 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.888644 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.888733 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:38.888849 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:38.891173 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.893082 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.893188 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.893491 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.893582 139878739914752 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 11:02:38.893706 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:38.893749 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:38.893784 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:38.893850 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.896156 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:38.901647 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.901923 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:38.904656 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:38.917284 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:38.917348 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:38.917387 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:38.917421 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.917486 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.918064 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.918151 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.918521 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.919218 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.921787 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.922430 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.922519 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:38.922558 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:38.922621 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.922757 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:38.922873 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:38.922925 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.924813 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.924916 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.927389 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.927479 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:38.927597 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:38.929918 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.931810 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.931915 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.932213 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.932304 139878739914752 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 11:02:38.932421 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:38.932466 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:38.932500 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:38.932566 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.934880 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:38.940389 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.940667 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:38.943415 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:38.956471 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:38.956536 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:38.956575 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:38.956609 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.956674 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.957243 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.957329 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.957708 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.958414 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.960993 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.961634 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.961730 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:38.961768 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:38.961830 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.961962 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:38.962079 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:38.962122 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.964017 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.964122 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.966624 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.966715 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:38.966829 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:38.969585 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:38.971479 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.971584 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:38.971880 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.971971 139878739914752 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 11:02:38.972085 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:38.972127 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:38.972162 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:38.972230 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.974523 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:38.980020 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.980300 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:38.983035 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:38.995820 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:38.995884 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:38.995927 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:38.995974 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.996042 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.996609 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.996692 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.997061 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:38.997771 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.000373 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.001013 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.001098 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:39.001135 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:39.001197 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.001330 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:39.001445 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:39.001493 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:39.003426 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.003529 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:39.005986 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.006074 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:39.006186 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:39.008513 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:39.010427 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.010532 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:39.010822 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.010912 139878739914752 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 11:02:39.011024 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:39.011065 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:39.011101 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:39.011166 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.013446 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:39.018929 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.019199 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:39.021944 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:39.034796 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:39.034858 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:39.034896 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:39.034929 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.034992 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.035558 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.035644 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.036017 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.036727 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.039330 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.039971 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.040055 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:39.040091 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:39.040152 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.040283 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:39.040397 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:39.040439 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:39.042350 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.042460 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:39.044914 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.044999 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:39.045111 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:39.047447 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:39.049346 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.049448 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:39.049746 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.049836 139878739914752 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 11:02:39.049948 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:39.049987 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:39.050021 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:39.050085 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.052358 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:39.057990 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.058261 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:39.060996 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:39.073837 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:39.073900 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:39.073938 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:39.073971 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.074035 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.074598 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.074681 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.075055 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.075764 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.078389 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.079033 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.079117 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:39.079155 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:39.079217 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.079347 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:39.079461 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:39.079502 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:39.081404 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.081510 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:39.083982 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.084069 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:39.084184 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:39.086928 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:39.088858 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.088962 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:39.089259 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.089350 139878739914752 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 11:02:39.089462 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:39.089503 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:39.089537 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:39.089601 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.091904 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:39.097477 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.097759 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:39.100541 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:39.113497 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:39.113559 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:39.113597 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:39.113630 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.113704 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.114283 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.114370 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.114737 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.115444 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.118058 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.118701 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.118788 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:39.118824 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:39.118885 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.119013 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:39.119129 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:39.119173 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:39.121084 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.121188 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:39.123681 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.123769 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:39.123882 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:39.126247 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:39.128151 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.128255 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:39.128555 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.128644 139878739914752 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 11:02:39.128757 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:39.128798 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:39.128833 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:39.128898 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.131205 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:39.136773 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.137051 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:39.139810 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:39.152772 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:39.152835 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:39.152873 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:39.152907 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.152974 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.153555 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.153647 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.154016 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.154734 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.157346 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.157998 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.158084 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:39.158120 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:39.158182 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.158315 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:39.158430 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:39.158473 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:39.160386 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.160487 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:39.162954 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.163053 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:39.163168 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:39.165478 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:39.167384 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.167489 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:39.167785 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.167875 139878739914752 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 11:02:39.167988 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:39.168028 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:39.168062 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:39.168126 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.170421 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:39.175949 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.176223 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:39.178986 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:39.191950 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:39.192016 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:39.192055 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:39.192090 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.192155 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.192730 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.192813 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.193182 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.193906 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.196526 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.197167 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.197252 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:39.197289 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:39.197349 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.197481 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:39.197596 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:39.197637 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:39.199588 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.199692 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:39.202155 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.202254 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:39.202372 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:39.205101 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:39.207037 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.207142 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:39.207437 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.207528 139878739914752 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 11:02:39.207641 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:39.207682 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:39.207716 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:39.207780 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.210091 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:39.215656 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.215929 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:39.218693 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:39.231688 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:39.231753 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:39.231792 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:39.231825 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.231890 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.232463 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.232553 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.232925 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.233638 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.236252 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.236886 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.236969 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:39.237006 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:39.237067 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.237201 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:39.237316 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:39.237363 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:39.239624 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.239728 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:39.242183 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.242271 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:39.242400 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:39.244696 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:39.246591 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.246695 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:39.246989 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.247078 139878739914752 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 11:02:39.247190 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:39.247231 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:39.247266 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:39.247328 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.249599 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:39.255133 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.255409 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:39.258154 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:39.270991 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:39.271055 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:39.271094 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:39.271128 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.271192 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.271774 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.271859 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.272233 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.272936 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.275555 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.276189 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.276276 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:39.276316 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:39.276376 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.276508 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:39.276624 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:39.276667 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:39.278594 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.278697 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:39.281190 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.281278 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:39.281393 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:39.283722 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:39.285626 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.285738 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:39.286035 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.286124 139878739914752 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 11:02:39.286237 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:39.286278 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:39.286313 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:39.286377 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.288653 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:39.294187 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.294461 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:39.297202 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:39.310163 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:39.310227 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:39.310265 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:39.310298 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.310362 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.310930 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.311014 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.311379 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.312093 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.314685 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.315329 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.315416 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:39.315453 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:39.315513 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.315644 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:39.315760 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:39.315802 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:39.317712 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.317815 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:39.320262 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.320349 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:39.320460 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:39.323182 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:39.325113 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.325217 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:39.325513 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:39.325608 139878739914752 decoder_stack.py:344] dstack: Final layernorm.
I0123 11:02:39.328504 139878739914752 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:43.778444 139878739914752 optimizer_config.py:74] Using Flax Adafactor Optimizer. lr=1.000000, b1=0.900000
I0123 11:02:44.326372 139878739914752 training_loop.py:409] No working directory specified.
I0123 11:02:44.326536 139878739914752 training_loop.py:431] Loading pre-trained model from ag_ckpt_vocab:
I0123 11:02:44.327435 139878739914752 checkpoints.py:1062] Restoring legacy Flax checkpoint from ag_ckpt_vocab/checkpoint_10999999
I0123 11:02:47.352985 139878739914752 training_loop.py:447] Only restoring trainable parameters.
I0123 11:02:47.353991 139878739914752 training_loop.py:724] parameter: decoder/embed/embedding, shape (1024, 1024), size 1048576
I0123 11:02:47.354069 139878739914752 training_loop.py:724] parameter: decoder/final_layernorm/scale, shape (1024,), size 1024
I0123 11:02:47.354119 139878739914752 training_loop.py:724] parameter: decoder/transformer0/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 11:02:47.354162 139878739914752 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 11:02:47.354205 139878739914752 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.354246 139878739914752 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 11:02:47.354291 139878739914752 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.354332 139878739914752 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.354371 139878739914752 training_loop.py:724] parameter: decoder/transformer0/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 11:02:47.354409 139878739914752 training_loop.py:724] parameter: decoder/transformer0/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 11:02:47.354450 139878739914752 training_loop.py:724] parameter: decoder/transformer0/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.354490 139878739914752 training_loop.py:724] parameter: decoder/transformer0/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 11:02:47.354530 139878739914752 training_loop.py:724] parameter: decoder/transformer1/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 11:02:47.354569 139878739914752 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 11:02:47.354611 139878739914752 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.354649 139878739914752 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 11:02:47.354687 139878739914752 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.354725 139878739914752 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.354764 139878739914752 training_loop.py:724] parameter: decoder/transformer1/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 11:02:47.354802 139878739914752 training_loop.py:724] parameter: decoder/transformer1/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 11:02:47.354865 139878739914752 training_loop.py:724] parameter: decoder/transformer1/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.354904 139878739914752 training_loop.py:724] parameter: decoder/transformer1/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 11:02:47.354945 139878739914752 training_loop.py:724] parameter: decoder/transformer10/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 11:02:47.354984 139878739914752 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 11:02:47.355020 139878739914752 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.355058 139878739914752 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 11:02:47.355098 139878739914752 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.355136 139878739914752 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.355175 139878739914752 training_loop.py:724] parameter: decoder/transformer10/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 11:02:47.355213 139878739914752 training_loop.py:724] parameter: decoder/transformer10/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 11:02:47.355253 139878739914752 training_loop.py:724] parameter: decoder/transformer10/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.355291 139878739914752 training_loop.py:724] parameter: decoder/transformer10/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 11:02:47.355328 139878739914752 training_loop.py:724] parameter: decoder/transformer11/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 11:02:47.355366 139878739914752 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 11:02:47.355406 139878739914752 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.355443 139878739914752 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 11:02:47.355481 139878739914752 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.355517 139878739914752 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.355554 139878739914752 training_loop.py:724] parameter: decoder/transformer11/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 11:02:47.355593 139878739914752 training_loop.py:724] parameter: decoder/transformer11/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 11:02:47.355630 139878739914752 training_loop.py:724] parameter: decoder/transformer11/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.355667 139878739914752 training_loop.py:724] parameter: decoder/transformer11/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 11:02:47.355704 139878739914752 training_loop.py:724] parameter: decoder/transformer2/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 11:02:47.355743 139878739914752 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 11:02:47.355780 139878739914752 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.355818 139878739914752 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 11:02:47.355863 139878739914752 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.355905 139878739914752 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.355942 139878739914752 training_loop.py:724] parameter: decoder/transformer2/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 11:02:47.355979 139878739914752 training_loop.py:724] parameter: decoder/transformer2/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 11:02:47.356017 139878739914752 training_loop.py:724] parameter: decoder/transformer2/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.356056 139878739914752 training_loop.py:724] parameter: decoder/transformer2/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 11:02:47.356093 139878739914752 training_loop.py:724] parameter: decoder/transformer3/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 11:02:47.356130 139878739914752 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 11:02:47.356167 139878739914752 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.356208 139878739914752 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 11:02:47.356246 139878739914752 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.356285 139878739914752 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.356322 139878739914752 training_loop.py:724] parameter: decoder/transformer3/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 11:02:47.356361 139878739914752 training_loop.py:724] parameter: decoder/transformer3/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 11:02:47.356399 139878739914752 training_loop.py:724] parameter: decoder/transformer3/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.356436 139878739914752 training_loop.py:724] parameter: decoder/transformer3/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 11:02:47.356473 139878739914752 training_loop.py:724] parameter: decoder/transformer4/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 11:02:47.356511 139878739914752 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 11:02:47.356550 139878739914752 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.356587 139878739914752 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 11:02:47.356625 139878739914752 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.356662 139878739914752 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.356701 139878739914752 training_loop.py:724] parameter: decoder/transformer4/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 11:02:47.356739 139878739914752 training_loop.py:724] parameter: decoder/transformer4/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 11:02:47.356776 139878739914752 training_loop.py:724] parameter: decoder/transformer4/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.356813 139878739914752 training_loop.py:724] parameter: decoder/transformer4/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 11:02:47.356853 139878739914752 training_loop.py:724] parameter: decoder/transformer5/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 11:02:47.356897 139878739914752 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 11:02:47.356936 139878739914752 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.356973 139878739914752 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 11:02:47.357013 139878739914752 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.357050 139878739914752 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.357087 139878739914752 training_loop.py:724] parameter: decoder/transformer5/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 11:02:47.357124 139878739914752 training_loop.py:724] parameter: decoder/transformer5/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 11:02:47.357164 139878739914752 training_loop.py:724] parameter: decoder/transformer5/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.357200 139878739914752 training_loop.py:724] parameter: decoder/transformer5/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 11:02:47.357237 139878739914752 training_loop.py:724] parameter: decoder/transformer6/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 11:02:47.357275 139878739914752 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 11:02:47.357312 139878739914752 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.357351 139878739914752 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 11:02:47.357388 139878739914752 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.357425 139878739914752 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.357462 139878739914752 training_loop.py:724] parameter: decoder/transformer6/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 11:02:47.357501 139878739914752 training_loop.py:724] parameter: decoder/transformer6/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 11:02:47.357540 139878739914752 training_loop.py:724] parameter: decoder/transformer6/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.357577 139878739914752 training_loop.py:724] parameter: decoder/transformer6/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 11:02:47.357615 139878739914752 training_loop.py:724] parameter: decoder/transformer7/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 11:02:47.357665 139878739914752 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 11:02:47.357706 139878739914752 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.357744 139878739914752 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 11:02:47.357782 139878739914752 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.357822 139878739914752 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.357861 139878739914752 training_loop.py:724] parameter: decoder/transformer7/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 11:02:47.357899 139878739914752 training_loop.py:724] parameter: decoder/transformer7/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 11:02:47.357944 139878739914752 training_loop.py:724] parameter: decoder/transformer7/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.357986 139878739914752 training_loop.py:724] parameter: decoder/transformer7/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 11:02:47.358025 139878739914752 training_loop.py:724] parameter: decoder/transformer8/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 11:02:47.358062 139878739914752 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 11:02:47.358100 139878739914752 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.358141 139878739914752 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 11:02:47.358179 139878739914752 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.358217 139878739914752 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.358254 139878739914752 training_loop.py:724] parameter: decoder/transformer8/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 11:02:47.358295 139878739914752 training_loop.py:724] parameter: decoder/transformer8/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 11:02:47.358333 139878739914752 training_loop.py:724] parameter: decoder/transformer8/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.358370 139878739914752 training_loop.py:724] parameter: decoder/transformer8/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 11:02:47.358407 139878739914752 training_loop.py:724] parameter: decoder/transformer9/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 11:02:47.358448 139878739914752 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 11:02:47.358487 139878739914752 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.358524 139878739914752 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 11:02:47.358561 139878739914752 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.358602 139878739914752 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.358639 139878739914752 training_loop.py:724] parameter: decoder/transformer9/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 11:02:47.358676 139878739914752 training_loop.py:724] parameter: decoder/transformer9/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 11:02:47.358713 139878739914752 training_loop.py:724] parameter: decoder/transformer9/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:02:47.358749 139878739914752 training_loop.py:724] parameter: decoder/transformer9/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 11:02:47.358782 139878739914752 training_loop.py:725] Total parameters: 152072288
I0123 11:02:47.359047 139878739914752 training_loop.py:739] Total state size: 0
I0123 11:02:47.380887 139878739914752 training_loop.py:492] Training loop: creating task for mode beam_search
I0123 11:02:47.381289 139878739914752 training_loop.py:685] Creating logging writer (train) for mode beam_search
I0123 11:02:47.381712 139878739914752 training_loop.py:652] Compiling mode beam_search with jit.
I0123 11:02:47.382113 139878739914752 training_loop.py:89] registering functions: dict_keys([])
I0123 11:02:47.404277 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f ? coll i d h
I0123 11:02:47.695399 139878739914752 ddar.py:60] Depth 1/1000 time = 0.2605264186859131
I0123 11:02:48.129652 139878739914752 ddar.py:60] Depth 2/1000 time = 0.43410205841064453
I0123 11:02:48.559038 139878739914752 ddar.py:60] Depth 3/1000 time = 0.4291255474090576
I0123 11:02:48.850011 139878739914752 ddar.py:60] Depth 4/1000 time = 0.29049062728881836
I0123 11:02:48.850965 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:02:48.851041 139878739914752 alphageometry.py:540] Depth 0. There are 1 nodes to expand:
I0123 11:02:48.851078 139878739914752 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00
I0123 11:02:48.851113 139878739914752 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00
I0123 11:02:48.986558 139878739914752 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:48.986780 139878739914752 decoder_stack.py:316] dstack: scanning over 1 windows.
I0123 11:02:48.986886 139878739914752 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 11:02:48.986965 139878739914752 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 11:02:48.987041 139878739914752 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 11:02:48.987112 139878739914752 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 11:02:48.987182 139878739914752 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 11:02:48.987253 139878739914752 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 11:02:48.987323 139878739914752 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 11:02:48.987393 139878739914752 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 11:02:48.987460 139878739914752 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 11:02:48.987529 139878739914752 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 11:02:48.987594 139878739914752 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 11:02:48.987661 139878739914752 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 11:02:48.987703 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:48.987749 139878739914752 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 11:02:48.987857 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:48.987899 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:48.987929 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:48.989795 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:48.992348 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:48.998021 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:48.998298 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:49.000892 139878739914752 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:49.004824 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:49.004888 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:49.004930 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:49.004963 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.005029 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.005638 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.005732 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.006101 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.006877 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.009355 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.010472 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.010559 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:49.010595 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:49.010656 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.010786 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:49.011115 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:49.011165 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.013092 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.013192 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.015679 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.015766 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:49.016191 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:49.018603 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.020564 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.020667 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.020965 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.021053 139878739914752 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 11:02:49.021165 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:49.021204 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:49.021238 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:49.023056 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.025402 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:49.031095 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.031365 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:49.033973 139878739914752 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:49.037679 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:49.037751 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:49.037790 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:49.037822 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.037887 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.038502 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.038583 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.038942 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.039709 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.042170 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.042794 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.042877 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:49.042912 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:49.042972 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.043101 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:49.043421 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:49.043470 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.045425 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.045524 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.047991 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.048078 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:49.048507 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:49.050784 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.052705 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.052807 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.053098 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.053186 139878739914752 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 11:02:49.053296 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:49.053334 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:49.053369 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:49.055236 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.057564 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:49.063283 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.063550 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:49.066372 139878739914752 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:49.070053 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:49.070117 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:49.070156 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:49.070197 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.070262 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.070820 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.070903 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.071254 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.072019 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.074497 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.075178 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.075263 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:49.075300 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:49.075360 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.075489 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:49.075812 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:49.075860 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.077776 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.077877 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.080346 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.080432 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:49.080857 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:49.083179 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.085111 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.085213 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.085506 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.085593 139878739914752 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 11:02:49.085712 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:49.085753 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:49.085788 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:49.087568 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.089895 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:49.095558 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.095825 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:49.098409 139878739914752 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:49.102093 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:49.102156 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:49.102194 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:49.102226 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.102298 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.102922 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.103008 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.103375 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.104151 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.106643 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.107280 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.107365 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:49.107402 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:49.107461 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.107592 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:49.107914 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:49.107963 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.109957 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.110059 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.112524 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.112612 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:49.113037 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:49.115302 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.117211 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.117315 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.117608 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.117706 139878739914752 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 11:02:49.117820 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:49.117861 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:49.117902 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:49.120084 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.122452 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:49.128079 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.128348 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:49.131005 139878739914752 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:49.134693 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:49.134756 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:49.134794 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:49.134827 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.134897 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.135459 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.135541 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.135901 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.136672 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.139160 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.139847 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.139931 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:49.139968 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:49.140028 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.140158 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:49.140479 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:49.140529 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.142460 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.142561 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.145009 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.145095 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:49.145527 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:49.147874 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.149798 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.149900 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.150191 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.150278 139878739914752 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 11:02:49.150390 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:49.150430 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:49.150465 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:49.152261 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.154613 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:49.160285 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.160552 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:49.163149 139878739914752 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:49.166847 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:49.166909 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:49.166946 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:49.166979 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.167097 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.167671 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.167755 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.168114 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.168881 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.171373 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.171996 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.172080 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:49.172117 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:49.172177 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.172324 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:49.172649 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:49.172699 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.174682 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.174784 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.177258 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.177344 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:49.177786 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:49.180067 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.181998 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.182101 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.182396 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.182485 139878739914752 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 11:02:49.182596 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:49.182636 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:49.182670 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:49.184525 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.186887 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:49.192546 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.192816 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:49.195491 139878739914752 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:49.199201 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:49.199265 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:49.199302 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:49.199334 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.199397 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.199957 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.200048 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.200415 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.201192 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.203707 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.204400 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.204486 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:49.204523 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:49.204582 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.204712 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:49.205037 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:49.205087 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.207014 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.207114 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.209596 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.209690 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:49.210122 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:49.212455 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.214395 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.214498 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.214789 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.214876 139878739914752 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 11:02:49.214987 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:49.215026 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:49.215060 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:49.216863 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.219205 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:49.224907 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.225184 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:49.227811 139878739914752 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:49.231485 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:49.231548 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:49.231586 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:49.231620 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.232079 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.232647 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.232739 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.233106 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.233901 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.236388 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.237011 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.237094 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:49.237131 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:49.237190 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.237321 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:49.237650 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:49.237701 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.239675 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.239775 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.242245 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.242332 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:49.242763 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:49.245042 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.246973 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.247076 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.247367 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.247454 139878739914752 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 11:02:49.247565 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:49.247605 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:49.247638 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:49.249497 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.251849 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:49.257423 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.257705 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:49.260339 139878739914752 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:49.264029 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:49.264093 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:49.264131 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:49.264164 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.264228 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.264791 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.264873 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.265241 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.266027 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.268481 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.269101 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.269184 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:49.269222 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:49.269283 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.269414 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:49.269804 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:49.269854 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.271763 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.271862 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.274322 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.274408 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:49.274835 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:49.277093 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.279094 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.279196 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.279494 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.279586 139878739914752 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 11:02:49.279697 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:49.279737 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:49.279772 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:49.281580 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.283936 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:49.289592 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.289871 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:49.292481 139878739914752 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:49.296148 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:49.296209 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:49.296246 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:49.296279 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.296341 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.296961 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.297043 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.297404 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.298213 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.300700 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.301323 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.301405 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:49.301442 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:49.301501 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.301629 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:49.301960 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:49.302009 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.303911 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.304010 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.306514 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.306599 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:49.307024 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:49.309287 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.311219 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.311321 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.311615 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.311702 139878739914752 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 11:02:49.311812 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:49.311851 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:49.311885 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:49.313679 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.316111 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:49.321728 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.321994 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:49.324586 139878739914752 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:49.328301 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:49.328363 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:49.328401 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:49.328434 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.328551 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.329114 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.329195 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.329558 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.330357 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.332847 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.333473 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.333556 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:49.333594 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:49.333662 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.333798 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:49.334121 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:49.334171 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.336152 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.336251 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.338735 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.338821 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:49.339250 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:49.341508 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.343440 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.343542 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.343836 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.343922 139878739914752 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 11:02:49.344032 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:49.344071 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:49.344105 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:49.346316 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.348669 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:49.354319 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.354586 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:49.357183 139878739914752 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:49.360917 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:49.360980 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:49.361017 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:49.361050 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.361114 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.361683 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.361765 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.362133 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.362914 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.365422 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.366057 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.366141 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:49.366178 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:49.366238 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.366370 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:49.366694 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:49.366744 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.368718 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.368818 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.371282 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.371369 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:49.371797 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:49.374065 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.375979 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.376082 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.376375 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.376628 139878739914752 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 11:02:49.376703 139878739914752 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 11:02:49.376762 139878739914752 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 11:02:49.376817 139878739914752 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 11:02:49.376874 139878739914752 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 11:02:49.376928 139878739914752 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 11:02:49.376980 139878739914752 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 11:02:49.377035 139878739914752 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 11:02:49.377088 139878739914752 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 11:02:49.377140 139878739914752 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 11:02:49.377192 139878739914752 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 11:02:49.377246 139878739914752 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 11:02:49.377283 139878739914752 decoder_stack.py:344] dstack: Final layernorm.
I0123 11:02:49.380205 139878739914752 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:49.424970 139878739914752 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.425063 139878739914752 decoder_stack.py:333] dstack: autoregressive generator.
I0123 11:02:49.425119 139878739914752 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 11:02:49.425225 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:49.425267 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:49.425306 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:49.425369 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.427752 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:49.433187 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.433456 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:49.436050 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:49.448876 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:49.448938 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:49.448976 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:49.449010 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.449072 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.449650 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.449734 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.450101 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.450803 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.453372 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.454008 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.454093 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:49.454130 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:49.454190 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.454324 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:49.454438 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:49.454479 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.456341 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.456439 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.458863 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.458949 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:49.459062 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:49.461330 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.463208 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.463309 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.463605 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.463693 139878739914752 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 11:02:49.463804 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:49.463844 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:49.463885 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:49.463951 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.466212 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:49.471690 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.471959 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:49.474695 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:49.487295 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:49.487356 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:49.487393 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:49.487425 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.487487 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.488113 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.488197 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.488559 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.489238 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.491722 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.492349 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.492432 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:49.492468 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:49.492526 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.492656 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:49.492769 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:49.492811 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.494673 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.494772 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.497243 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.497330 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:49.497442 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:49.499670 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.501538 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.501638 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.501942 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.502030 139878739914752 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 11:02:49.502142 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:49.502181 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:49.502215 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:49.502290 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.504543 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:49.510050 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.510319 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:49.512925 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:49.525953 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:49.526015 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:49.526052 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:49.526085 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.526147 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.526702 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.526784 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.527144 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.527838 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.530314 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.530942 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.531026 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:49.531063 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:49.531123 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.531255 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:49.531365 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:49.531406 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.533330 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.533429 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.535877 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.535964 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:49.536076 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:49.538267 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.540120 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.540222 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.540518 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.540606 139878739914752 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 11:02:49.540717 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:49.540756 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:49.540790 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:49.540854 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.543193 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:49.548603 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.548870 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:49.551473 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:49.563953 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:49.564015 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:49.564051 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:49.564084 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.564145 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.564704 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.564786 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.565144 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.565838 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.568337 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.568961 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.569045 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:49.569081 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:49.569142 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.569273 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:49.569386 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:49.569427 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.571279 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.571378 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.573779 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.573864 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:49.573975 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:49.576227 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.578104 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.578206 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.578498 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.578585 139878739914752 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 11:02:49.578697 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:49.578736 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:49.578769 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:49.578833 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.581081 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:49.586537 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.586804 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:49.589488 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:49.602072 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:49.602134 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:49.602173 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:49.602207 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.602272 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.602895 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.602979 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.603346 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.604047 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.606530 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.607160 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.607243 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:49.607280 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:49.607338 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.607468 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:49.607582 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:49.607623 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.609464 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.609563 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.612021 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.612107 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:49.612221 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:49.614454 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.616319 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.616421 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.616717 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.616805 139878739914752 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 11:02:49.616917 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:49.616957 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:49.616991 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:49.617054 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.619336 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:49.624844 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.625112 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:49.627722 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:49.640681 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:49.640742 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:49.640779 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:49.640812 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.640876 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.641434 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.641518 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.641890 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.642588 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.645080 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.645714 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.645799 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:49.645837 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:49.645899 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.646031 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:49.646143 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:49.646184 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.648100 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.648199 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.651518 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.651606 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:49.651716 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:49.653927 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.655782 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.655883 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.656178 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.656266 139878739914752 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 11:02:49.656378 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:49.656418 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:49.656451 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:49.656515 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.658825 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:49.664263 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.664543 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:49.667153 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:49.679719 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:49.679782 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:49.679820 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:49.679853 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.679916 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.680473 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.680556 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.680912 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.681600 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.684138 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.684760 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.684843 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:49.684880 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:49.684938 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.685068 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:49.685181 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:49.685221 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.687087 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.687185 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.689599 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.689692 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:49.689804 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:49.692053 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.693913 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.694014 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.694308 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.694395 139878739914752 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 11:02:49.694507 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:49.694546 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:49.694580 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:49.694644 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.696871 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:49.702297 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.702579 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:49.705235 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:49.717732 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:49.717793 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:49.717830 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:49.717862 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.717925 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.718540 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.718624 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.718999 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.719692 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.722157 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.722784 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.722868 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:49.722905 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:49.722967 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.723098 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:49.723212 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:49.723253 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.725102 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.725201 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.727690 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.727777 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:49.727888 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:49.730094 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.731946 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.732048 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.732343 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.732431 139878739914752 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 11:02:49.732542 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:49.732581 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:49.732614 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:49.732677 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.734922 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:49.740836 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.741114 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:49.743733 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:49.756319 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:49.756382 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:49.756420 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:49.756453 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.756517 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.757073 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.757155 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.757516 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.758218 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.760673 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.761298 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.761381 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:49.761418 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:49.761477 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.761605 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:49.761727 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:49.761769 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.763696 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.763795 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.766223 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.766310 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:49.766419 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:49.768603 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.770493 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.770595 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.770889 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.770978 139878739914752 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 11:02:49.771090 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:49.771130 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:49.771164 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:49.771227 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.773472 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:49.778975 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.779245 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:49.781882 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:49.794416 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:49.794477 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:49.794514 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:49.794545 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.794607 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.795161 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.795243 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.795606 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.796303 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.798801 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.799429 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.799513 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:49.799550 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:49.799609 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.799739 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:49.799850 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:49.799891 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.801833 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.801933 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.804341 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.804427 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:49.804538 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:49.806737 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.808577 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.808678 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.808967 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.809053 139878739914752 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 11:02:49.809164 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:49.809202 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:49.809237 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:49.809302 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.811552 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:49.817003 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.817271 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:49.819854 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:49.832316 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:49.832377 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:49.832414 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:49.832447 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.832510 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.833066 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.833149 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.833509 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.834212 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.836662 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.837291 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.837376 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:49.837413 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:49.837472 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.837602 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:49.837726 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:49.837769 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.839705 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.839804 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.842216 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.842302 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:49.842414 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:49.844601 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.846469 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.846570 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.846859 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.846946 139878739914752 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 11:02:49.847056 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:49.847095 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:49.847128 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:49.847190 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.849431 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:49.855313 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.855583 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:49.858208 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:49.870763 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:49.870833 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:49.870873 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:49.870907 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.870973 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.871532 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.871614 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.871975 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.872655 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.875115 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.875739 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.875822 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:49.875860 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:49.875919 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.876049 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:49.876160 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:49.876199 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.878130 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.878230 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.880628 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.880712 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:49.880823 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:49.883040 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:49.884903 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.885003 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:49.885293 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:49.885385 139878739914752 decoder_stack.py:344] dstack: Final layernorm.
I0123 11:02:49.888244 139878739914752 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:50.102258 139878739914752 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.102521 139878739914752 decoder_stack.py:333] dstack: autoregressive generator.
I0123 11:02:50.102586 139878739914752 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 11:02:50.102700 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:50.102744 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:50.102776 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:50.102845 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.105284 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:50.110840 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.111112 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:50.113780 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:50.126499 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:50.126563 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:50.126604 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:50.126637 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.126699 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.127304 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.127389 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.127757 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.128462 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.130987 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.131684 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.131769 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:50.131807 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:50.131869 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.132000 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:50.132116 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:50.132158 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:50.134028 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.134128 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:50.136568 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.136655 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:50.136768 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:50.139019 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:50.140971 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.141073 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:50.141368 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.141458 139878739914752 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 11:02:50.141569 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:50.141609 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:50.141650 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:50.141718 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.143966 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:50.149405 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.149701 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:50.152358 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:50.164928 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:50.164990 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:50.165028 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:50.165061 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.165124 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.165703 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.165787 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.166153 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.166854 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.169347 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.169986 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.170070 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:50.170106 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:50.170165 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.170295 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:50.170408 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:50.170449 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:50.172369 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.172469 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:50.174897 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.174983 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:50.175096 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:50.177292 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:50.179238 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.179340 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:50.179636 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.179725 139878739914752 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 11:02:50.179835 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:50.179876 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:50.179910 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:50.179974 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.182222 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:50.187606 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.187886 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:50.190929 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:50.203551 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:50.203613 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:50.203651 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:50.203686 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.203749 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.204307 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.204391 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.204754 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.205449 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.207930 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.208558 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.208642 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:50.208678 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:50.208738 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.208868 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:50.208982 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:50.209023 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:50.210936 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.211037 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:50.213453 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.213539 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:50.213658 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:50.215886 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:50.217843 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.217946 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:50.218240 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.218330 139878739914752 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 11:02:50.218441 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:50.218481 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:50.218515 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:50.218579 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.220813 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:50.226242 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.226514 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:50.229202 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:50.241799 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:50.241861 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:50.241899 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:50.241933 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.241998 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.242565 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.242648 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.243011 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.243700 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.246190 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.246818 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.246902 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:50.246939 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:50.246999 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.247129 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:50.247242 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:50.247285 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:50.249194 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.249296 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:50.251703 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.251790 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:50.251901 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:50.254085 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:50.256021 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.256124 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:50.256421 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.256510 139878739914752 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 11:02:50.256620 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:50.256660 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:50.256694 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:50.256760 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.259036 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:50.264472 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.264744 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:50.267419 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:50.280251 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:50.280313 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:50.280350 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:50.280384 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.280447 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.281006 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.281088 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.281450 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.282150 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.284611 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.285237 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.285320 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:50.285356 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:50.285416 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.285544 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:50.285667 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:50.285710 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:50.287609 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.287708 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:50.290116 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.290203 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:50.290315 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:50.292513 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:50.294450 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.294551 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:50.294847 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.294935 139878739914752 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 11:02:50.295047 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:50.295090 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:50.295123 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:50.295188 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.297427 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:50.302856 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.303123 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:50.305989 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:50.318486 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:50.318550 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:50.318590 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:50.318624 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.318689 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.319251 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.319335 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.319703 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.320390 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.322871 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.323494 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.323578 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:50.323614 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:50.323673 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.323802 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:50.323917 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:50.323960 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:50.325875 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.325976 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:50.328382 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.328468 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:50.328579 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:50.330791 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:50.332720 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.332824 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:50.333120 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.333209 139878739914752 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 11:02:50.333322 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:50.333361 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:50.333396 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:50.333459 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.335715 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:50.341150 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.341424 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:50.344118 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:50.356637 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:50.356709 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:50.356749 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:50.356782 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.356845 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.357405 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.357487 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.357859 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.358551 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.361032 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.361660 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.361745 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:50.361782 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:50.361844 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.361975 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:50.362089 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:50.362130 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:50.364040 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.364139 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:50.366559 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.366643 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:50.366756 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:50.368952 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:50.370830 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.370931 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:50.371224 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.371312 139878739914752 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 11:02:50.371423 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:50.371463 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:50.371497 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:50.371560 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.374166 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:50.379599 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.379866 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:50.382465 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:50.394975 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:50.395039 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:50.395086 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:50.395122 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.395186 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.395747 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.395830 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.396188 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.396883 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.399444 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.400073 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.400156 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:50.400193 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:50.400252 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.400381 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:50.400498 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:50.400540 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:50.402403 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.402501 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:50.404898 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.404981 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:50.405091 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:50.407371 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:50.409222 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.409322 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:50.409615 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.409708 139878739914752 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 11:02:50.409821 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:50.409860 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:50.409894 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:50.409958 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.412211 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:50.417619 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.417894 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:50.420557 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:50.433085 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:50.433147 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:50.433186 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:50.433228 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.433292 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.433921 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.434005 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.434375 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.435066 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.437540 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.438173 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.438257 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:50.438295 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:50.438355 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.438484 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:50.438597 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:50.438640 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:50.440496 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.440595 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:50.443073 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.443163 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:50.443278 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:50.445482 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:50.447366 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.447467 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:50.447758 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.447844 139878739914752 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 11:02:50.447955 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:50.447995 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:50.448029 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:50.448092 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.450346 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:50.455853 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.456124 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:50.458752 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:50.471336 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:50.471398 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:50.471436 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:50.471491 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.471561 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.472119 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.472201 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.472561 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.473252 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.475742 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.476768 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.476852 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:50.476890 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:50.476949 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.477080 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:50.477192 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:50.477234 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:50.479137 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.479235 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:50.481652 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.481737 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:50.481853 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:50.484061 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:50.486010 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.486112 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:50.486408 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.486494 139878739914752 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 11:02:50.486605 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:50.486645 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:50.486679 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:50.486740 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.488977 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:50.494397 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.494664 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:50.497258 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:50.509882 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:50.509944 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:50.509982 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:50.510015 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.510088 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.510661 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.510743 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.511099 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.511787 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.514332 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.514958 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.515042 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:50.515079 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:50.515138 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.515268 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:50.515387 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:50.515429 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:50.517292 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.517390 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:50.519808 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.519892 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:50.520006 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:50.522279 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:50.524158 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.524259 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:50.524553 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.524640 139878739914752 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 11:02:50.524751 139878739914752 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:50.524791 139878739914752 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:50.524826 139878739914752 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:50.524889 139878739914752 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.527141 139878739914752 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:50.532572 139878739914752 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.532841 139878739914752 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:50.535545 139878739914752 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:50.548051 139878739914752 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:50.548113 139878739914752 attention.py:418] Single window, no scan.
I0123 11:02:50.548151 139878739914752 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:50.548185 139878739914752 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.548256 139878739914752 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.548867 139878739914752 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.548949 139878739914752 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.549317 139878739914752 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.550037 139878739914752 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.552541 139878739914752 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.553173 139878739914752 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.553256 139878739914752 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:50.553293 139878739914752 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:50.553352 139878739914752 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.553481 139878739914752 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:50.553596 139878739914752 nn_components.py:325] mlp: activation = None
I0123 11:02:50.553638 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:50.555524 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.555621 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:50.558107 139878739914752 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.558192 139878739914752 transformer_base.py:443] tbase: final FFN
I0123 11:02:50.558305 139878739914752 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:50.560554 139878739914752 nn_components.py:329] mlp: final activation = None
I0123 11:02:50.562442 139878739914752 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.562543 139878739914752 nn_components.py:261] mlp: residual
I0123 11:02:50.562837 139878739914752 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:50.562928 139878739914752 decoder_stack.py:344] dstack: Final layernorm.
I0123 11:02:50.565786 139878739914752 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:03:04.801433 139878739914752 alphageometry.py:566] LM output (score=-0.283780): "j : D d e d j 12 T b c d j 13 ;"
I0123 11:03:04.801776 139878739914752 alphageometry.py:567] Translation: "j = on_circle j d e, on_tline j d b c"

I0123 11:03:04.801845 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c ? coll i d h"
I0123 11:03:04.801980 139878739914752 graph.py:498] 
I0123 11:03:04.802041 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c ? coll i d h
I0123 11:03:05.351585 139878739914752 ddar.py:60] Depth 1/1000 time = 0.5247259140014648
I0123 11:03:05.706999 139878739914752 ddar.py:60] Depth 2/1000 time = 0.3551959991455078
I0123 11:03:06.225981 139878739914752 ddar.py:60] Depth 3/1000 time = 0.5188043117523193
I0123 11:03:06.584819 139878739914752 ddar.py:60] Depth 4/1000 time = 0.3583502769470215
I0123 11:03:07.120853 139878739914752 ddar.py:60] Depth 5/1000 time = 0.5330045223236084
I0123 11:03:07.121554 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:03:07.121720 139878739914752 alphageometry.py:566] LM output (score=-0.817123): "j : C b c j 12 T b c d j 13 ;"
I0123 11:03:07.121772 139878739914752 alphageometry.py:567] Translation: "j = on_line j b c, on_tline j d b c"

I0123 11:03:07.121814 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c ? coll i d h"
I0123 11:03:07.121956 139878739914752 graph.py:498] 
I0123 11:03:07.122007 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c ? coll i d h
I0123 11:03:07.654194 139878739914752 ddar.py:60] Depth 1/1000 time = 0.5092101097106934
I0123 11:03:08.069356 139878739914752 ddar.py:60] Depth 2/1000 time = 0.41494131088256836
I0123 11:03:08.705681 139878739914752 ddar.py:60] Depth 3/1000 time = 0.6361429691314697
I0123 11:03:08.707927 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:03:08.708050 139878739914752 alphageometry.py:566] LM output (score=-1.164629): "j : C a c j 12 T a c d j 13 ;"
I0123 11:03:08.708092 139878739914752 alphageometry.py:567] Translation: "j = on_line j a c, on_tline j d a c"

I0123 11:03:08.708132 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c ? coll i d h"
I0123 11:03:08.708269 139878739914752 graph.py:498] 
I0123 11:03:08.708322 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c ? coll i d h
I0123 11:03:09.266851 139878739914752 ddar.py:60] Depth 1/1000 time = 0.5343897342681885
I0123 11:03:09.749904 139878739914752 ddar.py:60] Depth 2/1000 time = 0.4828348159790039
I0123 11:03:10.471924 139878739914752 ddar.py:60] Depth 3/1000 time = 0.7218425273895264
I0123 11:03:11.195612 139878739914752 ddar.py:60] Depth 4/1000 time = 0.7234346866607666
I0123 11:03:11.756208 139878739914752 ddar.py:60] Depth 5/1000 time = 0.5601203441619873
I0123 11:03:11.759625 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:03:11.759746 139878739914752 alphageometry.py:566] LM output (score=-1.639965): "j : C c e j 12 D c j e j 13 ;"
I0123 11:03:11.759787 139878739914752 alphageometry.py:567] Translation: "j = on_line j c e, on_bline j e c"

I0123 11:03:11.759828 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c ? coll i d h"
I0123 11:03:11.759959 139878739914752 graph.py:498] 
I0123 11:03:11.760012 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c ? coll i d h
I0123 11:03:12.299693 139878739914752 ddar.py:60] Depth 1/1000 time = 0.5177299976348877
I0123 11:03:13.807128 139878739914752 ddar.py:60] Depth 2/1000 time = 1.5071971416473389
I0123 11:03:15.570307 139878739914752 ddar.py:60] Depth 3/1000 time = 1.762944221496582
I0123 11:03:17.151540 139878739914752 ddar.py:60] Depth 4/1000 time = 1.580725908279419
I0123 11:03:17.155237 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:03:17.155353 139878739914752 alphageometry.py:566] LM output (score=-2.073666): "j : C d f j 12 D d j f j 13 ;"
I0123 11:03:17.155420 139878739914752 alphageometry.py:567] Translation: "j = on_line j d f, on_bline j f d"

I0123 11:03:17.155463 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d ? coll i d h"
I0123 11:03:17.155597 139878739914752 graph.py:498] 
I0123 11:03:17.155648 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d ? coll i d h
I0123 11:03:17.705242 139878739914752 ddar.py:60] Depth 1/1000 time = 0.5269124507904053
I0123 11:03:19.069807 139878739914752 ddar.py:60] Depth 2/1000 time = 1.3643243312835693
I0123 11:03:20.710459 139878739914752 ddar.py:60] Depth 3/1000 time = 1.6403956413269043
I0123 11:03:22.137487 139878739914752 ddar.py:60] Depth 4/1000 time = 1.4265506267547607
I0123 11:03:22.141346 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:03:22.141473 139878739914752 alphageometry.py:566] LM output (score=-2.119891): "j : C e f j 12 D e j f j 13 ;"
I0123 11:03:22.141514 139878739914752 alphageometry.py:567] Translation: "j = on_line j e f, on_bline j f e"

I0123 11:03:22.141554 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e ? coll i d h"
I0123 11:03:22.141695 139878739914752 graph.py:498] 
I0123 11:03:22.141749 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e ? coll i d h
I0123 11:03:22.850208 139878739914752 ddar.py:60] Depth 1/1000 time = 0.6831691265106201
I0123 11:03:23.807636 139878739914752 ddar.py:60] Depth 2/1000 time = 0.9571936130523682
I0123 11:03:24.616713 139878739914752 ddar.py:60] Depth 3/1000 time = 0.8088464736938477
I0123 11:03:25.583134 139878739914752 ddar.py:60] Depth 4/1000 time = 0.9659814834594727
I0123 11:03:25.585191 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:03:25.585312 139878739914752 alphageometry.py:566] LM output (score=-2.342918): "j : C b f j 12 D b j f j 13 ;"
I0123 11:03:25.585355 139878739914752 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 11:03:25.585394 139878739914752 alphageometry.py:566] LM output (score=-2.560043): "j : D d j d e 12 T b c d j 13 ;"
I0123 11:03:25.585425 139878739914752 alphageometry.py:567] Translation: "j = on_circle j d e, on_tline j d b c"

I0123 11:03:25.585458 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c ? coll i d h"
I0123 11:03:25.585593 139878739914752 graph.py:498] 
I0123 11:03:25.585650 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c ? coll i d h
I0123 11:03:26.091703 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4808695316314697
I0123 11:03:26.446164 139878739914752 ddar.py:60] Depth 2/1000 time = 0.3542439937591553
I0123 11:03:26.976983 139878739914752 ddar.py:60] Depth 3/1000 time = 0.5306580066680908
I0123 11:03:27.345058 139878739914752 ddar.py:60] Depth 4/1000 time = 0.36512207984924316
I0123 11:03:27.345620 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:03:27.345736 139878739914752 alphageometry.py:566] LM output (score=-2.561329): "j : D d e d j 12 T a c d j 13 ;"
I0123 11:03:27.345778 139878739914752 alphageometry.py:567] Translation: "j = on_circle j d e, on_tline j d a c"

I0123 11:03:27.345818 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c ? coll i d h"
I0123 11:03:27.345951 139878739914752 graph.py:498] 
I0123 11:03:27.346002 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c ? coll i d h
I0123 11:03:27.849983 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4781002998352051
I0123 11:03:28.201416 139878739914752 ddar.py:60] Depth 2/1000 time = 0.35121703147888184
I0123 11:03:28.736934 139878739914752 ddar.py:60] Depth 3/1000 time = 0.5353009700775146
I0123 11:03:29.090009 139878739914752 ddar.py:60] Depth 4/1000 time = 0.3524739742279053
I0123 11:03:29.679619 139878739914752 ddar.py:60] Depth 5/1000 time = 0.5888736248016357
I0123 11:03:30.104663 139878739914752 ddar.py:60] Depth 6/1000 time = 0.4248223304748535
I0123 11:03:30.847537 139878739914752 ddar.py:60] Depth 7/1000 time = 0.7426960468292236
I0123 11:03:31.557635 139878739914752 ddar.py:60] Depth 8/1000 time = 0.7098386287689209
I0123 11:03:32.138091 139878739914752 ddar.py:60] Depth 9/1000 time = 0.5802273750305176
I0123 11:03:32.142472 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:03:32.142607 139878739914752 alphageometry.py:566] LM output (score=-2.646089): "j : D a c a j 12 D c d d j 13 ;"
I0123 11:03:32.142649 139878739914752 alphageometry.py:567] Translation: "j = on_circle j a c, on_circle j d c"

I0123 11:03:32.142688 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j a c, on_circle j d c ? coll i d h"
I0123 11:03:32.142828 139878739914752 graph.py:498] 
I0123 11:03:32.142885 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j a c, on_circle j d c ? coll i d h
I0123 11:03:32.679975 139878739914752 ddar.py:60] Depth 1/1000 time = 0.5108368396759033
I0123 11:03:33.073426 139878739914752 ddar.py:60] Depth 2/1000 time = 0.39322686195373535
I0123 11:03:33.738660 139878739914752 ddar.py:60] Depth 3/1000 time = 0.6650915145874023
I0123 11:03:34.826856 139878739914752 ddar.py:60] Depth 4/1000 time = 1.087991714477539
I0123 11:03:35.951699 139878739914752 ddar.py:60] Depth 5/1000 time = 1.1246140003204346
I0123 11:03:36.951063 139878739914752 ddar.py:60] Depth 6/1000 time = 0.9991271495819092
I0123 11:03:38.205207 139878739914752 ddar.py:60] Depth 7/1000 time = 1.2539246082305908
I0123 11:03:39.758213 139878739914752 ddar.py:60] Depth 8/1000 time = 1.5527853965759277
I0123 11:03:41.291550 139878739914752 ddar.py:60] Depth 9/1000 time = 1.5330960750579834
I0123 11:03:42.867232 139878739914752 ddar.py:60] Depth 10/1000 time = 1.575413703918457
I0123 11:03:44.407896 139878739914752 ddar.py:60] Depth 11/1000 time = 1.540074110031128
I0123 11:03:45.993981 139878739914752 ddar.py:60] Depth 12/1000 time = 1.5749046802520752
I0123 11:03:47.728338 139878739914752 ddar.py:60] Depth 13/1000 time = 1.7341272830963135
I0123 11:03:49.464335 139878739914752 ddar.py:60] Depth 14/1000 time = 1.7357325553894043
I0123 11:03:49.467431 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:03:49.467564 139878739914752 alphageometry.py:566] LM output (score=-2.655253): "j : C b g j 12 D b j g j 13 ;"
I0123 11:03:49.467644 139878739914752 alphageometry.py:567] Translation: "j = on_line j b g, on_bline j g b"

I0123 11:03:49.467685 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b g, on_bline j g b ? coll i d h"
I0123 11:03:49.467843 139878739914752 graph.py:498] 
I0123 11:03:49.467903 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b g, on_bline j g b ? coll i d h
I0123 11:03:50.011738 139878739914752 ddar.py:60] Depth 1/1000 time = 0.5206539630889893
I0123 11:03:51.383914 139878739914752 ddar.py:60] Depth 2/1000 time = 1.3719351291656494
I0123 11:03:52.860452 139878739914752 ddar.py:60] Depth 3/1000 time = 1.4762942790985107
I0123 11:03:54.361083 139878739914752 ddar.py:60] Depth 4/1000 time = 1.5001380443572998
I0123 11:03:54.363280 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:03:54.363417 139878739914752 alphageometry.py:566] LM output (score=-2.724514): "j : C b c j 12 D b j c j 13 ;"
I0123 11:03:54.363458 139878739914752 alphageometry.py:567] Translation: "j = on_line j b c, on_bline j c b"

I0123 11:03:54.363501 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_bline j c b ? coll i d h"
I0123 11:03:54.363635 139878739914752 graph.py:498] 
I0123 11:03:54.363687 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_bline j c b ? coll i d h
I0123 11:03:54.711772 139878739914752 ddar.py:60] Depth 1/1000 time = 0.3253204822540283
I0123 11:03:56.233501 139878739914752 ddar.py:60] Depth 2/1000 time = 1.5215904712677002
I0123 11:03:57.862872 139878739914752 ddar.py:60] Depth 3/1000 time = 1.629082202911377
I0123 11:03:59.480188 139878739914752 ddar.py:60] Depth 4/1000 time = 1.6167895793914795
I0123 11:03:59.483049 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:03:59.483201 139878739914752 alphageometry.py:566] LM output (score=-2.816103): "j : C a f j 12 D a j f j 13 ;"
I0123 11:03:59.483245 139878739914752 alphageometry.py:567] Translation: "j = on_line j a f, on_bline j f a"

I0123 11:03:59.483287 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a f, on_bline j f a ? coll i d h"
I0123 11:03:59.483429 139878739914752 graph.py:498] 
I0123 11:03:59.483487 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a f, on_bline j f a ? coll i d h
I0123 11:04:00.402873 139878739914752 ddar.py:60] Depth 1/1000 time = 0.8947947025299072
I0123 11:04:01.167587 139878739914752 ddar.py:60] Depth 2/1000 time = 0.7644803524017334
I0123 11:04:02.111814 139878739914752 ddar.py:60] Depth 3/1000 time = 0.9439833164215088
I0123 11:04:03.054198 139878739914752 ddar.py:60] Depth 4/1000 time = 0.9418830871582031
I0123 11:04:03.056336 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:04:03.056457 139878739914752 alphageometry.py:566] LM output (score=-2.844472): "j : D c d c j 12 T c d c j 13 ;"
I0123 11:04:03.056502 139878739914752 alphageometry.py:567] Translation: "j = on_circle j c d, on_tline j c c d"

I0123 11:04:03.056544 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j c d, on_tline j c c d ? coll i d h"
I0123 11:04:03.056729 139878739914752 graph.py:498] 
I0123 11:04:03.056782 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j c d, on_tline j c c d ? coll i d h
I0123 11:04:03.404354 139878739914752 ddar.py:60] Depth 1/1000 time = 0.3205995559692383
I0123 11:04:03.990293 139878739914752 ddar.py:60] Depth 2/1000 time = 0.5858056545257568
I0123 11:04:04.435524 139878739914752 ddar.py:60] Depth 3/1000 time = 0.4450345039367676
I0123 11:04:05.020247 139878739914752 ddar.py:60] Depth 4/1000 time = 0.5843453407287598
I0123 11:04:05.413229 139878739914752 ddar.py:60] Depth 5/1000 time = 0.3925318717956543
I0123 11:04:05.809099 139878739914752 ddar.py:60] Depth 6/1000 time = 0.3941764831542969
I0123 11:04:05.809956 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:04:05.810063 139878739914752 alphageometry.py:566] LM output (score=-2.949043): "j : C a c j 12 D a j c j 13 ;"
I0123 11:04:05.810103 139878739914752 alphageometry.py:567] Translation: "j = on_line j a c, on_bline j c a"

I0123 11:04:05.810144 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_bline j c a ? coll i d h"
I0123 11:04:05.810274 139878739914752 graph.py:498] 
I0123 11:04:05.810326 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_bline j c a ? coll i d h
I0123 11:04:06.345792 139878739914752 ddar.py:60] Depth 1/1000 time = 0.5131912231445312
I0123 11:04:07.861543 139878739914752 ddar.py:60] Depth 2/1000 time = 1.5155274868011475
I0123 11:04:09.472247 139878739914752 ddar.py:60] Depth 3/1000 time = 1.6104462146759033
I0123 11:04:11.306710 139878739914752 ddar.py:60] Depth 4/1000 time = 1.8339414596557617
I0123 11:04:11.309585 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:04:11.309720 139878739914752 alphageometry.py:566] LM output (score=-3.160685): "j : C f d j 12 D f j d j 13 ;"
I0123 11:04:11.309764 139878739914752 alphageometry.py:567] Translation: "j = on_line j f d, on_bline j d f"

I0123 11:04:11.309805 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j f d, on_bline j d f ? coll i d h"
I0123 11:04:11.309941 139878739914752 graph.py:498] 
I0123 11:04:11.309991 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j f d, on_bline j d f ? coll i d h
I0123 11:04:11.677838 139878739914752 ddar.py:60] Depth 1/1000 time = 0.34557342529296875
I0123 11:04:13.137010 139878739914752 ddar.py:60] Depth 2/1000 time = 1.4590277671813965
I0123 11:04:14.644772 139878739914752 ddar.py:60] Depth 3/1000 time = 1.5074975490570068
I0123 11:04:16.121534 139878739914752 ddar.py:60] Depth 4/1000 time = 1.4762253761291504
I0123 11:04:16.124861 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:04:16.125005 139878739914752 alphageometry.py:566] LM output (score=-3.175853): "j : C f g j 12 D f j g j 13 ;"
I0123 11:04:16.125049 139878739914752 alphageometry.py:567] Translation: "j = on_line j f g, on_bline j g f"

I0123 11:04:16.125097 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j f g, on_bline j g f ? coll i d h"
I0123 11:04:16.125267 139878739914752 graph.py:498] 
I0123 11:04:16.125328 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j f g, on_bline j g f ? coll i d h
I0123 11:04:16.488811 139878739914752 ddar.py:60] Depth 1/1000 time = 0.34044408798217773
I0123 11:04:17.894531 139878739914752 ddar.py:60] Depth 2/1000 time = 1.4055900573730469
I0123 11:04:19.392432 139878739914752 ddar.py:60] Depth 3/1000 time = 1.4976589679718018
I0123 11:04:20.894267 139878739914752 ddar.py:60] Depth 4/1000 time = 1.5013682842254639
I0123 11:04:20.897669 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:04:20.897791 139878739914752 alphageometry.py:566] LM output (score=-3.186058): "j : D a c c j 12 D a d d j 13 ;"
I0123 11:04:20.897833 139878739914752 alphageometry.py:567] Translation: "j = on_circle j c a, on_circle j d a"

I0123 11:04:20.897871 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j c a, on_circle j d a ? coll i d h"
I0123 11:04:20.898006 139878739914752 graph.py:498] 
I0123 11:04:20.898055 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j c a, on_circle j d a ? coll i d h
I0123 11:04:21.500103 139878739914752 ddar.py:60] Depth 1/1000 time = 0.5756528377532959
I0123 11:04:21.924317 139878739914752 ddar.py:60] Depth 2/1000 time = 0.42403721809387207
I0123 11:04:22.675471 139878739914752 ddar.py:60] Depth 3/1000 time = 0.7509973049163818
I0123 11:04:23.270445 139878739914752 ddar.py:60] Depth 4/1000 time = 0.5947160720825195
I0123 11:04:24.095894 139878739914752 ddar.py:60] Depth 5/1000 time = 0.8252360820770264
I0123 11:04:24.958767 139878739914752 ddar.py:60] Depth 6/1000 time = 0.8626425266265869
I0123 11:04:25.706187 139878739914752 ddar.py:60] Depth 7/1000 time = 0.7471959590911865
I0123 11:04:26.816480 139878739914752 ddar.py:60] Depth 8/1000 time = 1.1101231575012207
I0123 11:04:28.223115 139878739914752 ddar.py:60] Depth 9/1000 time = 1.4063999652862549
I0123 11:04:29.437334 139878739914752 ddar.py:60] Depth 10/1000 time = 1.2140026092529297
I0123 11:04:30.868206 139878739914752 ddar.py:60] Depth 11/1000 time = 1.4306983947753906
I0123 11:04:32.297851 139878739914752 ddar.py:60] Depth 12/1000 time = 1.429028034210205
I0123 11:04:33.760231 139878739914752 ddar.py:60] Depth 13/1000 time = 1.449554204940796
I0123 11:04:35.178208 139878739914752 ddar.py:60] Depth 14/1000 time = 1.417659044265747
I0123 11:04:36.833867 139878739914752 ddar.py:60] Depth 15/1000 time = 1.6554622650146484
I0123 11:04:36.837891 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:04:36.838038 139878739914752 alphageometry.py:566] LM output (score=-3.487507): "j : C d e j 12 D d e e j 13 ;"
I0123 11:04:36.838085 139878739914752 alphageometry.py:567] Translation: "j = on_line j d e, on_circle j e d"

I0123 11:04:36.838126 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d e, on_circle j e d ? coll i d h"
I0123 11:04:36.838269 139878739914752 graph.py:498] 
I0123 11:04:36.838329 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d e, on_circle j e d ? coll i d h
I0123 11:04:37.566282 139878739914752 ddar.py:60] Depth 1/1000 time = 0.7050180435180664
I0123 11:04:38.964679 139878739914752 ddar.py:60] Depth 2/1000 time = 1.398162603378296
I0123 11:04:40.256552 139878739914752 ddar.py:60] Depth 3/1000 time = 1.2916326522827148
I0123 11:04:41.532717 139878739914752 ddar.py:60] Depth 4/1000 time = 1.2756624221801758
I0123 11:04:41.542084 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:04:41.542202 139878739914752 alphageometry.py:566] LM output (score=-3.499879): "j : C e g j 12 D e j g j 13 ;"
I0123 11:04:41.542243 139878739914752 alphageometry.py:567] Translation: "j = on_line j e g, on_bline j g e"

I0123 11:04:41.542281 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e g, on_bline j g e ? coll i d h"
I0123 11:04:41.542411 139878739914752 graph.py:498] 
I0123 11:04:41.542460 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e g, on_bline j g e ? coll i d h
I0123 11:04:41.955548 139878739914752 ddar.py:60] Depth 1/1000 time = 0.390841007232666
I0123 11:04:43.365837 139878739914752 ddar.py:60] Depth 2/1000 time = 1.4101505279541016
I0123 11:04:44.845077 139878739914752 ddar.py:60] Depth 3/1000 time = 1.478989839553833
I0123 11:04:46.338684 139878739914752 ddar.py:60] Depth 4/1000 time = 1.4930977821350098
I0123 11:04:46.341305 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:04:46.341434 139878739914752 alphageometry.py:566] LM output (score=-3.649003): "j : C c d j 12 D c j d j 13 ;"
I0123 11:04:46.341478 139878739914752 alphageometry.py:567] Translation: "j = on_line j c d, on_bline j d c"

I0123 11:04:46.341523 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c d, on_bline j d c ? coll i d h"
I0123 11:04:46.341670 139878739914752 graph.py:498] 
I0123 11:04:46.341723 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c d, on_bline j d c ? coll i d h
I0123 11:04:46.953297 139878739914752 ddar.py:60] Depth 1/1000 time = 0.5885441303253174
I0123 11:04:47.610879 139878739914752 ddar.py:60] Depth 2/1000 time = 0.6573445796966553
I0123 11:04:48.279922 139878739914752 ddar.py:60] Depth 3/1000 time = 0.6687960624694824
I0123 11:04:48.737766 139878739914752 ddar.py:60] Depth 4/1000 time = 0.4573845863342285
I0123 11:04:48.739735 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:04:48.739853 139878739914752 alphageometry.py:566] LM output (score=-3.698729): "j : D a e d j 12 D a j d e 13 ;"
I0123 11:04:48.739896 139878739914752 alphageometry.py:567] Translation: "j = eqdistance j d a e, eqdistance j a d e"

I0123 11:04:48.739938 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = eqdistance j d a e, eqdistance j a d e ? coll i d h"
I0123 11:04:48.740074 139878739914752 graph.py:498] 
I0123 11:04:48.740125 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = eqdistance j d a e, eqdistance j a d e ? coll i d h
I0123 11:04:49.310989 139878739914752 ddar.py:60] Depth 1/1000 time = 0.5452375411987305
I0123 11:04:49.717336 139878739914752 ddar.py:60] Depth 2/1000 time = 0.4061284065246582
I0123 11:04:50.400345 139878739914752 ddar.py:60] Depth 3/1000 time = 0.6828494071960449
I0123 11:04:50.899682 139878739914752 ddar.py:60] Depth 4/1000 time = 0.49913835525512695
I0123 11:04:51.614691 139878739914752 ddar.py:60] Depth 5/1000 time = 0.714848518371582
I0123 11:04:52.108911 139878739914752 ddar.py:60] Depth 6/1000 time = 0.4937551021575928
I0123 11:04:52.112831 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:04:52.112943 139878739914752 alphageometry.py:566] LM output (score=-3.730065): "j : D e d j d 12 T b c j d 13 ;"
I0123 11:04:52.112984 139878739914752 alphageometry.py:567] Translation: "j = on_circle j d e, on_tline j d b c"

I0123 11:04:52.113023 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c ? coll i d h"
I0123 11:04:52.113157 139878739914752 graph.py:498] 
I0123 11:04:52.113205 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c ? coll i d h
I0123 11:04:52.651243 139878739914752 ddar.py:60] Depth 1/1000 time = 0.5127596855163574
I0123 11:04:53.002627 139878739914752 ddar.py:60] Depth 2/1000 time = 0.3511505126953125
I0123 11:04:53.576920 139878739914752 ddar.py:60] Depth 3/1000 time = 0.5741393566131592
I0123 11:04:53.933457 139878739914752 ddar.py:60] Depth 4/1000 time = 0.3560822010040283
I0123 11:04:54.512975 139878739914752 ddar.py:60] Depth 5/1000 time = 0.576807975769043
I0123 11:04:54.513736 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:04:54.513906 139878739914752 alphageometry.py:566] LM output (score=-3.739413): "j : D c d c j 12 D c d d j 13 ;"
I0123 11:04:54.513957 139878739914752 alphageometry.py:567] Translation: "j = on_circle j c d, on_circle j d c"

I0123 11:04:54.514010 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j c d, on_circle j d c ? coll i d h"
I0123 11:04:54.514167 139878739914752 graph.py:498] 
I0123 11:04:54.514230 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j c d, on_circle j d c ? coll i d h
I0123 11:04:54.871068 139878739914752 ddar.py:60] Depth 1/1000 time = 0.3317995071411133
I0123 11:04:55.479807 139878739914752 ddar.py:60] Depth 2/1000 time = 0.608595609664917
I0123 11:04:55.848424 139878739914752 ddar.py:60] Depth 3/1000 time = 0.36840033531188965
I0123 11:04:56.438372 139878739914752 ddar.py:60] Depth 4/1000 time = 0.5895812511444092
I0123 11:04:56.811526 139878739914752 ddar.py:60] Depth 5/1000 time = 0.37267613410949707
I0123 11:04:57.407865 139878739914752 ddar.py:60] Depth 6/1000 time = 0.5944621562957764
I0123 11:04:57.408503 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:04:57.408625 139878739914752 alphageometry.py:566] LM output (score=-3.750422): "j : D d e e j 12 T d e e j 13 ;"
I0123 11:04:57.408666 139878739914752 alphageometry.py:567] Translation: "j = on_circle j e d, on_tline j e d e"

I0123 11:04:57.408704 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j e d, on_tline j e d e ? coll i d h"
I0123 11:04:57.408844 139878739914752 graph.py:498] 
I0123 11:04:57.408893 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j e d, on_tline j e d e ? coll i d h
I0123 11:04:58.178871 139878739914752 ddar.py:60] Depth 1/1000 time = 0.7468342781066895
I0123 11:04:59.191514 139878739914752 ddar.py:60] Depth 2/1000 time = 1.012216567993164
I0123 11:04:59.987478 139878739914752 ddar.py:60] Depth 3/1000 time = 0.795729398727417
I0123 11:05:00.983972 139878739914752 ddar.py:60] Depth 4/1000 time = 0.9960057735443115
I0123 11:05:01.786820 139878739914752 ddar.py:60] Depth 5/1000 time = 0.8022642135620117
I0123 11:05:01.788461 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:05:01.788578 139878739914752 alphageometry.py:566] LM output (score=-3.838382): "j : C c e j 12 D c e e j 13 ;"
I0123 11:05:01.788620 139878739914752 alphageometry.py:567] Translation: "j = on_line j c e, on_circle j e c"

I0123 11:05:01.788659 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_circle j e c ? coll i d h"
I0123 11:05:01.788787 139878739914752 graph.py:498] 
I0123 11:05:01.788837 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_circle j e c ? coll i d h
I0123 11:05:02.366239 139878739914752 ddar.py:60] Depth 1/1000 time = 0.5553233623504639
I0123 11:05:02.772556 139878739914752 ddar.py:60] Depth 2/1000 time = 0.4060962200164795
I0123 11:05:03.423354 139878739914752 ddar.py:60] Depth 3/1000 time = 0.6506359577178955
I0123 11:05:04.078630 139878739914752 ddar.py:60] Depth 4/1000 time = 0.6547863483428955
I0123 11:05:04.080885 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:05:04.080996 139878739914752 alphageometry.py:566] LM output (score=-3.843457): "j : D c f f j 12 T a f c j 13 ;"
I0123 11:05:04.081036 139878739914752 alphageometry.py:567] Translation: "j = on_circle j f c, on_tline j c a f"

I0123 11:05:04.081075 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j f c, on_tline j c a f ? coll i d h"
I0123 11:05:04.081210 139878739914752 graph.py:498] 
I0123 11:05:04.081261 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j f c, on_tline j c a f ? coll i d h
I0123 11:05:04.457516 139878739914752 ddar.py:60] Depth 1/1000 time = 0.3480854034423828
I0123 11:05:05.532178 139878739914752 ddar.py:60] Depth 2/1000 time = 1.0745365619659424
I0123 11:05:06.833051 139878739914752 ddar.py:60] Depth 3/1000 time = 1.3006277084350586
I0123 11:05:08.421530 139878739914752 ddar.py:60] Depth 4/1000 time = 1.588214635848999
I0123 11:05:10.011498 139878739914752 ddar.py:60] Depth 5/1000 time = 1.589446783065796
I0123 11:05:10.020995 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:05:10.021116 139878739914752 alphageometry.py:566] LM output (score=-3.866922): "j : D c d c j 12 D d f f j 13 ;"
I0123 11:05:10.021158 139878739914752 alphageometry.py:567] Translation: "j = on_circle j c d, on_circle j f d"

I0123 11:05:10.021196 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j c d, on_circle j f d ? coll i d h"
I0123 11:05:10.021327 139878739914752 graph.py:498] 
I0123 11:05:10.021377 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j c d, on_circle j f d ? coll i d h
I0123 11:05:10.390696 139878739914752 ddar.py:60] Depth 1/1000 time = 0.34342384338378906
I0123 11:05:11.162633 139878739914752 ddar.py:60] Depth 2/1000 time = 0.7718009948730469
I0123 11:05:11.844205 139878739914752 ddar.py:60] Depth 3/1000 time = 0.6813654899597168
I0123 11:05:12.732946 139878739914752 ddar.py:60] Depth 4/1000 time = 0.8885238170623779
I0123 11:05:12.739037 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:05:12.739183 139878739914752 alphageometry.py:566] LM output (score=-3.877774): "j : C b e j 12 D b e e j 13 ;"
I0123 11:05:12.739228 139878739914752 alphageometry.py:567] Translation: "j = on_line j b e, on_circle j e b"

I0123 11:05:12.739270 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b e, on_circle j e b ? coll i d h"
I0123 11:05:12.739401 139878739914752 graph.py:498] 
I0123 11:05:12.739455 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b e, on_circle j e b ? coll i d h
I0123 11:05:13.516147 139878739914752 ddar.py:60] Depth 1/1000 time = 0.7523665428161621
I0123 11:05:14.641406 139878739914752 ddar.py:60] Depth 2/1000 time = 1.1250243186950684
I0123 11:05:15.751764 139878739914752 ddar.py:60] Depth 3/1000 time = 1.110166072845459
I0123 11:05:16.667631 139878739914752 ddar.py:60] Depth 4/1000 time = 0.9152402877807617
I0123 11:05:16.669853 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:05:16.669994 139878739914752 alphageometry.py:566] LM output (score=-3.887677): "j : D e d j d 12 T b c d d 13 ;"
I0123 11:05:16.670043 139878739914752 alphageometry.py:567] Translation: "ERROR: j not found in predicate args."

I0123 11:05:16.670081 139878739914752 alphageometry.py:566] LM output (score=-3.905854): "j : D e d j d 12 T a c d d 13 ;"
I0123 11:05:16.670111 139878739914752 alphageometry.py:567] Translation: "ERROR: j not found in predicate args."

I0123 11:05:16.670142 139878739914752 alphageometry.py:566] LM output (score=-4.025918): "j : C b c j 12 T b c f j 13 ;"
I0123 11:05:16.670172 139878739914752 alphageometry.py:567] Translation: "j = on_line j b c, on_tline j f b c"

I0123 11:05:16.670204 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j f b c ? coll i d h"
I0123 11:05:16.670341 139878739914752 graph.py:498] 
I0123 11:05:16.670396 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j f b c ? coll i d h
I0123 11:05:17.052753 139878739914752 ddar.py:60] Depth 1/1000 time = 0.35683417320251465
I0123 11:05:18.649021 139878739914752 ddar.py:60] Depth 2/1000 time = 1.5961272716522217
I0123 11:05:20.281728 139878739914752 ddar.py:60] Depth 3/1000 time = 1.6324713230133057
I0123 11:05:21.916166 139878739914752 ddar.py:60] Depth 4/1000 time = 1.6339287757873535
I0123 11:05:21.918879 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:05:21.919016 139878739914752 alphageometry.py:540] Depth 1. There are 29 nodes to expand:
I0123 11:05:21.919064 139878739914752 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : D d e d j 12 T b c d j 13 ; x00
I0123 11:05:21.919100 139878739914752 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : C b c j 12 T b c d j 13 ; x00
I0123 11:05:21.919129 139878739914752 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : C a c j 12 T a c d j 13 ; x00
I0123 11:05:21.919182 139878739914752 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : C c e j 12 D c j e j 13 ; x00
I0123 11:05:21.919213 139878739914752 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : C d f j 12 D d j f j 13 ; x00
I0123 11:05:21.919243 139878739914752 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : C e f j 12 D e j f j 13 ; x00
I0123 11:05:21.919269 139878739914752 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : D d j d e 12 T b c d j 13 ; x00
I0123 11:05:21.919295 139878739914752 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : D d e d j 12 T a c d j 13 ; x00
I0123 11:05:21.919322 139878739914752 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : D a c a j 12 D c d d j 13 ; x00
I0123 11:05:21.919348 139878739914752 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : C b g j 12 D b j g j 13 ; x00
I0123 11:05:21.919373 139878739914752 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : C b c j 12 D b j c j 13 ; x00
I0123 11:05:21.919399 139878739914752 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : C a f j 12 D a j f j 13 ; x00
I0123 11:05:21.919426 139878739914752 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : D c d c j 12 T c d c j 13 ; x00
I0123 11:05:21.919453 139878739914752 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : C a c j 12 D a j c j 13 ; x00
I0123 11:05:21.919479 139878739914752 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : C f d j 12 D f j d j 13 ; x00
I0123 11:05:21.919506 139878739914752 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : C f g j 12 D f j g j 13 ; x00
I0123 11:05:21.919537 139878739914752 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : D a c c j 12 D a d d j 13 ; x00
I0123 11:05:21.919564 139878739914752 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : C d e j 12 D d e e j 13 ; x00
I0123 11:05:21.919592 139878739914752 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : C e g j 12 D e j g j 13 ; x00
I0123 11:05:21.919618 139878739914752 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : C c d j 12 D c j d j 13 ; x00
I0123 11:05:21.919643 139878739914752 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : D a e d j 12 D a j d e 13 ; x00
I0123 11:05:21.919670 139878739914752 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : D e d j d 12 T b c j d 13 ; x00
I0123 11:05:21.919695 139878739914752 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : D c d c j 12 D c d d j 13 ; x00
I0123 11:05:21.919720 139878739914752 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : D d e e j 12 T d e e j 13 ; x00
I0123 11:05:21.919747 139878739914752 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : C c e j 12 D c e e j 13 ; x00
I0123 11:05:21.919772 139878739914752 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : D c f f j 12 T a f c j 13 ; x00
I0123 11:05:21.919796 139878739914752 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : D c d c j 12 D d f f j 13 ; x00
I0123 11:05:21.919820 139878739914752 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : C b e j 12 D b e e j 13 ; x00
I0123 11:05:21.919851 139878739914752 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : C b c j 12 T b c f j 13 ; x00
I0123 11:05:21.919880 139878739914752 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : D d e d j 12 T b c d j 13 ; x00
I0123 11:05:32.352001 139878739914752 alphageometry.py:566] LM output (score=-0.049189): "k : C a c k 14 T a c d k 15 ;"
I0123 11:05:32.352206 139878739914752 alphageometry.py:567] Translation: "k = on_line k a c, on_tline k d a c"

I0123 11:05:32.352259 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k a c, on_tline k d a c ? coll i d h"
I0123 11:05:32.352398 139878739914752 graph.py:498] 
I0123 11:05:32.352453 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k a c, on_tline k d a c ? coll i d h
I0123 11:05:32.796658 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4121687412261963
I0123 11:05:34.579123 139878739914752 ddar.py:60] Depth 2/1000 time = 1.7823288440704346
I0123 11:05:36.536931 139878739914752 ddar.py:60] Depth 3/1000 time = 1.957564115524292
I0123 11:05:38.260135 139878739914752 ddar.py:60] Depth 4/1000 time = 1.7229187488555908
I0123 11:05:40.249810 139878739914752 ddar.py:60] Depth 5/1000 time = 1.9891526699066162
I0123 11:05:42.240656 139878739914752 ddar.py:60] Depth 6/1000 time = 1.990499496459961
I0123 11:05:44.254945 139878739914752 ddar.py:60] Depth 7/1000 time = 2.014014482498169
I0123 11:05:44.264371 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:05:44.264436 139878739914752 alphageometry.py:566] LM output (score=-1.976228): "k : C b c k 14 T b c d k 15 ;"
I0123 11:05:44.264474 139878739914752 alphageometry.py:567] Translation: "k = on_line k b c, on_tline k d b c"

I0123 11:05:44.264514 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b c, on_tline k d b c ? coll i d h"
I0123 11:05:44.264660 139878739914752 graph.py:498] 
I0123 11:05:44.264713 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b c, on_tline k d b c ? coll i d h
I0123 11:05:44.988929 139878739914752 ddar.py:60] Depth 1/1000 time = 0.6981096267700195
I0123 11:05:45.549418 139878739914752 ddar.py:60] Depth 2/1000 time = 0.5602586269378662
I0123 11:05:46.408514 139878739914752 ddar.py:60] Depth 3/1000 time = 0.8589212894439697
I0123 11:05:47.269155 139878739914752 ddar.py:60] Depth 4/1000 time = 0.8601334095001221
I0123 11:05:47.910542 139878739914752 ddar.py:60] Depth 5/1000 time = 0.6383266448974609
I0123 11:05:48.785959 139878739914752 ddar.py:60] Depth 6/1000 time = 0.8740110397338867
I0123 11:05:48.786217 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:05:48.786302 139878739914752 alphageometry.py:566] LM output (score=-2.063249): "k : C e f k 14 D e k f k 15 ;"
I0123 11:05:48.786569 139878739914752 alphageometry.py:567] Translation: "k = on_line k e f, on_bline k f e"

I0123 11:05:48.786609 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k e f, on_bline k f e ? coll i d h"
I0123 11:05:48.786771 139878739914752 graph.py:498] 
I0123 11:05:48.786835 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k e f, on_bline k f e ? coll i d h
I0123 11:05:49.874551 139878739914752 ddar.py:60] Depth 1/1000 time = 1.0541090965270996
I0123 11:05:50.843224 139878739914752 ddar.py:60] Depth 2/1000 time = 0.9684154987335205
I0123 11:05:52.039900 139878739914752 ddar.py:60] Depth 3/1000 time = 1.1964352130889893
I0123 11:05:53.004190 139878739914752 ddar.py:60] Depth 4/1000 time = 0.9637572765350342
I0123 11:05:54.234760 139878739914752 ddar.py:60] Depth 5/1000 time = 1.2269220352172852
I0123 11:05:54.236253 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:05:54.236322 139878739914752 alphageometry.py:566] LM output (score=-2.183554): "k : C b g k 14 D b k g k 15 ;"
I0123 11:05:54.236361 139878739914752 alphageometry.py:567] Translation: "k = on_line k b g, on_bline k g b"

I0123 11:05:54.236402 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b g, on_bline k g b ? coll i d h"
I0123 11:05:54.236548 139878739914752 graph.py:498] 
I0123 11:05:54.236603 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b g, on_bline k g b ? coll i d h
I0123 11:05:54.653718 139878739914752 ddar.py:60] Depth 1/1000 time = 0.3857274055480957
I0123 11:05:56.338732 139878739914752 ddar.py:60] Depth 2/1000 time = 1.6848735809326172
I0123 11:05:58.114841 139878739914752 ddar.py:60] Depth 3/1000 time = 1.7756688594818115
I0123 11:05:59.587812 139878739914752 ddar.py:60] Depth 4/1000 time = 1.472466230392456
I0123 11:06:01.327224 139878739914752 ddar.py:60] Depth 5/1000 time = 1.7355175018310547
I0123 11:06:01.328457 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:06:01.328531 139878739914752 alphageometry.py:566] LM output (score=-2.330591): "k : D d k d j 14 T a c d k 15 ;"
I0123 11:06:01.328570 139878739914752 alphageometry.py:567] Translation: "k = on_circle k d j, on_tline k d a c"

I0123 11:06:01.328612 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_circle k d j, on_tline k d a c ? coll i d h"
I0123 11:06:01.328760 139878739914752 graph.py:498] 
I0123 11:06:01.328813 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_circle k d j, on_tline k d a c ? coll i d h
I0123 11:06:02.833504 139878739914752 ddar.py:60] Depth 1/1000 time = 1.4687962532043457
I0123 11:06:04.193770 139878739914752 ddar.py:60] Depth 2/1000 time = 1.3600215911865234
I0123 11:06:05.600616 139878739914752 ddar.py:60] Depth 3/1000 time = 1.406637191772461
I0123 11:06:06.981519 139878739914752 ddar.py:60] Depth 4/1000 time = 1.3803799152374268
I0123 11:06:08.404874 139878739914752 ddar.py:60] Depth 5/1000 time = 1.4213330745697021
I0123 11:06:10.378394 139878739914752 ddar.py:60] Depth 6/1000 time = 1.973222017288208
I0123 11:06:12.932118 139878739914752 ddar.py:60] Depth 7/1000 time = 2.5534729957580566
I0123 11:06:15.144377 139878739914752 ddar.py:60] Depth 8/1000 time = 2.211998701095581
I0123 11:06:18.304636 139878739914752 ddar.py:60] Depth 9/1000 time = 3.160017967224121
I0123 11:06:21.565584 139878739914752 ddar.py:60] Depth 10/1000 time = 3.260676622390747
I0123 11:06:24.693034 139878739914752 ddar.py:60] Depth 11/1000 time = 3.1271727085113525
I0123 11:06:28.185390 139878739914752 ddar.py:60] Depth 12/1000 time = 3.492114543914795
I0123 11:06:32.391918 139878739914752 ddar.py:60] Depth 13/1000 time = 4.206264972686768
I0123 11:06:36.919658 139878739914752 ddar.py:60] Depth 14/1000 time = 4.5274786949157715
I0123 11:06:43.608213 139878739914752 ddar.py:60] Depth 15/1000 time = 6.6882524490356445
I0123 11:06:49.495436 139878739914752 ddar.py:60] Depth 16/1000 time = 5.886759042739868
I0123 11:06:55.816253 139878739914752 ddar.py:60] Depth 17/1000 time = 6.320355653762817
I0123 11:07:02.141105 139878739914752 ddar.py:60] Depth 18/1000 time = 6.29144549369812
I0123 11:07:08.499914 139878739914752 ddar.py:60] Depth 19/1000 time = 6.358380556106567
I0123 11:07:15.153192 139878739914752 ddar.py:60] Depth 20/1000 time = 6.65277886390686
I0123 11:07:15.158942 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:07:15.159072 139878739914752 alphageometry.py:566] LM output (score=-2.480202): "k : C c e k 14 D c k e k 15 ;"
I0123 11:07:15.159113 139878739914752 alphageometry.py:567] Translation: "k = on_line k c e, on_bline k e c"

I0123 11:07:15.159161 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k c e, on_bline k e c ? coll i d h"
I0123 11:07:15.159328 139878739914752 graph.py:498] 
I0123 11:07:15.159390 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k c e, on_bline k e c ? coll i d h
I0123 11:07:15.591123 139878739914752 ddar.py:60] Depth 1/1000 time = 0.39969873428344727
I0123 11:07:17.442903 139878739914752 ddar.py:60] Depth 2/1000 time = 1.85164475440979
I0123 11:07:19.354308 139878739914752 ddar.py:60] Depth 3/1000 time = 1.911158800125122
I0123 11:07:21.278539 139878739914752 ddar.py:60] Depth 4/1000 time = 1.9236876964569092
I0123 11:07:23.223031 139878739914752 ddar.py:60] Depth 5/1000 time = 1.9402446746826172
I0123 11:07:23.226050 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:07:23.226104 139878739914752 alphageometry.py:566] LM output (score=-2.597108): "k : C b f k 14 D b k f k 15 ;"
I0123 11:07:23.226139 139878739914752 alphageometry.py:567] Translation: "k = on_line k b f, on_bline k f b"

I0123 11:07:23.226176 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b f, on_bline k f b ? coll i d h"
I0123 11:07:23.226318 139878739914752 graph.py:498] 
I0123 11:07:23.226364 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b f, on_bline k f b ? coll i d h
I0123 11:07:24.084292 139878739914752 ddar.py:60] Depth 1/1000 time = 0.8253247737884521
I0123 11:07:25.041857 139878739914752 ddar.py:60] Depth 2/1000 time = 0.9573502540588379
I0123 11:07:26.280639 139878739914752 ddar.py:60] Depth 3/1000 time = 1.238548755645752
I0123 11:07:27.240357 139878739914752 ddar.py:60] Depth 4/1000 time = 0.9591999053955078
I0123 11:07:28.474929 139878739914752 ddar.py:60] Depth 5/1000 time = 1.230703353881836
I0123 11:07:28.476390 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:07:28.476465 139878739914752 alphageometry.py:566] LM output (score=-2.830027): "k : C b j k 14 D b k j k 15 ;"
I0123 11:07:28.476503 139878739914752 alphageometry.py:567] Translation: "k = on_line k b j, on_bline k j b"

I0123 11:07:28.476541 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b j, on_bline k j b ? coll i d h"
I0123 11:07:28.476699 139878739914752 graph.py:498] 
I0123 11:07:28.476755 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b j, on_bline k j b ? coll i d h
I0123 11:07:28.882932 139878739914752 ddar.py:60] Depth 1/1000 time = 0.3753330707550049
I0123 11:07:29.569392 139878739914752 ddar.py:60] Depth 2/1000 time = 0.6863467693328857
I0123 11:07:30.006392 139878739914752 ddar.py:60] Depth 3/1000 time = 0.43681812286376953
I0123 11:07:30.692211 139878739914752 ddar.py:60] Depth 4/1000 time = 0.6855034828186035
I0123 11:07:31.142817 139878739914752 ddar.py:60] Depth 5/1000 time = 0.44734883308410645
I0123 11:07:31.143668 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:07:31.143723 139878739914752 alphageometry.py:566] LM output (score=-2.948041): "k : C b e k 14 D b e e k 15 ;"
I0123 11:07:31.143759 139878739914752 alphageometry.py:567] Translation: "k = on_line k b e, on_circle k e b"

I0123 11:07:31.143796 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b e, on_circle k e b ? coll i d h"
I0123 11:07:31.143935 139878739914752 graph.py:498] 
I0123 11:07:31.143983 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b e, on_circle k e b ? coll i d h
I0123 11:07:32.260864 139878739914752 ddar.py:60] Depth 1/1000 time = 1.0850026607513428
I0123 11:07:33.266998 139878739914752 ddar.py:60] Depth 2/1000 time = 1.005918264389038
I0123 11:07:34.261349 139878739914752 ddar.py:60] Depth 3/1000 time = 0.9941301345825195
I0123 11:07:35.504047 139878739914752 ddar.py:60] Depth 4/1000 time = 1.24224853515625
I0123 11:07:36.522012 139878739914752 ddar.py:60] Depth 5/1000 time = 1.0137698650360107
I0123 11:07:36.522891 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:07:36.522951 139878739914752 alphageometry.py:566] LM output (score=-3.082684): "k : C b d k 14 D b k d k 15 ;"
I0123 11:07:36.522987 139878739914752 alphageometry.py:567] Translation: "k = on_line k b d, on_bline k d b"

I0123 11:07:36.523025 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b d, on_bline k d b ? coll i d h"
I0123 11:07:36.523164 139878739914752 graph.py:498] 
I0123 11:07:36.523211 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b d, on_bline k d b ? coll i d h
I0123 11:07:37.194671 139878739914752 ddar.py:60] Depth 1/1000 time = 0.6404907703399658
I0123 11:07:38.651971 139878739914752 ddar.py:60] Depth 2/1000 time = 1.45707368850708
I0123 11:07:40.410295 139878739914752 ddar.py:60] Depth 3/1000 time = 1.7580595016479492
I0123 11:07:42.170753 139878739914752 ddar.py:60] Depth 4/1000 time = 1.7599775791168213
I0123 11:07:43.985594 139878739914752 ddar.py:60] Depth 5/1000 time = 1.8110792636871338
I0123 11:07:43.986559 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:07:43.986620 139878739914752 alphageometry.py:566] LM output (score=-3.088198): "k : C d f k 14 D d k f k 15 ;"
I0123 11:07:43.986657 139878739914752 alphageometry.py:567] Translation: "k = on_line k d f, on_bline k f d"

I0123 11:07:43.986695 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k d f, on_bline k f d ? coll i d h"
I0123 11:07:43.986829 139878739914752 graph.py:498] 
I0123 11:07:43.986880 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k d f, on_bline k f d ? coll i d h
I0123 11:07:44.418498 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4012877941131592
I0123 11:07:45.880969 139878739914752 ddar.py:60] Depth 2/1000 time = 1.462353229522705
I0123 11:07:47.665048 139878739914752 ddar.py:60] Depth 3/1000 time = 1.7838609218597412
I0123 11:07:49.407970 139878739914752 ddar.py:60] Depth 4/1000 time = 1.7424166202545166
I0123 11:07:50.948721 139878739914752 ddar.py:60] Depth 5/1000 time = 1.5364124774932861
I0123 11:07:50.951600 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:07:50.951682 139878739914752 alphageometry.py:566] LM output (score=-3.234746): "k : C b e k 14 D b e b k 15 ;"
I0123 11:07:50.951722 139878739914752 alphageometry.py:567] Translation: "k = on_line k b e, on_circle k b e"

I0123 11:07:50.951762 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b e, on_circle k b e ? coll i d h"
I0123 11:07:50.951919 139878739914752 graph.py:498] 
I0123 11:07:50.951976 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b e, on_circle k b e ? coll i d h
I0123 11:07:51.815102 139878739914752 ddar.py:60] Depth 1/1000 time = 0.830146074295044
I0123 11:07:52.970512 139878739914752 ddar.py:60] Depth 2/1000 time = 1.1551926136016846
I0123 11:07:53.865589 139878739914752 ddar.py:60] Depth 3/1000 time = 0.8948578834533691
I0123 11:07:54.766564 139878739914752 ddar.py:60] Depth 4/1000 time = 0.9005136489868164
I0123 11:07:55.934150 139878739914752 ddar.py:60] Depth 5/1000 time = 1.1643562316894531
I0123 11:07:55.935235 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:07:55.935295 139878739914752 alphageometry.py:566] LM output (score=-3.414998): "k : C b e k 14 D a e a k 15 ;"
I0123 11:07:55.935333 139878739914752 alphageometry.py:567] Translation: "k = on_line k b e, on_circle k a e"

I0123 11:07:55.935369 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b e, on_circle k a e ? coll i d h"
I0123 11:07:55.935513 139878739914752 graph.py:498] 
I0123 11:07:55.935560 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b e, on_circle k a e ? coll i d h
I0123 11:07:56.789758 139878739914752 ddar.py:60] Depth 1/1000 time = 0.821711540222168
I0123 11:07:57.945333 139878739914752 ddar.py:60] Depth 2/1000 time = 1.1553616523742676
I0123 11:07:58.848364 139878739914752 ddar.py:60] Depth 3/1000 time = 0.9028072357177734
I0123 11:07:59.755058 139878739914752 ddar.py:60] Depth 4/1000 time = 0.9062304496765137
I0123 11:08:00.927325 139878739914752 ddar.py:60] Depth 5/1000 time = 1.1688823699951172
I0123 11:08:00.928079 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:08:00.928140 139878739914752 alphageometry.py:566] LM output (score=-3.599735): "k : C b g k 14 D b g b k 15 ;"
I0123 11:08:00.928177 139878739914752 alphageometry.py:567] Translation: "k = on_line k b g, on_circle k b g"

I0123 11:08:00.928212 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b g, on_circle k b g ? coll i d h"
I0123 11:08:00.928364 139878739914752 graph.py:498] 
I0123 11:08:00.928413 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b g, on_circle k b g ? coll i d h
I0123 11:08:01.349427 139878739914752 ddar.py:60] Depth 1/1000 time = 0.3907606601715088
I0123 11:08:02.122808 139878739914752 ddar.py:60] Depth 2/1000 time = 0.7732582092285156
I0123 11:08:02.634648 139878739914752 ddar.py:60] Depth 3/1000 time = 0.5116209983825684
I0123 11:08:03.414304 139878739914752 ddar.py:60] Depth 4/1000 time = 0.7792882919311523
I0123 11:08:03.943843 139878739914752 ddar.py:60] Depth 5/1000 time = 0.525303840637207
I0123 11:08:03.944977 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:08:03.945053 139878739914752 alphageometry.py:566] LM output (score=-3.623221): "k : C b e k 14 D d e d k 15 ;"
I0123 11:08:03.945090 139878739914752 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 11:08:03.945136 139878739914752 alphageometry.py:566] LM output (score=-3.644214): "k : C b e k 14 D b k e k 15 ;"
I0123 11:08:03.945165 139878739914752 alphageometry.py:567] Translation: "k = on_line k b e, on_bline k e b"

I0123 11:08:03.945199 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b e, on_bline k e b ? coll i d h"
I0123 11:08:03.945355 139878739914752 graph.py:498] 
I0123 11:08:03.945408 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b e, on_bline k e b ? coll i d h
I0123 11:08:05.094480 139878739914752 ddar.py:60] Depth 1/1000 time = 1.1171631813049316
I0123 11:08:05.998872 139878739914752 ddar.py:60] Depth 2/1000 time = 0.9041595458984375
I0123 11:08:06.897487 139878739914752 ddar.py:60] Depth 3/1000 time = 0.898383617401123
I0123 11:08:08.066624 139878739914752 ddar.py:60] Depth 4/1000 time = 1.1686925888061523
I0123 11:08:08.988735 139878739914752 ddar.py:60] Depth 5/1000 time = 0.9186151027679443
I0123 11:08:08.989624 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:08:08.989695 139878739914752 alphageometry.py:566] LM output (score=-3.727528): "k : C e j k 14 D e k j k 15 ;"
I0123 11:08:08.989761 139878739914752 alphageometry.py:567] Translation: "k = on_line k e j, on_bline k j e"

I0123 11:08:08.989800 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k e j, on_bline k j e ? coll i d h"
I0123 11:08:08.989943 139878739914752 graph.py:498] 
I0123 11:08:08.989993 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k e j, on_bline k j e ? coll i d h
I0123 11:08:09.403712 139878739914752 ddar.py:60] Depth 1/1000 time = 0.38269710540771484
I0123 11:08:10.159605 139878739914752 ddar.py:60] Depth 2/1000 time = 0.7557699680328369
I0123 11:08:10.691459 139878739914752 ddar.py:60] Depth 3/1000 time = 0.531663179397583
I0123 11:08:11.487982 139878739914752 ddar.py:60] Depth 4/1000 time = 0.796377420425415
I0123 11:08:12.019141 139878739914752 ddar.py:60] Depth 5/1000 time = 0.5307097434997559
I0123 11:08:12.856439 139878739914752 ddar.py:60] Depth 6/1000 time = 0.8321454524993896
I0123 11:08:12.857179 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:08:12.857229 139878739914752 alphageometry.py:566] LM output (score=-3.805412): "k : C d e k 14 D d e d k 15 ;"
I0123 11:08:12.857265 139878739914752 alphageometry.py:567] Translation: "k = on_line k d e, on_circle k d e"

I0123 11:08:12.857302 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k d e, on_circle k d e ? coll i d h"
I0123 11:08:12.857442 139878739914752 graph.py:498] 
I0123 11:08:12.857491 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k d e, on_circle k d e ? coll i d h
I0123 11:08:14.675995 139878739914752 ddar.py:60] Depth 1/1000 time = 1.789865493774414
I0123 11:08:16.943538 139878739914752 ddar.py:60] Depth 2/1000 time = 2.2673182487487793
I0123 11:08:19.240780 139878739914752 ddar.py:60] Depth 3/1000 time = 2.297008991241455
I0123 11:08:21.549457 139878739914752 ddar.py:60] Depth 4/1000 time = 2.3081915378570557
I0123 11:08:23.934195 139878739914752 ddar.py:60] Depth 5/1000 time = 2.3796050548553467
I0123 11:08:23.935189 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:08:23.935266 139878739914752 alphageometry.py:566] LM output (score=-3.894724): "k : C a f k 14 D a k f k 15 ;"
I0123 11:08:23.935307 139878739914752 alphageometry.py:567] Translation: "k = on_line k a f, on_bline k f a"

I0123 11:08:23.935347 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k a f, on_bline k f a ? coll i d h"
I0123 11:08:23.935488 139878739914752 graph.py:498] 
I0123 11:08:23.935540 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k a f, on_bline k f a ? coll i d h
I0123 11:08:24.810634 139878739914752 ddar.py:60] Depth 1/1000 time = 0.8431646823883057
I0123 11:08:25.763270 139878739914752 ddar.py:60] Depth 2/1000 time = 0.9523825645446777
I0123 11:08:26.695248 139878739914752 ddar.py:60] Depth 3/1000 time = 0.9317419528961182
I0123 11:08:27.901264 139878739914752 ddar.py:60] Depth 4/1000 time = 1.2055308818817139
I0123 11:08:28.866846 139878739914752 ddar.py:60] Depth 5/1000 time = 0.9620208740234375
I0123 11:08:28.868298 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:08:28.868358 139878739914752 alphageometry.py:566] LM output (score=-3.922808): "k : C f g k 14 D f k g k 15 ;"
I0123 11:08:28.868395 139878739914752 alphageometry.py:567] Translation: "k = on_line k f g, on_bline k g f"

I0123 11:08:28.868432 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k f g, on_bline k g f ? coll i d h"
I0123 11:08:28.868569 139878739914752 graph.py:498] 
I0123 11:08:28.868617 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k f g, on_bline k g f ? coll i d h
I0123 11:08:29.562163 139878739914752 ddar.py:60] Depth 1/1000 time = 0.6630089282989502
I0123 11:08:31.018675 139878739914752 ddar.py:60] Depth 2/1000 time = 1.4562931060791016
I0123 11:08:32.845124 139878739914752 ddar.py:60] Depth 3/1000 time = 1.826202154159546
I0123 11:08:34.369841 139878739914752 ddar.py:60] Depth 4/1000 time = 1.5242362022399902
I0123 11:08:35.919919 139878739914752 ddar.py:60] Depth 5/1000 time = 1.5459094047546387
I0123 11:08:35.922593 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:08:35.922661 139878739914752 alphageometry.py:566] LM output (score=-4.025786): "k : C b c k 14 T b c f k 15 ;"
I0123 11:08:35.922700 139878739914752 alphageometry.py:567] Translation: "k = on_line k b c, on_tline k f b c"

I0123 11:08:35.922738 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b c, on_tline k f b c ? coll i d h"
I0123 11:08:35.922882 139878739914752 graph.py:498] 
I0123 11:08:35.922931 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b c, on_tline k f b c ? coll i d h
I0123 11:08:36.629536 139878739914752 ddar.py:60] Depth 1/1000 time = 0.6728835105895996
I0123 11:08:38.514423 139878739914752 ddar.py:60] Depth 2/1000 time = 1.8846559524536133
I0123 11:08:40.188309 139878739914752 ddar.py:60] Depth 3/1000 time = 1.6736586093902588
I0123 11:08:41.838142 139878739914752 ddar.py:60] Depth 4/1000 time = 1.6492390632629395
I0123 11:08:43.815735 139878739914752 ddar.py:60] Depth 5/1000 time = 1.9740192890167236
I0123 11:08:43.817557 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:08:43.817651 139878739914752 alphageometry.py:566] LM output (score=-4.103479): "k : C a j k 14 D a k j k 15 ;"
I0123 11:08:43.817694 139878739914752 alphageometry.py:567] Translation: "k = on_line k a j, on_bline k j a"

I0123 11:08:43.817737 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k a j, on_bline k j a ? coll i d h"
I0123 11:08:43.817891 139878739914752 graph.py:498] 
I0123 11:08:43.817947 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k a j, on_bline k j a ? coll i d h
I0123 11:08:44.225182 139878739914752 ddar.py:60] Depth 1/1000 time = 0.37646031379699707
I0123 11:08:44.945301 139878739914752 ddar.py:60] Depth 2/1000 time = 0.7200107574462891
I0123 11:08:45.380329 139878739914752 ddar.py:60] Depth 3/1000 time = 0.43482089042663574
I0123 11:08:46.086048 139878739914752 ddar.py:60] Depth 4/1000 time = 0.7053680419921875
I0123 11:08:46.535622 139878739914752 ddar.py:60] Depth 5/1000 time = 0.44614243507385254
I0123 11:08:46.536458 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:08:46.536511 139878739914752 alphageometry.py:566] LM output (score=-4.138630): "k : C g h k 14 D g k h k 15 ;"
I0123 11:08:46.536547 139878739914752 alphageometry.py:567] Translation: "k = on_line k g h, on_bline k h g"

I0123 11:08:46.536583 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k g h, on_bline k h g ? coll i d h"
I0123 11:08:46.536720 139878739914752 graph.py:498] 
I0123 11:08:46.536767 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k g h, on_bline k h g ? coll i d h
I0123 11:08:47.323719 139878739914752 ddar.py:60] Depth 1/1000 time = 0.7567212581634521
I0123 11:08:48.143354 139878739914752 ddar.py:60] Depth 2/1000 time = 0.8194169998168945
I0123 11:08:48.965120 139878739914752 ddar.py:60] Depth 3/1000 time = 0.8215441703796387
I0123 11:08:49.782877 139878739914752 ddar.py:60] Depth 4/1000 time = 0.8173296451568604
I0123 11:08:50.620832 139878739914752 ddar.py:60] Depth 5/1000 time = 0.8345856666564941
I0123 11:08:50.621532 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:08:50.621589 139878739914752 alphageometry.py:566] LM output (score=-4.167202): "k : C b j k 14 D d j d k 15 ;"
I0123 11:08:50.621627 139878739914752 alphageometry.py:567] Translation: "k = on_line k b j, on_circle k d j"

I0123 11:08:50.621671 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b j, on_circle k d j ? coll i d h"
I0123 11:08:50.621811 139878739914752 graph.py:498] 
I0123 11:08:50.621859 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b j, on_circle k d j ? coll i d h
I0123 11:08:51.988955 139878739914752 ddar.py:60] Depth 1/1000 time = 1.3390882015228271
I0123 11:08:53.813162 139878739914752 ddar.py:60] Depth 2/1000 time = 1.8239877223968506
I0123 11:08:55.309071 139878739914752 ddar.py:60] Depth 3/1000 time = 1.4957168102264404
I0123 11:08:56.800106 139878739914752 ddar.py:60] Depth 4/1000 time = 1.490527868270874
I0123 11:08:58.298588 139878739914752 ddar.py:60] Depth 5/1000 time = 1.4946155548095703
I0123 11:08:58.299911 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:08:58.299963 139878739914752 alphageometry.py:566] LM output (score=-4.182548): "k : C j f k 14 D j k f k 15 ;"
I0123 11:08:58.299998 139878739914752 alphageometry.py:567] Translation: "k = on_line k j f, on_bline k f j"

I0123 11:08:58.300035 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k j f, on_bline k f j ? coll i d h"
I0123 11:08:58.300175 139878739914752 graph.py:498] 
I0123 11:08:58.300223 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k j f, on_bline k f j ? coll i d h
I0123 11:08:58.711612 139878739914752 ddar.py:60] Depth 1/1000 time = 0.3810117244720459
I0123 11:08:59.477782 139878739914752 ddar.py:60] Depth 2/1000 time = 0.7660493850708008
I0123 11:08:59.959038 139878739914752 ddar.py:60] Depth 3/1000 time = 0.48105740547180176
I0123 11:09:00.720446 139878739914752 ddar.py:60] Depth 4/1000 time = 0.7610321044921875
I0123 11:09:01.223082 139878739914752 ddar.py:60] Depth 5/1000 time = 0.49920058250427246
I0123 11:09:01.224526 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:09:01.224606 139878739914752 alphageometry.py:566] LM output (score=-4.204371): "k : C c e k 14 D c e e k 15 ;"
I0123 11:09:01.224642 139878739914752 alphageometry.py:567] Translation: "k = on_line k c e, on_circle k e c"

I0123 11:09:01.224689 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k c e, on_circle k e c ? coll i d h"
I0123 11:09:01.224848 139878739914752 graph.py:498] 
I0123 11:09:01.224900 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k c e, on_circle k e c ? coll i d h
I0123 11:09:01.641272 139878739914752 ddar.py:60] Depth 1/1000 time = 0.3865547180175781
I0123 11:09:02.443408 139878739914752 ddar.py:60] Depth 2/1000 time = 0.8020181655883789
I0123 11:09:02.966266 139878739914752 ddar.py:60] Depth 3/1000 time = 0.5226438045501709
I0123 11:09:03.779763 139878739914752 ddar.py:60] Depth 4/1000 time = 0.8131206035614014
I0123 11:09:04.322298 139878739914752 ddar.py:60] Depth 5/1000 time = 0.5389840602874756
I0123 11:09:04.323837 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:09:04.323894 139878739914752 alphageometry.py:566] LM output (score=-4.210268): "k : C c j k 14 D c k j k 15 ;"
I0123 11:09:04.323932 139878739914752 alphageometry.py:567] Translation: "k = on_line k c j, on_bline k j c"

I0123 11:09:04.323970 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k c j, on_bline k j c ? coll i d h"
I0123 11:09:04.324120 139878739914752 graph.py:498] 
I0123 11:09:04.324169 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k c j, on_bline k j c ? coll i d h
I0123 11:09:05.014211 139878739914752 ddar.py:60] Depth 1/1000 time = 0.6589651107788086
I0123 11:09:05.480204 139878739914752 ddar.py:60] Depth 2/1000 time = 0.465792179107666
I0123 11:09:06.240197 139878739914752 ddar.py:60] Depth 3/1000 time = 0.7598447799682617
I0123 11:09:06.715233 139878739914752 ddar.py:60] Depth 4/1000 time = 0.4745662212371826
I0123 11:09:07.485842 139878739914752 ddar.py:60] Depth 5/1000 time = 0.7672944068908691
I0123 11:09:07.487508 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:09:07.487568 139878739914752 alphageometry.py:566] LM output (score=-4.310205): "k : C a d k 14 T a d f k 15 ;"
I0123 11:09:07.487605 139878739914752 alphageometry.py:567] Translation: "k = on_line k a d, on_tline k f a d"

I0123 11:09:07.487641 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k a d, on_tline k f a d ? coll i d h"
I0123 11:09:07.487782 139878739914752 graph.py:498] 
I0123 11:09:07.487829 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k a d, on_tline k f a d ? coll i d h
I0123 11:09:07.914136 139878739914752 ddar.py:60] Depth 1/1000 time = 0.39427876472473145
I0123 11:09:08.428591 139878739914752 ddar.py:60] Depth 2/1000 time = 0.5143535137176514
I0123 11:09:09.353464 139878739914752 ddar.py:60] Depth 3/1000 time = 0.9247500896453857
I0123 11:09:09.995810 139878739914752 ddar.py:60] Depth 4/1000 time = 0.6421353816986084
I0123 11:09:10.928547 139878739914752 ddar.py:60] Depth 5/1000 time = 0.9323523044586182
I0123 11:09:11.601021 139878739914752 ddar.py:60] Depth 6/1000 time = 0.6669936180114746
I0123 11:09:11.603113 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:09:11.603170 139878739914752 alphageometry.py:566] LM output (score=-4.317528): "k : C b g k 14 D b g g k 15 ;"
I0123 11:09:11.603205 139878739914752 alphageometry.py:567] Translation: "k = on_line k b g, on_circle k g b"

I0123 11:09:11.603241 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b g, on_circle k g b ? coll i d h"
I0123 11:09:11.603378 139878739914752 graph.py:498] 
I0123 11:09:11.603426 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b g, on_circle k g b ? coll i d h
I0123 11:09:12.298625 139878739914752 ddar.py:60] Depth 1/1000 time = 0.6646277904510498
I0123 11:09:12.744788 139878739914752 ddar.py:60] Depth 2/1000 time = 0.44596362113952637
I0123 11:09:13.483471 139878739914752 ddar.py:60] Depth 3/1000 time = 0.7385356426239014
I0123 11:09:13.933878 139878739914752 ddar.py:60] Depth 4/1000 time = 0.44999027252197266
I0123 11:09:14.684910 139878739914752 ddar.py:60] Depth 5/1000 time = 0.7476871013641357
I0123 11:09:14.686122 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:09:14.686181 139878739914752 alphageometry.py:566] LM output (score=-4.377014): "k : C b c k 14 T b c g k 15 ;"
I0123 11:09:14.686218 139878739914752 alphageometry.py:567] Translation: "k = on_line k b c, on_tline k g b c"

I0123 11:09:14.686254 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b c, on_tline k g b c ? coll i d h"
I0123 11:09:14.686392 139878739914752 graph.py:498] 
I0123 11:09:14.686440 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b c, on_tline k g b c ? coll i d h
I0123 11:09:15.114796 139878739914752 ddar.py:60] Depth 1/1000 time = 0.39571166038513184
I0123 11:09:15.620154 139878739914752 ddar.py:60] Depth 2/1000 time = 0.5052614212036133
I0123 11:09:16.465116 139878739914752 ddar.py:60] Depth 3/1000 time = 0.844834566116333
I0123 11:09:17.026700 139878739914752 ddar.py:60] Depth 4/1000 time = 0.5610995292663574
I0123 11:09:17.890594 139878739914752 ddar.py:60] Depth 5/1000 time = 0.860950231552124
I0123 11:09:18.471963 139878739914752 ddar.py:60] Depth 6/1000 time = 0.5800786018371582
I0123 11:09:18.472129 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:09:18.472189 139878739914752 alphageometry.py:566] LM output (score=-4.449389): "k : C b f k 14 D b f f k 15 ;"
I0123 11:09:18.472225 139878739914752 alphageometry.py:567] Translation: "k = on_line k b f, on_circle k f b"

I0123 11:09:18.472287 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b f, on_circle k f b ? coll i d h"
I0123 11:09:18.472432 139878739914752 graph.py:498] 
I0123 11:09:18.472483 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b f, on_circle k f b ? coll i d h
I0123 11:09:19.689450 139878739914752 ddar.py:60] Depth 1/1000 time = 1.1856648921966553
I0123 11:09:20.894034 139878739914752 ddar.py:60] Depth 2/1000 time = 1.2043681144714355
I0123 11:09:22.090860 139878739914752 ddar.py:60] Depth 3/1000 time = 1.1965739727020264
I0123 11:09:23.299613 139878739914752 ddar.py:60] Depth 4/1000 time = 1.2081706523895264
I0123 11:09:24.797472 139878739914752 ddar.py:60] Depth 5/1000 time = 1.4923865795135498
I0123 11:09:24.798624 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:09:24.798694 139878739914752 alphageometry.py:566] LM output (score=-4.458890): "k : C a e k 14 D a e a k 15 ;"
I0123 11:09:24.798731 139878739914752 alphageometry.py:567] Translation: "k = on_line k a e, on_circle k a e"

I0123 11:09:24.798768 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k a e, on_circle k a e ? coll i d h"
I0123 11:09:24.798922 139878739914752 graph.py:498] 
I0123 11:09:24.798978 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k a e, on_circle k a e ? coll i d h
I0123 11:09:25.698544 139878739914752 ddar.py:60] Depth 1/1000 time = 0.8673193454742432
I0123 11:09:26.626598 139878739914752 ddar.py:60] Depth 2/1000 time = 0.9278309345245361
I0123 11:09:27.559740 139878739914752 ddar.py:60] Depth 3/1000 time = 0.9329204559326172
I0123 11:09:28.780253 139878739914752 ddar.py:60] Depth 4/1000 time = 1.2200450897216797
I0123 11:09:29.734146 139878739914752 ddar.py:60] Depth 5/1000 time = 0.9504282474517822
I0123 11:09:29.735099 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:09:29.735152 139878739914752 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : C b c j 12 T b c d j 13 ; x00
I0123 11:09:39.800276 139878739914752 alphageometry.py:566] LM output (score=-0.342194): "k : C a c k 14 T a c d k 15 ;"
I0123 11:09:39.800468 139878739914752 alphageometry.py:567] Translation: "k = on_line k a c, on_tline k d a c"

I0123 11:09:39.800511 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k a c, on_tline k d a c ? coll i d h"
I0123 11:09:39.800645 139878739914752 graph.py:498] 
I0123 11:09:39.800693 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k a c, on_tline k d a c ? coll i d h
I0123 11:09:40.299384 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4694960117340088
I0123 11:09:42.527228 139878739914752 ddar.py:60] Depth 2/1000 time = 2.2277214527130127
I0123 11:09:45.729132 139878739914752 ddar.py:60] Depth 3/1000 time = 3.2016773223876953
I0123 11:09:49.489489 139878739914752 ddar.py:60] Depth 4/1000 time = 3.7600831985473633
I0123 11:09:53.005825 139878739914752 ddar.py:60] Depth 5/1000 time = 3.516019105911255
I0123 11:09:57.472318 139878739914752 ddar.py:60] Depth 6/1000 time = 4.466266870498657
I0123 11:10:01.977594 139878739914752 ddar.py:60] Depth 7/1000 time = 4.505040168762207
I0123 11:10:06.152635 139878739914752 ddar.py:60] Depth 8/1000 time = 4.17477011680603
I0123 11:10:10.595618 139878739914752 ddar.py:60] Depth 9/1000 time = 4.442281723022461
I0123 11:10:14.845435 139878739914752 ddar.py:60] Depth 10/1000 time = 4.22501015663147
I0123 11:10:19.666808 139878739914752 ddar.py:60] Depth 11/1000 time = 4.821129083633423
I0123 11:10:24.162247 139878739914752 ddar.py:60] Depth 12/1000 time = 4.495195150375366
I0123 11:10:24.168031 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:10:24.168101 139878739914752 alphageometry.py:566] LM output (score=-0.629677): "k : D d k d j 14 T a c d k 15 ;"
I0123 11:10:24.168137 139878739914752 alphageometry.py:567] Translation: "k = on_circle k d j, on_tline k d a c"

I0123 11:10:24.168175 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_circle k d j, on_tline k d a c ? coll i d h"
I0123 11:10:24.168321 139878739914752 graph.py:498] 
I0123 11:10:24.168375 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_circle k d j, on_tline k d a c ? coll i d h
I0123 11:10:24.595305 139878739914752 ddar.py:60] Depth 1/1000 time = 0.39476490020751953
I0123 11:10:25.098543 139878739914752 ddar.py:60] Depth 2/1000 time = 0.5031352043151855
I0123 11:10:25.953091 139878739914752 ddar.py:60] Depth 3/1000 time = 0.8544344902038574
I0123 11:10:26.518135 139878739914752 ddar.py:60] Depth 4/1000 time = 0.5645885467529297
I0123 11:10:27.412681 139878739914752 ddar.py:60] Depth 5/1000 time = 0.8935835361480713
I0123 11:10:28.107864 139878739914752 ddar.py:60] Depth 6/1000 time = 0.694951057434082
I0123 11:10:29.423006 139878739914752 ddar.py:60] Depth 7/1000 time = 1.3149821758270264
I0123 11:10:30.405081 139878739914752 ddar.py:60] Depth 8/1000 time = 0.9818291664123535
I0123 11:10:31.818522 139878739914752 ddar.py:60] Depth 9/1000 time = 1.4132182598114014
I0123 11:10:34.682687 139878739914752 ddar.py:60] Depth 10/1000 time = 2.863940954208374
I0123 11:10:38.483919 139878739914752 ddar.py:60] Depth 11/1000 time = 3.800980567932129
I0123 11:10:42.130865 139878739914752 ddar.py:60] Depth 12/1000 time = 3.646735191345215
I0123 11:10:45.803615 139878739914752 ddar.py:60] Depth 13/1000 time = 3.6724958419799805
I0123 11:10:52.024076 139878739914752 ddar.py:60] Depth 14/1000 time = 6.220171928405762
I0123 11:10:57.713990 139878739914752 ddar.py:60] Depth 15/1000 time = 5.689545631408691
I0123 11:11:03.014432 139878739914752 ddar.py:60] Depth 16/1000 time = 5.300164699554443
I0123 11:11:08.758988 139878739914752 ddar.py:60] Depth 17/1000 time = 5.715118408203125
I0123 11:11:14.747971 139878739914752 ddar.py:60] Depth 18/1000 time = 5.988680601119995
I0123 11:11:20.770300 139878739914752 ddar.py:60] Depth 19/1000 time = 6.021974563598633
I0123 11:11:20.776344 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:11:20.776431 139878739914752 alphageometry.py:566] LM output (score=-1.299754): "k : D d j d k 14 T a c d k 15 ;"
I0123 11:11:20.776467 139878739914752 alphageometry.py:567] Translation: "k = on_circle k d j, on_tline k d a c"

I0123 11:11:20.776506 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_circle k d j, on_tline k d a c ? coll i d h"
I0123 11:11:20.776705 139878739914752 graph.py:498] 
I0123 11:11:20.776760 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_circle k d j, on_tline k d a c ? coll i d h
I0123 11:11:21.206440 139878739914752 ddar.py:60] Depth 1/1000 time = 0.3962898254394531
I0123 11:11:21.710078 139878739914752 ddar.py:60] Depth 2/1000 time = 0.5035445690155029
I0123 11:11:22.593353 139878739914752 ddar.py:60] Depth 3/1000 time = 0.8831524848937988
I0123 11:11:23.161052 139878739914752 ddar.py:60] Depth 4/1000 time = 0.5672156810760498
I0123 11:11:24.076348 139878739914752 ddar.py:60] Depth 5/1000 time = 0.9143118858337402
I0123 11:11:24.779823 139878739914752 ddar.py:60] Depth 6/1000 time = 0.7032489776611328
I0123 11:11:25.812672 139878739914752 ddar.py:60] Depth 7/1000 time = 1.0326974391937256
I0123 11:11:27.095409 139878739914752 ddar.py:60] Depth 8/1000 time = 1.2825839519500732
I0123 11:11:28.495834 139878739914752 ddar.py:60] Depth 9/1000 time = 1.4001843929290771
I0123 11:11:31.079980 139878739914752 ddar.py:60] Depth 10/1000 time = 2.5838894844055176
I0123 11:11:35.059014 139878739914752 ddar.py:60] Depth 11/1000 time = 3.978776693344116
I0123 11:11:38.728269 139878739914752 ddar.py:60] Depth 12/1000 time = 3.6690335273742676
I0123 11:11:42.499360 139878739914752 ddar.py:60] Depth 13/1000 time = 3.7708723545074463
I0123 11:11:48.314653 139878739914752 ddar.py:60] Depth 14/1000 time = 5.815017461776733
I0123 11:11:53.419670 139878739914752 ddar.py:60] Depth 15/1000 time = 5.104635953903198
I0123 11:11:58.728085 139878739914752 ddar.py:60] Depth 16/1000 time = 5.308107376098633
I0123 11:12:03.780496 139878739914752 ddar.py:60] Depth 17/1000 time = 5.024794578552246
I0123 11:12:09.476386 139878739914752 ddar.py:60] Depth 18/1000 time = 5.69556188583374
I0123 11:12:15.164708 139878739914752 ddar.py:60] Depth 19/1000 time = 5.68787407875061
I0123 11:12:15.170387 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:12:15.170481 139878739914752 alphageometry.py:566] LM output (score=-1.328908): "k : D d k d e 14 T a c d k 15 ;"
I0123 11:12:15.170517 139878739914752 alphageometry.py:567] Translation: "k = on_circle k d e, on_tline k d a c"

I0123 11:12:15.170555 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_circle k d e, on_tline k d a c ? coll i d h"
I0123 11:12:15.170714 139878739914752 graph.py:498] 
I0123 11:12:15.170771 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_circle k d e, on_tline k d a c ? coll i d h
I0123 11:12:15.600453 139878739914752 ddar.py:60] Depth 1/1000 time = 0.3965113162994385
I0123 11:12:16.109874 139878739914752 ddar.py:60] Depth 2/1000 time = 0.5093367099761963
I0123 11:12:16.995613 139878739914752 ddar.py:60] Depth 3/1000 time = 0.8856139183044434
I0123 11:12:17.563955 139878739914752 ddar.py:60] Depth 4/1000 time = 0.5678577423095703
I0123 11:12:18.476609 139878739914752 ddar.py:60] Depth 5/1000 time = 0.911677360534668
I0123 11:12:19.128769 139878739914752 ddar.py:60] Depth 6/1000 time = 0.6519265174865723
I0123 11:12:19.990637 139878739914752 ddar.py:60] Depth 7/1000 time = 0.8617236614227295
I0123 11:12:21.130070 139878739914752 ddar.py:60] Depth 8/1000 time = 1.1392719745635986
I0123 11:12:22.028405 139878739914752 ddar.py:60] Depth 9/1000 time = 0.898097038269043
I0123 11:12:24.693675 139878739914752 ddar.py:60] Depth 10/1000 time = 2.6651060581207275
I0123 11:12:28.407677 139878739914752 ddar.py:60] Depth 11/1000 time = 3.7137563228607178
I0123 11:12:32.086593 139878739914752 ddar.py:60] Depth 12/1000 time = 3.6786389350891113
I0123 11:12:35.796830 139878739914752 ddar.py:60] Depth 13/1000 time = 3.710014581680298
I0123 11:12:41.565616 139878739914752 ddar.py:60] Depth 14/1000 time = 5.768560171127319
I0123 11:12:46.991199 139878739914752 ddar.py:60] Depth 15/1000 time = 5.42529559135437
I0123 11:12:52.103977 139878739914752 ddar.py:60] Depth 16/1000 time = 5.112464666366577
I0123 11:12:57.580729 139878739914752 ddar.py:60] Depth 17/1000 time = 5.449691295623779
I0123 11:13:03.286533 139878739914752 ddar.py:60] Depth 18/1000 time = 5.70551609992981
I0123 11:13:08.760987 139878739914752 ddar.py:60] Depth 19/1000 time = 5.474117994308472
I0123 11:13:08.766444 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:13:08.766546 139878739914752 alphageometry.py:566] LM output (score=-1.407893): "k : D d e d k 14 T b c d k 15 ;"
I0123 11:13:08.766585 139878739914752 alphageometry.py:567] Translation: "k = on_circle k d e, on_tline k d b c"

I0123 11:13:08.766625 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_circle k d e, on_tline k d b c ? coll i d h"
I0123 11:13:08.766779 139878739914752 graph.py:498] 
I0123 11:13:08.766837 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_circle k d e, on_tline k d b c ? coll i d h
I0123 11:13:09.570702 139878739914752 ddar.py:60] Depth 1/1000 time = 0.7770943641662598
I0123 11:13:10.129549 139878739914752 ddar.py:60] Depth 2/1000 time = 0.5586507320404053
I0123 11:13:11.072736 139878739914752 ddar.py:60] Depth 3/1000 time = 0.943030834197998
I0123 11:13:11.697803 139878739914752 ddar.py:60] Depth 4/1000 time = 0.6246178150177002
I0123 11:13:12.679199 139878739914752 ddar.py:60] Depth 5/1000 time = 0.978564977645874
I0123 11:13:13.322189 139878739914752 ddar.py:60] Depth 6/1000 time = 0.6416916847229004
I0123 11:13:13.322336 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:13:13.322383 139878739914752 alphageometry.py:566] LM output (score=-2.615270): "k : C b c k 14 T b c d k 15 ;"
I0123 11:13:13.322418 139878739914752 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 11:13:13.322454 139878739914752 alphageometry.py:566] LM output (score=-2.621706): "k : C e f k 14 D e k f k 15 ;"
I0123 11:13:13.322482 139878739914752 alphageometry.py:567] Translation: "k = on_line k e f, on_bline k f e"

I0123 11:13:13.322512 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k e f, on_bline k f e ? coll i d h"
I0123 11:13:13.322659 139878739914752 graph.py:498] 
I0123 11:13:13.322707 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k e f, on_bline k f e ? coll i d h
I0123 11:13:14.661909 139878739914752 ddar.py:60] Depth 1/1000 time = 1.3097574710845947
I0123 11:13:15.810324 139878739914752 ddar.py:60] Depth 2/1000 time = 1.1481950283050537
I0123 11:13:17.351828 139878739914752 ddar.py:60] Depth 3/1000 time = 1.5412812232971191
I0123 11:13:18.571650 139878739914752 ddar.py:60] Depth 4/1000 time = 1.2193565368652344
I0123 11:13:18.574857 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:13:18.574912 139878739914752 alphageometry.py:566] LM output (score=-2.755913): "k : D d k d e 14 T b c d k 15 ;"
I0123 11:13:18.574947 139878739914752 alphageometry.py:567] Translation: "k = on_circle k d e, on_tline k d b c"

I0123 11:13:18.574982 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_circle k d e, on_tline k d b c ? coll i d h"
I0123 11:13:18.575124 139878739914752 graph.py:498] 
I0123 11:13:18.575171 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_circle k d e, on_tline k d b c ? coll i d h
I0123 11:13:19.040952 139878739914752 ddar.py:60] Depth 1/1000 time = 0.44010376930236816
I0123 11:13:19.935266 139878739914752 ddar.py:60] Depth 2/1000 time = 0.8942065238952637
I0123 11:13:20.553988 139878739914752 ddar.py:60] Depth 3/1000 time = 0.6185405254364014
I0123 11:13:21.512865 139878739914752 ddar.py:60] Depth 4/1000 time = 0.9585072994232178
I0123 11:13:22.502742 139878739914752 ddar.py:60] Depth 5/1000 time = 0.9868433475494385
I0123 11:13:23.148068 139878739914752 ddar.py:60] Depth 6/1000 time = 0.6439988613128662
I0123 11:13:23.148320 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:13:23.148394 139878739914752 alphageometry.py:566] LM output (score=-2.860929): "k : C b g k 14 D b k g k 15 ;"
I0123 11:13:23.148432 139878739914752 alphageometry.py:567] Translation: "k = on_line k b g, on_bline k g b"

I0123 11:13:23.148477 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k b g, on_bline k g b ? coll i d h"
I0123 11:13:23.148634 139878739914752 graph.py:498] 
I0123 11:13:23.148687 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k b g, on_bline k g b ? coll i d h
I0123 11:13:23.958966 139878739914752 ddar.py:60] Depth 1/1000 time = 0.7836897373199463
I0123 11:13:25.747394 139878739914752 ddar.py:60] Depth 2/1000 time = 1.7882053852081299
I0123 11:13:28.041364 139878739914752 ddar.py:60] Depth 3/1000 time = 2.293752908706665
I0123 11:13:29.977510 139878739914752 ddar.py:60] Depth 4/1000 time = 1.9359004497528076
I0123 11:13:32.255830 139878739914752 ddar.py:60] Depth 5/1000 time = 2.2778289318084717
I0123 11:13:32.259703 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:13:32.259761 139878739914752 alphageometry.py:566] LM output (score=-2.931545): "k : C b f k 14 D b k f k 15 ;"
I0123 11:13:32.259797 139878739914752 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 11:13:32.259832 139878739914752 alphageometry.py:566] LM output (score=-3.148055): "k : C c e k 14 D c k e k 15 ;"
I0123 11:13:32.259859 139878739914752 alphageometry.py:567] Translation: "k = on_line k c e, on_bline k e c"

I0123 11:13:32.259889 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k c e, on_bline k e c ? coll i d h"
I0123 11:13:32.260057 139878739914752 graph.py:498] 
I0123 11:13:32.260107 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k c e, on_bline k e c ? coll i d h
I0123 11:13:32.726443 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4396247863769531
I0123 11:13:34.672891 139878739914752 ddar.py:60] Depth 2/1000 time = 1.946333408355713
I0123 11:13:37.139058 139878739914752 ddar.py:60] Depth 3/1000 time = 2.465937614440918
I0123 11:13:39.243475 139878739914752 ddar.py:60] Depth 4/1000 time = 2.1039183139801025
I0123 11:13:39.248790 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:13:39.248859 139878739914752 alphageometry.py:566] LM output (score=-3.466328): "k : D d e d k 14 T a c d k 15 ;"
I0123 11:13:39.248897 139878739914752 alphageometry.py:567] Translation: "k = on_circle k d e, on_tline k d a c"

I0123 11:13:39.248935 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_circle k d e, on_tline k d a c ? coll i d h"
I0123 11:13:39.249080 139878739914752 graph.py:498] 
I0123 11:13:39.249128 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_circle k d e, on_tline k d a c ? coll i d h
I0123 11:13:40.017338 139878739914752 ddar.py:60] Depth 1/1000 time = 0.7352266311645508
I0123 11:13:40.534176 139878739914752 ddar.py:60] Depth 2/1000 time = 0.5166347026824951
I0123 11:13:41.438694 139878739914752 ddar.py:60] Depth 3/1000 time = 0.9043550491333008
I0123 11:13:42.001596 139878739914752 ddar.py:60] Depth 4/1000 time = 0.562415599822998
I0123 11:13:42.583004 139878739914752 ddar.py:60] Depth 5/1000 time = 0.5768992900848389
I0123 11:13:43.540609 139878739914752 ddar.py:60] Depth 6/1000 time = 0.9542250633239746
I0123 11:13:43.542666 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:13:43.542747 139878739914752 alphageometry.py:566] LM output (score=-3.602670): "k : C d f k 14 D d k f k 15 ;"
I0123 11:13:43.542786 139878739914752 alphageometry.py:567] Translation: "k = on_line k d f, on_bline k f d"

I0123 11:13:43.542822 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k d f, on_bline k f d ? coll i d h"
I0123 11:13:43.542971 139878739914752 graph.py:498] 
I0123 11:13:43.543028 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k d f, on_bline k f d ? coll i d h
I0123 11:13:44.008997 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4398791790008545
I0123 11:13:46.184916 139878739914752 ddar.py:60] Depth 2/1000 time = 2.1757633686065674
I0123 11:13:48.085550 139878739914752 ddar.py:60] Depth 3/1000 time = 1.9004080295562744
I0123 11:13:50.372251 139878739914752 ddar.py:60] Depth 4/1000 time = 2.286188840866089
I0123 11:13:50.377147 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:13:50.377224 139878739914752 alphageometry.py:566] LM output (score=-3.774396): "k : C j f k 14 D j k f k 15 ;"
I0123 11:13:50.377264 139878739914752 alphageometry.py:567] Translation: "k = on_line k j f, on_bline k f j"

I0123 11:13:50.377303 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k j f, on_bline k f j ? coll i d h"
I0123 11:13:50.377475 139878739914752 graph.py:498] 
I0123 11:13:50.377525 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k j f, on_bline k f j ? coll i d h
I0123 11:13:50.826386 139878739914752 ddar.py:60] Depth 1/1000 time = 0.42221951484680176
I0123 11:13:51.727458 139878739914752 ddar.py:60] Depth 2/1000 time = 0.9009394645690918
I0123 11:13:52.363773 139878739914752 ddar.py:60] Depth 3/1000 time = 0.6360993385314941
I0123 11:13:53.337889 139878739914752 ddar.py:60] Depth 4/1000 time = 0.973719596862793
I0123 11:13:53.341346 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:13:53.341413 139878739914752 alphageometry.py:566] LM output (score=-3.780342): "k : C f g k 14 D f k g k 15 ;"
I0123 11:13:53.341450 139878739914752 alphageometry.py:567] Translation: "k = on_line k f g, on_bline k g f"

I0123 11:13:53.341487 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k f g, on_bline k g f ? coll i d h"
I0123 11:13:53.341626 139878739914752 graph.py:498] 
I0123 11:13:53.341684 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k f g, on_bline k g f ? coll i d h
I0123 11:13:53.801890 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4336817264556885
I0123 11:13:55.584037 139878739914752 ddar.py:60] Depth 2/1000 time = 1.7820203304290771
I0123 11:13:57.856934 139878739914752 ddar.py:60] Depth 3/1000 time = 2.2726635932922363
I0123 11:13:59.795139 139878739914752 ddar.py:60] Depth 4/1000 time = 1.937708854675293
I0123 11:13:59.799958 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:13:59.800041 139878739914752 alphageometry.py:566] LM output (score=-3.807764): "k : D d j d k 14 T d e j k 15 ;"
I0123 11:13:59.800079 139878739914752 alphageometry.py:567] Translation: "k = on_circle k d j, on_tline k j d e"

I0123 11:13:59.800117 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_circle k d j, on_tline k j d e ? coll i d h"
I0123 11:13:59.800266 139878739914752 graph.py:498] 
I0123 11:13:59.800315 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_circle k d j, on_tline k j d e ? coll i d h
I0123 11:14:00.652856 139878739914752 ddar.py:60] Depth 1/1000 time = 0.8189773559570312
I0123 11:14:01.214370 139878739914752 ddar.py:60] Depth 2/1000 time = 0.5610847473144531
I0123 11:14:01.852803 139878739914752 ddar.py:60] Depth 3/1000 time = 0.638216495513916
I0123 11:14:02.927246 139878739914752 ddar.py:60] Depth 4/1000 time = 1.0742778778076172
I0123 11:14:03.654554 139878739914752 ddar.py:60] Depth 5/1000 time = 0.727060079574585
I0123 11:14:04.748655 139878739914752 ddar.py:60] Depth 6/1000 time = 1.0935888290405273
I0123 11:14:04.753681 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:14:04.753762 139878739914752 alphageometry.py:566] LM output (score=-3.837445): "k : D d j d k 14 T d j d k 15 ;"
I0123 11:14:04.753801 139878739914752 alphageometry.py:567] Translation: "k = on_circle k d j, on_tline k d d j"

I0123 11:14:04.753839 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_circle k d j, on_tline k d d j ? coll i d h"
I0123 11:14:04.754020 139878739914752 graph.py:498] 
I0123 11:14:04.754076 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_circle k d j, on_tline k d d j ? coll i d h
I0123 11:14:05.190617 139878739914752 ddar.py:60] Depth 1/1000 time = 0.40286707878112793
I0123 11:14:05.716917 139878739914752 ddar.py:60] Depth 2/1000 time = 0.5261979103088379
I0123 11:14:06.651057 139878739914752 ddar.py:60] Depth 3/1000 time = 0.9340198040008545
I0123 11:14:07.237682 139878739914752 ddar.py:60] Depth 4/1000 time = 0.5861291885375977
I0123 11:14:07.817601 139878739914752 ddar.py:60] Depth 5/1000 time = 0.5795338153839111
I0123 11:14:07.820423 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:14:07.820471 139878739914752 alphageometry.py:566] LM output (score=-3.939256): "k : D d j d k 14 T b c d k 15 ;"
I0123 11:14:07.820506 139878739914752 alphageometry.py:567] Translation: "k = on_circle k d j, on_tline k d b c"

I0123 11:14:07.820540 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_circle k d j, on_tline k d b c ? coll i d h"
I0123 11:14:07.820676 139878739914752 graph.py:498] 
I0123 11:14:07.820721 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_circle k d j, on_tline k d b c ? coll i d h
I0123 11:14:08.639805 139878739914752 ddar.py:60] Depth 1/1000 time = 0.7928621768951416
I0123 11:14:09.189502 139878739914752 ddar.py:60] Depth 2/1000 time = 0.5495054721832275
I0123 11:14:10.136120 139878739914752 ddar.py:60] Depth 3/1000 time = 0.9464659690856934
I0123 11:14:10.744508 139878739914752 ddar.py:60] Depth 4/1000 time = 0.6079518795013428
I0123 11:14:10.747066 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:14:10.747117 139878739914752 alphageometry.py:566] LM output (score=-3.986716): "k : C b e k 14 D b e e k 15 ;"
I0123 11:14:10.747152 139878739914752 alphageometry.py:567] Translation: "k = on_line k b e, on_circle k e b"

I0123 11:14:10.747187 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k b e, on_circle k e b ? coll i d h"
I0123 11:14:10.747323 139878739914752 graph.py:498] 
I0123 11:14:10.747370 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k b e, on_circle k e b ? coll i d h
I0123 11:14:12.147028 139878739914752 ddar.py:60] Depth 1/1000 time = 1.372091293334961
I0123 11:14:13.348381 139878739914752 ddar.py:60] Depth 2/1000 time = 1.2011358737945557
I0123 11:14:14.601768 139878739914752 ddar.py:60] Depth 3/1000 time = 1.253169059753418
I0123 11:14:16.221499 139878739914752 ddar.py:60] Depth 4/1000 time = 1.6194896697998047
I0123 11:14:17.488581 139878739914752 ddar.py:60] Depth 5/1000 time = 1.2666072845458984
I0123 11:14:17.492486 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:14:17.492547 139878739914752 alphageometry.py:566] LM output (score=-4.001023): "k : C b j k 14 D b k j k 15 ;"
I0123 11:14:17.492585 139878739914752 alphageometry.py:567] Translation: "k = on_line k b j, on_bline k j b"

I0123 11:14:17.492650 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k b j, on_bline k j b ? coll i d h"
I0123 11:14:17.492789 139878739914752 graph.py:498] 
I0123 11:14:17.492837 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k b j, on_bline k j b ? coll i d h
I0123 11:14:18.367009 139878739914752 ddar.py:60] Depth 1/1000 time = 0.8482041358947754
I0123 11:14:19.332652 139878739914752 ddar.py:60] Depth 2/1000 time = 0.9654204845428467
I0123 11:14:19.987694 139878739914752 ddar.py:60] Depth 3/1000 time = 0.6548314094543457
I0123 11:14:21.041520 139878739914752 ddar.py:60] Depth 4/1000 time = 1.0534391403198242
I0123 11:14:21.044235 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:14:21.044302 139878739914752 alphageometry.py:566] LM output (score=-4.091500): "k : D c i e k 14 D c k e i 15 ;"
I0123 11:14:21.044339 139878739914752 alphageometry.py:567] Translation: "k = eqdistance k e c i, eqdistance k c e i"

I0123 11:14:21.044376 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = eqdistance k e c i, eqdistance k c e i ? coll i d h"
I0123 11:14:21.044518 139878739914752 graph.py:498] 
I0123 11:14:21.044572 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = eqdistance k e c i, eqdistance k c e i ? coll i d h
I0123 11:14:21.541474 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4691784381866455
I0123 11:14:22.700719 139878739914752 ddar.py:60] Depth 2/1000 time = 1.1591119766235352
I0123 11:14:24.470181 139878739914752 ddar.py:60] Depth 3/1000 time = 1.7692220211029053
I0123 11:14:26.223277 139878739914752 ddar.py:60] Depth 4/1000 time = 1.7528564929962158
I0123 11:14:27.606387 139878739914752 ddar.py:60] Depth 5/1000 time = 1.3826470375061035
I0123 11:14:27.612805 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:14:27.612861 139878739914752 alphageometry.py:566] LM output (score=-4.114489): "k : C g f k 14 D g k f k 15 ;"
I0123 11:14:27.612896 139878739914752 alphageometry.py:567] Translation: "k = on_line k g f, on_bline k f g"

I0123 11:14:27.612930 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k g f, on_bline k f g ? coll i d h"
I0123 11:14:27.613066 139878739914752 graph.py:498] 
I0123 11:14:27.613117 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k g f, on_bline k f g ? coll i d h
I0123 11:14:28.434131 139878739914752 ddar.py:60] Depth 1/1000 time = 0.794891357421875
I0123 11:14:30.222237 139878739914752 ddar.py:60] Depth 2/1000 time = 1.787883996963501
I0123 11:14:32.515629 139878739914752 ddar.py:60] Depth 3/1000 time = 2.29317045211792
I0123 11:14:34.454514 139878739914752 ddar.py:60] Depth 4/1000 time = 1.9383933544158936
I0123 11:14:34.459799 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:14:34.459868 139878739914752 alphageometry.py:566] LM output (score=-4.132080): "k : C g h k 14 D g k h k 15 ;"
I0123 11:14:34.459936 139878739914752 alphageometry.py:567] Translation: "k = on_line k g h, on_bline k h g"

I0123 11:14:34.459976 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k g h, on_bline k h g ? coll i d h"
I0123 11:14:34.460122 139878739914752 graph.py:498] 
I0123 11:14:34.460170 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k g h, on_bline k h g ? coll i d h
I0123 11:14:35.377214 139878739914752 ddar.py:60] Depth 1/1000 time = 0.8900680541992188
I0123 11:14:36.000291 139878739914752 ddar.py:60] Depth 2/1000 time = 0.6228690147399902
I0123 11:14:37.039109 139878739914752 ddar.py:60] Depth 3/1000 time = 1.0386552810668945
I0123 11:14:38.095286 139878739914752 ddar.py:60] Depth 4/1000 time = 1.0557396411895752
I0123 11:14:38.097977 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:14:38.098047 139878739914752 alphageometry.py:566] LM output (score=-4.220935): "k : D d j d k 14 T d g j k 15 ;"
I0123 11:14:38.098086 139878739914752 alphageometry.py:567] Translation: "k = on_circle k d j, on_tline k j d g"

I0123 11:14:38.098125 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_circle k d j, on_tline k j d g ? coll i d h"
I0123 11:14:38.098273 139878739914752 graph.py:498] 
I0123 11:14:38.098326 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_circle k d j, on_tline k j d g ? coll i d h
I0123 11:14:38.539342 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4097437858581543
I0123 11:14:39.462263 139878739914752 ddar.py:60] Depth 2/1000 time = 0.9227533340454102
I0123 11:14:40.164566 139878739914752 ddar.py:60] Depth 3/1000 time = 0.7020065784454346
I0123 11:14:41.563900 139878739914752 ddar.py:60] Depth 4/1000 time = 1.399153470993042
I0123 11:14:42.561360 139878739914752 ddar.py:60] Depth 5/1000 time = 0.9972116947174072
I0123 11:14:43.651631 139878739914752 ddar.py:60] Depth 6/1000 time = 1.0901155471801758
I0123 11:14:46.743448 139878739914752 ddar.py:60] Depth 7/1000 time = 3.0916664600372314
I0123 11:14:50.500151 139878739914752 ddar.py:60] Depth 8/1000 time = 3.7564823627471924
I0123 11:14:54.234003 139878739914752 ddar.py:60] Depth 9/1000 time = 3.7336184978485107
I0123 11:14:57.662214 139878739914752 ddar.py:60] Depth 10/1000 time = 3.427983522415161
I0123 11:15:03.647775 139878739914752 ddar.py:60] Depth 11/1000 time = 5.985316514968872
I0123 11:15:09.207193 139878739914752 ddar.py:60] Depth 12/1000 time = 5.559172630310059
I0123 11:15:14.436274 139878739914752 ddar.py:60] Depth 13/1000 time = 5.228795289993286
I0123 11:15:19.758253 139878739914752 ddar.py:60] Depth 14/1000 time = 5.321033954620361
I0123 11:15:25.068157 139878739914752 ddar.py:60] Depth 15/1000 time = 5.28083062171936
I0123 11:15:30.998277 139878739914752 ddar.py:60] Depth 16/1000 time = 5.929874420166016
I0123 11:15:36.580077 139878739914752 ddar.py:60] Depth 17/1000 time = 5.5814361572265625
I0123 11:15:36.586125 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:15:36.586267 139878739914752 alphageometry.py:566] LM output (score=-4.297980): "k : C b d k 14 D b k d k 15 ;"
I0123 11:15:36.586307 139878739914752 alphageometry.py:567] Translation: "k = on_line k b d, on_bline k d b"

I0123 11:15:36.586361 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k b d, on_bline k d b ? coll i d h"
I0123 11:15:36.586562 139878739914752 graph.py:498] 
I0123 11:15:36.586619 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k b d, on_bline k d b ? coll i d h
I0123 11:15:37.049411 139878739914752 ddar.py:60] Depth 1/1000 time = 0.43518900871276855
I0123 11:15:39.166913 139878739914752 ddar.py:60] Depth 2/1000 time = 2.1173646450042725
I0123 11:15:41.784535 139878739914752 ddar.py:60] Depth 3/1000 time = 2.6173899173736572
I0123 11:15:43.894532 139878739914752 ddar.py:60] Depth 4/1000 time = 2.109744071960449
I0123 11:15:46.408246 139878739914752 ddar.py:60] Depth 5/1000 time = 2.5132510662078857
I0123 11:15:46.412725 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:15:46.412799 139878739914752 alphageometry.py:566] LM output (score=-4.394316): "k : C b c k 14 D b k c k 15 ;"
I0123 11:15:46.412837 139878739914752 alphageometry.py:567] Translation: "k = on_line k b c, on_bline k c b"

I0123 11:15:46.412875 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k b c, on_bline k c b ? coll i d h"
I0123 11:15:46.413018 139878739914752 graph.py:498] 
I0123 11:15:46.413066 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k b c, on_bline k c b ? coll i d h
I0123 11:15:46.939430 139878739914752 ddar.py:60] Depth 1/1000 time = 0.49931883811950684
I0123 11:15:49.558895 139878739914752 ddar.py:60] Depth 2/1000 time = 2.6193315982818604
I0123 11:15:52.848191 139878739914752 ddar.py:60] Depth 3/1000 time = 3.289059638977051
I0123 11:15:56.247081 139878739914752 ddar.py:60] Depth 4/1000 time = 3.3983242511749268
I0123 11:15:56.251144 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:15:56.251217 139878739914752 alphageometry.py:566] LM output (score=-4.472929): "k : C b e k 14 D b e b k 15 ;"
I0123 11:15:56.251254 139878739914752 alphageometry.py:567] Translation: "k = on_line k b e, on_circle k b e"

I0123 11:15:56.251291 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k b e, on_circle k b e ? coll i d h"
I0123 11:15:56.251433 139878739914752 graph.py:498] 
I0123 11:15:56.251484 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k b e, on_circle k b e ? coll i d h
I0123 11:15:56.928754 139878739914752 ddar.py:60] Depth 1/1000 time = 0.6500444412231445
I0123 11:15:58.065858 139878739914752 ddar.py:60] Depth 2/1000 time = 1.1369481086730957
I0123 11:15:59.618686 139878739914752 ddar.py:60] Depth 3/1000 time = 1.5526156425476074
I0123 11:16:00.809871 139878739914752 ddar.py:60] Depth 4/1000 time = 1.1907236576080322
I0123 11:16:00.812822 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:16:00.812875 139878739914752 alphageometry.py:566] LM output (score=-4.520269): "k : C b e k 14 D a e a k 15 ;"
I0123 11:16:00.812910 139878739914752 alphageometry.py:567] Translation: "k = on_line k b e, on_circle k a e"

I0123 11:16:00.812945 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k b e, on_circle k a e ? coll i d h"
I0123 11:16:00.813119 139878739914752 graph.py:498] 
I0123 11:16:00.813167 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k b e, on_circle k a e ? coll i d h
I0123 11:16:01.865597 139878739914752 ddar.py:60] Depth 1/1000 time = 1.024341344833374
I0123 11:16:02.974653 139878739914752 ddar.py:60] Depth 2/1000 time = 1.1088244915008545
I0123 11:16:04.534009 139878739914752 ddar.py:60] Depth 3/1000 time = 1.559140920639038
I0123 11:16:05.713470 139878739914752 ddar.py:60] Depth 4/1000 time = 1.178999423980713
I0123 11:16:05.716172 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:16:05.716226 139878739914752 alphageometry.py:566] LM output (score=-4.546545): "k : C a c k 14 D d k d j 15 ;"
I0123 11:16:05.716261 139878739914752 alphageometry.py:567] Translation: "k = on_line k a c, on_circle k d j"

I0123 11:16:05.716299 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k a c, on_circle k d j ? coll i d h"
I0123 11:16:05.716447 139878739914752 graph.py:498] 
I0123 11:16:05.716494 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k a c, on_circle k d j ? coll i d h
I0123 11:16:06.161488 139878739914752 ddar.py:60] Depth 1/1000 time = 0.419264554977417
I0123 11:16:07.061686 139878739914752 ddar.py:60] Depth 2/1000 time = 0.9000639915466309
I0123 11:16:07.635711 139878739914752 ddar.py:60] Depth 3/1000 time = 0.5738198757171631
I0123 11:16:08.595549 139878739914752 ddar.py:60] Depth 4/1000 time = 0.959458589553833
I0123 11:16:08.598077 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:16:08.598140 139878739914752 alphageometry.py:566] LM output (score=-4.566693): "k : C b g k 14 D b g b k 15 ;"
I0123 11:16:08.598179 139878739914752 alphageometry.py:567] Translation: "k = on_line k b g, on_circle k b g"

I0123 11:16:08.598215 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k b g, on_circle k b g ? coll i d h"
I0123 11:16:08.598355 139878739914752 graph.py:498] 
I0123 11:16:08.598403 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k b g, on_circle k b g ? coll i d h
I0123 11:16:09.060307 139878739914752 ddar.py:60] Depth 1/1000 time = 0.43581724166870117
I0123 11:16:09.647047 139878739914752 ddar.py:60] Depth 2/1000 time = 0.5866260528564453
I0123 11:16:10.667950 139878739914752 ddar.py:60] Depth 3/1000 time = 1.0207781791687012
I0123 11:16:11.309280 139878739914752 ddar.py:60] Depth 4/1000 time = 0.640897274017334
I0123 11:16:11.313080 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:16:11.313135 139878739914752 alphageometry.py:566] LM output (score=-4.568941): "k : C a f k 14 D a k f k 15 ;"
I0123 11:16:11.313172 139878739914752 alphageometry.py:567] Translation: "k = on_line k a f, on_bline k f a"

I0123 11:16:11.313210 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k a f, on_bline k f a ? coll i d h"
I0123 11:16:11.313373 139878739914752 graph.py:498] 
I0123 11:16:11.313421 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k a f, on_bline k f a ? coll i d h
I0123 11:16:12.378672 139878739914752 ddar.py:60] Depth 1/1000 time = 1.0381195545196533
I0123 11:16:13.930748 139878739914752 ddar.py:60] Depth 2/1000 time = 1.5518579483032227
I0123 11:16:15.176570 139878739914752 ddar.py:60] Depth 3/1000 time = 1.24558424949646
I0123 11:16:16.402207 139878739914752 ddar.py:60] Depth 4/1000 time = 1.2251262664794922
I0123 11:16:16.405492 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:16:16.405570 139878739914752 alphageometry.py:566] LM output (score=-4.569474): "k : C a c k 14 D a k c k 15 ;"
I0123 11:16:16.405610 139878739914752 alphageometry.py:567] Translation: "k = on_line k a c, on_bline k c a"

I0123 11:16:16.405657 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k a c, on_bline k c a ? coll i d h"
I0123 11:16:16.405813 139878739914752 graph.py:498] 
I0123 11:16:16.405868 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j b c, on_tline j d b c; k = on_line k a c, on_bline k c a ? coll i d h
I0123 11:16:16.853203 139878739914752 ddar.py:60] Depth 1/1000 time = 0.42069077491760254
I0123 11:16:19.238056 139878739914752 ddar.py:60] Depth 2/1000 time = 2.3847358226776123
I0123 11:16:21.418156 139878739914752 ddar.py:60] Depth 3/1000 time = 2.179865837097168
I0123 11:16:23.575683 139878739914752 ddar.py:60] Depth 4/1000 time = 2.157025098800659
I0123 11:16:23.579767 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:16:23.579838 139878739914752 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : C a c j 12 T a c d j 13 ; x00
I0123 11:16:34.188861 139878739914752 alphageometry.py:566] LM output (score=-0.053821): "k : C b c k 14 T b c d k 15 ;"
I0123 11:16:34.189030 139878739914752 alphageometry.py:567] Translation: "k = on_line k b c, on_tline k d b c"

I0123 11:16:34.189077 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k b c, on_tline k d b c ? coll i d h"
I0123 11:16:34.189213 139878739914752 graph.py:498] 
I0123 11:16:34.189261 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k b c, on_tline k d b c ? coll i d h
I0123 11:16:35.096830 139878739914752 ddar.py:60] Depth 1/1000 time = 0.8781816959381104
I0123 11:16:37.230993 139878739914752 ddar.py:60] Depth 2/1000 time = 2.1339468955993652
I0123 11:16:40.958334 139878739914752 ddar.py:60] Depth 3/1000 time = 3.7270748615264893
I0123 11:16:44.316316 139878739914752 ddar.py:60] Depth 4/1000 time = 3.357640266418457
I0123 11:16:48.118471 139878739914752 ddar.py:60] Depth 5/1000 time = 3.8019394874572754
I0123 11:16:52.972973 139878739914752 ddar.py:60] Depth 6/1000 time = 4.854290962219238
I0123 11:16:57.493425 139878739914752 ddar.py:60] Depth 7/1000 time = 4.520227909088135
I0123 11:17:02.148141 139878739914752 ddar.py:60] Depth 8/1000 time = 4.6544365882873535
I0123 11:17:06.772069 139878739914752 ddar.py:60] Depth 9/1000 time = 4.623169660568237
I0123 11:17:11.844458 139878739914752 ddar.py:60] Depth 10/1000 time = 5.047418594360352
I0123 11:17:16.809618 139878739914752 ddar.py:60] Depth 11/1000 time = 4.9649271965026855
I0123 11:17:21.339150 139878739914752 ddar.py:60] Depth 12/1000 time = 4.529239177703857
I0123 11:17:21.344937 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:17:21.345024 139878739914752 alphageometry.py:566] LM output (score=-1.601675): "k : D d e d k 14 T b c d k 15 ;"
I0123 11:17:21.345061 139878739914752 alphageometry.py:567] Translation: "k = on_circle k d e, on_tline k d b c"

I0123 11:17:21.345104 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_circle k d e, on_tline k d b c ? coll i d h"
I0123 11:17:21.345260 139878739914752 graph.py:498] 
I0123 11:17:21.345314 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_circle k d e, on_tline k d b c ? coll i d h
I0123 11:17:22.232004 139878739914752 ddar.py:60] Depth 1/1000 time = 0.8538448810577393
I0123 11:17:23.674561 139878739914752 ddar.py:60] Depth 2/1000 time = 1.442305088043213
I0123 11:17:26.179399 139878739914752 ddar.py:60] Depth 3/1000 time = 2.504528045654297
I0123 11:17:27.801574 139878739914752 ddar.py:60] Depth 4/1000 time = 1.6219165325164795
I0123 11:17:29.847578 139878739914752 ddar.py:60] Depth 5/1000 time = 2.045494794845581
I0123 11:17:31.923274 139878739914752 ddar.py:60] Depth 6/1000 time = 2.0753531455993652
I0123 11:17:33.993817 139878739914752 ddar.py:60] Depth 7/1000 time = 2.0702757835388184
I0123 11:17:34.003223 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:17:34.003310 139878739914752 alphageometry.py:566] LM output (score=-1.730152): "k : D d k d e 14 T b c d k 15 ;"
I0123 11:17:34.003349 139878739914752 alphageometry.py:567] Translation: "k = on_circle k d e, on_tline k d b c"

I0123 11:17:34.003388 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_circle k d e, on_tline k d b c ? coll i d h"
I0123 11:17:34.003540 139878739914752 graph.py:498] 
I0123 11:17:34.003589 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_circle k d e, on_tline k d b c ? coll i d h
I0123 11:17:34.855383 139878739914752 ddar.py:60] Depth 1/1000 time = 0.8179800510406494
I0123 11:17:36.743222 139878739914752 ddar.py:60] Depth 2/1000 time = 1.8876278400421143
I0123 11:17:38.356950 139878739914752 ddar.py:60] Depth 3/1000 time = 1.6134905815124512
I0123 11:17:40.438016 139878739914752 ddar.py:60] Depth 4/1000 time = 2.080812454223633
I0123 11:17:42.500090 139878739914752 ddar.py:60] Depth 5/1000 time = 2.0614895820617676
I0123 11:17:44.606261 139878739914752 ddar.py:60] Depth 6/1000 time = 2.1057369709014893
I0123 11:17:47.144347 139878739914752 ddar.py:60] Depth 7/1000 time = 2.5378081798553467
I0123 11:17:47.154103 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:17:47.154188 139878739914752 alphageometry.py:566] LM output (score=-1.885584): "k : D d k d j 14 T b c d k 15 ;"
I0123 11:17:47.154227 139878739914752 alphageometry.py:567] Translation: "k = on_circle k d j, on_tline k d b c"

I0123 11:17:47.154266 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_circle k d j, on_tline k d b c ? coll i d h"
I0123 11:17:47.154447 139878739914752 graph.py:498] 
I0123 11:17:47.154502 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_circle k d j, on_tline k d b c ? coll i d h
I0123 11:17:47.599198 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4103405475616455
I0123 11:17:49.042603 139878739914752 ddar.py:60] Depth 2/1000 time = 1.4432826042175293
I0123 11:17:51.515972 139878739914752 ddar.py:60] Depth 3/1000 time = 2.473137617111206
I0123 11:17:53.167100 139878739914752 ddar.py:60] Depth 4/1000 time = 1.6508681774139404
I0123 11:17:55.267416 139878739914752 ddar.py:60] Depth 5/1000 time = 2.099898099899292
I0123 11:17:57.387739 139878739914752 ddar.py:60] Depth 6/1000 time = 2.1200506687164307
I0123 11:17:57.397008 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:17:57.397078 139878739914752 alphageometry.py:566] LM output (score=-2.707808): "k : C e f k 14 D e k f k 15 ;"
I0123 11:17:57.397117 139878739914752 alphageometry.py:567] Translation: "k = on_line k e f, on_bline k f e"

I0123 11:17:57.397156 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k e f, on_bline k f e ? coll i d h"
I0123 11:17:57.397297 139878739914752 graph.py:498] 
I0123 11:17:57.397343 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k e f, on_bline k f e ? coll i d h
I0123 11:17:58.511078 139878739914752 ddar.py:60] Depth 1/1000 time = 1.083665132522583
I0123 11:17:59.834390 139878739914752 ddar.py:60] Depth 2/1000 time = 1.3230993747711182
I0123 11:18:01.713072 139878739914752 ddar.py:60] Depth 3/1000 time = 1.8784215450286865
I0123 11:18:03.150373 139878739914752 ddar.py:60] Depth 4/1000 time = 1.4370009899139404
I0123 11:18:04.599532 139878739914752 ddar.py:60] Depth 5/1000 time = 1.4486210346221924
I0123 11:18:04.604820 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:18:04.604898 139878739914752 alphageometry.py:566] LM output (score=-2.996815): "k : C d f k 14 D d k f k 15 ;"
I0123 11:18:04.604936 139878739914752 alphageometry.py:567] Translation: "k = on_line k d f, on_bline k f d"

I0123 11:18:04.604973 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k d f, on_bline k f d ? coll i d h"
I0123 11:18:04.605131 139878739914752 graph.py:498] 
I0123 11:18:04.605184 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k d f, on_bline k f d ? coll i d h
I0123 11:18:05.094007 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4612407684326172
I0123 11:18:07.537831 139878739914752 ddar.py:60] Depth 2/1000 time = 2.4437062740325928
I0123 11:18:09.741421 139878739914752 ddar.py:60] Depth 3/1000 time = 2.2033677101135254
I0123 11:18:11.963650 139878739914752 ddar.py:60] Depth 4/1000 time = 2.2219655513763428
I0123 11:18:14.184478 139878739914752 ddar.py:60] Depth 5/1000 time = 2.220327854156494
I0123 11:18:14.191253 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:18:14.191361 139878739914752 alphageometry.py:566] LM output (score=-3.165020): "k : D d j d k 14 T b c d k 15 ;"
I0123 11:18:14.191402 139878739914752 alphageometry.py:567] Translation: "k = on_circle k d j, on_tline k d b c"

I0123 11:18:14.191440 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_circle k d j, on_tline k d b c ? coll i d h"
I0123 11:18:14.191584 139878739914752 graph.py:498] 
I0123 11:18:14.191633 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_circle k d j, on_tline k d b c ? coll i d h
I0123 11:18:14.633774 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4091072082519531
I0123 11:18:16.522996 139878739914752 ddar.py:60] Depth 2/1000 time = 1.8891005516052246
I0123 11:18:18.628108 139878739914752 ddar.py:60] Depth 3/1000 time = 2.104882001876831
I0123 11:18:20.294074 139878739914752 ddar.py:60] Depth 4/1000 time = 1.6656494140625
I0123 11:18:22.380692 139878739914752 ddar.py:60] Depth 5/1000 time = 2.0859780311584473
I0123 11:18:24.499641 139878739914752 ddar.py:60] Depth 6/1000 time = 2.1185898780822754
I0123 11:18:26.624510 139878739914752 ddar.py:60] Depth 7/1000 time = 2.1246161460876465
I0123 11:18:26.633648 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:18:26.633747 139878739914752 alphageometry.py:566] LM output (score=-3.317990): "k : C b g k 14 D b k g k 15 ;"
I0123 11:18:26.633786 139878739914752 alphageometry.py:567] Translation: "k = on_line k b g, on_bline k g b"

I0123 11:18:26.633825 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k b g, on_bline k g b ? coll i d h"
I0123 11:18:26.633980 139878739914752 graph.py:498] 
I0123 11:18:26.634036 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k b g, on_bline k g b ? coll i d h
I0123 11:18:27.112066 139878739914752 ddar.py:60] Depth 1/1000 time = 0.44995737075805664
I0123 11:18:29.528048 139878739914752 ddar.py:60] Depth 2/1000 time = 2.4158544540405273
I0123 11:18:31.710479 139878739914752 ddar.py:60] Depth 3/1000 time = 2.1822073459625244
I0123 11:18:33.903026 139878739914752 ddar.py:60] Depth 4/1000 time = 2.1922874450683594
I0123 11:18:36.103363 139878739914752 ddar.py:60] Depth 5/1000 time = 2.199867010116577
I0123 11:18:36.108600 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:18:36.108667 139878739914752 alphageometry.py:566] LM output (score=-3.773166): "k : C c e k 14 D c k e k 15 ;"
I0123 11:18:36.108704 139878739914752 alphageometry.py:567] Translation: "k = on_line k c e, on_bline k e c"

I0123 11:18:36.108741 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k c e, on_bline k e c ? coll i d h"
I0123 11:18:36.108887 139878739914752 graph.py:498] 
I0123 11:18:36.108935 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k c e, on_bline k e c ? coll i d h
I0123 11:18:36.599856 139878739914752 ddar.py:60] Depth 1/1000 time = 0.46376872062683105
I0123 11:18:38.781277 139878739914752 ddar.py:60] Depth 2/1000 time = 2.1812944412231445
I0123 11:18:41.654496 139878739914752 ddar.py:60] Depth 3/1000 time = 2.872933864593506
I0123 11:18:44.086020 139878739914752 ddar.py:60] Depth 4/1000 time = 2.431246519088745
I0123 11:18:46.494924 139878739914752 ddar.py:60] Depth 5/1000 time = 2.4083750247955322
I0123 11:18:46.502192 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:18:46.502283 139878739914752 alphageometry.py:566] LM output (score=-3.856089): "k : C b f k 14 D b k f k 15 ;"
I0123 11:18:46.502322 139878739914752 alphageometry.py:567] Translation: "k = on_line k b f, on_bline k f b"

I0123 11:18:46.502360 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k b f, on_bline k f b ? coll i d h"
I0123 11:18:46.502521 139878739914752 graph.py:498] 
I0123 11:18:46.502576 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k b f, on_bline k f b ? coll i d h
I0123 11:18:48.056003 139878739914752 ddar.py:60] Depth 1/1000 time = 1.5240576267242432
I0123 11:18:49.343103 139878739914752 ddar.py:60] Depth 2/1000 time = 1.286888837814331
I0123 11:18:50.708563 139878739914752 ddar.py:60] Depth 3/1000 time = 1.3652503490447998
I0123 11:18:52.099082 139878739914752 ddar.py:60] Depth 4/1000 time = 1.3902637958526611
I0123 11:18:53.475584 139878739914752 ddar.py:60] Depth 5/1000 time = 1.3760223388671875
I0123 11:18:53.481148 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:18:53.481214 139878739914752 alphageometry.py:566] LM output (score=-3.988162): "k : C a c k 14 T a c d k 15 ;"
I0123 11:18:53.481252 139878739914752 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 11:18:53.481291 139878739914752 alphageometry.py:566] LM output (score=-3.992030): "k : C a f k 14 D a k f k 15 ;"
I0123 11:18:53.481321 139878739914752 alphageometry.py:567] Translation: "k = on_line k a f, on_bline k f a"

I0123 11:18:53.481353 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k a f, on_bline k f a ? coll i d h"
I0123 11:18:53.481492 139878739914752 graph.py:498] 
I0123 11:18:53.481540 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k a f, on_bline k f a ? coll i d h
I0123 11:18:54.600019 139878739914752 ddar.py:60] Depth 1/1000 time = 1.0900309085845947
I0123 11:18:55.947235 139878739914752 ddar.py:60] Depth 2/1000 time = 1.3469908237457275
I0123 11:18:57.439381 139878739914752 ddar.py:60] Depth 3/1000 time = 1.4919326305389404
I0123 11:18:58.992514 139878739914752 ddar.py:60] Depth 4/1000 time = 1.5528955459594727
I0123 11:19:00.942198 139878739914752 ddar.py:60] Depth 5/1000 time = 1.9490952491760254
I0123 11:19:00.948008 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:19:00.948096 139878739914752 alphageometry.py:566] LM output (score=-4.016231): "k : C b g k 14 D b g b k 15 ;"
I0123 11:19:00.948134 139878739914752 alphageometry.py:567] Translation: "k = on_line k b g, on_circle k b g"

I0123 11:19:00.948174 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k b g, on_circle k b g ? coll i d h"
I0123 11:19:00.948360 139878739914752 graph.py:498] 
I0123 11:19:00.948418 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k b g, on_circle k b g ? coll i d h
I0123 11:19:01.431906 139878739914752 ddar.py:60] Depth 1/1000 time = 0.456207275390625
I0123 11:19:02.101974 139878739914752 ddar.py:60] Depth 2/1000 time = 0.6699426174163818
I0123 11:19:03.253902 139878739914752 ddar.py:60] Depth 3/1000 time = 1.1516938209533691
I0123 11:19:03.990036 139878739914752 ddar.py:60] Depth 4/1000 time = 0.7358760833740234
I0123 11:19:05.152360 139878739914752 ddar.py:60] Depth 5/1000 time = 1.1619536876678467
I0123 11:19:05.157799 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:19:05.157867 139878739914752 alphageometry.py:566] LM output (score=-4.063533): "k : C j f k 14 D j k f k 15 ;"
I0123 11:19:05.157906 139878739914752 alphageometry.py:567] Translation: "k = on_line k j f, on_bline k f j"

I0123 11:19:05.157943 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k j f, on_bline k f j ? coll i d h"
I0123 11:19:05.158082 139878739914752 graph.py:498] 
I0123 11:19:05.158132 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k j f, on_bline k f j ? coll i d h
I0123 11:19:05.628412 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4432361125946045
I0123 11:19:06.271642 139878739914752 ddar.py:60] Depth 2/1000 time = 0.6431303024291992
I0123 11:19:07.422326 139878739914752 ddar.py:60] Depth 3/1000 time = 1.150557279586792
I0123 11:19:08.154615 139878739914752 ddar.py:60] Depth 4/1000 time = 0.732062816619873
I0123 11:19:09.316066 139878739914752 ddar.py:60] Depth 5/1000 time = 1.1610686779022217
I0123 11:19:09.321327 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:19:09.321394 139878739914752 alphageometry.py:566] LM output (score=-4.235470): "k : C d e k 14 D d e e k 15 ;"
I0123 11:19:09.321433 139878739914752 alphageometry.py:567] Translation: "k = on_line k d e, on_circle k e d"

I0123 11:19:09.321470 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k d e, on_circle k e d ? coll i d h"
I0123 11:19:09.321614 139878739914752 graph.py:498] 
I0123 11:19:09.321669 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k d e, on_circle k e d ? coll i d h
I0123 11:19:09.979302 139878739914752 ddar.py:60] Depth 1/1000 time = 0.6306197643280029
I0123 11:19:11.803083 139878739914752 ddar.py:60] Depth 2/1000 time = 1.8236591815948486
I0123 11:19:13.945222 139878739914752 ddar.py:60] Depth 3/1000 time = 2.141911029815674
I0123 11:19:16.026546 139878739914752 ddar.py:60] Depth 4/1000 time = 2.08109188079834
I0123 11:19:17.686541 139878739914752 ddar.py:60] Depth 5/1000 time = 1.6594502925872803
I0123 11:19:17.702202 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:19:17.702294 139878739914752 alphageometry.py:566] LM output (score=-4.376676): "k : C b e k 14 D a e a k 15 ;"
I0123 11:19:17.702362 139878739914752 alphageometry.py:567] Translation: "k = on_line k b e, on_circle k a e"

I0123 11:19:17.702409 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k b e, on_circle k a e ? coll i d h"
I0123 11:19:17.702576 139878739914752 graph.py:498] 
I0123 11:19:17.702631 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k b e, on_circle k a e ? coll i d h
I0123 11:19:18.879250 139878739914752 ddar.py:60] Depth 1/1000 time = 1.1480779647827148
I0123 11:19:22.672517 139878739914752 ddar.py:60] Depth 2/1000 time = 3.7930216789245605
I0123 11:19:26.476938 139878739914752 ddar.py:60] Depth 3/1000 time = 3.8041913509368896
I0123 11:19:29.858582 139878739914752 ddar.py:60] Depth 4/1000 time = 3.3813936710357666
I0123 11:19:34.110921 139878739914752 ddar.py:60] Depth 5/1000 time = 4.251841068267822
I0123 11:19:34.121324 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:19:34.121476 139878739914752 alphageometry.py:566] LM output (score=-4.396208): "k : C d e k 14 D d e d k 15 ;"
I0123 11:19:34.121523 139878739914752 alphageometry.py:567] Translation: "k = on_line k d e, on_circle k d e"

I0123 11:19:34.121567 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k d e, on_circle k d e ? coll i d h"
I0123 11:19:34.121744 139878739914752 graph.py:498] 
I0123 11:19:34.121800 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k d e, on_circle k d e ? coll i d h
I0123 11:19:34.697809 139878739914752 ddar.py:60] Depth 1/1000 time = 0.5487878322601318
I0123 11:19:37.422965 139878739914752 ddar.py:60] Depth 2/1000 time = 2.72502064704895
I0123 11:19:40.459802 139878739914752 ddar.py:60] Depth 3/1000 time = 3.036561965942383
I0123 11:19:43.486544 139878739914752 ddar.py:60] Depth 4/1000 time = 3.02649188041687
I0123 11:19:46.485967 139878739914752 ddar.py:60] Depth 5/1000 time = 2.9989302158355713
I0123 11:19:46.492917 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:19:46.493045 139878739914752 alphageometry.py:566] LM output (score=-4.460561): "k : C f g k 14 D f k g k 15 ;"
I0123 11:19:46.493089 139878739914752 alphageometry.py:567] Translation: "k = on_line k f g, on_bline k g f"

I0123 11:19:46.493130 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k f g, on_bline k g f ? coll i d h"
I0123 11:19:46.493281 139878739914752 graph.py:498] 
I0123 11:19:46.493336 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k f g, on_bline k g f ? coll i d h
I0123 11:19:46.974988 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4536590576171875
I0123 11:19:49.051651 139878739914752 ddar.py:60] Depth 2/1000 time = 2.0765392780303955
I0123 11:19:51.259108 139878739914752 ddar.py:60] Depth 3/1000 time = 2.207226276397705
I0123 11:19:53.478522 139878739914752 ddar.py:60] Depth 4/1000 time = 2.219151735305786
I0123 11:19:55.725944 139878739914752 ddar.py:60] Depth 5/1000 time = 2.2468645572662354
I0123 11:19:55.732930 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:19:55.733052 139878739914752 alphageometry.py:566] LM output (score=-4.514673): "k : C b g k 14 D b g g k 15 ;"
I0123 11:19:55.733089 139878739914752 alphageometry.py:567] Translation: "k = on_line k b g, on_circle k g b"

I0123 11:19:55.733129 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k b g, on_circle k g b ? coll i d h"
I0123 11:19:55.733280 139878739914752 graph.py:498] 
I0123 11:19:55.733335 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k b g, on_circle k g b ? coll i d h
I0123 11:19:56.200814 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4408988952636719
I0123 11:19:56.786528 139878739914752 ddar.py:60] Depth 2/1000 time = 0.5856056213378906
I0123 11:19:57.907281 139878739914752 ddar.py:60] Depth 3/1000 time = 1.1205942630767822
I0123 11:19:58.570402 139878739914752 ddar.py:60] Depth 4/1000 time = 0.6628801822662354
I0123 11:19:59.667967 139878739914752 ddar.py:60] Depth 5/1000 time = 1.0972216129302979
I0123 11:19:59.672837 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:19:59.672907 139878739914752 alphageometry.py:566] LM output (score=-4.521870): "k : C g f k 14 D g k f k 15 ;"
I0123 11:19:59.672945 139878739914752 alphageometry.py:567] Translation: "k = on_line k g f, on_bline k f g"

I0123 11:19:59.672983 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k g f, on_bline k f g ? coll i d h"
I0123 11:19:59.673124 139878739914752 graph.py:498] 
I0123 11:19:59.673172 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k g f, on_bline k f g ? coll i d h
I0123 11:20:00.153807 139878739914752 ddar.py:60] Depth 1/1000 time = 0.45353031158447266
I0123 11:20:02.190140 139878739914752 ddar.py:60] Depth 2/1000 time = 2.0362119674682617
I0123 11:20:04.398732 139878739914752 ddar.py:60] Depth 3/1000 time = 2.2083470821380615
I0123 11:20:06.615955 139878739914752 ddar.py:60] Depth 4/1000 time = 2.2169406414031982
I0123 11:20:08.833662 139878739914752 ddar.py:60] Depth 5/1000 time = 2.2171456813812256
I0123 11:20:08.840350 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:20:08.840422 139878739914752 alphageometry.py:566] LM output (score=-4.557130): "k : D c d c k 14 D d f f k 15 ;"
I0123 11:20:08.840461 139878739914752 alphageometry.py:567] Translation: "k = on_circle k c d, on_circle k f d"

I0123 11:20:08.840500 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_circle k c d, on_circle k f d ? coll i d h"
I0123 11:20:08.840651 139878739914752 graph.py:498] 
I0123 11:20:08.840700 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_circle k c d, on_circle k f d ? coll i d h
I0123 11:20:09.330487 139878739914752 ddar.py:60] Depth 1/1000 time = 0.45883870124816895
I0123 11:20:10.571534 139878739914752 ddar.py:60] Depth 2/1000 time = 1.2409231662750244
I0123 11:20:11.576043 139878739914752 ddar.py:60] Depth 3/1000 time = 1.0043058395385742
I0123 11:20:12.601198 139878739914752 ddar.py:60] Depth 4/1000 time = 1.0249881744384766
I0123 11:20:14.097006 139878739914752 ddar.py:60] Depth 5/1000 time = 1.495128870010376
I0123 11:20:14.108008 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:20:14.108098 139878739914752 alphageometry.py:566] LM output (score=-4.567759): "k : C b c k 14 D d k d j 15 ;"
I0123 11:20:14.108139 139878739914752 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2622, in add_clause
    nums = draw_fn()
  File "/home/chi/alphageometry-test/graph.py", line 2608, in draw_fn
    return nm.reduce(to_be_intersected, existing_points)
  File "/home/chi/alphageometry-test/numericals.py", line 1310, in reduce
    result = a.intersect(b)
  File "/home/chi/alphageometry-test/numericals.py", line 215, in intersect
    return line_circle_intersection(self, obj)
  File "/home/chi/alphageometry-test/numericals.py", line 544, in line_circle_intersection
    raise InvalidQuadSolveError()
numericals.InvalidQuadSolveError
"

I0123 11:20:14.108205 139878739914752 alphageometry.py:566] LM output (score=-4.591384): "k : C b e k 14 D b e e k 15 ;"
I0123 11:20:14.108236 139878739914752 alphageometry.py:567] Translation: "k = on_line k b e, on_circle k e b"

I0123 11:20:14.108271 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k b e, on_circle k e b ? coll i d h"
I0123 11:20:14.108430 139878739914752 graph.py:498] 
I0123 11:20:14.108483 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k b e, on_circle k e b ? coll i d h
I0123 11:20:15.276656 139878739914752 ddar.py:60] Depth 1/1000 time = 1.1387243270874023
I0123 11:20:16.671248 139878739914752 ddar.py:60] Depth 2/1000 time = 1.3943500518798828
I0123 11:20:18.132191 139878739914752 ddar.py:60] Depth 3/1000 time = 1.4607017040252686
I0123 11:20:19.600501 139878739914752 ddar.py:60] Depth 4/1000 time = 1.4680440425872803
I0123 11:20:21.062477 139878739914752 ddar.py:60] Depth 5/1000 time = 1.4614849090576172
I0123 11:20:21.067796 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:20:21.067869 139878739914752 alphageometry.py:566] LM output (score=-4.671323): "k : C d g k 14 D d k g k 15 ;"
I0123 11:20:21.067909 139878739914752 alphageometry.py:567] Translation: "k = on_line k d g, on_bline k g d"

I0123 11:20:21.067949 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k d g, on_bline k g d ? coll i d h"
I0123 11:20:21.068094 139878739914752 graph.py:498] 
I0123 11:20:21.068143 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k d g, on_bline k g d ? coll i d h
I0123 11:20:22.032266 139878739914752 ddar.py:60] Depth 1/1000 time = 0.9369561672210693
I0123 11:20:24.177145 139878739914752 ddar.py:60] Depth 2/1000 time = 2.144659996032715
I0123 11:20:26.415083 139878739914752 ddar.py:60] Depth 3/1000 time = 2.237701654434204
I0123 11:20:29.113095 139878739914752 ddar.py:60] Depth 4/1000 time = 2.697749137878418
I0123 11:20:31.863998 139878739914752 ddar.py:60] Depth 5/1000 time = 2.7504022121429443
I0123 11:20:31.869266 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:20:31.869366 139878739914752 alphageometry.py:566] LM output (score=-4.690762): "k : C b e k 14 D b e b k 15 ;"
I0123 11:20:31.869405 139878739914752 alphageometry.py:567] Translation: "k = on_line k b e, on_circle k b e"

I0123 11:20:31.869443 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k b e, on_circle k b e ? coll i d h"
I0123 11:20:31.869586 139878739914752 graph.py:498] 
I0123 11:20:31.869635 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k b e, on_circle k b e ? coll i d h
I0123 11:20:32.570273 139878739914752 ddar.py:60] Depth 1/1000 time = 0.671271800994873
I0123 11:20:33.885606 139878739914752 ddar.py:60] Depth 2/1000 time = 1.3151967525482178
I0123 11:20:35.214488 139878739914752 ddar.py:60] Depth 3/1000 time = 1.328618049621582
I0123 11:20:36.573771 139878739914752 ddar.py:60] Depth 4/1000 time = 1.358985424041748
I0123 11:20:37.937678 139878739914752 ddar.py:60] Depth 5/1000 time = 1.363429069519043
I0123 11:20:37.942476 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:20:37.942561 139878739914752 alphageometry.py:566] LM output (score=-4.718359): "k : D d f d k 14 T a d f k 15 ;"
I0123 11:20:37.942601 139878739914752 alphageometry.py:567] Translation: "k = on_circle k d f, on_tline k f a d"

I0123 11:20:37.942638 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_circle k d f, on_tline k f a d ? coll i d h"
I0123 11:20:37.942795 139878739914752 graph.py:498] 
I0123 11:20:37.942849 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_circle k d f, on_tline k f a d ? coll i d h
I0123 11:20:38.859454 139878739914752 ddar.py:60] Depth 1/1000 time = 0.8842208385467529
I0123 11:20:39.489929 139878739914752 ddar.py:60] Depth 2/1000 time = 0.6302640438079834
I0123 11:20:40.268284 139878739914752 ddar.py:60] Depth 3/1000 time = 0.7782168388366699
I0123 11:20:41.507406 139878739914752 ddar.py:60] Depth 4/1000 time = 1.2387230396270752
I0123 11:20:42.397328 139878739914752 ddar.py:60] Depth 5/1000 time = 0.8842036724090576
I0123 11:20:43.893055 139878739914752 ddar.py:60] Depth 6/1000 time = 1.4955811500549316
I0123 11:20:45.881585 139878739914752 ddar.py:60] Depth 7/1000 time = 1.9883482456207275
I0123 11:20:47.936801 139878739914752 ddar.py:60] Depth 8/1000 time = 2.054969310760498
I0123 11:20:49.481494 139878739914752 ddar.py:60] Depth 9/1000 time = 1.5357685089111328
I0123 11:20:49.482236 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:20:49.482293 139878739914752 alphageometry.py:566] LM output (score=-4.759443): "k : C e g k 14 D e k g k 15 ;"
I0123 11:20:49.482326 139878739914752 alphageometry.py:567] Translation: "k = on_line k e g, on_bline k g e"

I0123 11:20:49.482362 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k e g, on_bline k g e ? coll i d h"
I0123 11:20:49.482503 139878739914752 graph.py:498] 
I0123 11:20:49.482550 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k e g, on_bline k g e ? coll i d h
I0123 11:20:50.420747 139878739914752 ddar.py:60] Depth 1/1000 time = 0.9118306636810303
I0123 11:20:52.510089 139878739914752 ddar.py:60] Depth 2/1000 time = 2.0890727043151855
I0123 11:20:54.764537 139878739914752 ddar.py:60] Depth 3/1000 time = 2.25408673286438
I0123 11:20:56.974559 139878739914752 ddar.py:60] Depth 4/1000 time = 2.2097432613372803
I0123 11:20:58.713972 139878739914752 ddar.py:60] Depth 5/1000 time = 1.7389304637908936
I0123 11:20:58.719666 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:20:58.719749 139878739914752 alphageometry.py:566] LM output (score=-4.769128): "k : D c d c k 14 T c d c k 15 ;"
I0123 11:20:58.719788 139878739914752 alphageometry.py:567] Translation: "k = on_circle k c d, on_tline k c c d"

I0123 11:20:58.719826 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_circle k c d, on_tline k c c d ? coll i d h"
I0123 11:20:58.720181 139878739914752 graph.py:498] 
I0123 11:20:58.720237 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_circle k c d, on_tline k c c d ? coll i d h
I0123 11:20:59.645507 139878739914752 ddar.py:60] Depth 1/1000 time = 0.8920633792877197
I0123 11:21:00.274537 139878739914752 ddar.py:60] Depth 2/1000 time = 0.6288237571716309
I0123 11:21:00.991725 139878739914752 ddar.py:60] Depth 3/1000 time = 0.7170717716217041
I0123 11:21:02.163778 139878739914752 ddar.py:60] Depth 4/1000 time = 1.1719162464141846
I0123 11:21:02.895304 139878739914752 ddar.py:60] Depth 5/1000 time = 0.7310473918914795
I0123 11:21:03.664971 139878739914752 ddar.py:60] Depth 6/1000 time = 0.7692708969116211
I0123 11:21:04.398310 139878739914752 ddar.py:60] Depth 7/1000 time = 0.728853702545166
I0123 11:21:04.400643 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:21:04.400694 139878739914752 alphageometry.py:566] LM output (score=-4.775150): "k : D c i e k 14 D c k e i 15 ;"
I0123 11:21:04.400727 139878739914752 alphageometry.py:567] Translation: "k = eqdistance k e c i, eqdistance k c e i"

I0123 11:21:04.400761 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = eqdistance k e c i, eqdistance k c e i ? coll i d h"
I0123 11:21:04.400900 139878739914752 graph.py:498] 
I0123 11:21:04.400945 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = eqdistance k e c i, eqdistance k c e i ? coll i d h
I0123 11:21:05.381152 139878739914752 ddar.py:60] Depth 1/1000 time = 0.951678991317749
I0123 11:21:06.121824 139878739914752 ddar.py:60] Depth 2/1000 time = 0.7404739856719971
I0123 11:21:06.992988 139878739914752 ddar.py:60] Depth 3/1000 time = 0.8710246086120605
I0123 11:21:08.332366 139878739914752 ddar.py:60] Depth 4/1000 time = 1.339235782623291
I0123 11:21:09.222901 139878739914752 ddar.py:60] Depth 5/1000 time = 0.8902847766876221
I0123 11:21:10.104042 139878739914752 ddar.py:60] Depth 6/1000 time = 0.8807597160339355
I0123 11:21:10.110089 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:21:10.110153 139878739914752 alphageometry.py:566] LM output (score=-4.896362): "k : C b d k 14 D b k d k 15 ;"
I0123 11:21:10.110190 139878739914752 alphageometry.py:567] Translation: "k = on_line k b d, on_bline k d b"

I0123 11:21:10.110226 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k b d, on_bline k d b ? coll i d h"
I0123 11:21:10.110404 139878739914752 graph.py:498] 
I0123 11:21:10.110455 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k b d, on_bline k d b ? coll i d h
I0123 11:21:11.069708 139878739914752 ddar.py:60] Depth 1/1000 time = 0.932776689529419
I0123 11:21:13.234369 139878739914752 ddar.py:60] Depth 2/1000 time = 2.164328098297119
I0123 11:21:15.540452 139878739914752 ddar.py:60] Depth 3/1000 time = 2.305835247039795
I0123 11:21:17.299141 139878739914752 ddar.py:60] Depth 4/1000 time = 1.7584071159362793
I0123 11:21:20.065275 139878739914752 ddar.py:60] Depth 5/1000 time = 2.7656378746032715
I0123 11:21:20.070694 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:21:20.070782 139878739914752 alphageometry.py:566] LM output (score=-4.948209): "k : C b j k 14 D b k j k 15 ;"
I0123 11:21:20.070823 139878739914752 alphageometry.py:567] Translation: "k = on_line k b j, on_bline k j b"

I0123 11:21:20.070863 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k b j, on_bline k j b ? coll i d h"
I0123 11:21:20.071025 139878739914752 graph.py:498] 
I0123 11:21:20.071084 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j a c, on_tline j d a c; k = on_line k b j, on_bline k j b ? coll i d h
I0123 11:21:20.542835 139878739914752 ddar.py:60] Depth 1/1000 time = 0.44332146644592285
I0123 11:21:21.117801 139878739914752 ddar.py:60] Depth 2/1000 time = 0.5748679637908936
I0123 11:21:21.776986 139878739914752 ddar.py:60] Depth 3/1000 time = 0.6590805053710938
I0123 11:21:22.895930 139878739914752 ddar.py:60] Depth 4/1000 time = 1.1188206672668457
I0123 11:21:23.552899 139878739914752 ddar.py:60] Depth 5/1000 time = 0.6564855575561523
I0123 11:21:23.557460 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:21:23.557517 139878739914752 alphageometry.py:566] LM output (score=-5.051284): "k : C b c k 14 D d j d k 15 ;"
I0123 11:21:23.557556 139878739914752 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2622, in add_clause
    nums = draw_fn()
  File "/home/chi/alphageometry-test/graph.py", line 2608, in draw_fn
    return nm.reduce(to_be_intersected, existing_points)
  File "/home/chi/alphageometry-test/numericals.py", line 1310, in reduce
    result = a.intersect(b)
  File "/home/chi/alphageometry-test/numericals.py", line 215, in intersect
    return line_circle_intersection(self, obj)
  File "/home/chi/alphageometry-test/numericals.py", line 544, in line_circle_intersection
    raise InvalidQuadSolveError()
numericals.InvalidQuadSolveError
"

I0123 11:21:23.557612 139878739914752 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : C c e j 12 D c j e j 13 ; x00
I0123 11:21:31.434681 139878739914752 alphageometry.py:566] LM output (score=-0.245438): "k : D d e d k 14 T b c d k 15 ;"
I0123 11:21:31.434978 139878739914752 alphageometry.py:567] Translation: "k = on_circle k d e, on_tline k d b c"

I0123 11:21:31.435066 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_circle k d e, on_tline k d b c ? coll i d h"
I0123 11:21:31.435226 139878739914752 graph.py:498] 
I0123 11:21:31.435286 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_circle k d e, on_tline k d b c ? coll i d h
I0123 11:21:31.868406 139878739914752 ddar.py:60] Depth 1/1000 time = 0.40278029441833496
I0123 11:21:33.996834 139878739914752 ddar.py:60] Depth 2/1000 time = 2.1282906532287598
I0123 11:21:36.212493 139878739914752 ddar.py:60] Depth 3/1000 time = 2.2154078483581543
I0123 11:21:38.362338 139878739914752 ddar.py:60] Depth 4/1000 time = 2.1493191719055176
I0123 11:21:40.028364 139878739914752 ddar.py:60] Depth 5/1000 time = 1.6617941856384277
I0123 11:21:40.031430 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:21:40.031499 139878739914752 alphageometry.py:566] LM output (score=-0.692719): "k : C e f k 14 D e k f k 15 ;"
I0123 11:21:40.031538 139878739914752 alphageometry.py:567] Translation: "k = on_line k e f, on_bline k f e"

I0123 11:21:40.031576 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_line k e f, on_bline k f e ? coll i d h"
I0123 11:21:40.031723 139878739914752 graph.py:498] 
I0123 11:21:40.031771 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_line k e f, on_bline k f e ? coll i d h
I0123 11:21:41.201289 139878739914752 ddar.py:60] Depth 1/1000 time = 1.1393883228302002
I0123 11:21:46.212030 139878739914752 ddar.py:60] Depth 2/1000 time = 5.010516405105591
I0123 11:21:52.046485 139878739914752 ddar.py:60] Depth 3/1000 time = 5.834219217300415
I0123 11:21:58.321419 139878739914752 ddar.py:60] Depth 4/1000 time = 6.274327993392944
I0123 11:21:58.327939 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:21:58.328022 139878739914752 alphageometry.py:566] LM output (score=-1.537583): "k : C b c k 14 T b c d k 15 ;"
I0123 11:21:58.328063 139878739914752 alphageometry.py:567] Translation: "k = on_line k b c, on_tline k d b c"

I0123 11:21:58.328103 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_line k b c, on_tline k d b c ? coll i d h"
I0123 11:21:58.328247 139878739914752 graph.py:498] 
I0123 11:21:58.328295 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_line k b c, on_tline k d b c ? coll i d h
I0123 11:21:58.796087 139878739914752 ddar.py:60] Depth 1/1000 time = 0.441774845123291
I0123 11:22:00.486630 139878739914752 ddar.py:60] Depth 2/1000 time = 1.6904182434082031
I0123 11:22:03.363379 139878739914752 ddar.py:60] Depth 3/1000 time = 2.876506805419922
I0123 11:22:05.251167 139878739914752 ddar.py:60] Depth 4/1000 time = 1.8872816562652588
I0123 11:22:05.256454 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:22:05.256526 139878739914752 alphageometry.py:566] LM output (score=-1.894790): "k : C a c k 14 T a c d k 15 ;"
I0123 11:22:05.256565 139878739914752 alphageometry.py:567] Translation: "k = on_line k a c, on_tline k d a c"

I0123 11:22:05.256639 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_line k a c, on_tline k d a c ? coll i d h"
I0123 11:22:05.256786 139878739914752 graph.py:498] 
I0123 11:22:05.256836 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_line k a c, on_tline k d a c ? coll i d h
I0123 11:22:06.229536 139878739914752 ddar.py:60] Depth 1/1000 time = 0.9458975791931152
I0123 11:22:08.557781 139878739914752 ddar.py:60] Depth 2/1000 time = 2.3280088901519775
I0123 11:22:11.075565 139878739914752 ddar.py:60] Depth 3/1000 time = 2.5175390243530273
I0123 11:22:13.626075 139878739914752 ddar.py:60] Depth 4/1000 time = 2.5502164363861084
I0123 11:22:16.229083 139878739914752 ddar.py:60] Depth 5/1000 time = 2.6024131774902344
I0123 11:22:16.236821 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:22:16.236924 139878739914752 alphageometry.py:566] LM output (score=-1.955772): "k : C f e k 14 D f k e k 15 ;"
I0123 11:22:16.236965 139878739914752 alphageometry.py:567] Translation: "k = on_line k f e, on_bline k e f"

I0123 11:22:16.237014 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_line k f e, on_bline k e f ? coll i d h"
I0123 11:22:16.237173 139878739914752 graph.py:498] 
I0123 11:22:16.237226 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_line k f e, on_bline k e f ? coll i d h
I0123 11:22:17.427145 139878739914752 ddar.py:60] Depth 1/1000 time = 1.1600017547607422
I0123 11:22:21.986790 139878739914752 ddar.py:60] Depth 2/1000 time = 4.55940055847168
I0123 11:22:27.844681 139878739914752 ddar.py:60] Depth 3/1000 time = 5.857656717300415
I0123 11:22:33.554402 139878739914752 ddar.py:60] Depth 4/1000 time = 5.709193706512451
I0123 11:22:33.561026 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:22:33.561109 139878739914752 alphageometry.py:566] LM output (score=-2.755152): "k : D a c a k 14 D c d d k 15 ;"
I0123 11:22:33.561149 139878739914752 alphageometry.py:567] Translation: "k = on_circle k a c, on_circle k d c"

I0123 11:22:33.561187 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_circle k a c, on_circle k d c ? coll i d h"
I0123 11:22:33.561342 139878739914752 graph.py:498] 
I0123 11:22:33.561394 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_circle k a c, on_circle k d c ? coll i d h
I0123 11:22:34.031420 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4374196529388428
I0123 11:22:36.189907 139878739914752 ddar.py:60] Depth 2/1000 time = 2.158357620239258
I0123 11:22:38.674338 139878739914752 ddar.py:60] Depth 3/1000 time = 2.484158992767334
I0123 11:22:42.893733 139878739914752 ddar.py:60] Depth 4/1000 time = 4.219117641448975
I0123 11:22:47.152619 139878739914752 ddar.py:60] Depth 5/1000 time = 4.258657932281494
I0123 11:22:51.537565 139878739914752 ddar.py:60] Depth 6/1000 time = 4.384711742401123
I0123 11:22:55.562566 139878739914752 ddar.py:60] Depth 7/1000 time = 4.024723529815674
I0123 11:23:00.429491 139878739914752 ddar.py:60] Depth 8/1000 time = 4.8666722774505615
I0123 11:23:05.842849 139878739914752 ddar.py:60] Depth 9/1000 time = 5.413066148757935
I0123 11:23:10.218574 139878739914752 ddar.py:60] Depth 10/1000 time = 4.375445604324341
I0123 11:23:15.702498 139878739914752 ddar.py:60] Depth 11/1000 time = 5.483289957046509
I0123 11:23:20.692905 139878739914752 ddar.py:60] Depth 12/1000 time = 4.974145889282227
I0123 11:23:25.905219 139878739914752 ddar.py:60] Depth 13/1000 time = 5.2120678424835205
I0123 11:23:31.157314 139878739914752 ddar.py:60] Depth 14/1000 time = 5.251831293106079
I0123 11:23:35.907226 139878739914752 ddar.py:60] Depth 15/1000 time = 4.74502420425415
I0123 11:23:35.907519 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:23:35.907586 139878739914752 alphageometry.py:566] LM output (score=-2.853607): "k : D c d e k 14 D c k d e 15 ;"
I0123 11:23:35.907625 139878739914752 alphageometry.py:567] Translation: "k = eqdistance k e c d, eqdistance k c d e"

I0123 11:23:35.907665 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = eqdistance k e c d, eqdistance k c d e ? coll i d h"
I0123 11:23:35.907817 139878739914752 graph.py:498] 
I0123 11:23:35.907870 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = eqdistance k e c d, eqdistance k c d e ? coll i d h
I0123 11:23:36.866325 139878739914752 ddar.py:60] Depth 1/1000 time = 0.924429178237915
I0123 11:23:38.459317 139878739914752 ddar.py:60] Depth 2/1000 time = 1.592768669128418
I0123 11:23:40.783113 139878739914752 ddar.py:60] Depth 3/1000 time = 2.3235585689544678
I0123 11:23:43.228873 139878739914752 ddar.py:60] Depth 4/1000 time = 2.445476770401001
I0123 11:23:45.726771 139878739914752 ddar.py:60] Depth 5/1000 time = 2.497612714767456
I0123 11:23:48.256916 139878739914752 ddar.py:60] Depth 6/1000 time = 2.5296339988708496
I0123 11:23:48.264073 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:23:48.264148 139878739914752 alphageometry.py:566] LM output (score=-2.980158): "k : C f d k 14 D f k d k 15 ;"
I0123 11:23:48.264189 139878739914752 alphageometry.py:567] Translation: "k = on_line k f d, on_bline k d f"

I0123 11:23:48.264228 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_line k f d, on_bline k d f ? coll i d h"
I0123 11:23:48.264369 139878739914752 graph.py:498] 
I0123 11:23:48.264416 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_line k f d, on_bline k d f ? coll i d h
I0123 11:23:48.761116 139878739914752 ddar.py:60] Depth 1/1000 time = 0.46907496452331543
I0123 11:23:51.347695 139878739914752 ddar.py:60] Depth 2/1000 time = 2.586402654647827
I0123 11:23:54.070569 139878739914752 ddar.py:60] Depth 3/1000 time = 2.722578763961792
I0123 11:23:57.292113 139878739914752 ddar.py:60] Depth 4/1000 time = 3.221268653869629
I0123 11:24:00.026170 139878739914752 ddar.py:60] Depth 5/1000 time = 2.7334530353546143
I0123 11:24:00.035751 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:24:00.035840 139878739914752 alphageometry.py:566] LM output (score=-3.035379): "k : D d e e k 14 T d e e k 15 ;"
I0123 11:24:00.035879 139878739914752 alphageometry.py:567] Translation: "k = on_circle k e d, on_tline k e d e"

I0123 11:24:00.035919 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_circle k e d, on_tline k e d e ? coll i d h"
I0123 11:24:00.036112 139878739914752 graph.py:498] 
I0123 11:24:00.036170 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_circle k e d, on_tline k e d e ? coll i d h
I0123 11:24:01.206755 139878739914752 ddar.py:60] Depth 1/1000 time = 1.141345500946045
I0123 11:24:04.450878 139878739914752 ddar.py:60] Depth 2/1000 time = 3.2438549995422363
I0123 11:24:08.385445 139878739914752 ddar.py:60] Depth 3/1000 time = 3.9343032836914062
I0123 11:24:12.338303 139878739914752 ddar.py:60] Depth 4/1000 time = 3.9523251056671143
I0123 11:24:16.268930 139878739914752 ddar.py:60] Depth 5/1000 time = 3.9298269748687744
I0123 11:24:16.273329 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:24:16.273403 139878739914752 alphageometry.py:566] LM output (score=-3.058038): "k : C e g k 14 D e k g k 15 ;"
I0123 11:24:16.273439 139878739914752 alphageometry.py:567] Translation: "k = on_line k e g, on_bline k g e"

I0123 11:24:16.273482 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_line k e g, on_bline k g e ? coll i d h"
I0123 11:24:16.273635 139878739914752 graph.py:498] 
I0123 11:24:16.273712 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_line k e g, on_bline k g e ? coll i d h
I0123 11:24:16.757749 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4561631679534912
I0123 11:24:18.508235 139878739914752 ddar.py:60] Depth 2/1000 time = 1.750356674194336
I0123 11:24:21.395418 139878739914752 ddar.py:60] Depth 3/1000 time = 2.8869311809539795
I0123 11:24:23.293501 139878739914752 ddar.py:60] Depth 4/1000 time = 1.897812843322754
I0123 11:24:26.218272 139878739914752 ddar.py:60] Depth 5/1000 time = 2.924206495285034
I0123 11:24:28.166662 139878739914752 ddar.py:60] Depth 6/1000 time = 1.9399008750915527
I0123 11:24:28.167013 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:24:28.167100 139878739914752 alphageometry.py:566] LM output (score=-3.243227): "k : C f j k 14 C e i k 15 ;"
I0123 11:24:28.167144 139878739914752 alphageometry.py:567] Translation: "k = on_line k f j, on_line k e i"

I0123 11:24:28.167188 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_line k f j, on_line k e i ? coll i d h"
I0123 11:24:28.167355 139878739914752 graph.py:498] 
I0123 11:24:28.167410 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_line k f j, on_line k e i ? coll i d h
I0123 11:24:29.140835 139878739914752 ddar.py:60] Depth 1/1000 time = 0.947641134262085
I0123 11:24:31.365067 139878739914752 ddar.py:60] Depth 2/1000 time = 2.223966598510742
I0123 11:24:33.808855 139878739914752 ddar.py:60] Depth 3/1000 time = 2.443554162979126
I0123 11:24:36.239541 139878739914752 ddar.py:60] Depth 4/1000 time = 2.4304044246673584
I0123 11:24:39.226033 139878739914752 ddar.py:60] Depth 5/1000 time = 2.9859731197357178
I0123 11:24:39.231309 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:24:39.231385 139878739914752 alphageometry.py:566] LM output (score=-3.338083): "k : D c d c k 14 T c d c k 15 ;"
I0123 11:24:39.231466 139878739914752 alphageometry.py:567] Translation: "k = on_circle k c d, on_tline k c c d"

I0123 11:24:39.231507 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_circle k c d, on_tline k c c d ? coll i d h"
I0123 11:24:39.231655 139878739914752 graph.py:498] 
I0123 11:24:39.231704 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_circle k c d, on_tline k c c d ? coll i d h
I0123 11:24:39.686294 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4225614070892334
I0123 11:24:41.388628 139878739914752 ddar.py:60] Depth 2/1000 time = 1.7022242546081543
I0123 11:24:43.702637 139878739914752 ddar.py:60] Depth 3/1000 time = 2.3138110637664795
I0123 11:24:46.009515 139878739914752 ddar.py:60] Depth 4/1000 time = 2.3062946796417236
I0123 11:24:48.321307 139878739914752 ddar.py:60] Depth 5/1000 time = 2.3110191822052
I0123 11:24:50.086563 139878739914752 ddar.py:60] Depth 6/1000 time = 1.763167381286621
I0123 11:24:50.090427 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:24:50.090516 139878739914752 alphageometry.py:566] LM output (score=-3.355990): "k : D c f c k 14 D d f d k 15 ;"
I0123 11:24:50.090556 139878739914752 alphageometry.py:567] Translation: "k = on_circle k c f, on_circle k d f"

I0123 11:24:50.090604 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_circle k c f, on_circle k d f ? coll i d h"
I0123 11:24:50.090764 139878739914752 graph.py:498] 
I0123 11:24:50.090820 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_circle k c f, on_circle k d f ? coll i d h
I0123 11:24:51.062712 139878739914752 ddar.py:60] Depth 1/1000 time = 0.9391248226165771
I0123 11:24:52.826031 139878739914752 ddar.py:60] Depth 2/1000 time = 1.7630953788757324
I0123 11:24:55.378864 139878739914752 ddar.py:60] Depth 3/1000 time = 2.5525944232940674
I0123 11:24:57.945298 139878739914752 ddar.py:60] Depth 4/1000 time = 2.5661637783050537
I0123 11:25:00.530483 139878739914752 ddar.py:60] Depth 5/1000 time = 2.584651470184326
I0123 11:25:03.148410 139878739914752 ddar.py:60] Depth 6/1000 time = 2.6120100021362305
I0123 11:25:05.854124 139878739914752 ddar.py:60] Depth 7/1000 time = 2.69991135597229
I0123 11:25:05.854410 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:25:05.854479 139878739914752 alphageometry.py:566] LM output (score=-3.436235): "k : C b e k 14 D b e e k 15 ;"
I0123 11:25:05.854517 139878739914752 alphageometry.py:567] Translation: "k = on_line k b e, on_circle k e b"

I0123 11:25:05.854558 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_line k b e, on_circle k e b ? coll i d h"
I0123 11:25:05.854715 139878739914752 graph.py:498] 
I0123 11:25:05.854771 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_line k b e, on_circle k e b ? coll i d h
I0123 11:25:07.052858 139878739914752 ddar.py:60] Depth 1/1000 time = 1.1640207767486572
I0123 11:25:10.503413 139878739914752 ddar.py:60] Depth 2/1000 time = 3.4503374099731445
I0123 11:25:14.563954 139878739914752 ddar.py:60] Depth 3/1000 time = 4.060339450836182
I0123 11:25:18.628854 139878739914752 ddar.py:60] Depth 4/1000 time = 4.064636945724487
I0123 11:25:22.197811 139878739914752 ddar.py:60] Depth 5/1000 time = 3.5684101581573486
I0123 11:25:26.321676 139878739914752 ddar.py:60] Depth 6/1000 time = 4.116603374481201
I0123 11:25:26.321969 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:25:26.322042 139878739914752 alphageometry.py:566] LM output (score=-3.505994): "k : D d e e k 14 T d k e f 15 ;"
I0123 11:25:26.322080 139878739914752 alphageometry.py:567] Translation: "k = on_circle k e d, on_tline k d e f"

I0123 11:25:26.322121 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_circle k e d, on_tline k d e f ? coll i d h"
I0123 11:25:26.322273 139878739914752 graph.py:498] 
I0123 11:25:26.322328 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_circle k e d, on_tline k d e f ? coll i d h
I0123 11:25:27.480517 139878739914752 ddar.py:60] Depth 1/1000 time = 1.12904953956604
I0123 11:25:31.237766 139878739914752 ddar.py:60] Depth 2/1000 time = 3.757030963897705
I0123 11:25:35.199943 139878739914752 ddar.py:60] Depth 3/1000 time = 3.961941719055176
I0123 11:25:38.638758 139878739914752 ddar.py:60] Depth 4/1000 time = 3.438534736633301
I0123 11:25:42.624359 139878739914752 ddar.py:60] Depth 5/1000 time = 3.984994649887085
I0123 11:25:46.645124 139878739914752 ddar.py:60] Depth 6/1000 time = 4.001299858093262
I0123 11:25:46.645405 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:25:46.645481 139878739914752 alphageometry.py:566] LM output (score=-3.536621): "k : C f g k 14 D f k g k 15 ;"
I0123 11:25:46.645519 139878739914752 alphageometry.py:567] Translation: "k = on_line k f g, on_bline k g f"

I0123 11:25:46.645556 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_line k f g, on_bline k g f ? coll i d h"
I0123 11:25:46.645718 139878739914752 graph.py:498] 
I0123 11:25:46.645774 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_line k f g, on_bline k g f ? coll i d h
I0123 11:25:47.631278 139878739914752 ddar.py:60] Depth 1/1000 time = 0.9567141532897949
I0123 11:25:49.912959 139878739914752 ddar.py:60] Depth 2/1000 time = 2.2814605236053467
I0123 11:25:51.845549 139878739914752 ddar.py:60] Depth 3/1000 time = 1.932358741760254
I0123 11:25:54.241013 139878739914752 ddar.py:60] Depth 4/1000 time = 2.395177125930786
I0123 11:25:56.649314 139878739914752 ddar.py:60] Depth 5/1000 time = 2.4077374935150146
I0123 11:25:59.648093 139878739914752 ddar.py:60] Depth 6/1000 time = 2.9906649589538574
I0123 11:25:59.648496 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:25:59.648587 139878739914752 alphageometry.py:566] LM output (score=-3.555030): "k : D a h a k 14 D d h d k 15 ;"
I0123 11:25:59.648626 139878739914752 alphageometry.py:567] Translation: "k = on_circle k a h, on_circle k d h"

I0123 11:25:59.648679 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_circle k a h, on_circle k d h ? coll i d h"
I0123 11:25:59.648843 139878739914752 graph.py:498] 
I0123 11:25:59.648895 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_circle k a h, on_circle k d h ? coll i d h
I0123 11:26:00.129236 139878739914752 ddar.py:60] Depth 1/1000 time = 0.44718003273010254
I0123 11:26:01.821778 139878739914752 ddar.py:60] Depth 2/1000 time = 1.6923985481262207
I0123 11:26:04.190467 139878739914752 ddar.py:60] Depth 3/1000 time = 2.3684253692626953
I0123 11:26:06.623381 139878739914752 ddar.py:60] Depth 4/1000 time = 2.432638645172119
I0123 11:26:08.539335 139878739914752 ddar.py:60] Depth 5/1000 time = 1.915414571762085
I0123 11:26:08.546998 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:26:08.547075 139878739914752 alphageometry.py:566] LM output (score=-3.575980): "k : C b g k 14 D b k g k 15 ;"
I0123 11:26:08.547116 139878739914752 alphageometry.py:567] Translation: "k = on_line k b g, on_bline k g b"

I0123 11:26:08.547154 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_line k b g, on_bline k g b ? coll i d h"
I0123 11:26:08.547298 139878739914752 graph.py:498] 
I0123 11:26:08.547346 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_line k b g, on_bline k g b ? coll i d h
I0123 11:26:09.511171 139878739914752 ddar.py:60] Depth 1/1000 time = 0.9351282119750977
I0123 11:26:11.790493 139878739914752 ddar.py:60] Depth 2/1000 time = 2.279144048690796
I0123 11:26:13.695634 139878739914752 ddar.py:60] Depth 3/1000 time = 1.9049055576324463
I0123 11:26:16.678982 139878739914752 ddar.py:60] Depth 4/1000 time = 2.9830808639526367
I0123 11:26:18.633861 139878739914752 ddar.py:60] Depth 5/1000 time = 1.9542782306671143
I0123 11:26:21.077732 139878739914752 ddar.py:60] Depth 6/1000 time = 2.437711000442505
I0123 11:26:21.077999 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:26:21.078078 139878739914752 alphageometry.py:566] LM output (score=-3.599468): "k : D d e d k 14 T a c d k 15 ;"
I0123 11:26:21.078117 139878739914752 alphageometry.py:567] Translation: "k = on_circle k d e, on_tline k d a c"

I0123 11:26:21.078157 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_circle k d e, on_tline k d a c ? coll i d h"
I0123 11:26:21.078314 139878739914752 graph.py:498] 
I0123 11:26:21.078371 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_circle k d e, on_tline k d a c ? coll i d h
I0123 11:26:22.019249 139878739914752 ddar.py:60] Depth 1/1000 time = 0.9096639156341553
I0123 11:26:23.633446 139878739914752 ddar.py:60] Depth 2/1000 time = 1.6139791011810303
I0123 11:26:25.828202 139878739914752 ddar.py:60] Depth 3/1000 time = 2.1945176124572754
I0123 11:26:28.017023 139878739914752 ddar.py:60] Depth 4/1000 time = 2.1882989406585693
I0123 11:26:29.728665 139878739914752 ddar.py:60] Depth 5/1000 time = 1.7111845016479492
I0123 11:26:29.734856 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:26:29.734917 139878739914752 alphageometry.py:566] LM output (score=-3.662719): "k : D c f c k 14 D g f g k 15 ;"
I0123 11:26:29.734954 139878739914752 alphageometry.py:567] Translation: "k = on_circle k c f, on_circle k g f"

I0123 11:26:29.734991 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_circle k c f, on_circle k g f ? coll i d h"
I0123 11:26:29.735163 139878739914752 graph.py:498] 
I0123 11:26:29.735211 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_circle k c f, on_circle k g f ? coll i d h
I0123 11:26:30.217274 139878739914752 ddar.py:60] Depth 1/1000 time = 0.44939732551574707
I0123 11:26:32.486804 139878739914752 ddar.py:60] Depth 2/1000 time = 2.2694127559661865
I0123 11:26:35.131033 139878739914752 ddar.py:60] Depth 3/1000 time = 2.643981695175171
I0123 11:26:37.239566 139878739914752 ddar.py:60] Depth 4/1000 time = 2.1082003116607666
I0123 11:26:39.886073 139878739914752 ddar.py:60] Depth 5/1000 time = 2.645827531814575
I0123 11:26:42.539741 139878739914752 ddar.py:60] Depth 6/1000 time = 2.647418975830078
I0123 11:26:45.215104 139878739914752 ddar.py:60] Depth 7/1000 time = 2.669693946838379
I0123 11:26:45.215380 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:26:45.215458 139878739914752 alphageometry.py:566] LM output (score=-3.679163): "k : D c f d k 14 P c f d k 15 ;"
I0123 11:26:45.215497 139878739914752 alphageometry.py:567] Translation: "k = eqdistance k d c f, on_pline k d c f"

I0123 11:26:45.215536 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = eqdistance k d c f, on_pline k d c f ? coll i d h"
I0123 11:26:45.215703 139878739914752 graph.py:498] 
I0123 11:26:45.215759 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = eqdistance k d c f, on_pline k d c f ? coll i d h
I0123 11:26:45.754160 139878739914752 ddar.py:60] Depth 1/1000 time = 0.5044436454772949
I0123 11:26:48.938654 139878739914752 ddar.py:60] Depth 2/1000 time = 3.184354782104492
I0123 11:26:51.744791 139878739914752 ddar.py:60] Depth 3/1000 time = 2.8058907985687256
I0123 11:26:55.084899 139878739914752 ddar.py:60] Depth 4/1000 time = 3.3395352363586426
I0123 11:26:55.090685 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:26:55.090766 139878739914752 alphageometry.py:566] LM output (score=-3.686482): "k : C d e k 14 D d e e k 15 ;"
I0123 11:26:55.090806 139878739914752 alphageometry.py:567] Translation: "k = on_line k d e, on_circle k e d"

I0123 11:26:55.090846 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_line k d e, on_circle k e d ? coll i d h"
I0123 11:26:55.090992 139878739914752 graph.py:498] 
I0123 11:26:55.091038 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_line k d e, on_circle k e d ? coll i d h
I0123 11:26:56.302088 139878739914752 ddar.py:60] Depth 1/1000 time = 1.1833996772766113
I0123 11:27:00.147061 139878739914752 ddar.py:60] Depth 2/1000 time = 3.844721555709839
I0123 11:27:03.653515 139878739914752 ddar.py:60] Depth 3/1000 time = 3.5062203407287598
I0123 11:27:07.697198 139878739914752 ddar.py:60] Depth 4/1000 time = 4.04341197013855
I0123 11:27:11.777494 139878739914752 ddar.py:60] Depth 5/1000 time = 4.079728126525879
I0123 11:27:15.984234 139878739914752 ddar.py:60] Depth 6/1000 time = 4.1872594356536865
I0123 11:27:15.984563 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:27:15.984671 139878739914752 alphageometry.py:566] LM output (score=-3.703413): "k : D c i g k 14 D c k g i 15 ;"
I0123 11:27:15.984711 139878739914752 alphageometry.py:567] Translation: "k = eqdistance k g c i, eqdistance k c g i"

I0123 11:27:15.984755 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = eqdistance k g c i, eqdistance k c g i ? coll i d h"
I0123 11:27:15.984912 139878739914752 graph.py:498] 
I0123 11:27:15.984967 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = eqdistance k g c i, eqdistance k c g i ? coll i d h
I0123 11:27:16.503874 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4873969554901123
I0123 11:27:18.233126 139878739914752 ddar.py:60] Depth 2/1000 time = 1.7291250228881836
I0123 11:27:20.609316 139878739914752 ddar.py:60] Depth 3/1000 time = 2.3759567737579346
I0123 11:27:22.484812 139878739914752 ddar.py:60] Depth 4/1000 time = 1.8752217292785645
I0123 11:27:24.893582 139878739914752 ddar.py:60] Depth 5/1000 time = 2.4085049629211426
I0123 11:27:26.768168 139878739914752 ddar.py:60] Depth 6/1000 time = 1.8740153312683105
I0123 11:27:29.211408 139878739914752 ddar.py:60] Depth 7/1000 time = 2.4383609294891357
I0123 11:27:29.214849 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:27:29.214920 139878739914752 alphageometry.py:566] LM output (score=-3.709532): "k : C d f k 14 D d k f k 15 ;"
I0123 11:27:29.214959 139878739914752 alphageometry.py:567] Translation: "k = on_line k d f, on_bline k f d"

I0123 11:27:29.214998 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_line k d f, on_bline k f d ? coll i d h"
I0123 11:27:29.215140 139878739914752 graph.py:498] 
I0123 11:27:29.215187 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_line k d f, on_bline k f d ? coll i d h
I0123 11:27:29.708323 139878739914752 ddar.py:60] Depth 1/1000 time = 0.46474432945251465
I0123 11:27:32.294035 139878739914752 ddar.py:60] Depth 2/1000 time = 2.585524082183838
I0123 11:27:35.652179 139878739914752 ddar.py:60] Depth 3/1000 time = 3.3577799797058105
I0123 11:27:38.492974 139878739914752 ddar.py:60] Depth 4/1000 time = 2.840517044067383
I0123 11:27:40.744020 139878739914752 ddar.py:60] Depth 5/1000 time = 2.25049090385437
I0123 11:27:40.753587 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:27:40.753678 139878739914752 alphageometry.py:566] LM output (score=-3.710859): "k : D e j g k 14 D e k g j 15 ;"
I0123 11:27:40.753718 139878739914752 alphageometry.py:567] Translation: "k = eqdistance k g e j, eqdistance k e g j"

I0123 11:27:40.753756 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = eqdistance k g e j, eqdistance k e g j ? coll i d h"
I0123 11:27:40.753914 139878739914752 graph.py:498] 
I0123 11:27:40.753969 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = eqdistance k g e j, eqdistance k e g j ? coll i d h
I0123 11:27:41.795939 139878739914752 ddar.py:60] Depth 1/1000 time = 1.0110468864440918
I0123 11:27:43.541551 139878739914752 ddar.py:60] Depth 2/1000 time = 1.7453639507293701
I0123 11:27:46.017657 139878739914752 ddar.py:60] Depth 3/1000 time = 2.475855588912964
I0123 11:27:48.519020 139878739914752 ddar.py:60] Depth 4/1000 time = 2.5010809898376465
I0123 11:27:50.506257 139878739914752 ddar.py:60] Depth 5/1000 time = 1.9869632720947266
I0123 11:27:52.488805 139878739914752 ddar.py:60] Depth 6/1000 time = 1.9820244312286377
I0123 11:27:52.494201 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:27:52.494290 139878739914752 alphageometry.py:566] LM output (score=-3.714679): "k : D f i j k 14 P f i j k 15 ;"
I0123 11:27:52.494329 139878739914752 alphageometry.py:567] Translation: "k = eqdistance k j f i, on_pline k j f i"

I0123 11:27:52.494374 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = eqdistance k j f i, on_pline k j f i ? coll i d h"
I0123 11:27:52.494526 139878739914752 graph.py:498] 
I0123 11:27:52.494579 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = eqdistance k j f i, on_pline k j f i ? coll i d h
I0123 11:27:53.618113 139878739914752 ddar.py:60] Depth 1/1000 time = 1.0919654369354248
I0123 11:27:56.795012 139878739914752 ddar.py:60] Depth 2/1000 time = 3.176676034927368
I0123 11:28:00.177615 139878739914752 ddar.py:60] Depth 3/1000 time = 3.3823838233947754
I0123 11:28:03.458518 139878739914752 ddar.py:60] Depth 4/1000 time = 3.2806525230407715
I0123 11:28:06.814053 139878739914752 ddar.py:60] Depth 5/1000 time = 3.355269193649292
I0123 11:28:10.190584 139878739914752 ddar.py:60] Depth 6/1000 time = 3.375880479812622
I0123 11:28:10.200112 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:28:10.200213 139878739914752 alphageometry.py:566] LM output (score=-3.773116): "k : D c d c k 14 T c f d k 15 ;"
I0123 11:28:10.200255 139878739914752 alphageometry.py:567] Translation: "k = on_circle k c d, on_tline k d c f"

I0123 11:28:10.200305 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_circle k c d, on_tline k d c f ? coll i d h"
I0123 11:28:10.200469 139878739914752 graph.py:498] 
I0123 11:28:10.200522 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_circle k c d, on_tline k d c f ? coll i d h
I0123 11:28:10.692628 139878739914752 ddar.py:60] Depth 1/1000 time = 0.45734620094299316
I0123 11:28:13.054480 139878739914752 ddar.py:60] Depth 2/1000 time = 2.3617050647735596
I0123 11:28:15.505429 139878739914752 ddar.py:60] Depth 3/1000 time = 2.450697898864746
I0123 11:28:17.387641 139878739914752 ddar.py:60] Depth 4/1000 time = 1.881570816040039
I0123 11:28:19.893949 139878739914752 ddar.py:60] Depth 5/1000 time = 2.5031871795654297
I0123 11:28:22.617052 139878739914752 ddar.py:60] Depth 6/1000 time = 2.7228643894195557
I0123 11:28:25.403911 139878739914752 ddar.py:60] Depth 7/1000 time = 2.7865898609161377
I0123 11:28:28.254264 139878739914752 ddar.py:60] Depth 8/1000 time = 2.8468050956726074
I0123 11:28:31.115489 139878739914752 ddar.py:60] Depth 9/1000 time = 2.853283643722534
I0123 11:28:31.115765 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:28:31.115840 139878739914752 alphageometry.py:566] LM output (score=-3.777143): "k : D d e e k 14 D d f f k 15 ;"
I0123 11:28:31.115879 139878739914752 alphageometry.py:567] Translation: "k = on_circle k e d, on_circle k f d"

I0123 11:28:31.115950 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_circle k e d, on_circle k f d ? coll i d h"
I0123 11:28:31.116104 139878739914752 graph.py:498] 
I0123 11:28:31.116159 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_circle k e d, on_circle k f d ? coll i d h
I0123 11:28:31.599511 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4501776695251465
I0123 11:28:34.892674 139878739914752 ddar.py:60] Depth 2/1000 time = 3.2930378913879395
I0123 11:28:38.907375 139878739914752 ddar.py:60] Depth 3/1000 time = 4.014468193054199
I0123 11:28:42.427370 139878739914752 ddar.py:60] Depth 4/1000 time = 3.5197300910949707
I0123 11:28:46.544509 139878739914752 ddar.py:60] Depth 5/1000 time = 4.1165690422058105
I0123 11:28:50.709959 139878739914752 ddar.py:60] Depth 6/1000 time = 4.146574974060059
I0123 11:28:50.710350 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:28:50.710430 139878739914752 alphageometry.py:566] LM output (score=-3.803242): "k : D b e j k 14 D b k e j 15 ;"
I0123 11:28:50.710469 139878739914752 alphageometry.py:567] Translation: "k = eqdistance k j b e, eqdistance k b e j"

I0123 11:28:50.710506 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = eqdistance k j b e, eqdistance k b e j ? coll i d h"
I0123 11:28:50.710665 139878739914752 graph.py:498] 
I0123 11:28:50.710720 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = eqdistance k j b e, eqdistance k b e j ? coll i d h
I0123 11:28:51.222313 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4801754951477051
I0123 11:28:53.759919 139878739914752 ddar.py:60] Depth 2/1000 time = 2.5374715328216553
I0123 11:28:56.859703 139878739914752 ddar.py:60] Depth 3/1000 time = 3.099567413330078
I0123 11:29:00.123529 139878739914752 ddar.py:60] Depth 4/1000 time = 3.263596296310425
I0123 11:29:03.409894 139878739914752 ddar.py:60] Depth 5/1000 time = 3.28584361076355
I0123 11:29:03.417752 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:29:03.417834 139878739914752 alphageometry.py:566] LM output (score=-3.824490): "k : D c f d k 14 D c k d f 15 ;"
I0123 11:29:03.417870 139878739914752 alphageometry.py:567] Translation: "k = eqdistance k d c f, eqdistance k c d f"

I0123 11:29:03.417909 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = eqdistance k d c f, eqdistance k c d f ? coll i d h"
I0123 11:29:03.418064 139878739914752 graph.py:498] 
I0123 11:29:03.418113 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = eqdistance k d c f, eqdistance k c d f ? coll i d h
I0123 11:29:03.893876 139878739914752 ddar.py:60] Depth 1/1000 time = 0.44321107864379883
I0123 11:29:06.423400 139878739914752 ddar.py:60] Depth 2/1000 time = 2.529369592666626
I0123 11:29:09.849876 139878739914752 ddar.py:60] Depth 3/1000 time = 3.42619252204895
I0123 11:29:13.347346 139878739914752 ddar.py:60] Depth 4/1000 time = 3.496918201446533
I0123 11:29:13.353862 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:29:13.353981 139878739914752 alphageometry.py:566] LM output (score=-3.829636): "k : C b f k 14 D b k f k 15 ;"
I0123 11:29:13.354019 139878739914752 alphageometry.py:567] Translation: "k = on_line k b f, on_bline k f b"

I0123 11:29:13.354058 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_line k b f, on_bline k f b ? coll i d h"
I0123 11:29:13.354209 139878739914752 graph.py:498] 
I0123 11:29:13.354262 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = on_line k b f, on_bline k f b ? coll i d h
I0123 11:29:14.028177 139878739914752 ddar.py:60] Depth 1/1000 time = 0.6448466777801514
I0123 11:29:17.452876 139878739914752 ddar.py:60] Depth 2/1000 time = 3.424558162689209
I0123 11:29:21.654673 139878739914752 ddar.py:60] Depth 3/1000 time = 4.2015674114227295
I0123 11:29:25.315823 139878739914752 ddar.py:60] Depth 4/1000 time = 3.6608457565307617
I0123 11:29:29.500615 139878739914752 ddar.py:60] Depth 5/1000 time = 4.18420147895813
I0123 11:29:29.506485 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:29:29.506582 139878739914752 alphageometry.py:566] LM output (score=-3.855386): "k : D c j i k 14 D c k i j 15 ;"
I0123 11:29:29.506623 139878739914752 alphageometry.py:567] Translation: "k = eqdistance k i c j, eqdistance k c i j"

I0123 11:29:29.506672 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = eqdistance k i c j, eqdistance k c i j ? coll i d h"
I0123 11:29:29.506830 139878739914752 graph.py:498] 
I0123 11:29:29.506885 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j c e, on_bline j e c; k = eqdistance k i c j, eqdistance k c i j ? coll i d h
I0123 11:29:29.988180 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4501664638519287
I0123 11:29:32.202358 139878739914752 ddar.py:60] Depth 2/1000 time = 2.214054822921753
I0123 11:29:35.193925 139878739914752 ddar.py:60] Depth 3/1000 time = 2.991338014602661
I0123 11:29:38.009079 139878739914752 ddar.py:60] Depth 4/1000 time = 2.814626693725586
I0123 11:29:38.015096 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:29:38.015171 139878739914752 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : C d f j 12 D d j f j 13 ; x00
I0123 11:29:45.761612 139878739914752 alphageometry.py:566] LM output (score=-0.402797): "k : C b c k 14 T b c d k 15 ;"
I0123 11:29:45.761758 139878739914752 alphageometry.py:567] Translation: "k = on_line k b c, on_tline k d b c"

I0123 11:29:45.761803 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k b c, on_tline k d b c ? coll i d h"
I0123 11:29:45.762005 139878739914752 graph.py:498] 
I0123 11:29:45.762056 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k b c, on_tline k d b c ? coll i d h
I0123 11:29:46.794191 139878739914752 ddar.py:60] Depth 1/1000 time = 1.0063493251800537
I0123 11:29:48.449764 139878739914752 ddar.py:60] Depth 2/1000 time = 1.655306339263916
I0123 11:29:50.858565 139878739914752 ddar.py:60] Depth 3/1000 time = 2.4085335731506348
I0123 11:29:53.223110 139878739914752 ddar.py:60] Depth 4/1000 time = 2.363980770111084
I0123 11:29:53.228070 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:29:53.228160 139878739914752 alphageometry.py:566] LM output (score=-0.784873): "k : D d e d k 14 T b c d k 15 ;"
I0123 11:29:53.228200 139878739914752 alphageometry.py:567] Translation: "k = on_circle k d e, on_tline k d b c"

I0123 11:29:53.228250 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_circle k d e, on_tline k d b c ? coll i d h"
I0123 11:29:53.228404 139878739914752 graph.py:498] 
I0123 11:29:53.228461 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_circle k d e, on_tline k d b c ? coll i d h
I0123 11:29:53.659067 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4000566005706787
I0123 11:29:55.202451 139878739914752 ddar.py:60] Depth 2/1000 time = 1.543247938156128
I0123 11:29:57.337901 139878739914752 ddar.py:60] Depth 3/1000 time = 2.1352062225341797
I0123 11:29:58.913739 139878739914752 ddar.py:60] Depth 4/1000 time = 1.5753090381622314
I0123 11:30:00.484103 139878739914752 ddar.py:60] Depth 5/1000 time = 1.566178798675537
I0123 11:30:00.486978 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:30:00.487048 139878739914752 alphageometry.py:566] LM output (score=-0.918867): "k : C c d k 14 D c k d k 15 ;"
I0123 11:30:00.487085 139878739914752 alphageometry.py:567] Translation: "k = on_line k c d, on_bline k d c"

I0123 11:30:00.487121 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k c d, on_bline k d c ? coll i d h"
I0123 11:30:00.487263 139878739914752 graph.py:498] 
I0123 11:30:00.487311 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k c d, on_bline k d c ? coll i d h
I0123 11:30:01.558983 139878739914752 ddar.py:60] Depth 1/1000 time = 1.0439424514770508
I0123 11:30:04.211360 139878739914752 ddar.py:60] Depth 2/1000 time = 2.6521496772766113
I0123 11:30:07.807868 139878739914752 ddar.py:60] Depth 3/1000 time = 3.5962836742401123
I0123 11:30:10.953806 139878739914752 ddar.py:60] Depth 4/1000 time = 3.145695686340332
I0123 11:30:14.111196 139878739914752 ddar.py:60] Depth 5/1000 time = 3.157109260559082
I0123 11:30:17.860145 139878739914752 ddar.py:60] Depth 6/1000 time = 3.748363971710205
I0123 11:30:17.869197 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:30:17.869266 139878739914752 alphageometry.py:566] LM output (score=-1.433153): "k : C a c k 14 T a c d k 15 ;"
I0123 11:30:17.869303 139878739914752 alphageometry.py:567] Translation: "k = on_line k a c, on_tline k d a c"

I0123 11:30:17.869341 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k a c, on_tline k d a c ? coll i d h"
I0123 11:30:17.869495 139878739914752 graph.py:498] 
I0123 11:30:17.869543 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k a c, on_tline k d a c ? coll i d h
I0123 11:30:18.358653 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4626805782318115
I0123 11:30:20.682836 139878739914752 ddar.py:60] Depth 2/1000 time = 2.324035882949829
I0123 11:30:22.591341 139878739914752 ddar.py:60] Depth 3/1000 time = 1.9082648754119873
I0123 11:30:25.072743 139878739914752 ddar.py:60] Depth 4/1000 time = 2.481131076812744
I0123 11:30:27.583117 139878739914752 ddar.py:60] Depth 5/1000 time = 2.509845495223999
I0123 11:30:27.589889 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:30:27.589961 139878739914752 alphageometry.py:566] LM output (score=-1.844052): "k : C b f k 14 D b k f k 15 ;"
I0123 11:30:27.590001 139878739914752 alphageometry.py:567] Translation: "k = on_line k b f, on_bline k f b"

I0123 11:30:27.590040 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k b f, on_bline k f b ? coll i d h"
I0123 11:30:27.590182 139878739914752 graph.py:498] 
I0123 11:30:27.590230 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k b f, on_bline k f b ? coll i d h
I0123 11:30:28.845503 139878739914752 ddar.py:60] Depth 1/1000 time = 1.2272815704345703
I0123 11:30:32.312287 139878739914752 ddar.py:60] Depth 2/1000 time = 3.46655011177063
I0123 11:30:35.857992 139878739914752 ddar.py:60] Depth 3/1000 time = 3.545464515686035
I0123 11:30:39.400934 139878739914752 ddar.py:60] Depth 4/1000 time = 3.542668104171753
I0123 11:30:43.584185 139878739914752 ddar.py:60] Depth 5/1000 time = 4.1826536655426025
I0123 11:30:43.591576 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:30:43.591666 139878739914752 alphageometry.py:566] LM output (score=-2.143335): "k : C d g k 14 D d k g k 15 ;"
I0123 11:30:43.591704 139878739914752 alphageometry.py:567] Translation: "k = on_line k d g, on_bline k g d"

I0123 11:30:43.591749 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k d g, on_bline k g d ? coll i d h"
I0123 11:30:43.591909 139878739914752 graph.py:498] 
I0123 11:30:43.591962 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k d g, on_bline k g d ? coll i d h
I0123 11:30:44.115593 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4962887763977051
I0123 11:30:46.526681 139878739914752 ddar.py:60] Depth 2/1000 time = 2.410926342010498
I0123 11:30:49.003525 139878739914752 ddar.py:60] Depth 3/1000 time = 2.4766054153442383
I0123 11:30:51.514715 139878739914752 ddar.py:60] Depth 4/1000 time = 2.5109167098999023
I0123 11:30:54.629426 139878739914752 ddar.py:60] Depth 5/1000 time = 3.1141598224639893
I0123 11:30:54.636069 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:30:54.636145 139878739914752 alphageometry.py:566] LM output (score=-2.193215): "k : C e f k 14 D e k f k 15 ;"
I0123 11:30:54.636183 139878739914752 alphageometry.py:567] Translation: "k = on_line k e f, on_bline k f e"

I0123 11:30:54.636221 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k e f, on_bline k f e ? coll i d h"
I0123 11:30:54.636364 139878739914752 graph.py:498] 
I0123 11:30:54.636438 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k e f, on_bline k f e ? coll i d h
I0123 11:30:55.322414 139878739914752 ddar.py:60] Depth 1/1000 time = 0.6553616523742676
I0123 11:30:59.721827 139878739914752 ddar.py:60] Depth 2/1000 time = 4.399284601211548
I0123 11:31:04.322660 139878739914752 ddar.py:60] Depth 3/1000 time = 4.600604057312012
I0123 11:31:08.964720 139878739914752 ddar.py:60] Depth 4/1000 time = 4.641794204711914
I0123 11:31:13.568457 139878739914752 ddar.py:60] Depth 5/1000 time = 4.603118896484375
I0123 11:31:13.576139 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:31:13.576258 139878739914752 alphageometry.py:566] LM output (score=-2.280767): "k : C d e k 14 D d k e k 15 ;"
I0123 11:31:13.576299 139878739914752 alphageometry.py:567] Translation: "k = on_line k d e, on_bline k e d"

I0123 11:31:13.576343 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k d e, on_bline k e d ? coll i d h"
I0123 11:31:13.576494 139878739914752 graph.py:498] 
I0123 11:31:13.576547 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k d e, on_bline k e d ? coll i d h
I0123 11:31:14.150191 139878739914752 ddar.py:60] Depth 1/1000 time = 0.5458540916442871
I0123 11:31:17.381396 139878739914752 ddar.py:60] Depth 2/1000 time = 3.231083631515503
I0123 11:31:20.107099 139878739914752 ddar.py:60] Depth 3/1000 time = 2.725473642349243
I0123 11:31:23.437481 139878739914752 ddar.py:60] Depth 4/1000 time = 3.330106735229492
I0123 11:31:26.171393 139878739914752 ddar.py:60] Depth 5/1000 time = 2.7333102226257324
I0123 11:31:26.177690 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:31:26.177761 139878739914752 alphageometry.py:566] LM output (score=-2.339415): "k : C b g k 14 D b k g k 15 ;"
I0123 11:31:26.177798 139878739914752 alphageometry.py:567] Translation: "k = on_line k b g, on_bline k g b"

I0123 11:31:26.177837 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k b g, on_bline k g b ? coll i d h"
I0123 11:31:26.177978 139878739914752 graph.py:498] 
I0123 11:31:26.178026 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k b g, on_bline k g b ? coll i d h
I0123 11:31:26.649358 139878739914752 ddar.py:60] Depth 1/1000 time = 0.44370102882385254
I0123 11:31:28.914224 139878739914752 ddar.py:60] Depth 2/1000 time = 2.264740228652954
I0123 11:31:31.307070 139878739914752 ddar.py:60] Depth 3/1000 time = 2.392609119415283
I0123 11:31:33.099485 139878739914752 ddar.py:60] Depth 4/1000 time = 1.792140007019043
I0123 11:31:35.461256 139878739914752 ddar.py:60] Depth 5/1000 time = 2.3612382411956787
I0123 11:31:37.255558 139878739914752 ddar.py:60] Depth 6/1000 time = 1.7887201309204102
I0123 11:31:37.255824 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:31:37.255874 139878739914752 alphageometry.py:566] LM output (score=-2.605074): "k : C a d k 14 D a k d k 15 ;"
I0123 11:31:37.255907 139878739914752 alphageometry.py:567] Translation: "k = on_line k a d, on_bline k d a"

I0123 11:31:37.255942 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k a d, on_bline k d a ? coll i d h"
I0123 11:31:37.256114 139878739914752 graph.py:498] 
I0123 11:31:37.256162 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k a d, on_bline k d a ? coll i d h
I0123 11:31:38.312668 139878739914752 ddar.py:60] Depth 1/1000 time = 1.029756784439087
I0123 11:31:40.156027 139878739914752 ddar.py:60] Depth 2/1000 time = 1.8431189060211182
I0123 11:31:42.811636 139878739914752 ddar.py:60] Depth 3/1000 time = 2.655357599258423
I0123 11:31:45.397419 139878739914752 ddar.py:60] Depth 4/1000 time = 2.5854616165161133
I0123 11:31:48.014003 139878739914752 ddar.py:60] Depth 5/1000 time = 2.6159658432006836
I0123 11:31:48.021425 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:31:48.021522 139878739914752 alphageometry.py:566] LM output (score=-2.609682): "k : C d e k 14 D d e e k 15 ;"
I0123 11:31:48.021562 139878739914752 alphageometry.py:567] Translation: "k = on_line k d e, on_circle k e d"

I0123 11:31:48.021610 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k d e, on_circle k e d ? coll i d h"
I0123 11:31:48.021782 139878739914752 graph.py:498] 
I0123 11:31:48.021841 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k d e, on_circle k e d ? coll i d h
I0123 11:31:48.684845 139878739914752 ddar.py:60] Depth 1/1000 time = 0.6350958347320557
I0123 11:31:52.505805 139878739914752 ddar.py:60] Depth 2/1000 time = 3.8208203315734863
I0123 11:31:55.814548 139878739914752 ddar.py:60] Depth 3/1000 time = 3.3085122108459473
I0123 11:31:59.111211 139878739914752 ddar.py:60] Depth 4/1000 time = 3.2963902950286865
I0123 11:32:02.954500 139878739914752 ddar.py:60] Depth 5/1000 time = 3.842790126800537
I0123 11:32:02.967876 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:32:02.967941 139878739914752 alphageometry.py:566] LM output (score=-2.737509): "k : C f g k 14 D f k g k 15 ;"
I0123 11:32:02.967976 139878739914752 alphageometry.py:567] Translation: "k = on_line k f g, on_bline k g f"

I0123 11:32:02.968012 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k f g, on_bline k g f ? coll i d h"
I0123 11:32:02.968144 139878739914752 graph.py:498] 
I0123 11:32:02.968192 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k f g, on_bline k g f ? coll i d h
I0123 11:32:03.450859 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4556605815887451
I0123 11:32:05.774030 139878739914752 ddar.py:60] Depth 2/1000 time = 2.3230249881744385
I0123 11:32:08.246109 139878739914752 ddar.py:60] Depth 3/1000 time = 2.4718377590179443
I0123 11:32:10.139757 139878739914752 ddar.py:60] Depth 4/1000 time = 1.8933780193328857
I0123 11:32:12.593047 139878739914752 ddar.py:60] Depth 5/1000 time = 2.452754020690918
I0123 11:32:15.096782 139878739914752 ddar.py:60] Depth 6/1000 time = 2.4935717582702637
I0123 11:32:15.097043 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:32:15.097100 139878739914752 alphageometry.py:566] LM output (score=-2.972569): "k : C b d k 14 D b k d k 15 ;"
I0123 11:32:15.097167 139878739914752 alphageometry.py:567] Translation: "k = on_line k b d, on_bline k d b"

I0123 11:32:15.097208 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k b d, on_bline k d b ? coll i d h"
I0123 11:32:15.097352 139878739914752 graph.py:498] 
I0123 11:32:15.097400 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k b d, on_bline k d b ? coll i d h
I0123 11:32:15.570957 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4465317726135254
I0123 11:32:18.027306 139878739914752 ddar.py:60] Depth 2/1000 time = 2.456221103668213
I0123 11:32:20.722877 139878739914752 ddar.py:60] Depth 3/1000 time = 2.6953108310699463
I0123 11:32:22.744603 139878739914752 ddar.py:60] Depth 4/1000 time = 2.021422863006592
I0123 11:32:25.345262 139878739914752 ddar.py:60] Depth 5/1000 time = 2.6000828742980957
I0123 11:32:25.352337 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:32:25.352425 139878739914752 alphageometry.py:566] LM output (score=-3.027783): "k : C g f k 14 D g k f k 15 ;"
I0123 11:32:25.352462 139878739914752 alphageometry.py:567] Translation: "k = on_line k g f, on_bline k f g"

I0123 11:32:25.352508 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k g f, on_bline k f g ? coll i d h"
I0123 11:32:25.352658 139878739914752 graph.py:498] 
I0123 11:32:25.352715 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k g f, on_bline k f g ? coll i d h
I0123 11:32:25.835141 139878739914752 ddar.py:60] Depth 1/1000 time = 0.45482730865478516
I0123 11:32:28.207353 139878739914752 ddar.py:60] Depth 2/1000 time = 2.3720927238464355
I0123 11:32:30.770901 139878739914752 ddar.py:60] Depth 3/1000 time = 2.5633187294006348
I0123 11:32:32.677676 139878739914752 ddar.py:60] Depth 4/1000 time = 1.906505823135376
I0123 11:32:35.156966 139878739914752 ddar.py:60] Depth 5/1000 time = 2.4787344932556152
I0123 11:32:37.655090 139878739914752 ddar.py:60] Depth 6/1000 time = 2.487750768661499
I0123 11:32:37.655342 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:32:37.655401 139878739914752 alphageometry.py:566] LM output (score=-3.097147): "k : C g h k 14 D g k h k 15 ;"
I0123 11:32:37.655438 139878739914752 alphageometry.py:567] Translation: "k = on_line k g h, on_bline k h g"

I0123 11:32:37.655476 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k g h, on_bline k h g ? coll i d h"
I0123 11:32:37.655616 139878739914752 graph.py:498] 
I0123 11:32:37.655664 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k g h, on_bline k h g ? coll i d h
I0123 11:32:38.785183 139878739914752 ddar.py:60] Depth 1/1000 time = 1.102158784866333
I0123 11:32:41.153850 139878739914752 ddar.py:60] Depth 2/1000 time = 2.3684496879577637
I0123 11:32:43.615995 139878739914752 ddar.py:60] Depth 3/1000 time = 2.4619088172912598
I0123 11:32:46.029964 139878739914752 ddar.py:60] Depth 4/1000 time = 2.413705348968506
I0123 11:32:49.077300 139878739914752 ddar.py:60] Depth 5/1000 time = 3.0467886924743652
I0123 11:32:49.081805 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:32:49.081867 139878739914752 alphageometry.py:566] LM output (score=-3.145957): "k : C b e k 14 D b e e k 15 ;"
I0123 11:32:49.081901 139878739914752 alphageometry.py:567] Translation: "k = on_line k b e, on_circle k e b"

I0123 11:32:49.081936 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k b e, on_circle k e b ? coll i d h"
I0123 11:32:49.082076 139878739914752 graph.py:498] 
I0123 11:32:49.082123 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k b e, on_circle k e b ? coll i d h
I0123 11:32:49.772270 139878739914752 ddar.py:60] Depth 1/1000 time = 0.6620264053344727
I0123 11:32:53.225023 139878739914752 ddar.py:60] Depth 2/1000 time = 3.4526264667510986
I0123 11:32:57.334947 139878739914752 ddar.py:60] Depth 3/1000 time = 4.109683036804199
I0123 11:33:00.932446 139878739914752 ddar.py:60] Depth 4/1000 time = 3.597250461578369
I0123 11:33:04.517212 139878739914752 ddar.py:60] Depth 5/1000 time = 3.584300994873047
I0123 11:33:08.101272 139878739914752 ddar.py:60] Depth 6/1000 time = 3.5781638622283936
I0123 11:33:08.101532 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:33:08.101605 139878739914752 alphageometry.py:566] LM output (score=-3.191561): "k : D c d c k 14 T c d c k 15 ;"
I0123 11:33:08.101649 139878739914752 alphageometry.py:567] Translation: "k = on_circle k c d, on_tline k c c d"

I0123 11:33:08.101695 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_circle k c d, on_tline k c c d ? coll i d h"
I0123 11:33:08.101846 139878739914752 graph.py:498] 
I0123 11:33:08.101902 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_circle k c d, on_tline k c c d ? coll i d h
I0123 11:33:08.552128 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4189419746398926
I0123 11:33:10.226128 139878739914752 ddar.py:60] Depth 2/1000 time = 1.6738786697387695
I0123 11:33:12.553833 139878739914752 ddar.py:60] Depth 3/1000 time = 2.327493667602539
I0123 11:33:14.276911 139878739914752 ddar.py:60] Depth 4/1000 time = 1.7226173877716064
I0123 11:33:16.616263 139878739914752 ddar.py:60] Depth 5/1000 time = 2.338738441467285
I0123 11:33:18.358412 139878739914752 ddar.py:60] Depth 6/1000 time = 1.7400848865509033
I0123 11:33:18.362310 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:33:18.362365 139878739914752 alphageometry.py:566] LM output (score=-3.212965): "k : C e g k 14 D e k g k 15 ;"
I0123 11:33:18.362399 139878739914752 alphageometry.py:567] Translation: "k = on_line k e g, on_bline k g e"

I0123 11:33:18.362435 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k e g, on_bline k g e ? coll i d h"
I0123 11:33:18.362569 139878739914752 graph.py:498] 
I0123 11:33:18.362616 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k e g, on_bline k g e ? coll i d h
I0123 11:33:18.834834 139878739914752 ddar.py:60] Depth 1/1000 time = 0.44548630714416504
I0123 11:33:21.083071 139878739914752 ddar.py:60] Depth 2/1000 time = 2.2481257915496826
I0123 11:33:22.881629 139878739914752 ddar.py:60] Depth 3/1000 time = 1.7983355522155762
I0123 11:33:25.201829 139878739914752 ddar.py:60] Depth 4/1000 time = 2.319932460784912
I0123 11:33:26.959403 139878739914752 ddar.py:60] Depth 5/1000 time = 1.7570507526397705
I0123 11:33:29.288900 139878739914752 ddar.py:60] Depth 6/1000 time = 2.323110342025757
I0123 11:33:29.289110 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:33:29.289165 139878739914752 alphageometry.py:566] LM output (score=-3.386782): "k : D f j g k 14 D f k g j 15 ;"
I0123 11:33:29.289201 139878739914752 alphageometry.py:567] Translation: "k = eqdistance k g f j, eqdistance k f g j"

I0123 11:33:29.289239 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = eqdistance k g f j, eqdistance k f g j ? coll i d h"
I0123 11:33:29.289374 139878739914752 graph.py:498] 
I0123 11:33:29.289421 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = eqdistance k g f j, eqdistance k f g j ? coll i d h
I0123 11:33:29.815356 139878739914752 ddar.py:60] Depth 1/1000 time = 0.49448442459106445
I0123 11:33:31.497206 139878739914752 ddar.py:60] Depth 2/1000 time = 1.681730031967163
I0123 11:33:33.897199 139878739914752 ddar.py:60] Depth 3/1000 time = 2.3997559547424316
I0123 11:33:35.743858 139878739914752 ddar.py:60] Depth 4/1000 time = 1.846419095993042
I0123 11:33:37.576956 139878739914752 ddar.py:60] Depth 5/1000 time = 1.8328289985656738
I0123 11:33:40.055089 139878739914752 ddar.py:60] Depth 6/1000 time = 2.477646827697754
I0123 11:33:40.060066 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:33:40.060129 139878739914752 alphageometry.py:566] LM output (score=-3.418998): "k : C d h k 14 D d k h k 15 ;"
I0123 11:33:40.060166 139878739914752 alphageometry.py:567] Translation: "k = on_line k d h, on_bline k h d"

I0123 11:33:40.060204 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k d h, on_bline k h d ? coll i d h"
I0123 11:33:40.060336 139878739914752 graph.py:498] 
I0123 11:33:40.060384 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k d h, on_bline k h d ? coll i d h
I0123 11:33:40.549269 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4621427059173584
I0123 11:33:42.450280 139878739914752 ddar.py:60] Depth 2/1000 time = 1.900832176208496
I0123 11:33:45.066841 139878739914752 ddar.py:60] Depth 3/1000 time = 2.616225481033325
I0123 11:33:47.655698 139878739914752 ddar.py:60] Depth 4/1000 time = 2.5885844230651855
I0123 11:33:50.260723 139878739914752 ddar.py:60] Depth 5/1000 time = 2.6044485569000244
I0123 11:33:50.268419 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:33:50.268506 139878739914752 alphageometry.py:566] LM output (score=-3.468477): "k : D d e e k 14 T d e e k 15 ;"
I0123 11:33:50.268546 139878739914752 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 11:33:50.268613 139878739914752 alphageometry.py:566] LM output (score=-3.511711): "k : D e j e k 14 D h j h k 15 ;"
I0123 11:33:50.268644 139878739914752 alphageometry.py:567] Translation: "k = on_circle k e j, on_circle k h j"

I0123 11:33:50.268687 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_circle k e j, on_circle k h j ? coll i d h"
I0123 11:33:50.268845 139878739914752 graph.py:498] 
I0123 11:33:50.268901 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_circle k e j, on_circle k h j ? coll i d h
I0123 11:33:50.759422 139878739914752 ddar.py:60] Depth 1/1000 time = 0.45676565170288086
I0123 11:33:52.763260 139878739914752 ddar.py:60] Depth 2/1000 time = 2.0037121772766113
I0123 11:33:56.508148 139878739914752 ddar.py:60] Depth 3/1000 time = 3.744657516479492
I0123 11:34:00.127758 139878739914752 ddar.py:60] Depth 4/1000 time = 3.619370698928833
I0123 11:34:03.785380 139878739914752 ddar.py:60] Depth 5/1000 time = 3.6571104526519775
I0123 11:34:03.805539 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:34:03.805607 139878739914752 alphageometry.py:566] LM output (score=-3.524342): "k : D d j e k 14 P d j e k 15 ;"
I0123 11:34:03.805650 139878739914752 alphageometry.py:567] Translation: "k = eqdistance k e d j, on_pline k e d j"

I0123 11:34:03.805690 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = eqdistance k e d j, on_pline k e d j ? coll i d h"
I0123 11:34:03.805825 139878739914752 graph.py:498] 
I0123 11:34:03.805873 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = eqdistance k e d j, on_pline k e d j ? coll i d h
I0123 11:34:04.874966 139878739914752 ddar.py:60] Depth 1/1000 time = 1.0360500812530518
I0123 11:34:07.063900 139878739914752 ddar.py:60] Depth 2/1000 time = 2.1887290477752686
I0123 11:34:09.892571 139878739914752 ddar.py:60] Depth 3/1000 time = 2.82844877243042
I0123 11:34:13.384147 139878739914752 ddar.py:60] Depth 4/1000 time = 3.4913408756256104
I0123 11:34:17.003068 139878739914752 ddar.py:60] Depth 5/1000 time = 3.618657112121582
I0123 11:34:20.582939 139878739914752 ddar.py:60] Depth 6/1000 time = 3.5793986320495605
I0123 11:34:20.600585 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:34:20.600666 139878739914752 alphageometry.py:566] LM output (score=-3.546394): "k : D c d c k 14 D c d d k 15 ;"
I0123 11:34:20.600703 139878739914752 alphageometry.py:567] Translation: "k = on_circle k c d, on_circle k d c"

I0123 11:34:20.600744 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_circle k c d, on_circle k d c ? coll i d h"
I0123 11:34:20.600900 139878739914752 graph.py:498] 
I0123 11:34:20.600953 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_circle k c d, on_circle k d c ? coll i d h
I0123 11:34:21.075981 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4454619884490967
I0123 11:34:22.671520 139878739914752 ddar.py:60] Depth 2/1000 time = 1.5954077243804932
I0123 11:34:24.889953 139878739914752 ddar.py:60] Depth 3/1000 time = 2.21815824508667
I0123 11:34:26.491000 139878739914752 ddar.py:60] Depth 4/1000 time = 1.600553274154663
I0123 11:34:28.079493 139878739914752 ddar.py:60] Depth 5/1000 time = 1.5876867771148682
I0123 11:34:30.270601 139878739914752 ddar.py:60] Depth 6/1000 time = 2.188127040863037
I0123 11:34:30.273438 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:34:30.273519 139878739914752 alphageometry.py:566] LM output (score=-3.560778): "k : D a j a k 14 D d j d k 15 ;"
I0123 11:34:30.273555 139878739914752 alphageometry.py:567] Translation: "k = on_circle k a j, on_circle k d j"

I0123 11:34:30.273599 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_circle k a j, on_circle k d j ? coll i d h"
I0123 11:34:30.273753 139878739914752 graph.py:498] 
I0123 11:34:30.273812 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_circle k a j, on_circle k d j ? coll i d h
I0123 11:34:30.763824 139878739914752 ddar.py:60] Depth 1/1000 time = 0.46039748191833496
I0123 11:34:32.480255 139878739914752 ddar.py:60] Depth 2/1000 time = 1.7162902355194092
I0123 11:34:34.312955 139878739914752 ddar.py:60] Depth 3/1000 time = 1.8324835300445557
I0123 11:34:36.664570 139878739914752 ddar.py:60] Depth 4/1000 time = 2.3511149883270264
I0123 11:34:38.441089 139878739914752 ddar.py:60] Depth 5/1000 time = 1.7716338634490967
I0123 11:34:40.835382 139878739914752 ddar.py:60] Depth 6/1000 time = 2.3940327167510986
I0123 11:34:40.837864 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:34:40.837921 139878739914752 alphageometry.py:566] LM output (score=-3.597092): "k : C b e k 14 D b k e k 15 ;"
I0123 11:34:40.837956 139878739914752 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 11:34:40.837993 139878739914752 alphageometry.py:566] LM output (score=-3.636828): "k : C b f k 14 D b f f k 15 ;"
I0123 11:34:40.838021 139878739914752 alphageometry.py:567] Translation: "k = on_line k b f, on_circle k f b"

I0123 11:34:40.838052 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k b f, on_circle k f b ? coll i d h"
I0123 11:34:40.838207 139878739914752 graph.py:498] 
I0123 11:34:40.838255 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k b f, on_circle k f b ? coll i d h
I0123 11:34:41.538066 139878739914752 ddar.py:60] Depth 1/1000 time = 0.6709671020507812
I0123 11:34:45.187893 139878739914752 ddar.py:60] Depth 2/1000 time = 3.6496968269348145
I0123 11:34:48.969626 139878739914752 ddar.py:60] Depth 3/1000 time = 3.7815098762512207
I0123 11:34:53.392489 139878739914752 ddar.py:60] Depth 4/1000 time = 4.4222564697265625
I0123 11:34:57.203323 139878739914752 ddar.py:60] Depth 5/1000 time = 3.803105354309082
I0123 11:34:57.203603 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:34:57.203665 139878739914752 alphageometry.py:566] LM output (score=-3.636939): "k : C a d k 14 P a d d k 15 ;"
I0123 11:34:57.203703 139878739914752 alphageometry.py:567] Translation: "ERROR: Invalid predicate P a d d k"

I0123 11:34:57.203763 139878739914752 alphageometry.py:566] LM output (score=-3.654224): "k : C c e k 14 D c k e k 15 ;"
I0123 11:34:57.203792 139878739914752 alphageometry.py:567] Translation: "k = on_line k c e, on_bline k e c"

I0123 11:34:57.203825 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k c e, on_bline k e c ? coll i d h"
I0123 11:34:57.203971 139878739914752 graph.py:498] 
I0123 11:34:57.204020 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k c e, on_bline k e c ? coll i d h
I0123 11:34:57.694146 139878739914752 ddar.py:60] Depth 1/1000 time = 0.46170926094055176
I0123 11:35:00.443506 139878739914752 ddar.py:60] Depth 2/1000 time = 2.749232053756714
I0123 11:35:03.451356 139878739914752 ddar.py:60] Depth 3/1000 time = 3.0076308250427246
I0123 11:35:05.806710 139878739914752 ddar.py:60] Depth 4/1000 time = 2.3550865650177
I0123 11:35:08.787721 139878739914752 ddar.py:60] Depth 5/1000 time = 2.980438709259033
I0123 11:35:08.797784 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:35:08.797871 139878739914752 alphageometry.py:566] LM output (score=-3.669978): "k : C f h k 14 D f k h k 15 ;"
I0123 11:35:08.797910 139878739914752 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 11:35:08.797950 139878739914752 alphageometry.py:566] LM output (score=-3.679752): "k : C b f k 14 D b e e k 15 ;"
I0123 11:35:08.797978 139878739914752 alphageometry.py:567] Translation: "k = on_line k b f, on_circle k e b"

I0123 11:35:08.798009 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k b f, on_circle k e b ? coll i d h"
I0123 11:35:08.798156 139878739914752 graph.py:498] 
I0123 11:35:08.798209 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k b f, on_circle k e b ? coll i d h
I0123 11:35:10.093439 139878739914752 ddar.py:60] Depth 1/1000 time = 1.2666873931884766
I0123 11:35:13.655606 139878739914752 ddar.py:60] Depth 2/1000 time = 3.561936855316162
I0123 11:35:17.267954 139878739914752 ddar.py:60] Depth 3/1000 time = 3.6121182441711426
I0123 11:35:20.860283 139878739914752 ddar.py:60] Depth 4/1000 time = 3.5920820236206055
I0123 11:35:25.137165 139878739914752 ddar.py:60] Depth 5/1000 time = 4.276340484619141
I0123 11:35:28.822980 139878739914752 ddar.py:60] Depth 6/1000 time = 3.679307460784912
I0123 11:35:28.823235 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:35:28.823318 139878739914752 alphageometry.py:566] LM output (score=-3.750940): "k : C b g k 14 D b g b k 15 ;"
I0123 11:35:28.823358 139878739914752 alphageometry.py:567] Translation: "k = on_line k b g, on_circle k b g"

I0123 11:35:28.823396 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k b g, on_circle k b g ? coll i d h"
I0123 11:35:28.823565 139878739914752 graph.py:498] 
I0123 11:35:28.823613 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j d f, on_bline j f d; k = on_line k b g, on_circle k b g ? coll i d h
I0123 11:35:29.300166 139878739914752 ddar.py:60] Depth 1/1000 time = 0.44869565963745117
I0123 11:35:30.962025 139878739914752 ddar.py:60] Depth 2/1000 time = 1.661738395690918
I0123 11:35:32.668013 139878739914752 ddar.py:60] Depth 3/1000 time = 1.705763339996338
I0123 11:35:35.009416 139878739914752 ddar.py:60] Depth 4/1000 time = 2.341139078140259
I0123 11:35:37.380605 139878739914752 ddar.py:60] Depth 5/1000 time = 2.370670795440674
I0123 11:35:37.386795 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:35:37.386869 139878739914752 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : C e f j 12 D e j f j 13 ; x00
I0123 11:35:44.730288 139878739914752 alphageometry.py:566] LM output (score=-0.558291): "k : C c e k 14 D c k e k 15 ;"
I0123 11:35:44.730476 139878739914752 alphageometry.py:567] Translation: "k = on_line k c e, on_bline k e c"

I0123 11:35:44.730525 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k c e, on_bline k e c ? coll i d h"
I0123 11:35:44.730664 139878739914752 graph.py:498] 
I0123 11:35:44.730716 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k c e, on_bline k e c ? coll i d h
I0123 11:35:45.421980 139878739914752 ddar.py:60] Depth 1/1000 time = 0.6616771221160889
I0123 11:35:50.646378 139878739914752 ddar.py:60] Depth 2/1000 time = 5.224264144897461
I0123 11:35:56.668733 139878739914752 ddar.py:60] Depth 3/1000 time = 6.02210545539856
I0123 11:36:02.550625 139878739914752 ddar.py:60] Depth 4/1000 time = 5.881272315979004
I0123 11:36:02.557159 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:36:02.557250 139878739914752 alphageometry.py:566] LM output (score=-0.622577): "k : C b c k 14 T b c d k 15 ;"
I0123 11:36:02.557291 139878739914752 alphageometry.py:567] Translation: "k = on_line k b c, on_tline k d b c"

I0123 11:36:02.557337 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k b c, on_tline k d b c ? coll i d h"
I0123 11:36:02.557492 139878739914752 graph.py:498] 
I0123 11:36:02.557547 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k b c, on_tline k d b c ? coll i d h
I0123 11:36:03.232074 139878739914752 ddar.py:60] Depth 1/1000 time = 0.6445314884185791
I0123 11:36:04.666010 139878739914752 ddar.py:60] Depth 2/1000 time = 1.4337983131408691
I0123 11:36:06.198832 139878739914752 ddar.py:60] Depth 3/1000 time = 1.5325965881347656
I0123 11:36:07.735683 139878739914752 ddar.py:60] Depth 4/1000 time = 1.536358118057251
I0123 11:36:07.738897 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:36:07.738954 139878739914752 alphageometry.py:566] LM output (score=-0.899575): "k : D d e d k 14 T b c d k 15 ;"
I0123 11:36:07.738989 139878739914752 alphageometry.py:567] Translation: "k = on_circle k d e, on_tline k d b c"

I0123 11:36:07.739056 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_circle k d e, on_tline k d b c ? coll i d h"
I0123 11:36:07.739202 139878739914752 graph.py:498] 
I0123 11:36:07.739253 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_circle k d e, on_tline k d b c ? coll i d h
I0123 11:36:08.346843 139878739914752 ddar.py:60] Depth 1/1000 time = 0.574470043182373
I0123 11:36:09.684122 139878739914752 ddar.py:60] Depth 2/1000 time = 1.3371539115905762
I0123 11:36:11.054044 139878739914752 ddar.py:60] Depth 3/1000 time = 1.3696980476379395
I0123 11:36:11.790868 139878739914752 ddar.py:60] Depth 4/1000 time = 0.7363460063934326
I0123 11:36:13.162792 139878739914752 ddar.py:60] Depth 5/1000 time = 1.3684501647949219
I0123 11:36:13.164288 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:36:13.164352 139878739914752 alphageometry.py:566] LM output (score=-1.742213): "k : C a c k 14 T a c d k 15 ;"
I0123 11:36:13.164390 139878739914752 alphageometry.py:567] Translation: "k = on_line k a c, on_tline k d a c"

I0123 11:36:13.164428 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k a c, on_tline k d a c ? coll i d h"
I0123 11:36:13.164574 139878739914752 graph.py:498] 
I0123 11:36:13.164624 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k a c, on_tline k d a c ? coll i d h
I0123 11:36:14.485673 139878739914752 ddar.py:60] Depth 1/1000 time = 1.2920453548431396
I0123 11:36:15.400079 139878739914752 ddar.py:60] Depth 2/1000 time = 0.9141983985900879
I0123 11:36:17.033081 139878739914752 ddar.py:60] Depth 3/1000 time = 1.6328670978546143
I0123 11:36:18.689438 139878739914752 ddar.py:60] Depth 4/1000 time = 1.6561014652252197
I0123 11:36:20.355307 139878739914752 ddar.py:60] Depth 5/1000 time = 1.6653997898101807
I0123 11:36:20.360193 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:36:20.360255 139878739914752 alphageometry.py:566] LM output (score=-1.892497): "k : C e g k 14 D e k g k 15 ;"
I0123 11:36:20.360291 139878739914752 alphageometry.py:567] Translation: "k = on_line k e g, on_bline k g e"

I0123 11:36:20.360329 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k e g, on_bline k g e ? coll i d h"
I0123 11:36:20.360466 139878739914752 graph.py:498] 
I0123 11:36:20.360513 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k e g, on_bline k g e ? coll i d h
I0123 11:36:21.672091 139878739914752 ddar.py:60] Depth 1/1000 time = 1.281379222869873
I0123 11:36:25.338015 139878739914752 ddar.py:60] Depth 2/1000 time = 3.665699005126953
I0123 11:36:28.522760 139878739914752 ddar.py:60] Depth 3/1000 time = 3.184507369995117
I0123 11:36:32.993273 139878739914752 ddar.py:60] Depth 4/1000 time = 4.4702467918396
I0123 11:36:36.803586 139878739914752 ddar.py:60] Depth 5/1000 time = 3.8097522258758545
I0123 11:36:36.809393 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:36:36.809475 139878739914752 alphageometry.py:566] LM output (score=-1.984945): "k : C b f k 14 D b k f k 15 ;"
I0123 11:36:36.809535 139878739914752 alphageometry.py:567] Translation: "k = on_line k b f, on_bline k f b"

I0123 11:36:36.809575 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k b f, on_bline k f b ? coll i d h"
I0123 11:36:36.809729 139878739914752 graph.py:498] 
I0123 11:36:36.809778 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k b f, on_bline k f b ? coll i d h
I0123 11:36:38.404803 139878739914752 ddar.py:60] Depth 1/1000 time = 1.5618720054626465
I0123 11:36:40.150611 139878739914752 ddar.py:60] Depth 2/1000 time = 1.7455856800079346
I0123 11:36:42.564614 139878739914752 ddar.py:60] Depth 3/1000 time = 2.4137723445892334
I0123 11:36:45.012913 139878739914752 ddar.py:60] Depth 4/1000 time = 2.448042392730713
I0123 11:36:46.803602 139878739914752 ddar.py:60] Depth 5/1000 time = 1.7900478839874268
I0123 11:36:46.809183 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:36:46.809247 139878739914752 alphageometry.py:566] LM output (score=-1.988837): "k : C d f k 14 D d k f k 15 ;"
I0123 11:36:46.809282 139878739914752 alphageometry.py:567] Translation: "k = on_line k d f, on_bline k f d"

I0123 11:36:46.809321 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k d f, on_bline k f d ? coll i d h"
I0123 11:36:46.809463 139878739914752 graph.py:498] 
I0123 11:36:46.809512 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k d f, on_bline k f d ? coll i d h
I0123 11:36:48.141443 139878739914752 ddar.py:60] Depth 1/1000 time = 1.3025109767913818
I0123 11:36:52.869012 139878739914752 ddar.py:60] Depth 2/1000 time = 4.727350950241089
I0123 11:36:57.121174 139878739914752 ddar.py:60] Depth 3/1000 time = 4.2519309520721436
I0123 11:37:01.279288 139878739914752 ddar.py:60] Depth 4/1000 time = 4.157856702804565
I0123 11:37:06.129327 139878739914752 ddar.py:60] Depth 5/1000 time = 4.849447250366211
I0123 11:37:06.137145 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:37:06.137221 139878739914752 alphageometry.py:566] LM output (score=-2.128664): "k : C b g k 14 D b k g k 15 ;"
I0123 11:37:06.137261 139878739914752 alphageometry.py:567] Translation: "k = on_line k b g, on_bline k g b"

I0123 11:37:06.137300 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k b g, on_bline k g b ? coll i d h"
I0123 11:37:06.137443 139878739914752 graph.py:498] 
I0123 11:37:06.137491 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k b g, on_bline k g b ? coll i d h
I0123 11:37:07.443598 139878739914752 ddar.py:60] Depth 1/1000 time = 1.2764320373535156
I0123 11:37:11.020311 139878739914752 ddar.py:60] Depth 2/1000 time = 3.576510190963745
I0123 11:37:14.724633 139878739914752 ddar.py:60] Depth 3/1000 time = 3.704092502593994
I0123 11:37:17.767898 139878739914752 ddar.py:60] Depth 4/1000 time = 3.042994260787964
I0123 11:37:21.454223 139878739914752 ddar.py:60] Depth 5/1000 time = 3.685833215713501
I0123 11:37:21.458143 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:37:21.458212 139878739914752 alphageometry.py:566] LM output (score=-2.145719): "k : C f g k 14 D f k g k 15 ;"
I0123 11:37:21.458250 139878739914752 alphageometry.py:567] Translation: "k = on_line k f g, on_bline k g f"

I0123 11:37:21.458289 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k f g, on_bline k g f ? coll i d h"
I0123 11:37:21.458456 139878739914752 graph.py:498] 
I0123 11:37:21.458505 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k f g, on_bline k g f ? coll i d h
I0123 11:37:22.769372 139878739914752 ddar.py:60] Depth 1/1000 time = 1.2817158699035645
I0123 11:37:26.470855 139878739914752 ddar.py:60] Depth 2/1000 time = 3.7012643814086914
I0123 11:37:30.306939 139878739914752 ddar.py:60] Depth 3/1000 time = 3.835850715637207
I0123 11:37:34.138395 139878739914752 ddar.py:60] Depth 4/1000 time = 3.8311774730682373
I0123 11:37:38.693536 139878739914752 ddar.py:60] Depth 5/1000 time = 4.55452299118042
I0123 11:37:38.700325 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:37:38.700405 139878739914752 alphageometry.py:566] LM output (score=-2.206832): "k : C b e k 14 D b e e k 15 ;"
I0123 11:37:38.700443 139878739914752 alphageometry.py:567] Translation: "k = on_line k b e, on_circle k e b"

I0123 11:37:38.700488 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k b e, on_circle k e b ? coll i d h"
I0123 11:37:38.700644 139878739914752 graph.py:498] 
I0123 11:37:38.700702 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k b e, on_circle k e b ? coll i d h
I0123 11:37:40.332528 139878739914752 ddar.py:60] Depth 1/1000 time = 1.5993478298187256
I0123 11:37:42.174655 139878739914752 ddar.py:60] Depth 2/1000 time = 1.841858148574829
I0123 11:37:44.691390 139878739914752 ddar.py:60] Depth 3/1000 time = 2.516416072845459
I0123 11:37:47.161569 139878739914752 ddar.py:60] Depth 4/1000 time = 2.46990704536438
I0123 11:37:49.019882 139878739914752 ddar.py:60] Depth 5/1000 time = 1.8577678203582764
I0123 11:37:49.023777 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:37:49.023852 139878739914752 alphageometry.py:566] LM output (score=-2.324481): "k : C e c k 14 D e k c k 15 ;"
I0123 11:37:49.023890 139878739914752 alphageometry.py:567] Translation: "k = on_line k e c, on_bline k c e"

I0123 11:37:49.023937 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k e c, on_bline k c e ? coll i d h"
I0123 11:37:49.024092 139878739914752 graph.py:498] 
I0123 11:37:49.024145 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k e c, on_bline k c e ? coll i d h
I0123 11:37:50.360008 139878739914752 ddar.py:60] Depth 1/1000 time = 1.3055675029754639
I0123 11:37:55.555772 139878739914752 ddar.py:60] Depth 2/1000 time = 5.195543050765991
I0123 11:38:00.746625 139878739914752 ddar.py:60] Depth 3/1000 time = 5.190620422363281
I0123 11:38:07.336912 139878739914752 ddar.py:60] Depth 4/1000 time = 6.589673757553101
I0123 11:38:07.343728 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:38:07.343801 139878739914752 alphageometry.py:566] LM output (score=-2.393910): "k : C b e k 14 D a e a k 15 ;"
I0123 11:38:07.343842 139878739914752 alphageometry.py:567] Translation: "k = on_line k b e, on_circle k a e"

I0123 11:38:07.343882 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k b e, on_circle k a e ? coll i d h"
I0123 11:38:07.344022 139878739914752 graph.py:498] 
I0123 11:38:07.344068 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k b e, on_circle k a e ? coll i d h
I0123 11:38:08.948283 139878739914752 ddar.py:60] Depth 1/1000 time = 1.5699241161346436
I0123 11:38:10.668335 139878739914752 ddar.py:60] Depth 2/1000 time = 1.7198443412780762
I0123 11:38:13.053074 139878739914752 ddar.py:60] Depth 3/1000 time = 2.3845136165618896
I0123 11:38:14.793080 139878739914752 ddar.py:60] Depth 4/1000 time = 1.7397418022155762
I0123 11:38:17.176922 139878739914752 ddar.py:60] Depth 5/1000 time = 2.3832104206085205
I0123 11:38:17.180030 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:38:17.180084 139878739914752 alphageometry.py:566] LM output (score=-2.396759): "k : C d e k 14 D d e e k 15 ;"
I0123 11:38:17.180119 139878739914752 alphageometry.py:567] Translation: "k = on_line k d e, on_circle k e d"

I0123 11:38:17.180155 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k d e, on_circle k e d ? coll i d h"
I0123 11:38:17.180294 139878739914752 graph.py:498] 
I0123 11:38:17.180340 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k d e, on_circle k e d ? coll i d h
I0123 11:38:18.806955 139878739914752 ddar.py:60] Depth 1/1000 time = 1.5961368083953857
I0123 11:38:21.476782 139878739914752 ddar.py:60] Depth 2/1000 time = 2.6696112155914307
I0123 11:38:25.008258 139878739914752 ddar.py:60] Depth 3/1000 time = 3.5312418937683105
I0123 11:38:27.919476 139878739914752 ddar.py:60] Depth 4/1000 time = 2.9109549522399902
I0123 11:38:31.445940 139878739914752 ddar.py:60] Depth 5/1000 time = 3.5259385108947754
I0123 11:38:31.462952 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:38:31.463019 139878739914752 alphageometry.py:566] LM output (score=-2.721361): "k : C e h k 14 D e k h k 15 ;"
I0123 11:38:31.463054 139878739914752 alphageometry.py:567] Translation: "k = on_line k e h, on_bline k h e"

I0123 11:38:31.463090 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k e h, on_bline k h e ? coll i d h"
I0123 11:38:31.463226 139878739914752 graph.py:498] 
I0123 11:38:31.463272 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k e h, on_bline k h e ? coll i d h
I0123 11:38:33.094096 139878739914752 ddar.py:60] Depth 1/1000 time = 1.5922236442565918
I0123 11:38:35.519703 139878739914752 ddar.py:60] Depth 2/1000 time = 2.425396203994751
I0123 11:38:37.243059 139878739914752 ddar.py:60] Depth 3/1000 time = 1.723109483718872
I0123 11:38:39.621257 139878739914752 ddar.py:60] Depth 4/1000 time = 2.377901554107666
I0123 11:38:41.383277 139878739914752 ddar.py:60] Depth 5/1000 time = 1.7612872123718262
I0123 11:38:43.785675 139878739914752 ddar.py:60] Depth 6/1000 time = 2.4021618366241455
I0123 11:38:45.546091 139878739914752 ddar.py:60] Depth 7/1000 time = 1.7601568698883057
I0123 11:38:45.550250 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:38:45.550327 139878739914752 alphageometry.py:566] LM output (score=-2.724697): "k : C d g k 14 D d k g k 15 ;"
I0123 11:38:45.550366 139878739914752 alphageometry.py:567] Translation: "k = on_line k d g, on_bline k g d"

I0123 11:38:45.550405 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k d g, on_bline k g d ? coll i d h"
I0123 11:38:45.550556 139878739914752 graph.py:498] 
I0123 11:38:45.550612 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k d g, on_bline k g d ? coll i d h
I0123 11:38:46.961504 139878739914752 ddar.py:60] Depth 1/1000 time = 1.3807697296142578
I0123 11:38:51.421681 139878739914752 ddar.py:60] Depth 2/1000 time = 4.459931373596191
I0123 11:38:55.238516 139878739914752 ddar.py:60] Depth 3/1000 time = 3.816603899002075
I0123 11:38:59.742854 139878739914752 ddar.py:60] Depth 4/1000 time = 4.504068851470947
I0123 11:39:03.548413 139878739914752 ddar.py:60] Depth 5/1000 time = 3.8050425052642822
I0123 11:39:03.552134 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:39:03.552208 139878739914752 alphageometry.py:566] LM output (score=-2.839890): "k : C d e k 14 D d k e k 15 ;"
I0123 11:39:03.552247 139878739914752 alphageometry.py:567] Translation: "k = on_line k d e, on_bline k e d"

I0123 11:39:03.552284 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k d e, on_bline k e d ? coll i d h"
I0123 11:39:03.552428 139878739914752 graph.py:498] 
I0123 11:39:03.552477 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k d e, on_bline k e d ? coll i d h
I0123 11:39:05.058897 139878739914752 ddar.py:60] Depth 1/1000 time = 1.47703218460083
I0123 11:39:06.766207 139878739914752 ddar.py:60] Depth 2/1000 time = 1.7070837020874023
I0123 11:39:09.160134 139878739914752 ddar.py:60] Depth 3/1000 time = 2.3936989307403564
I0123 11:39:10.884098 139878739914752 ddar.py:60] Depth 4/1000 time = 1.7237074375152588
I0123 11:39:12.610520 139878739914752 ddar.py:60] Depth 5/1000 time = 1.7258784770965576
I0123 11:39:12.614764 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:39:12.614819 139878739914752 alphageometry.py:566] LM output (score=-2.924914): "k : C f h k 14 D f k h k 15 ;"
I0123 11:39:12.614856 139878739914752 alphageometry.py:567] Translation: "k = on_line k f h, on_bline k h f"

I0123 11:39:12.614895 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k f h, on_bline k h f ? coll i d h"
I0123 11:39:12.615033 139878739914752 graph.py:498] 
I0123 11:39:12.615081 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k f h, on_bline k h f ? coll i d h
I0123 11:39:14.911846 139878739914752 ddar.py:60] Depth 1/1000 time = 2.2597081661224365
I0123 11:39:16.776207 139878739914752 ddar.py:60] Depth 2/1000 time = 1.8641302585601807
I0123 11:39:19.322659 139878739914752 ddar.py:60] Depth 3/1000 time = 2.546221971511841
I0123 11:39:21.862818 139878739914752 ddar.py:60] Depth 4/1000 time = 2.5399012565612793
I0123 11:39:23.778423 139878739914752 ddar.py:60] Depth 5/1000 time = 1.9149389266967773
I0123 11:39:23.784190 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:39:23.784257 139878739914752 alphageometry.py:566] LM output (score=-2.929303): "k : C f d k 14 D f k d k 15 ;"
I0123 11:39:23.784295 139878739914752 alphageometry.py:567] Translation: "k = on_line k f d, on_bline k d f"

I0123 11:39:23.784332 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k f d, on_bline k d f ? coll i d h"
I0123 11:39:23.784473 139878739914752 graph.py:498] 
I0123 11:39:23.784520 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k f d, on_bline k d f ? coll i d h
I0123 11:39:25.132112 139878739914752 ddar.py:60] Depth 1/1000 time = 1.317868709564209
I0123 11:39:29.169163 139878739914752 ddar.py:60] Depth 2/1000 time = 4.03682541847229
I0123 11:39:34.084171 139878739914752 ddar.py:60] Depth 3/1000 time = 4.9147844314575195
I0123 11:39:38.362272 139878739914752 ddar.py:60] Depth 4/1000 time = 4.277838230133057
I0123 11:39:43.330331 139878739914752 ddar.py:60] Depth 5/1000 time = 4.9675211906433105
I0123 11:39:43.337854 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:39:43.337936 139878739914752 alphageometry.py:566] LM output (score=-3.132821): "k : C b d k 14 D b k d k 15 ;"
I0123 11:39:43.337976 139878739914752 alphageometry.py:567] Translation: "k = on_line k b d, on_bline k d b"

I0123 11:39:43.338015 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k b d, on_bline k d b ? coll i d h"
I0123 11:39:43.338166 139878739914752 graph.py:498] 
I0123 11:39:43.338219 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k b d, on_bline k d b ? coll i d h
I0123 11:39:44.008116 139878739914752 ddar.py:60] Depth 1/1000 time = 0.6398885250091553
I0123 11:39:47.596194 139878739914752 ddar.py:60] Depth 2/1000 time = 3.587949752807617
I0123 11:39:51.421647 139878739914752 ddar.py:60] Depth 3/1000 time = 3.8252081871032715
I0123 11:39:55.146782 139878739914752 ddar.py:60] Depth 4/1000 time = 3.7248361110687256
I0123 11:39:58.927522 139878739914752 ddar.py:60] Depth 5/1000 time = 3.7801568508148193
I0123 11:39:58.931358 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:39:58.931446 139878739914752 alphageometry.py:566] LM output (score=-3.148325): "k : C b f k 14 D b f f k 15 ;"
I0123 11:39:58.931485 139878739914752 alphageometry.py:567] Translation: "k = on_line k b f, on_circle k f b"

I0123 11:39:58.931527 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k b f, on_circle k f b ? coll i d h"
I0123 11:39:58.931713 139878739914752 graph.py:498] 
I0123 11:39:58.931770 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k b f, on_circle k f b ? coll i d h
I0123 11:40:01.225871 139878739914752 ddar.py:60] Depth 1/1000 time = 2.258903741836548
I0123 11:40:03.282536 139878739914752 ddar.py:60] Depth 2/1000 time = 2.0564537048339844
I0123 11:40:06.059926 139878739914752 ddar.py:60] Depth 3/1000 time = 2.777160406112671
I0123 11:40:08.142535 139878739914752 ddar.py:60] Depth 4/1000 time = 2.0819897651672363
I0123 11:40:08.147570 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:40:08.147638 139878739914752 alphageometry.py:566] LM output (score=-3.191466): "k : C b e k 14 D b k e k 15 ;"
I0123 11:40:08.147676 139878739914752 alphageometry.py:567] Translation: "k = on_line k b e, on_bline k e b"

I0123 11:40:08.147717 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k b e, on_bline k e b ? coll i d h"
I0123 11:40:08.147855 139878739914752 graph.py:498] 
I0123 11:40:08.147903 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k b e, on_bline k e b ? coll i d h
I0123 11:40:10.434684 139878739914752 ddar.py:60] Depth 1/1000 time = 2.253108024597168
I0123 11:40:12.152714 139878739914752 ddar.py:60] Depth 2/1000 time = 1.7178006172180176
I0123 11:40:14.586632 139878739914752 ddar.py:60] Depth 3/1000 time = 2.4336917400360107
I0123 11:40:16.344345 139878739914752 ddar.py:60] Depth 4/1000 time = 1.7574634552001953
I0123 11:40:18.786913 139878739914752 ddar.py:60] Depth 5/1000 time = 2.441927909851074
I0123 11:40:18.790008 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:40:18.790075 139878739914752 alphageometry.py:566] LM output (score=-3.206563): "k : C b c k 14 D b k c k 15 ;"
I0123 11:40:18.790114 139878739914752 alphageometry.py:567] Translation: "k = on_line k b c, on_bline k c b"

I0123 11:40:18.790152 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k b c, on_bline k c b ? coll i d h"
I0123 11:40:18.790293 139878739914752 graph.py:498] 
I0123 11:40:18.790342 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k b c, on_bline k c b ? coll i d h
I0123 11:40:19.446656 139878739914752 ddar.py:60] Depth 1/1000 time = 0.6265416145324707
I0123 11:40:23.262872 139878739914752 ddar.py:60] Depth 2/1000 time = 3.816084384918213
I0123 11:40:27.306853 139878739914752 ddar.py:60] Depth 3/1000 time = 4.043758869171143
I0123 11:40:31.299563 139878739914752 ddar.py:60] Depth 4/1000 time = 3.992457866668701
I0123 11:40:35.317611 139878739914752 ddar.py:60] Depth 5/1000 time = 4.017534017562866
I0123 11:40:35.322740 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:40:35.322813 139878739914752 alphageometry.py:566] LM output (score=-3.248485): "k : C e j k 14 P a b j k 15 ;"
I0123 11:40:35.322850 139878739914752 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2570, in add_clause
    raise DepCheckFailError(
graph.DepCheckFailError: ncoll j a b
"

I0123 11:40:35.322914 139878739914752 alphageometry.py:566] LM output (score=-3.315654): "k : C b e k 14 C d g k 15 ;"
I0123 11:40:35.322944 139878739914752 alphageometry.py:567] Translation: "k = on_line k b e, on_line k d g"

I0123 11:40:35.322974 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k b e, on_line k d g ? coll i d h"
I0123 11:40:35.323113 139878739914752 graph.py:498] 
I0123 11:40:35.323159 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k b e, on_line k d g ? coll i d h
I0123 11:40:37.994045 139878739914752 ddar.py:60] Depth 1/1000 time = 2.642784357070923
I0123 11:40:40.864508 139878739914752 ddar.py:60] Depth 2/1000 time = 2.870239734649658
I0123 11:40:44.461677 139878739914752 ddar.py:60] Depth 3/1000 time = 3.596928834915161
I0123 11:40:47.371057 139878739914752 ddar.py:60] Depth 4/1000 time = 2.9091343879699707
I0123 11:40:50.337940 139878739914752 ddar.py:60] Depth 5/1000 time = 2.9666523933410645
I0123 11:40:53.364329 139878739914752 ddar.py:60] Depth 6/1000 time = 3.0261707305908203
I0123 11:40:57.292561 139878739914752 ddar.py:60] Depth 7/1000 time = 3.9280049800872803
I0123 11:41:00.507864 139878739914752 ddar.py:60] Depth 8/1000 time = 3.215064764022827
I0123 11:41:03.732541 139878739914752 ddar.py:60] Depth 9/1000 time = 3.224074125289917
I0123 11:41:07.070289 139878739914752 ddar.py:60] Depth 10/1000 time = 3.336914539337158
I0123 11:41:11.132792 139878739914752 ddar.py:60] Depth 11/1000 time = 4.062206029891968
I0123 11:41:14.768501 139878739914752 ddar.py:60] Depth 12/1000 time = 3.6353979110717773
I0123 11:41:18.425907 139878739914752 ddar.py:60] Depth 13/1000 time = 3.6571788787841797
I0123 11:41:22.795311 139878739914752 ddar.py:60] Depth 14/1000 time = 4.369130373001099
I0123 11:41:22.816267 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:41:22.816335 139878739914752 alphageometry.py:566] LM output (score=-3.321361): "k : C e i k 14 D e k i k 15 ;"
I0123 11:41:22.816371 139878739914752 alphageometry.py:567] Translation: "k = on_line k e i, on_bline k i e"

I0123 11:41:22.816408 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k e i, on_bline k i e ? coll i d h"
I0123 11:41:22.816559 139878739914752 graph.py:498] 
I0123 11:41:22.816615 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k e i, on_bline k i e ? coll i d h
I0123 11:41:24.170911 139878739914752 ddar.py:60] Depth 1/1000 time = 1.3242592811584473
I0123 11:41:28.348540 139878739914752 ddar.py:60] Depth 2/1000 time = 4.17740535736084
I0123 11:41:32.728878 139878739914752 ddar.py:60] Depth 3/1000 time = 4.3801023960113525
I0123 11:41:37.054760 139878739914752 ddar.py:60] Depth 4/1000 time = 4.3256120681762695
I0123 11:41:42.058433 139878739914752 ddar.py:60] Depth 5/1000 time = 5.0030646324157715
I0123 11:41:42.063887 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:41:42.063960 139878739914752 alphageometry.py:566] LM output (score=-3.358329): "k : C b f k 14 D b e e k 15 ;"
I0123 11:41:42.064000 139878739914752 alphageometry.py:567] Translation: "k = on_line k b f, on_circle k e b"

I0123 11:41:42.064037 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k b f, on_circle k e b ? coll i d h"
I0123 11:41:42.064204 139878739914752 graph.py:498] 
I0123 11:41:42.064253 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k b f, on_circle k e b ? coll i d h
I0123 11:41:43.736962 139878739914752 ddar.py:60] Depth 1/1000 time = 1.6383354663848877
I0123 11:41:46.269826 139878739914752 ddar.py:60] Depth 2/1000 time = 2.53265643119812
I0123 11:41:48.164397 139878739914752 ddar.py:60] Depth 3/1000 time = 1.8943519592285156
I0123 11:41:50.732415 139878739914752 ddar.py:60] Depth 4/1000 time = 2.5677623748779297
I0123 11:41:52.606599 139878739914752 ddar.py:60] Depth 5/1000 time = 1.8736627101898193
I0123 11:41:52.610676 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:41:52.610740 139878739914752 alphageometry.py:566] LM output (score=-3.387710): "k : C b f k 14 D e f e k 15 ;"
I0123 11:41:52.610777 139878739914752 alphageometry.py:567] Translation: "k = on_line k b f, on_circle k e f"

I0123 11:41:52.610815 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k b f, on_circle k e f ? coll i d h"
I0123 11:41:52.610955 139878739914752 graph.py:498] 
I0123 11:41:52.611003 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k b f, on_circle k e f ? coll i d h
I0123 11:41:54.947521 139878739914752 ddar.py:60] Depth 1/1000 time = 2.3024184703826904
I0123 11:41:56.984598 139878739914752 ddar.py:60] Depth 2/1000 time = 2.0368669033050537
I0123 11:41:59.742637 139878739914752 ddar.py:60] Depth 3/1000 time = 2.7578091621398926
I0123 11:42:01.818673 139878739914752 ddar.py:60] Depth 4/1000 time = 2.075777769088745
I0123 11:42:04.588102 139878739914752 ddar.py:60] Depth 5/1000 time = 2.768406391143799
I0123 11:42:04.593868 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:42:04.593936 139878739914752 alphageometry.py:566] LM output (score=-3.397098): "k : C g h k 14 D g k h k 15 ;"
I0123 11:42:04.593974 139878739914752 alphageometry.py:567] Translation: "k = on_line k g h, on_bline k h g"

I0123 11:42:04.594013 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k g h, on_bline k h g ? coll i d h"
I0123 11:42:04.594155 139878739914752 graph.py:498] 
I0123 11:42:04.594203 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k g h, on_bline k h g ? coll i d h
I0123 11:42:06.124604 139878739914752 ddar.py:60] Depth 1/1000 time = 1.5014870166778564
I0123 11:42:07.741053 139878739914752 ddar.py:60] Depth 2/1000 time = 1.61622953414917
I0123 11:42:10.064132 139878739914752 ddar.py:60] Depth 3/1000 time = 2.322843313217163
I0123 11:42:11.708759 139878739914752 ddar.py:60] Depth 4/1000 time = 1.6443824768066406
I0123 11:42:13.374571 139878739914752 ddar.py:60] Depth 5/1000 time = 1.6653625965118408
I0123 11:42:13.377695 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:42:13.377760 139878739914752 alphageometry.py:566] LM output (score=-3.401085): "k : C e g k 14 D e g e k 15 ;"
I0123 11:42:13.377799 139878739914752 alphageometry.py:567] Translation: "k = on_line k e g, on_circle k e g"

I0123 11:42:13.377865 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k e g, on_circle k e g ? coll i d h"
I0123 11:42:13.378005 139878739914752 graph.py:498] 
I0123 11:42:13.378053 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k e g, on_circle k e g ? coll i d h
I0123 11:42:14.721900 139878739914752 ddar.py:60] Depth 1/1000 time = 1.3144314289093018
I0123 11:42:15.462545 139878739914752 ddar.py:60] Depth 2/1000 time = 0.74043869972229
I0123 11:42:16.963654 139878739914752 ddar.py:60] Depth 3/1000 time = 1.5009400844573975
I0123 11:42:18.392373 139878739914752 ddar.py:60] Depth 4/1000 time = 1.4284863471984863
I0123 11:42:19.149721 139878739914752 ddar.py:60] Depth 5/1000 time = 0.7568542957305908
I0123 11:42:19.152726 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:42:19.152782 139878739914752 alphageometry.py:566] LM output (score=-3.554532): "k : C b g k 14 D b g b k 15 ;"
I0123 11:42:19.152817 139878739914752 alphageometry.py:567] Translation: "k = on_line k b g, on_circle k b g"

I0123 11:42:19.152854 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k b g, on_circle k b g ? coll i d h"
I0123 11:42:19.152996 139878739914752 graph.py:498] 
I0123 11:42:19.153044 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k b g, on_circle k b g ? coll i d h
I0123 11:42:20.494278 139878739914752 ddar.py:60] Depth 1/1000 time = 1.3117337226867676
I0123 11:42:21.994058 139878739914752 ddar.py:60] Depth 2/1000 time = 1.499561071395874
I0123 11:42:22.831885 139878739914752 ddar.py:60] Depth 3/1000 time = 0.8376305103302002
I0123 11:42:24.343236 139878739914752 ddar.py:60] Depth 4/1000 time = 1.5111885070800781
I0123 11:42:25.858019 139878739914752 ddar.py:60] Depth 5/1000 time = 1.5142822265625
I0123 11:42:25.862264 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:42:25.862327 139878739914752 alphageometry.py:566] LM output (score=-3.582887): "k : C e i k 14 C c j k 15 ;"
I0123 11:42:25.862365 139878739914752 alphageometry.py:567] Translation: "k = on_line k e i, on_line k c j"

I0123 11:42:25.862404 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k e i, on_line k c j ? coll i d h"
I0123 11:42:25.862546 139878739914752 graph.py:498] 
I0123 11:42:25.862595 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k e i, on_line k c j ? coll i d h
I0123 11:42:27.252835 139878739914752 ddar.py:60] Depth 1/1000 time = 1.3655612468719482
I0123 11:42:28.753196 139878739914752 ddar.py:60] Depth 2/1000 time = 1.5001318454742432
I0123 11:42:29.632446 139878739914752 ddar.py:60] Depth 3/1000 time = 0.8790366649627686
I0123 11:42:31.220756 139878739914752 ddar.py:60] Depth 4/1000 time = 1.5881788730621338
I0123 11:42:32.804302 139878739914752 ddar.py:60] Depth 5/1000 time = 1.5830309391021729
I0123 11:42:32.807745 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:42:32.807841 139878739914752 alphageometry.py:566] LM output (score=-3.770285): "k : C e g k 14 D e g g k 15 ;"
I0123 11:42:32.807880 139878739914752 alphageometry.py:567] Translation: "k = on_line k e g, on_circle k g e"

I0123 11:42:32.807919 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k e g, on_circle k g e ? coll i d h"
I0123 11:42:32.808058 139878739914752 graph.py:498] 
I0123 11:42:32.808106 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_line j e f, on_bline j f e; k = on_line k e g, on_circle k g e ? coll i d h
I0123 11:42:34.161234 139878739914752 ddar.py:60] Depth 1/1000 time = 1.3232758045196533
I0123 11:42:34.977056 139878739914752 ddar.py:60] Depth 2/1000 time = 0.8156149387359619
I0123 11:42:36.517106 139878739914752 ddar.py:60] Depth 3/1000 time = 1.5398921966552734
I0123 11:42:38.054613 139878739914752 ddar.py:60] Depth 4/1000 time = 1.5372450351715088
I0123 11:42:39.587868 139878739914752 ddar.py:60] Depth 5/1000 time = 1.5327239036560059
I0123 11:42:39.592246 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:42:39.592307 139878739914752 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : D d j d e 12 T b c d j 13 ; x00
I0123 11:42:47.832838 139878739914752 alphageometry.py:566] LM output (score=-0.131458): "k : C a c k 14 T a c d k 15 ;"
I0123 11:42:47.833167 139878739914752 alphageometry.py:567] Translation: "k = on_line k a c, on_tline k d a c"

I0123 11:42:47.833231 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k a c, on_tline k d a c ? coll i d h"
I0123 11:42:47.833462 139878739914752 graph.py:498] 
I0123 11:42:47.833524 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k a c, on_tline k d a c ? coll i d h
I0123 11:42:48.280154 139878739914752 ddar.py:60] Depth 1/1000 time = 0.41344475746154785
I0123 11:42:50.128889 139878739914752 ddar.py:60] Depth 2/1000 time = 1.8486087322235107
I0123 11:42:52.017298 139878739914752 ddar.py:60] Depth 3/1000 time = 1.8881897926330566
I0123 11:42:54.633967 139878739914752 ddar.py:60] Depth 4/1000 time = 2.616408109664917
I0123 11:42:56.566085 139878739914752 ddar.py:60] Depth 5/1000 time = 1.9315974712371826
I0123 11:42:58.554340 139878739914752 ddar.py:60] Depth 6/1000 time = 1.9869093894958496
I0123 11:43:00.722352 139878739914752 ddar.py:60] Depth 7/1000 time = 2.1677517890930176
I0123 11:43:04.025778 139878739914752 ddar.py:60] Depth 8/1000 time = 3.303194761276245
I0123 11:43:06.603125 139878739914752 ddar.py:60] Depth 9/1000 time = 2.5770788192749023
I0123 11:43:09.986713 139878739914752 ddar.py:60] Depth 10/1000 time = 3.383331537246704
I0123 11:43:12.761827 139878739914752 ddar.py:60] Depth 11/1000 time = 2.7748758792877197
I0123 11:43:16.732173 139878739914752 ddar.py:60] Depth 12/1000 time = 3.9701247215270996
I0123 11:43:20.915960 139878739914752 ddar.py:60] Depth 13/1000 time = 4.183570861816406
I0123 11:43:25.501899 139878739914752 ddar.py:60] Depth 14/1000 time = 4.585710525512695
I0123 11:43:30.567332 139878739914752 ddar.py:60] Depth 15/1000 time = 5.065190315246582
I0123 11:43:35.650631 139878739914752 ddar.py:60] Depth 16/1000 time = 5.083017110824585
I0123 11:43:41.349970 139878739914752 ddar.py:60] Depth 17/1000 time = 5.672384977340698
I0123 11:43:46.653596 139878739914752 ddar.py:60] Depth 18/1000 time = 5.303387641906738
I0123 11:43:51.955915 139878739914752 ddar.py:60] Depth 19/1000 time = 5.302047967910767
I0123 11:43:51.961039 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:43:51.961097 139878739914752 alphageometry.py:566] LM output (score=-1.149481): "k : C b c k 14 T b c d k 15 ;"
I0123 11:43:51.961135 139878739914752 alphageometry.py:567] Translation: "k = on_line k b c, on_tline k d b c"

I0123 11:43:51.961174 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b c, on_tline k d b c ? coll i d h"
I0123 11:43:51.961318 139878739914752 graph.py:498] 
I0123 11:43:51.961366 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b c, on_tline k d b c ? coll i d h
I0123 11:43:52.428883 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4418342113494873
I0123 11:43:52.989121 139878739914752 ddar.py:60] Depth 2/1000 time = 0.5601413249969482
I0123 11:43:53.614082 139878739914752 ddar.py:60] Depth 3/1000 time = 0.6248724460601807
I0123 11:43:54.938485 139878739914752 ddar.py:60] Depth 4/1000 time = 1.324059009552002
I0123 11:43:55.581734 139878739914752 ddar.py:60] Depth 5/1000 time = 0.6402831077575684
I0123 11:43:56.223760 139878739914752 ddar.py:60] Depth 6/1000 time = 0.6406950950622559
I0123 11:43:56.223873 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:43:56.223921 139878739914752 alphageometry.py:566] LM output (score=-1.846225): "k : C b g k 14 D b k g k 15 ;"
I0123 11:43:56.223956 139878739914752 alphageometry.py:567] Translation: "k = on_line k b g, on_bline k g b"

I0123 11:43:56.223994 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b g, on_bline k g b ? coll i d h"
I0123 11:43:56.224131 139878739914752 graph.py:498] 
I0123 11:43:56.224179 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b g, on_bline k g b ? coll i d h
I0123 11:43:56.640873 139878739914752 ddar.py:60] Depth 1/1000 time = 0.3869297504425049
I0123 11:43:58.976078 139878739914752 ddar.py:60] Depth 2/1000 time = 2.335092306137085
I0123 11:44:00.720699 139878739914752 ddar.py:60] Depth 3/1000 time = 1.7443864345550537
I0123 11:44:02.401410 139878739914752 ddar.py:60] Depth 4/1000 time = 1.6802332401275635
I0123 11:44:04.102992 139878739914752 ddar.py:60] Depth 5/1000 time = 1.6977264881134033
I0123 11:44:04.104017 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:44:04.104079 139878739914752 alphageometry.py:566] LM output (score=-1.955624): "k : C c e k 14 D c k e k 15 ;"
I0123 11:44:04.104116 139878739914752 alphageometry.py:567] Translation: "k = on_line k c e, on_bline k e c"

I0123 11:44:04.104152 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k c e, on_bline k e c ? coll i d h"
I0123 11:44:04.104295 139878739914752 graph.py:498] 
I0123 11:44:04.104341 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k c e, on_bline k e c ? coll i d h
I0123 11:44:04.537344 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4020998477935791
I0123 11:44:06.336394 139878739914752 ddar.py:60] Depth 2/1000 time = 1.7989113330841064
I0123 11:44:08.914342 139878739914752 ddar.py:60] Depth 3/1000 time = 2.5777294635772705
I0123 11:44:10.793412 139878739914752 ddar.py:60] Depth 4/1000 time = 1.8785617351531982
I0123 11:44:12.689868 139878739914752 ddar.py:60] Depth 5/1000 time = 1.8923454284667969
I0123 11:44:12.692931 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:44:12.692999 139878739914752 alphageometry.py:566] LM output (score=-2.119629): "k : C b f k 14 D b k f k 15 ;"
I0123 11:44:12.693040 139878739914752 alphageometry.py:567] Translation: "k = on_line k b f, on_bline k f b"

I0123 11:44:12.693079 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b f, on_bline k f b ? coll i d h"
I0123 11:44:12.693228 139878739914752 graph.py:498] 
I0123 11:44:12.693277 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b f, on_bline k f b ? coll i d h
I0123 11:44:13.997783 139878739914752 ddar.py:60] Depth 1/1000 time = 1.271939992904663
I0123 11:44:14.713383 139878739914752 ddar.py:60] Depth 2/1000 time = 0.7154085636138916
I0123 11:44:16.145770 139878739914752 ddar.py:60] Depth 3/1000 time = 1.432220220565796
I0123 11:44:16.873905 139878739914752 ddar.py:60] Depth 4/1000 time = 0.7276575565338135
I0123 11:44:18.314936 139878739914752 ddar.py:60] Depth 5/1000 time = 1.4374637603759766
I0123 11:44:18.316380 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:44:18.316432 139878739914752 alphageometry.py:566] LM output (score=-2.140743): "k : C d f k 14 D d k f k 15 ;"
I0123 11:44:18.316468 139878739914752 alphageometry.py:567] Translation: "k = on_line k d f, on_bline k f d"

I0123 11:44:18.316506 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k d f, on_bline k f d ? coll i d h"
I0123 11:44:18.316649 139878739914752 graph.py:498] 
I0123 11:44:18.316699 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k d f, on_bline k f d ? coll i d h
I0123 11:44:18.746713 139878739914752 ddar.py:60] Depth 1/1000 time = 0.399519681930542
I0123 11:44:20.421868 139878739914752 ddar.py:60] Depth 2/1000 time = 1.6750290393829346
I0123 11:44:22.159726 139878739914752 ddar.py:60] Depth 3/1000 time = 1.7376539707183838
I0123 11:44:23.847517 139878739914752 ddar.py:60] Depth 4/1000 time = 1.687286138534546
I0123 11:44:25.573037 139878739914752 ddar.py:60] Depth 5/1000 time = 1.7213175296783447
I0123 11:44:25.575937 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:44:25.576005 139878739914752 alphageometry.py:566] LM output (score=-2.478755): "k : D d j d k 14 T a c d k 15 ;"
I0123 11:44:25.576043 139878739914752 alphageometry.py:567] Translation: "k = on_circle k d j, on_tline k d a c"

I0123 11:44:25.576081 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_circle k d j, on_tline k d a c ? coll i d h"
I0123 11:44:25.576259 139878739914752 graph.py:498] 
I0123 11:44:25.576309 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_circle k d j, on_tline k d a c ? coll i d h
I0123 11:44:27.019742 139878739914752 ddar.py:60] Depth 1/1000 time = 1.4086241722106934
I0123 11:44:28.621182 139878739914752 ddar.py:60] Depth 2/1000 time = 1.6012065410614014
I0123 11:44:30.175304 139878739914752 ddar.py:60] Depth 3/1000 time = 1.5538833141326904
I0123 11:44:31.804992 139878739914752 ddar.py:60] Depth 4/1000 time = 1.6284661293029785
I0123 11:44:33.530796 139878739914752 ddar.py:60] Depth 5/1000 time = 1.7255544662475586
I0123 11:44:35.488604 139878739914752 ddar.py:60] Depth 6/1000 time = 1.9575879573822021
I0123 11:44:37.409211 139878739914752 ddar.py:60] Depth 7/1000 time = 1.9203407764434814
I0123 11:44:39.422152 139878739914752 ddar.py:60] Depth 8/1000 time = 2.0126712322235107
I0123 11:44:39.432653 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:44:39.432723 139878739914752 alphageometry.py:566] LM output (score=-2.568038): "k : C b c k 14 T b c f k 15 ;"
I0123 11:44:39.432760 139878739914752 alphageometry.py:567] Translation: "k = on_line k b c, on_tline k f b c"

I0123 11:44:39.432797 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b c, on_tline k f b c ? coll i d h"
I0123 11:44:39.432938 139878739914752 graph.py:498] 
I0123 11:44:39.432985 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b c, on_tline k f b c ? coll i d h
I0123 11:44:40.576148 139878739914752 ddar.py:60] Depth 1/1000 time = 1.1100118160247803
I0123 11:44:42.349138 139878739914752 ddar.py:60] Depth 2/1000 time = 1.7727515697479248
I0123 11:44:44.166506 139878739914752 ddar.py:60] Depth 3/1000 time = 1.8171374797821045
I0123 11:44:45.970454 139878739914752 ddar.py:60] Depth 4/1000 time = 1.8034183979034424
I0123 11:44:47.821394 139878739914752 ddar.py:60] Depth 5/1000 time = 1.8471171855926514
I0123 11:44:47.822876 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:44:47.822941 139878739914752 alphageometry.py:566] LM output (score=-2.620859): "k : C e f k 14 D e k f k 15 ;"
I0123 11:44:47.822978 139878739914752 alphageometry.py:567] Translation: "k = on_line k e f, on_bline k f e"

I0123 11:44:47.823017 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k e f, on_bline k f e ? coll i d h"
I0123 11:44:47.823161 139878739914752 graph.py:498] 
I0123 11:44:47.823210 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k e f, on_bline k f e ? coll i d h
I0123 11:44:49.142292 139878739914752 ddar.py:60] Depth 1/1000 time = 1.2862396240234375
I0123 11:44:49.863651 139878739914752 ddar.py:60] Depth 2/1000 time = 0.7211627960205078
I0123 11:44:51.279317 139878739914752 ddar.py:60] Depth 3/1000 time = 1.4155383110046387
I0123 11:44:52.730418 139878739914752 ddar.py:60] Depth 4/1000 time = 1.450603723526001
I0123 11:44:53.490202 139878739914752 ddar.py:60] Depth 5/1000 time = 0.7563211917877197
I0123 11:44:53.491361 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:44:53.491418 139878739914752 alphageometry.py:566] LM output (score=-2.850446): "k : C b d k 14 D b k d k 15 ;"
I0123 11:44:53.491482 139878739914752 alphageometry.py:567] Translation: "k = on_line k b d, on_bline k d b"

I0123 11:44:53.491521 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b d, on_bline k d b ? coll i d h"
I0123 11:44:53.491665 139878739914752 graph.py:498] 
I0123 11:44:53.491713 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b d, on_bline k d b ? coll i d h
I0123 11:44:53.915590 139878739914752 ddar.py:60] Depth 1/1000 time = 0.3934915065765381
I0123 11:44:56.309149 139878739914752 ddar.py:60] Depth 2/1000 time = 2.3934388160705566
I0123 11:44:58.080121 139878739914752 ddar.py:60] Depth 3/1000 time = 1.7707455158233643
I0123 11:44:59.796599 139878739914752 ddar.py:60] Depth 4/1000 time = 1.7160117626190186
I0123 11:45:01.526709 139878739914752 ddar.py:60] Depth 5/1000 time = 1.7263691425323486
I0123 11:45:01.527727 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:45:01.527781 139878739914752 alphageometry.py:566] LM output (score=-2.917706): "k : C b e k 14 D b k e k 15 ;"
I0123 11:45:01.527815 139878739914752 alphageometry.py:567] Translation: "k = on_line k b e, on_bline k e b"

I0123 11:45:01.527852 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b e, on_bline k e b ? coll i d h"
I0123 11:45:01.527993 139878739914752 graph.py:498] 
I0123 11:45:01.528040 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b e, on_bline k e b ? coll i d h
I0123 11:45:02.133475 139878739914752 ddar.py:60] Depth 1/1000 time = 0.5733416080474854
I0123 11:45:03.480550 139878739914752 ddar.py:60] Depth 2/1000 time = 1.3469483852386475
I0123 11:45:04.131517 139878739914752 ddar.py:60] Depth 3/1000 time = 0.6507704257965088
I0123 11:45:05.505949 139878739914752 ddar.py:60] Depth 4/1000 time = 1.3740644454956055
I0123 11:45:06.168690 139878739914752 ddar.py:60] Depth 5/1000 time = 0.6593570709228516
I0123 11:45:06.169488 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:45:06.169541 139878739914752 alphageometry.py:566] LM output (score=-2.969113): "k : C b e k 14 D b e b k 15 ;"
I0123 11:45:06.169576 139878739914752 alphageometry.py:567] Translation: "k = on_line k b e, on_circle k b e"

I0123 11:45:06.169613 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b e, on_circle k b e ? coll i d h"
I0123 11:45:06.169764 139878739914752 graph.py:498] 
I0123 11:45:06.169815 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b e, on_circle k b e ? coll i d h
I0123 11:45:07.485225 139878739914752 ddar.py:60] Depth 1/1000 time = 1.2833950519561768
I0123 11:45:08.848960 139878739914752 ddar.py:60] Depth 2/1000 time = 1.3635048866271973
I0123 11:45:09.494187 139878739914752 ddar.py:60] Depth 3/1000 time = 0.6450190544128418
I0123 11:45:10.848622 139878739914752 ddar.py:60] Depth 4/1000 time = 1.3540596961975098
I0123 11:45:11.516866 139878739914752 ddar.py:60] Depth 5/1000 time = 0.664872407913208
I0123 11:45:11.517885 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:45:11.517940 139878739914752 alphageometry.py:566] LM output (score=-2.972999): "k : C b g k 14 D b g b k 15 ;"
I0123 11:45:11.517978 139878739914752 alphageometry.py:567] Translation: "k = on_line k b g, on_circle k b g"

I0123 11:45:11.518016 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b g, on_circle k b g ? coll i d h"
I0123 11:45:11.518152 139878739914752 graph.py:498] 
I0123 11:45:11.518201 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b g, on_circle k b g ? coll i d h
I0123 11:45:11.941043 139878739914752 ddar.py:60] Depth 1/1000 time = 0.39275336265563965
I0123 11:45:12.462581 139878739914752 ddar.py:60] Depth 2/1000 time = 0.5214390754699707
I0123 11:45:13.678144 139878739914752 ddar.py:60] Depth 3/1000 time = 1.2154417037963867
I0123 11:45:14.191831 139878739914752 ddar.py:60] Depth 4/1000 time = 0.5132384300231934
I0123 11:45:14.723870 139878739914752 ddar.py:60] Depth 5/1000 time = 0.5283019542694092
I0123 11:45:14.724889 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:45:14.724941 139878739914752 alphageometry.py:566] LM output (score=-3.096797): "k : C a f k 14 D a k f k 15 ;"
I0123 11:45:14.724976 139878739914752 alphageometry.py:567] Translation: "k = on_line k a f, on_bline k f a"

I0123 11:45:14.725012 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k a f, on_bline k f a ? coll i d h"
I0123 11:45:14.725151 139878739914752 graph.py:498] 
I0123 11:45:14.725198 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k a f, on_bline k f a ? coll i d h
I0123 11:45:16.061700 139878739914752 ddar.py:60] Depth 1/1000 time = 1.304624080657959
I0123 11:45:16.737277 139878739914752 ddar.py:60] Depth 2/1000 time = 0.6753768920898438
I0123 11:45:18.136502 139878739914752 ddar.py:60] Depth 3/1000 time = 1.3990850448608398
I0123 11:45:18.815634 139878739914752 ddar.py:60] Depth 4/1000 time = 0.6786618232727051
I0123 11:45:20.227490 139878739914752 ddar.py:60] Depth 5/1000 time = 1.408442497253418
I0123 11:45:20.229182 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:45:20.229247 139878739914752 alphageometry.py:566] LM output (score=-3.119693): "k : C f g k 14 D f k g k 15 ;"
I0123 11:45:20.229286 139878739914752 alphageometry.py:567] Translation: "k = on_line k f g, on_bline k g f"

I0123 11:45:20.229324 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k f g, on_bline k g f ? coll i d h"
I0123 11:45:20.229469 139878739914752 graph.py:498] 
I0123 11:45:20.229518 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k f g, on_bline k g f ? coll i d h
I0123 11:45:20.681756 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4192688465118408
I0123 11:45:22.337944 139878739914752 ddar.py:60] Depth 2/1000 time = 1.655958652496338
I0123 11:45:24.028809 139878739914752 ddar.py:60] Depth 3/1000 time = 1.6906085014343262
I0123 11:45:25.732877 139878739914752 ddar.py:60] Depth 4/1000 time = 1.7035691738128662
I0123 11:45:28.236320 139878739914752 ddar.py:60] Depth 5/1000 time = 2.499274253845215
I0123 11:45:28.238801 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:45:28.238867 139878739914752 alphageometry.py:566] LM output (score=-3.139972): "k : C d e k 14 D d e d k 15 ;"
I0123 11:45:28.238903 139878739914752 alphageometry.py:567] Translation: "k = on_line k d e, on_circle k d e"

I0123 11:45:28.238941 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k d e, on_circle k d e ? coll i d h"
I0123 11:45:28.239087 139878739914752 graph.py:498] 
I0123 11:45:28.239134 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k d e, on_circle k d e ? coll i d h
I0123 11:45:29.974326 139878739914752 ddar.py:60] Depth 1/1000 time = 1.7069997787475586
I0123 11:45:32.644647 139878739914752 ddar.py:60] Depth 2/1000 time = 2.670106887817383
I0123 11:45:34.562483 139878739914752 ddar.py:60] Depth 3/1000 time = 1.9175975322723389
I0123 11:45:37.231369 139878739914752 ddar.py:60] Depth 4/1000 time = 2.6684231758117676
I0123 11:45:39.950398 139878739914752 ddar.py:60] Depth 5/1000 time = 2.7138874530792236
I0123 11:45:39.951371 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:45:39.951425 139878739914752 alphageometry.py:566] LM output (score=-3.164323): "k : C j f k 14 D j k f k 15 ;"
I0123 11:45:39.951460 139878739914752 alphageometry.py:567] Translation: "k = on_line k j f, on_bline k f j"

I0123 11:45:39.951498 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k j f, on_bline k f j ? coll i d h"
I0123 11:45:39.951641 139878739914752 graph.py:498] 
I0123 11:45:39.951689 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k j f, on_bline k f j ? coll i d h
I0123 11:45:40.359588 139878739914752 ddar.py:60] Depth 1/1000 time = 0.37751269340515137
I0123 11:45:40.831123 139878739914752 ddar.py:60] Depth 2/1000 time = 0.47144198417663574
I0123 11:45:41.310479 139878739914752 ddar.py:60] Depth 3/1000 time = 0.4792444705963135
I0123 11:45:41.791837 139878739914752 ddar.py:60] Depth 4/1000 time = 0.4810342788696289
I0123 11:45:42.993757 139878739914752 ddar.py:60] Depth 5/1000 time = 1.1986453533172607
I0123 11:45:42.995195 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:45:42.995255 139878739914752 alphageometry.py:566] LM output (score=-3.167979): "k : C b e k 14 D b e e k 15 ;"
I0123 11:45:42.995294 139878739914752 alphageometry.py:567] Translation: "k = on_line k b e, on_circle k e b"

I0123 11:45:42.995332 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b e, on_circle k e b ? coll i d h"
I0123 11:45:42.995473 139878739914752 graph.py:498] 
I0123 11:45:42.995521 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b e, on_circle k e b ? coll i d h
I0123 11:45:43.612981 139878739914752 ddar.py:60] Depth 1/1000 time = 0.5857799053192139
I0123 11:45:45.082520 139878739914752 ddar.py:60] Depth 2/1000 time = 1.4693982601165771
I0123 11:45:45.827867 139878739914752 ddar.py:60] Depth 3/1000 time = 0.7451498508453369
I0123 11:45:47.293464 139878739914752 ddar.py:60] Depth 4/1000 time = 1.465242624282837
I0123 11:45:48.063555 139878739914752 ddar.py:60] Depth 5/1000 time = 0.7660801410675049
I0123 11:45:48.064355 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:45:48.064408 139878739914752 alphageometry.py:566] LM output (score=-3.203674): "k : C e g k 14 D e k g k 15 ;"
I0123 11:45:48.064445 139878739914752 alphageometry.py:567] Translation: "k = on_line k e g, on_bline k g e"

I0123 11:45:48.064483 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k e g, on_bline k g e ? coll i d h"
I0123 11:45:48.064623 139878739914752 graph.py:498] 
I0123 11:45:48.064672 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k e g, on_bline k g e ? coll i d h
I0123 11:45:49.197941 139878739914752 ddar.py:60] Depth 1/1000 time = 1.1030633449554443
I0123 11:45:50.868042 139878739914752 ddar.py:60] Depth 2/1000 time = 1.6698806285858154
I0123 11:45:52.593018 139878739914752 ddar.py:60] Depth 3/1000 time = 1.724750280380249
I0123 11:45:54.290292 139878739914752 ddar.py:60] Depth 4/1000 time = 1.6968016624450684
I0123 11:45:55.995229 139878739914752 ddar.py:60] Depth 5/1000 time = 1.701000690460205
I0123 11:45:55.997155 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:45:55.997210 139878739914752 alphageometry.py:566] LM output (score=-3.214257): "k : C b j k 14 D b k j k 15 ;"
I0123 11:45:55.997247 139878739914752 alphageometry.py:567] Translation: "k = on_line k b j, on_bline k j b"

I0123 11:45:55.997285 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b j, on_bline k j b ? coll i d h"
I0123 11:45:55.997431 139878739914752 graph.py:498] 
I0123 11:45:55.997479 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b j, on_bline k j b ? coll i d h
I0123 11:45:56.401626 139878739914752 ddar.py:60] Depth 1/1000 time = 0.37375617027282715
I0123 11:45:56.834988 139878739914752 ddar.py:60] Depth 2/1000 time = 0.43325018882751465
I0123 11:45:57.270797 139878739914752 ddar.py:60] Depth 3/1000 time = 0.4357140064239502
I0123 11:45:57.712293 139878739914752 ddar.py:60] Depth 4/1000 time = 0.4411942958831787
I0123 11:45:58.882393 139878739914752 ddar.py:60] Depth 5/1000 time = 1.166879653930664
I0123 11:45:58.883141 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:45:58.883216 139878739914752 alphageometry.py:566] LM output (score=-3.353304): "k : C b c k 14 T b c g k 15 ;"
I0123 11:45:58.883255 139878739914752 alphageometry.py:567] Translation: "k = on_line k b c, on_tline k g b c"

I0123 11:45:58.883296 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b c, on_tline k g b c ? coll i d h"
I0123 11:45:58.883440 139878739914752 graph.py:498] 
I0123 11:45:58.883489 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b c, on_tline k g b c ? coll i d h
I0123 11:45:59.311406 139878739914752 ddar.py:60] Depth 1/1000 time = 0.3950157165527344
I0123 11:45:59.818488 139878739914752 ddar.py:60] Depth 2/1000 time = 0.5069670677185059
I0123 11:46:00.380556 139878739914752 ddar.py:60] Depth 3/1000 time = 0.5619709491729736
I0123 11:46:00.946239 139878739914752 ddar.py:60] Depth 4/1000 time = 0.5653378963470459
I0123 11:46:02.244566 139878739914752 ddar.py:60] Depth 5/1000 time = 1.2952759265899658
I0123 11:46:02.825975 139878739914752 ddar.py:60] Depth 6/1000 time = 0.5798864364624023
I0123 11:46:02.826123 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:46:02.826173 139878739914752 alphageometry.py:566] LM output (score=-3.524538): "k : C g f k 14 D g k f k 15 ;"
I0123 11:46:02.826208 139878739914752 alphageometry.py:567] Translation: "k = on_line k g f, on_bline k f g"

I0123 11:46:02.826245 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k g f, on_bline k f g ? coll i d h"
I0123 11:46:02.826385 139878739914752 graph.py:498] 
I0123 11:46:02.826433 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k g f, on_bline k f g ? coll i d h
I0123 11:46:03.249967 139878739914752 ddar.py:60] Depth 1/1000 time = 0.39306640625
I0123 11:46:04.897006 139878739914752 ddar.py:60] Depth 2/1000 time = 1.6469144821166992
I0123 11:46:06.625368 139878739914752 ddar.py:60] Depth 3/1000 time = 1.728135108947754
I0123 11:46:08.331603 139878739914752 ddar.py:60] Depth 4/1000 time = 1.70573091506958
I0123 11:46:10.822226 139878739914752 ddar.py:60] Depth 5/1000 time = 2.4864022731781006
I0123 11:46:10.824852 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:46:10.824904 139878739914752 alphageometry.py:566] LM output (score=-3.568130): "k : C b c k 14 T b c k d 15 ;"
I0123 11:46:10.824939 139878739914752 alphageometry.py:567] Translation: "k = on_line k b c, on_tline k d b c"

I0123 11:46:10.824977 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b c, on_tline k d b c ? coll i d h"
I0123 11:46:10.825118 139878739914752 graph.py:498] 
I0123 11:46:10.825165 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b c, on_tline k d b c ? coll i d h
I0123 11:46:11.292875 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4422154426574707
I0123 11:46:11.852570 139878739914752 ddar.py:60] Depth 2/1000 time = 0.5595967769622803
I0123 11:46:12.468346 139878739914752 ddar.py:60] Depth 3/1000 time = 0.6156840324401855
I0123 11:46:13.829247 139878739914752 ddar.py:60] Depth 4/1000 time = 1.360546350479126
I0123 11:46:14.472598 139878739914752 ddar.py:60] Depth 5/1000 time = 0.6403384208679199
I0123 11:46:15.115434 139878739914752 ddar.py:60] Depth 6/1000 time = 0.6416387557983398
I0123 11:46:15.115575 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:46:15.115623 139878739914752 alphageometry.py:566] LM output (score=-3.574428): "k : C b e k 14 D a e a k 15 ;"
I0123 11:46:15.115659 139878739914752 alphageometry.py:567] Translation: "k = on_line k b e, on_circle k a e"

I0123 11:46:15.115697 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b e, on_circle k a e ? coll i d h"
I0123 11:46:15.115873 139878739914752 graph.py:498] 
I0123 11:46:15.115922 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b e, on_circle k a e ? coll i d h
I0123 11:46:16.451222 139878739914752 ddar.py:60] Depth 1/1000 time = 1.302851915359497
I0123 11:46:17.095161 139878739914752 ddar.py:60] Depth 2/1000 time = 0.64373779296875
I0123 11:46:18.477899 139878739914752 ddar.py:60] Depth 3/1000 time = 1.3826072216033936
I0123 11:46:19.120067 139878739914752 ddar.py:60] Depth 4/1000 time = 0.6417236328125
I0123 11:46:20.514432 139878739914752 ddar.py:60] Depth 5/1000 time = 1.391085147857666
I0123 11:46:20.515167 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:46:20.515231 139878739914752 alphageometry.py:566] LM output (score=-3.801189): "k : C b j k 14 D b j b k 15 ;"
I0123 11:46:20.515268 139878739914752 alphageometry.py:567] Translation: "k = on_line k b j, on_circle k b j"

I0123 11:46:20.515305 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b j, on_circle k b j ? coll i d h"
I0123 11:46:20.515445 139878739914752 graph.py:498] 
I0123 11:46:20.515493 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b j, on_circle k b j ? coll i d h
I0123 11:46:20.923645 139878739914752 ddar.py:60] Depth 1/1000 time = 0.3777956962585449
I0123 11:46:21.356954 139878739914752 ddar.py:60] Depth 2/1000 time = 0.4332003593444824
I0123 11:46:21.792038 139878739914752 ddar.py:60] Depth 3/1000 time = 0.43499183654785156
I0123 11:46:22.231189 139878739914752 ddar.py:60] Depth 4/1000 time = 0.43886327743530273
I0123 11:46:23.399265 139878739914752 ddar.py:60] Depth 5/1000 time = 1.1647257804870605
I0123 11:46:23.400018 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:46:23.400082 139878739914752 alphageometry.py:566] LM output (score=-3.899729): "k : C b g k 14 D b g g k 15 ;"
I0123 11:46:23.400119 139878739914752 alphageometry.py:567] Translation: "k = on_line k b g, on_circle k g b"

I0123 11:46:23.400158 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b g, on_circle k g b ? coll i d h"
I0123 11:46:23.400301 139878739914752 graph.py:498] 
I0123 11:46:23.400349 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b g, on_circle k g b ? coll i d h
I0123 11:46:23.810825 139878739914752 ddar.py:60] Depth 1/1000 time = 0.379744291305542
I0123 11:46:24.261224 139878739914752 ddar.py:60] Depth 2/1000 time = 0.45029640197753906
I0123 11:46:24.714844 139878739914752 ddar.py:60] Depth 3/1000 time = 0.45351696014404297
I0123 11:46:25.171947 139878739914752 ddar.py:60] Depth 4/1000 time = 0.4568064212799072
I0123 11:46:26.369566 139878739914752 ddar.py:60] Depth 5/1000 time = 1.1944184303283691
I0123 11:46:26.370793 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:46:26.370862 139878739914752 alphageometry.py:566] LM output (score=-3.951665): "k : C c j k 14 D c k j k 15 ;"
I0123 11:46:26.370928 139878739914752 alphageometry.py:567] Translation: "k = on_line k c j, on_bline k j c"

I0123 11:46:26.370969 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k c j, on_bline k j c ? coll i d h"
I0123 11:46:26.371113 139878739914752 graph.py:498] 
I0123 11:46:26.371162 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k c j, on_bline k j c ? coll i d h
I0123 11:46:26.778625 139878739914752 ddar.py:60] Depth 1/1000 time = 0.37674593925476074
I0123 11:46:27.248256 139878739914752 ddar.py:60] Depth 2/1000 time = 0.4695250988006592
I0123 11:46:27.730412 139878739914752 ddar.py:60] Depth 3/1000 time = 0.48206019401550293
I0123 11:46:28.210919 139878739914752 ddar.py:60] Depth 4/1000 time = 0.48020410537719727
I0123 11:46:29.448464 139878739914752 ddar.py:60] Depth 5/1000 time = 1.2342586517333984
I0123 11:46:29.449913 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:46:29.449978 139878739914752 alphageometry.py:566] LM output (score=-3.954484): "k : C d g k 14 D d k g k 15 ;"
I0123 11:46:29.450017 139878739914752 alphageometry.py:567] Translation: "k = on_line k d g, on_bline k g d"

I0123 11:46:29.450058 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k d g, on_bline k g d ? coll i d h"
I0123 11:46:29.450201 139878739914752 graph.py:498] 
I0123 11:46:29.450250 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k d g, on_bline k g d ? coll i d h
I0123 11:46:29.914376 139878739914752 ddar.py:60] Depth 1/1000 time = 0.43383073806762695
I0123 11:46:31.692719 139878739914752 ddar.py:60] Depth 2/1000 time = 1.778202772140503
I0123 11:46:34.206598 139878739914752 ddar.py:60] Depth 3/1000 time = 2.5136494636535645
I0123 11:46:35.970602 139878739914752 ddar.py:60] Depth 4/1000 time = 1.7635085582733154
I0123 11:46:37.760573 139878739914752 ddar.py:60] Depth 5/1000 time = 1.7862834930419922
I0123 11:46:37.761700 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:46:37.761767 139878739914752 alphageometry.py:566] LM output (score=-3.985499): "k : D d k d j 14 T a c d k 15 ;"
I0123 11:46:37.761806 139878739914752 alphageometry.py:567] Translation: "k = on_circle k d j, on_tline k d a c"

I0123 11:46:37.761845 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_circle k d j, on_tline k d a c ? coll i d h"
I0123 11:46:37.761993 139878739914752 graph.py:498] 
I0123 11:46:37.762041 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_circle k d j, on_tline k d a c ? coll i d h
I0123 11:46:39.265825 139878739914752 ddar.py:60] Depth 1/1000 time = 1.4694209098815918
I0123 11:46:40.864404 139878739914752 ddar.py:60] Depth 2/1000 time = 1.5983672142028809
I0123 11:46:42.463801 139878739914752 ddar.py:60] Depth 3/1000 time = 1.5991694927215576
I0123 11:46:43.308682 139878739914752 ddar.py:60] Depth 4/1000 time = 0.8444104194641113
I0123 11:46:44.926476 139878739914752 ddar.py:60] Depth 5/1000 time = 1.6166691780090332
I0123 11:46:46.657804 139878739914752 ddar.py:60] Depth 6/1000 time = 1.7310445308685303
I0123 11:46:48.591431 139878739914752 ddar.py:60] Depth 7/1000 time = 1.9333972930908203
I0123 11:46:51.297385 139878739914752 ddar.py:60] Depth 8/1000 time = 2.7056937217712402
I0123 11:46:53.351579 139878739914752 ddar.py:60] Depth 9/1000 time = 2.0539286136627197
I0123 11:46:53.362080 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:46:53.362142 139878739914752 alphageometry.py:566] LM output (score=-4.025410): "k : C j e k 14 D j k e k 15 ;"
I0123 11:46:53.362180 139878739914752 alphageometry.py:567] Translation: "k = on_line k j e, on_bline k e j"

I0123 11:46:53.362218 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k j e, on_bline k e j ? coll i d h"
I0123 11:46:53.362358 139878739914752 graph.py:498] 
I0123 11:46:53.362405 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k j e, on_bline k e j ? coll i d h
I0123 11:46:53.779639 139878739914752 ddar.py:60] Depth 1/1000 time = 0.38709378242492676
I0123 11:46:54.280745 139878739914752 ddar.py:60] Depth 2/1000 time = 0.5010097026824951
I0123 11:46:54.820193 139878739914752 ddar.py:60] Depth 3/1000 time = 0.5393455028533936
I0123 11:46:55.360228 139878739914752 ddar.py:60] Depth 4/1000 time = 0.5397253036499023
I0123 11:46:55.936239 139878739914752 ddar.py:60] Depth 5/1000 time = 0.570960283279419
I0123 11:46:55.937056 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:46:55.937103 139878739914752 alphageometry.py:566] LM output (score=-4.061673): "k : C b f k 14 D b f f k 15 ;"
I0123 11:46:55.937138 139878739914752 alphageometry.py:567] Translation: "k = on_line k b f, on_circle k f b"

I0123 11:46:55.937174 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b f, on_circle k f b ? coll i d h"
I0123 11:46:55.937306 139878739914752 graph.py:498] 
I0123 11:46:55.937352 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b f, on_circle k f b ? coll i d h
I0123 11:46:57.310792 139878739914752 ddar.py:60] Depth 1/1000 time = 1.3415279388427734
I0123 11:46:58.937158 139878739914752 ddar.py:60] Depth 2/1000 time = 1.626145601272583
I0123 11:46:59.846259 139878739914752 ddar.py:60] Depth 3/1000 time = 0.9088945388793945
I0123 11:47:01.492445 139878739914752 ddar.py:60] Depth 4/1000 time = 1.6457226276397705
I0123 11:47:02.426521 139878739914752 ddar.py:60] Depth 5/1000 time = 0.9286839962005615
I0123 11:47:02.427365 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:47:02.427417 139878739914752 alphageometry.py:566] LM output (score=-4.098310): "k : C b c k 14 D b k c k 15 ;"
I0123 11:47:02.427454 139878739914752 alphageometry.py:567] Translation: "k = on_line k b c, on_bline k c b"

I0123 11:47:02.427491 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b c, on_bline k c b ? coll i d h"
I0123 11:47:02.427629 139878739914752 graph.py:498] 
I0123 11:47:02.427676 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d b c; k = on_line k b c, on_bline k c b ? coll i d h
I0123 11:47:02.845113 139878739914752 ddar.py:60] Depth 1/1000 time = 0.38759326934814453
I0123 11:47:04.751372 139878739914752 ddar.py:60] Depth 2/1000 time = 1.9061360359191895
I0123 11:47:07.507510 139878739914752 ddar.py:60] Depth 3/1000 time = 2.7558913230895996
I0123 11:47:09.472704 139878739914752 ddar.py:60] Depth 4/1000 time = 1.9646704196929932
I0123 11:47:11.477858 139878739914752 ddar.py:60] Depth 5/1000 time = 2.0010030269622803
I0123 11:47:11.479578 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:47:11.479647 139878739914752 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : D d e d j 12 T a c d j 13 ; x00
I0123 11:47:22.066244 139878739914752 alphageometry.py:566] LM output (score=-0.009818): "k : C b c k 14 T b c d k 15 ;"
I0123 11:47:22.066548 139878739914752 alphageometry.py:567] Translation: "k = on_line k b c, on_tline k d b c"

I0123 11:47:22.066613 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b c, on_tline k d b c ? coll i d h"
I0123 11:47:22.066764 139878739914752 graph.py:498] 
I0123 11:47:22.066820 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b c, on_tline k d b c ? coll i d h
I0123 11:47:22.498666 139878739914752 ddar.py:60] Depth 1/1000 time = 0.39788103103637695
I0123 11:47:23.007111 139878739914752 ddar.py:60] Depth 2/1000 time = 0.5083513259887695
I0123 11:47:23.568126 139878739914752 ddar.py:60] Depth 3/1000 time = 0.5609114170074463
I0123 11:47:24.911568 139878739914752 ddar.py:60] Depth 4/1000 time = 1.3430712223052979
I0123 11:47:25.498546 139878739914752 ddar.py:60] Depth 5/1000 time = 0.5858986377716064
I0123 11:47:26.140821 139878739914752 ddar.py:60] Depth 6/1000 time = 0.6421387195587158
I0123 11:47:26.986871 139878739914752 ddar.py:60] Depth 7/1000 time = 0.8459334373474121
I0123 11:47:27.798917 139878739914752 ddar.py:60] Depth 8/1000 time = 0.8119487762451172
I0123 11:47:29.456080 139878739914752 ddar.py:60] Depth 9/1000 time = 1.6570398807525635
I0123 11:47:31.897228 139878739914752 ddar.py:60] Depth 10/1000 time = 2.4409196376800537
I0123 11:47:35.304018 139878739914752 ddar.py:60] Depth 11/1000 time = 3.406564474105835
I0123 11:47:39.480020 139878739914752 ddar.py:60] Depth 12/1000 time = 4.17577862739563
I0123 11:47:43.765288 139878739914752 ddar.py:60] Depth 13/1000 time = 4.285039901733398
I0123 11:47:49.042209 139878739914752 ddar.py:60] Depth 14/1000 time = 5.2767014503479
I0123 11:47:54.575927 139878739914752 ddar.py:60] Depth 15/1000 time = 5.53347373008728
I0123 11:48:00.241750 139878739914752 ddar.py:60] Depth 16/1000 time = 5.665529012680054
I0123 11:48:05.931325 139878739914752 ddar.py:60] Depth 17/1000 time = 5.6632654666900635
I0123 11:48:11.943355 139878739914752 ddar.py:60] Depth 18/1000 time = 6.011773347854614
I0123 11:48:17.973549 139878739914752 ddar.py:60] Depth 19/1000 time = 6.02989649772644
I0123 11:48:17.978935 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:48:17.979014 139878739914752 alphageometry.py:566] LM output (score=-2.758093): "k : C e f k 14 D e k f k 15 ;"
I0123 11:48:17.979053 139878739914752 alphageometry.py:567] Translation: "k = on_line k e f, on_bline k f e"

I0123 11:48:17.979092 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k e f, on_bline k f e ? coll i d h"
I0123 11:48:17.979265 139878739914752 graph.py:498] 
I0123 11:48:17.979312 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k e f, on_bline k f e ? coll i d h
I0123 11:48:19.357224 139878739914752 ddar.py:60] Depth 1/1000 time = 1.3433785438537598
I0123 11:48:20.079977 139878739914752 ddar.py:60] Depth 2/1000 time = 0.7225642204284668
I0123 11:48:21.565162 139878739914752 ddar.py:60] Depth 3/1000 time = 1.4850375652313232
I0123 11:48:22.297837 139878739914752 ddar.py:60] Depth 4/1000 time = 0.7321991920471191
I0123 11:48:23.810319 139878739914752 ddar.py:60] Depth 5/1000 time = 1.5116944313049316
I0123 11:48:24.626873 139878739914752 ddar.py:60] Depth 6/1000 time = 0.8163108825683594
I0123 11:48:26.347253 139878739914752 ddar.py:60] Depth 7/1000 time = 1.7202157974243164
I0123 11:48:27.312976 139878739914752 ddar.py:60] Depth 8/1000 time = 0.9654786586761475
I0123 11:48:29.099388 139878739914752 ddar.py:60] Depth 9/1000 time = 1.7862489223480225
I0123 11:48:29.105222 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:48:29.105291 139878739914752 alphageometry.py:566] LM output (score=-2.953402): "k : C b f k 14 D b k f k 15 ;"
I0123 11:48:29.105329 139878739914752 alphageometry.py:567] Translation: "k = on_line k b f, on_bline k f b"

I0123 11:48:29.105370 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b f, on_bline k f b ? coll i d h"
I0123 11:48:29.105534 139878739914752 graph.py:498] 
I0123 11:48:29.105581 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b f, on_bline k f b ? coll i d h
I0123 11:48:30.479966 139878739914752 ddar.py:60] Depth 1/1000 time = 1.3420934677124023
I0123 11:48:31.156365 139878739914752 ddar.py:60] Depth 2/1000 time = 0.676201343536377
I0123 11:48:32.613718 139878739914752 ddar.py:60] Depth 3/1000 time = 1.4571831226348877
I0123 11:48:33.294361 139878739914752 ddar.py:60] Depth 4/1000 time = 0.6801574230194092
I0123 11:48:34.755911 139878739914752 ddar.py:60] Depth 5/1000 time = 1.4607787132263184
I0123 11:48:35.516835 139878739914752 ddar.py:60] Depth 6/1000 time = 0.7606773376464844
I0123 11:48:37.229099 139878739914752 ddar.py:60] Depth 7/1000 time = 1.712083101272583
I0123 11:48:38.156824 139878739914752 ddar.py:60] Depth 8/1000 time = 0.927490234375
I0123 11:48:39.920875 139878739914752 ddar.py:60] Depth 9/1000 time = 1.763885736465454
I0123 11:48:39.926957 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:48:39.927027 139878739914752 alphageometry.py:566] LM output (score=-3.034509): "k : C b g k 14 D b k g k 15 ;"
I0123 11:48:39.927066 139878739914752 alphageometry.py:567] Translation: "k = on_line k b g, on_bline k g b"

I0123 11:48:39.927106 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b g, on_bline k g b ? coll i d h"
I0123 11:48:39.927251 139878739914752 graph.py:498] 
I0123 11:48:39.927299 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b g, on_bline k g b ? coll i d h
I0123 11:48:40.347695 139878739914752 ddar.py:60] Depth 1/1000 time = 0.3894004821777344
I0123 11:48:42.012206 139878739914752 ddar.py:60] Depth 2/1000 time = 1.66438889503479
I0123 11:48:43.748732 139878739914752 ddar.py:60] Depth 3/1000 time = 1.736297607421875
I0123 11:48:45.491954 139878739914752 ddar.py:60] Depth 4/1000 time = 1.7427208423614502
I0123 11:48:48.056549 139878739914752 ddar.py:60] Depth 5/1000 time = 2.5637145042419434
I0123 11:48:49.935361 139878739914752 ddar.py:60] Depth 6/1000 time = 1.8785383701324463
I0123 11:48:52.001323 139878739914752 ddar.py:60] Depth 7/1000 time = 2.065741539001465
I0123 11:48:54.060225 139878739914752 ddar.py:60] Depth 8/1000 time = 2.058643102645874
I0123 11:48:56.178196 139878739914752 ddar.py:60] Depth 9/1000 time = 2.1177167892456055
I0123 11:48:56.184298 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:48:56.184374 139878739914752 alphageometry.py:566] LM output (score=-3.288310): "k : C d f k 14 D d k f k 15 ;"
I0123 11:48:56.184414 139878739914752 alphageometry.py:567] Translation: "k = on_line k d f, on_bline k f d"

I0123 11:48:56.184453 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k d f, on_bline k f d ? coll i d h"
I0123 11:48:56.184597 139878739914752 graph.py:498] 
I0123 11:48:56.184646 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k d f, on_bline k f d ? coll i d h
I0123 11:48:56.619699 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4038817882537842
I0123 11:48:58.356339 139878739914752 ddar.py:60] Depth 2/1000 time = 1.736499309539795
I0123 11:49:00.097985 139878739914752 ddar.py:60] Depth 3/1000 time = 1.7414093017578125
I0123 11:49:01.874946 139878739914752 ddar.py:60] Depth 4/1000 time = 1.7764461040496826
I0123 11:49:03.661155 139878739914752 ddar.py:60] Depth 5/1000 time = 1.785269021987915
I0123 11:49:06.329982 139878739914752 ddar.py:60] Depth 6/1000 time = 2.6685779094696045
I0123 11:49:08.398823 139878739914752 ddar.py:60] Depth 7/1000 time = 2.0686168670654297
I0123 11:49:10.485564 139878739914752 ddar.py:60] Depth 8/1000 time = 2.086467742919922
I0123 11:49:12.648736 139878739914752 ddar.py:60] Depth 9/1000 time = 2.16290545463562
I0123 11:49:12.656735 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:49:12.656813 139878739914752 alphageometry.py:566] LM output (score=-3.306027): "k : C b j k 14 D b k j k 15 ;"
I0123 11:49:12.656853 139878739914752 alphageometry.py:567] Translation: "k = on_line k b j, on_bline k j b"

I0123 11:49:12.656893 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b j, on_bline k j b ? coll i d h"
I0123 11:49:12.657039 139878739914752 graph.py:498] 
I0123 11:49:12.657088 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b j, on_bline k j b ? coll i d h
I0123 11:49:13.065765 139878739914752 ddar.py:60] Depth 1/1000 time = 0.3773045539855957
I0123 11:49:13.509183 139878739914752 ddar.py:60] Depth 2/1000 time = 0.44332289695739746
I0123 11:49:14.706205 139878739914752 ddar.py:60] Depth 3/1000 time = 1.1968908309936523
I0123 11:49:15.142936 139878739914752 ddar.py:60] Depth 4/1000 time = 0.4362673759460449
I0123 11:49:15.594563 139878739914752 ddar.py:60] Depth 5/1000 time = 0.45085835456848145
I0123 11:49:16.121518 139878739914752 ddar.py:60] Depth 6/1000 time = 0.5268144607543945
I0123 11:49:16.760745 139878739914752 ddar.py:60] Depth 7/1000 time = 0.6389966011047363
I0123 11:49:17.397104 139878739914752 ddar.py:60] Depth 8/1000 time = 0.6362314224243164
I0123 11:49:18.866153 139878739914752 ddar.py:60] Depth 9/1000 time = 1.4688994884490967
I0123 11:49:18.871523 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:49:18.871592 139878739914752 alphageometry.py:566] LM output (score=-3.375326): "k : D d k d j 14 T b c d k 15 ;"
I0123 11:49:18.871628 139878739914752 alphageometry.py:567] Translation: "k = on_circle k d j, on_tline k d b c"

I0123 11:49:18.871666 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_circle k d j, on_tline k d b c ? coll i d h"
I0123 11:49:18.871809 139878739914752 graph.py:498] 
I0123 11:49:18.871858 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_circle k d j, on_tline k d b c ? coll i d h
I0123 11:49:20.411304 139878739914752 ddar.py:60] Depth 1/1000 time = 1.504408359527588
I0123 11:49:21.303136 139878739914752 ddar.py:60] Depth 2/1000 time = 0.8916411399841309
I0123 11:49:22.898532 139878739914752 ddar.py:60] Depth 3/1000 time = 1.5951604843139648
I0123 11:49:24.504782 139878739914752 ddar.py:60] Depth 4/1000 time = 1.6057510375976562
I0123 11:49:26.197807 139878739914752 ddar.py:60] Depth 5/1000 time = 1.6926546096801758
I0123 11:49:27.938994 139878739914752 ddar.py:60] Depth 6/1000 time = 1.740933895111084
I0123 11:49:29.667196 139878739914752 ddar.py:60] Depth 7/1000 time = 1.7279627323150635
I0123 11:49:29.674641 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:49:29.674723 139878739914752 alphageometry.py:566] LM output (score=-3.467143): "k : C c e k 14 D c k e k 15 ;"
I0123 11:49:29.674764 139878739914752 alphageometry.py:567] Translation: "k = on_line k c e, on_bline k e c"

I0123 11:49:29.674806 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k c e, on_bline k e c ? coll i d h"
I0123 11:49:29.674952 139878739914752 graph.py:498] 
I0123 11:49:29.675002 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k c e, on_bline k e c ? coll i d h
I0123 11:49:30.110354 139878739914752 ddar.py:60] Depth 1/1000 time = 0.40433239936828613
I0123 11:49:31.941824 139878739914752 ddar.py:60] Depth 2/1000 time = 1.8313496112823486
I0123 11:49:33.906030 139878739914752 ddar.py:60] Depth 3/1000 time = 1.9639668464660645
I0123 11:49:35.844047 139878739914752 ddar.py:60] Depth 4/1000 time = 1.9375078678131104
I0123 11:49:38.631200 139878739914752 ddar.py:60] Depth 5/1000 time = 2.7861363887786865
I0123 11:49:40.710722 139878739914752 ddar.py:60] Depth 6/1000 time = 2.079256296157837
I0123 11:49:42.975924 139878739914752 ddar.py:60] Depth 7/1000 time = 2.26497745513916
I0123 11:49:45.274027 139878739914752 ddar.py:60] Depth 8/1000 time = 2.2978382110595703
I0123 11:49:47.631134 139878739914752 ddar.py:60] Depth 9/1000 time = 2.3568379878997803
I0123 11:49:47.639180 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:49:47.639248 139878739914752 alphageometry.py:566] LM output (score=-3.871303): "k : C b e k 14 D b e e k 15 ;"
I0123 11:49:47.639286 139878739914752 alphageometry.py:567] Translation: "k = on_line k b e, on_circle k e b"

I0123 11:49:47.639322 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b e, on_circle k e b ? coll i d h"
I0123 11:49:47.639482 139878739914752 graph.py:498] 
I0123 11:49:47.639532 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b e, on_circle k e b ? coll i d h
I0123 11:49:49.030862 139878739914752 ddar.py:60] Depth 1/1000 time = 1.3591740131378174
I0123 11:49:49.778690 139878739914752 ddar.py:60] Depth 2/1000 time = 0.7476212978363037
I0123 11:49:51.303572 139878739914752 ddar.py:60] Depth 3/1000 time = 1.5247116088867188
I0123 11:49:52.049959 139878739914752 ddar.py:60] Depth 4/1000 time = 0.7459485530853271
I0123 11:49:53.575029 139878739914752 ddar.py:60] Depth 5/1000 time = 1.52431321144104
I0123 11:49:54.413532 139878739914752 ddar.py:60] Depth 6/1000 time = 0.8382847309112549
I0123 11:49:56.188443 139878739914752 ddar.py:60] Depth 7/1000 time = 1.7747657299041748
I0123 11:49:57.190109 139878739914752 ddar.py:60] Depth 8/1000 time = 1.0014574527740479
I0123 11:49:59.024123 139878739914752 ddar.py:60] Depth 9/1000 time = 1.8338813781738281
I0123 11:49:59.030335 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:49:59.030392 139878739914752 alphageometry.py:566] LM output (score=-3.911510): "k : C b d k 14 D b k d k 15 ;"
I0123 11:49:59.030428 139878739914752 alphageometry.py:567] Translation: "k = on_line k b d, on_bline k d b"

I0123 11:49:59.030464 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b d, on_bline k d b ? coll i d h"
I0123 11:49:59.030604 139878739914752 graph.py:498] 
I0123 11:49:59.030652 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b d, on_bline k d b ? coll i d h
I0123 11:49:59.452024 139878739914752 ddar.py:60] Depth 1/1000 time = 0.3909628391265869
I0123 11:50:01.148447 139878739914752 ddar.py:60] Depth 2/1000 time = 1.6962990760803223
I0123 11:50:02.924255 139878739914752 ddar.py:60] Depth 3/1000 time = 1.7755656242370605
I0123 11:50:04.691133 139878739914752 ddar.py:60] Depth 4/1000 time = 1.766402006149292
I0123 11:50:06.488974 139878739914752 ddar.py:60] Depth 5/1000 time = 1.7975268363952637
I0123 11:50:06.493187 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:50:06.493257 139878739914752 alphageometry.py:566] LM output (score=-3.951409): "k : C b e k 14 D a e a k 15 ;"
I0123 11:50:06.493296 139878739914752 alphageometry.py:567] Translation: "k = on_line k b e, on_circle k a e"

I0123 11:50:06.493334 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b e, on_circle k a e ? coll i d h"
I0123 11:50:06.493476 139878739914752 graph.py:498] 
I0123 11:50:06.493525 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b e, on_circle k a e ? coll i d h
I0123 11:50:07.894252 139878739914752 ddar.py:60] Depth 1/1000 time = 1.3681640625
I0123 11:50:08.536892 139878739914752 ddar.py:60] Depth 2/1000 time = 0.6424455642700195
I0123 11:50:09.980154 139878739914752 ddar.py:60] Depth 3/1000 time = 1.4431307315826416
I0123 11:50:10.632231 139878739914752 ddar.py:60] Depth 4/1000 time = 0.6516585350036621
I0123 11:50:12.086122 139878739914752 ddar.py:60] Depth 5/1000 time = 1.4536449909210205
I0123 11:50:12.089673 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:50:12.089745 139878739914752 alphageometry.py:566] LM output (score=-3.959385): "k : C b c k 14 D b k c k 15 ;"
I0123 11:50:12.089785 139878739914752 alphageometry.py:567] Translation: "k = on_line k b c, on_bline k c b"

I0123 11:50:12.089826 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b c, on_bline k c b ? coll i d h"
I0123 11:50:12.089970 139878739914752 graph.py:498] 
I0123 11:50:12.090019 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b c, on_bline k c b ? coll i d h
I0123 11:50:12.503279 139878739914752 ddar.py:60] Depth 1/1000 time = 0.3821532726287842
I0123 11:50:14.342751 139878739914752 ddar.py:60] Depth 2/1000 time = 1.8393492698669434
I0123 11:50:16.283215 139878739914752 ddar.py:60] Depth 3/1000 time = 1.9402248859405518
I0123 11:50:18.207558 139878739914752 ddar.py:60] Depth 4/1000 time = 1.923830509185791
I0123 11:50:20.165122 139878739914752 ddar.py:60] Depth 5/1000 time = 1.9571030139923096
I0123 11:50:20.170063 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:50:20.170137 139878739914752 alphageometry.py:566] LM output (score=-4.057235): "k : C f g k 14 D f k g k 15 ;"
I0123 11:50:20.170175 139878739914752 alphageometry.py:567] Translation: "k = on_line k f g, on_bline k g f"

I0123 11:50:20.170213 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k f g, on_bline k g f ? coll i d h"
I0123 11:50:20.170355 139878739914752 graph.py:498] 
I0123 11:50:20.170403 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k f g, on_bline k g f ? coll i d h
I0123 11:50:21.374815 139878739914752 ddar.py:60] Depth 1/1000 time = 1.173529863357544
I0123 11:50:23.138382 139878739914752 ddar.py:60] Depth 2/1000 time = 1.7633545398712158
I0123 11:50:24.921276 139878739914752 ddar.py:60] Depth 3/1000 time = 1.7826645374298096
I0123 11:50:26.734030 139878739914752 ddar.py:60] Depth 4/1000 time = 1.8122456073760986
I0123 11:50:28.581830 139878739914752 ddar.py:60] Depth 5/1000 time = 1.8474595546722412
I0123 11:50:28.587476 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:50:28.587534 139878739914752 alphageometry.py:566] LM output (score=-4.148155): "k : T b c d k 14 T b k c d 15 ;"
I0123 11:50:28.587571 139878739914752 alphageometry.py:567] Translation: "k = on_tline k d b c, on_tline k b c d"

I0123 11:50:28.587609 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_tline k d b c, on_tline k b c d ? coll i d h"
I0123 11:50:28.587754 139878739914752 graph.py:498] 
I0123 11:50:28.587802 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_tline k d b c, on_tline k b c d ? coll i d h
I0123 11:50:28.987903 139878739914752 ddar.py:60] Depth 1/1000 time = 0.36161017417907715
I0123 11:50:29.492556 139878739914752 ddar.py:60] Depth 2/1000 time = 0.5045335292816162
I0123 11:50:30.006467 139878739914752 ddar.py:60] Depth 3/1000 time = 0.5137970447540283
I0123 11:50:30.543142 139878739914752 ddar.py:60] Depth 4/1000 time = 0.5365903377532959
I0123 11:50:31.193000 139878739914752 ddar.py:60] Depth 5/1000 time = 0.6497676372528076
I0123 11:50:31.872730 139878739914752 ddar.py:60] Depth 6/1000 time = 0.6796274185180664
I0123 11:50:32.548050 139878739914752 ddar.py:60] Depth 7/1000 time = 0.6749377250671387
I0123 11:50:34.061810 139878739914752 ddar.py:60] Depth 8/1000 time = 1.5124011039733887
I0123 11:50:34.844423 139878739914752 ddar.py:60] Depth 9/1000 time = 0.7823841571807861
I0123 11:50:35.980298 139878739914752 ddar.py:60] Depth 10/1000 time = 1.1357336044311523
I0123 11:50:36.973126 139878739914752 ddar.py:60] Depth 11/1000 time = 0.9926934242248535
I0123 11:50:38.021028 139878739914752 ddar.py:60] Depth 12/1000 time = 1.0477995872497559
I0123 11:50:38.038372 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:50:38.038429 139878739914752 alphageometry.py:566] LM output (score=-4.185491): "k : C b g k 14 D b g b k 15 ;"
I0123 11:50:38.038463 139878739914752 alphageometry.py:567] Translation: "k = on_line k b g, on_circle k b g"

I0123 11:50:38.038499 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b g, on_circle k b g ? coll i d h"
I0123 11:50:38.038632 139878739914752 graph.py:498] 
I0123 11:50:38.038677 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b g, on_circle k b g ? coll i d h
I0123 11:50:39.247109 139878739914752 ddar.py:60] Depth 1/1000 time = 1.1783506870269775
I0123 11:50:39.763435 139878739914752 ddar.py:60] Depth 2/1000 time = 0.5161209106445312
I0123 11:50:40.274352 139878739914752 ddar.py:60] Depth 3/1000 time = 0.5108098983764648
I0123 11:50:40.789915 139878739914752 ddar.py:60] Depth 4/1000 time = 0.5152649879455566
I0123 11:50:41.320441 139878739914752 ddar.py:60] Depth 5/1000 time = 0.5303652286529541
I0123 11:50:41.324953 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:50:41.325004 139878739914752 alphageometry.py:566] LM output (score=-4.270709): "k : C b e k 14 D b e b k 15 ;"
I0123 11:50:41.325038 139878739914752 alphageometry.py:567] Translation: "k = on_line k b e, on_circle k b e"

I0123 11:50:41.325074 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b e, on_circle k b e ? coll i d h"
I0123 11:50:41.325206 139878739914752 graph.py:498] 
I0123 11:50:41.325253 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b e, on_circle k b e ? coll i d h
I0123 11:50:42.722754 139878739914752 ddar.py:60] Depth 1/1000 time = 1.3655495643615723
I0123 11:50:43.367018 139878739914752 ddar.py:60] Depth 2/1000 time = 0.6440682411193848
I0123 11:50:44.802529 139878739914752 ddar.py:60] Depth 3/1000 time = 1.4353575706481934
I0123 11:50:45.450799 139878739914752 ddar.py:60] Depth 4/1000 time = 0.6478197574615479
I0123 11:50:46.902894 139878739914752 ddar.py:60] Depth 5/1000 time = 1.4513309001922607
I0123 11:50:47.623116 139878739914752 ddar.py:60] Depth 6/1000 time = 0.71999192237854
I0123 11:50:49.285065 139878739914752 ddar.py:60] Depth 7/1000 time = 1.6618084907531738
I0123 11:50:50.157316 139878739914752 ddar.py:60] Depth 8/1000 time = 0.8720216751098633
I0123 11:50:51.870129 139878739914752 ddar.py:60] Depth 9/1000 time = 1.7126059532165527
I0123 11:50:51.875785 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:50:51.875855 139878739914752 alphageometry.py:566] LM output (score=-4.276133): "k : C a c k 14 T a c d k 15 ;"
I0123 11:50:51.875894 139878739914752 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 11:50:51.875930 139878739914752 alphageometry.py:566] LM output (score=-4.393956): "k : C d e k 14 D d e d k 15 ;"
I0123 11:50:51.875959 139878739914752 alphageometry.py:567] Translation: "k = on_line k d e, on_circle k d e"

I0123 11:50:51.875991 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k d e, on_circle k d e ? coll i d h"
I0123 11:50:51.876131 139878739914752 graph.py:498] 
I0123 11:50:51.876179 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k d e, on_circle k d e ? coll i d h
I0123 11:50:53.685230 139878739914752 ddar.py:60] Depth 1/1000 time = 1.7799198627471924
I0123 11:50:56.457803 139878739914752 ddar.py:60] Depth 2/1000 time = 2.77234148979187
I0123 11:50:59.304692 139878739914752 ddar.py:60] Depth 3/1000 time = 2.846649169921875
I0123 11:51:01.344817 139878739914752 ddar.py:60] Depth 4/1000 time = 2.0396296977996826
I0123 11:51:04.331107 139878739914752 ddar.py:60] Depth 5/1000 time = 2.9842402935028076
I0123 11:51:06.922482 139878739914752 ddar.py:60] Depth 6/1000 time = 2.591139793395996
I0123 11:51:10.216063 139878739914752 ddar.py:60] Depth 7/1000 time = 3.2933268547058105
I0123 11:51:13.628651 139878739914752 ddar.py:60] Depth 8/1000 time = 3.41232967376709
I0123 11:51:13.636034 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:51:13.636090 139878739914752 alphageometry.py:566] LM output (score=-4.394590): "k : C a f k 14 D a k f k 15 ;"
I0123 11:51:13.636140 139878739914752 alphageometry.py:567] Translation: "k = on_line k a f, on_bline k f a"

I0123 11:51:13.636178 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k a f, on_bline k f a ? coll i d h"
I0123 11:51:13.636317 139878739914752 graph.py:498] 
I0123 11:51:13.636365 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k a f, on_bline k f a ? coll i d h
I0123 11:51:14.246810 139878739914752 ddar.py:60] Depth 1/1000 time = 0.5781195163726807
I0123 11:51:14.956383 139878739914752 ddar.py:60] Depth 2/1000 time = 0.7094588279724121
I0123 11:51:16.452895 139878739914752 ddar.py:60] Depth 3/1000 time = 1.4963774681091309
I0123 11:51:17.171791 139878739914752 ddar.py:60] Depth 4/1000 time = 0.7184362411499023
I0123 11:51:18.733592 139878739914752 ddar.py:60] Depth 5/1000 time = 1.5615248680114746
I0123 11:51:18.738107 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:51:18.738173 139878739914752 alphageometry.py:566] LM output (score=-4.544245): "k : C b f k 14 D b f f k 15 ;"
I0123 11:51:18.738210 139878739914752 alphageometry.py:567] Translation: "k = on_line k b f, on_circle k f b"

I0123 11:51:18.738278 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b f, on_circle k f b ? coll i d h"
I0123 11:51:18.738424 139878739914752 graph.py:498] 
I0123 11:51:18.738473 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b f, on_circle k f b ? coll i d h
I0123 11:51:19.372496 139878739914752 ddar.py:60] Depth 1/1000 time = 0.6017303466796875
I0123 11:51:21.043846 139878739914752 ddar.py:60] Depth 2/1000 time = 1.6712255477905273
I0123 11:51:21.941581 139878739914752 ddar.py:60] Depth 3/1000 time = 0.8975365161895752
I0123 11:51:23.634972 139878739914752 ddar.py:60] Depth 4/1000 time = 1.6929402351379395
I0123 11:51:24.560138 139878739914752 ddar.py:60] Depth 5/1000 time = 0.9248895645141602
I0123 11:51:24.565836 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:51:24.565891 139878739914752 alphageometry.py:566] LM output (score=-4.574362): "k : C e j k 14 D e k j k 15 ;"
I0123 11:51:24.565926 139878739914752 alphageometry.py:567] Translation: "k = on_line k e j, on_bline k j e"

I0123 11:51:24.565961 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k e j, on_bline k j e ? coll i d h"
I0123 11:51:24.566097 139878739914752 graph.py:498] 
I0123 11:51:24.566146 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k e j, on_bline k j e ? coll i d h
I0123 11:51:24.983143 139878739914752 ddar.py:60] Depth 1/1000 time = 0.3869667053222656
I0123 11:51:26.282870 139878739914752 ddar.py:60] Depth 2/1000 time = 1.2996134757995605
I0123 11:51:26.818051 139878739914752 ddar.py:60] Depth 3/1000 time = 0.5349867343902588
I0123 11:51:27.358769 139878739914752 ddar.py:60] Depth 4/1000 time = 0.5404109954833984
I0123 11:51:27.983267 139878739914752 ddar.py:60] Depth 5/1000 time = 0.6229677200317383
I0123 11:51:28.610723 139878739914752 ddar.py:60] Depth 6/1000 time = 0.6273622512817383
I0123 11:51:30.059391 139878739914752 ddar.py:60] Depth 7/1000 time = 1.4485208988189697
I0123 11:51:30.065269 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:51:30.065358 139878739914752 alphageometry.py:566] LM output (score=-4.581188): "k : C b g k 14 D b g g k 15 ;"
I0123 11:51:30.065400 139878739914752 alphageometry.py:567] Translation: "k = on_line k b g, on_circle k g b"

I0123 11:51:30.065439 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b g, on_circle k g b ? coll i d h"
I0123 11:51:30.065581 139878739914752 graph.py:498] 
I0123 11:51:30.065630 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b g, on_circle k g b ? coll i d h
I0123 11:51:30.479668 139878739914752 ddar.py:60] Depth 1/1000 time = 0.38241004943847656
I0123 11:51:30.929551 139878739914752 ddar.py:60] Depth 2/1000 time = 0.4497830867767334
I0123 11:51:31.384589 139878739914752 ddar.py:60] Depth 3/1000 time = 0.45494627952575684
I0123 11:51:31.838585 139878739914752 ddar.py:60] Depth 4/1000 time = 0.4537031650543213
I0123 11:51:32.311919 139878739914752 ddar.py:60] Depth 5/1000 time = 0.47262024879455566
I0123 11:51:33.626355 139878739914752 ddar.py:60] Depth 6/1000 time = 1.314326286315918
I0123 11:51:34.294785 139878739914752 ddar.py:60] Depth 7/1000 time = 0.6682639122009277
I0123 11:51:34.948361 139878739914752 ddar.py:60] Depth 8/1000 time = 0.6534423828125
I0123 11:51:35.647722 139878739914752 ddar.py:60] Depth 9/1000 time = 0.6992478370666504
I0123 11:51:35.653026 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:51:35.653078 139878739914752 alphageometry.py:566] LM output (score=-4.743526): "h : C b c h 14 T b c d h 15 ;"
I0123 11:51:35.653113 139878739914752 alphageometry.py:567] Translation: "ERROR: point h already exists."

I0123 11:51:35.653146 139878739914752 alphageometry.py:566] LM output (score=-4.754979): "k : C b e k 14 D b k e k 15 ;"
I0123 11:51:35.653174 139878739914752 alphageometry.py:567] Translation: "k = on_line k b e, on_bline k e b"

I0123 11:51:35.653205 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b e, on_bline k e b ? coll i d h"
I0123 11:51:35.653336 139878739914752 graph.py:498] 
I0123 11:51:35.653382 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b e, on_bline k e b ? coll i d h
I0123 11:51:37.063441 139878739914752 ddar.py:60] Depth 1/1000 time = 1.3787963390350342
I0123 11:51:37.704610 139878739914752 ddar.py:60] Depth 2/1000 time = 0.6409792900085449
I0123 11:51:39.150363 139878739914752 ddar.py:60] Depth 3/1000 time = 1.4456253051757812
I0123 11:51:39.797739 139878739914752 ddar.py:60] Depth 4/1000 time = 0.6469216346740723
I0123 11:51:41.261271 139878739914752 ddar.py:60] Depth 5/1000 time = 1.4627792835235596
I0123 11:51:41.977837 139878739914752 ddar.py:60] Depth 6/1000 time = 0.7163150310516357
I0123 11:51:43.666163 139878739914752 ddar.py:60] Depth 7/1000 time = 1.6881535053253174
I0123 11:51:44.549513 139878739914752 ddar.py:60] Depth 8/1000 time = 0.8831117153167725
I0123 11:51:46.301138 139878739914752 ddar.py:60] Depth 9/1000 time = 1.7514472007751465
I0123 11:51:46.306510 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:51:46.306576 139878739914752 alphageometry.py:566] LM output (score=-4.771453): "k : C b c k 14 T b c g k 15 ;"
I0123 11:51:46.306616 139878739914752 alphageometry.py:567] Translation: "k = on_line k b c, on_tline k g b c"

I0123 11:51:46.306654 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b c, on_tline k g b c ? coll i d h"
I0123 11:51:46.306798 139878739914752 graph.py:498] 
I0123 11:51:46.306847 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b c, on_tline k g b c ? coll i d h
I0123 11:51:46.732390 139878739914752 ddar.py:60] Depth 1/1000 time = 0.39296388626098633
I0123 11:51:47.236790 139878739914752 ddar.py:60] Depth 2/1000 time = 0.5043084621429443
I0123 11:51:47.789544 139878739914752 ddar.py:60] Depth 3/1000 time = 0.5526423454284668
I0123 11:51:48.352011 139878739914752 ddar.py:60] Depth 4/1000 time = 0.5621321201324463
I0123 11:51:49.746511 139878739914752 ddar.py:60] Depth 5/1000 time = 1.3935668468475342
I0123 11:51:50.375910 139878739914752 ddar.py:60] Depth 6/1000 time = 0.6291544437408447
I0123 11:51:51.196750 139878739914752 ddar.py:60] Depth 7/1000 time = 0.8206887245178223
I0123 11:51:51.987645 139878739914752 ddar.py:60] Depth 8/1000 time = 0.7907824516296387
I0123 11:51:52.845865 139878739914752 ddar.py:60] Depth 9/1000 time = 0.8580803871154785
I0123 11:51:54.530425 139878739914752 ddar.py:60] Depth 10/1000 time = 1.684427261352539
I0123 11:51:55.399002 139878739914752 ddar.py:60] Depth 11/1000 time = 0.8683531284332275
I0123 11:51:55.407395 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:51:55.407454 139878739914752 alphageometry.py:566] LM output (score=-4.876493): "k : C b e k 14 D d e d k 15 ;"
I0123 11:51:55.407490 139878739914752 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 11:51:55.407525 139878739914752 alphageometry.py:566] LM output (score=-4.936194): "k : C b d k 14 D b d d k 15 ;"
I0123 11:51:55.407553 139878739914752 alphageometry.py:567] Translation: "k = on_line k b d, on_circle k d b"

I0123 11:51:55.407582 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b d, on_circle k d b ? coll i d h"
I0123 11:51:55.407739 139878739914752 graph.py:498] 
I0123 11:51:55.407785 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b d, on_circle k d b ? coll i d h
I0123 11:51:55.825682 139878739914752 ddar.py:60] Depth 1/1000 time = 0.3878035545349121
I0123 11:51:56.281946 139878739914752 ddar.py:60] Depth 2/1000 time = 0.45616936683654785
I0123 11:51:56.742884 139878739914752 ddar.py:60] Depth 3/1000 time = 0.4608445167541504
I0123 11:51:58.002608 139878739914752 ddar.py:60] Depth 4/1000 time = 1.259399175643921
I0123 11:51:58.478402 139878739914752 ddar.py:60] Depth 5/1000 time = 0.474945068359375
I0123 11:51:59.006235 139878739914752 ddar.py:60] Depth 6/1000 time = 0.5277128219604492
I0123 11:51:59.689342 139878739914752 ddar.py:60] Depth 7/1000 time = 0.6829900741577148
I0123 11:52:00.346982 139878739914752 ddar.py:60] Depth 8/1000 time = 0.6575343608856201
I0123 11:52:01.858761 139878739914752 ddar.py:60] Depth 9/1000 time = 1.511634349822998
I0123 11:52:01.864763 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:52:01.864825 139878739914752 alphageometry.py:566] LM output (score=-4.954956): "k : C g f k 14 D g k f k 15 ;"
I0123 11:52:01.864861 139878739914752 alphageometry.py:567] Translation: "k = on_line k g f, on_bline k f g"

I0123 11:52:01.864898 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k g f, on_bline k f g ? coll i d h"
I0123 11:52:01.865036 139878739914752 graph.py:498] 
I0123 11:52:01.865083 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k g f, on_bline k f g ? coll i d h
I0123 11:52:02.290170 139878739914752 ddar.py:60] Depth 1/1000 time = 0.39463019371032715
I0123 11:52:04.086331 139878739914752 ddar.py:60] Depth 2/1000 time = 1.7960476875305176
I0123 11:52:05.971165 139878739914752 ddar.py:60] Depth 3/1000 time = 1.8846051692962646
I0123 11:52:07.790997 139878739914752 ddar.py:60] Depth 4/1000 time = 1.8193230628967285
I0123 11:52:09.631847 139878739914752 ddar.py:60] Depth 5/1000 time = 1.8399732112884521
I0123 11:52:10.716908 139878739914752 ddar.py:60] Depth 6/1000 time = 1.0848162174224854
I0123 11:52:13.645828 139878739914752 ddar.py:60] Depth 7/1000 time = 2.9286627769470215
I0123 11:52:15.757915 139878739914752 ddar.py:60] Depth 8/1000 time = 2.111818790435791
I0123 11:52:17.976433 139878739914752 ddar.py:60] Depth 9/1000 time = 2.2182557582855225
I0123 11:52:17.984360 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:52:17.984432 139878739914752 alphageometry.py:566] LM output (score=-4.960686): "k : C b c k 14 T b c e k 15 ;"
I0123 11:52:17.984471 139878739914752 alphageometry.py:567] Translation: "k = on_line k b c, on_tline k e b c"

I0123 11:52:17.984509 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b c, on_tline k e b c ? coll i d h"
I0123 11:52:17.984653 139878739914752 graph.py:498] 
I0123 11:52:17.984701 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b c, on_tline k e b c ? coll i d h
I0123 11:52:18.420562 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4037740230560303
I0123 11:52:18.947131 139878739914752 ddar.py:60] Depth 2/1000 time = 0.5264780521392822
I0123 11:52:19.587249 139878739914752 ddar.py:60] Depth 3/1000 time = 0.6400189399719238
I0123 11:52:20.228103 139878739914752 ddar.py:60] Depth 4/1000 time = 0.6405222415924072
I0123 11:52:20.888232 139878739914752 ddar.py:60] Depth 5/1000 time = 0.6599602699279785
I0123 11:52:22.358202 139878739914752 ddar.py:60] Depth 6/1000 time = 1.466581106185913
I0123 11:52:22.360707 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:52:22.360769 139878739914752 alphageometry.py:566] LM output (score=-5.028347): "k : C c j k 14 D c k j k 15 ;"
I0123 11:52:22.360806 139878739914752 alphageometry.py:567] Translation: "k = on_line k c j, on_bline k j c"

I0123 11:52:22.360843 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k c j, on_bline k j c ? coll i d h"
I0123 11:52:22.360984 139878739914752 graph.py:498] 
I0123 11:52:22.361033 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k c j, on_bline k j c ? coll i d h
I0123 11:52:22.769185 139878739914752 ddar.py:60] Depth 1/1000 time = 0.3774299621582031
I0123 11:52:23.239755 139878739914752 ddar.py:60] Depth 2/1000 time = 0.4704737663269043
I0123 11:52:23.717072 139878739914752 ddar.py:60] Depth 3/1000 time = 0.4772169589996338
I0123 11:52:24.197573 139878739914752 ddar.py:60] Depth 4/1000 time = 0.4801766872406006
I0123 11:52:25.499917 139878739914752 ddar.py:60] Depth 5/1000 time = 1.3015999794006348
I0123 11:52:26.049396 139878739914752 ddar.py:60] Depth 6/1000 time = 0.5492582321166992
I0123 11:52:26.758246 139878739914752 ddar.py:60] Depth 7/1000 time = 0.7087533473968506
I0123 11:52:27.453369 139878739914752 ddar.py:60] Depth 8/1000 time = 0.6950278282165527
I0123 11:52:28.311654 139878739914752 ddar.py:60] Depth 9/1000 time = 0.8581583499908447
I0123 11:52:28.317812 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:52:28.317868 139878739914752 alphageometry.py:566] LM output (score=-5.071081): "k : C b f k 14 D b e e k 15 ;"
I0123 11:52:28.317903 139878739914752 alphageometry.py:567] Translation: "k = on_line k b f, on_circle k e b"

I0123 11:52:28.317938 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b f, on_circle k e b ? coll i d h"
I0123 11:52:28.318093 139878739914752 graph.py:498] 
I0123 11:52:28.318140 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k b f, on_circle k e b ? coll i d h
I0123 11:52:29.803465 139878739914752 ddar.py:60] Depth 1/1000 time = 1.4535226821899414
I0123 11:52:30.555948 139878739914752 ddar.py:60] Depth 2/1000 time = 0.7522826194763184
I0123 11:52:32.103585 139878739914752 ddar.py:60] Depth 3/1000 time = 1.5474998950958252
I0123 11:52:32.852713 139878739914752 ddar.py:60] Depth 4/1000 time = 0.7487056255340576
I0123 11:52:34.433549 139878739914752 ddar.py:60] Depth 5/1000 time = 1.580643653869629
I0123 11:52:34.437905 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:52:34.437960 139878739914752 alphageometry.py:566] LM output (score=-5.078243): "k : C j f k 14 D j k f k 15 ;"
I0123 11:52:34.437997 139878739914752 alphageometry.py:567] Translation: "k = on_line k j f, on_bline k f j"

I0123 11:52:34.438035 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k j f, on_bline k f j ? coll i d h"
I0123 11:52:34.438172 139878739914752 graph.py:498] 
I0123 11:52:34.438220 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j d e, on_tline j d a c; k = on_line k j f, on_bline k f j ? coll i d h
I0123 11:52:34.847836 139878739914752 ddar.py:60] Depth 1/1000 time = 0.3796663284301758
I0123 11:52:35.319725 139878739914752 ddar.py:60] Depth 2/1000 time = 0.4718012809753418
I0123 11:52:35.795099 139878739914752 ddar.py:60] Depth 3/1000 time = 0.4752843379974365
I0123 11:52:37.078304 139878739914752 ddar.py:60] Depth 4/1000 time = 1.2828869819641113
I0123 11:52:37.575725 139878739914752 ddar.py:60] Depth 5/1000 time = 0.4971284866333008
I0123 11:52:37.579938 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:52:37.580002 139878739914752 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C a b f 04 T a b c f 05 ; g : C c d g 06 T b d b g 07 ; h : C a b h 08 T a b g h 09 ; i : C c f i 10 D c i f i 11 ? C i d h {F1} x00 j : D a c a j 12 D c d d j 13 ; x00
I0123 11:52:45.087205 139878739914752 alphageometry.py:566] LM output (score=-0.533560): "k : C d f k 14 D d k f k 15 ;"
I0123 11:52:45.087600 139878739914752 alphageometry.py:567] Translation: "k = on_line k d f, on_bline k f d"

I0123 11:52:45.087674 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j a c, on_circle j d c; k = on_line k d f, on_bline k f d ? coll i d h"
I0123 11:52:45.087826 139878739914752 graph.py:498] 
I0123 11:52:45.087884 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j a c, on_circle j d c; k = on_line k d f, on_bline k f d ? coll i d h
I0123 11:52:45.559775 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4384040832519531
I0123 11:52:47.465224 139878739914752 ddar.py:60] Depth 2/1000 time = 1.905320167541504
I0123 11:52:49.659073 139878739914752 ddar.py:60] Depth 3/1000 time = 2.1936185359954834
I0123 11:52:54.206545 139878739914752 ddar.py:60] Depth 4/1000 time = 4.54721212387085
I0123 11:52:57.941173 139878739914752 ddar.py:60] Depth 5/1000 time = 3.7343854904174805
I0123 11:53:01.742932 139878739914752 ddar.py:60] Depth 6/1000 time = 3.8015377521514893
I0123 11:53:06.494262 139878739914752 ddar.py:60] Depth 7/1000 time = 4.751103639602661
I0123 11:53:11.661886 139878739914752 ddar.py:60] Depth 8/1000 time = 5.167396306991577
I0123 11:53:16.910734 139878739914752 ddar.py:60] Depth 9/1000 time = 5.24861478805542
I0123 11:53:21.264132 139878739914752 ddar.py:60] Depth 10/1000 time = 4.353147983551025
I0123 11:53:26.479184 139878739914752 ddar.py:60] Depth 11/1000 time = 5.214463472366333
I0123 11:53:31.751729 139878739914752 ddar.py:60] Depth 12/1000 time = 5.254337787628174
I0123 11:53:36.350820 139878739914752 ddar.py:60] Depth 13/1000 time = 4.598853588104248
I0123 11:53:41.795186 139878739914752 ddar.py:60] Depth 14/1000 time = 5.444104433059692
I0123 11:53:41.797087 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:53:41.797154 139878739914752 alphageometry.py:566] LM output (score=-0.807633): "k : C c e k 14 D c k e k 15 ;"
I0123 11:53:41.797193 139878739914752 alphageometry.py:567] Translation: "k = on_line k c e, on_bline k e c"

I0123 11:53:41.797232 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j a c, on_circle j d c; k = on_line k c e, on_bline k e c ? coll i d h"
I0123 11:53:41.797376 139878739914752 graph.py:498] 
I0123 11:53:41.797424 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j a c, on_circle j d c; k = on_line k c e, on_bline k e c ? coll i d h
I0123 11:53:43.095488 139878739914752 ddar.py:60] Depth 1/1000 time = 1.2653007507324219
I0123 11:53:45.048824 139878739914752 ddar.py:60] Depth 2/1000 time = 1.9531292915344238
I0123 11:53:47.498553 139878739914752 ddar.py:60] Depth 3/1000 time = 2.4495060443878174
I0123 11:53:51.559244 139878739914752 ddar.py:60] Depth 4/1000 time = 4.060450553894043
I0123 11:53:56.499856 139878739914752 ddar.py:60] Depth 5/1000 time = 4.940383434295654
I0123 11:54:00.707009 139878739914752 ddar.py:60] Depth 6/1000 time = 4.206929445266724
I0123 11:54:05.849391 139878739914752 ddar.py:60] Depth 7/1000 time = 5.142147541046143
I0123 11:54:10.607956 139878739914752 ddar.py:60] Depth 8/1000 time = 4.75834321975708
I0123 11:54:16.232612 139878739914752 ddar.py:60] Depth 9/1000 time = 5.624423265457153
I0123 11:54:21.005310 139878739914752 ddar.py:60] Depth 10/1000 time = 4.772443532943726
I0123 11:54:26.611834 139878739914752 ddar.py:60] Depth 11/1000 time = 5.605937242507935
I0123 11:54:32.286179 139878739914752 ddar.py:60] Depth 12/1000 time = 5.656598329544067
I0123 11:54:37.334632 139878739914752 ddar.py:60] Depth 13/1000 time = 5.048220872879028
I0123 11:54:43.205996 139878739914752 ddar.py:60] Depth 14/1000 time = 5.871101379394531
I0123 11:54:49.087430 139878739914752 ddar.py:60] Depth 15/1000 time = 5.876436710357666
I0123 11:54:49.087688 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:54:49.087737 139878739914752 alphageometry.py:566] LM output (score=-0.885586): "k : C b c k 14 T b c d k 15 ;"
I0123 11:54:49.087773 139878739914752 alphageometry.py:567] Translation: "k = on_line k b c, on_tline k d b c"

I0123 11:54:49.087810 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j a c, on_circle j d c; k = on_line k b c, on_tline k d b c ? coll i d h"
I0123 11:54:49.087952 139878739914752 graph.py:498] 
I0123 11:54:49.087999 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j a c, on_circle j d c; k = on_line k b c, on_tline k d b c ? coll i d h
I0123 11:54:49.544857 139878739914752 ddar.py:60] Depth 1/1000 time = 0.42685627937316895
I0123 11:54:50.091095 139878739914752 ddar.py:60] Depth 2/1000 time = 0.5461437702178955
I0123 11:54:50.807884 139878739914752 ddar.py:60] Depth 3/1000 time = 0.7166895866394043
I0123 11:54:52.720652 139878739914752 ddar.py:60] Depth 4/1000 time = 1.912637710571289
I0123 11:54:54.709520 139878739914752 ddar.py:60] Depth 5/1000 time = 1.988664150238037
I0123 11:54:56.104740 139878739914752 ddar.py:60] Depth 6/1000 time = 1.3949987888336182
I0123 11:54:58.462302 139878739914752 ddar.py:60] Depth 7/1000 time = 2.3573789596557617
I0123 11:55:00.474583 139878739914752 ddar.py:60] Depth 8/1000 time = 2.012068271636963
I0123 11:55:03.294494 139878739914752 ddar.py:60] Depth 9/1000 time = 2.8197193145751953
I0123 11:55:06.140371 139878739914752 ddar.py:60] Depth 10/1000 time = 2.8456270694732666
I0123 11:55:08.153952 139878739914752 ddar.py:60] Depth 11/1000 time = 2.012953281402588
I0123 11:55:11.012891 139878739914752 ddar.py:60] Depth 12/1000 time = 2.8459372520446777
I0123 11:55:13.848372 139878739914752 ddar.py:60] Depth 13/1000 time = 2.8352251052856445
I0123 11:55:15.869917 139878739914752 ddar.py:60] Depth 14/1000 time = 2.0142598152160645
I0123 11:55:18.740458 139878739914752 ddar.py:60] Depth 15/1000 time = 2.8703200817108154
I0123 11:55:20.812403 139878739914752 ddar.py:60] Depth 16/1000 time = 2.0684471130371094
I0123 11:55:23.917720 139878739914752 ddar.py:60] Depth 17/1000 time = 3.1051039695739746
I0123 11:55:27.046931 139878739914752 ddar.py:60] Depth 18/1000 time = 3.128972053527832
I0123 11:55:27.050859 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:55:27.050925 139878739914752 alphageometry.py:566] LM output (score=-1.350677): "k : C a c k 14 T a c d k 15 ;"
I0123 11:55:27.050963 139878739914752 alphageometry.py:567] Translation: "k = on_line k a c, on_tline k d a c"

I0123 11:55:27.051000 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j a c, on_circle j d c; k = on_line k a c, on_tline k d a c ? coll i d h"
I0123 11:55:27.051138 139878739914752 graph.py:498] 
I0123 11:55:27.051186 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j a c, on_circle j d c; k = on_line k a c, on_tline k d a c ? coll i d h
I0123 11:55:27.526784 139878739914752 ddar.py:60] Depth 1/1000 time = 0.4452056884765625
I0123 11:55:28.164340 139878739914752 ddar.py:60] Depth 2/1000 time = 0.6374466419219971
I0123 11:55:29.110453 139878739914752 ddar.py:60] Depth 3/1000 time = 0.9460136890411377
I0123 11:55:31.410377 139878739914752 ddar.py:60] Depth 4/1000 time = 2.299788236618042
I0123 11:55:33.866647 139878739914752 ddar.py:60] Depth 5/1000 time = 2.456050157546997
I0123 11:55:35.760776 139878739914752 ddar.py:60] Depth 6/1000 time = 1.8939228057861328
I0123 11:55:38.452933 139878739914752 ddar.py:60] Depth 7/1000 time = 2.6919825077056885
I0123 11:55:41.783927 139878739914752 ddar.py:60] Depth 8/1000 time = 3.330765962600708
I0123 11:55:44.288146 139878739914752 ddar.py:60] Depth 9/1000 time = 2.5039918422698975
I0123 11:55:47.620161 139878739914752 ddar.py:60] Depth 10/1000 time = 3.331794261932373
I0123 11:55:50.969060 139878739914752 ddar.py:60] Depth 11/1000 time = 3.348285436630249
I0123 11:55:53.494201 139878739914752 ddar.py:60] Depth 12/1000 time = 2.5102648735046387
I0123 11:55:56.814038 139878739914752 ddar.py:60] Depth 13/1000 time = 3.3164520263671875
I0123 11:56:00.147104 139878739914752 ddar.py:60] Depth 14/1000 time = 3.3328230381011963
I0123 11:56:03.548241 139878739914752 ddar.py:60] Depth 15/1000 time = 3.3900034427642822
I0123 11:56:06.374391 139878739914752 ddar.py:60] Depth 16/1000 time = 2.8259191513061523
I0123 11:56:10.014511 139878739914752 ddar.py:60] Depth 17/1000 time = 3.639861583709717
I0123 11:56:10.018933 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:56:10.018990 139878739914752 alphageometry.py:566] LM output (score=-1.696083): "k : C b f k 14 D b k f k 15 ;"
I0123 11:56:10.019026 139878739914752 alphageometry.py:567] Translation: "k = on_line k b f, on_bline k f b"

I0123 11:56:10.019064 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j a c, on_circle j d c; k = on_line k b f, on_bline k f b ? coll i d h"
I0123 11:56:10.019204 139878739914752 graph.py:498] 
I0123 11:56:10.019251 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j a c, on_circle j d c; k = on_line k b f, on_bline k f b ? coll i d h
I0123 11:56:11.526018 139878739914752 ddar.py:60] Depth 1/1000 time = 1.473360538482666
I0123 11:56:12.246099 139878739914752 ddar.py:60] Depth 2/1000 time = 0.7198977470397949
I0123 11:56:14.016475 139878739914752 ddar.py:60] Depth 3/1000 time = 1.7702414989471436
I0123 11:56:16.157637 139878739914752 ddar.py:60] Depth 4/1000 time = 2.1409080028533936
I0123 11:56:18.356115 139878739914752 ddar.py:60] Depth 5/1000 time = 2.198249340057373
I0123 11:56:20.628595 139878739914752 ddar.py:60] Depth 6/1000 time = 2.2722537517547607
I0123 11:56:22.978650 139878739914752 ddar.py:60] Depth 7/1000 time = 2.349830389022827
I0123 11:56:25.634311 139878739914752 ddar.py:60] Depth 8/1000 time = 2.655433416366577
I0123 11:56:29.120985 139878739914752 ddar.py:60] Depth 9/1000 time = 3.486443281173706
I0123 11:56:31.777217 139878739914752 ddar.py:60] Depth 10/1000 time = 2.655991554260254
I0123 11:56:34.465398 139878739914752 ddar.py:60] Depth 11/1000 time = 2.68760347366333
I0123 11:56:37.184380 139878739914752 ddar.py:60] Depth 12/1000 time = 2.7049920558929443
I0123 11:56:40.939670 139878739914752 ddar.py:60] Depth 13/1000 time = 3.755070686340332
I0123 11:56:43.858214 139878739914752 ddar.py:60] Depth 14/1000 time = 2.918302297592163
I0123 11:56:43.861582 139878739914752 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:56:43.861658 139878739914752 alphageometry.py:566] LM output (score=-1.759599): "k : C b g k 14 D b k g k 15 ;"
I0123 11:56:43.861698 139878739914752 alphageometry.py:567] Translation: "k = on_line k b g, on_bline k g b"

I0123 11:56:43.861739 139878739914752 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j a c, on_circle j d c; k = on_line k b g, on_bline k g b ? coll i d h"
I0123 11:56:43.861884 139878739914752 graph.py:498] 
I0123 11:56:43.861933 139878739914752 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = foot f c b a; g = lc_tangent g b d, on_line g c d; h = foot h g b a; i = midpoint i c f; j = on_circle j a c, on_circle j d c; k = on_line k b g, on_bline k g b ? coll i d h
I0123 11:56:44.324120 139878739914752 ddar.py:60] Depth 1/1000 time = 0.42967891693115234
I0123 11:56:46.160095 139878739914752 ddar.py:60] Depth 2/1000 time = 1.8358502388000488
I0123 11:56:48.303579 139878739914752 ddar.py:60] Depth 3/1000 time = 2.1432504653930664
I0123 11:56:52.783325 139878739914752 ddar.py:60] Depth 4/1000 time = 4.479483127593994
I0123 11:56:56.447799 139878739914752 ddar.py:60] Depth 5/1000 time = 3.6642472743988037
I0123 11:57:00.269920 139878739914752 ddar.py:60] Depth 6/1000 time = 3.821897029876709
I0123 11:57:04.260039 139878739914752 ddar.py:60] Depth 7/1000 time = 3.9898955821990967
I0123 11:57:09.643784 139878739914752 ddar.py:60] Depth 8/1000 time = 5.383519649505615
I0123 11:57:15.209254 139878739914752 ddar.py:60] Depth 9/1000 time = 5.56524395942688
I0123 11:57:19.926837 139878739914752 ddar.py:60] Depth 10/1000 time = 4.717318534851074
I0123 11:57:25.507607 139878739914752 ddar.py:60] Depth 11/1000 time = 5.580156564712524
I0123 11:57:31.234619 139878739914752 ddar.py:60] Depth 12/1000 time = 5.712836265563965
I0123 11:57:36.343685 139878739914752 ddar.py:60] Depth 13/1000 time = 5.108830451965332
I0123 11:57:36.368593 139878739914752 alphageometry.py:191] 
==========================
 * From theorem premises:
A B C D F G H I : Points
∠DAC = ∠BAD [00]
∠BCD = ∠DCA [01]
A,B,F are collinear [02]
BA ⟂ FC [03]
BG ⟂ BD [04]
D,G,C are collinear [05]
A,B,H are collinear [06]
BA ⟂ HG [07]
IC = IF [08]
I,C,F are collinear [09]

 * Auxiliary Constructions:
E J K : Points
DE ⟂ AB [10]
AJ = AC [11]
DJ = DC [12]
KG = KB [13]
K,B,G are collinear [14]

 * Proof steps:
001. I,C,F are collinear [09] & IC = IF [08] ⇒  I is midpoint of CF [15]
002. K,B,G are collinear [14] & KG = KB [13] ⇒  K is midpoint of GB [16]
003. I is midpoint of CF [15] & K is midpoint of GB [16] ⇒  IC:CF = KB:BG [17]
004. A,H,B are collinear [06] & GH ⟂ AB [07] ⇒  GH ⟂ HB [18]
005. GH ⟂ HB [18] & K is midpoint of GB [16] ⇒  BK = HK [19]
006. GH ⟂ HB [18] & K is midpoint of GB [16] ⇒  GK = HK [20]
007. IC:CF = KB:BG [17] & IC = IF [08] & BK = HK [19] ⇒  IF:CF = HK:BG [21]
008. AJ = AC [11] & DJ = DC [12] (SSS)⇒  ∠DAC = ∠JAD [22]
009. AJ = AC [11] & DJ = DC [12] (SSS)⇒  ∠(AC-DJ) = ∠(CD-AJ) [23]
010. A,H,B are collinear [06] & A,B,F are collinear [02] & ∠DAC = ∠BAD [00] & ∠DAC = ∠JAD [22] ⇒  ∠JAD = ∠(HF-AD) [24]
011. ∠JAD = ∠(HF-AD) [24] ⇒  AJ ∥ HF [25]
012. A,B,H are collinear [06] & AJ ∥ HF [25] & A,B,F are collinear [02] ⇒  AJ ∥ AH [26]
013. AJ ∥ AH [26] ⇒  A,H,J are collinear [27]
014. K,G,B are collinear [14] & BD ⟂ BG [04] ⇒  DB ⟂ KB [28]
015. I,C,F are collinear [09] & A,H,B are collinear [06] & A,B,F are collinear [02] & CF ⟂ AB [03] ⇒  IC ⟂ HF [29]
016. DB ⟂ KB [28] & IC ⟂ HF [29] ⇒  ∠(DB-HF) = ∠(KB-IC) [30]
017. A,H,J are collinear [27] & A,B,H are collinear [06] & A,B,F are collinear [02] & ∠(DB-HF) = ∠(KB-IC) [30] & K,B,G are collinear [14] & I,C,F are collinear [09] ⇒  ∠CFJ = ∠GBD [31]
018. D,G,C are collinear [05] & ∠BCD = ∠DCA [01] ⇒  ∠(BC-DG) = ∠(DG-AC) [32]
019. D,G,C are collinear [05] & ∠(CD-AJ) = ∠(AC-DJ) [23] ⇒  ∠(DG-AJ) = ∠(AC-DJ) [33]
020. ∠(BC-DG) = ∠(DG-AC) [32] & ∠(DG-AJ) = ∠(AC-DJ) [33] ⇒  ∠(BC-AJ) = ∠GDJ [34]
021. A,H,J are collinear [27] & A,B,H are collinear [06] & ∠(BC-AJ) = ∠GDJ [34] & D,G,C are collinear [05] & AJ ∥ HF [25] & A,B,F are collinear [02] ⇒  ∠BCD = ∠BJD [35]
022. ∠BCD = ∠BJD [35] ⇒  D,B,C,J are concyclic [36]
023. D,B,C,J are concyclic [36] ⇒  ∠DBJ = ∠DCJ [37]
024. A,H,J are collinear [27] & A,B,H are collinear [06] & A,B,F are collinear [02] & D,G,C are collinear [05] & ∠DBJ = ∠DCJ [37] ⇒  ∠CJF = ∠GDB [38]
025. ∠CFJ = ∠GBD [31] & ∠CJF = ∠GDB [38] (Similar Triangles)⇒  CF:CJ = BG:DG [39]
026. K,G,B are collinear [14] & ∠(DB-HF) = ∠(KB-IC) [30] & A,H,B are collinear [06] & A,B,F are collinear [02] & I,C,F are collinear [09] & BA ⟂ FC [03] & DE ⟂ AB [10] & ∠DBJ = ∠DCJ [37] & A,H,J are collinear [27] & BA ⟂ HG [07] ⇒  ∠DCJ = ∠KGH [40]
027. GK = HK [20] ⇒  ∠KHG = ∠HGK [41]
028. DJ = DC [12] ⇒  ∠DJC = ∠JCD [42]
029. ∠KHG = ∠HGK [41] & K,B,G are collinear [14] & BA ⟂ HG [07] & DE ⟂ AB [10] & ∠(DB-HF) = ∠(KB-IC) [30] & A,H,B are collinear [06] & A,B,F are collinear [02] & I,C,F are collinear [09] & BA ⟂ FC [03] & ∠DBJ = ∠DCJ [37] & A,H,J are collinear [27] & ∠DJC = ∠JCD [42] ⇒  ∠DJC = ∠KHG [43]
030. ∠DCJ = ∠KGH [40] & ∠DJC = ∠KHG [43] (Similar Triangles)⇒  CD:CJ = GK:GH [44]
031. CD:CJ = GK:GH [44] & GK = HK [20] ⇒  DC:CJ = HK:HG [45]
032. IC = IF [08] & KG = KB [13] & IF:CF = HK:BG [21] & CF:CJ = BG:DG [39] & DC:CJ = HK:HG [45] (Ratio chase)⇒  IF:DC = HG:DG [46]
033. IF:DC = HG:DG [46] & IC = IF [08] ⇒  CI:CD = GH:GD [47]
034. I,C,F are collinear [09] & D,G,C are collinear [05] & BA ⟂ FC [03] & DE ⟂ AB [10] & BA ⟂ HG [07] ⇒  ∠ICD = ∠HGD [48]
035. CI:CD = GH:GD [47] & ∠ICD = ∠HGD [48] (Similar Triangles)⇒  ∠CID = ∠GHD [49]
036. ∠CID = ∠GHD [49] & I,C,F are collinear [09] & BA ⟂ FC [03] & DE ⟂ AB [10] & BA ⟂ HG [07] ⇒  DI ∥ DH [50]
037. DI ∥ DH [50] ⇒  H,D,I are collinear
==========================

I0123 11:57:36.368707 139878739914752 alphageometry.py:582] Solved.
