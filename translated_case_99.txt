I0123 14:52:54.566422 140197953007616 inference_utils.py:69] Parsing gin configuration.
I0123 14:52:54.566534 140197953007616 inference_utils.py:71] Added Gin search path meliad_lib/meliad/transformer/configs
I0123 14:52:54.566761 140197953007616 inference_utils.py:74] Loading Gin config file base_htrans.gin
I0123 14:52:54.566796 140197953007616 inference_utils.py:74] Loading Gin config file size/medium_150M.gin
I0123 14:52:54.566825 140197953007616 inference_utils.py:74] Loading Gin config file options/positions_t5.gin
I0123 14:52:54.566854 140197953007616 inference_utils.py:74] Loading Gin config file options/lr_cosine_decay.gin
I0123 14:52:54.566885 140197953007616 inference_utils.py:74] Loading Gin config file options/seq_1024_nocache.gin
I0123 14:52:54.566914 140197953007616 inference_utils.py:74] Loading Gin config file geometry_150M_generate.gin
I0123 14:52:54.566941 140197953007616 inference_utils.py:76] Overriding Gin param DecoderOnlyLanguageModelGenerate.output_token_losses=True
I0123 14:52:54.566972 140197953007616 inference_utils.py:76] Overriding Gin param TransformerTaskConfig.batch_size=32
I0123 14:52:54.566999 140197953007616 inference_utils.py:76] Overriding Gin param TransformerTaskConfig.sequence_length=128
I0123 14:52:54.567027 140197953007616 inference_utils.py:76] Overriding Gin param Trainer.restore_state_variables=False
I0123 14:52:54.567075 140197953007616 resource_reader.py:50] system_path_file_exists:base_htrans.gin
E0123 14:52:54.567216 140197953007616 resource_reader.py:55] Path not found: base_htrans.gin
I0123 14:52:54.567437 140197953007616 resource_reader.py:50] system_path_file_exists:trainer_configuration.gin
E0123 14:52:54.567547 140197953007616 resource_reader.py:55] Path not found: trainer_configuration.gin
I0123 14:52:54.573952 140197953007616 resource_reader.py:50] system_path_file_exists:size/medium_150M.gin
E0123 14:52:54.574079 140197953007616 resource_reader.py:55] Path not found: size/medium_150M.gin
I0123 14:52:54.574401 140197953007616 resource_reader.py:50] system_path_file_exists:options/positions_t5.gin
E0123 14:52:54.574507 140197953007616 resource_reader.py:55] Path not found: options/positions_t5.gin
I0123 14:52:54.574785 140197953007616 resource_reader.py:50] system_path_file_exists:options/lr_cosine_decay.gin
E0123 14:52:54.574886 140197953007616 resource_reader.py:55] Path not found: options/lr_cosine_decay.gin
I0123 14:52:54.575294 140197953007616 resource_reader.py:50] system_path_file_exists:options/seq_1024_nocache.gin
E0123 14:52:54.575395 140197953007616 resource_reader.py:55] Path not found: options/seq_1024_nocache.gin
I0123 14:52:54.579265 140197953007616 training_loop.py:334] ==== Training loop: initializing model ====
I0123 14:52:54.678307 140197953007616 xla_bridge.py:660] Unable to initialize backend 'rocm': NOT_FOUND: Could not find registered platform with name: "rocm". Available platform names are: CUDA
I0123 14:52:54.679056 140197953007616 xla_bridge.py:660] Unable to initialize backend 'tpu': INTERNAL: Failed to open libtpu.so: libtpu.so: cannot open shared object file: No such file or directory
I0123 14:52:54.685768 140197953007616 training_loop.py:335] Process 0 of 1
I0123 14:52:54.685823 140197953007616 training_loop.py:336] Local device count = 1
I0123 14:52:54.685863 140197953007616 training_loop.py:337] Number of replicas = 1
I0123 14:52:54.685894 140197953007616 training_loop.py:339] Using random number seed 42
I0123 14:52:55.182799 140197953007616 training_loop.py:359] Initializing the model.
I0123 14:52:55.559771 140197953007616 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.560066 140197953007616 decoder_stack.py:316] dstack: scanning over 1 windows.
I0123 14:52:55.560174 140197953007616 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:52:55.560253 140197953007616 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:52:55.560329 140197953007616 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:52:55.560410 140197953007616 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:52:55.560482 140197953007616 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:52:55.560554 140197953007616 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:52:55.560625 140197953007616 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:52:55.560695 140197953007616 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:52:55.560766 140197953007616 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:52:55.560836 140197953007616 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:52:55.560905 140197953007616 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:52:55.560974 140197953007616 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:52:55.561012 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:55.561056 140197953007616 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 14:52:55.561169 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:55.561207 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:55.561236 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:55.563289 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.568701 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:55.579501 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.579778 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:55.584172 140197953007616 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:52:55.594871 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:55.594928 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:55.594965 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:55.594998 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.595062 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.596258 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.596336 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.597069 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.599566 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.605438 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.607176 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.607261 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:55.607297 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:55.607358 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.607486 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:55.607821 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:55.607868 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:55.609798 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.609899 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:55.612848 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.612928 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:55.613430 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:55.624032 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:55.633204 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.633305 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:55.633613 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.633706 140197953007616 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 14:52:55.633826 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:55.633867 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:55.633899 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:55.635804 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.638398 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:55.644191 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.644461 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:55.647233 140197953007616 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:52:55.651162 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:55.651220 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:55.651257 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:55.651289 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.651356 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.651937 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.652014 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.652395 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.653182 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.655833 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.656470 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.656551 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:55.656587 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:55.656650 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.656782 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:55.657125 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:55.657170 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:55.659166 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.659261 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:55.661850 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.661930 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:55.662372 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:55.664762 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:55.666742 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.666837 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:55.667139 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.667220 140197953007616 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 14:52:55.667333 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:55.667373 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:55.667407 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:55.669357 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.671826 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:55.677974 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.678243 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:55.680969 140197953007616 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:52:55.684906 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:55.684963 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:55.685000 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:55.685032 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.685094 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.685674 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.685751 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.686119 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.686909 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.689476 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.690154 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.690231 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:55.690266 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:55.690326 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.690454 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:55.690788 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:55.690831 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:55.692794 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.692886 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:55.695492 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.695579 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:55.696087 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:55.698432 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:55.700390 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.700485 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:55.700791 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.700873 140197953007616 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 14:52:55.700985 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:55.701025 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:55.701056 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:55.703013 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.705466 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:55.711222 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.711495 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:55.714211 140197953007616 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:52:55.718097 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:55.718154 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:55.718191 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:55.718222 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.718285 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.718863 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.718940 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.719305 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.720087 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.722707 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.723330 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.723406 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:55.723441 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:55.723506 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.723635 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:55.723988 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:55.724032 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:55.725996 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.726090 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:55.728731 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.728819 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:55.729265 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:55.731584 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:55.733530 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.733625 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:55.733944 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.734026 140197953007616 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 14:52:55.734138 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:55.734177 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:55.734209 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:55.736172 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.738627 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:55.744414 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.744679 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:55.748203 140197953007616 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:52:55.752278 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:55.752339 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:55.752381 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:55.752414 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.752486 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.753073 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.753148 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.753516 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.754328 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.757301 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.757936 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.758013 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:55.758048 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:55.758108 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.758243 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:55.758573 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:55.758616 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:55.760562 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.760660 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:55.763285 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.763365 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:55.763816 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:55.766174 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:55.768195 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.768293 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:55.768597 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.768679 140197953007616 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 14:52:55.768791 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:55.768831 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:55.768863 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:55.770772 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.773230 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:55.779001 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.779263 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:55.782025 140197953007616 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:52:55.785856 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:55.785913 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:55.785950 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:55.785981 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.786043 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.786656 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.786733 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.787099 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.787910 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.790487 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.791119 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.791196 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:55.791230 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:55.791292 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.791420 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:55.791752 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:55.791795 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:55.793758 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.793852 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:55.796486 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.796564 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:55.797003 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:55.799387 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:55.801351 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.801448 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:55.801749 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.801831 140197953007616 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 14:52:55.801944 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:55.801983 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:55.802015 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:55.803908 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.806427 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:55.812146 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.812425 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:55.815120 140197953007616 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:52:55.819037 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:55.819093 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:55.819130 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:55.819161 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.819223 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.819789 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.819867 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.820235 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.821026 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.823604 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.824238 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.824314 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:55.824349 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:55.824410 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.824539 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:55.824866 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:55.824909 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:55.826942 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.827038 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:55.829626 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.829715 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:55.830157 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:55.832860 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:55.834837 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.834940 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:55.835242 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.835322 140197953007616 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 14:52:55.835435 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:55.835474 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:55.835506 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:55.979099 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.982293 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:55.988367 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.988673 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:55.991481 140197953007616 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:52:55.995514 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:55.995574 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:55.995613 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:55.995647 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.995717 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.996347 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.996424 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.996799 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:55.997598 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.000361 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.001038 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.001121 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:56.001159 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:56.001225 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.001359 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:56.001721 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:56.001767 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.003715 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.003810 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.006484 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.006565 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:56.007019 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:56.009383 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.011351 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.011458 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.011764 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.011850 140197953007616 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 14:52:56.011965 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:56.012006 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:56.012039 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:56.014060 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.016519 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:56.022317 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.022591 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:56.025352 140197953007616 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:52:56.029210 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:56.029267 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:56.029304 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:56.029336 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.029398 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.029983 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.030060 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.030428 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.031219 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.033840 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.034472 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.034548 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:56.034583 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:56.034643 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.034773 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:56.035098 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:56.035141 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.037083 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.037177 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.039833 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.039914 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:56.040353 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:56.042716 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.044914 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.045010 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.045309 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.045397 140197953007616 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 14:52:56.045513 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:56.045553 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:56.045585 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:56.047478 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.049994 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:56.055690 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.055976 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:56.059092 140197953007616 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:52:56.062924 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:56.062980 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:56.063016 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:56.063048 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.063112 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.063724 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.063800 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.064167 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.064964 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.067507 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.068140 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.068222 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:56.068257 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:56.068317 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.068446 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:56.068777 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:56.068821 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.070766 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.070860 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.073469 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.073553 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:56.074002 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:56.076372 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.078308 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.078410 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.078707 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.078795 140197953007616 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 14:52:56.078908 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:56.078947 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:56.078978 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:56.080853 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.083345 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:56.088994 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.089259 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:56.091932 140197953007616 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:52:56.095782 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:56.095839 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:56.095875 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:56.095908 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.095971 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.096539 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.096614 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.096973 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.097786 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.100318 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.100947 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.101024 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:56.101059 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:56.101119 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.101251 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:56.101578 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:56.101621 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.103617 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.103712 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.106586 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.106666 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:56.107108 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:56.109488 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.111440 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.111542 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.111844 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.111926 140197953007616 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 14:52:56.112047 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:56.112087 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:56.112119 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:56.114073 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.116509 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:56.122280 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.122550 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:56.125237 140197953007616 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:52:56.129138 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:56.129194 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:56.129231 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:56.129264 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.129329 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.129912 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.129990 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.130358 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.131148 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.133693 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.134684 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.134763 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:56.134799 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:56.134861 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.134994 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:56.135328 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:56.135372 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.137329 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.137424 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.140009 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.140090 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:56.140593 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:56.142888 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.144843 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.144938 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.145238 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.145529 140197953007616 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:52:56.145600 140197953007616 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:52:56.145676 140197953007616 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:52:56.145738 140197953007616 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:52:56.145794 140197953007616 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:52:56.145848 140197953007616 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:52:56.145903 140197953007616 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:52:56.145958 140197953007616 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:52:56.146013 140197953007616 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:52:56.146066 140197953007616 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:52:56.146119 140197953007616 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:52:56.146173 140197953007616 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:52:56.146210 140197953007616 decoder_stack.py:344] dstack: Final layernorm.
I0123 14:52:56.149898 140197953007616 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:52:56.198975 140197953007616 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.199061 140197953007616 decoder_stack.py:333] dstack: autoregressive generator.
I0123 14:52:56.199116 140197953007616 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 14:52:56.199223 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:56.199261 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:56.199293 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:56.199361 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.201880 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:56.207561 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.207827 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:56.210542 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:52:56.227590 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:56.227647 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:56.227683 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:56.227716 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.227778 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.228929 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.229009 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.229748 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.231799 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.236758 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.238116 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.238203 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:56.238240 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:56.238303 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.238435 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:56.238547 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:56.238586 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.240530 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.240626 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.243121 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.243202 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:56.243313 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:56.245603 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.247622 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.247720 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.248017 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.248099 140197953007616 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 14:52:56.248211 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:56.248250 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:56.248281 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:56.248347 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.250660 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:56.256274 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.256539 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:56.259299 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:52:56.272721 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:56.272779 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:56.272816 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:56.272848 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.272911 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.273481 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.273556 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.273930 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.274637 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.277206 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.277836 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.277914 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:56.277954 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:56.278014 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.278146 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:56.278261 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:56.278300 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.280267 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.280361 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.282828 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.282908 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:56.283015 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:56.285280 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.287272 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.287369 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.287668 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.287749 140197953007616 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 14:52:56.287859 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:56.287899 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:56.287931 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:56.287995 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.290314 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:56.295872 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.296139 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:56.298897 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:52:56.311832 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:56.311889 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:56.311925 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:56.311956 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.312018 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.312574 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.312653 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.313013 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.313722 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.316252 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.316877 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.316953 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:56.316987 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:56.317053 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.317183 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:56.317293 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:56.317331 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.319294 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.319389 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.321885 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.321965 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:56.322073 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:56.324322 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.326304 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.326401 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.326696 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.326777 140197953007616 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 14:52:56.326888 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:56.326926 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:56.326957 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:56.327022 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.329328 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:56.334946 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.335212 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:56.337990 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:52:56.351060 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:56.351117 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:56.351153 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:56.351185 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.351247 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.351811 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.351887 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.352250 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.352950 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.355511 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.356144 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.356220 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:56.356255 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:56.356314 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.356450 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:56.356562 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:56.356600 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.358616 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.358711 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.361179 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.361258 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:56.361367 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:56.363665 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.365581 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.365684 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.365987 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.366069 140197953007616 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 14:52:56.366179 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:56.366219 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:56.366250 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:56.366316 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.368982 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:56.374593 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.374863 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:56.377550 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:52:56.390534 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:56.390591 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:56.390627 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:56.390658 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.390720 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.391281 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.391357 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.391721 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.392428 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.395039 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.395669 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.395746 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:56.395782 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:56.395841 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.395977 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:56.396089 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:56.396126 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.398056 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.398150 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.400639 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.400717 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:56.400826 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:56.408173 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.410207 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.410318 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.410624 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.410713 140197953007616 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 14:52:56.410828 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:56.410869 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:56.410901 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:56.410971 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.413372 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:56.419010 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.419284 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:56.422107 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:52:56.435334 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:56.435394 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:56.435433 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:56.435466 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.435529 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.436131 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.436211 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.436588 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.437304 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.439898 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.440532 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.440608 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:56.440642 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:56.440701 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.440831 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:56.440950 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:56.440990 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.442986 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.443082 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.445551 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.445630 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:56.445750 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:56.448041 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.449960 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.450057 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.450350 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.450430 140197953007616 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 14:52:56.450539 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:56.450577 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:56.450609 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:56.450674 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.452986 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:56.458683 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.458948 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:56.461608 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:52:56.474626 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:56.474682 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:56.474718 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:56.474750 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.474815 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.475375 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.475450 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.475818 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.476522 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.479087 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.480087 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.480167 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:56.480202 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:56.480262 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.480398 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:56.480509 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:56.480552 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.482492 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.482589 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.485043 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.485122 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:56.485232 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:56.487539 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.489531 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.489627 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.489929 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.490010 140197953007616 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 14:52:56.490120 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:56.490159 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:56.490191 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:56.490255 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.492553 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:56.498183 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.498468 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:56.501215 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:52:56.514201 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:56.514258 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:56.514294 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:56.514326 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.514388 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.514996 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.515072 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.515440 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.516148 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.518685 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.519328 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.519405 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:56.519440 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:56.519507 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.519638 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:56.519749 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:56.519795 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.521747 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.521843 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.524373 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.524453 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:56.524560 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:56.526866 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.528777 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.528872 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.529165 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.529246 140197953007616 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 14:52:56.529356 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:56.529395 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:56.529427 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:56.529494 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.531816 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:56.537497 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.537768 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:56.540449 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:52:56.553427 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:56.553485 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:56.553521 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:56.553552 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.553613 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.554188 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.554263 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.554625 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.555327 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.557893 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.558576 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.558655 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:56.558690 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:56.558752 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.558884 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:56.558994 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:56.559032 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.560963 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.561057 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.563603 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.563683 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:56.563792 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:56.566083 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.568123 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.568220 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.568515 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.568598 140197953007616 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 14:52:56.568709 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:56.568748 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:56.568779 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:56.568844 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.571131 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:56.576689 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.576953 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:56.579730 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:52:56.593018 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:56.593075 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:56.593110 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:56.593141 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.593201 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.593811 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.593888 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.594253 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.594950 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.597487 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.598118 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.598196 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:56.598231 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:56.598290 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.598420 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:56.598529 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:56.598567 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.600491 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.600590 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.603106 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.603186 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:56.603296 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:56.605590 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.607499 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.607596 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.607889 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.607969 140197953007616 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 14:52:56.608079 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:56.608118 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:56.608150 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:56.608215 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.610504 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:56.616117 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.616378 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:56.619064 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:52:56.632134 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:56.632189 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:56.632225 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:56.632255 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.632316 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.632880 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.632954 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.633312 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.634025 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.636572 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.637251 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.637328 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:56.637363 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:56.637422 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.637554 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:56.637675 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:56.637722 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.639672 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.639771 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.642267 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.642346 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:56.642456 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:56.644715 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.646687 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.646783 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.647076 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.647158 140197953007616 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 14:52:56.647268 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:56.647308 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:56.647339 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:56.647403 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.649699 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:56.655212 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.655474 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:56.658215 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:52:56.671055 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:56.671111 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:56.671148 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:56.671179 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.671239 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.671807 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.671884 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.672251 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.672998 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.675553 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.676182 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.676258 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:56.676293 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:56.676353 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.676485 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:56.676598 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:56.676637 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.678542 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.678636 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.681115 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.681194 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:56.681303 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:56.683616 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.685545 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.685646 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.685940 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.686030 140197953007616 decoder_stack.py:344] dstack: Final layernorm.
I0123 14:52:56.688991 140197953007616 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:52:56.746030 140197953007616 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.746116 140197953007616 decoder_stack.py:333] dstack: autoregressive generator.
I0123 14:52:56.746171 140197953007616 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 14:52:56.746275 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:56.746314 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:56.746345 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:56.746408 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.749121 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:56.754668 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.754933 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:56.757569 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:52:56.770216 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:56.770272 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:56.770308 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:56.770340 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.770405 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.770969 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.771044 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.771402 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.772087 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.774658 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.775275 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.775352 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:56.775387 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:56.775446 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.775574 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:56.775691 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:56.775730 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.777618 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.777719 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.780164 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.780243 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:56.780354 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:56.782642 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.784539 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.784635 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.784927 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.785009 140197953007616 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 14:52:56.785119 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:56.785159 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:56.785192 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:56.785258 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.787560 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:56.793033 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.793294 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:56.795996 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:52:56.808552 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:56.808608 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:56.808644 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:56.808676 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.808737 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.809295 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.809371 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.809745 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.810437 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.812983 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.813604 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.813689 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:56.813725 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:56.813786 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.813918 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:56.814028 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:56.814074 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.815963 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.816057 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.818519 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.818599 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:56.818709 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:56.820997 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.822884 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.822979 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.823269 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.823350 140197953007616 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 14:52:56.823459 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:56.823498 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:56.823529 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:56.823593 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.825879 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:56.831352 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.831614 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:56.834326 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:52:56.846842 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:56.846899 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:56.846935 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:56.846966 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.847028 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.847580 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.847655 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.848014 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.848699 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.851272 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.851897 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.851974 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:56.852010 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:56.852070 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.852197 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:56.852306 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:56.852344 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.854226 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.854321 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.856766 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.856844 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:56.856954 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:56.859730 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.861812 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.861914 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.862217 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.862305 140197953007616 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 14:52:56.862418 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:56.862458 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:56.862490 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:56.862556 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.864838 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:56.870342 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.870617 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:56.873356 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:52:56.886129 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:56.886188 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:56.886228 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:56.886277 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.886344 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.886926 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.887004 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.887391 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.888096 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.890711 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.891355 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.891433 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:56.891467 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:56.891526 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.891653 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:56.891762 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:56.891801 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.893718 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.893811 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.896311 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.896388 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:56.896495 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:56.898811 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.900685 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.900778 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.901069 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.901148 140197953007616 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 14:52:56.901256 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:56.901293 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:56.901323 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:56.901386 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.903716 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:56.909248 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.909507 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:56.912307 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:52:56.925086 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:56.925141 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:56.925177 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:56.925208 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.925272 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.925841 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.925919 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.926279 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.926977 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.929565 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.930193 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.930269 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:56.930301 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:56.930360 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.930487 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:56.930594 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:56.930632 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.932540 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.932638 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.935125 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.935204 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:56.935313 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:56.937611 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.939512 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.939607 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.939907 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.939991 140197953007616 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 14:52:56.940103 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:56.940142 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:56.940174 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:56.940240 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.942614 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:56.948113 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.948370 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:56.951102 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:52:56.963949 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:56.964003 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:56.964037 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:56.964068 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.964131 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.964688 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.964762 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.965120 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.965822 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.968407 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.969019 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.969093 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:56.969127 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:56.969186 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.969310 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:56.969418 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:56.969455 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.971355 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.971453 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.973890 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.973968 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:56.974074 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:56.976769 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:56.978670 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.978764 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:56.979055 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.979135 140197953007616 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 14:52:56.979243 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:56.979280 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:56.979310 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:56.979373 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.981648 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:56.987162 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:56.987425 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:56.990196 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:52:57.002978 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:57.003033 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:57.003068 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:57.003099 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.003159 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.003720 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.003794 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.004161 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.004862 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.007449 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.008080 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.008155 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:57.008189 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:57.008247 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.008373 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:57.008480 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:57.008516 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:57.010431 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.010523 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:57.012955 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.013033 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:57.013141 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:57.015453 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:57.017308 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.017400 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:57.017697 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.017777 140197953007616 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 14:52:57.017885 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:57.017923 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:57.017953 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:57.018016 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.020263 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:57.025744 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.026003 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:57.028728 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:52:57.041436 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:57.041490 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:57.041525 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:57.041555 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.041616 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.042185 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.042260 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.042622 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.043314 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.045911 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.046536 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.046612 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:57.046647 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:57.046706 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.046832 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:57.046937 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:57.046974 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:57.048865 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.048956 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:57.051399 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.051482 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:57.051591 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:57.053909 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:57.055786 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.055880 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:57.056170 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.056250 140197953007616 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 14:52:57.056357 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:57.056395 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:57.056426 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:57.056488 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.058778 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:57.064414 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.064679 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:57.067423 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:52:57.080095 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:57.080150 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:57.080184 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:57.080214 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.080275 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.080834 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.080908 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.081273 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.081973 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.084576 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.085194 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.085269 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:57.085304 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:57.085362 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.085488 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:57.085596 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:57.085633 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:57.087598 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.087689 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:57.090138 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.090220 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:57.090329 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:57.093024 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:57.094918 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.095012 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:57.095301 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.095382 140197953007616 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 14:52:57.095489 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:57.095528 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:57.095558 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:57.095621 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.097896 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:57.103400 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.103661 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:57.106387 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:52:57.119084 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:57.119139 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:57.119174 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:57.119204 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.119264 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.119832 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.119907 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.120266 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.120961 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.123553 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.124182 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.124257 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:57.124291 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:57.124349 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.124479 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:57.124585 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:57.124625 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:57.127081 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.127176 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:57.129586 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.129669 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:57.129794 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:57.132064 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:57.133939 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.134032 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:57.134326 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.134407 140197953007616 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 14:52:57.134514 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:57.134551 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:57.134581 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:57.134644 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.136907 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:57.142386 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.142643 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:57.145343 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:52:57.158009 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:57.158066 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:57.158101 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:57.158130 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.158192 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.158759 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.158832 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.159189 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.159881 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.162461 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.163073 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.163146 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:57.163180 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:57.163236 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.163361 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:57.163471 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:57.163507 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:57.165388 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.165480 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:57.167915 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.167993 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:57.168100 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:57.170435 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:57.172303 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.172398 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:57.172690 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.172770 140197953007616 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 14:52:57.172878 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:52:57.172915 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:52:57.172946 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:52:57.173009 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.175289 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:52:57.180847 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.181105 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:52:57.183852 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:52:57.196749 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:52:57.196803 140197953007616 attention.py:418] Single window, no scan.
I0123 14:52:57.196842 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:52:57.196874 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.196935 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.197498 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.197573 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.197946 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.198652 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.201215 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.201846 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.201923 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:52:57.201957 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:52:57.202015 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.202146 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:52:57.202257 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:52:57.202294 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:57.204183 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.204273 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:57.206724 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.206800 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:52:57.206907 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:52:57.209588 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:52:57.211495 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.211589 140197953007616 nn_components.py:261] mlp: residual
I0123 14:52:57.211879 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:52:57.211963 140197953007616 decoder_stack.py:344] dstack: Final layernorm.
I0123 14:52:57.214828 140197953007616 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:01.642246 140197953007616 optimizer_config.py:74] Using Flax Adafactor Optimizer. lr=1.000000, b1=0.900000
I0123 14:53:02.129877 140197953007616 training_loop.py:409] No working directory specified.
I0123 14:53:02.129997 140197953007616 training_loop.py:431] Loading pre-trained model from ag_ckpt_vocab:
I0123 14:53:02.130788 140197953007616 checkpoints.py:1062] Restoring legacy Flax checkpoint from ag_ckpt_vocab/checkpoint_10999999
I0123 14:53:05.070555 140197953007616 training_loop.py:447] Only restoring trainable parameters.
I0123 14:53:05.071250 140197953007616 training_loop.py:724] parameter: decoder/embed/embedding, shape (1024, 1024), size 1048576
I0123 14:53:05.071309 140197953007616 training_loop.py:724] parameter: decoder/final_layernorm/scale, shape (1024,), size 1024
I0123 14:53:05.071354 140197953007616 training_loop.py:724] parameter: decoder/transformer0/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:53:05.071396 140197953007616 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:53:05.071435 140197953007616 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.071474 140197953007616 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:53:05.071513 140197953007616 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.071551 140197953007616 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.071589 140197953007616 training_loop.py:724] parameter: decoder/transformer0/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:53:05.071629 140197953007616 training_loop.py:724] parameter: decoder/transformer0/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:53:05.071667 140197953007616 training_loop.py:724] parameter: decoder/transformer0/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.071705 140197953007616 training_loop.py:724] parameter: decoder/transformer0/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:53:05.071742 140197953007616 training_loop.py:724] parameter: decoder/transformer1/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:53:05.071779 140197953007616 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:53:05.071816 140197953007616 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.071854 140197953007616 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:53:05.071892 140197953007616 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.071929 140197953007616 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.071966 140197953007616 training_loop.py:724] parameter: decoder/transformer1/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:53:05.072003 140197953007616 training_loop.py:724] parameter: decoder/transformer1/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:53:05.072053 140197953007616 training_loop.py:724] parameter: decoder/transformer1/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.072091 140197953007616 training_loop.py:724] parameter: decoder/transformer1/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:53:05.072128 140197953007616 training_loop.py:724] parameter: decoder/transformer10/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:53:05.072165 140197953007616 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:53:05.072201 140197953007616 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.072237 140197953007616 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:53:05.072274 140197953007616 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.072310 140197953007616 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.072346 140197953007616 training_loop.py:724] parameter: decoder/transformer10/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:53:05.072383 140197953007616 training_loop.py:724] parameter: decoder/transformer10/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:53:05.072420 140197953007616 training_loop.py:724] parameter: decoder/transformer10/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.072456 140197953007616 training_loop.py:724] parameter: decoder/transformer10/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:53:05.072493 140197953007616 training_loop.py:724] parameter: decoder/transformer11/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:53:05.072528 140197953007616 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:53:05.072563 140197953007616 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.072600 140197953007616 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:53:05.072636 140197953007616 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.072671 140197953007616 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.072707 140197953007616 training_loop.py:724] parameter: decoder/transformer11/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:53:05.072744 140197953007616 training_loop.py:724] parameter: decoder/transformer11/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:53:05.072779 140197953007616 training_loop.py:724] parameter: decoder/transformer11/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.072816 140197953007616 training_loop.py:724] parameter: decoder/transformer11/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:53:05.072851 140197953007616 training_loop.py:724] parameter: decoder/transformer2/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:53:05.072888 140197953007616 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:53:05.072926 140197953007616 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.072962 140197953007616 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:53:05.073005 140197953007616 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.073042 140197953007616 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.073078 140197953007616 training_loop.py:724] parameter: decoder/transformer2/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:53:05.073114 140197953007616 training_loop.py:724] parameter: decoder/transformer2/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:53:05.073150 140197953007616 training_loop.py:724] parameter: decoder/transformer2/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.073187 140197953007616 training_loop.py:724] parameter: decoder/transformer2/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:53:05.073223 140197953007616 training_loop.py:724] parameter: decoder/transformer3/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:53:05.073260 140197953007616 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:53:05.073296 140197953007616 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.073333 140197953007616 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:53:05.073370 140197953007616 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.073405 140197953007616 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.073442 140197953007616 training_loop.py:724] parameter: decoder/transformer3/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:53:05.073478 140197953007616 training_loop.py:724] parameter: decoder/transformer3/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:53:05.073514 140197953007616 training_loop.py:724] parameter: decoder/transformer3/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.073550 140197953007616 training_loop.py:724] parameter: decoder/transformer3/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:53:05.073586 140197953007616 training_loop.py:724] parameter: decoder/transformer4/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:53:05.073623 140197953007616 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:53:05.073674 140197953007616 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.073712 140197953007616 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:53:05.073754 140197953007616 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.073791 140197953007616 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.073827 140197953007616 training_loop.py:724] parameter: decoder/transformer4/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:53:05.073863 140197953007616 training_loop.py:724] parameter: decoder/transformer4/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:53:05.073899 140197953007616 training_loop.py:724] parameter: decoder/transformer4/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.073936 140197953007616 training_loop.py:724] parameter: decoder/transformer4/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:53:05.073971 140197953007616 training_loop.py:724] parameter: decoder/transformer5/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:53:05.074013 140197953007616 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:53:05.074050 140197953007616 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.074086 140197953007616 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:53:05.074122 140197953007616 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.074158 140197953007616 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.074194 140197953007616 training_loop.py:724] parameter: decoder/transformer5/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:53:05.074229 140197953007616 training_loop.py:724] parameter: decoder/transformer5/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:53:05.074264 140197953007616 training_loop.py:724] parameter: decoder/transformer5/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.074299 140197953007616 training_loop.py:724] parameter: decoder/transformer5/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:53:05.074335 140197953007616 training_loop.py:724] parameter: decoder/transformer6/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:53:05.074371 140197953007616 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:53:05.074406 140197953007616 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.074442 140197953007616 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:53:05.074477 140197953007616 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.074513 140197953007616 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.074548 140197953007616 training_loop.py:724] parameter: decoder/transformer6/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:53:05.074583 140197953007616 training_loop.py:724] parameter: decoder/transformer6/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:53:05.074619 140197953007616 training_loop.py:724] parameter: decoder/transformer6/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.074654 140197953007616 training_loop.py:724] parameter: decoder/transformer6/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:53:05.074689 140197953007616 training_loop.py:724] parameter: decoder/transformer7/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:53:05.074724 140197953007616 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:53:05.074759 140197953007616 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.074795 140197953007616 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:53:05.074830 140197953007616 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.074865 140197953007616 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.074901 140197953007616 training_loop.py:724] parameter: decoder/transformer7/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:53:05.074936 140197953007616 training_loop.py:724] parameter: decoder/transformer7/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:53:05.074977 140197953007616 training_loop.py:724] parameter: decoder/transformer7/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.075014 140197953007616 training_loop.py:724] parameter: decoder/transformer7/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:53:05.075051 140197953007616 training_loop.py:724] parameter: decoder/transformer8/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:53:05.075086 140197953007616 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:53:05.075122 140197953007616 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.075158 140197953007616 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:53:05.075194 140197953007616 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.075230 140197953007616 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.075265 140197953007616 training_loop.py:724] parameter: decoder/transformer8/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:53:05.075301 140197953007616 training_loop.py:724] parameter: decoder/transformer8/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:53:05.075337 140197953007616 training_loop.py:724] parameter: decoder/transformer8/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.075372 140197953007616 training_loop.py:724] parameter: decoder/transformer8/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:53:05.075408 140197953007616 training_loop.py:724] parameter: decoder/transformer9/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:53:05.075443 140197953007616 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:53:05.075479 140197953007616 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.075514 140197953007616 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:53:05.075549 140197953007616 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.075583 140197953007616 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.075618 140197953007616 training_loop.py:724] parameter: decoder/transformer9/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:53:05.075654 140197953007616 training_loop.py:724] parameter: decoder/transformer9/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:53:05.075690 140197953007616 training_loop.py:724] parameter: decoder/transformer9/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:53:05.075725 140197953007616 training_loop.py:724] parameter: decoder/transformer9/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:53:05.075753 140197953007616 training_loop.py:725] Total parameters: 152072288
I0123 14:53:05.075970 140197953007616 training_loop.py:739] Total state size: 0
I0123 14:53:05.097377 140197953007616 training_loop.py:492] Training loop: creating task for mode beam_search
I0123 14:53:05.097625 140197953007616 training_loop.py:685] Creating logging writer (train) for mode beam_search
I0123 14:53:05.098188 140197953007616 training_loop.py:652] Compiling mode beam_search with jit.
I0123 14:53:05.098507 140197953007616 training_loop.py:89] registering functions: dict_keys([])
I0123 14:53:05.114153 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c ? eqangle k g k j k l k g
I0123 14:53:06.243578 140197953007616 ddar.py:60] Depth 1/1000 time = 1.0973272323608398
I0123 14:53:08.667499 140197953007616 ddar.py:60] Depth 2/1000 time = 2.4237265586853027
I0123 14:53:11.298715 140197953007616 ddar.py:60] Depth 3/1000 time = 2.631026268005371
I0123 14:53:14.078610 140197953007616 ddar.py:60] Depth 4/1000 time = 2.77970552444458
I0123 14:53:17.898684 140197953007616 ddar.py:60] Depth 5/1000 time = 3.797734260559082
I0123 14:53:21.593917 140197953007616 ddar.py:60] Depth 6/1000 time = 3.6950151920318604
I0123 14:53:25.347525 140197953007616 ddar.py:60] Depth 7/1000 time = 3.7387592792510986
I0123 14:53:25.348591 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:53:25.348696 140197953007616 alphageometry.py:540] Depth 0. There are 1 nodes to expand:
I0123 14:53:25.348735 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00
I0123 14:53:25.348767 140197953007616 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00
I0123 14:53:25.493232 140197953007616 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.493432 140197953007616 decoder_stack.py:316] dstack: scanning over 1 windows.
I0123 14:53:25.493537 140197953007616 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:53:25.493616 140197953007616 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:53:25.493702 140197953007616 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:53:25.493776 140197953007616 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:53:25.493847 140197953007616 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:53:25.493916 140197953007616 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:53:25.493984 140197953007616 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:53:25.494051 140197953007616 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:53:25.494119 140197953007616 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:53:25.494187 140197953007616 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:53:25.494255 140197953007616 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:53:25.494322 140197953007616 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:53:25.494362 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:25.494407 140197953007616 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 14:53:25.494514 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:25.494555 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:25.494585 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:25.496504 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.499107 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:25.504966 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.505244 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:25.507936 140197953007616 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:53:25.511924 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:25.511980 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:25.512018 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:25.512053 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.512116 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.512753 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.512828 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.513199 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.513989 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.516542 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.517176 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.517252 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:25.517286 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:25.517346 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.517473 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:25.517816 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:25.517863 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:25.519869 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.519961 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:25.522478 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.522557 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:25.522991 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:25.525352 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:25.527349 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.527444 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:25.527740 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.527818 140197953007616 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 14:53:25.527925 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:25.527962 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:25.527993 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:25.529885 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.532219 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:25.537870 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.538131 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:25.540805 140197953007616 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:53:25.544532 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:25.544586 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:25.544620 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:25.544651 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.544713 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.545277 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.545351 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.545717 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.546480 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.548969 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.549657 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.549735 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:25.549770 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:25.549828 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.549959 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:25.550286 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:25.550328 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:25.552274 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.552366 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:25.554881 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.554960 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:25.555397 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:25.558197 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:25.560140 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.560233 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:25.560533 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.560612 140197953007616 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 14:53:25.560720 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:25.560758 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:25.560788 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:25.562617 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.564950 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:25.570716 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.570982 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:25.573595 140197953007616 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:53:25.577323 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:25.577378 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:25.577414 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:25.577444 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.577505 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.578127 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.578203 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.578562 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.579325 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.581846 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.582467 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.582542 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:25.582576 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:25.582634 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.582760 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:25.583086 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:25.583127 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:25.585123 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.585214 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:25.587730 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.587809 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:25.588234 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:25.590521 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:25.592434 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.592527 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:25.592818 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.592897 140197953007616 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 14:53:25.593004 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:25.593041 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:25.593070 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:25.594955 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.597270 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:25.602932 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.603196 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:25.605848 140197953007616 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:53:25.609533 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:25.609586 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:25.609621 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:25.609657 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.609722 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.610288 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.610363 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.610723 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.611482 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.613972 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.614638 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.614715 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:25.614749 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:25.614806 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.614933 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:25.615252 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:25.615293 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:25.617226 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.617317 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:25.619817 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.619895 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:25.620324 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:25.622681 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:25.624798 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.624891 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:25.625184 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.625263 140197953007616 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 14:53:25.625371 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:25.625408 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:25.625438 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:25.627260 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.629614 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:25.635357 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.635615 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:25.638245 140197953007616 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:53:25.641909 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:25.641964 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:25.641999 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:25.642031 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.642143 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.642702 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.642776 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.643130 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.643893 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.646382 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.646995 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.647070 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:25.647104 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:25.647162 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.647287 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:25.647611 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:25.647653 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:25.649661 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.649754 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:25.652245 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.652322 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:25.652754 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:25.655044 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:25.656962 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.657056 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:25.657350 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.657429 140197953007616 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 14:53:25.657537 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:25.657575 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:25.657605 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:25.659510 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.661862 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:25.667548 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.667808 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:25.670830 140197953007616 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:53:25.674540 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:25.674595 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:25.674630 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:25.674661 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.674723 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.675296 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.675371 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.675738 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.676509 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.679033 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.679710 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.679786 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:25.679820 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:25.679878 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.680036 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:25.680365 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:25.680406 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:25.682356 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.682449 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:25.684942 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.685018 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:25.685447 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:25.687824 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:25.689771 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.689866 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:25.690161 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.690241 140197953007616 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 14:53:25.690349 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:25.690385 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:25.690415 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:25.692226 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.694580 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:25.700349 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.700610 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:25.703249 140197953007616 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:53:25.706949 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:25.707010 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:25.707046 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:25.707077 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.707191 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.707763 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.707838 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.708201 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.708971 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.711480 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.712101 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.712177 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:25.712210 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:25.712268 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.712394 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:25.712711 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:25.712752 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:25.714767 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.714858 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:25.717350 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.717426 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:25.717868 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:25.720159 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:25.722092 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.722187 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:25.722482 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.722562 140197953007616 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 14:53:25.722669 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:25.722707 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:25.722737 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:25.724770 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.727116 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:25.732748 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.733008 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:25.735641 140197953007616 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:53:25.739283 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:25.739337 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:25.739379 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:25.739412 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.739475 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.740041 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.740115 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.740471 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.741237 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.743738 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.744413 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.744490 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:25.744524 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:25.744584 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.744711 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:25.745033 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:25.745075 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:25.747037 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.747129 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:25.749619 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.749747 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:25.750180 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:25.752547 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:25.754500 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.754593 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:25.754889 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.754969 140197953007616 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 14:53:25.755077 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:25.755115 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:25.755146 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:25.756987 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.759356 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:25.765085 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.765340 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:25.767938 140197953007616 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:53:25.771616 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:25.771671 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:25.771706 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:25.771737 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.771804 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.772431 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.772507 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.772869 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.773631 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.776115 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.776733 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.776807 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:25.776840 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:25.776898 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.777022 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:25.777341 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:25.777382 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:25.779321 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.779412 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:25.782324 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.782402 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:25.782835 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:25.785109 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:25.787041 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.787135 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:25.787430 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.787510 140197953007616 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 14:53:25.787619 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:25.787657 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:25.787688 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:25.789500 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.791955 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:25.797595 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.797862 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:25.800472 140197953007616 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:53:25.804137 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:25.804192 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:25.804228 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:25.804260 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.804383 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.804953 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.805027 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.805389 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.806172 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.808663 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.809281 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.809357 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:25.809391 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:25.809448 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.809576 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:25.809910 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:25.809953 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:25.811986 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.812078 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:25.814590 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.814669 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:25.815093 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:25.817378 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:25.819325 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.819419 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:25.819711 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.819789 140197953007616 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 14:53:25.819895 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:25.819933 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:25.819963 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:25.821856 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.824197 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:25.829871 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.830130 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:25.832781 140197953007616 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:53:25.836553 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:25.836608 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:25.836642 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:25.836673 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.836735 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.837299 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.837374 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.837742 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.838500 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.840993 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.841616 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.841698 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:25.841733 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:25.841800 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.841930 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:25.842249 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:25.842290 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:25.844292 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.844383 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:25.846892 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.846970 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:25.847400 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:25.849705 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:25.851645 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.851739 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:25.852032 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.852112 140197953007616 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 14:53:25.852219 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:25.852257 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:25.852287 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:25.854255 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.856674 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:25.862561 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.862830 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:25.865504 140197953007616 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:53:25.869436 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:25.869493 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:25.869530 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:25.869563 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.869628 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.870393 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.870478 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.870861 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.871657 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.874161 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.874803 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.874881 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:25.874916 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:25.874977 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.875109 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:25.875444 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:25.875488 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:25.877492 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.877586 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:25.880139 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.880218 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:25.880645 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:25.883001 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:25.884995 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.885092 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:25.885394 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.885666 140197953007616 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:53:25.885737 140197953007616 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:53:25.885797 140197953007616 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:53:25.885854 140197953007616 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:53:25.885909 140197953007616 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:53:25.885963 140197953007616 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:53:25.886018 140197953007616 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:53:25.886071 140197953007616 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:53:25.886124 140197953007616 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:53:25.886176 140197953007616 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:53:25.886228 140197953007616 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:53:25.886280 140197953007616 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:53:25.886316 140197953007616 decoder_stack.py:344] dstack: Final layernorm.
I0123 14:53:25.889302 140197953007616 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:53:25.936248 140197953007616 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:25.936330 140197953007616 decoder_stack.py:333] dstack: autoregressive generator.
I0123 14:53:25.936382 140197953007616 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 14:53:25.936489 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:25.936526 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:25.936556 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:25.936618 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:25.939151 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:25.944763 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:25.945024 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:25.947756 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:53:25.961050 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:25.961104 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:25.961139 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:25.961169 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:25.961230 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:25.961813 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:25.961891 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:25.962264 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:25.962986 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:25.965618 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:25.966270 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:25.966347 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:25.966381 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:25.966442 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:25.966572 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:25.966682 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:25.966720 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:25.968618 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:25.968711 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:25.971440 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:25.971519 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:25.971630 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:25.974457 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:25.976362 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:25.976463 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:25.976762 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:25.976842 140197953007616 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 14:53:25.976950 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:25.976989 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:25.977019 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:25.977082 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:25.979388 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:25.984905 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:25.985167 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:25.987896 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:53:26.000691 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:26.000746 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:26.000781 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:26.000812 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.000872 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.001432 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.001506 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.001885 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.002636 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.005151 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.005785 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.005862 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:26.005896 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:26.005954 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.006087 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:26.006196 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:26.006233 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.008123 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.008214 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.010688 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.010767 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:26.010876 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:26.013166 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.015059 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.015153 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.015455 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.015536 140197953007616 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 14:53:26.015643 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:26.015681 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:26.015711 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:26.015773 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.018058 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:26.023618 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.023880 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:26.026626 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:53:26.039353 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:26.039408 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:26.039444 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:26.039475 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.039537 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.040096 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.040171 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.040534 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.041293 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.043833 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.044454 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.044530 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:26.044564 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:26.044623 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.044754 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:26.044869 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:26.044907 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.046835 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.046930 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.049406 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.049484 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:26.049593 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:26.051900 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.053809 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.053905 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.054198 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.054283 140197953007616 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 14:53:26.054393 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:26.054431 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:26.054461 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:26.054524 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.056797 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:26.062340 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.062606 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:26.065322 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:53:26.078338 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:26.078392 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:26.078427 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:26.078458 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.078518 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.079078 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.079153 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.079516 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.080261 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.082816 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.083437 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.083513 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:26.083547 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:26.083606 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.083737 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:26.083847 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:26.083886 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.085804 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.085896 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.088347 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.088424 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:26.088532 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:26.091241 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.093137 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.093231 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.093528 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.093614 140197953007616 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 14:53:26.093731 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:26.093770 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:26.093800 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:26.093862 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.096127 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:26.101626 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.101890 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:26.104610 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:53:26.117282 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:26.117336 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:26.117371 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:26.117401 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.117465 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.119837 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.119991 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.120444 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.121288 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.123920 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.124604 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.124688 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:26.124722 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:26.124814 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.124943 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:26.125059 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:26.125097 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.127194 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.127291 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.129830 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.129908 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:26.130020 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:26.132381 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.134301 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.134398 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.134697 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.134783 140197953007616 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 14:53:26.134904 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:26.134943 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:26.134975 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:26.135046 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.137350 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:26.142904 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.143171 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:26.145903 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:53:26.158984 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:26.159044 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:26.159083 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:26.159116 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.159185 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.159761 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.159835 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.160199 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.160952 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.163478 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.164103 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.164180 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:26.164214 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:26.164274 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.164404 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:26.164511 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:26.164548 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.166472 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.166564 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.168999 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.169075 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:26.169183 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:26.171485 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.173357 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.173450 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.173761 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.173842 140197953007616 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 14:53:26.173950 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:26.173994 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:26.174026 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:26.174091 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.176367 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:26.182167 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.182428 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:26.185145 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:53:26.197826 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:26.197881 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:26.197916 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:26.197947 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.198008 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.198569 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.198644 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.199003 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.199750 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.202296 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.202923 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.203001 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:26.203035 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:26.203094 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.203220 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:26.203334 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:26.203372 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.205260 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.205352 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.207819 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.207897 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:26.208006 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:26.210720 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.212612 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.212705 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.213000 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.213081 140197953007616 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 14:53:26.213186 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:26.213224 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:26.213259 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:26.213323 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.215613 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:26.221117 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.221380 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:26.224100 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:53:26.236809 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:26.236864 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:26.236900 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:26.236932 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.236995 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.237573 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.237657 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.238038 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.238806 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.241313 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.241945 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.242023 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:26.242058 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:26.242117 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.242249 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:26.242358 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:26.242396 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.244471 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.244563 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.247002 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.247081 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:26.247189 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:26.249505 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.251399 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.251494 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.251792 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.251873 140197953007616 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 14:53:26.251982 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:26.252020 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:26.252057 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:26.252122 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.254406 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:26.259914 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.260170 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:26.262903 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:53:26.275607 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:26.275661 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:26.275696 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:26.275727 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.275788 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.276358 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.276433 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.276798 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.277492 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.280093 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.280726 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.280801 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:26.280835 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:26.280893 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.281024 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:26.281134 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:26.281171 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.283092 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.283185 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.285638 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.285725 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:26.285834 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:26.288148 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.290046 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.290140 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.290438 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.290523 140197953007616 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 14:53:26.290633 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:26.290671 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:26.290701 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:26.290771 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.293061 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:26.298525 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.298783 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:26.301474 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:53:26.314124 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:26.314181 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:26.314216 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:26.314247 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.314311 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.314868 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.314943 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.315307 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.315995 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.318562 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.319185 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.319261 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:26.319295 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:26.319354 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.319484 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:26.319592 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:26.319630 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.321506 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.321596 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.324044 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.324123 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:26.324230 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:26.326912 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.328812 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.328906 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.329204 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.329284 140197953007616 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 14:53:26.329393 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:26.329431 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:26.329461 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:26.329523 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.331807 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:26.337298 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.337562 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:26.340276 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:53:26.353259 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:26.353314 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:26.353349 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:26.353380 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.353441 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.354009 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.354085 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.354445 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.355144 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.357751 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.358383 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.358458 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:26.358493 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:26.358551 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.358682 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:26.358791 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:26.358829 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.360742 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.360833 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.363300 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.363378 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:26.363485 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:26.365806 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.367683 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.367775 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.368067 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.368148 140197953007616 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 14:53:26.368257 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:26.368295 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:26.368325 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:26.368389 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.370687 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:26.376216 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.376476 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:26.379207 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:53:26.391982 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:26.392036 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:26.392071 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:26.392101 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.392162 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.392731 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.392806 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.393169 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.393863 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.396415 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.397037 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.397112 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:26.397146 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:26.397203 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.397332 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:26.397446 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:26.397484 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.399383 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.399474 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.401940 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.402021 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:26.402130 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:26.404439 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.406326 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.406420 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.406713 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.406801 140197953007616 decoder_stack.py:344] dstack: Final layernorm.
I0123 14:53:26.409738 140197953007616 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:53:26.461490 140197953007616 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.461573 140197953007616 decoder_stack.py:333] dstack: autoregressive generator.
I0123 14:53:26.461629 140197953007616 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 14:53:26.461747 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:26.461786 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:26.461816 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:26.461880 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.464197 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:26.469758 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.470018 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:26.472638 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:53:26.485267 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:26.485322 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:26.485357 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:26.485387 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.485450 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.486016 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.486092 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.486457 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.487143 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.489602 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.490221 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.490296 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:26.490330 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:26.490388 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.490515 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:26.490623 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:26.490662 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.492601 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.492693 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.495128 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.495206 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:26.495315 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:26.497513 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.499379 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.499473 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.499770 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.499851 140197953007616 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 14:53:26.499957 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:26.500000 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:26.500030 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:26.500095 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.502366 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:26.507958 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.508218 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:26.510848 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:53:26.523764 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:26.523819 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:26.523854 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:26.523884 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.523945 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.524498 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.524572 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.524932 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.525617 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.528092 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.528719 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.528795 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:26.528830 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:26.528889 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.529018 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:26.529126 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:26.529163 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.531103 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.531196 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.533621 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.533705 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:26.533813 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:26.536009 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.537873 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.537969 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.538261 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.538341 140197953007616 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 14:53:26.538448 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:26.538486 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:26.538521 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:26.538586 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.540845 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:26.546394 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.546664 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:26.549491 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:53:26.562246 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:26.562300 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:26.562335 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:26.562365 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.562426 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.562978 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.563053 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.563414 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.564096 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.566596 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.567216 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.567292 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:26.567326 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:26.567386 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.567512 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:26.567622 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:26.567660 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.569580 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.569681 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.572131 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.572209 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:26.572317 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:26.574548 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.576418 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.576510 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.576804 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.576884 140197953007616 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 14:53:26.576991 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:26.577029 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:26.577059 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:26.577127 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.579404 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:26.584970 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.585231 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:26.587884 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:53:26.600542 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:26.600596 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:26.600631 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:26.600663 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.600724 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.601283 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.601357 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.601727 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.602429 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.604939 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.605557 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.605632 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:26.605674 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:26.605733 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.605863 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:26.605971 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:26.606009 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.607988 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.608081 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.610628 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.610709 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:26.610822 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:26.613094 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.615020 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.615119 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.615424 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.615508 140197953007616 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 14:53:26.615619 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:26.615659 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:26.615689 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:26.615759 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.618047 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:26.623631 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.623896 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:26.626566 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:53:26.639678 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:26.639733 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:26.639767 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:26.639797 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.639859 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.640417 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.640491 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.640852 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.641535 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.644009 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.644630 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.644705 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:26.644739 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:26.644796 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.644922 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:26.645030 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:26.645067 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.647030 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.647123 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.649574 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.649657 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:26.649769 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:26.651996 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.653882 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.653977 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.654272 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.654354 140197953007616 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 14:53:26.654460 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:26.654498 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:26.654528 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:26.654590 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.656975 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:26.662545 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.662806 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:26.665422 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:53:26.678133 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:26.678188 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:26.678223 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:26.678253 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.678314 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.678886 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.678964 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.679327 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.680027 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.682591 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.683218 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.683294 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:26.683329 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:26.683388 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.683517 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:26.683626 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:26.683665 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.685625 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.685725 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.688182 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.688259 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:26.688371 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:26.690631 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.692524 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.692618 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.692913 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.692994 140197953007616 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 14:53:26.693100 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:26.693138 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:26.693169 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:26.693231 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.695519 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:26.701097 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.701359 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:26.703995 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:53:26.716600 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:26.716655 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:26.716690 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:26.716720 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.716781 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.717343 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.717416 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.717783 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.718475 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.720990 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.721605 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.721686 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:26.721719 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:26.721778 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.721906 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:26.722016 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:26.722054 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.724024 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.724116 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.726595 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.726674 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:26.726781 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:26.729020 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.730909 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.731004 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.731297 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.731377 140197953007616 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 14:53:26.731484 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:26.731522 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:26.731553 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:26.731615 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.733881 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:26.739462 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.739724 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:26.742377 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:53:26.755476 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:26.755531 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:26.755566 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:26.755596 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.755660 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.756344 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.756419 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.756783 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.757480 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.760156 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.760774 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.760851 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:26.760885 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:26.760945 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.761072 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:26.761180 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:26.761218 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.763190 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.763282 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.765746 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.765824 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:26.765933 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:26.768180 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.770074 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.770169 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.770467 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.770547 140197953007616 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 14:53:26.770655 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:26.770693 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:26.770723 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:26.770785 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.773038 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:26.778630 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.778898 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:26.781531 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:53:26.794185 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:26.794239 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:26.794273 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:26.794304 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.794363 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.794923 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.794999 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.795365 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.796052 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.798566 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.799184 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.799259 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:26.799293 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:26.799350 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.799479 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:26.799590 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:26.799628 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.801589 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.801687 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.804130 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.804206 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:26.804312 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:26.806528 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.808392 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.808485 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.808781 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.808859 140197953007616 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 14:53:26.808965 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:26.809003 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:26.809033 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:26.809095 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.811355 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:26.816945 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.817217 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:26.819842 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:53:26.832537 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:26.832592 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:26.832627 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:26.832658 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.832719 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.833283 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.833357 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.833726 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.834414 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.836919 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.837538 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.837614 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:26.837654 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:26.837715 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.837842 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:26.837950 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:26.837988 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.839945 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.840036 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.842492 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.842567 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:26.842676 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:26.844906 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.846796 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.846889 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.847182 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.847260 140197953007616 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 14:53:26.847368 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:26.847405 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:26.847436 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:26.847499 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.849779 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:26.855377 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.855640 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:26.858304 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:53:26.872109 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:26.872165 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:26.872200 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:26.872231 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.872294 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.872863 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.872936 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.873297 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.874006 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.876578 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.877202 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.877277 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:26.877311 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:26.877370 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.877495 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:26.877606 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:26.877652 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.879685 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.879775 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.882245 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.882324 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:26.882440 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:26.884754 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.886713 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.886809 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.887113 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.887193 140197953007616 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 14:53:26.887304 140197953007616 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:53:26.887342 140197953007616 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:53:26.887373 140197953007616 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:53:26.887436 140197953007616 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.889710 140197953007616 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:53:26.895426 140197953007616 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.895693 140197953007616 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:53:26.898380 140197953007616 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:53:26.911347 140197953007616 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:53:26.911404 140197953007616 attention.py:418] Single window, no scan.
I0123 14:53:26.911440 140197953007616 transformer_layer.py:389] tlayer: self-attention.
I0123 14:53:26.911471 140197953007616 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.911533 140197953007616 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.912103 140197953007616 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.912177 140197953007616 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.912536 140197953007616 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.913226 140197953007616 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.915806 140197953007616 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.916432 140197953007616 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.916506 140197953007616 transformer_layer.py:468] tlayer: End windows.
I0123 14:53:26.916539 140197953007616 transformer_layer.py:472] tlayer: final FFN.
I0123 14:53:26.916598 140197953007616 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.916723 140197953007616 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:53:26.916828 140197953007616 nn_components.py:325] mlp: activation = None
I0123 14:53:26.916866 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.918878 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.918974 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.921457 140197953007616 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.921535 140197953007616 transformer_base.py:443] tbase: final FFN
I0123 14:53:26.921654 140197953007616 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:53:26.923983 140197953007616 nn_components.py:329] mlp: final activation = None
I0123 14:53:26.925904 140197953007616 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.925999 140197953007616 nn_components.py:261] mlp: residual
I0123 14:53:26.926305 140197953007616 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:26.926392 140197953007616 decoder_stack.py:344] dstack: Final layernorm.
I0123 14:53:26.929306 140197953007616 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:53:40.358265 140197953007616 alphageometry.py:566] LM output (score=-1.783669): "m : C g h m 17 D g m h m 18 ;"
I0123 14:53:40.358418 140197953007616 alphageometry.py:567] Translation: "m = on_line m g h, on_bline m h g"

I0123 14:53:40.358462 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g ? eqangle k g k j k l k g"
I0123 14:53:40.358610 140197953007616 graph.py:498] 
I0123 14:53:40.358662 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g ? eqangle k g k j k l k g
I0123 14:53:41.748419 140197953007616 ddar.py:60] Depth 1/1000 time = 1.3576545715332031
I0123 14:53:44.734658 140197953007616 ddar.py:60] Depth 2/1000 time = 2.986039638519287
I0123 14:53:48.674399 140197953007616 ddar.py:60] Depth 3/1000 time = 3.939516067504883
I0123 14:53:52.148181 140197953007616 ddar.py:60] Depth 4/1000 time = 3.473578691482544
I0123 14:53:55.612760 140197953007616 ddar.py:60] Depth 5/1000 time = 3.4639792442321777
I0123 14:54:00.194247 140197953007616 ddar.py:60] Depth 6/1000 time = 4.560011863708496
I0123 14:54:04.904864 140197953007616 ddar.py:60] Depth 7/1000 time = 4.710436820983887
I0123 14:54:09.731598 140197953007616 ddar.py:60] Depth 8/1000 time = 4.8118672370910645
I0123 14:54:09.732645 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:54:09.732736 140197953007616 alphageometry.py:566] LM output (score=-1.917016): "m : T g h h m 17 ;"
I0123 14:54:09.732774 140197953007616 alphageometry.py:567] Translation: "m = on_tline m h g h"

I0123 14:54:09.732810 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h ? eqangle k g k j k l k g"
I0123 14:54:09.732966 140197953007616 graph.py:498] 
I0123 14:54:09.733024 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h ? eqangle k g k j k l k g
I0123 14:54:10.839746 140197953007616 ddar.py:60] Depth 1/1000 time = 1.0708749294281006
I0123 14:54:13.485359 140197953007616 ddar.py:60] Depth 2/1000 time = 2.645429849624634
I0123 14:54:16.686403 140197953007616 ddar.py:60] Depth 3/1000 time = 3.200857400894165
I0123 14:54:19.651647 140197953007616 ddar.py:60] Depth 4/1000 time = 2.965056896209717
I0123 14:54:23.726742 140197953007616 ddar.py:60] Depth 5/1000 time = 4.052633285522461
I0123 14:54:27.944775 140197953007616 ddar.py:60] Depth 6/1000 time = 4.2178122997283936
I0123 14:54:32.240740 140197953007616 ddar.py:60] Depth 7/1000 time = 4.279573202133179
I0123 14:54:32.241784 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:54:32.241888 140197953007616 alphageometry.py:566] LM output (score=-2.033294): "m : C b h m 17 D b m h m 18 ;"
I0123 14:54:32.241928 140197953007616 alphageometry.py:567] Translation: "m = on_line m b h, on_bline m h b"

I0123 14:54:32.241967 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b ? eqangle k g k j k l k g"
I0123 14:54:32.242125 140197953007616 graph.py:498] 
I0123 14:54:32.242187 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b ? eqangle k g k j k l k g
I0123 14:54:33.629612 140197953007616 ddar.py:60] Depth 1/1000 time = 1.3522937297821045
I0123 14:54:36.400836 140197953007616 ddar.py:60] Depth 2/1000 time = 2.7710320949554443
I0123 14:54:39.702363 140197953007616 ddar.py:60] Depth 3/1000 time = 3.3013429641723633
I0123 14:54:43.071986 140197953007616 ddar.py:60] Depth 4/1000 time = 3.369410991668701
I0123 14:54:46.681099 140197953007616 ddar.py:60] Depth 5/1000 time = 3.6084234714508057
I0123 14:54:50.970685 140197953007616 ddar.py:60] Depth 6/1000 time = 4.267334461212158
I0123 14:54:55.216154 140197953007616 ddar.py:60] Depth 7/1000 time = 4.24528694152832
I0123 14:54:59.706694 140197953007616 ddar.py:60] Depth 8/1000 time = 4.474682331085205
I0123 14:54:59.707779 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:54:59.707872 140197953007616 alphageometry.py:566] LM output (score=-2.073931): "m : C b c m 17 D b m c m 18 ;"
I0123 14:54:59.707908 140197953007616 alphageometry.py:567] Translation: "m = on_line m b c, on_bline m c b"

I0123 14:54:59.707946 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_bline m c b ? eqangle k g k j k l k g"
I0123 14:54:59.708106 140197953007616 graph.py:498] 
I0123 14:54:59.708165 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_bline m c b ? eqangle k g k j k l k g
I0123 14:55:01.499224 140197953007616 ddar.py:60] Depth 1/1000 time = 1.7563042640686035
I0123 14:55:05.048409 140197953007616 ddar.py:60] Depth 2/1000 time = 3.548994541168213
I0123 14:55:11.579515 140197953007616 ddar.py:60] Depth 3/1000 time = 6.530904293060303
I0123 14:55:17.790317 140197953007616 ddar.py:60] Depth 4/1000 time = 6.2106029987335205
I0123 14:55:23.519635 140197953007616 ddar.py:60] Depth 5/1000 time = 5.729069232940674
I0123 14:55:29.553399 140197953007616 ddar.py:60] Depth 6/1000 time = 6.032851457595825
I0123 14:55:35.715688 140197953007616 ddar.py:60] Depth 7/1000 time = 6.103075742721558
I0123 14:55:35.716836 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:55:35.716933 140197953007616 alphageometry.py:566] LM output (score=-2.125911): "m : C a b m 17 D a m b m 18 ;"
I0123 14:55:35.716970 140197953007616 alphageometry.py:567] Translation: "m = on_line m a b, on_bline m b a"

I0123 14:55:35.717008 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m a b, on_bline m b a ? eqangle k g k j k l k g"
I0123 14:55:35.717171 140197953007616 graph.py:498] 
I0123 14:55:35.717228 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m a b, on_bline m b a ? eqangle k g k j k l k g
I0123 14:55:37.376234 140197953007616 ddar.py:60] Depth 1/1000 time = 1.6200225353240967
I0123 14:55:41.919334 140197953007616 ddar.py:60] Depth 2/1000 time = 4.542927503585815
I0123 14:55:48.264987 140197953007616 ddar.py:60] Depth 3/1000 time = 6.345447063446045
I0123 14:55:54.103507 140197953007616 ddar.py:60] Depth 4/1000 time = 5.838303565979004
I0123 14:56:00.410541 140197953007616 ddar.py:60] Depth 5/1000 time = 6.306178331375122
I0123 14:56:06.405420 140197953007616 ddar.py:60] Depth 6/1000 time = 5.952042818069458
I0123 14:56:06.406649 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:56:06.406764 140197953007616 alphageometry.py:566] LM output (score=-2.156795): "m : C g i m 17 D g m i m 18 ;"
I0123 14:56:06.406802 140197953007616 alphageometry.py:567] Translation: "m = on_line m g i, on_bline m i g"

I0123 14:56:06.406861 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g i, on_bline m i g ? eqangle k g k j k l k g"
I0123 14:56:06.407041 140197953007616 graph.py:498] 
I0123 14:56:06.407098 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g i, on_bline m i g ? eqangle k g k j k l k g
I0123 14:56:07.899709 140197953007616 ddar.py:60] Depth 1/1000 time = 1.4532713890075684
I0123 14:56:10.878547 140197953007616 ddar.py:60] Depth 2/1000 time = 2.978628158569336
I0123 14:56:14.386729 140197953007616 ddar.py:60] Depth 3/1000 time = 3.5079784393310547
I0123 14:56:18.208324 140197953007616 ddar.py:60] Depth 4/1000 time = 3.821413993835449
I0123 14:56:21.518266 140197953007616 ddar.py:60] Depth 5/1000 time = 3.309321403503418
I0123 14:56:26.582189 140197953007616 ddar.py:60] Depth 6/1000 time = 5.042217254638672
I0123 14:56:31.140665 140197953007616 ddar.py:60] Depth 7/1000 time = 4.5582640171051025
I0123 14:56:35.962321 140197953007616 ddar.py:60] Depth 8/1000 time = 4.806657552719116
I0123 14:56:35.963346 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:56:35.963447 140197953007616 alphageometry.py:566] LM output (score=-2.190189): "m : C c g m 17 D c m g m 18 ;"
I0123 14:56:35.963483 140197953007616 alphageometry.py:567] Translation: "m = on_line m c g, on_bline m g c"

I0123 14:56:35.963519 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m c g, on_bline m g c ? eqangle k g k j k l k g"
I0123 14:56:35.963673 140197953007616 graph.py:498] 
I0123 14:56:35.963730 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m c g, on_bline m g c ? eqangle k g k j k l k g
I0123 14:56:37.515369 140197953007616 ddar.py:60] Depth 1/1000 time = 1.5171639919281006
I0123 14:56:40.747937 140197953007616 ddar.py:60] Depth 2/1000 time = 3.2323789596557617
I0123 14:56:44.533074 140197953007616 ddar.py:60] Depth 3/1000 time = 3.7849631309509277
I0123 14:56:48.602271 140197953007616 ddar.py:60] Depth 4/1000 time = 4.069012880325317
I0123 14:56:52.236717 140197953007616 ddar.py:60] Depth 5/1000 time = 3.633826971054077
I0123 14:56:57.277599 140197953007616 ddar.py:60] Depth 6/1000 time = 5.0195472240448
I0123 14:57:02.048629 140197953007616 ddar.py:60] Depth 7/1000 time = 4.7708399295806885
I0123 14:57:07.131551 140197953007616 ddar.py:60] Depth 8/1000 time = 5.067528009414673
I0123 14:57:07.132599 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:57:07.132687 140197953007616 alphageometry.py:566] LM output (score=-2.194983): "m : C c h m 17 D c m h m 18 ;"
I0123 14:57:07.132724 140197953007616 alphageometry.py:567] Translation: "m = on_line m c h, on_bline m h c"

I0123 14:57:07.132762 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m c h, on_bline m h c ? eqangle k g k j k l k g"
I0123 14:57:07.132923 140197953007616 graph.py:498] 
I0123 14:57:07.132981 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m c h, on_bline m h c ? eqangle k g k j k l k g
I0123 14:57:09.382399 140197953007616 ddar.py:60] Depth 1/1000 time = 2.2143397331237793
I0123 14:57:12.988257 140197953007616 ddar.py:60] Depth 2/1000 time = 3.6056604385375977
I0123 14:57:17.380139 140197953007616 ddar.py:60] Depth 3/1000 time = 4.391664028167725
I0123 14:57:22.062315 140197953007616 ddar.py:60] Depth 4/1000 time = 4.6819798946380615
I0123 14:57:26.286256 140197953007616 ddar.py:60] Depth 5/1000 time = 4.223327159881592
I0123 14:57:31.710931 140197953007616 ddar.py:60] Depth 6/1000 time = 5.40346622467041
I0123 14:57:37.348730 140197953007616 ddar.py:60] Depth 7/1000 time = 5.637481689453125
I0123 14:57:42.515222 140197953007616 ddar.py:60] Depth 8/1000 time = 5.151636123657227
I0123 14:57:42.516342 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:57:42.516428 140197953007616 alphageometry.py:566] LM output (score=-2.303433): "m : C b i m 17 D b m i m 18 ;"
I0123 14:57:42.516465 140197953007616 alphageometry.py:567] Translation: "m = on_line m b i, on_bline m i b"

I0123 14:57:42.516503 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b i, on_bline m i b ? eqangle k g k j k l k g"
I0123 14:57:42.516669 140197953007616 graph.py:498] 
I0123 14:57:42.516731 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b i, on_bline m i b ? eqangle k g k j k l k g
I0123 14:57:44.769414 140197953007616 ddar.py:60] Depth 1/1000 time = 2.2164835929870605
I0123 14:57:48.343825 140197953007616 ddar.py:60] Depth 2/1000 time = 3.5742180347442627
I0123 14:57:53.096631 140197953007616 ddar.py:60] Depth 3/1000 time = 4.752563953399658
I0123 14:57:57.341341 140197953007616 ddar.py:60] Depth 4/1000 time = 4.2443788051605225
I0123 14:58:01.803536 140197953007616 ddar.py:60] Depth 5/1000 time = 4.461608409881592
I0123 14:58:07.285070 140197953007616 ddar.py:60] Depth 6/1000 time = 5.458814382553101
I0123 14:58:12.742077 140197953007616 ddar.py:60] Depth 7/1000 time = 5.456808567047119
I0123 14:58:18.279488 140197953007616 ddar.py:60] Depth 8/1000 time = 5.5234410762786865
I0123 14:58:18.280540 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:58:18.280635 140197953007616 alphageometry.py:566] LM output (score=-2.353505): "m : C h i m 17 D h m i m 18 ;"
I0123 14:58:18.280672 140197953007616 alphageometry.py:567] Translation: "m = on_line m h i, on_bline m i h"

I0123 14:58:18.280710 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m h i, on_bline m i h ? eqangle k g k j k l k g"
I0123 14:58:18.280867 140197953007616 graph.py:498] 
I0123 14:58:18.280923 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m h i, on_bline m i h ? eqangle k g k j k l k g
I0123 14:58:19.524833 140197953007616 ddar.py:60] Depth 1/1000 time = 1.208974838256836
I0123 14:58:23.081933 140197953007616 ddar.py:60] Depth 2/1000 time = 3.556924343109131
I0123 14:58:27.520157 140197953007616 ddar.py:60] Depth 3/1000 time = 4.438021659851074
I0123 14:58:32.183616 140197953007616 ddar.py:60] Depth 4/1000 time = 4.663267612457275
I0123 14:58:36.601999 140197953007616 ddar.py:60] Depth 5/1000 time = 4.418124675750732
I0123 14:58:41.270073 140197953007616 ddar.py:60] Depth 6/1000 time = 4.667382001876831
I0123 14:58:46.654378 140197953007616 ddar.py:60] Depth 7/1000 time = 5.354968547821045
I0123 14:58:52.570235 140197953007616 ddar.py:60] Depth 8/1000 time = 5.915663957595825
I0123 14:58:58.430497 140197953007616 ddar.py:60] Depth 9/1000 time = 5.823642730712891
I0123 14:58:58.432274 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:58:58.432404 140197953007616 alphageometry.py:566] LM output (score=-2.366211): "m : C c f m 17 D c m f m 18 ;"
I0123 14:58:58.432443 140197953007616 alphageometry.py:567] Translation: "m = on_line m c f, on_bline m f c"

I0123 14:58:58.432492 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m c f, on_bline m f c ? eqangle k g k j k l k g"
I0123 14:58:58.432667 140197953007616 graph.py:498] 
I0123 14:58:58.432724 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m c f, on_bline m f c ? eqangle k g k j k l k g
I0123 14:59:00.204945 140197953007616 ddar.py:60] Depth 1/1000 time = 1.732384443283081
I0123 14:59:04.780959 140197953007616 ddar.py:60] Depth 2/1000 time = 4.575822353363037
I0123 14:59:10.648558 140197953007616 ddar.py:60] Depth 3/1000 time = 5.867402791976929
I0123 14:59:16.786088 140197953007616 ddar.py:60] Depth 4/1000 time = 6.137332201004028
I0123 14:59:22.931370 140197953007616 ddar.py:60] Depth 5/1000 time = 6.144582509994507
I0123 14:59:28.903398 140197953007616 ddar.py:60] Depth 6/1000 time = 5.931633710861206
I0123 14:59:28.904484 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:59:28.904598 140197953007616 alphageometry.py:566] LM output (score=-2.381017): "m : C c i m 17 D c m i m 18 ;"
I0123 14:59:28.904638 140197953007616 alphageometry.py:567] Translation: "m = on_line m c i, on_bline m i c"

I0123 14:59:28.904675 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m c i, on_bline m i c ? eqangle k g k j k l k g"
I0123 14:59:28.904844 140197953007616 graph.py:498] 
I0123 14:59:28.904902 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m c i, on_bline m i c ? eqangle k g k j k l k g
I0123 14:59:30.148989 140197953007616 ddar.py:60] Depth 1/1000 time = 1.208918809890747
I0123 14:59:32.808182 140197953007616 ddar.py:60] Depth 2/1000 time = 2.659025192260742
I0123 14:59:36.456105 140197953007616 ddar.py:60] Depth 3/1000 time = 3.647744655609131
I0123 14:59:39.880823 140197953007616 ddar.py:60] Depth 4/1000 time = 3.424470901489258
I0123 14:59:43.320411 140197953007616 ddar.py:60] Depth 5/1000 time = 3.4388349056243896
I0123 14:59:47.911184 140197953007616 ddar.py:60] Depth 6/1000 time = 4.5682151317596436
I0123 14:59:52.038410 140197953007616 ddar.py:60] Depth 7/1000 time = 4.127046823501587
I0123 14:59:56.541720 140197953007616 ddar.py:60] Depth 8/1000 time = 4.4856650829315186
I0123 14:59:56.542873 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:59:56.542952 140197953007616 alphageometry.py:566] LM output (score=-2.428807): "m : T a c c m 17 ;"
I0123 14:59:56.542989 140197953007616 alphageometry.py:567] Translation: "m = on_tline m c a c"

I0123 14:59:56.543027 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m c a c ? eqangle k g k j k l k g"
I0123 14:59:56.543185 140197953007616 graph.py:498] 
I0123 14:59:56.543243 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m c a c ? eqangle k g k j k l k g
I0123 14:59:57.993225 140197953007616 ddar.py:60] Depth 1/1000 time = 1.412032127380371
I0123 15:00:00.611822 140197953007616 ddar.py:60] Depth 2/1000 time = 2.6184256076812744
I0123 15:00:04.093291 140197953007616 ddar.py:60] Depth 3/1000 time = 3.481245756149292
I0123 15:00:07.298980 140197953007616 ddar.py:60] Depth 4/1000 time = 3.2054502964019775
I0123 15:00:11.689598 140197953007616 ddar.py:60] Depth 5/1000 time = 4.368299961090088
I0123 15:00:15.689513 140197953007616 ddar.py:60] Depth 6/1000 time = 3.9997217655181885
I0123 15:00:20.023821 140197953007616 ddar.py:60] Depth 7/1000 time = 4.318868637084961
I0123 15:00:20.024870 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:00:20.024981 140197953007616 alphageometry.py:566] LM output (score=-2.559210): "m : P b e b m 17 ;"
I0123 15:00:20.025022 140197953007616 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b e b m"

I0123 15:00:20.025058 140197953007616 alphageometry.py:566] LM output (score=-2.642180): "m : T a c b m 17 ;"
I0123 15:00:20.025087 140197953007616 alphageometry.py:567] Translation: "m = on_tline m b a c"

I0123 15:00:20.025119 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m b a c ? eqangle k g k j k l k g"
I0123 15:00:20.025279 140197953007616 graph.py:498] 
I0123 15:00:20.025339 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m b a c ? eqangle k g k j k l k g
I0123 15:00:21.220021 140197953007616 ddar.py:60] Depth 1/1000 time = 1.1555812358856201
I0123 15:00:23.838329 140197953007616 ddar.py:60] Depth 2/1000 time = 2.6181132793426514
I0123 15:00:27.324093 140197953007616 ddar.py:60] Depth 3/1000 time = 3.485551118850708
I0123 15:00:30.563868 140197953007616 ddar.py:60] Depth 4/1000 time = 3.239579916000366
I0123 15:00:34.627440 140197953007616 ddar.py:60] Depth 5/1000 time = 4.040119171142578
I0123 15:00:38.927239 140197953007616 ddar.py:60] Depth 6/1000 time = 4.299607992172241
I0123 15:00:42.933236 140197953007616 ddar.py:60] Depth 7/1000 time = 3.9911012649536133
I0123 15:00:42.934251 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:00:42.934350 140197953007616 alphageometry.py:566] LM output (score=-2.657195): "m : T b c b m 17 ;"
I0123 15:00:42.934391 140197953007616 alphageometry.py:567] Translation: "m = on_tline m b b c"

I0123 15:00:42.934427 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m b b c ? eqangle k g k j k l k g"
I0123 15:00:42.934597 140197953007616 graph.py:498] 
I0123 15:00:42.934657 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m b b c ? eqangle k g k j k l k g
I0123 15:00:44.430859 140197953007616 ddar.py:60] Depth 1/1000 time = 1.456329107284546
I0123 15:00:47.104096 140197953007616 ddar.py:60] Depth 2/1000 time = 2.6730241775512695
I0123 15:00:50.371864 140197953007616 ddar.py:60] Depth 3/1000 time = 3.2675673961639404
I0123 15:00:53.355016 140197953007616 ddar.py:60] Depth 4/1000 time = 2.982963800430298
I0123 15:00:58.205344 140197953007616 ddar.py:60] Depth 5/1000 time = 4.822036027908325
I0123 15:01:03.045817 140197953007616 ddar.py:60] Depth 6/1000 time = 4.84026575088501
I0123 15:01:07.635335 140197953007616 ddar.py:60] Depth 7/1000 time = 4.569958686828613
I0123 15:01:07.636492 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:01:07.636594 140197953007616 alphageometry.py:566] LM output (score=-2.687907): "m : C b c m 17 T a m b c 18 ;"
I0123 15:01:07.636631 140197953007616 alphageometry.py:567] Translation: "m = on_line m b c, on_tline m a b c"

I0123 15:01:07.636670 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_tline m a b c ? eqangle k g k j k l k g"
I0123 15:01:07.636831 140197953007616 graph.py:498] 
I0123 15:01:07.636889 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_tline m a b c ? eqangle k g k j k l k g
I0123 15:01:09.705220 140197953007616 ddar.py:60] Depth 1/1000 time = 2.023883819580078
I0123 15:01:13.291627 140197953007616 ddar.py:60] Depth 2/1000 time = 3.5862178802490234
I0123 15:01:18.108816 140197953007616 ddar.py:60] Depth 3/1000 time = 4.817003965377808
I0123 15:01:23.209481 140197953007616 ddar.py:60] Depth 4/1000 time = 5.100476264953613
I0123 15:01:28.382571 140197953007616 ddar.py:60] Depth 5/1000 time = 5.172825813293457
I0123 15:01:33.421400 140197953007616 ddar.py:60] Depth 6/1000 time = 5.03692102432251
I0123 15:01:39.768128 140197953007616 ddar.py:60] Depth 7/1000 time = 6.346529245376587
I0123 15:01:45.968785 140197953007616 ddar.py:60] Depth 8/1000 time = 6.200455188751221
I0123 15:01:52.322489 140197953007616 ddar.py:60] Depth 9/1000 time = 6.35348916053772
I0123 15:01:58.779172 140197953007616 ddar.py:60] Depth 10/1000 time = 6.374349594116211
I0123 15:01:58.780599 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:01:58.780700 140197953007616 alphageometry.py:566] LM output (score=-2.712029): "m : P b e j m 17 ;"
I0123 15:01:58.780738 140197953007616 alphageometry.py:567] Translation: "m = on_pline m j b e"

I0123 15:01:58.780776 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_pline m j b e ? eqangle k g k j k l k g"
I0123 15:01:58.780934 140197953007616 graph.py:498] 
I0123 15:01:58.780991 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_pline m j b e ? eqangle k g k j k l k g
I0123 15:02:00.284951 140197953007616 ddar.py:60] Depth 1/1000 time = 1.4676134586334229
I0123 15:02:02.991940 140197953007616 ddar.py:60] Depth 2/1000 time = 2.706808090209961
I0123 15:02:06.250542 140197953007616 ddar.py:60] Depth 3/1000 time = 3.258411169052124
I0123 15:02:09.934501 140197953007616 ddar.py:60] Depth 4/1000 time = 3.683694839477539
I0123 15:02:14.256358 140197953007616 ddar.py:60] Depth 5/1000 time = 4.29690957069397
I0123 15:02:18.427753 140197953007616 ddar.py:60] Depth 6/1000 time = 4.1712141036987305
I0123 15:02:22.968861 140197953007616 ddar.py:60] Depth 7/1000 time = 4.523277282714844
I0123 15:02:22.969917 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:02:22.970002 140197953007616 alphageometry.py:566] LM output (score=-2.767442): "m : T h j h m 17 ;"
I0123 15:02:22.970039 140197953007616 alphageometry.py:567] Translation: "m = on_tline m h h j"

I0123 15:02:22.970075 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h h j ? eqangle k g k j k l k g"
I0123 15:02:22.970231 140197953007616 graph.py:498] 
I0123 15:02:22.970294 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h h j ? eqangle k g k j k l k g
I0123 15:02:24.140755 140197953007616 ddar.py:60] Depth 1/1000 time = 1.1351094245910645
I0123 15:02:27.194598 140197953007616 ddar.py:60] Depth 2/1000 time = 3.0536646842956543
I0123 15:02:30.170653 140197953007616 ddar.py:60] Depth 3/1000 time = 2.9758799076080322
I0123 15:02:33.481969 140197953007616 ddar.py:60] Depth 4/1000 time = 3.3111045360565186
I0123 15:02:37.893844 140197953007616 ddar.py:60] Depth 5/1000 time = 4.38753080368042
I0123 15:02:42.289577 140197953007616 ddar.py:60] Depth 6/1000 time = 4.395551919937134
I0123 15:02:46.409571 140197953007616 ddar.py:60] Depth 7/1000 time = 4.105248212814331
I0123 15:02:46.410631 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:02:46.410724 140197953007616 alphageometry.py:566] LM output (score=-2.782860): "m : P b e k m 17 ;"
I0123 15:02:46.410762 140197953007616 alphageometry.py:567] Translation: "m = on_pline m k b e"

I0123 15:02:46.410800 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_pline m k b e ? eqangle k g k j k l k g"
I0123 15:02:46.410961 140197953007616 graph.py:498] 
I0123 15:02:46.411021 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_pline m k b e ? eqangle k g k j k l k g
I0123 15:02:47.627851 140197953007616 ddar.py:60] Depth 1/1000 time = 1.1804370880126953
I0123 15:02:50.400287 140197953007616 ddar.py:60] Depth 2/1000 time = 2.772251605987549
I0123 15:02:53.754468 140197953007616 ddar.py:60] Depth 3/1000 time = 3.353957414627075
I0123 15:02:57.031651 140197953007616 ddar.py:60] Depth 4/1000 time = 3.2769603729248047
I0123 15:03:01.577208 140197953007616 ddar.py:60] Depth 5/1000 time = 4.522231817245483
I0123 15:03:05.668401 140197953007616 ddar.py:60] Depth 6/1000 time = 4.091005325317383
I0123 15:03:10.142537 140197953007616 ddar.py:60] Depth 7/1000 time = 4.458899974822998
I0123 15:03:10.143604 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:03:10.143683 140197953007616 alphageometry.py:566] LM output (score=-2.808127): "m : C h j m 17 D h m j m 18 ;"
I0123 15:03:10.143721 140197953007616 alphageometry.py:567] Translation: "m = on_line m h j, on_bline m j h"

I0123 15:03:10.143759 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m h j, on_bline m j h ? eqangle k g k j k l k g"
I0123 15:03:10.143918 140197953007616 graph.py:498] 
I0123 15:03:10.143977 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m h j, on_bline m j h ? eqangle k g k j k l k g
I0123 15:03:11.842827 140197953007616 ddar.py:60] Depth 1/1000 time = 1.664121389389038
I0123 15:03:14.853542 140197953007616 ddar.py:60] Depth 2/1000 time = 3.010511636734009
I0123 15:03:18.379117 140197953007616 ddar.py:60] Depth 3/1000 time = 3.5253238677978516
I0123 15:03:21.926404 140197953007616 ddar.py:60] Depth 4/1000 time = 3.547078847885132
I0123 15:03:25.796296 140197953007616 ddar.py:60] Depth 5/1000 time = 3.869272232055664
I0123 15:03:30.613554 140197953007616 ddar.py:60] Depth 6/1000 time = 4.795934438705444
I0123 15:03:35.087776 140197953007616 ddar.py:60] Depth 7/1000 time = 4.473832130432129
I0123 15:03:39.949365 140197953007616 ddar.py:60] Depth 8/1000 time = 4.845744609832764
I0123 15:03:39.950457 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:03:39.950550 140197953007616 alphageometry.py:566] LM output (score=-2.813251): "m : P b e f m 17 ;"
I0123 15:03:39.950588 140197953007616 alphageometry.py:567] Translation: "m = on_pline m f b e"

I0123 15:03:39.950625 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_pline m f b e ? eqangle k g k j k l k g"
I0123 15:03:39.950780 140197953007616 graph.py:498] 
I0123 15:03:39.950835 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_pline m f b e ? eqangle k g k j k l k g
I0123 15:03:41.194352 140197953007616 ddar.py:60] Depth 1/1000 time = 1.2074718475341797
I0123 15:03:44.061972 140197953007616 ddar.py:60] Depth 2/1000 time = 2.867440938949585
I0123 15:03:47.133666 140197953007616 ddar.py:60] Depth 3/1000 time = 3.0715138912200928
I0123 15:03:50.513506 140197953007616 ddar.py:60] Depth 4/1000 time = 3.379641056060791
I0123 15:03:55.243489 140197953007616 ddar.py:60] Depth 5/1000 time = 4.706634998321533
I0123 15:03:59.621770 140197953007616 ddar.py:60] Depth 6/1000 time = 4.3780598640441895
I0123 15:04:03.995936 140197953007616 ddar.py:60] Depth 7/1000 time = 4.357957601547241
I0123 15:04:03.997001 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:04:03.997119 140197953007616 alphageometry.py:566] LM output (score=-2.910663): "m : C g h m 17 T a m g h 18 ;"
I0123 15:04:03.997157 140197953007616 alphageometry.py:567] Translation: "m = on_line m g h, on_tline m a g h"

I0123 15:04:03.997195 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_tline m a g h ? eqangle k g k j k l k g"
I0123 15:04:03.997372 140197953007616 graph.py:498] 
I0123 15:04:03.997430 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_tline m a g h ? eqangle k g k j k l k g
I0123 15:04:05.793194 140197953007616 ddar.py:60] Depth 1/1000 time = 1.7563180923461914
I0123 15:04:09.542507 140197953007616 ddar.py:60] Depth 2/1000 time = 3.749133348464966
I0123 15:04:14.133172 140197953007616 ddar.py:60] Depth 3/1000 time = 4.590482711791992
I0123 15:04:18.470870 140197953007616 ddar.py:60] Depth 4/1000 time = 4.337445259094238
I0123 15:04:24.209476 140197953007616 ddar.py:60] Depth 5/1000 time = 5.71040940284729
I0123 15:04:29.873342 140197953007616 ddar.py:60] Depth 6/1000 time = 5.663676977157593
I0123 15:04:35.709944 140197953007616 ddar.py:60] Depth 7/1000 time = 5.811807155609131
I0123 15:04:35.712115 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:04:35.712250 140197953007616 alphageometry.py:566] LM output (score=-2.912601): "m : P b e l m 17 ;"
I0123 15:04:35.712308 140197953007616 alphageometry.py:567] Translation: "m = on_pline m l b e"

I0123 15:04:35.712367 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_pline m l b e ? eqangle k g k j k l k g"
I0123 15:04:35.712655 140197953007616 graph.py:498] 
I0123 15:04:35.712744 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_pline m l b e ? eqangle k g k j k l k g
I0123 15:04:36.693132 140197953007616 ddar.py:60] Depth 1/1000 time = 0.9287059307098389
I0123 15:04:39.598129 140197953007616 ddar.py:60] Depth 2/1000 time = 2.9047727584838867
I0123 15:04:43.070065 140197953007616 ddar.py:60] Depth 3/1000 time = 3.47161602973938
I0123 15:04:46.517455 140197953007616 ddar.py:60] Depth 4/1000 time = 3.44718074798584
I0123 15:04:50.920697 140197953007616 ddar.py:60] Depth 5/1000 time = 4.379130840301514
I0123 15:04:55.231852 140197953007616 ddar.py:60] Depth 6/1000 time = 4.31096339225769
I0123 15:04:59.585490 140197953007616 ddar.py:60] Depth 7/1000 time = 4.338248252868652
I0123 15:04:59.586562 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:04:59.586653 140197953007616 alphageometry.py:566] LM output (score=-2.928506): "m : P b i h m 17 ;"
I0123 15:04:59.586690 140197953007616 alphageometry.py:567] Translation: "m = on_pline m h b i"

I0123 15:04:59.586726 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_pline m h b i ? eqangle k g k j k l k g"
I0123 15:04:59.586883 140197953007616 graph.py:498] 
I0123 15:04:59.586942 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_pline m h b i ? eqangle k g k j k l k g
I0123 15:05:01.162203 140197953007616 ddar.py:60] Depth 1/1000 time = 1.5394585132598877
I0123 15:05:03.654668 140197953007616 ddar.py:60] Depth 2/1000 time = 2.492176055908203
I0123 15:05:06.986619 140197953007616 ddar.py:60] Depth 3/1000 time = 3.331737518310547
I0123 15:05:10.333669 140197953007616 ddar.py:60] Depth 4/1000 time = 3.346855640411377
I0123 15:05:15.061111 140197953007616 ddar.py:60] Depth 5/1000 time = 4.703641176223755
I0123 15:05:19.317358 140197953007616 ddar.py:60] Depth 6/1000 time = 4.2560625076293945
I0123 15:05:23.572323 140197953007616 ddar.py:60] Depth 7/1000 time = 4.239093542098999
I0123 15:05:23.573352 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:05:23.573455 140197953007616 alphageometry.py:566] LM output (score=-2.932191): "m : P b m h j 17 ;"
I0123 15:05:23.573493 140197953007616 alphageometry.py:567] Translation: "m = on_pline m b h j"

I0123 15:05:23.573530 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_pline m b h j ? eqangle k g k j k l k g"
I0123 15:05:23.573696 140197953007616 graph.py:498] 
I0123 15:05:23.573763 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_pline m b h j ? eqangle k g k j k l k g
I0123 15:05:24.856305 140197953007616 ddar.py:60] Depth 1/1000 time = 1.2471144199371338
I0123 15:05:27.720302 140197953007616 ddar.py:60] Depth 2/1000 time = 2.863820791244507
I0123 15:05:30.760207 140197953007616 ddar.py:60] Depth 3/1000 time = 3.0397119522094727
I0123 15:05:34.143987 140197953007616 ddar.py:60] Depth 4/1000 time = 3.3835957050323486
I0123 15:05:38.858900 140197953007616 ddar.py:60] Depth 5/1000 time = 4.692511081695557
I0123 15:05:42.766871 140197953007616 ddar.py:60] Depth 6/1000 time = 3.9077842235565186
I0123 15:05:47.507296 140197953007616 ddar.py:60] Depth 7/1000 time = 4.724031209945679
I0123 15:05:47.508324 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:05:47.508417 140197953007616 alphageometry.py:566] LM output (score=-2.950703): "m : P b e f m 17 P b m e f 18 ;"
I0123 15:05:47.508453 140197953007616 alphageometry.py:567] Translation: "m = on_pline m f b e, on_pline m b e f"

I0123 15:05:47.508489 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_pline m f b e, on_pline m b e f ? eqangle k g k j k l k g"
I0123 15:05:47.508647 140197953007616 graph.py:498] 
I0123 15:05:47.508703 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_pline m f b e, on_pline m b e f ? eqangle k g k j k l k g
I0123 15:05:48.937362 140197953007616 ddar.py:60] Depth 1/1000 time = 1.3847272396087646
I0123 15:05:51.983815 140197953007616 ddar.py:60] Depth 2/1000 time = 3.0462982654571533
I0123 15:05:56.665943 140197953007616 ddar.py:60] Depth 3/1000 time = 4.681956052780151
I0123 15:06:01.112251 140197953007616 ddar.py:60] Depth 4/1000 time = 4.446125268936157
I0123 15:06:05.835618 140197953007616 ddar.py:60] Depth 5/1000 time = 4.723126411437988
I0123 15:06:10.110524 140197953007616 ddar.py:60] Depth 6/1000 time = 4.274574518203735
I0123 15:06:16.440856 140197953007616 ddar.py:60] Depth 7/1000 time = 6.299686670303345
I0123 15:06:22.688475 140197953007616 ddar.py:60] Depth 8/1000 time = 6.247438669204712
I0123 15:06:29.094100 140197953007616 ddar.py:60] Depth 9/1000 time = 6.378427028656006
I0123 15:06:35.091356 140197953007616 ddar.py:60] Depth 10/1000 time = 5.987043380737305
I0123 15:06:35.092554 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:06:35.092663 140197953007616 alphageometry.py:566] LM output (score=-2.974621): "m : C b e m 17 D b m e m 18 ;"
I0123 15:06:35.092698 140197953007616 alphageometry.py:567] Translation: "m = on_line m b e, on_bline m e b"

I0123 15:06:35.092734 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b e, on_bline m e b ? eqangle k g k j k l k g"
I0123 15:06:35.092894 140197953007616 graph.py:498] 
I0123 15:06:35.092952 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b e, on_bline m e b ? eqangle k g k j k l k g
I0123 15:06:37.037628 140197953007616 ddar.py:60] Depth 1/1000 time = 1.9098167419433594
I0123 15:06:40.846942 140197953007616 ddar.py:60] Depth 2/1000 time = 3.8091392517089844
I0123 15:06:45.209681 140197953007616 ddar.py:60] Depth 3/1000 time = 4.362550735473633
I0123 15:06:49.672196 140197953007616 ddar.py:60] Depth 4/1000 time = 4.462286472320557
I0123 15:06:54.108837 140197953007616 ddar.py:60] Depth 5/1000 time = 4.4359705448150635
I0123 15:06:59.553080 140197953007616 ddar.py:60] Depth 6/1000 time = 5.4217634201049805
I0123 15:07:05.216729 140197953007616 ddar.py:60] Depth 7/1000 time = 5.6634604930877686
I0123 15:07:11.259622 140197953007616 ddar.py:60] Depth 8/1000 time = 6.027889728546143
I0123 15:07:11.260731 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:07:11.260843 140197953007616 alphageometry.py:566] LM output (score=-2.982193): "m : P b e c m 17 ;"
I0123 15:07:11.260884 140197953007616 alphageometry.py:567] Translation: "m = on_pline m c b e"

I0123 15:07:11.260926 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_pline m c b e ? eqangle k g k j k l k g"
I0123 15:07:11.261085 140197953007616 graph.py:498] 
I0123 15:07:11.261143 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_pline m c b e ? eqangle k g k j k l k g
I0123 15:07:12.568602 140197953007616 ddar.py:60] Depth 1/1000 time = 1.2698729038238525
I0123 15:07:15.138679 140197953007616 ddar.py:60] Depth 2/1000 time = 2.5698957443237305
I0123 15:07:18.680675 140197953007616 ddar.py:60] Depth 3/1000 time = 3.541813373565674
I0123 15:07:21.807967 140197953007616 ddar.py:60] Depth 4/1000 time = 3.1270968914031982
I0123 15:07:26.272160 140197953007616 ddar.py:60] Depth 5/1000 time = 4.439609050750732
I0123 15:07:30.713309 140197953007616 ddar.py:60] Depth 6/1000 time = 4.440915584564209
I0123 15:07:35.203942 140197953007616 ddar.py:60] Depth 7/1000 time = 4.474257946014404
I0123 15:07:35.204988 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:07:35.205085 140197953007616 alphageometry.py:566] LM output (score=-2.985259): "m : C g h m 17 T b m g h 18 ;"
I0123 15:07:35.205122 140197953007616 alphageometry.py:567] Translation: "m = on_line m g h, on_tline m b g h"

I0123 15:07:35.205159 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_tline m b g h ? eqangle k g k j k l k g"
I0123 15:07:35.205332 140197953007616 graph.py:498] 
I0123 15:07:35.205392 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_tline m b g h ? eqangle k g k j k l k g
I0123 15:07:37.106046 140197953007616 ddar.py:60] Depth 1/1000 time = 1.8596277236938477
I0123 15:07:40.654575 140197953007616 ddar.py:60] Depth 2/1000 time = 3.5483486652374268
I0123 15:07:45.081883 140197953007616 ddar.py:60] Depth 3/1000 time = 4.427135229110718
I0123 15:07:49.455290 140197953007616 ddar.py:60] Depth 4/1000 time = 4.3732311725616455
I0123 15:07:53.925646 140197953007616 ddar.py:60] Depth 5/1000 time = 4.4701244831085205
I0123 15:07:59.687321 140197953007616 ddar.py:60] Depth 6/1000 time = 5.734421968460083
I0123 15:08:05.871304 140197953007616 ddar.py:60] Depth 7/1000 time = 6.183805704116821
I0123 15:08:11.316541 140197953007616 ddar.py:60] Depth 8/1000 time = 5.41739559173584
I0123 15:08:11.321467 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:08:11.321561 140197953007616 alphageometry.py:566] LM output (score=-2.997759): "m : C b e m 17 D a b a m 18 ;"
I0123 15:08:11.321597 140197953007616 alphageometry.py:567] Translation: "m = on_line m b e, on_circle m a b"

I0123 15:08:11.321633 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b e, on_circle m a b ? eqangle k g k j k l k g"
I0123 15:08:11.321803 140197953007616 graph.py:498] 
I0123 15:08:11.321859 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b e, on_circle m a b ? eqangle k g k j k l k g
I0123 15:08:13.331918 140197953007616 ddar.py:60] Depth 1/1000 time = 1.9734280109405518
I0123 15:08:16.829798 140197953007616 ddar.py:60] Depth 2/1000 time = 3.4975764751434326
I0123 15:08:21.203653 140197953007616 ddar.py:60] Depth 3/1000 time = 4.373666763305664
I0123 15:08:26.031414 140197953007616 ddar.py:60] Depth 4/1000 time = 4.827561140060425
I0123 15:08:30.119715 140197953007616 ddar.py:60] Depth 5/1000 time = 4.087728500366211
I0123 15:08:36.114217 140197953007616 ddar.py:60] Depth 6/1000 time = 5.971480131149292
I0123 15:08:41.573657 140197953007616 ddar.py:60] Depth 7/1000 time = 5.459141731262207
I0123 15:08:46.962004 140197953007616 ddar.py:60] Depth 8/1000 time = 5.372145175933838
I0123 15:08:46.963277 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:08:46.963356 140197953007616 alphageometry.py:566] LM output (score=-3.003448): "m : P b e g m 17 ;"
I0123 15:08:46.963394 140197953007616 alphageometry.py:567] Translation: "m = on_pline m g b e"

I0123 15:08:46.963431 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_pline m g b e ? eqangle k g k j k l k g"
I0123 15:08:46.963590 140197953007616 graph.py:498] 
I0123 15:08:46.963649 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_pline m g b e ? eqangle k g k j k l k g
I0123 15:08:48.647159 140197953007616 ddar.py:60] Depth 1/1000 time = 1.647902011871338
I0123 15:08:51.833472 140197953007616 ddar.py:60] Depth 2/1000 time = 3.186145544052124
I0123 15:08:55.737237 140197953007616 ddar.py:60] Depth 3/1000 time = 3.903590679168701
I0123 15:08:59.108190 140197953007616 ddar.py:60] Depth 4/1000 time = 3.3707282543182373
I0123 15:09:04.153403 140197953007616 ddar.py:60] Depth 5/1000 time = 5.020732402801514
I0123 15:09:08.647222 140197953007616 ddar.py:60] Depth 6/1000 time = 4.493640184402466
I0123 15:09:13.642973 140197953007616 ddar.py:60] Depth 7/1000 time = 4.978260278701782
I0123 15:09:13.644031 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:09:13.644137 140197953007616 alphageometry.py:540] Depth 1. There are 31 nodes to expand:
I0123 15:09:13.644178 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : C g h m 17 D g m h m 18 ; x00
I0123 15:09:13.644209 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : T g h h m 17 ; x00
I0123 15:09:13.644237 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : C b h m 17 D b m h m 18 ; x00
I0123 15:09:13.644263 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : C b c m 17 D b m c m 18 ; x00
I0123 15:09:13.644288 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : C a b m 17 D a m b m 18 ; x00
I0123 15:09:13.644313 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : C g i m 17 D g m i m 18 ; x00
I0123 15:09:13.644337 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : C c g m 17 D c m g m 18 ; x00
I0123 15:09:13.644361 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : C c h m 17 D c m h m 18 ; x00
I0123 15:09:13.644385 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : C b i m 17 D b m i m 18 ; x00
I0123 15:09:13.644422 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : C h i m 17 D h m i m 18 ; x00
I0123 15:09:13.644449 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : C c f m 17 D c m f m 18 ; x00
I0123 15:09:13.644474 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : C c i m 17 D c m i m 18 ; x00
I0123 15:09:13.644498 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : T a c c m 17 ; x00
I0123 15:09:13.644523 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : T a c b m 17 ; x00
I0123 15:09:13.644548 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : T b c b m 17 ; x00
I0123 15:09:13.644572 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : C b c m 17 T a m b c 18 ; x00
I0123 15:09:13.644596 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : P b e j m 17 ; x00
I0123 15:09:13.644620 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : T h j h m 17 ; x00
I0123 15:09:13.644643 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : P b e k m 17 ; x00
I0123 15:09:13.644671 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : C h j m 17 D h m j m 18 ; x00
I0123 15:09:13.644697 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : P b e f m 17 ; x00
I0123 15:09:13.644722 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : C g h m 17 T a m g h 18 ; x00
I0123 15:09:13.644746 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : P b e l m 17 ; x00
I0123 15:09:13.644770 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : P b i h m 17 ; x00
I0123 15:09:13.644794 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : P b m h j 17 ; x00
I0123 15:09:13.644818 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : P b e f m 17 P b m e f 18 ; x00
I0123 15:09:13.644841 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : C b e m 17 D b m e m 18 ; x00
I0123 15:09:13.644865 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : P b e c m 17 ; x00
I0123 15:09:13.644888 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : C g h m 17 T b m g h 18 ; x00
I0123 15:09:13.644916 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : C b e m 17 D a b a m 18 ; x00
I0123 15:09:13.644941 140197953007616 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : P b e g m 17 ; x00
I0123 15:09:13.644967 140197953007616 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : C g h m 17 D g m h m 18 ; x00
I0123 15:09:21.086141 140197953007616 alphageometry.py:566] LM output (score=-0.851418): "n : C b h n 19 D b n h n 20 ;"
I0123 15:09:21.086432 140197953007616 alphageometry.py:567] Translation: "n = on_line n b h, on_bline n h b"

I0123 15:09:21.086493 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n b h, on_bline n h b ? eqangle k g k j k l k g"
I0123 15:09:21.086670 140197953007616 graph.py:498] 
I0123 15:09:21.086729 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n b h, on_bline n h b ? eqangle k g k j k l k g
I0123 15:09:22.799327 140197953007616 ddar.py:60] Depth 1/1000 time = 1.6717073917388916
I0123 15:09:26.572486 140197953007616 ddar.py:60] Depth 2/1000 time = 3.772982597351074
I0123 15:09:31.486443 140197953007616 ddar.py:60] Depth 3/1000 time = 4.91377329826355
I0123 15:09:36.022455 140197953007616 ddar.py:60] Depth 4/1000 time = 4.535809516906738
I0123 15:09:40.598954 140197953007616 ddar.py:60] Depth 5/1000 time = 4.575923442840576
I0123 15:09:46.185706 140197953007616 ddar.py:60] Depth 6/1000 time = 5.561172723770142
I0123 15:09:52.052384 140197953007616 ddar.py:60] Depth 7/1000 time = 5.866493225097656
I0123 15:09:58.090882 140197953007616 ddar.py:60] Depth 8/1000 time = 6.019260883331299
I0123 15:09:58.092183 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:09:58.092256 140197953007616 alphageometry.py:566] LM output (score=-1.136851): "n : C b g n 19 D b n g n 20 ;"
I0123 15:09:58.092292 140197953007616 alphageometry.py:567] Translation: "n = on_line n b g, on_bline n g b"

I0123 15:09:58.092344 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n b g, on_bline n g b ? eqangle k g k j k l k g"
I0123 15:09:58.092531 140197953007616 graph.py:498] 
I0123 15:09:58.092589 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n b g, on_bline n g b ? eqangle k g k j k l k g
I0123 15:10:00.697836 140197953007616 ddar.py:60] Depth 1/1000 time = 2.564823865890503
I0123 15:10:05.015521 140197953007616 ddar.py:60] Depth 2/1000 time = 4.317508220672607
I0123 15:10:09.937802 140197953007616 ddar.py:60] Depth 3/1000 time = 4.922112226486206
I0123 15:10:15.344473 140197953007616 ddar.py:60] Depth 4/1000 time = 5.406467437744141
I0123 15:10:20.403358 140197953007616 ddar.py:60] Depth 5/1000 time = 5.05832576751709
I0123 15:10:27.095276 140197953007616 ddar.py:60] Depth 6/1000 time = 6.668096303939819
I0123 15:10:33.545833 140197953007616 ddar.py:60] Depth 7/1000 time = 6.450357675552368
I0123 15:10:40.201064 140197953007616 ddar.py:60] Depth 8/1000 time = 6.639448165893555
I0123 15:10:40.202261 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:10:40.202325 140197953007616 alphageometry.py:566] LM output (score=-1.600169): "n : C c h n 19 D c n h n 20 ;"
I0123 15:10:40.202360 140197953007616 alphageometry.py:567] Translation: "n = on_line n c h, on_bline n h c"

I0123 15:10:40.202400 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n c h, on_bline n h c ? eqangle k g k j k l k g"
I0123 15:10:40.202573 140197953007616 graph.py:498] 
I0123 15:10:40.202632 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n c h, on_bline n h c ? eqangle k g k j k l k g
I0123 15:10:42.602766 140197953007616 ddar.py:60] Depth 1/1000 time = 2.3577754497528076
I0123 15:10:48.400091 140197953007616 ddar.py:60] Depth 2/1000 time = 5.797117233276367
I0123 15:10:54.414830 140197953007616 ddar.py:60] Depth 3/1000 time = 6.014551162719727
I0123 15:11:00.490835 140197953007616 ddar.py:60] Depth 4/1000 time = 6.075741291046143
I0123 15:11:06.610278 140197953007616 ddar.py:60] Depth 5/1000 time = 6.118727207183838
I0123 15:11:13.938055 140197953007616 ddar.py:60] Depth 6/1000 time = 7.3041627407073975
I0123 15:11:21.615464 140197953007616 ddar.py:60] Depth 7/1000 time = 7.677157163619995
I0123 15:11:29.376586 140197953007616 ddar.py:60] Depth 8/1000 time = 7.743976354598999
I0123 15:11:29.377797 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:11:29.377853 140197953007616 alphageometry.py:566] LM output (score=-1.601134): "n : C a b n 19 D a n b n 20 ;"
I0123 15:11:29.377888 140197953007616 alphageometry.py:567] Translation: "n = on_line n a b, on_bline n b a"

I0123 15:11:29.377925 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n a b, on_bline n b a ? eqangle k g k j k l k g"
I0123 15:11:29.378096 140197953007616 graph.py:498] 
I0123 15:11:29.378156 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n a b, on_bline n b a ? eqangle k g k j k l k g
I0123 15:11:32.138868 140197953007616 ddar.py:60] Depth 1/1000 time = 2.7187345027923584
I0123 15:11:38.034231 140197953007616 ddar.py:60] Depth 2/1000 time = 5.89511775970459
I0123 15:11:45.741795 140197953007616 ddar.py:60] Depth 3/1000 time = 7.707246541976929
I0123 15:11:52.930476 140197953007616 ddar.py:60] Depth 4/1000 time = 7.1884846687316895
I0123 15:12:01.203728 140197953007616 ddar.py:60] Depth 5/1000 time = 8.273031234741211
I0123 15:12:09.291825 140197953007616 ddar.py:60] Depth 6/1000 time = 8.087879419326782
I0123 15:12:17.016928 140197953007616 ddar.py:60] Depth 7/1000 time = 7.724847316741943
I0123 15:12:25.339314 140197953007616 ddar.py:60] Depth 8/1000 time = 8.321640729904175
I0123 15:12:33.069742 140197953007616 ddar.py:60] Depth 9/1000 time = 7.687314748764038
I0123 15:12:33.074112 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:12:33.074175 140197953007616 alphageometry.py:566] LM output (score=-1.864072): "n : C a g n 19 D a n g n 20 ;"
I0123 15:12:33.074211 140197953007616 alphageometry.py:567] Translation: "n = on_line n a g, on_bline n g a"

I0123 15:12:33.074250 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n a g, on_bline n g a ? eqangle k g k j k l k g"
I0123 15:12:33.074427 140197953007616 graph.py:498] 
I0123 15:12:33.074488 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n a g, on_bline n g a ? eqangle k g k j k l k g
I0123 15:12:34.753367 140197953007616 ddar.py:60] Depth 1/1000 time = 1.6350970268249512
I0123 15:12:39.209789 140197953007616 ddar.py:60] Depth 2/1000 time = 4.4562318325042725
I0123 15:12:43.393067 140197953007616 ddar.py:60] Depth 3/1000 time = 4.183055400848389
I0123 15:12:48.488799 140197953007616 ddar.py:60] Depth 4/1000 time = 5.09551215171814
I0123 15:12:53.181461 140197953007616 ddar.py:60] Depth 5/1000 time = 4.6920716762542725
I0123 15:12:59.556860 140197953007616 ddar.py:60] Depth 6/1000 time = 6.349381923675537
I0123 15:13:05.238746 140197953007616 ddar.py:60] Depth 7/1000 time = 5.681674003601074
I0123 15:13:11.435716 140197953007616 ddar.py:60] Depth 8/1000 time = 6.178518533706665
I0123 15:13:11.436990 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:13:11.437049 140197953007616 alphageometry.py:566] LM output (score=-1.951260): "n : P b e m n 19 ;"
I0123 15:13:11.437086 140197953007616 alphageometry.py:567] Translation: "n = on_pline n m b e"

I0123 15:13:11.437125 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_pline n m b e ? eqangle k g k j k l k g"
I0123 15:13:11.437297 140197953007616 graph.py:498] 
I0123 15:13:11.437361 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_pline n m b e ? eqangle k g k j k l k g
I0123 15:13:13.445625 140197953007616 ddar.py:60] Depth 1/1000 time = 1.9672675132751465
I0123 15:13:18.052837 140197953007616 ddar.py:60] Depth 2/1000 time = 4.606987237930298
I0123 15:13:23.700948 140197953007616 ddar.py:60] Depth 3/1000 time = 5.647869110107422
I0123 15:13:28.916395 140197953007616 ddar.py:60] Depth 4/1000 time = 5.215225458145142
I0123 15:13:34.641832 140197953007616 ddar.py:60] Depth 5/1000 time = 5.724741697311401
I0123 15:13:41.098122 140197953007616 ddar.py:60] Depth 6/1000 time = 6.431429386138916
I0123 15:13:47.769019 140197953007616 ddar.py:60] Depth 7/1000 time = 6.670708179473877
I0123 15:13:54.646948 140197953007616 ddar.py:60] Depth 8/1000 time = 6.860954761505127
I0123 15:13:54.648039 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:13:54.648100 140197953007616 alphageometry.py:566] LM output (score=-1.989884): "n : C h i n 19 D h n i n 20 ;"
I0123 15:13:54.648135 140197953007616 alphageometry.py:567] Translation: "n = on_line n h i, on_bline n i h"

I0123 15:13:54.648177 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n h i, on_bline n i h ? eqangle k g k j k l k g"
I0123 15:13:54.648345 140197953007616 graph.py:498] 
I0123 15:13:54.648404 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n h i, on_bline n i h ? eqangle k g k j k l k g
I0123 15:13:56.344108 140197953007616 ddar.py:60] Depth 1/1000 time = 1.6530396938323975
I0123 15:14:00.909391 140197953007616 ddar.py:60] Depth 2/1000 time = 4.5650954246521
I0123 15:14:07.071791 140197953007616 ddar.py:60] Depth 3/1000 time = 6.162189483642578
I0123 15:14:13.792747 140197953007616 ddar.py:60] Depth 4/1000 time = 6.720656394958496
I0123 15:14:19.955734 140197953007616 ddar.py:60] Depth 5/1000 time = 6.162734746932983
I0123 15:14:26.101715 140197953007616 ddar.py:60] Depth 6/1000 time = 6.1453633308410645
I0123 15:14:34.647013 140197953007616 ddar.py:60] Depth 7/1000 time = 8.511732816696167
I0123 15:14:42.223954 140197953007616 ddar.py:60] Depth 8/1000 time = 7.576711177825928
I0123 15:14:50.367232 140197953007616 ddar.py:60] Depth 9/1000 time = 8.101239681243896
I0123 15:14:50.369184 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:14:50.369266 140197953007616 alphageometry.py:566] LM output (score=-2.129524): "n : C a h n 19 D a n h n 20 ;"
I0123 15:14:50.369302 140197953007616 alphageometry.py:567] Translation: "n = on_line n a h, on_bline n h a"

I0123 15:14:50.369353 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n a h, on_bline n h a ? eqangle k g k j k l k g"
I0123 15:14:50.369544 140197953007616 graph.py:498] 
I0123 15:14:50.369605 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n a h, on_bline n h a ? eqangle k g k j k l k g
I0123 15:14:53.313006 140197953007616 ddar.py:60] Depth 1/1000 time = 2.897744655609131
I0123 15:14:58.701529 140197953007616 ddar.py:60] Depth 2/1000 time = 5.388335466384888
I0123 15:15:04.787115 140197953007616 ddar.py:60] Depth 3/1000 time = 6.085369110107422
I0123 15:15:10.978737 140197953007616 ddar.py:60] Depth 4/1000 time = 6.191402196884155
I0123 15:15:17.579151 140197953007616 ddar.py:60] Depth 5/1000 time = 6.599808692932129
I0123 15:15:24.819554 140197953007616 ddar.py:60] Depth 6/1000 time = 7.217432975769043
I0123 15:15:32.112768 140197953007616 ddar.py:60] Depth 7/1000 time = 7.29290246963501
I0123 15:15:38.799717 140197953007616 ddar.py:60] Depth 8/1000 time = 6.67005467414856
I0123 15:15:38.800940 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:15:38.801010 140197953007616 alphageometry.py:566] LM output (score=-2.207463): "n : C b i n 19 D b n i n 20 ;"
I0123 15:15:38.801051 140197953007616 alphageometry.py:567] Translation: "n = on_line n b i, on_bline n i b"

I0123 15:15:38.801093 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n b i, on_bline n i b ? eqangle k g k j k l k g"
I0123 15:15:38.801273 140197953007616 graph.py:498] 
I0123 15:15:38.801338 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n b i, on_bline n i b ? eqangle k g k j k l k g
I0123 15:15:41.733068 140197953007616 ddar.py:60] Depth 1/1000 time = 2.888751983642578
I0123 15:15:47.089098 140197953007616 ddar.py:60] Depth 2/1000 time = 5.355818033218384
I0123 15:15:53.058449 140197953007616 ddar.py:60] Depth 3/1000 time = 5.969128847122192
I0123 15:15:59.087161 140197953007616 ddar.py:60] Depth 4/1000 time = 6.028484106063843
I0123 15:16:05.201552 140197953007616 ddar.py:60] Depth 5/1000 time = 6.113771915435791
I0123 15:16:11.840524 140197953007616 ddar.py:60] Depth 6/1000 time = 6.615226745605469
I0123 15:16:19.345160 140197953007616 ddar.py:60] Depth 7/1000 time = 7.504425525665283
I0123 15:16:26.510196 140197953007616 ddar.py:60] Depth 8/1000 time = 7.150482416152954
I0123 15:16:26.511328 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:16:26.511406 140197953007616 alphageometry.py:566] LM output (score=-2.428704): "n : C f h n 19 D f n h n 20 ;"
I0123 15:16:26.511443 140197953007616 alphageometry.py:567] Translation: "n = on_line n f h, on_bline n h f"

I0123 15:16:26.511481 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n f h, on_bline n h f ? eqangle k g k j k l k g"
I0123 15:16:26.511647 140197953007616 graph.py:498] 
I0123 15:16:26.511707 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n f h, on_bline n h f ? eqangle k g k j k l k g
I0123 15:16:28.182299 140197953007616 ddar.py:60] Depth 1/1000 time = 1.6291539669036865
I0123 15:16:32.002574 140197953007616 ddar.py:60] Depth 2/1000 time = 3.8200948238372803
I0123 15:16:37.049086 140197953007616 ddar.py:60] Depth 3/1000 time = 5.046330213546753
I0123 15:16:41.235847 140197953007616 ddar.py:60] Depth 4/1000 time = 4.1865458488464355
I0123 15:16:45.816322 140197953007616 ddar.py:60] Depth 5/1000 time = 4.5797789096832275
I0123 15:16:51.986085 140197953007616 ddar.py:60] Depth 6/1000 time = 6.145256519317627
I0123 15:16:57.676622 140197953007616 ddar.py:60] Depth 7/1000 time = 5.690298557281494
I0123 15:17:03.424583 140197953007616 ddar.py:60] Depth 8/1000 time = 5.7277116775512695
I0123 15:17:03.425849 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:17:03.425910 140197953007616 alphageometry.py:566] LM output (score=-2.461437): "n : C c g n 19 D c n g n 20 ;"
I0123 15:17:03.425946 140197953007616 alphageometry.py:567] Translation: "n = on_line n c g, on_bline n g c"

I0123 15:17:03.425997 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n c g, on_bline n g c ? eqangle k g k j k l k g"
I0123 15:17:03.426177 140197953007616 graph.py:498] 
I0123 15:17:03.426238 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n c g, on_bline n g c ? eqangle k g k j k l k g
I0123 15:17:05.690783 140197953007616 ddar.py:60] Depth 1/1000 time = 2.2226359844207764
I0123 15:17:10.344443 140197953007616 ddar.py:60] Depth 2/1000 time = 4.653486251831055
I0123 15:17:16.256919 140197953007616 ddar.py:60] Depth 3/1000 time = 5.912240982055664
I0123 15:17:21.179552 140197953007616 ddar.py:60] Depth 4/1000 time = 4.922297239303589
I0123 15:17:26.561667 140197953007616 ddar.py:60] Depth 5/1000 time = 5.381542205810547
I0123 15:17:33.699219 140197953007616 ddar.py:60] Depth 6/1000 time = 7.112614631652832
I0123 15:17:40.301269 140197953007616 ddar.py:60] Depth 7/1000 time = 6.60182785987854
I0123 15:17:46.855073 140197953007616 ddar.py:60] Depth 8/1000 time = 6.5354955196380615
I0123 15:17:46.856272 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:17:46.856339 140197953007616 alphageometry.py:566] LM output (score=-2.461816): "n : P b e j n 19 ;"
I0123 15:17:46.856376 140197953007616 alphageometry.py:567] Translation: "n = on_pline n j b e"

I0123 15:17:46.856415 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_pline n j b e ? eqangle k g k j k l k g"
I0123 15:17:46.856588 140197953007616 graph.py:498] 
I0123 15:17:46.856648 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_pline n j b e ? eqangle k g k j k l k g
I0123 15:17:48.935025 140197953007616 ddar.py:60] Depth 1/1000 time = 2.036388635635376
I0123 15:17:52.223716 140197953007616 ddar.py:60] Depth 2/1000 time = 3.288524866104126
I0123 15:17:56.571035 140197953007616 ddar.py:60] Depth 3/1000 time = 4.347106218338013
I0123 15:18:00.917570 140197953007616 ddar.py:60] Depth 4/1000 time = 4.3463356494903564
I0123 15:18:05.280857 140197953007616 ddar.py:60] Depth 5/1000 time = 4.362632989883423
I0123 15:18:10.682208 140197953007616 ddar.py:60] Depth 6/1000 time = 5.37600564956665
I0123 15:18:16.039869 140197953007616 ddar.py:60] Depth 7/1000 time = 5.357449054718018
I0123 15:18:21.888655 140197953007616 ddar.py:60] Depth 8/1000 time = 5.831975936889648
I0123 15:18:21.889698 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:18:21.889770 140197953007616 alphageometry.py:566] LM output (score=-2.533071): "n : C a b n 19 D a b b n 20 ;"
I0123 15:18:21.889807 140197953007616 alphageometry.py:567] Translation: "n = on_line n a b, on_circle n b a"

I0123 15:18:21.889844 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n a b, on_circle n b a ? eqangle k g k j k l k g"
I0123 15:18:21.890029 140197953007616 graph.py:498] 
I0123 15:18:21.890091 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n a b, on_circle n b a ? eqangle k g k j k l k g
I0123 15:18:23.833870 140197953007616 ddar.py:60] Depth 1/1000 time = 1.8985188007354736
I0123 15:18:29.237279 140197953007616 ddar.py:60] Depth 2/1000 time = 5.403183460235596
I0123 15:18:34.234749 140197953007616 ddar.py:60] Depth 3/1000 time = 4.997172117233276
I0123 15:18:40.219891 140197953007616 ddar.py:60] Depth 4/1000 time = 5.984945058822632
I0123 15:18:45.769316 140197953007616 ddar.py:60] Depth 5/1000 time = 5.5488667488098145
I0123 15:18:52.448657 140197953007616 ddar.py:60] Depth 6/1000 time = 6.654311656951904
I0123 15:18:59.460893 140197953007616 ddar.py:60] Depth 7/1000 time = 7.012037992477417
I0123 15:19:06.074963 140197953007616 ddar.py:60] Depth 8/1000 time = 6.599152088165283
I0123 15:19:06.076105 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:19:06.076183 140197953007616 alphageometry.py:566] LM output (score=-2.543638): "n : C a b n 19 D a b a n 20 ;"
I0123 15:19:06.076220 140197953007616 alphageometry.py:567] Translation: "n = on_line n a b, on_circle n a b"

I0123 15:19:06.076260 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n a b, on_circle n a b ? eqangle k g k j k l k g"
I0123 15:19:06.076434 140197953007616 graph.py:498] 
I0123 15:19:06.076493 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n a b, on_circle n a b ? eqangle k g k j k l k g
I0123 15:19:08.107759 140197953007616 ddar.py:60] Depth 1/1000 time = 1.9803411960601807
I0123 15:19:13.523939 140197953007616 ddar.py:60] Depth 2/1000 time = 5.415960788726807
I0123 15:19:18.488197 140197953007616 ddar.py:60] Depth 3/1000 time = 4.964075088500977
I0123 15:19:24.496453 140197953007616 ddar.py:60] Depth 4/1000 time = 6.008072853088379
I0123 15:19:30.122951 140197953007616 ddar.py:60] Depth 5/1000 time = 5.625871419906616
I0123 15:19:37.691765 140197953007616 ddar.py:60] Depth 6/1000 time = 7.544377326965332
I0123 15:19:45.344333 140197953007616 ddar.py:60] Depth 7/1000 time = 7.651408433914185
I0123 15:19:52.779649 140197953007616 ddar.py:60] Depth 8/1000 time = 7.42019510269165
I0123 15:19:52.780911 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:19:52.781011 140197953007616 alphageometry.py:566] LM output (score=-2.575271): "n : C d h n 19 D d n h n 20 ;"
I0123 15:19:52.781049 140197953007616 alphageometry.py:567] Translation: "n = on_line n d h, on_bline n h d"

I0123 15:19:52.781093 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n d h, on_bline n h d ? eqangle k g k j k l k g"
I0123 15:19:52.781305 140197953007616 graph.py:498] 
I0123 15:19:52.781390 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n d h, on_bline n h d ? eqangle k g k j k l k g
I0123 15:19:53.987969 140197953007616 ddar.py:60] Depth 1/1000 time = 1.1579976081848145
I0123 15:19:57.949183 140197953007616 ddar.py:60] Depth 2/1000 time = 3.9609732627868652
I0123 15:20:02.497427 140197953007616 ddar.py:60] Depth 3/1000 time = 4.547977447509766
I0123 15:20:07.078159 140197953007616 ddar.py:60] Depth 4/1000 time = 4.580387592315674
I0123 15:20:11.122040 140197953007616 ddar.py:60] Depth 5/1000 time = 4.043181896209717
I0123 15:20:16.493185 140197953007616 ddar.py:60] Depth 6/1000 time = 5.347263813018799
I0123 15:20:21.884541 140197953007616 ddar.py:60] Depth 7/1000 time = 5.3909547328948975
I0123 15:20:27.303503 140197953007616 ddar.py:60] Depth 8/1000 time = 5.400575160980225
I0123 15:20:27.304916 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:20:27.305029 140197953007616 alphageometry.py:566] LM output (score=-2.655096): "n : C k l n 19 D k n l n 20 ;"
I0123 15:20:27.305067 140197953007616 alphageometry.py:567] Translation: "n = on_line n k l, on_bline n l k"

I0123 15:20:27.305125 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n k l, on_bline n l k ? eqangle k g k j k l k g"
I0123 15:20:27.305332 140197953007616 graph.py:498] 
I0123 15:20:27.305391 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n k l, on_bline n l k ? eqangle k g k j k l k g
I0123 15:20:29.547359 140197953007616 ddar.py:60] Depth 1/1000 time = 2.1979761123657227
I0123 15:20:33.357087 140197953007616 ddar.py:60] Depth 2/1000 time = 3.8094873428344727
I0123 15:20:37.214022 140197953007616 ddar.py:60] Depth 3/1000 time = 3.8566887378692627
I0123 15:20:41.657347 140197953007616 ddar.py:60] Depth 4/1000 time = 4.443002223968506
I0123 15:20:46.123670 140197953007616 ddar.py:60] Depth 5/1000 time = 4.465459823608398
I0123 15:20:51.429426 140197953007616 ddar.py:60] Depth 6/1000 time = 5.281822919845581
I0123 15:20:56.775463 140197953007616 ddar.py:60] Depth 7/1000 time = 5.345703125
I0123 15:21:02.165986 140197953007616 ddar.py:60] Depth 8/1000 time = 5.374006032943726
I0123 15:21:02.167234 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:21:02.167312 140197953007616 alphageometry.py:566] LM output (score=-2.662326): "n : P b e b n 19 ;"
I0123 15:21:02.167351 140197953007616 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b e b n"

I0123 15:21:02.167387 140197953007616 alphageometry.py:566] LM output (score=-2.669061): "n : C c f n 19 D c n f n 20 ;"
I0123 15:21:02.167415 140197953007616 alphageometry.py:567] Translation: "n = on_line n c f, on_bline n f c"

I0123 15:21:02.167446 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n c f, on_bline n f c ? eqangle k g k j k l k g"
I0123 15:21:02.167632 140197953007616 graph.py:498] 
I0123 15:21:02.167693 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n c f, on_bline n f c ? eqangle k g k j k l k g
I0123 15:21:04.752331 140197953007616 ddar.py:60] Depth 1/1000 time = 2.541116714477539
I0123 15:21:10.584352 140197953007616 ddar.py:60] Depth 2/1000 time = 5.831803321838379
I0123 15:21:19.355108 140197953007616 ddar.py:60] Depth 3/1000 time = 8.770497560501099
I0123 15:21:27.119186 140197953007616 ddar.py:60] Depth 4/1000 time = 7.7638044357299805
I0123 15:21:34.292334 140197953007616 ddar.py:60] Depth 5/1000 time = 7.172425746917725
I0123 15:21:42.078697 140197953007616 ddar.py:60] Depth 6/1000 time = 7.74371075630188
I0123 15:21:42.079858 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:21:42.079923 140197953007616 alphageometry.py:566] LM output (score=-2.683451): "n : P b i e n 19 ;"
I0123 15:21:42.079959 140197953007616 alphageometry.py:567] Translation: "n = on_pline n e b i"

I0123 15:21:42.079998 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_pline n e b i ? eqangle k g k j k l k g"
I0123 15:21:42.080184 140197953007616 graph.py:498] 
I0123 15:21:42.080246 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_pline n e b i ? eqangle k g k j k l k g
I0123 15:21:43.700324 140197953007616 ddar.py:60] Depth 1/1000 time = 1.5736563205718994
I0123 15:21:46.983659 140197953007616 ddar.py:60] Depth 2/1000 time = 3.2831006050109863
I0123 15:21:51.355674 140197953007616 ddar.py:60] Depth 3/1000 time = 4.371761322021484
I0123 15:21:55.792287 140197953007616 ddar.py:60] Depth 4/1000 time = 4.43628716468811
I0123 15:22:00.201769 140197953007616 ddar.py:60] Depth 5/1000 time = 4.4086925983428955
I0123 15:22:05.578681 140197953007616 ddar.py:60] Depth 6/1000 time = 5.3523664474487305
I0123 15:22:10.891650 140197953007616 ddar.py:60] Depth 7/1000 time = 5.31270694732666
I0123 15:22:16.318919 140197953007616 ddar.py:60] Depth 8/1000 time = 5.410529136657715
I0123 15:22:16.320120 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:22:16.320181 140197953007616 alphageometry.py:566] LM output (score=-2.688350): "n : C b f n 19 D b n f n 20 ;"
I0123 15:22:16.320216 140197953007616 alphageometry.py:567] Translation: "n = on_line n b f, on_bline n f b"

I0123 15:22:16.320255 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n b f, on_bline n f b ? eqangle k g k j k l k g"
I0123 15:22:16.320434 140197953007616 graph.py:498] 
I0123 15:22:16.320492 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n b f, on_bline n f b ? eqangle k g k j k l k g
I0123 15:22:19.472063 140197953007616 ddar.py:60] Depth 1/1000 time = 3.1062886714935303
I0123 15:22:25.218133 140197953007616 ddar.py:60] Depth 2/1000 time = 5.745835065841675
I0123 15:22:34.547586 140197953007616 ddar.py:60] Depth 3/1000 time = 9.329186201095581
I0123 15:22:43.662696 140197953007616 ddar.py:60] Depth 4/1000 time = 9.114800453186035
I0123 15:22:52.370039 140197953007616 ddar.py:60] Depth 5/1000 time = 8.707006931304932
I0123 15:23:00.935653 140197953007616 ddar.py:60] Depth 6/1000 time = 8.5647714138031
I0123 15:23:10.200755 140197953007616 ddar.py:60] Depth 7/1000 time = 9.212069988250732
I0123 15:23:10.203038 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:23:10.203107 140197953007616 alphageometry.py:566] LM output (score=-2.697972): "n : P b e j n 19 P b j e n 20 ;"
I0123 15:23:10.203143 140197953007616 alphageometry.py:567] Translation: "n = on_pline n j b e, on_pline n e b j"

I0123 15:23:10.203186 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_pline n j b e, on_pline n e b j ? eqangle k g k j k l k g"
I0123 15:23:10.203365 140197953007616 graph.py:498] 
I0123 15:23:10.203424 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_pline n j b e, on_pline n e b j ? eqangle k g k j k l k g
I0123 15:23:11.925555 140197953007616 ddar.py:60] Depth 1/1000 time = 1.6734843254089355
I0123 15:23:16.164708 140197953007616 ddar.py:60] Depth 2/1000 time = 4.238903522491455
I0123 15:23:21.289062 140197953007616 ddar.py:60] Depth 3/1000 time = 5.124093532562256
I0123 15:23:25.866797 140197953007616 ddar.py:60] Depth 4/1000 time = 4.577376365661621
I0123 15:23:30.980011 140197953007616 ddar.py:60] Depth 5/1000 time = 5.1121745109558105
I0123 15:23:37.128298 140197953007616 ddar.py:60] Depth 6/1000 time = 6.119908571243286
I0123 15:23:43.774647 140197953007616 ddar.py:60] Depth 7/1000 time = 6.6461076736450195
I0123 15:23:49.991452 140197953007616 ddar.py:60] Depth 8/1000 time = 6.197023153305054
I0123 15:23:49.992716 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:23:49.992778 140197953007616 alphageometry.py:566] LM output (score=-2.700090): "n : C b i n 19 D b i i n 20 ;"
I0123 15:23:49.992815 140197953007616 alphageometry.py:567] Translation: "n = on_line n b i, on_circle n i b"

I0123 15:23:49.992852 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n b i, on_circle n i b ? eqangle k g k j k l k g"
I0123 15:23:49.993029 140197953007616 graph.py:498] 
I0123 15:23:49.993088 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n b i, on_circle n i b ? eqangle k g k j k l k g
I0123 15:23:52.598474 140197953007616 ddar.py:60] Depth 1/1000 time = 2.562798023223877
I0123 15:23:57.690600 140197953007616 ddar.py:60] Depth 2/1000 time = 5.091886758804321
I0123 15:24:04.107795 140197953007616 ddar.py:60] Depth 3/1000 time = 6.416873455047607
I0123 15:24:09.997656 140197953007616 ddar.py:60] Depth 4/1000 time = 5.889407157897949
I0123 15:24:15.768203 140197953007616 ddar.py:60] Depth 5/1000 time = 5.7698163986206055
I0123 15:24:23.334254 140197953007616 ddar.py:60] Depth 6/1000 time = 7.542666435241699
I0123 15:24:30.760217 140197953007616 ddar.py:60] Depth 7/1000 time = 7.4255757331848145
I0123 15:24:37.635144 140197953007616 ddar.py:60] Depth 8/1000 time = 6.859677791595459
I0123 15:24:37.636378 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:24:37.636473 140197953007616 alphageometry.py:566] LM output (score=-2.746078): "n : C b i n 19 D b i b n 20 ;"
I0123 15:24:37.636509 140197953007616 alphageometry.py:567] Translation: "n = on_line n b i, on_circle n b i"

I0123 15:24:37.636548 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n b i, on_circle n b i ? eqangle k g k j k l k g"
I0123 15:24:37.636729 140197953007616 graph.py:498] 
I0123 15:24:37.636790 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n b i, on_circle n b i ? eqangle k g k j k l k g
I0123 15:24:40.821958 140197953007616 ddar.py:60] Depth 1/1000 time = 3.1419196128845215
I0123 15:24:46.009568 140197953007616 ddar.py:60] Depth 2/1000 time = 5.187248945236206
I0123 15:24:52.372616 140197953007616 ddar.py:60] Depth 3/1000 time = 6.362781763076782
I0123 15:24:58.313385 140197953007616 ddar.py:60] Depth 4/1000 time = 5.94047212600708
I0123 15:25:04.296214 140197953007616 ddar.py:60] Depth 5/1000 time = 5.982041835784912
I0123 15:25:11.429024 140197953007616 ddar.py:60] Depth 6/1000 time = 7.108633518218994
I0123 15:25:18.984212 140197953007616 ddar.py:60] Depth 7/1000 time = 7.554859638214111
I0123 15:25:26.000208 140197953007616 ddar.py:60] Depth 8/1000 time = 7.000755786895752
I0123 15:25:26.001432 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:25:26.001509 140197953007616 alphageometry.py:566] LM output (score=-2.795486): "n : P b e f n 19 P b n e f 20 ;"
I0123 15:25:26.001548 140197953007616 alphageometry.py:567] Translation: "n = on_pline n f b e, on_pline n b e f"

I0123 15:25:26.001588 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_pline n f b e, on_pline n b e f ? eqangle k g k j k l k g"
I0123 15:25:26.002246 140197953007616 graph.py:498] 
I0123 15:25:26.002326 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_pline n f b e, on_pline n b e f ? eqangle k g k j k l k g
I0123 15:25:27.917800 140197953007616 ddar.py:60] Depth 1/1000 time = 1.8652913570404053
I0123 15:25:32.515549 140197953007616 ddar.py:60] Depth 2/1000 time = 4.597516059875488
I0123 15:25:38.216762 140197953007616 ddar.py:60] Depth 3/1000 time = 5.700920343399048
I0123 15:25:44.052145 140197953007616 ddar.py:60] Depth 4/1000 time = 5.835011720657349
I0123 15:25:49.314327 140197953007616 ddar.py:60] Depth 5/1000 time = 5.261942386627197
I0123 15:25:55.814500 140197953007616 ddar.py:60] Depth 6/1000 time = 6.499821424484253
I0123 15:26:01.792541 140197953007616 ddar.py:60] Depth 7/1000 time = 5.977007150650024
I0123 15:26:09.122414 140197953007616 ddar.py:60] Depth 8/1000 time = 7.299891233444214
I0123 15:26:16.392786 140197953007616 ddar.py:60] Depth 9/1000 time = 7.270077466964722
I0123 15:26:23.617369 140197953007616 ddar.py:60] Depth 10/1000 time = 7.197863340377808
I0123 15:26:30.919316 140197953007616 ddar.py:60] Depth 11/1000 time = 7.290981769561768
I0123 15:26:30.920726 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:26:30.920809 140197953007616 alphageometry.py:566] LM output (score=-2.851301): "n : P b e d n 19 ;"
I0123 15:26:30.920864 140197953007616 alphageometry.py:567] Translation: "n = on_pline n d b e"

I0123 15:26:30.920907 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_pline n d b e ? eqangle k g k j k l k g"
I0123 15:26:30.921096 140197953007616 graph.py:498] 
I0123 15:26:30.921157 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_pline n d b e ? eqangle k g k j k l k g
I0123 15:26:32.678054 140197953007616 ddar.py:60] Depth 1/1000 time = 1.7144272327423096
I0123 15:26:36.108482 140197953007616 ddar.py:60] Depth 2/1000 time = 3.4301035404205322
I0123 15:26:40.703440 140197953007616 ddar.py:60] Depth 3/1000 time = 4.594712257385254
I0123 15:26:45.351901 140197953007616 ddar.py:60] Depth 4/1000 time = 4.648188829421997
I0123 15:26:49.489490 140197953007616 ddar.py:60] Depth 5/1000 time = 4.136793851852417
I0123 15:26:55.225147 140197953007616 ddar.py:60] Depth 6/1000 time = 5.710530042648315
I0123 15:27:00.310340 140197953007616 ddar.py:60] Depth 7/1000 time = 5.08492112159729
I0123 15:27:06.592823 140197953007616 ddar.py:60] Depth 8/1000 time = 6.282189846038818
I0123 15:27:11.899650 140197953007616 ddar.py:60] Depth 9/1000 time = 5.289402008056641
I0123 15:27:17.639025 140197953007616 ddar.py:60] Depth 10/1000 time = 5.726585626602173
I0123 15:27:17.639339 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:27:17.639417 140197953007616 alphageometry.py:566] LM output (score=-2.865092): "n : C k m n 19 D k m m n 20 ;"
I0123 15:27:17.639454 140197953007616 alphageometry.py:567] Translation: "n = on_line n k m, on_circle n m k"

I0123 15:27:17.639495 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n k m, on_circle n m k ? eqangle k g k j k l k g"
I0123 15:27:17.639682 140197953007616 graph.py:498] 
I0123 15:27:17.639744 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n k m, on_circle n m k ? eqangle k g k j k l k g
I0123 15:27:19.984161 140197953007616 ddar.py:60] Depth 1/1000 time = 2.2967052459716797
I0123 15:27:23.700722 140197953007616 ddar.py:60] Depth 2/1000 time = 3.716326951980591
I0123 15:27:28.683620 140197953007616 ddar.py:60] Depth 3/1000 time = 4.98258638381958
I0123 15:27:33.079305 140197953007616 ddar.py:60] Depth 4/1000 time = 4.395241975784302
I0123 15:27:38.067217 140197953007616 ddar.py:60] Depth 5/1000 time = 4.987157583236694
I0123 15:27:44.256069 140197953007616 ddar.py:60] Depth 6/1000 time = 6.159677505493164
I0123 15:27:51.014904 140197953007616 ddar.py:60] Depth 7/1000 time = 6.758543014526367
I0123 15:27:56.560843 140197953007616 ddar.py:60] Depth 8/1000 time = 5.526803255081177
I0123 15:27:56.562162 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:27:56.562232 140197953007616 alphageometry.py:566] LM output (score=-2.865365): "n : C i l n 19 D i n l n 20 ;"
I0123 15:27:56.562270 140197953007616 alphageometry.py:567] Translation: "n = on_line n i l, on_bline n l i"

I0123 15:27:56.562338 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n i l, on_bline n l i ? eqangle k g k j k l k g"
I0123 15:27:56.562538 140197953007616 graph.py:498] 
I0123 15:27:56.562600 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_line n i l, on_bline n l i ? eqangle k g k j k l k g
I0123 15:27:58.973209 140197953007616 ddar.py:60] Depth 1/1000 time = 2.368364095687866
I0123 15:28:03.301041 140197953007616 ddar.py:60] Depth 2/1000 time = 4.327597618103027
I0123 15:28:07.691101 140197953007616 ddar.py:60] Depth 3/1000 time = 4.389794826507568
I0123 15:28:12.599691 140197953007616 ddar.py:60] Depth 4/1000 time = 4.908263206481934
I0123 15:28:17.574692 140197953007616 ddar.py:60] Depth 5/1000 time = 4.9743101596832275
I0123 15:28:22.919490 140197953007616 ddar.py:60] Depth 6/1000 time = 5.321169853210449
I0123 15:28:29.448845 140197953007616 ddar.py:60] Depth 7/1000 time = 6.529080629348755
I0123 15:28:35.350667 140197953007616 ddar.py:60] Depth 8/1000 time = 5.886957883834839
I0123 15:28:35.351857 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:28:35.351923 140197953007616 alphageometry.py:566] LM output (score=-2.992164): "n : P b e c n 19 ;"
I0123 15:28:35.351958 140197953007616 alphageometry.py:567] Translation: "n = on_pline n c b e"

I0123 15:28:35.351997 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_pline n c b e ? eqangle k g k j k l k g"
I0123 15:28:35.352187 140197953007616 graph.py:498] 
I0123 15:28:35.352249 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_pline n c b e ? eqangle k g k j k l k g
I0123 15:28:37.096902 140197953007616 ddar.py:60] Depth 1/1000 time = 1.703038215637207
I0123 15:28:40.658111 140197953007616 ddar.py:60] Depth 2/1000 time = 3.560962438583374
I0123 15:28:45.490848 140197953007616 ddar.py:60] Depth 3/1000 time = 4.832464933395386
I0123 15:28:49.719463 140197953007616 ddar.py:60] Depth 4/1000 time = 4.2282867431640625
I0123 15:28:53.950636 140197953007616 ddar.py:60] Depth 5/1000 time = 4.230393171310425
I0123 15:28:59.793310 140197953007616 ddar.py:60] Depth 6/1000 time = 5.81723165512085
I0123 15:29:05.614971 140197953007616 ddar.py:60] Depth 7/1000 time = 5.821382999420166
I0123 15:29:10.770924 140197953007616 ddar.py:60] Depth 8/1000 time = 5.137179613113403
I0123 15:29:10.772105 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:29:10.772173 140197953007616 alphageometry.py:566] LM output (score=-3.029051): "n : P b e f n 19 ;"
I0123 15:29:10.772208 140197953007616 alphageometry.py:567] Translation: "n = on_pline n f b e"

I0123 15:29:10.772247 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_pline n f b e ? eqangle k g k j k l k g"
I0123 15:29:10.772480 140197953007616 graph.py:498] 
I0123 15:29:10.772545 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_pline n f b e ? eqangle k g k j k l k g
I0123 15:29:12.512444 140197953007616 ddar.py:60] Depth 1/1000 time = 1.6979448795318604
I0123 15:29:16.563544 140197953007616 ddar.py:60] Depth 2/1000 time = 4.050870895385742
I0123 15:29:20.685685 140197953007616 ddar.py:60] Depth 3/1000 time = 4.1218297481536865
I0123 15:29:25.404226 140197953007616 ddar.py:60] Depth 4/1000 time = 4.718112230300903
I0123 15:29:29.498425 140197953007616 ddar.py:60] Depth 5/1000 time = 4.093446731567383
I0123 15:29:35.229142 140197953007616 ddar.py:60] Depth 6/1000 time = 5.705272197723389
I0123 15:29:40.865150 140197953007616 ddar.py:60] Depth 7/1000 time = 5.635729074478149
I0123 15:29:46.549569 140197953007616 ddar.py:60] Depth 8/1000 time = 5.6668572425842285
I0123 15:29:46.550755 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:29:46.550822 140197953007616 alphageometry.py:566] LM output (score=-3.035220): "n : P b i k n 19 ;"
I0123 15:29:46.550858 140197953007616 alphageometry.py:567] Translation: "n = on_pline n k b i"

I0123 15:29:46.550895 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_pline n k b i ? eqangle k g k j k l k g"
I0123 15:29:46.551096 140197953007616 graph.py:498] 
I0123 15:29:46.551157 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_pline n k b i ? eqangle k g k j k l k g
I0123 15:29:48.228683 140197953007616 ddar.py:60] Depth 1/1000 time = 1.6367440223693848
I0123 15:29:51.670819 140197953007616 ddar.py:60] Depth 2/1000 time = 3.4419057369232178
I0123 15:29:56.380557 140197953007616 ddar.py:60] Depth 3/1000 time = 4.709484815597534
I0123 15:30:00.565036 140197953007616 ddar.py:60] Depth 4/1000 time = 4.18416953086853
I0123 15:30:04.613411 140197953007616 ddar.py:60] Depth 5/1000 time = 4.047581195831299
I0123 15:30:10.161583 140197953007616 ddar.py:60] Depth 6/1000 time = 5.524096488952637
I0123 15:30:15.663024 140197953007616 ddar.py:60] Depth 7/1000 time = 5.501180648803711
I0123 15:30:21.309400 140197953007616 ddar.py:60] Depth 8/1000 time = 5.630954742431641
I0123 15:30:21.310621 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:30:21.310700 140197953007616 alphageometry.py:566] LM output (score=-3.043934): "n : P b e l n 19 ;"
I0123 15:30:21.310739 140197953007616 alphageometry.py:567] Translation: "n = on_pline n l b e"

I0123 15:30:21.310780 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_pline n l b e ? eqangle k g k j k l k g"
I0123 15:30:21.310966 140197953007616 graph.py:498] 
I0123 15:30:21.311030 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_pline n l b e ? eqangle k g k j k l k g
I0123 15:30:23.640449 140197953007616 ddar.py:60] Depth 1/1000 time = 2.2874929904937744
I0123 15:30:27.203911 140197953007616 ddar.py:60] Depth 2/1000 time = 3.5632336139678955
I0123 15:30:31.347415 140197953007616 ddar.py:60] Depth 3/1000 time = 4.1432483196258545
I0123 15:30:36.248657 140197953007616 ddar.py:60] Depth 4/1000 time = 4.900942802429199
I0123 15:30:40.439909 140197953007616 ddar.py:60] Depth 5/1000 time = 4.190425395965576
I0123 15:30:46.271888 140197953007616 ddar.py:60] Depth 6/1000 time = 5.806348562240601
I0123 15:30:51.887618 140197953007616 ddar.py:60] Depth 7/1000 time = 5.61548638343811
I0123 15:30:57.587618 140197953007616 ddar.py:60] Depth 8/1000 time = 5.6832451820373535
I0123 15:30:57.588792 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:30:57.588852 140197953007616 alphageometry.py:566] LM output (score=-3.067165): "n : P b e k n 19 ;"
I0123 15:30:57.588890 140197953007616 alphageometry.py:567] Translation: "n = on_pline n k b e"

I0123 15:30:57.588928 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_pline n k b e ? eqangle k g k j k l k g"
I0123 15:30:57.589108 140197953007616 graph.py:498] 
I0123 15:30:57.589170 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m g h, on_bline m h g; n = on_pline n k b e ? eqangle k g k j k l k g
I0123 15:30:59.331040 140197953007616 ddar.py:60] Depth 1/1000 time = 1.700397253036499
I0123 15:31:02.852968 140197953007616 ddar.py:60] Depth 2/1000 time = 3.5216891765594482
I0123 15:31:06.963523 140197953007616 ddar.py:60] Depth 3/1000 time = 4.110313415527344
I0123 15:31:11.757438 140197953007616 ddar.py:60] Depth 4/1000 time = 4.793583631515503
I0123 15:31:15.941492 140197953007616 ddar.py:60] Depth 5/1000 time = 4.1831254959106445
I0123 15:31:21.816013 140197953007616 ddar.py:60] Depth 6/1000 time = 5.8489298820495605
I0123 15:31:27.573492 140197953007616 ddar.py:60] Depth 7/1000 time = 5.757217168807983
I0123 15:31:33.497614 140197953007616 ddar.py:60] Depth 8/1000 time = 5.907760381698608
I0123 15:31:33.498855 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:31:33.498930 140197953007616 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : T g h h m 17 ; x00
I0123 15:31:40.549094 140197953007616 alphageometry.py:566] LM output (score=-0.518179): "n : P g n h m 18 ;"
I0123 15:31:40.549279 140197953007616 alphageometry.py:567] Translation: "n = on_pline n g h m"

I0123 15:31:40.549321 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n g h m ? eqangle k g k j k l k g"
I0123 15:31:40.549488 140197953007616 graph.py:498] 
I0123 15:31:40.549543 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n g h m ? eqangle k g k j k l k g
I0123 15:31:42.253743 140197953007616 ddar.py:60] Depth 1/1000 time = 1.6613068580627441
I0123 15:31:45.857095 140197953007616 ddar.py:60] Depth 2/1000 time = 3.603097438812256
I0123 15:31:50.779227 140197953007616 ddar.py:60] Depth 3/1000 time = 4.921877861022949
I0123 15:31:55.084552 140197953007616 ddar.py:60] Depth 4/1000 time = 4.305034160614014
I0123 15:32:00.403603 140197953007616 ddar.py:60] Depth 5/1000 time = 5.292333364486694
I0123 15:32:06.182363 140197953007616 ddar.py:60] Depth 6/1000 time = 5.778536319732666
I0123 15:32:12.067061 140197953007616 ddar.py:60] Depth 7/1000 time = 5.868215322494507
I0123 15:32:12.068230 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:32:12.068304 140197953007616 alphageometry.py:566] LM output (score=-1.067513): "n : P g h m n 18 P g n h m 19 ;"
I0123 15:32:12.068343 140197953007616 alphageometry.py:567] Translation: "n = on_pline n m g h, on_pline n g h m"

I0123 15:32:12.068382 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n m g h, on_pline n g h m ? eqangle k g k j k l k g"
I0123 15:32:12.068557 140197953007616 graph.py:498] 
I0123 15:32:12.068612 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n m g h, on_pline n g h m ? eqangle k g k j k l k g
I0123 15:32:13.961564 140197953007616 ddar.py:60] Depth 1/1000 time = 1.8410253524780273
I0123 15:32:18.337589 140197953007616 ddar.py:60] Depth 2/1000 time = 4.375738143920898
I0123 15:32:23.993448 140197953007616 ddar.py:60] Depth 3/1000 time = 5.655465841293335
I0123 15:32:29.675532 140197953007616 ddar.py:60] Depth 4/1000 time = 5.681788682937622
I0123 15:32:36.346368 140197953007616 ddar.py:60] Depth 5/1000 time = 6.639459609985352
I0123 15:32:43.078007 140197953007616 ddar.py:60] Depth 6/1000 time = 6.7313618659973145
I0123 15:32:49.207446 140197953007616 ddar.py:60] Depth 7/1000 time = 6.0960001945495605
I0123 15:32:49.208641 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:32:49.208712 140197953007616 alphageometry.py:566] LM output (score=-1.656092): "n : P g h m n 18 ;"
I0123 15:32:49.208748 140197953007616 alphageometry.py:567] Translation: "n = on_pline n m g h"

I0123 15:32:49.208788 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n m g h ? eqangle k g k j k l k g"
I0123 15:32:49.208968 140197953007616 graph.py:498] 
I0123 15:32:49.209028 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n m g h ? eqangle k g k j k l k g
I0123 15:32:50.850115 140197953007616 ddar.py:60] Depth 1/1000 time = 1.5967302322387695
I0123 15:32:54.192254 140197953007616 ddar.py:60] Depth 2/1000 time = 3.341897487640381
I0123 15:32:58.123761 140197953007616 ddar.py:60] Depth 3/1000 time = 3.9312562942504883
I0123 15:33:02.066359 140197953007616 ddar.py:60] Depth 4/1000 time = 3.9423069953918457
I0123 15:33:07.670951 140197953007616 ddar.py:60] Depth 5/1000 time = 5.5781567096710205
I0123 15:33:12.549599 140197953007616 ddar.py:60] Depth 6/1000 time = 4.878368377685547
I0123 15:33:18.010754 140197953007616 ddar.py:60] Depth 7/1000 time = 5.443746566772461
I0123 15:33:18.011877 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:33:18.011963 140197953007616 alphageometry.py:566] LM output (score=-2.230966): "n : P h m g n 18 ;"
I0123 15:33:18.012000 140197953007616 alphageometry.py:567] Translation: "n = on_pline n g h m"

I0123 15:33:18.012040 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n g h m ? eqangle k g k j k l k g"
I0123 15:33:18.012220 140197953007616 graph.py:498] 
I0123 15:33:18.012281 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n g h m ? eqangle k g k j k l k g
I0123 15:33:19.734346 140197953007616 ddar.py:60] Depth 1/1000 time = 1.678434133529663
I0123 15:33:23.479951 140197953007616 ddar.py:60] Depth 2/1000 time = 3.745384931564331
I0123 15:33:27.718115 140197953007616 ddar.py:60] Depth 3/1000 time = 4.237868309020996
I0123 15:33:31.923161 140197953007616 ddar.py:60] Depth 4/1000 time = 4.204759836196899
I0123 15:33:37.828495 140197953007616 ddar.py:60] Depth 5/1000 time = 5.878116607666016
I0123 15:33:42.979910 140197953007616 ddar.py:60] Depth 6/1000 time = 5.1511311531066895
I0123 15:33:48.775862 140197953007616 ddar.py:60] Depth 7/1000 time = 5.77972412109375
I0123 15:33:48.777005 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:33:48.777086 140197953007616 alphageometry.py:566] LM output (score=-2.316217): "n : P i l m n 18 ;"
I0123 15:33:48.777123 140197953007616 alphageometry.py:567] Translation: "n = on_pline n m i l"

I0123 15:33:48.777163 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n m i l ? eqangle k g k j k l k g"
I0123 15:33:48.777358 140197953007616 graph.py:498] 
I0123 15:33:48.777420 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n m i l ? eqangle k g k j k l k g
I0123 15:33:50.428117 140197953007616 ddar.py:60] Depth 1/1000 time = 1.6065170764923096
I0123 15:33:53.752601 140197953007616 ddar.py:60] Depth 2/1000 time = 3.324256181716919
I0123 15:33:57.674298 140197953007616 ddar.py:60] Depth 3/1000 time = 3.921433448791504
I0123 15:34:00.966988 140197953007616 ddar.py:60] Depth 4/1000 time = 3.2923505306243896
I0123 15:34:06.493631 140197953007616 ddar.py:60] Depth 5/1000 time = 5.501181364059448
I0123 15:34:11.194282 140197953007616 ddar.py:60] Depth 6/1000 time = 4.7003796100616455
I0123 15:34:16.003329 140197953007616 ddar.py:60] Depth 7/1000 time = 4.792499303817749
I0123 15:34:16.004482 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:34:16.004572 140197953007616 alphageometry.py:566] LM output (score=-2.342539): "n : P i j l n 18 ;"
I0123 15:34:16.004610 140197953007616 alphageometry.py:567] Translation: "n = on_pline n l i j"

I0123 15:34:16.004652 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n l i j ? eqangle k g k j k l k g"
I0123 15:34:16.004865 140197953007616 graph.py:498] 
I0123 15:34:16.004926 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n l i j ? eqangle k g k j k l k g
I0123 15:34:16.987980 140197953007616 ddar.py:60] Depth 1/1000 time = 0.9381542205810547
I0123 15:34:20.352854 140197953007616 ddar.py:60] Depth 2/1000 time = 3.3645031452178955
I0123 15:34:24.246807 140197953007616 ddar.py:60] Depth 3/1000 time = 3.89369797706604
I0123 15:34:28.140799 140197953007616 ddar.py:60] Depth 4/1000 time = 3.893700122833252
I0123 15:34:33.589557 140197953007616 ddar.py:60] Depth 5/1000 time = 5.423056364059448
I0123 15:34:38.458147 140197953007616 ddar.py:60] Depth 6/1000 time = 4.868282794952393
I0123 15:34:43.291608 140197953007616 ddar.py:60] Depth 7/1000 time = 4.815876483917236
I0123 15:34:43.292702 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:34:43.292917 140197953007616 alphageometry.py:566] LM output (score=-2.349956): "n : C b h n 18 D b n h n 19 ;"
I0123 15:34:43.292962 140197953007616 alphageometry.py:567] Translation: "n = on_line n b h, on_bline n h b"

I0123 15:34:43.293001 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_line n b h, on_bline n h b ? eqangle k g k j k l k g"
I0123 15:34:43.293202 140197953007616 graph.py:498] 
I0123 15:34:43.293263 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_line n b h, on_bline n h b ? eqangle k g k j k l k g
I0123 15:34:44.369696 140197953007616 ddar.py:60] Depth 1/1000 time = 1.033506155014038
I0123 15:34:47.859970 140197953007616 ddar.py:60] Depth 2/1000 time = 3.490032196044922
I0123 15:34:52.054110 140197953007616 ddar.py:60] Depth 3/1000 time = 4.193899631500244
I0123 15:34:56.286541 140197953007616 ddar.py:60] Depth 4/1000 time = 4.232133865356445
I0123 15:35:00.436068 140197953007616 ddar.py:60] Depth 5/1000 time = 4.148735284805298
I0123 15:35:05.521553 140197953007616 ddar.py:60] Depth 6/1000 time = 5.061392545700073
I0123 15:35:10.566302 140197953007616 ddar.py:60] Depth 7/1000 time = 5.044430494308472
I0123 15:35:15.786849 140197953007616 ddar.py:60] Depth 8/1000 time = 5.201446533203125
I0123 15:35:15.788126 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:35:15.788201 140197953007616 alphageometry.py:566] LM output (score=-2.352989): "n : P i l k n 18 ;"
I0123 15:35:15.788240 140197953007616 alphageometry.py:567] Translation: "n = on_pline n k i l"

I0123 15:35:15.788284 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n k i l ? eqangle k g k j k l k g"
I0123 15:35:15.788466 140197953007616 graph.py:498] 
I0123 15:35:15.788527 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n k i l ? eqangle k g k j k l k g
I0123 15:35:16.794654 140197953007616 ddar.py:60] Depth 1/1000 time = 0.9624588489532471
I0123 15:35:20.106359 140197953007616 ddar.py:60] Depth 2/1000 time = 3.311444044113159
I0123 15:35:24.015176 140197953007616 ddar.py:60] Depth 3/1000 time = 3.9085679054260254
I0123 15:35:27.947235 140197953007616 ddar.py:60] Depth 4/1000 time = 3.9317710399627686
I0123 15:35:32.838877 140197953007616 ddar.py:60] Depth 5/1000 time = 4.867153167724609
I0123 15:35:37.729364 140197953007616 ddar.py:60] Depth 6/1000 time = 4.890096187591553
I0123 15:35:43.159126 140197953007616 ddar.py:60] Depth 7/1000 time = 5.411859035491943
I0123 15:35:43.160324 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:35:43.160387 140197953007616 alphageometry.py:566] LM output (score=-2.761290): "n : P b e m n 18 ;"
I0123 15:35:43.160423 140197953007616 alphageometry.py:567] Translation: "n = on_pline n m b e"

I0123 15:35:43.160465 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n m b e ? eqangle k g k j k l k g"
I0123 15:35:43.160665 140197953007616 graph.py:498] 
I0123 15:35:43.160727 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n m b e ? eqangle k g k j k l k g
I0123 15:35:44.175710 140197953007616 ddar.py:60] Depth 1/1000 time = 0.9666409492492676
I0123 15:35:47.551331 140197953007616 ddar.py:60] Depth 2/1000 time = 3.375385046005249
I0123 15:35:51.534333 140197953007616 ddar.py:60] Depth 3/1000 time = 3.9827234745025635
I0123 15:35:55.527497 140197953007616 ddar.py:60] Depth 4/1000 time = 3.9927895069122314
I0123 15:36:01.094897 140197953007616 ddar.py:60] Depth 5/1000 time = 5.541526794433594
I0123 15:36:06.044779 140197953007616 ddar.py:60] Depth 6/1000 time = 4.949623346328735
I0123 15:36:11.133354 140197953007616 ddar.py:60] Depth 7/1000 time = 5.070748567581177
I0123 15:36:11.134564 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:36:11.134639 140197953007616 alphageometry.py:566] LM output (score=-2.785395): "n : C c i n 18 D c n i n 19 ;"
I0123 15:36:11.134679 140197953007616 alphageometry.py:567] Translation: "n = on_line n c i, on_bline n i c"

I0123 15:36:11.134721 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_line n c i, on_bline n i c ? eqangle k g k j k l k g"
I0123 15:36:11.134907 140197953007616 graph.py:498] 
I0123 15:36:11.134967 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_line n c i, on_bline n i c ? eqangle k g k j k l k g
I0123 15:36:12.229693 140197953007616 ddar.py:60] Depth 1/1000 time = 1.0520250797271729
I0123 15:36:15.668274 140197953007616 ddar.py:60] Depth 2/1000 time = 3.4383628368377686
I0123 15:36:19.797894 140197953007616 ddar.py:60] Depth 3/1000 time = 4.1294121742248535
I0123 15:36:23.984647 140197953007616 ddar.py:60] Depth 4/1000 time = 4.186460733413696
I0123 15:36:28.231968 140197953007616 ddar.py:60] Depth 5/1000 time = 4.246456861495972
I0123 15:36:33.507142 140197953007616 ddar.py:60] Depth 6/1000 time = 5.249439001083374
I0123 15:36:38.564718 140197953007616 ddar.py:60] Depth 7/1000 time = 5.057333469390869
I0123 15:36:43.739470 140197953007616 ddar.py:60] Depth 8/1000 time = 5.15554141998291
I0123 15:36:43.740722 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:36:43.740783 140197953007616 alphageometry.py:566] LM output (score=-2.803877): "n : C b i n 18 D b n i n 19 ;"
I0123 15:36:43.740818 140197953007616 alphageometry.py:567] Translation: "n = on_line n b i, on_bline n i b"

I0123 15:36:43.740858 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_line n b i, on_bline n i b ? eqangle k g k j k l k g"
I0123 15:36:43.741039 140197953007616 graph.py:498] 
I0123 15:36:43.741101 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_line n b i, on_bline n i b ? eqangle k g k j k l k g
I0123 15:36:45.832711 140197953007616 ddar.py:60] Depth 1/1000 time = 2.0449182987213135
I0123 15:36:51.289630 140197953007616 ddar.py:60] Depth 2/1000 time = 5.456563234329224
I0123 15:36:56.605674 140197953007616 ddar.py:60] Depth 3/1000 time = 5.315756320953369
I0123 15:37:01.975727 140197953007616 ddar.py:60] Depth 4/1000 time = 5.369702100753784
I0123 15:37:07.408566 140197953007616 ddar.py:60] Depth 5/1000 time = 5.431995391845703
I0123 15:37:13.943864 140197953007616 ddar.py:60] Depth 6/1000 time = 6.511945962905884
I0123 15:37:20.337244 140197953007616 ddar.py:60] Depth 7/1000 time = 6.393106460571289
I0123 15:37:27.520488 140197953007616 ddar.py:60] Depth 8/1000 time = 7.166350603103638
I0123 15:37:27.521700 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:37:27.521782 140197953007616 alphageometry.py:566] LM output (score=-2.818202): "n : P i l j n 18 ;"
I0123 15:37:27.521824 140197953007616 alphageometry.py:567] Translation: "n = on_pline n j i l"

I0123 15:37:27.521866 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n j i l ? eqangle k g k j k l k g"
I0123 15:37:27.522051 140197953007616 graph.py:498] 
I0123 15:37:27.522117 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n j i l ? eqangle k g k j k l k g
I0123 15:37:29.243822 140197953007616 ddar.py:60] Depth 1/1000 time = 1.6781976222991943
I0123 15:37:31.926941 140197953007616 ddar.py:60] Depth 2/1000 time = 2.682875871658325
I0123 15:37:35.825341 140197953007616 ddar.py:60] Depth 3/1000 time = 3.898134469985962
I0123 15:37:39.828469 140197953007616 ddar.py:60] Depth 4/1000 time = 4.002842664718628
I0123 15:37:44.868789 140197953007616 ddar.py:60] Depth 5/1000 time = 5.014812707901001
I0123 15:37:50.431731 140197953007616 ddar.py:60] Depth 6/1000 time = 5.56261944770813
I0123 15:37:55.380588 140197953007616 ddar.py:60] Depth 7/1000 time = 4.931581735610962
I0123 15:37:55.381879 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:37:55.381960 140197953007616 alphageometry.py:566] LM output (score=-2.839911): "n : P i l l n 18 ;"
I0123 15:37:55.382003 140197953007616 alphageometry.py:567] Translation: "ERROR: Invalid predicate P i l l n"

I0123 15:37:55.382042 140197953007616 alphageometry.py:566] LM output (score=-2.844192): "n : P i j k n 18 ;"
I0123 15:37:55.382074 140197953007616 alphageometry.py:567] Translation: "n = on_pline n k i j"

I0123 15:37:55.382142 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n k i j ? eqangle k g k j k l k g"
I0123 15:37:55.382328 140197953007616 graph.py:498] 
I0123 15:37:55.382396 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n k i j ? eqangle k g k j k l k g
I0123 15:37:56.342261 140197953007616 ddar.py:60] Depth 1/1000 time = 0.9140617847442627
I0123 15:37:59.764689 140197953007616 ddar.py:60] Depth 2/1000 time = 3.4221928119659424
I0123 15:38:03.822483 140197953007616 ddar.py:60] Depth 3/1000 time = 4.057495832443237
I0123 15:38:07.876901 140197953007616 ddar.py:60] Depth 4/1000 time = 4.054089546203613
I0123 15:38:12.806039 140197953007616 ddar.py:60] Depth 5/1000 time = 4.902737140655518
I0123 15:38:17.732903 140197953007616 ddar.py:60] Depth 6/1000 time = 4.926586866378784
I0123 15:38:22.765686 140197953007616 ddar.py:60] Depth 7/1000 time = 5.015570878982544
I0123 15:38:22.766850 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:38:22.766918 140197953007616 alphageometry.py:566] LM output (score=-2.983360): "n : P g n h m 18 T g n m o 19 ;"
I0123 15:38:22.766957 140197953007616 alphageometry.py:567] Translation: "ERROR: point o does not exist."

I0123 15:38:22.766994 140197953007616 alphageometry.py:566] LM output (score=-3.013283): "n : C c g n 18 D c n g n 19 ;"
I0123 15:38:22.767021 140197953007616 alphageometry.py:567] Translation: "n = on_line n c g, on_bline n g c"

I0123 15:38:22.767052 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_line n c g, on_bline n g c ? eqangle k g k j k l k g"
I0123 15:38:22.767235 140197953007616 graph.py:498] 
I0123 15:38:22.767300 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_line n c g, on_bline n g c ? eqangle k g k j k l k g
I0123 15:38:24.681348 140197953007616 ddar.py:60] Depth 1/1000 time = 1.8699727058410645
I0123 15:38:28.315982 140197953007616 ddar.py:60] Depth 2/1000 time = 3.6343767642974854
I0123 15:38:33.259108 140197953007616 ddar.py:60] Depth 3/1000 time = 4.942867755889893
I0123 15:38:37.601617 140197953007616 ddar.py:60] Depth 4/1000 time = 4.342126846313477
I0123 15:38:41.866230 140197953007616 ddar.py:60] Depth 5/1000 time = 4.263710021972656
I0123 15:38:47.827375 140197953007616 ddar.py:60] Depth 6/1000 time = 5.2860634326934814
I0123 15:38:53.714683 140197953007616 ddar.py:60] Depth 7/1000 time = 5.887051105499268
I0123 15:38:59.795013 140197953007616 ddar.py:60] Depth 8/1000 time = 6.0628015995025635
I0123 15:38:59.796230 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:38:59.796302 140197953007616 alphageometry.py:566] LM output (score=-3.114094): "n : P h m h n 18 ;"
I0123 15:38:59.796338 140197953007616 alphageometry.py:567] Translation: "ERROR: Invalid predicate P h m h n"

I0123 15:38:59.796375 140197953007616 alphageometry.py:566] LM output (score=-3.123618): "n : C b c n 18 T a n b c 19 ;"
I0123 15:38:59.796403 140197953007616 alphageometry.py:567] Translation: "n = on_line n b c, on_tline n a b c"

I0123 15:38:59.796454 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_line n b c, on_tline n a b c ? eqangle k g k j k l k g"
I0123 15:38:59.796639 140197953007616 graph.py:498] 
I0123 15:38:59.796700 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_line n b c, on_tline n a b c ? eqangle k g k j k l k g
I0123 15:39:02.445638 140197953007616 ddar.py:60] Depth 1/1000 time = 2.604033946990967
I0123 15:39:06.435467 140197953007616 ddar.py:60] Depth 2/1000 time = 3.9895784854888916
I0123 15:39:12.356904 140197953007616 ddar.py:60] Depth 3/1000 time = 5.921180725097656
I0123 15:39:17.654579 140197953007616 ddar.py:60] Depth 4/1000 time = 5.297357082366943
I0123 15:39:23.588311 140197953007616 ddar.py:60] Depth 5/1000 time = 5.933390140533447
I0123 15:39:29.683042 140197953007616 ddar.py:60] Depth 6/1000 time = 6.092732906341553
I0123 15:39:36.071855 140197953007616 ddar.py:60] Depth 7/1000 time = 6.388476610183716
I0123 15:39:44.206588 140197953007616 ddar.py:60] Depth 8/1000 time = 8.134387016296387
I0123 15:39:50.878811 140197953007616 ddar.py:60] Depth 9/1000 time = 6.671949625015259
I0123 15:39:58.398272 140197953007616 ddar.py:60] Depth 10/1000 time = 7.432330846786499
I0123 15:39:58.399704 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:39:58.399766 140197953007616 alphageometry.py:566] LM output (score=-3.125061): "n : C a b n 18 D a n b n 19 ;"
I0123 15:39:58.399803 140197953007616 alphageometry.py:567] Translation: "n = on_line n a b, on_bline n b a"

I0123 15:39:58.399842 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_line n a b, on_bline n b a ? eqangle k g k j k l k g"
I0123 15:39:58.400021 140197953007616 graph.py:498] 
I0123 15:39:58.400084 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_line n a b, on_bline n b a ? eqangle k g k j k l k g
I0123 15:40:01.148594 140197953007616 ddar.py:60] Depth 1/1000 time = 2.7069499492645264
I0123 15:40:06.604864 140197953007616 ddar.py:60] Depth 2/1000 time = 5.456015586853027
I0123 15:40:13.932622 140197953007616 ddar.py:60] Depth 3/1000 time = 7.327474355697632
I0123 15:40:20.942645 140197953007616 ddar.py:60] Depth 4/1000 time = 7.009725570678711
I0123 15:40:28.000657 140197953007616 ddar.py:60] Depth 5/1000 time = 7.0572333335876465
I0123 15:40:35.666695 140197953007616 ddar.py:60] Depth 6/1000 time = 7.624040603637695
I0123 15:40:35.667877 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:40:35.667937 140197953007616 alphageometry.py:566] LM output (score=-3.127557): "n : C b g n 18 D b n g n 19 ;"
I0123 15:40:35.667974 140197953007616 alphageometry.py:567] Translation: "n = on_line n b g, on_bline n g b"

I0123 15:40:35.668012 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_line n b g, on_bline n g b ? eqangle k g k j k l k g"
I0123 15:40:35.668211 140197953007616 graph.py:498] 
I0123 15:40:35.668273 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_line n b g, on_bline n g b ? eqangle k g k j k l k g
I0123 15:40:37.602552 140197953007616 ddar.py:60] Depth 1/1000 time = 1.8926424980163574
I0123 15:40:41.287829 140197953007616 ddar.py:60] Depth 2/1000 time = 3.685049057006836
I0123 15:40:46.320927 140197953007616 ddar.py:60] Depth 3/1000 time = 5.032833814620972
I0123 15:40:50.705595 140197953007616 ddar.py:60] Depth 4/1000 time = 4.3843605518341064
I0123 15:40:54.989813 140197953007616 ddar.py:60] Depth 5/1000 time = 4.2834813594818115
I0123 15:41:01.071241 140197953007616 ddar.py:60] Depth 6/1000 time = 6.056704044342041
I0123 15:41:07.150186 140197953007616 ddar.py:60] Depth 7/1000 time = 6.078609228134155
I0123 15:41:12.484736 140197953007616 ddar.py:60] Depth 8/1000 time = 5.317240238189697
I0123 15:41:12.485957 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:41:12.486042 140197953007616 alphageometry.py:566] LM output (score=-3.141448): "n : C c h n 18 D c n h n 19 ;"
I0123 15:41:12.486081 140197953007616 alphageometry.py:567] Translation: "n = on_line n c h, on_bline n h c"

I0123 15:41:12.486124 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_line n c h, on_bline n h c ? eqangle k g k j k l k g"
I0123 15:41:12.486318 140197953007616 graph.py:498] 
I0123 15:41:12.486384 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_line n c h, on_bline n h c ? eqangle k g k j k l k g
I0123 15:41:15.292538 140197953007616 ddar.py:60] Depth 1/1000 time = 2.764284372329712
I0123 15:41:20.137884 140197953007616 ddar.py:60] Depth 2/1000 time = 4.845093727111816
I0123 15:41:25.666918 140197953007616 ddar.py:60] Depth 3/1000 time = 5.528702974319458
I0123 15:41:30.410278 140197953007616 ddar.py:60] Depth 4/1000 time = 4.742932558059692
I0123 15:41:35.783898 140197953007616 ddar.py:60] Depth 5/1000 time = 5.3728673458099365
I0123 15:41:43.020347 140197953007616 ddar.py:60] Depth 6/1000 time = 7.213145971298218
I0123 15:41:49.564250 140197953007616 ddar.py:60] Depth 7/1000 time = 6.543626546859741
I0123 15:41:55.929048 140197953007616 ddar.py:60] Depth 8/1000 time = 6.348971843719482
I0123 15:41:55.930197 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:41:55.930266 140197953007616 alphageometry.py:566] LM output (score=-3.203276): "n : C b c n 18 D b n c n 19 ;"
I0123 15:41:55.930304 140197953007616 alphageometry.py:567] Translation: "n = on_line n b c, on_bline n c b"

I0123 15:41:55.930343 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_line n b c, on_bline n c b ? eqangle k g k j k l k g"
I0123 15:41:55.930529 140197953007616 graph.py:498] 
I0123 15:41:55.930592 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_line n b c, on_bline n c b ? eqangle k g k j k l k g
I0123 15:41:57.899313 140197953007616 ddar.py:60] Depth 1/1000 time = 1.9278364181518555
I0123 15:42:02.150186 140197953007616 ddar.py:60] Depth 2/1000 time = 4.250571250915527
I0123 15:42:10.365951 140197953007616 ddar.py:60] Depth 3/1000 time = 8.215382099151611
I0123 15:42:17.519755 140197953007616 ddar.py:60] Depth 4/1000 time = 7.1535069942474365
I0123 15:42:24.804204 140197953007616 ddar.py:60] Depth 5/1000 time = 7.284156799316406
I0123 15:42:31.205457 140197953007616 ddar.py:60] Depth 6/1000 time = 6.400407552719116
I0123 15:42:38.427026 140197953007616 ddar.py:60] Depth 7/1000 time = 7.157308340072632
I0123 15:42:38.428340 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:42:38.428427 140197953007616 alphageometry.py:566] LM output (score=-3.239348): "n : P b n h m 18 ;"
I0123 15:42:38.428465 140197953007616 alphageometry.py:567] Translation: "n = on_pline n b h m"

I0123 15:42:38.428508 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n b h m ? eqangle k g k j k l k g"
I0123 15:42:38.428704 140197953007616 graph.py:498] 
I0123 15:42:38.428776 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n b h m ? eqangle k g k j k l k g
I0123 15:42:40.260864 140197953007616 ddar.py:60] Depth 1/1000 time = 1.7877545356750488
I0123 15:42:43.878067 140197953007616 ddar.py:60] Depth 2/1000 time = 3.616885185241699
I0123 15:42:48.067577 140197953007616 ddar.py:60] Depth 3/1000 time = 4.189252614974976
I0123 15:42:51.555104 140197953007616 ddar.py:60] Depth 4/1000 time = 3.487236738204956
I0123 15:42:57.465085 140197953007616 ddar.py:60] Depth 5/1000 time = 5.883450508117676
I0123 15:43:02.686005 140197953007616 ddar.py:60] Depth 6/1000 time = 5.220456838607788
I0123 15:43:07.912513 140197953007616 ddar.py:60] Depth 7/1000 time = 5.210201740264893
I0123 15:43:07.913662 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:43:07.913732 140197953007616 alphageometry.py:566] LM output (score=-3.250793): "n : P b i k n 18 ;"
I0123 15:43:07.913769 140197953007616 alphageometry.py:567] Translation: "n = on_pline n k b i"

I0123 15:43:07.913807 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n k b i ? eqangle k g k j k l k g"
I0123 15:43:07.914003 140197953007616 graph.py:498] 
I0123 15:43:07.914065 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n k b i ? eqangle k g k j k l k g
I0123 15:43:08.882518 140197953007616 ddar.py:60] Depth 1/1000 time = 0.9247641563415527
I0123 15:43:12.397017 140197953007616 ddar.py:60] Depth 2/1000 time = 3.5142524242401123
I0123 15:43:15.729857 140197953007616 ddar.py:60] Depth 3/1000 time = 3.3325722217559814
I0123 15:43:19.888309 140197953007616 ddar.py:60] Depth 4/1000 time = 4.158157110214233
I0123 15:43:24.946521 140197953007616 ddar.py:60] Depth 5/1000 time = 5.030881643295288
I0123 15:43:29.840020 140197953007616 ddar.py:60] Depth 6/1000 time = 4.893241882324219
I0123 15:43:34.871740 140197953007616 ddar.py:60] Depth 7/1000 time = 5.014677286148071
I0123 15:43:34.872910 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:43:34.872992 140197953007616 alphageometry.py:566] LM output (score=-3.262229): "n : P b i e n 18 ;"
I0123 15:43:34.873031 140197953007616 alphageometry.py:567] Translation: "n = on_pline n e b i"

I0123 15:43:34.873078 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n e b i ? eqangle k g k j k l k g"
I0123 15:43:34.873276 140197953007616 graph.py:498] 
I0123 15:43:34.873350 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n e b i ? eqangle k g k j k l k g
I0123 15:43:35.844867 140197953007616 ddar.py:60] Depth 1/1000 time = 0.9287199974060059
I0123 15:43:39.445659 140197953007616 ddar.py:60] Depth 2/1000 time = 3.6004250049591064
I0123 15:43:42.768215 140197953007616 ddar.py:60] Depth 3/1000 time = 3.322327136993408
I0123 15:43:46.823838 140197953007616 ddar.py:60] Depth 4/1000 time = 4.0553138256073
I0123 15:43:51.800664 140197953007616 ddar.py:60] Depth 5/1000 time = 4.951012372970581
I0123 15:43:56.821910 140197953007616 ddar.py:60] Depth 6/1000 time = 5.020949840545654
I0123 15:44:01.822530 140197953007616 ddar.py:60] Depth 7/1000 time = 4.981680631637573
I0123 15:44:01.823666 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:44:01.823749 140197953007616 alphageometry.py:566] LM output (score=-3.284507): "n : P b e b n 18 ;"
I0123 15:44:01.823788 140197953007616 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b e b n"

I0123 15:44:01.823828 140197953007616 alphageometry.py:566] LM output (score=-3.474253): "n : P b i h n 18 ;"
I0123 15:44:01.823858 140197953007616 alphageometry.py:567] Translation: "n = on_pline n h b i"

I0123 15:44:01.823890 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n h b i ? eqangle k g k j k l k g"
I0123 15:44:01.824089 140197953007616 graph.py:498] 
I0123 15:44:01.824152 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n h b i ? eqangle k g k j k l k g
I0123 15:44:02.799471 140197953007616 ddar.py:60] Depth 1/1000 time = 0.9321928024291992
I0123 15:44:06.345494 140197953007616 ddar.py:60] Depth 2/1000 time = 3.5457935333251953
I0123 15:44:09.621730 140197953007616 ddar.py:60] Depth 3/1000 time = 3.2759673595428467
I0123 15:44:13.761620 140197953007616 ddar.py:60] Depth 4/1000 time = 4.1395628452301025
I0123 15:44:18.831043 140197953007616 ddar.py:60] Depth 5/1000 time = 5.0424723625183105
I0123 15:44:23.821930 140197953007616 ddar.py:60] Depth 6/1000 time = 4.990630149841309
I0123 15:44:28.874817 140197953007616 ddar.py:60] Depth 7/1000 time = 5.0352771282196045
I0123 15:44:28.875988 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:44:28.876071 140197953007616 alphageometry.py:566] LM output (score=-3.505636): "n : C b c n 18 D b c b n 19 ;"
I0123 15:44:28.876108 140197953007616 alphageometry.py:567] Translation: "n = on_line n b c, on_circle n b c"

I0123 15:44:28.876181 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_line n b c, on_circle n b c ? eqangle k g k j k l k g"
I0123 15:44:28.876371 140197953007616 graph.py:498] 
I0123 15:44:28.876436 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_line n b c, on_circle n b c ? eqangle k g k j k l k g
I0123 15:44:31.648570 140197953007616 ddar.py:60] Depth 1/1000 time = 2.729285955429077
I0123 15:44:35.534341 140197953007616 ddar.py:60] Depth 2/1000 time = 3.8854808807373047
I0123 15:44:40.001242 140197953007616 ddar.py:60] Depth 3/1000 time = 4.466630458831787
I0123 15:44:44.412831 140197953007616 ddar.py:60] Depth 4/1000 time = 4.411284446716309
I0123 15:44:48.864859 140197953007616 ddar.py:60] Depth 5/1000 time = 4.451293706893921
I0123 15:44:54.448114 140197953007616 ddar.py:60] Depth 6/1000 time = 5.557803153991699
I0123 15:45:00.563831 140197953007616 ddar.py:60] Depth 7/1000 time = 6.115445137023926
I0123 15:45:05.925498 140197953007616 ddar.py:60] Depth 8/1000 time = 5.3449249267578125
I0123 15:45:05.926666 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:45:05.926753 140197953007616 alphageometry.py:566] LM output (score=-3.515020): "n : C b i n 18 T b i k n 19 ;"
I0123 15:45:05.926795 140197953007616 alphageometry.py:567] Translation: "n = on_line n b i, on_tline n k b i"

I0123 15:45:05.926841 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_line n b i, on_tline n k b i ? eqangle k g k j k l k g"
I0123 15:45:05.927028 140197953007616 graph.py:498] 
I0123 15:45:05.927104 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_line n b i, on_tline n k b i ? eqangle k g k j k l k g
I0123 15:45:08.970454 140197953007616 ddar.py:60] Depth 1/1000 time = 2.998988389968872
I0123 15:45:14.155770 140197953007616 ddar.py:60] Depth 2/1000 time = 5.184995889663696
I0123 15:45:19.986716 140197953007616 ddar.py:60] Depth 3/1000 time = 5.830693483352661
I0123 15:45:25.879467 140197953007616 ddar.py:60] Depth 4/1000 time = 5.892471551895142
I0123 15:45:31.961988 140197953007616 ddar.py:60] Depth 5/1000 time = 6.057188034057617
I0123 15:45:39.504688 140197953007616 ddar.py:60] Depth 6/1000 time = 7.542430877685547
I0123 15:45:46.449160 140197953007616 ddar.py:60] Depth 7/1000 time = 6.927941083908081
I0123 15:45:46.450419 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:45:46.450527 140197953007616 alphageometry.py:566] LM output (score=-3.522417): "n : P i j l n 18 P i l j n 19 ;"
I0123 15:45:46.450566 140197953007616 alphageometry.py:567] Translation: "n = on_pline n l i j, on_pline n j i l"

I0123 15:45:46.450616 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n l i j, on_pline n j i l ? eqangle k g k j k l k g"
I0123 15:45:46.450811 140197953007616 graph.py:498] 
I0123 15:45:46.450891 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n l i j, on_pline n j i l ? eqangle k g k j k l k g
I0123 15:45:48.339606 140197953007616 ddar.py:60] Depth 1/1000 time = 1.8371644020080566
I0123 15:45:51.373238 140197953007616 ddar.py:60] Depth 2/1000 time = 3.033392906188965
I0123 15:45:55.890551 140197953007616 ddar.py:60] Depth 3/1000 time = 4.517059803009033
I0123 15:46:00.444087 140197953007616 ddar.py:60] Depth 4/1000 time = 4.5532355308532715
I0123 15:46:06.054782 140197953007616 ddar.py:60] Depth 5/1000 time = 5.578378915786743
I0123 15:46:11.451820 140197953007616 ddar.py:60] Depth 6/1000 time = 5.396712064743042
I0123 15:46:16.884405 140197953007616 ddar.py:60] Depth 7/1000 time = 5.411487817764282
I0123 15:46:16.885592 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:46:16.885673 140197953007616 alphageometry.py:566] LM output (score=-3.524730): "n : P c l m n 18 ;"
I0123 15:46:16.885710 140197953007616 alphageometry.py:567] Translation: "n = on_pline n m c l"

I0123 15:46:16.885749 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n m c l ? eqangle k g k j k l k g"
I0123 15:46:16.885929 140197953007616 graph.py:498] 
I0123 15:46:16.885991 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_pline n m c l ? eqangle k g k j k l k g
I0123 15:46:17.857916 140197953007616 ddar.py:60] Depth 1/1000 time = 0.9294066429138184
I0123 15:46:21.479759 140197953007616 ddar.py:60] Depth 2/1000 time = 3.621595621109009
I0123 15:46:24.932009 140197953007616 ddar.py:60] Depth 3/1000 time = 3.451993942260742
I0123 15:46:29.072384 140197953007616 ddar.py:60] Depth 4/1000 time = 4.140079498291016
I0123 15:46:33.297199 140197953007616 ddar.py:60] Depth 5/1000 time = 4.199650526046753
I0123 15:46:38.148624 140197953007616 ddar.py:60] Depth 6/1000 time = 4.8511810302734375
I0123 15:46:43.943542 140197953007616 ddar.py:60] Depth 7/1000 time = 5.7777416706085205
I0123 15:46:43.944749 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:46:43.944828 140197953007616 alphageometry.py:566] LM output (score=-3.528721): "n : C b i n 18 D b i i n 19 ;"
I0123 15:46:43.944864 140197953007616 alphageometry.py:567] Translation: "n = on_line n b i, on_circle n i b"

I0123 15:46:43.944905 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_line n b i, on_circle n i b ? eqangle k g k j k l k g"
I0123 15:46:43.945086 140197953007616 graph.py:498] 
I0123 15:46:43.945149 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_tline m h g h; n = on_line n b i, on_circle n i b ? eqangle k g k j k l k g
I0123 15:46:46.107261 140197953007616 ddar.py:60] Depth 1/1000 time = 2.1199281215667725
I0123 15:46:50.227655 140197953007616 ddar.py:60] Depth 2/1000 time = 4.120161771774292
I0123 15:46:55.748251 140197953007616 ddar.py:60] Depth 3/1000 time = 5.520352125167847
I0123 15:47:01.324263 140197953007616 ddar.py:60] Depth 4/1000 time = 5.5756449699401855
I0123 15:47:06.958787 140197953007616 ddar.py:60] Depth 5/1000 time = 5.633656024932861
I0123 15:47:13.624060 140197953007616 ddar.py:60] Depth 6/1000 time = 6.641509532928467
I0123 15:47:20.262445 140197953007616 ddar.py:60] Depth 7/1000 time = 6.638057470321655
I0123 15:47:26.872426 140197953007616 ddar.py:60] Depth 8/1000 time = 6.5913708209991455
I0123 15:47:26.873524 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:47:26.873597 140197953007616 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : C b h m 17 D b m h m 18 ; x00
I0123 15:47:34.480622 140197953007616 alphageometry.py:566] LM output (score=-0.717739): "n : C g h n 19 D g n h n 20 ;"
I0123 15:47:34.480825 140197953007616 alphageometry.py:567] Translation: "n = on_line n g h, on_bline n h g"

I0123 15:47:34.480871 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n g h, on_bline n h g ? eqangle k g k j k l k g"
I0123 15:47:34.481035 140197953007616 graph.py:498] 
I0123 15:47:34.481093 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n g h, on_bline n h g ? eqangle k g k j k l k g
I0123 15:47:35.704957 140197953007616 ddar.py:60] Depth 1/1000 time = 1.1830456256866455
I0123 15:47:39.751620 140197953007616 ddar.py:60] Depth 2/1000 time = 4.046421051025391
I0123 15:47:44.485343 140197953007616 ddar.py:60] Depth 3/1000 time = 4.733492851257324
I0123 15:47:49.323817 140197953007616 ddar.py:60] Depth 4/1000 time = 4.838151454925537
I0123 15:47:54.988754 140197953007616 ddar.py:60] Depth 5/1000 time = 5.664155721664429
I0123 15:48:00.862401 140197953007616 ddar.py:60] Depth 6/1000 time = 5.847751617431641
I0123 15:48:06.710371 140197953007616 ddar.py:60] Depth 7/1000 time = 5.847722768783569
I0123 15:48:12.507397 140197953007616 ddar.py:60] Depth 8/1000 time = 5.7781288623809814
I0123 15:48:12.508686 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:48:12.508768 140197953007616 alphageometry.py:566] LM output (score=-0.780476): "n : C b i n 19 D b n i n 20 ;"
I0123 15:48:12.508804 140197953007616 alphageometry.py:567] Translation: "n = on_line n b i, on_bline n i b"

I0123 15:48:12.508842 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n b i, on_bline n i b ? eqangle k g k j k l k g"
I0123 15:48:12.509019 140197953007616 graph.py:498] 
I0123 15:48:12.509079 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n b i, on_bline n i b ? eqangle k g k j k l k g
I0123 15:48:15.578985 140197953007616 ddar.py:60] Depth 1/1000 time = 3.0283443927764893
I0123 15:48:19.965290 140197953007616 ddar.py:60] Depth 2/1000 time = 4.386042833328247
I0123 15:48:25.947912 140197953007616 ddar.py:60] Depth 3/1000 time = 5.982372999191284
I0123 15:48:32.010742 140197953007616 ddar.py:60] Depth 4/1000 time = 6.062537908554077
I0123 15:48:37.111536 140197953007616 ddar.py:60] Depth 5/1000 time = 5.100151538848877
I0123 15:48:44.891323 140197953007616 ddar.py:60] Depth 6/1000 time = 7.7556610107421875
I0123 15:48:51.767057 140197953007616 ddar.py:60] Depth 7/1000 time = 6.875443458557129
I0123 15:48:58.738894 140197953007616 ddar.py:60] Depth 8/1000 time = 6.956132650375366
I0123 15:48:58.740142 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:48:58.740207 140197953007616 alphageometry.py:566] LM output (score=-1.127400): "n : C a b n 19 D a n b n 20 ;"
I0123 15:48:58.740242 140197953007616 alphageometry.py:567] Translation: "n = on_line n a b, on_bline n b a"

I0123 15:48:58.740282 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n a b, on_bline n b a ? eqangle k g k j k l k g"
I0123 15:48:58.740468 140197953007616 graph.py:498] 
I0123 15:48:58.740528 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n a b, on_bline n b a ? eqangle k g k j k l k g
I0123 15:49:00.963107 140197953007616 ddar.py:60] Depth 1/1000 time = 2.1773874759674072
I0123 15:49:07.161616 140197953007616 ddar.py:60] Depth 2/1000 time = 6.19825005531311
I0123 15:49:14.053657 140197953007616 ddar.py:60] Depth 3/1000 time = 6.891746520996094
I0123 15:49:22.547164 140197953007616 ddar.py:60] Depth 4/1000 time = 8.493258237838745
I0123 15:49:29.409031 140197953007616 ddar.py:60] Depth 5/1000 time = 6.861130952835083
I0123 15:49:37.852722 140197953007616 ddar.py:60] Depth 6/1000 time = 8.3946053981781
I0123 15:49:37.854118 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:49:37.854190 140197953007616 alphageometry.py:566] LM output (score=-1.152058): "n : C h i n 19 D h n i n 20 ;"
I0123 15:49:37.854227 140197953007616 alphageometry.py:567] Translation: "n = on_line n h i, on_bline n i h"

I0123 15:49:37.854265 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n h i, on_bline n i h ? eqangle k g k j k l k g"
I0123 15:49:37.854450 140197953007616 graph.py:498] 
I0123 15:49:37.854511 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n h i, on_bline n i h ? eqangle k g k j k l k g
I0123 15:49:39.075784 140197953007616 ddar.py:60] Depth 1/1000 time = 1.1790070533752441
I0123 15:49:44.020406 140197953007616 ddar.py:60] Depth 2/1000 time = 4.94436502456665
I0123 15:49:49.291251 140197953007616 ddar.py:60] Depth 3/1000 time = 5.270508766174316
I0123 15:49:55.381968 140197953007616 ddar.py:60] Depth 4/1000 time = 6.090434551239014
I0123 15:50:01.516614 140197953007616 ddar.py:60] Depth 5/1000 time = 6.134297847747803
I0123 15:50:07.660153 140197953007616 ddar.py:60] Depth 6/1000 time = 6.142659902572632
I0123 15:50:15.938951 140197953007616 ddar.py:60] Depth 7/1000 time = 8.243593454360962
I0123 15:50:23.464497 140197953007616 ddar.py:60] Depth 8/1000 time = 7.525228023529053
I0123 15:50:31.014595 140197953007616 ddar.py:60] Depth 9/1000 time = 7.506141424179077
I0123 15:50:31.016402 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:50:31.016468 140197953007616 alphageometry.py:566] LM output (score=-1.413898): "n : C b g n 19 D b n g n 20 ;"
I0123 15:50:31.016503 140197953007616 alphageometry.py:567] Translation: "n = on_line n b g, on_bline n g b"

I0123 15:50:31.016541 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n b g, on_bline n g b ? eqangle k g k j k l k g"
I0123 15:50:31.016738 140197953007616 graph.py:498] 
I0123 15:50:31.016798 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n b g, on_bline n g b ? eqangle k g k j k l k g
I0123 15:50:33.163991 140197953007616 ddar.py:60] Depth 1/1000 time = 2.1052539348602295
I0123 15:50:37.649923 140197953007616 ddar.py:60] Depth 2/1000 time = 4.485645294189453
I0123 15:50:42.761122 140197953007616 ddar.py:60] Depth 3/1000 time = 5.110811471939087
I0123 15:50:47.798300 140197953007616 ddar.py:60] Depth 4/1000 time = 5.03688645362854
I0123 15:50:53.653040 140197953007616 ddar.py:60] Depth 5/1000 time = 5.8540778160095215
I0123 15:51:00.102937 140197953007616 ddar.py:60] Depth 6/1000 time = 6.4217469692230225
I0123 15:51:06.187543 140197953007616 ddar.py:60] Depth 7/1000 time = 6.0843095779418945
I0123 15:51:13.237034 140197953007616 ddar.py:60] Depth 8/1000 time = 7.028741836547852
I0123 15:51:13.238337 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:51:13.238412 140197953007616 alphageometry.py:566] LM output (score=-1.760513): "n : C c h n 19 D c n h n 20 ;"
I0123 15:51:13.238449 140197953007616 alphageometry.py:567] Translation: "n = on_line n c h, on_bline n h c"

I0123 15:51:13.238489 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n c h, on_bline n h c ? eqangle k g k j k l k g"
I0123 15:51:13.238682 140197953007616 graph.py:498] 
I0123 15:51:13.238744 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n c h, on_bline n h c ? eqangle k g k j k l k g
I0123 15:51:15.600052 140197953007616 ddar.py:60] Depth 1/1000 time = 2.3183372020721436
I0123 15:51:21.063468 140197953007616 ddar.py:60] Depth 2/1000 time = 5.463085651397705
I0123 15:51:27.272062 140197953007616 ddar.py:60] Depth 3/1000 time = 6.208343744277954
I0123 15:51:33.588587 140197953007616 ddar.py:60] Depth 4/1000 time = 6.316169261932373
I0123 15:51:38.986612 140197953007616 ddar.py:60] Depth 5/1000 time = 5.397130727767944
I0123 15:51:46.365586 140197953007616 ddar.py:60] Depth 6/1000 time = 7.3526880741119385
I0123 15:51:53.684054 140197953007616 ddar.py:60] Depth 7/1000 time = 7.3181233406066895
I0123 15:52:01.963803 140197953007616 ddar.py:60] Depth 8/1000 time = 8.259966135025024
I0123 15:52:01.965107 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:52:01.965173 140197953007616 alphageometry.py:566] LM output (score=-1.938303): "n : C f h n 19 D f n h n 20 ;"
I0123 15:52:01.965231 140197953007616 alphageometry.py:567] Translation: "n = on_line n f h, on_bline n h f"

I0123 15:52:01.965271 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n f h, on_bline n h f ? eqangle k g k j k l k g"
I0123 15:52:01.965456 140197953007616 graph.py:498] 
I0123 15:52:01.965517 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n f h, on_bline n h f ? eqangle k g k j k l k g
I0123 15:52:03.171622 140197953007616 ddar.py:60] Depth 1/1000 time = 1.1631770133972168
I0123 15:52:07.490963 140197953007616 ddar.py:60] Depth 2/1000 time = 4.319119453430176
I0123 15:52:11.963967 140197953007616 ddar.py:60] Depth 3/1000 time = 4.472702741622925
I0123 15:52:16.980245 140197953007616 ddar.py:60] Depth 4/1000 time = 5.015848398208618
I0123 15:52:22.100009 140197953007616 ddar.py:60] Depth 5/1000 time = 5.1190571784973145
I0123 15:52:28.208638 140197953007616 ddar.py:60] Depth 6/1000 time = 6.0794594287872314
I0123 15:52:33.250136 140197953007616 ddar.py:60] Depth 7/1000 time = 5.04125714302063
I0123 15:52:39.221030 140197953007616 ddar.py:60] Depth 8/1000 time = 5.946835041046143
I0123 15:52:39.222372 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:52:39.222458 140197953007616 alphageometry.py:566] LM output (score=-2.050324): "n : C a h n 19 D a n h n 20 ;"
I0123 15:52:39.222496 140197953007616 alphageometry.py:567] Translation: "n = on_line n a h, on_bline n h a"

I0123 15:52:39.222537 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n a h, on_bline n h a ? eqangle k g k j k l k g"
I0123 15:52:39.222738 140197953007616 graph.py:498] 
I0123 15:52:39.222797 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n a h, on_bline n h a ? eqangle k g k j k l k g
I0123 15:52:42.373422 140197953007616 ddar.py:60] Depth 1/1000 time = 3.107823371887207
I0123 15:52:47.150227 140197953007616 ddar.py:60] Depth 2/1000 time = 4.776572227478027
I0123 15:52:53.440530 140197953007616 ddar.py:60] Depth 3/1000 time = 6.290021181106567
I0123 15:52:59.846623 140197953007616 ddar.py:60] Depth 4/1000 time = 6.405791282653809
I0123 15:53:06.148630 140197953007616 ddar.py:60] Depth 5/1000 time = 6.301276922225952
I0123 15:53:13.601732 140197953007616 ddar.py:60] Depth 6/1000 time = 7.426966905593872
I0123 15:53:20.990256 140197953007616 ddar.py:60] Depth 7/1000 time = 7.388239145278931
I0123 15:53:28.624163 140197953007616 ddar.py:60] Depth 8/1000 time = 7.614570140838623
I0123 15:53:28.625538 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:53:28.625604 140197953007616 alphageometry.py:566] LM output (score=-2.103590): "n : C b c n 19 D b n c n 20 ;"
I0123 15:53:28.625646 140197953007616 alphageometry.py:567] Translation: "n = on_line n b c, on_bline n c b"

I0123 15:53:28.625691 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n b c, on_bline n c b ? eqangle k g k j k l k g"
I0123 15:53:28.625904 140197953007616 graph.py:498] 
I0123 15:53:28.625965 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n b c, on_bline n c b ? eqangle k g k j k l k g
I0123 15:53:30.878201 140197953007616 ddar.py:60] Depth 1/1000 time = 2.206965684890747
I0123 15:53:35.901428 140197953007616 ddar.py:60] Depth 2/1000 time = 5.022986173629761
I0123 15:53:43.811822 140197953007616 ddar.py:60] Depth 3/1000 time = 7.910090446472168
I0123 15:53:51.930888 140197953007616 ddar.py:60] Depth 4/1000 time = 8.118664979934692
I0123 15:53:59.923674 140197953007616 ddar.py:60] Depth 5/1000 time = 7.9925172328948975
I0123 15:54:07.144243 140197953007616 ddar.py:60] Depth 6/1000 time = 7.2198169231414795
I0123 15:54:15.139162 140197953007616 ddar.py:60] Depth 7/1000 time = 7.928694725036621
I0123 15:54:15.140753 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:54:15.140826 140197953007616 alphageometry.py:566] LM output (score=-2.252241): "n : C b l n 19 D b n l n 20 ;"
I0123 15:54:15.140862 140197953007616 alphageometry.py:567] Translation: "n = on_line n b l, on_bline n l b"

I0123 15:54:15.140899 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n b l, on_bline n l b ? eqangle k g k j k l k g"
I0123 15:54:15.141086 140197953007616 graph.py:498] 
I0123 15:54:15.141147 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n b l, on_bline n l b ? eqangle k g k j k l k g
I0123 15:54:17.202394 140197953007616 ddar.py:60] Depth 1/1000 time = 2.0192301273345947
I0123 15:54:20.406279 140197953007616 ddar.py:60] Depth 2/1000 time = 3.2036490440368652
I0123 15:54:25.224460 140197953007616 ddar.py:60] Depth 3/1000 time = 4.817904710769653
I0123 15:54:30.008702 140197953007616 ddar.py:60] Depth 4/1000 time = 4.783919811248779
I0123 15:54:33.956524 140197953007616 ddar.py:60] Depth 5/1000 time = 3.9470908641815186
I0123 15:54:39.769778 140197953007616 ddar.py:60] Depth 6/1000 time = 5.7867138385772705
I0123 15:54:45.543463 140197953007616 ddar.py:60] Depth 7/1000 time = 5.773258447647095
I0123 15:54:50.405611 140197953007616 ddar.py:60] Depth 8/1000 time = 4.842626333236694
I0123 15:54:50.406922 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:54:50.406997 140197953007616 alphageometry.py:566] LM output (score=-2.410358): "n : C i h n 19 D i n h n 20 ;"
I0123 15:54:50.407037 140197953007616 alphageometry.py:567] Translation: "n = on_line n i h, on_bline n h i"

I0123 15:54:50.407078 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n i h, on_bline n h i ? eqangle k g k j k l k g"
I0123 15:54:50.407278 140197953007616 graph.py:498] 
I0123 15:54:50.407341 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n i h, on_bline n h i ? eqangle k g k j k l k g
I0123 15:54:52.500015 140197953007616 ddar.py:60] Depth 1/1000 time = 2.0466666221618652
I0123 15:54:57.661987 140197953007616 ddar.py:60] Depth 2/1000 time = 5.1617326736450195
I0123 15:55:02.936629 140197953007616 ddar.py:60] Depth 3/1000 time = 5.274361610412598
I0123 15:55:09.258091 140197953007616 ddar.py:60] Depth 4/1000 time = 6.321112632751465
I0123 15:55:15.636569 140197953007616 ddar.py:60] Depth 5/1000 time = 6.378173828125
I0123 15:55:22.095380 140197953007616 ddar.py:60] Depth 6/1000 time = 6.4580442905426025
I0123 15:55:29.865609 140197953007616 ddar.py:60] Depth 7/1000 time = 7.735402345657349
I0123 15:55:37.640784 140197953007616 ddar.py:60] Depth 8/1000 time = 7.774813175201416
I0123 15:55:45.450263 140197953007616 ddar.py:60] Depth 9/1000 time = 7.760972738265991
I0123 15:55:45.452179 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:55:45.452248 140197953007616 alphageometry.py:566] LM output (score=-2.504525): "n : C b f n 19 D b n f n 20 ;"
I0123 15:55:45.452284 140197953007616 alphageometry.py:567] Translation: "n = on_line n b f, on_bline n f b"

I0123 15:55:45.452324 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n b f, on_bline n f b ? eqangle k g k j k l k g"
I0123 15:55:45.452513 140197953007616 graph.py:498] 
I0123 15:55:45.452576 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n b f, on_bline n f b ? eqangle k g k j k l k g
I0123 15:55:47.885211 140197953007616 ddar.py:60] Depth 1/1000 time = 2.3891282081604004
I0123 15:55:54.063609 140197953007616 ddar.py:60] Depth 2/1000 time = 6.178101539611816
I0123 15:56:03.025357 140197953007616 ddar.py:60] Depth 3/1000 time = 8.961369514465332
I0123 15:56:11.583303 140197953007616 ddar.py:60] Depth 4/1000 time = 8.557678461074829
I0123 15:56:20.215858 140197953007616 ddar.py:60] Depth 5/1000 time = 8.632240772247314
I0123 15:56:28.735547 140197953007616 ddar.py:60] Depth 6/1000 time = 8.518937587738037
I0123 15:56:36.480356 140197953007616 ddar.py:60] Depth 7/1000 time = 7.684189081192017
I0123 15:56:36.482925 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:56:36.483011 140197953007616 alphageometry.py:566] LM output (score=-2.663527): "n : C b e n 19 D b n e n 20 ;"
I0123 15:56:36.483051 140197953007616 alphageometry.py:567] Translation: "n = on_line n b e, on_bline n e b"

I0123 15:56:36.483092 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n b e, on_bline n e b ? eqangle k g k j k l k g"
I0123 15:56:36.483285 140197953007616 graph.py:498] 
I0123 15:56:36.483353 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n b e, on_bline n e b ? eqangle k g k j k l k g
I0123 15:56:39.668556 140197953007616 ddar.py:60] Depth 1/1000 time = 3.1402101516723633
I0123 15:56:44.328439 140197953007616 ddar.py:60] Depth 2/1000 time = 4.659635543823242
I0123 15:56:49.685721 140197953007616 ddar.py:60] Depth 3/1000 time = 5.356961727142334
I0123 15:56:55.053490 140197953007616 ddar.py:60] Depth 4/1000 time = 5.3673436641693115
I0123 15:57:00.292406 140197953007616 ddar.py:60] Depth 5/1000 time = 5.2381885051727295
I0123 15:57:07.504240 140197953007616 ddar.py:60] Depth 6/1000 time = 7.187765121459961
I0123 15:57:13.816884 140197953007616 ddar.py:60] Depth 7/1000 time = 6.312364816665649
I0123 15:57:20.956366 140197953007616 ddar.py:60] Depth 8/1000 time = 7.119745254516602
I0123 15:57:20.957630 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:57:20.957715 140197953007616 alphageometry.py:566] LM output (score=-2.666134): "n : C d h n 19 D d n h n 20 ;"
I0123 15:57:20.957751 140197953007616 alphageometry.py:567] Translation: "n = on_line n d h, on_bline n h d"

I0123 15:57:20.957792 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n d h, on_bline n h d ? eqangle k g k j k l k g"
I0123 15:57:20.957981 140197953007616 graph.py:498] 
I0123 15:57:20.958043 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n d h, on_bline n h d ? eqangle k g k j k l k g
I0123 15:57:23.034112 140197953007616 ddar.py:60] Depth 1/1000 time = 2.031916618347168
I0123 15:57:26.123309 140197953007616 ddar.py:60] Depth 2/1000 time = 3.0889687538146973
I0123 15:57:29.879039 140197953007616 ddar.py:60] Depth 3/1000 time = 3.755460023880005
I0123 15:57:34.453699 140197953007616 ddar.py:60] Depth 4/1000 time = 4.574329137802124
I0123 15:57:38.196058 140197953007616 ddar.py:60] Depth 5/1000 time = 3.7416512966156006
I0123 15:57:43.961521 140197953007616 ddar.py:60] Depth 6/1000 time = 5.738787651062012
I0123 15:57:49.717602 140197953007616 ddar.py:60] Depth 7/1000 time = 5.7557947635650635
I0123 15:57:54.588849 140197953007616 ddar.py:60] Depth 8/1000 time = 4.850519895553589
I0123 15:57:54.590167 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:57:54.590236 140197953007616 alphageometry.py:566] LM output (score=-2.770891): "n : C e h n 19 D e n h n 20 ;"
I0123 15:57:54.590273 140197953007616 alphageometry.py:567] Translation: "n = on_line n e h, on_bline n h e"

I0123 15:57:54.590313 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n e h, on_bline n h e ? eqangle k g k j k l k g"
I0123 15:57:54.590513 140197953007616 graph.py:498] 
I0123 15:57:54.590574 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n e h, on_bline n h e ? eqangle k g k j k l k g
I0123 15:57:56.601578 140197953007616 ddar.py:60] Depth 1/1000 time = 1.9687364101409912
I0123 15:58:00.700282 140197953007616 ddar.py:60] Depth 2/1000 time = 4.098451375961304
I0123 15:58:04.668985 140197953007616 ddar.py:60] Depth 3/1000 time = 3.968390464782715
I0123 15:58:09.550503 140197953007616 ddar.py:60] Depth 4/1000 time = 4.881089210510254
I0123 15:58:13.553066 140197953007616 ddar.py:60] Depth 5/1000 time = 4.0018086433410645
I0123 15:58:19.278851 140197953007616 ddar.py:60] Depth 6/1000 time = 5.6979687213897705
I0123 15:58:25.051105 140197953007616 ddar.py:60] Depth 7/1000 time = 5.771940469741821
I0123 15:58:30.904175 140197953007616 ddar.py:60] Depth 8/1000 time = 5.832082986831665
I0123 15:58:30.905526 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:58:30.905593 140197953007616 alphageometry.py:566] LM output (score=-2.799690): "n : C h j n 19 D h n j n 20 ;"
I0123 15:58:30.905630 140197953007616 alphageometry.py:567] Translation: "n = on_line n h j, on_bline n j h"

I0123 15:58:30.905682 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n h j, on_bline n j h ? eqangle k g k j k l k g"
I0123 15:58:30.905889 140197953007616 graph.py:498] 
I0123 15:58:30.905953 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n h j, on_bline n j h ? eqangle k g k j k l k g
I0123 15:58:33.071568 140197953007616 ddar.py:60] Depth 1/1000 time = 2.1216578483581543
I0123 15:58:36.613393 140197953007616 ddar.py:60] Depth 2/1000 time = 3.5415897369384766
I0123 15:58:41.804464 140197953007616 ddar.py:60] Depth 3/1000 time = 5.190778732299805
I0123 15:58:47.050468 140197953007616 ddar.py:60] Depth 4/1000 time = 5.24556827545166
I0123 15:58:51.271688 140197953007616 ddar.py:60] Depth 5/1000 time = 4.220509767532349
I0123 15:58:57.402741 140197953007616 ddar.py:60] Depth 6/1000 time = 6.10339093208313
I0123 15:59:04.433334 140197953007616 ddar.py:60] Depth 7/1000 time = 7.03031849861145
I0123 15:59:09.655635 140197953007616 ddar.py:60] Depth 8/1000 time = 5.198808431625366
I0123 15:59:09.656959 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:59:09.657040 140197953007616 alphageometry.py:566] LM output (score=-2.818651): "n : C b k n 19 D b n k n 20 ;"
I0123 15:59:09.657079 140197953007616 alphageometry.py:567] Translation: "n = on_line n b k, on_bline n k b"

I0123 15:59:09.657120 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n b k, on_bline n k b ? eqangle k g k j k l k g"
I0123 15:59:09.657317 140197953007616 graph.py:498] 
I0123 15:59:09.657381 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n b k, on_bline n k b ? eqangle k g k j k l k g
I0123 15:59:11.721585 140197953007616 ddar.py:60] Depth 1/1000 time = 2.0216288566589355
I0123 15:59:14.793724 140197953007616 ddar.py:60] Depth 2/1000 time = 3.0718986988067627
I0123 15:59:19.502546 140197953007616 ddar.py:60] Depth 3/1000 time = 4.708505392074585
I0123 15:59:23.329964 140197953007616 ddar.py:60] Depth 4/1000 time = 3.8269855976104736
I0123 15:59:28.043343 140197953007616 ddar.py:60] Depth 5/1000 time = 4.712677001953125
I0123 15:59:32.797396 140197953007616 ddar.py:60] Depth 6/1000 time = 4.728699445724487
I0123 15:59:38.400366 140197953007616 ddar.py:60] Depth 7/1000 time = 5.602634906768799
I0123 15:59:44.098433 140197953007616 ddar.py:60] Depth 8/1000 time = 5.6778082847595215
I0123 15:59:44.099789 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:59:44.099855 140197953007616 alphageometry.py:566] LM output (score=-2.897022): "n : C b j n 19 D b n j n 20 ;"
I0123 15:59:44.099891 140197953007616 alphageometry.py:567] Translation: "n = on_line n b j, on_bline n j b"

I0123 15:59:44.099931 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n b j, on_bline n j b ? eqangle k g k j k l k g"
I0123 15:59:44.100116 140197953007616 graph.py:498] 
I0123 15:59:44.100179 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n b j, on_bline n j b ? eqangle k g k j k l k g
I0123 15:59:46.486265 140197953007616 ddar.py:60] Depth 1/1000 time = 2.3425679206848145
I0123 15:59:52.275718 140197953007616 ddar.py:60] Depth 2/1000 time = 5.789221286773682
I0123 15:59:57.958298 140197953007616 ddar.py:60] Depth 3/1000 time = 5.682266473770142
I0123 16:00:04.539691 140197953007616 ddar.py:60] Depth 4/1000 time = 6.581016778945923
I0123 16:00:10.173313 140197953007616 ddar.py:60] Depth 5/1000 time = 5.6328980922698975
I0123 16:00:17.729447 140197953007616 ddar.py:60] Depth 6/1000 time = 7.529346704483032
I0123 16:00:25.162735 140197953007616 ddar.py:60] Depth 7/1000 time = 7.43298077583313
I0123 16:00:32.719508 140197953007616 ddar.py:60] Depth 8/1000 time = 7.53609299659729
I0123 16:00:32.720817 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:00:32.721019 140197953007616 alphageometry.py:566] LM output (score=-2.919873): "n : C j m n 19 D j m m n 20 ;"
I0123 16:00:32.721063 140197953007616 alphageometry.py:567] Translation: "n = on_line n j m, on_circle n m j"

I0123 16:00:32.721106 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n j m, on_circle n m j ? eqangle k g k j k l k g"
I0123 16:00:32.721302 140197953007616 graph.py:498] 
I0123 16:00:32.721362 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n j m, on_circle n m j ? eqangle k g k j k l k g
I0123 16:00:34.895163 140197953007616 ddar.py:60] Depth 1/1000 time = 2.125322103500366
I0123 16:00:39.725725 140197953007616 ddar.py:60] Depth 2/1000 time = 4.830307960510254
I0123 16:00:44.405997 140197953007616 ddar.py:60] Depth 3/1000 time = 4.680032968521118
I0123 16:00:50.110131 140197953007616 ddar.py:60] Depth 4/1000 time = 5.703823089599609
I0123 16:00:55.858160 140197953007616 ddar.py:60] Depth 5/1000 time = 5.747201681137085
I0123 16:01:01.504491 140197953007616 ddar.py:60] Depth 6/1000 time = 5.612468957901001
I0123 16:01:07.958442 140197953007616 ddar.py:60] Depth 7/1000 time = 6.453700304031372
I0123 16:01:14.637384 140197953007616 ddar.py:60] Depth 8/1000 time = 6.65487265586853
I0123 16:01:14.638711 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:01:14.638792 140197953007616 alphageometry.py:566] LM output (score=-2.961411): "n : C g i n 19 D g n i n 20 ;"
I0123 16:01:14.638830 140197953007616 alphageometry.py:567] Translation: "n = on_line n g i, on_bline n i g"

I0123 16:01:14.638893 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n g i, on_bline n i g ? eqangle k g k j k l k g"
I0123 16:01:14.639080 140197953007616 graph.py:498] 
I0123 16:01:14.639142 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n g i, on_bline n i g ? eqangle k g k j k l k g
I0123 16:01:16.783948 140197953007616 ddar.py:60] Depth 1/1000 time = 2.1022582054138184
I0123 16:01:21.110865 140197953007616 ddar.py:60] Depth 2/1000 time = 4.326693773269653
I0123 16:01:25.076205 140197953007616 ddar.py:60] Depth 3/1000 time = 3.9650914669036865
I0123 16:01:29.997449 140197953007616 ddar.py:60] Depth 4/1000 time = 4.920874118804932
I0123 16:01:34.925017 140197953007616 ddar.py:60] Depth 5/1000 time = 4.926748752593994
I0123 16:01:40.786467 140197953007616 ddar.py:60] Depth 6/1000 time = 5.836852788925171
I0123 16:01:45.562576 140197953007616 ddar.py:60] Depth 7/1000 time = 4.775865316390991
I0123 16:01:51.407384 140197953007616 ddar.py:60] Depth 8/1000 time = 5.828197002410889
I0123 16:01:51.408670 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:01:51.408735 140197953007616 alphageometry.py:566] LM output (score=-2.992670): "n : C a i n 19 D a n i n 20 ;"
I0123 16:01:51.408769 140197953007616 alphageometry.py:567] Translation: "n = on_line n a i, on_bline n i a"

I0123 16:01:51.408808 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n a i, on_bline n i a ? eqangle k g k j k l k g"
I0123 16:01:51.408991 140197953007616 graph.py:498] 
I0123 16:01:51.409051 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n a i, on_bline n i a ? eqangle k g k j k l k g
I0123 16:01:53.524144 140197953007616 ddar.py:60] Depth 1/1000 time = 2.0734310150146484
I0123 16:01:56.787238 140197953007616 ddar.py:60] Depth 2/1000 time = 3.262856960296631
I0123 16:02:01.721128 140197953007616 ddar.py:60] Depth 3/1000 time = 4.933642387390137
I0123 16:02:05.701653 140197953007616 ddar.py:60] Depth 4/1000 time = 3.9801580905914307
I0123 16:02:10.676247 140197953007616 ddar.py:60] Depth 5/1000 time = 4.973635196685791
I0123 16:02:15.553412 140197953007616 ddar.py:60] Depth 6/1000 time = 4.85154914855957
I0123 16:02:21.334709 140197953007616 ddar.py:60] Depth 7/1000 time = 5.781047105789185
I0123 16:02:26.332249 140197953007616 ddar.py:60] Depth 8/1000 time = 4.977626800537109
I0123 16:02:26.333711 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:02:26.333803 140197953007616 alphageometry.py:566] LM output (score=-3.092021): "n : C a f n 19 D a n f n 20 ;"
I0123 16:02:26.333838 140197953007616 alphageometry.py:567] Translation: "n = on_line n a f, on_bline n f a"

I0123 16:02:26.333891 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n a f, on_bline n f a ? eqangle k g k j k l k g"
I0123 16:02:26.334121 140197953007616 graph.py:498] 
I0123 16:02:26.334182 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n a f, on_bline n f a ? eqangle k g k j k l k g
I0123 16:02:28.678427 140197953007616 ddar.py:60] Depth 1/1000 time = 2.3004729747772217
I0123 16:02:33.476764 140197953007616 ddar.py:60] Depth 2/1000 time = 4.798115491867065
I0123 16:02:41.490176 140197953007616 ddar.py:60] Depth 3/1000 time = 8.013169527053833
I0123 16:02:48.535626 140197953007616 ddar.py:60] Depth 4/1000 time = 7.045170307159424
I0123 16:02:55.467739 140197953007616 ddar.py:60] Depth 5/1000 time = 6.931811809539795
I0123 16:03:03.423600 140197953007616 ddar.py:60] Depth 6/1000 time = 7.95507287979126
I0123 16:03:10.574100 140197953007616 ddar.py:60] Depth 7/1000 time = 7.086650133132935
I0123 16:03:10.575419 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:03:10.575483 140197953007616 alphageometry.py:566] LM output (score=-3.123104): "n : C h l n 19 D h n l n 20 ;"
I0123 16:03:10.575519 140197953007616 alphageometry.py:567] Translation: "n = on_line n h l, on_bline n l h"

I0123 16:03:10.575556 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n h l, on_bline n l h ? eqangle k g k j k l k g"
I0123 16:03:10.575736 140197953007616 graph.py:498] 
I0123 16:03:10.575796 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n h l, on_bline n l h ? eqangle k g k j k l k g
I0123 16:03:13.000269 140197953007616 ddar.py:60] Depth 1/1000 time = 2.3804845809936523
I0123 16:03:18.684584 140197953007616 ddar.py:60] Depth 2/1000 time = 5.684085130691528
I0123 16:03:24.355513 140197953007616 ddar.py:60] Depth 3/1000 time = 5.670659780502319
I0123 16:03:29.902537 140197953007616 ddar.py:60] Depth 4/1000 time = 5.546701908111572
I0123 16:03:36.405099 140197953007616 ddar.py:60] Depth 5/1000 time = 6.501840829849243
I0123 16:03:42.960936 140197953007616 ddar.py:60] Depth 6/1000 time = 6.530323028564453
I0123 16:03:50.385240 140197953007616 ddar.py:60] Depth 7/1000 time = 7.42402720451355
I0123 16:03:56.940737 140197953007616 ddar.py:60] Depth 8/1000 time = 6.5332701206207275
I0123 16:03:56.942076 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:03:56.942153 140197953007616 alphageometry.py:566] LM output (score=-3.131475): "n : C b i n 19 D b i b n 20 ;"
I0123 16:03:56.942189 140197953007616 alphageometry.py:567] Translation: "n = on_line n b i, on_circle n b i"

I0123 16:03:56.942231 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n b i, on_circle n b i ? eqangle k g k j k l k g"
I0123 16:03:56.942431 140197953007616 graph.py:498] 
I0123 16:03:56.942491 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n b i, on_circle n b i ? eqangle k g k j k l k g
I0123 16:03:59.427412 140197953007616 ddar.py:60] Depth 1/1000 time = 2.4404563903808594
I0123 16:04:04.890388 140197953007616 ddar.py:60] Depth 2/1000 time = 5.462707281112671
I0123 16:04:10.249433 140197953007616 ddar.py:60] Depth 3/1000 time = 5.358796834945679
I0123 16:04:15.563310 140197953007616 ddar.py:60] Depth 4/1000 time = 5.313559055328369
I0123 16:04:21.904789 140197953007616 ddar.py:60] Depth 5/1000 time = 6.34058690071106
I0123 16:04:28.208477 140197953007616 ddar.py:60] Depth 6/1000 time = 6.278331995010376
I0123 16:04:35.498517 140197953007616 ddar.py:60] Depth 7/1000 time = 7.289704322814941
I0123 16:04:41.912627 140197953007616 ddar.py:60] Depth 8/1000 time = 6.396488189697266
I0123 16:04:41.913906 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:04:41.913989 140197953007616 alphageometry.py:566] LM output (score=-3.169322): "n : C a b n 19 D a b b n 20 ;"
I0123 16:04:41.914030 140197953007616 alphageometry.py:567] Translation: "n = on_line n a b, on_circle n b a"

I0123 16:04:41.914072 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n a b, on_circle n b a ? eqangle k g k j k l k g"
I0123 16:04:41.914265 140197953007616 graph.py:498] 
I0123 16:04:41.914330 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n a b, on_circle n b a ? eqangle k g k j k l k g
I0123 16:04:45.257574 140197953007616 ddar.py:60] Depth 1/1000 time = 3.2962281703948975
I0123 16:04:49.861955 140197953007616 ddar.py:60] Depth 2/1000 time = 4.604134798049927
I0123 16:04:54.145657 140197953007616 ddar.py:60] Depth 3/1000 time = 4.28335428237915
I0123 16:05:00.415782 140197953007616 ddar.py:60] Depth 4/1000 time = 6.269653558731079
I0123 16:05:05.782096 140197953007616 ddar.py:60] Depth 5/1000 time = 5.365402698516846
I0123 16:05:12.262877 140197953007616 ddar.py:60] Depth 6/1000 time = 6.455871820449829
I0123 16:05:18.580247 140197953007616 ddar.py:60] Depth 7/1000 time = 6.316944122314453
I0123 16:05:24.870746 140197953007616 ddar.py:60] Depth 8/1000 time = 6.272017240524292
I0123 16:05:24.871987 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:05:24.872050 140197953007616 alphageometry.py:566] LM output (score=-3.248331): "n : C a b n 19 D a b a n 20 ;"
I0123 16:05:24.872086 140197953007616 alphageometry.py:567] Translation: "n = on_line n a b, on_circle n a b"

I0123 16:05:24.872126 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n a b, on_circle n a b ? eqangle k g k j k l k g"
I0123 16:05:24.872314 140197953007616 graph.py:498] 
I0123 16:05:24.872377 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n a b, on_circle n a b ? eqangle k g k j k l k g
I0123 16:05:27.301081 140197953007616 ddar.py:60] Depth 1/1000 time = 2.3858096599578857
I0123 16:05:32.095054 140197953007616 ddar.py:60] Depth 2/1000 time = 4.79371190071106
I0123 16:05:37.548772 140197953007616 ddar.py:60] Depth 3/1000 time = 5.453389883041382
I0123 16:05:43.033298 140197953007616 ddar.py:60] Depth 4/1000 time = 5.484220266342163
I0123 16:05:48.533168 140197953007616 ddar.py:60] Depth 5/1000 time = 5.499048233032227
I0123 16:05:54.929244 140197953007616 ddar.py:60] Depth 6/1000 time = 6.371557712554932
I0123 16:06:02.264283 140197953007616 ddar.py:60] Depth 7/1000 time = 7.334767818450928
I0123 16:06:08.879443 140197953007616 ddar.py:60] Depth 8/1000 time = 6.596249103546143
I0123 16:06:08.880898 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:06:08.880972 140197953007616 alphageometry.py:566] LM output (score=-3.337646): "n : C k m n 19 D k m m n 20 ;"
I0123 16:06:08.881011 140197953007616 alphageometry.py:567] Translation: "n = on_line n k m, on_circle n m k"

I0123 16:06:08.881058 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n k m, on_circle n m k ? eqangle k g k j k l k g"
I0123 16:06:08.881266 140197953007616 graph.py:498] 
I0123 16:06:08.881329 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n k m, on_circle n m k ? eqangle k g k j k l k g
I0123 16:06:11.123334 140197953007616 ddar.py:60] Depth 1/1000 time = 2.1964163780212402
I0123 16:06:14.503222 140197953007616 ddar.py:60] Depth 2/1000 time = 3.3796470165252686
I0123 16:06:18.667262 140197953007616 ddar.py:60] Depth 3/1000 time = 4.163781404495239
I0123 16:06:23.834154 140197953007616 ddar.py:60] Depth 4/1000 time = 5.166630506515503
I0123 16:06:28.018868 140197953007616 ddar.py:60] Depth 5/1000 time = 4.184012174606323
I0123 16:06:33.141360 140197953007616 ddar.py:60] Depth 6/1000 time = 5.095611095428467
I0123 16:06:39.058708 140197953007616 ddar.py:60] Depth 7/1000 time = 5.917065620422363
I0123 16:06:45.203011 140197953007616 ddar.py:60] Depth 8/1000 time = 6.124884128570557
I0123 16:06:45.204527 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:06:45.204619 140197953007616 alphageometry.py:566] LM output (score=-3.346578): "n : C j m n 19 D j n m n 20 ;"
I0123 16:06:45.204657 140197953007616 alphageometry.py:567] Translation: "n = on_line n j m, on_bline n m j"

I0123 16:06:45.204711 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n j m, on_bline n m j ? eqangle k g k j k l k g"
I0123 16:06:45.204922 140197953007616 graph.py:498] 
I0123 16:06:45.204985 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n j m, on_bline n m j ? eqangle k g k j k l k g
I0123 16:06:46.379157 140197953007616 ddar.py:60] Depth 1/1000 time = 1.1316890716552734
I0123 16:06:50.482615 140197953007616 ddar.py:60] Depth 2/1000 time = 4.103217840194702
I0123 16:06:54.183224 140197953007616 ddar.py:60] Depth 3/1000 time = 3.7003448009490967
I0123 16:06:57.904702 140197953007616 ddar.py:60] Depth 4/1000 time = 3.721184253692627
I0123 16:07:01.645057 140197953007616 ddar.py:60] Depth 5/1000 time = 3.7395291328430176
I0123 16:07:06.413111 140197953007616 ddar.py:60] Depth 6/1000 time = 4.767373085021973
I0123 16:07:11.073078 140197953007616 ddar.py:60] Depth 7/1000 time = 4.635413408279419
I0123 16:07:16.563817 140197953007616 ddar.py:60] Depth 8/1000 time = 5.490463018417358
I0123 16:07:21.223047 140197953007616 ddar.py:60] Depth 9/1000 time = 4.640376091003418
I0123 16:07:21.224491 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:07:21.224599 140197953007616 alphageometry.py:566] LM output (score=-3.389314): "n : C k m n 19 D k n m n 20 ;"
I0123 16:07:21.224636 140197953007616 alphageometry.py:567] Translation: "n = on_line n k m, on_bline n m k"

I0123 16:07:21.224691 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n k m, on_bline n m k ? eqangle k g k j k l k g"
I0123 16:07:21.224916 140197953007616 graph.py:498] 
I0123 16:07:21.224979 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n k m, on_bline n m k ? eqangle k g k j k l k g
I0123 16:07:23.380298 140197953007616 ddar.py:60] Depth 1/1000 time = 2.1130287647247314
I0123 16:07:26.395687 140197953007616 ddar.py:60] Depth 2/1000 time = 3.0151450634002686
I0123 16:07:30.052564 140197953007616 ddar.py:60] Depth 3/1000 time = 3.6566145420074463
I0123 16:07:34.692972 140197953007616 ddar.py:60] Depth 4/1000 time = 4.6400980949401855
I0123 16:07:38.519620 140197953007616 ddar.py:60] Depth 5/1000 time = 3.825792074203491
I0123 16:07:44.321088 140197953007616 ddar.py:60] Depth 6/1000 time = 5.7779881954193115
I0123 16:07:48.946064 140197953007616 ddar.py:60] Depth 7/1000 time = 4.62466025352478
I0123 16:07:53.592314 140197953007616 ddar.py:60] Depth 8/1000 time = 4.6285340785980225
I0123 16:07:53.593593 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:07:53.593686 140197953007616 alphageometry.py:566] LM output (score=-3.409471): "n : P b e m n 19 ;"
I0123 16:07:53.593729 140197953007616 alphageometry.py:567] Translation: "n = on_pline n m b e"

I0123 16:07:53.593774 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_pline n m b e ? eqangle k g k j k l k g"
I0123 16:07:53.593954 140197953007616 graph.py:498] 
I0123 16:07:53.594022 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_pline n m b e ? eqangle k g k j k l k g
I0123 16:07:55.662355 140197953007616 ddar.py:60] Depth 1/1000 time = 2.0263426303863525
I0123 16:07:58.916486 140197953007616 ddar.py:60] Depth 2/1000 time = 3.2538340091705322
I0123 16:08:03.623202 140197953007616 ddar.py:60] Depth 3/1000 time = 4.706371545791626
I0123 16:08:07.382753 140197953007616 ddar.py:60] Depth 4/1000 time = 3.7592360973358154
I0123 16:08:11.111330 140197953007616 ddar.py:60] Depth 5/1000 time = 3.7277705669403076
I0123 16:08:16.913590 140197953007616 ddar.py:60] Depth 6/1000 time = 5.777323246002197
I0123 16:08:21.600569 140197953007616 ddar.py:60] Depth 7/1000 time = 4.68652606010437
I0123 16:08:27.290484 140197953007616 ddar.py:60] Depth 8/1000 time = 5.67004919052124
I0123 16:08:27.291736 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:08:27.291804 140197953007616 alphageometry.py:566] LM output (score=-3.521089): "n : C b c n 19 D b c b n 20 ;"
I0123 16:08:27.291844 140197953007616 alphageometry.py:567] Translation: "n = on_line n b c, on_circle n b c"

I0123 16:08:27.291887 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n b c, on_circle n b c ? eqangle k g k j k l k g"
I0123 16:08:27.292084 140197953007616 graph.py:498] 
I0123 16:08:27.292151 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n b c, on_circle n b c ? eqangle k g k j k l k g
I0123 16:08:29.591963 140197953007616 ddar.py:60] Depth 1/1000 time = 2.258094072341919
I0123 16:08:34.048941 140197953007616 ddar.py:60] Depth 2/1000 time = 4.456721067428589
I0123 16:08:38.263618 140197953007616 ddar.py:60] Depth 3/1000 time = 4.2143778800964355
I0123 16:08:43.248470 140197953007616 ddar.py:60] Depth 4/1000 time = 4.984487056732178
I0123 16:08:48.253681 140197953007616 ddar.py:60] Depth 5/1000 time = 5.004334449768066
I0123 16:08:54.434750 140197953007616 ddar.py:60] Depth 6/1000 time = 6.155989408493042
I0123 16:09:00.485121 140197953007616 ddar.py:60] Depth 7/1000 time = 6.049939870834351
I0123 16:09:06.537833 140197953007616 ddar.py:60] Depth 8/1000 time = 6.036001205444336
I0123 16:09:06.539071 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:09:06.539139 140197953007616 alphageometry.py:566] LM output (score=-3.535399): "n : C b i n 19 T g h m n 20 ;"
I0123 16:09:06.539179 140197953007616 alphageometry.py:567] Translation: "n = on_line n b i, on_tline n m g h"

I0123 16:09:06.539221 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n b i, on_tline n m g h ? eqangle k g k j k l k g"
I0123 16:09:06.539405 140197953007616 graph.py:498] 
I0123 16:09:06.539471 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b h, on_bline m h b; n = on_line n b i, on_tline n m g h ? eqangle k g k j k l k g
I0123 16:09:09.094278 140197953007616 ddar.py:60] Depth 1/1000 time = 2.5121092796325684
I0123 16:09:15.125165 140197953007616 ddar.py:60] Depth 2/1000 time = 6.030601263046265
I0123 16:09:20.812525 140197953007616 ddar.py:60] Depth 3/1000 time = 5.687065362930298
I0123 16:09:26.490965 140197953007616 ddar.py:60] Depth 4/1000 time = 5.678128480911255
I0123 16:09:32.187382 140197953007616 ddar.py:60] Depth 5/1000 time = 5.695557355880737
I0123 16:09:39.822741 140197953007616 ddar.py:60] Depth 6/1000 time = 7.610669851303101
I0123 16:09:47.595026 140197953007616 ddar.py:60] Depth 7/1000 time = 7.771982431411743
I0123 16:09:54.425727 140197953007616 ddar.py:60] Depth 8/1000 time = 6.813055515289307
I0123 16:09:54.426936 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:09:54.427011 140197953007616 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d c d 00 D b d c d 01 ; e : C a b e 02 T a b c e 03 ; f : C c e f 04 D c d d f 05 ; g : C b c g 06 ; h : C a c h 07 P a b g h 08 ; i : C b f i 09 P c f g i 10 ; j : C b f j 11 T b f h j 12 ; k : C a f k 13 T a f g k 14 ; l : C a c l 15 T a c i l 16 ? ^ k g k j k l k g {F1} x00 m : C b c m 17 D b m c m 18 ; x00
I0123 16:10:01.404355 140197953007616 alphageometry.py:566] LM output (score=-1.194300): "n : C c i n 19 D c n i n 20 ;"
I0123 16:10:01.404566 140197953007616 alphageometry.py:567] Translation: "n = on_line n c i, on_bline n i c"

I0123 16:10:01.404611 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_bline m c b; n = on_line n c i, on_bline n i c ? eqangle k g k j k l k g"
I0123 16:10:01.404779 140197953007616 graph.py:498] 
I0123 16:10:01.404844 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_bline m c b; n = on_line n c i, on_bline n i c ? eqangle k g k j k l k g
I0123 16:10:03.765725 140197953007616 ddar.py:60] Depth 1/1000 time = 2.319993257522583
I0123 16:10:08.987748 140197953007616 ddar.py:60] Depth 2/1000 time = 5.221752882003784
I0123 16:10:17.326619 140197953007616 ddar.py:60] Depth 3/1000 time = 8.338592767715454
I0123 16:10:24.612167 140197953007616 ddar.py:60] Depth 4/1000 time = 7.285240173339844
I0123 16:10:31.828240 140197953007616 ddar.py:60] Depth 5/1000 time = 7.215775489807129
I0123 16:10:40.133754 140197953007616 ddar.py:60] Depth 6/1000 time = 8.304712295532227
I0123 16:10:47.558599 140197953007616 ddar.py:60] Depth 7/1000 time = 7.353858470916748
I0123 16:10:47.560169 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:10:47.560254 140197953007616 alphageometry.py:566] LM output (score=-1.242149): "n : C b h n 19 D b n h n 20 ;"
I0123 16:10:47.560294 140197953007616 alphageometry.py:567] Translation: "n = on_line n b h, on_bline n h b"

I0123 16:10:47.560336 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_bline m c b; n = on_line n b h, on_bline n h b ? eqangle k g k j k l k g"
I0123 16:10:47.560526 140197953007616 graph.py:498] 
I0123 16:10:47.560592 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_bline m c b; n = on_line n b h, on_bline n h b ? eqangle k g k j k l k g
I0123 16:10:49.962340 140197953007616 ddar.py:60] Depth 1/1000 time = 2.359309434890747
I0123 16:10:54.219783 140197953007616 ddar.py:60] Depth 2/1000 time = 4.25718092918396
I0123 16:11:03.082878 140197953007616 ddar.py:60] Depth 3/1000 time = 8.862771987915039
I0123 16:11:10.590049 140197953007616 ddar.py:60] Depth 4/1000 time = 7.506737470626831
I0123 16:11:18.047635 140197953007616 ddar.py:60] Depth 5/1000 time = 7.45729398727417
I0123 16:11:25.529998 140197953007616 ddar.py:60] Depth 6/1000 time = 7.4815733432769775
I0123 16:11:34.027679 140197953007616 ddar.py:60] Depth 7/1000 time = 8.429571390151978
I0123 16:11:34.029108 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:11:34.029195 140197953007616 alphageometry.py:566] LM output (score=-1.402127): "n : C b i n 19 D b n i n 20 ;"
I0123 16:11:34.029234 140197953007616 alphageometry.py:567] Translation: "n = on_line n b i, on_bline n i b"

I0123 16:11:34.029275 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_bline m c b; n = on_line n b i, on_bline n i b ? eqangle k g k j k l k g"
I0123 16:11:34.029490 140197953007616 graph.py:498] 
I0123 16:11:34.029559 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_bline m c b; n = on_line n b i, on_bline n i b ? eqangle k g k j k l k g
I0123 16:11:36.847625 140197953007616 ddar.py:60] Depth 1/1000 time = 2.775317430496216
I0123 16:11:43.573963 140197953007616 ddar.py:60] Depth 2/1000 time = 6.726057291030884
I0123 16:11:54.159301 140197953007616 ddar.py:60] Depth 3/1000 time = 10.585054874420166
I0123 16:12:03.458538 140197953007616 ddar.py:60] Depth 4/1000 time = 9.298915147781372
I0123 16:12:12.621578 140197953007616 ddar.py:60] Depth 5/1000 time = 9.162716627120972
I0123 16:12:22.996145 140197953007616 ddar.py:60] Depth 6/1000 time = 10.373698949813843
I0123 16:12:32.229245 140197953007616 ddar.py:60] Depth 7/1000 time = 9.172245264053345
I0123 16:12:32.230670 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:12:32.230757 140197953007616 alphageometry.py:566] LM output (score=-1.712773): "n : C a b n 19 D a n b n 20 ;"
I0123 16:12:32.230797 140197953007616 alphageometry.py:567] Translation: "n = on_line n a b, on_bline n b a"

I0123 16:12:32.230841 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_bline m c b; n = on_line n a b, on_bline n b a ? eqangle k g k j k l k g"
I0123 16:12:32.231032 140197953007616 graph.py:498] 
I0123 16:12:32.231102 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_bline m c b; n = on_line n a b, on_bline n b a ? eqangle k g k j k l k g
I0123 16:12:34.950135 140197953007616 ddar.py:60] Depth 1/1000 time = 2.67649507522583
I0123 16:12:42.757850 140197953007616 ddar.py:60] Depth 2/1000 time = 7.807390451431274
I0123 16:12:55.012486 140197953007616 ddar.py:60] Depth 3/1000 time = 12.254330396652222
I0123 16:13:05.327510 140197953007616 ddar.py:60] Depth 4/1000 time = 10.314671039581299
I0123 16:13:16.595536 140197953007616 ddar.py:60] Depth 5/1000 time = 11.267192602157593
I0123 16:13:26.907866 140197953007616 ddar.py:60] Depth 6/1000 time = 10.240824937820435
I0123 16:13:38.374350 140197953007616 ddar.py:60] Depth 7/1000 time = 11.466169357299805
I0123 16:13:38.376275 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:13:38.376351 140197953007616 alphageometry.py:566] LM output (score=-1.751097): "n : T g h h n 19 ;"
I0123 16:13:38.376392 140197953007616 alphageometry.py:567] Translation: "n = on_tline n h g h"

I0123 16:13:38.376437 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_bline m c b; n = on_tline n h g h ? eqangle k g k j k l k g"
I0123 16:13:38.376631 140197953007616 graph.py:498] 
I0123 16:13:38.376697 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_bline m c b; n = on_tline n h g h ? eqangle k g k j k l k g
I0123 16:13:40.694181 140197953007616 ddar.py:60] Depth 1/1000 time = 2.2727627754211426
I0123 16:13:44.507666 140197953007616 ddar.py:60] Depth 2/1000 time = 3.8132429122924805
I0123 16:13:53.437480 140197953007616 ddar.py:60] Depth 3/1000 time = 8.929480791091919
I0123 16:14:00.743034 140197953007616 ddar.py:60] Depth 4/1000 time = 7.3050761222839355
I0123 16:14:07.990913 140197953007616 ddar.py:60] Depth 5/1000 time = 7.247592210769653
I0123 16:14:15.259321 140197953007616 ddar.py:60] Depth 6/1000 time = 7.267536640167236
I0123 16:14:22.279151 140197953007616 ddar.py:60] Depth 7/1000 time = 6.959780693054199
I0123 16:14:22.280449 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:14:22.280535 140197953007616 alphageometry.py:566] LM output (score=-1.928500): "n : C g h n 19 D g n h n 20 ;"
I0123 16:14:22.280576 140197953007616 alphageometry.py:567] Translation: "n = on_line n g h, on_bline n h g"

I0123 16:14:22.280616 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_bline m c b; n = on_line n g h, on_bline n h g ? eqangle k g k j k l k g"
I0123 16:14:22.280804 140197953007616 graph.py:498] 
I0123 16:14:22.280874 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_bline m c b; n = on_line n g h, on_bline n h g ? eqangle k g k j k l k g
I0123 16:14:24.766486 140197953007616 ddar.py:60] Depth 1/1000 time = 2.4435861110687256
I0123 16:14:29.961871 140197953007616 ddar.py:60] Depth 2/1000 time = 5.195104122161865
I0123 16:14:37.604282 140197953007616 ddar.py:60] Depth 3/1000 time = 7.641921043395996
I0123 16:14:46.202188 140197953007616 ddar.py:60] Depth 4/1000 time = 8.597537517547607
I0123 16:14:53.618126 140197953007616 ddar.py:60] Depth 5/1000 time = 7.415503263473511
I0123 16:15:01.012193 140197953007616 ddar.py:60] Depth 6/1000 time = 7.393295764923096
I0123 16:15:09.590183 140197953007616 ddar.py:60] Depth 7/1000 time = 8.518675327301025
I0123 16:15:09.591554 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:15:09.591647 140197953007616 alphageometry.py:566] LM output (score=-1.939632): "n : C c f n 19 D c n f n 20 ;"
I0123 16:15:09.591688 140197953007616 alphageometry.py:567] Translation: "n = on_line n c f, on_bline n f c"

I0123 16:15:09.591729 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_bline m c b; n = on_line n c f, on_bline n f c ? eqangle k g k j k l k g"
I0123 16:15:09.591912 140197953007616 graph.py:498] 
I0123 16:15:09.591977 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_bline m c b; n = on_line n c f, on_bline n f c ? eqangle k g k j k l k g
I0123 16:15:12.268520 140197953007616 ddar.py:60] Depth 1/1000 time = 2.6339335441589355
I0123 16:15:20.089024 140197953007616 ddar.py:60] Depth 2/1000 time = 7.820239782333374
I0123 16:15:32.136272 140197953007616 ddar.py:60] Depth 3/1000 time = 12.04694676399231
I0123 16:15:43.653622 140197953007616 ddar.py:60] Depth 4/1000 time = 11.516955375671387
I0123 16:15:54.307369 140197953007616 ddar.py:60] Depth 5/1000 time = 10.652860164642334
I0123 16:16:05.969607 140197953007616 ddar.py:60] Depth 6/1000 time = 11.588526010513306
I0123 16:16:16.473039 140197953007616 ddar.py:60] Depth 7/1000 time = 10.503066778182983
I0123 16:16:16.475064 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:16:16.475171 140197953007616 alphageometry.py:566] LM output (score=-2.045280): "n : C g i n 19 D g n i n 20 ;"
I0123 16:16:16.475214 140197953007616 alphageometry.py:567] Translation: "n = on_line n g i, on_bline n i g"

I0123 16:16:16.475256 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_bline m c b; n = on_line n g i, on_bline n i g ? eqangle k g k j k l k g"
I0123 16:16:16.475455 140197953007616 graph.py:498] 
I0123 16:16:16.475522 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_bline m c b; n = on_line n g i, on_bline n i g ? eqangle k g k j k l k g
I0123 16:16:17.891297 140197953007616 ddar.py:60] Depth 1/1000 time = 1.3684849739074707
I0123 16:16:23.033224 140197953007616 ddar.py:60] Depth 2/1000 time = 5.141600847244263
I0123 16:16:31.995241 140197953007616 ddar.py:60] Depth 3/1000 time = 8.961721420288086
I0123 16:16:39.410502 140197953007616 ddar.py:60] Depth 4/1000 time = 7.414904356002808
I0123 16:16:47.748971 140197953007616 ddar.py:60] Depth 5/1000 time = 8.338021993637085
I0123 16:16:55.095949 140197953007616 ddar.py:60] Depth 6/1000 time = 7.3461220264434814
I0123 16:17:02.505377 140197953007616 ddar.py:60] Depth 7/1000 time = 7.350396394729614
I0123 16:17:02.506745 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:17:02.506819 140197953007616 alphageometry.py:566] LM output (score=-2.079344): "n : C h i n 19 D h n i n 20 ;"
I0123 16:17:02.506857 140197953007616 alphageometry.py:567] Translation: "n = on_line n h i, on_bline n i h"

I0123 16:17:02.506897 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_bline m c b; n = on_line n h i, on_bline n i h ? eqangle k g k j k l k g"
I0123 16:17:02.507080 140197953007616 graph.py:498] 
I0123 16:17:02.507141 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_bline m c b; n = on_line n h i, on_bline n i h ? eqangle k g k j k l k g
I0123 16:17:04.911739 140197953007616 ddar.py:60] Depth 1/1000 time = 2.362302303314209
I0123 16:17:11.380042 140197953007616 ddar.py:60] Depth 2/1000 time = 6.468026161193848
I0123 16:17:21.258418 140197953007616 ddar.py:60] Depth 3/1000 time = 9.878046035766602
I0123 16:17:31.289130 140197953007616 ddar.py:60] Depth 4/1000 time = 10.030312299728394
I0123 16:17:40.362628 140197953007616 ddar.py:60] Depth 5/1000 time = 9.073163032531738
I0123 16:17:49.367980 140197953007616 ddar.py:60] Depth 6/1000 time = 9.004414319992065
I0123 16:17:58.491566 140197953007616 ddar.py:60] Depth 7/1000 time = 9.02091670036316
I0123 16:18:08.731242 140197953007616 ddar.py:60] Depth 8/1000 time = 10.235711336135864
I0123 16:18:08.731693 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:18:08.731802 140197953007616 alphageometry.py:566] LM output (score=-2.154490): "n : C c h n 19 D c n h n 20 ;"
I0123 16:18:08.731842 140197953007616 alphageometry.py:567] Translation: "n = on_line n c h, on_bline n h c"

I0123 16:18:08.731885 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_bline m c b; n = on_line n c h, on_bline n h c ? eqangle k g k j k l k g"
I0123 16:18:08.732075 140197953007616 graph.py:498] 
I0123 16:18:08.732139 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_bline m c b; n = on_line n c h, on_bline n h c ? eqangle k g k j k l k g
I0123 16:18:11.588453 140197953007616 ddar.py:60] Depth 1/1000 time = 2.813654661178589
I0123 16:18:18.404503 140197953007616 ddar.py:60] Depth 2/1000 time = 6.815771102905273
I0123 16:18:28.462435 140197953007616 ddar.py:60] Depth 3/1000 time = 10.057621479034424
I0123 16:18:37.805124 140197953007616 ddar.py:60] Depth 4/1000 time = 9.342313289642334
I0123 16:18:48.265993 140197953007616 ddar.py:60] Depth 5/1000 time = 10.460466861724854
I0123 16:18:57.757945 140197953007616 ddar.py:60] Depth 6/1000 time = 9.491131067276001
I0123 16:19:07.253504 140197953007616 ddar.py:60] Depth 7/1000 time = 9.43346118927002
I0123 16:19:07.254893 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:19:07.254976 140197953007616 alphageometry.py:566] LM output (score=-2.246190): "n : D b c b n 19 T a b c n 20 ;"
I0123 16:19:07.255016 140197953007616 alphageometry.py:567] Translation: "n = on_circle n b c, on_tline n c a b"

I0123 16:19:07.255057 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_bline m c b; n = on_circle n b c, on_tline n c a b ? eqangle k g k j k l k g"
I0123 16:19:07.255246 140197953007616 graph.py:498] 
I0123 16:19:07.255315 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_bline m c b; n = on_circle n b c, on_tline n c a b ? eqangle k g k j k l k g
I0123 16:19:08.906102 140197953007616 ddar.py:60] Depth 1/1000 time = 1.6089496612548828
I0123 16:19:15.829185 140197953007616 ddar.py:60] Depth 2/1000 time = 6.922775506973267
I0123 16:19:25.729277 140197953007616 ddar.py:60] Depth 3/1000 time = 9.899720430374146
I0123 16:19:37.171491 140197953007616 ddar.py:60] Depth 4/1000 time = 11.44186520576477
I0123 16:19:49.092270 140197953007616 ddar.py:60] Depth 5/1000 time = 11.920334100723267
I0123 16:20:00.179317 140197953007616 ddar.py:60] Depth 6/1000 time = 11.086150884628296
I0123 16:20:11.233577 140197953007616 ddar.py:60] Depth 7/1000 time = 10.97838568687439
I0123 16:20:11.244013 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:20:11.244114 140197953007616 alphageometry.py:566] LM output (score=-2.395575): "n : C b e n 19 D b n e n 20 ;"
I0123 16:20:11.244155 140197953007616 alphageometry.py:567] Translation: "n = on_line n b e, on_bline n e b"

I0123 16:20:11.244198 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_bline m c b; n = on_line n b e, on_bline n e b ? eqangle k g k j k l k g"
I0123 16:20:11.244425 140197953007616 graph.py:498] 
I0123 16:20:11.244498 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_bline m c b; n = on_line n b e, on_bline n e b ? eqangle k g k j k l k g
I0123 16:20:14.043301 140197953007616 ddar.py:60] Depth 1/1000 time = 2.7560548782348633
I0123 16:20:21.085690 140197953007616 ddar.py:60] Depth 2/1000 time = 7.04203987121582
I0123 16:20:31.232362 140197953007616 ddar.py:60] Depth 3/1000 time = 10.146390914916992
I0123 16:20:41.337309 140197953007616 ddar.py:60] Depth 4/1000 time = 10.104638814926147
I0123 16:20:51.297453 140197953007616 ddar.py:60] Depth 5/1000 time = 9.95985221862793
I0123 16:21:01.246145 140197953007616 ddar.py:60] Depth 6/1000 time = 9.947856664657593
I0123 16:21:12.262413 140197953007616 ddar.py:60] Depth 7/1000 time = 10.94563889503479
I0123 16:21:12.263916 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:21:12.264017 140197953007616 alphageometry.py:566] LM output (score=-2.468667): "n : D b c b n 19 D c e e n 20 ;"
I0123 16:21:12.264057 140197953007616 alphageometry.py:567] Translation: "n = on_circle n b c, on_circle n e c"

I0123 16:21:12.264104 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_bline m c b; n = on_circle n b c, on_circle n e c ? eqangle k g k j k l k g"
I0123 16:21:12.264310 140197953007616 graph.py:498] 
I0123 16:21:12.264377 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_bline m c b; n = on_circle n b c, on_circle n e c ? eqangle k g k j k l k g
I0123 16:21:13.611132 140197953007616 ddar.py:60] Depth 1/1000 time = 1.2980375289916992
I0123 16:21:19.560843 140197953007616 ddar.py:60] Depth 2/1000 time = 5.949389934539795
I0123 16:21:32.407142 140197953007616 ddar.py:60] Depth 3/1000 time = 12.846033573150635
I0123 16:21:43.104706 140197953007616 ddar.py:60] Depth 4/1000 time = 10.697246551513672
I0123 16:21:53.906048 140197953007616 ddar.py:60] Depth 5/1000 time = 10.80098843574524
I0123 16:22:04.652100 140197953007616 ddar.py:60] Depth 6/1000 time = 10.745139837265015
I0123 16:22:15.309770 140197953007616 ddar.py:60] Depth 7/1000 time = 10.577138900756836
I0123 16:22:15.313359 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:22:15.313455 140197953007616 alphageometry.py:566] LM output (score=-2.482173): "n : D b c b n 19 D c d d n 20 ;"
I0123 16:22:15.313493 140197953007616 alphageometry.py:567] Translation: "n = on_circle n b c, on_circle n d c"

I0123 16:22:15.313546 140197953007616 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_bline m c b; n = on_circle n b c, on_circle n d c ? eqangle k g k j k l k g"
I0123 16:22:15.313760 140197953007616 graph.py:498] 
I0123 16:22:15.313830 140197953007616 graph.py:499] a b c = triangle a b c; d = circle d a c b; e = foot e c a b; f = on_circle f d c, on_line f e c; g = on_line g c b; h = on_pline h g b a, on_line h a c; i = on_pline i g c f, on_line i f b; j = foot j h b f; k = foot k g f a; l = foot l i a c; m = on_line m b c, on_bline m c b; n = on_circle n b c, on_circle n d c ? eqangle k g k j k l k g
I0123 16:22:17.987781 140197953007616 ddar.py:60] Depth 1/1000 time = 2.6252517700195312
I0123 16:22:25.012930 140197953007616 ddar.py:60] Depth 2/1000 time = 7.024899482727051
I0123 16:22:38.931893 140197953007616 ddar.py:60] Depth 3/1000 time = 13.91863203048706
I0123 16:22:49.011701 140197953007616 ddar.py:60] Depth 4/1000 time = 10.079378366470337
I0123 16:23:00.379387 140197953007616 ddar.py:60] Depth 5/1000 time = 11.367339134216309
I0123 16:23:10.534899 140197953007616 ddar.py:60] Depth 6/1000 time = 10.15475082397461
I0123 16:23:10.650197 140197953007616 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:23:10.650301 140197953007616 alphageometry.py:585] Timeout.
