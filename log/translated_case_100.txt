I0123 14:21:45.767359 139850290401280 inference_utils.py:69] Parsing gin configuration.
I0123 14:21:45.767485 139850290401280 inference_utils.py:71] Added Gin search path meliad_lib/meliad/transformer/configs
I0123 14:21:45.767689 139850290401280 inference_utils.py:74] Loading Gin config file base_htrans.gin
I0123 14:21:45.767723 139850290401280 inference_utils.py:74] Loading Gin config file size/medium_150M.gin
I0123 14:21:45.767751 139850290401280 inference_utils.py:74] Loading Gin config file options/positions_t5.gin
I0123 14:21:45.767778 139850290401280 inference_utils.py:74] Loading Gin config file options/lr_cosine_decay.gin
I0123 14:21:45.767804 139850290401280 inference_utils.py:74] Loading Gin config file options/seq_1024_nocache.gin
I0123 14:21:45.767828 139850290401280 inference_utils.py:74] Loading Gin config file geometry_150M_generate.gin
I0123 14:21:45.767853 139850290401280 inference_utils.py:76] Overriding Gin param DecoderOnlyLanguageModelGenerate.output_token_losses=True
I0123 14:21:45.767879 139850290401280 inference_utils.py:76] Overriding Gin param TransformerTaskConfig.batch_size=32
I0123 14:21:45.767904 139850290401280 inference_utils.py:76] Overriding Gin param TransformerTaskConfig.sequence_length=128
I0123 14:21:45.767928 139850290401280 inference_utils.py:76] Overriding Gin param Trainer.restore_state_variables=False
I0123 14:21:45.767975 139850290401280 resource_reader.py:50] system_path_file_exists:base_htrans.gin
E0123 14:21:45.768119 139850290401280 resource_reader.py:55] Path not found: base_htrans.gin
I0123 14:21:45.768362 139850290401280 resource_reader.py:50] system_path_file_exists:trainer_configuration.gin
E0123 14:21:45.768471 139850290401280 resource_reader.py:55] Path not found: trainer_configuration.gin
I0123 14:21:45.774906 139850290401280 resource_reader.py:50] system_path_file_exists:size/medium_150M.gin
E0123 14:21:45.775031 139850290401280 resource_reader.py:55] Path not found: size/medium_150M.gin
I0123 14:21:45.775354 139850290401280 resource_reader.py:50] system_path_file_exists:options/positions_t5.gin
E0123 14:21:45.775458 139850290401280 resource_reader.py:55] Path not found: options/positions_t5.gin
I0123 14:21:45.775733 139850290401280 resource_reader.py:50] system_path_file_exists:options/lr_cosine_decay.gin
E0123 14:21:45.775829 139850290401280 resource_reader.py:55] Path not found: options/lr_cosine_decay.gin
I0123 14:21:45.776230 139850290401280 resource_reader.py:50] system_path_file_exists:options/seq_1024_nocache.gin
E0123 14:21:45.776327 139850290401280 resource_reader.py:55] Path not found: options/seq_1024_nocache.gin
I0123 14:21:45.779972 139850290401280 training_loop.py:334] ==== Training loop: initializing model ====
I0123 14:21:45.879724 139850290401280 xla_bridge.py:660] Unable to initialize backend 'rocm': NOT_FOUND: Could not find registered platform with name: "rocm". Available platform names are: CUDA
I0123 14:21:45.880541 139850290401280 xla_bridge.py:660] Unable to initialize backend 'tpu': INTERNAL: Failed to open libtpu.so: libtpu.so: cannot open shared object file: No such file or directory
I0123 14:21:45.887230 139850290401280 training_loop.py:335] Process 0 of 1
I0123 14:21:45.887284 139850290401280 training_loop.py:336] Local device count = 1
I0123 14:21:45.887324 139850290401280 training_loop.py:337] Number of replicas = 1
I0123 14:21:45.887357 139850290401280 training_loop.py:339] Using random number seed 42
I0123 14:21:46.397125 139850290401280 training_loop.py:359] Initializing the model.
I0123 14:21:46.779090 139850290401280 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.779427 139850290401280 decoder_stack.py:316] dstack: scanning over 1 windows.
I0123 14:21:46.779542 139850290401280 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:21:46.779616 139850290401280 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:21:46.779689 139850290401280 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:21:46.779767 139850290401280 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:21:46.779833 139850290401280 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:21:46.779899 139850290401280 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:21:46.779964 139850290401280 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:21:46.780029 139850290401280 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:21:46.780094 139850290401280 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:21:46.780159 139850290401280 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:21:46.780223 139850290401280 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:21:46.780291 139850290401280 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:21:46.780330 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:46.780374 139850290401280 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 14:21:46.780485 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:46.780522 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:46.780550 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:46.782542 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.787811 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:46.798442 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.798728 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:46.803047 139850290401280 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:21:46.813888 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:46.813944 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:46.813980 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:46.814012 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.814073 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.815251 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.815332 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.816042 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.818475 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.824588 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.825889 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.825973 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:46.826008 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:46.826066 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.826195 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:46.826525 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:46.826572 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:46.828459 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.828563 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:46.831413 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.831496 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:46.831980 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:46.842028 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:46.850712 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.850813 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:46.851106 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.851185 139850290401280 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 14:21:46.851293 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:46.851331 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:46.851360 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:46.853190 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.855678 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:46.861215 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.861481 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:46.864082 139850290401280 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:21:46.867847 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:46.867901 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:46.867934 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:46.867964 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.868025 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.868587 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.868663 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.869019 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.869803 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.872275 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.872894 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.872968 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:46.873002 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:46.873057 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.873180 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:46.873499 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:46.873541 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:46.875459 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.875553 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:46.878029 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.878107 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:46.878534 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:46.880823 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:46.882714 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.882809 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:46.883109 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.883189 139850290401280 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 14:21:46.883297 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:46.883334 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:46.883362 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:46.885566 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.887930 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:46.893435 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.893706 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:46.896370 139850290401280 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:21:46.900119 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:46.900173 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:46.900207 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:46.900235 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.900300 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.900854 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.900929 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.901288 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.902067 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.904562 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.905228 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.905303 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:46.905337 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:46.905393 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.905525 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:46.905858 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:46.905901 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:46.907802 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.907894 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:46.910406 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.910492 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:46.910975 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:46.913235 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:46.915151 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.915246 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:46.915542 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.915622 139850290401280 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 14:21:46.915731 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:46.915768 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:46.915797 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:46.917662 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.920060 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:46.925676 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.925934 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:46.928580 139850290401280 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:21:46.932359 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:46.932415 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:46.932449 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:46.932479 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.932538 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.933092 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.933165 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.933519 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.934353 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.936886 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.937503 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.937578 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:46.937612 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:46.937680 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.937809 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:46.938120 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:46.938163 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:46.940059 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.940151 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:46.942712 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.942794 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:46.943219 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:46.945451 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:46.947357 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.947452 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:46.947740 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.947818 139850290401280 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 14:21:46.947926 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:46.947964 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:46.947993 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:46.949882 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.952284 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:46.957849 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.958111 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:46.961104 139850290401280 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:21:46.964828 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:46.964882 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:46.964916 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:46.964946 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.965005 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.965565 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.965647 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.966015 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.966781 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.969316 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.969944 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.970021 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:46.970055 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:46.970110 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.970239 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:46.970557 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:46.970599 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:46.972504 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.972599 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:46.975144 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.975223 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:46.975644 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:46.977896 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:46.979839 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.979932 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:46.980224 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.980305 139850290401280 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 14:21:46.980413 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:46.980452 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:46.980482 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:46.982327 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.984707 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:46.990296 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.990557 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:46.993216 139850290401280 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:21:46.996897 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:46.996952 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:46.996986 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:46.997015 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.997075 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.997677 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.997757 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.998112 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:46.998878 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.001395 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.002026 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.002107 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:47.002140 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:47.002197 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.002323 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:47.002649 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:47.002692 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.004581 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.004673 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.007235 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.007317 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:47.007742 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:47.010040 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.011946 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.012042 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.012330 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.012413 139850290401280 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 14:21:47.012523 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:47.012561 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:47.012590 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:47.014415 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.016834 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:47.022431 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.022691 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:47.025302 139850290401280 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:21:47.029029 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:47.029084 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:47.029119 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:47.029148 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.029208 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.029775 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.029850 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.030206 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.030974 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.033447 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.034074 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.034151 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:47.034184 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:47.034240 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.034364 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:47.034687 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:47.034731 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.036984 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.037075 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.039557 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.039635 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:47.040064 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:47.178562 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.180886 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.181067 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.181386 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.181480 139850290401280 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 14:21:47.181597 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:47.181638 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:47.181680 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:47.183754 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.186329 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:47.192268 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.192546 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:47.195284 139850290401280 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:21:47.199236 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:47.199294 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:47.199330 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:47.199362 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.199429 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.200052 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.200129 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.200495 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.201287 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.203948 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.204585 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.204663 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:47.204697 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:47.204756 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.204881 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:47.205210 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:47.205254 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.207210 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.207306 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.209878 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.209958 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:47.210445 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:47.212787 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.214751 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.214855 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.215157 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.215240 139850290401280 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 14:21:47.215350 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:47.215389 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:47.215420 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:47.217339 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.219752 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:47.225419 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.225695 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:47.228394 139850290401280 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:21:47.232078 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:47.232132 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:47.232166 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:47.232195 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.232255 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.232815 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.232889 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.233237 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.234015 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.236526 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.237138 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.237215 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:47.237249 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:47.237305 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.237429 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:47.237756 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:47.237800 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.239686 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.239781 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.242297 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.242377 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:47.242805 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:47.245042 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.246936 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.247030 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.247318 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.247404 139850290401280 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 14:21:47.247513 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:47.247551 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:47.247581 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:47.249449 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.251804 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:47.257705 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.257957 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:47.260633 139850290401280 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:21:47.264298 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:47.264354 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:47.264388 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:47.264417 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.264477 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.265028 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.265102 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.265457 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.266278 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.268753 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.269353 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.269428 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:47.269461 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:47.269516 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.269653 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:47.269965 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:47.270007 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.271870 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.271960 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.274474 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.274552 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:47.274972 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:47.277185 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.279119 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.279212 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.279501 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.279587 139850290401280 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 14:21:47.279695 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:47.279733 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:47.279762 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:47.281576 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.284009 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:47.289509 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.289776 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:47.292433 139850290401280 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:21:47.296077 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:47.296131 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:47.296164 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:47.296194 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.296293 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.296845 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.296921 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.297283 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.298069 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.300538 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.301147 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.301223 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:47.301255 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:47.301311 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.301447 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:47.301769 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:47.301813 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.303734 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.303828 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.306513 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.306592 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:47.307015 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:47.309280 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.311167 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.311263 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.311546 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.311625 139850290401280 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 14:21:47.311740 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:47.311779 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:47.311808 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:47.313590 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.316033 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:47.321555 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.321813 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:47.324416 139850290401280 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:21:47.328436 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:47.328490 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:47.328524 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:47.328554 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.328616 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.329167 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.329246 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.329599 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.330371 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.332839 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.333456 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.333534 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:47.333568 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:47.333629 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.333766 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:47.334087 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:47.334129 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.336046 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.336138 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.338628 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.338707 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:47.339129 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:47.341387 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.343266 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.343365 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.343657 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.343931 139850290401280 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:21:47.343998 139850290401280 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:21:47.344062 139850290401280 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:21:47.344118 139850290401280 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:21:47.344172 139850290401280 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:21:47.344224 139850290401280 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:21:47.344276 139850290401280 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:21:47.344327 139850290401280 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:21:47.344377 139850290401280 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:21:47.344428 139850290401280 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:21:47.344478 139850290401280 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:21:47.344527 139850290401280 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:21:47.344566 139850290401280 decoder_stack.py:344] dstack: Final layernorm.
I0123 14:21:47.348046 139850290401280 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:21:47.399580 139850290401280 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.399711 139850290401280 decoder_stack.py:333] dstack: autoregressive generator.
I0123 14:21:47.399765 139850290401280 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 14:21:47.399873 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:47.399914 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:47.399943 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:47.400009 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.402456 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:47.407941 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.408198 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:47.410874 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:21:47.427320 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:47.427381 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:47.427417 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:47.427448 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.427508 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.428651 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.428730 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.429444 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.431453 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.436213 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.437501 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.437594 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:47.437629 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:47.437698 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.437830 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:47.437940 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:47.437978 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.439876 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.439970 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.442429 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.442508 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:47.442615 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:47.444858 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.446810 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.446904 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.447193 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.447273 139850290401280 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 14:21:47.447378 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:47.447416 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:47.447446 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:47.447506 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.449764 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:47.455166 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.455421 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:47.458073 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:21:47.471028 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:47.471084 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:47.471119 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:47.471149 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.471210 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.471759 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.471833 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.472186 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.472876 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.475380 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.475992 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.476069 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:47.476111 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:47.476168 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.476295 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:47.476408 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:47.476446 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.478382 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.478476 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.480871 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.480949 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:47.481056 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:47.483253 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.485163 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.485256 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.485545 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.485626 139850290401280 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 14:21:47.485743 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:47.485781 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:47.485810 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:47.485870 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.488096 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:47.493481 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.493745 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:47.496408 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:21:47.508964 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:47.509019 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:47.509053 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:47.509083 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.509143 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.509699 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.509776 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.510137 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.510831 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.513303 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.513939 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.514016 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:47.514049 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:47.514112 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.514239 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:47.514346 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:47.514383 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.516292 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.516385 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.518791 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.518869 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:47.518973 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:47.521171 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.523093 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.523188 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.523474 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.523556 139850290401280 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 14:21:47.523663 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:47.523701 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:47.523731 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:47.523793 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.526045 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:47.531448 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.531707 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:47.534377 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:21:47.546995 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:47.547050 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:47.547084 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:47.547113 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.547173 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.547733 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.547807 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.548154 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.548844 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.551334 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.551952 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.552027 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:47.552060 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:47.552117 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.552252 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:47.552359 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:47.552397 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.554612 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.554705 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.557108 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.557186 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:47.557292 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:47.559499 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.561365 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.561458 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.561752 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.561834 139850290401280 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 14:21:47.561940 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:47.561978 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:47.562006 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:47.562068 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.564352 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:47.569754 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.570016 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:47.572607 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:21:47.585140 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:47.585196 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:47.585230 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:47.585259 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.585320 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.585887 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.585963 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.586318 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.587003 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.589506 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.590137 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.590216 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:47.590250 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:47.590307 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.590438 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:47.590546 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:47.590584 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.592428 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.592521 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.594923 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.595005 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:47.595114 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:47.597347 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.599194 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.599288 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.599574 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.599654 139850290401280 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 14:21:47.599763 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:47.599802 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:47.599831 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:47.599893 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.602122 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:47.607476 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.607729 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:47.610419 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:21:47.622942 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:47.622997 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:47.623032 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:47.623061 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.623122 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.623673 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.623748 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.624100 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.624787 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.627258 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.627869 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.627946 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:47.627979 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:47.628037 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.628166 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:47.628289 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:47.628327 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.630254 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.630348 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.632740 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.632818 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:47.632925 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:47.635135 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.636966 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.637059 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.637344 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.637425 139850290401280 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 14:21:47.637534 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:47.637572 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:47.637602 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:47.637670 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.639889 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:47.645324 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.645578 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:47.648166 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:21:47.661045 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:47.661099 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:47.661133 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:47.661163 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.661222 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.661789 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.661866 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.662229 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.662908 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.665367 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.666036 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.666113 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:47.666146 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:47.666202 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.666329 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:47.666437 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:47.666478 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.668328 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.668419 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.670806 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.670885 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:47.670991 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:47.673178 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.675081 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.675176 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.675461 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.675544 139850290401280 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 14:21:47.675651 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:47.675688 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:47.675717 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:47.675776 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.678018 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:47.683384 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.683652 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:47.686301 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:21:47.698821 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:47.698874 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:47.698908 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:47.698937 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.698997 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.699594 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.699668 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.700020 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.700705 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.703190 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.703814 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.703891 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:47.703925 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:47.703982 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.704111 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:47.704217 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:47.704259 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.706139 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.706233 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.708672 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.708755 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:47.708863 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:47.711051 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.712912 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.713006 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.713293 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.713376 139850290401280 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 14:21:47.713483 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:47.713522 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:47.713552 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:47.713613 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.715847 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:47.721296 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.721553 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:47.724159 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:21:47.736735 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:47.736790 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:47.736824 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:47.736853 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.736913 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.737465 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.737541 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.737906 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.738604 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.741066 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.741734 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.741812 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:47.741846 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:47.741901 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.742031 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:47.742138 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:47.742176 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.744053 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.744146 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.746541 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.746620 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:47.746726 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:47.748911 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.750845 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.750940 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.751223 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.751302 139850290401280 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 14:21:47.751409 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:47.751447 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:47.751477 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:47.751538 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.753778 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:47.759140 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.759393 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:47.762442 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:21:47.774917 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:47.774972 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:47.775006 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:47.775034 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.775094 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.775695 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.775769 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.776126 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.776811 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.779309 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.779928 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.780004 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:47.780038 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:47.780092 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.780221 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:47.780328 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:47.780365 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.782231 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.782328 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.784767 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.784846 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:47.784956 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:47.787148 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.788994 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.789088 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.789373 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.789453 139850290401280 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 14:21:47.789559 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:47.789597 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:47.789627 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:47.789698 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.791935 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:47.797415 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.797677 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:47.800271 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:21:47.812708 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:47.812762 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:47.812796 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:47.812825 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.812885 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.813436 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.813511 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.813878 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.814571 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.817039 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.817701 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.817779 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:47.817813 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:47.817870 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.817996 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:47.818104 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:47.818142 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.820008 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.820106 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.822528 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.822607 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:47.822713 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:47.824917 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.826829 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.826924 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.827211 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.827292 139850290401280 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 14:21:47.827399 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:47.827437 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:47.827466 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:47.827527 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.829750 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:47.835118 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.835374 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:47.837957 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:21:47.850565 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:47.850620 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:47.850655 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:47.850685 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.850747 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.851302 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.851381 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.851735 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.852411 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.854975 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.855588 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.855665 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:47.855699 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:47.855756 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.855880 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:47.855991 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:47.856029 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.857906 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.857998 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.860407 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.860486 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:47.860592 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:47.863202 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.865058 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.865153 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.865440 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.865524 139850290401280 decoder_stack.py:344] dstack: Final layernorm.
I0123 14:21:47.868360 139850290401280 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:21:47.923665 139850290401280 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:47.923753 139850290401280 decoder_stack.py:333] dstack: autoregressive generator.
I0123 14:21:47.923806 139850290401280 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 14:21:47.923907 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:47.923945 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:47.923975 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:47.924035 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:47.926350 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:47.931635 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:47.931888 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:47.934410 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:21:47.946451 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:47.946506 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:47.946541 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:47.946570 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:47.946630 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:47.947169 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:47.947242 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:47.947593 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:47.948258 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:47.950740 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:47.951344 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:47.951418 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:47.951452 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:47.951509 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:47.951635 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:47.951749 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:47.951787 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.953591 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:47.953692 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.956027 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:47.956105 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:47.956212 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:47.958467 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.960280 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:47.960374 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.960655 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:47.960735 139850290401280 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 14:21:47.960840 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:47.960877 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:47.960907 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:47.960968 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:47.963172 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:47.968470 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:47.968723 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:47.971334 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:21:47.983334 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:47.983390 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:47.983424 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:47.983453 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:47.983514 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:47.984058 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:47.984132 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:47.984486 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:47.985153 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:47.987938 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:47.988543 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:47.988619 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:47.988654 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:47.988713 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:47.988838 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:47.988945 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:47.988989 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.990812 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:47.990905 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.993261 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:47.993340 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:47.993449 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:47.995667 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:47.997486 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:47.997581 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:47.997873 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:47.997956 139850290401280 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 14:21:47.998062 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:47.998100 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:47.998129 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:47.998189 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.000396 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:48.005718 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.005971 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:48.008587 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:21:48.020663 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:48.020718 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:48.020753 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:48.020782 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.020843 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.021384 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.021458 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.021823 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.022501 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.025400 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.026015 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.026092 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:48.026125 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:48.026182 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.026307 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:48.026412 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:48.026450 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:48.028278 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.028370 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:48.030732 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.030811 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:48.030919 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:48.033125 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:48.034960 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.035055 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:48.035338 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.035417 139850290401280 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 14:21:48.035522 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:48.035559 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:48.035589 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:48.035649 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.037846 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:48.043127 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.043380 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:48.046000 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:21:48.058126 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:48.058180 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:48.058217 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:48.058254 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.058316 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.058866 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.058940 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.059297 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.059969 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.062490 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.063093 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.063167 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:48.063199 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:48.063255 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.063378 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:48.063483 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:48.063523 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:48.065351 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.065440 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:48.067796 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.067874 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:48.067978 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:48.070232 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:48.072061 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.072152 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:48.072431 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.072511 139850290401280 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 14:21:48.072615 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:48.072652 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:48.072679 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:48.072737 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.074951 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:48.080274 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.080526 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:48.083163 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:21:48.095439 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:48.095493 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:48.095528 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:48.095557 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.095618 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.096159 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.096233 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.096586 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.097260 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.099785 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.100389 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.100463 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:48.100496 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:48.100551 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.100673 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:48.100779 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:48.100815 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:48.102677 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.102773 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:48.105139 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.105215 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:48.105322 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:48.107570 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:48.109398 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.109491 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:48.109782 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.109862 139850290401280 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 14:21:48.109966 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:48.110003 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:48.110032 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:48.110091 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.112293 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:48.117622 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.117879 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:48.120535 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:21:48.132819 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:48.132873 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:48.132905 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:48.132934 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.132998 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.133548 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.133621 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.133982 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.134661 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.137571 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.138196 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.138272 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:48.138305 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:48.138360 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.138485 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:48.138591 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:48.138626 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:48.140470 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.140568 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:48.142956 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.143033 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:48.143138 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:48.145367 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:48.147211 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.147304 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:48.147584 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.147662 139850290401280 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 14:21:48.147765 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:48.147800 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:48.147828 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:48.147886 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.150072 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:48.155376 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.155626 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:48.158283 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:21:48.170570 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:48.170624 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:48.170657 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:48.170685 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.170744 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.171294 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.171368 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.171720 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.172401 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.174943 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.175563 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.175637 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:48.175669 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:48.175724 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.175846 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:48.175950 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:48.175987 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:48.177858 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.177949 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:48.180328 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.180405 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:48.180510 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:48.182767 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:48.184617 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.184709 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:48.184992 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.185070 139850290401280 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 14:21:48.185176 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:48.185212 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:48.185240 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:48.185298 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.187512 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:48.192848 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.193099 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:48.195765 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:21:48.208108 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:48.208161 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:48.208195 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:48.208224 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.208283 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.208832 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.208906 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.209263 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.209958 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.212466 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.213078 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.213152 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:48.213185 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:48.213245 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.213370 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:48.213475 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:48.213511 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:48.215367 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.215458 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:48.217812 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.217895 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:48.218001 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:48.220222 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:48.222054 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.222148 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:48.222432 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.222510 139850290401280 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 14:21:48.222613 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:48.222649 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:48.222677 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:48.222736 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.224930 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:48.230269 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.230523 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:48.233180 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:21:48.245485 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:48.245539 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:48.245572 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:48.245601 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.245670 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.246222 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.246295 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.246641 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.247313 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.250219 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.250827 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.250902 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:48.250935 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:48.250990 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.251113 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:48.251219 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:48.251255 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:48.253109 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.253198 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:48.255566 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.255648 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:48.255754 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:48.258009 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:48.259825 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.259916 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:48.260194 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.260273 139850290401280 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 14:21:48.260377 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:48.260414 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:48.260442 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:48.260501 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.262732 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:48.268095 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.268345 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:48.270987 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:21:48.283292 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:48.283346 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:48.283379 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:48.283408 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.283468 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.284017 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.284092 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.284446 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.285118 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.287652 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.288265 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.288340 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:48.288373 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:48.288427 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.288552 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:48.288655 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:48.288691 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:48.290956 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.291049 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:48.293396 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.293472 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:48.293588 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:48.295816 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:48.297630 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.297730 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:48.298013 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.298091 139850290401280 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 14:21:48.298195 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:48.298231 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:48.298259 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:48.298316 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.300536 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:48.305877 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.306127 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:48.308764 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:21:48.320975 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:48.321027 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:48.321060 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:48.321088 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.321147 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.321708 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.321783 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.322136 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.322819 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.325349 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.325962 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.326035 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:48.326067 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:48.326121 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.326243 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:48.326349 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:48.326385 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:48.328235 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.328324 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:48.330698 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.330775 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:48.330879 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:48.333098 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:48.334939 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.335032 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:48.335313 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.335391 139850290401280 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 14:21:48.335495 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:21:48.335532 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:21:48.335560 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:21:48.335618 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.337811 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:21:48.343157 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.343407 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:21:48.346060 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:21:48.358359 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:21:48.358411 139850290401280 attention.py:418] Single window, no scan.
I0123 14:21:48.358448 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:21:48.358476 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.358536 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.359082 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.359159 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.359509 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.360209 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.363098 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.363709 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.363787 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:21:48.363820 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:21:48.363875 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.363998 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:21:48.364109 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:21:48.364146 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:48.365991 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.366080 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:48.368435 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.368511 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:21:48.368615 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:21:48.370881 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:21:48.372725 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.372815 139850290401280 nn_components.py:261] mlp: residual
I0123 14:21:48.373095 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:48.373177 139850290401280 decoder_stack.py:344] dstack: Final layernorm.
I0123 14:21:48.375955 139850290401280 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:21:52.790152 139850290401280 optimizer_config.py:74] Using Flax Adafactor Optimizer. lr=1.000000, b1=0.900000
I0123 14:21:53.285095 139850290401280 training_loop.py:409] No working directory specified.
I0123 14:21:53.285242 139850290401280 training_loop.py:431] Loading pre-trained model from ag_ckpt_vocab:
I0123 14:21:53.286067 139850290401280 checkpoints.py:1062] Restoring legacy Flax checkpoint from ag_ckpt_vocab/checkpoint_10999999
I0123 14:21:56.576142 139850290401280 training_loop.py:447] Only restoring trainable parameters.
I0123 14:21:56.576890 139850290401280 training_loop.py:724] parameter: decoder/embed/embedding, shape (1024, 1024), size 1048576
I0123 14:21:56.576973 139850290401280 training_loop.py:724] parameter: decoder/final_layernorm/scale, shape (1024,), size 1024
I0123 14:21:56.577024 139850290401280 training_loop.py:724] parameter: decoder/transformer0/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:21:56.577068 139850290401280 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:21:56.577107 139850290401280 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.577146 139850290401280 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:21:56.577184 139850290401280 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.577223 139850290401280 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.577261 139850290401280 training_loop.py:724] parameter: decoder/transformer0/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:21:56.577298 139850290401280 training_loop.py:724] parameter: decoder/transformer0/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:21:56.577335 139850290401280 training_loop.py:724] parameter: decoder/transformer0/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.577372 139850290401280 training_loop.py:724] parameter: decoder/transformer0/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:21:56.577409 139850290401280 training_loop.py:724] parameter: decoder/transformer1/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:21:56.577446 139850290401280 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:21:56.577481 139850290401280 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.577517 139850290401280 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:21:56.577552 139850290401280 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.577587 139850290401280 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.577622 139850290401280 training_loop.py:724] parameter: decoder/transformer1/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:21:56.577670 139850290401280 training_loop.py:724] parameter: decoder/transformer1/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:21:56.577733 139850290401280 training_loop.py:724] parameter: decoder/transformer1/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.577771 139850290401280 training_loop.py:724] parameter: decoder/transformer1/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:21:56.577807 139850290401280 training_loop.py:724] parameter: decoder/transformer10/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:21:56.577843 139850290401280 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:21:56.577878 139850290401280 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.577913 139850290401280 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:21:56.577949 139850290401280 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.577984 139850290401280 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.578018 139850290401280 training_loop.py:724] parameter: decoder/transformer10/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:21:56.578053 139850290401280 training_loop.py:724] parameter: decoder/transformer10/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:21:56.578087 139850290401280 training_loop.py:724] parameter: decoder/transformer10/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.578121 139850290401280 training_loop.py:724] parameter: decoder/transformer10/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:21:56.578156 139850290401280 training_loop.py:724] parameter: decoder/transformer11/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:21:56.578191 139850290401280 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:21:56.578225 139850290401280 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.578259 139850290401280 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:21:56.578293 139850290401280 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.578325 139850290401280 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.578360 139850290401280 training_loop.py:724] parameter: decoder/transformer11/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:21:56.578395 139850290401280 training_loop.py:724] parameter: decoder/transformer11/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:21:56.578429 139850290401280 training_loop.py:724] parameter: decoder/transformer11/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.578466 139850290401280 training_loop.py:724] parameter: decoder/transformer11/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:21:56.578502 139850290401280 training_loop.py:724] parameter: decoder/transformer2/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:21:56.578537 139850290401280 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:21:56.578572 139850290401280 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.578607 139850290401280 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:21:56.578648 139850290401280 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.578684 139850290401280 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.578719 139850290401280 training_loop.py:724] parameter: decoder/transformer2/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:21:56.578753 139850290401280 training_loop.py:724] parameter: decoder/transformer2/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:21:56.578788 139850290401280 training_loop.py:724] parameter: decoder/transformer2/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.578822 139850290401280 training_loop.py:724] parameter: decoder/transformer2/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:21:56.578856 139850290401280 training_loop.py:724] parameter: decoder/transformer3/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:21:56.578891 139850290401280 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:21:56.578925 139850290401280 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.578961 139850290401280 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:21:56.578996 139850290401280 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.579031 139850290401280 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.579066 139850290401280 training_loop.py:724] parameter: decoder/transformer3/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:21:56.579101 139850290401280 training_loop.py:724] parameter: decoder/transformer3/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:21:56.579135 139850290401280 training_loop.py:724] parameter: decoder/transformer3/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.579170 139850290401280 training_loop.py:724] parameter: decoder/transformer3/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:21:56.579205 139850290401280 training_loop.py:724] parameter: decoder/transformer4/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:21:56.579239 139850290401280 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:21:56.579273 139850290401280 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.579307 139850290401280 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:21:56.579341 139850290401280 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.579375 139850290401280 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.579409 139850290401280 training_loop.py:724] parameter: decoder/transformer4/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:21:56.579445 139850290401280 training_loop.py:724] parameter: decoder/transformer4/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:21:56.579478 139850290401280 training_loop.py:724] parameter: decoder/transformer4/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.579513 139850290401280 training_loop.py:724] parameter: decoder/transformer4/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:21:56.579546 139850290401280 training_loop.py:724] parameter: decoder/transformer5/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:21:56.579587 139850290401280 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:21:56.579623 139850290401280 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.579658 139850290401280 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:21:56.579694 139850290401280 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.579729 139850290401280 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.579763 139850290401280 training_loop.py:724] parameter: decoder/transformer5/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:21:56.579797 139850290401280 training_loop.py:724] parameter: decoder/transformer5/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:21:56.579831 139850290401280 training_loop.py:724] parameter: decoder/transformer5/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.579866 139850290401280 training_loop.py:724] parameter: decoder/transformer5/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:21:56.579901 139850290401280 training_loop.py:724] parameter: decoder/transformer6/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:21:56.579935 139850290401280 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:21:56.579970 139850290401280 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.580005 139850290401280 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:21:56.580040 139850290401280 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.580075 139850290401280 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.580108 139850290401280 training_loop.py:724] parameter: decoder/transformer6/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:21:56.580142 139850290401280 training_loop.py:724] parameter: decoder/transformer6/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:21:56.580175 139850290401280 training_loop.py:724] parameter: decoder/transformer6/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.580209 139850290401280 training_loop.py:724] parameter: decoder/transformer6/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:21:56.580243 139850290401280 training_loop.py:724] parameter: decoder/transformer7/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:21:56.580277 139850290401280 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:21:56.580312 139850290401280 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.580346 139850290401280 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:21:56.580381 139850290401280 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.580416 139850290401280 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.580450 139850290401280 training_loop.py:724] parameter: decoder/transformer7/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:21:56.580484 139850290401280 training_loop.py:724] parameter: decoder/transformer7/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:21:56.580524 139850290401280 training_loop.py:724] parameter: decoder/transformer7/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.580559 139850290401280 training_loop.py:724] parameter: decoder/transformer7/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:21:56.580594 139850290401280 training_loop.py:724] parameter: decoder/transformer8/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:21:56.580628 139850290401280 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:21:56.580662 139850290401280 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.580697 139850290401280 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:21:56.580731 139850290401280 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.580765 139850290401280 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.580799 139850290401280 training_loop.py:724] parameter: decoder/transformer8/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:21:56.580833 139850290401280 training_loop.py:724] parameter: decoder/transformer8/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:21:56.580867 139850290401280 training_loop.py:724] parameter: decoder/transformer8/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.580902 139850290401280 training_loop.py:724] parameter: decoder/transformer8/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:21:56.580936 139850290401280 training_loop.py:724] parameter: decoder/transformer9/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:21:56.580971 139850290401280 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:21:56.581005 139850290401280 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.581039 139850290401280 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:21:56.581072 139850290401280 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.581107 139850290401280 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.581141 139850290401280 training_loop.py:724] parameter: decoder/transformer9/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:21:56.581175 139850290401280 training_loop.py:724] parameter: decoder/transformer9/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:21:56.581208 139850290401280 training_loop.py:724] parameter: decoder/transformer9/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:21:56.581242 139850290401280 training_loop.py:724] parameter: decoder/transformer9/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:21:56.581269 139850290401280 training_loop.py:725] Total parameters: 152072288
I0123 14:21:56.581492 139850290401280 training_loop.py:739] Total state size: 0
I0123 14:21:56.606482 139850290401280 training_loop.py:492] Training loop: creating task for mode beam_search
I0123 14:21:56.606767 139850290401280 training_loop.py:685] Creating logging writer (train) for mode beam_search
I0123 14:21:56.607126 139850290401280 training_loop.py:652] Compiling mode beam_search with jit.
I0123 14:21:56.607494 139850290401280 training_loop.py:89] registering functions: dict_keys([])
I0123 14:21:56.628652 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f ? coll h k j
I0123 14:21:57.493374 139850290401280 ddar.py:60] Depth 1/1000 time = 0.7931270599365234
I0123 14:21:59.566223 139850290401280 ddar.py:60] Depth 2/1000 time = 2.0726749897003174
I0123 14:22:02.515194 139850290401280 ddar.py:60] Depth 3/1000 time = 2.948756694793701
I0123 14:22:05.400486 139850290401280 ddar.py:60] Depth 4/1000 time = 2.8850202560424805
I0123 14:22:08.318507 139850290401280 ddar.py:60] Depth 5/1000 time = 2.9176907539367676
I0123 14:22:12.391627 139850290401280 ddar.py:60] Depth 6/1000 time = 3.9850473403930664
I0123 14:22:12.394226 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:22:12.394310 139850290401280 alphageometry.py:540] Depth 0. There are 1 nodes to expand:
I0123 14:22:12.394346 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00
I0123 14:22:12.394376 139850290401280 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00
I0123 14:22:12.531305 139850290401280 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.531519 139850290401280 decoder_stack.py:316] dstack: scanning over 1 windows.
I0123 14:22:12.531614 139850290401280 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:22:12.531687 139850290401280 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:22:12.531755 139850290401280 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:22:12.531822 139850290401280 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:22:12.531887 139850290401280 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:22:12.531954 139850290401280 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:22:12.532020 139850290401280 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:22:12.532085 139850290401280 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:22:12.532149 139850290401280 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:22:12.532213 139850290401280 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:22:12.532279 139850290401280 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:22:12.532343 139850290401280 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:22:12.532380 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:12.532422 139850290401280 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 14:22:12.532527 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:12.532565 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:12.532594 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:12.534400 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.536931 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:12.542545 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.542830 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:12.545399 139850290401280 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:22:12.549276 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:12.549332 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:12.549368 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:12.549402 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.549464 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.550085 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.550159 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.550518 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.551265 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.553748 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.554415 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.554490 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:12.554522 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:12.554580 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.554703 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:12.555019 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:12.555061 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:12.556954 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.557047 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:12.559509 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.559587 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:12.560010 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:12.562384 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:12.564296 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.564389 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:12.564679 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.564758 139850290401280 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 14:22:12.564863 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:12.564900 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:12.564930 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:12.566686 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.568975 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:12.574599 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.574861 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:12.577406 139850290401280 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:22:12.580956 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:12.581010 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:12.581044 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:12.581074 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.581135 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.581741 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.581817 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.582169 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.582928 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.585364 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.585983 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.586060 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:12.586093 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:12.586149 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.586273 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:12.586584 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:12.586624 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:12.588918 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.589010 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:12.591468 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.591547 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:12.591965 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:12.594209 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:12.596102 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.596194 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:12.596478 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.596558 139850290401280 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 14:22:12.596662 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:12.596699 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:12.596728 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:12.598565 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.600841 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:12.606345 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.606595 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:12.609160 139850290401280 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:22:12.612781 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:12.612835 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:12.612869 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:12.612898 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.612958 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.613504 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.613578 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.613940 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.614686 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.617110 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.617720 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.617795 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:12.617828 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:12.617883 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.618006 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:12.618369 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:12.618411 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:12.620314 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.620405 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:12.622848 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.622925 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:12.623345 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:12.625568 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:12.627542 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.627636 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:12.627926 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.628004 139850290401280 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 14:22:12.628109 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:12.628147 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:12.628177 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:12.629943 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.632251 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:12.637895 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.638150 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:12.640697 139850290401280 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:22:12.644293 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:12.644346 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:12.644380 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:12.644409 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.644469 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.645072 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.645147 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.645504 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.646270 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.648728 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.649344 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.649419 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:12.649453 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:12.649510 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.649634 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:12.649952 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:12.649993 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:12.651942 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.652034 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:12.654483 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.654562 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:12.654980 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:12.657217 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:12.659131 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.659226 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:12.659513 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.659592 139850290401280 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 14:22:12.659698 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:12.659735 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:12.659765 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:12.661601 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.663907 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:12.669480 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.669749 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:12.672335 139850290401280 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:22:12.675913 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:12.675974 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:12.676009 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:12.676038 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.676099 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.676659 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.676734 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.677090 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.677852 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.680296 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.680959 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.681034 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:12.681068 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:12.681124 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.681247 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:12.681559 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:12.681600 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:12.683502 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.683593 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:12.686023 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.686101 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:12.686517 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:12.688828 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:12.690719 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.690813 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:12.691098 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.691177 139850290401280 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 14:22:12.691283 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:12.691320 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:12.691349 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:12.693104 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.695385 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:12.701354 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.701608 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:12.704153 139850290401280 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:22:12.707741 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:12.707793 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:12.707827 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:12.707861 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.707971 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.708531 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.708605 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.708959 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.709725 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.712149 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.712750 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.712824 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:12.712857 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:12.712912 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.713062 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:12.713374 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:12.713415 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:12.715373 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.715466 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:12.717899 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.717977 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:12.718388 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:12.720644 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:12.722567 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.722664 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:12.722951 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.723029 139850290401280 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 14:22:12.723135 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:12.723171 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:12.723200 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:12.725029 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.727343 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:12.732856 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.733109 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:12.735700 139850290401280 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:22:12.739279 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:12.739332 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:12.739366 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:12.739394 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.739460 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.740011 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.740086 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.740437 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.741188 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.743615 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.744270 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.744345 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:12.744378 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:12.744434 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.744557 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:12.744864 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:12.744905 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:12.746796 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.746887 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:12.749320 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.749398 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:12.749823 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:12.752105 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:12.753992 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.754085 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:12.754375 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.754453 139850290401280 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 14:22:12.754559 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:12.754595 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:12.754624 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:12.756356 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.758633 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:12.764222 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.764477 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:12.767004 139850290401280 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:22:12.770576 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:12.770629 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:12.770663 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:12.770692 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.770806 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.771362 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.771436 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.771791 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.772545 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.774992 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.775602 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.775676 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:12.775709 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:12.775766 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.775890 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:12.776202 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:12.776243 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:12.778187 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.778279 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:12.780678 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.780754 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:12.781165 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:12.783386 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:12.785260 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.785351 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:12.785636 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.785725 139850290401280 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 14:22:12.785831 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:12.785868 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:12.785897 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:12.787723 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.790023 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:12.795536 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.795789 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:12.798368 139850290401280 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:22:12.801924 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:12.801978 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:12.802012 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:12.802041 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.802102 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.802664 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.802737 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.803090 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.803838 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.806301 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.806911 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.806986 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:12.807019 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:12.807074 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.807199 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:12.807901 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:12.807945 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:12.809854 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.809946 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:12.812370 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.812446 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:12.812862 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:12.815087 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:12.817033 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.817125 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:12.817411 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.817489 139850290401280 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 14:22:12.817595 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:12.817631 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:12.817670 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:12.819423 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.821712 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:12.827274 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.827527 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:12.830056 139850290401280 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:22:12.833615 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:12.833674 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:12.833709 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:12.833738 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.833798 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.834400 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.834485 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.834845 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.835594 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.838037 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.838648 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.838723 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:12.838756 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:12.838813 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.838937 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:12.839246 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:12.839287 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:12.841186 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.841276 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:12.843776 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.843854 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:12.844269 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:12.846505 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:12.848383 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.848476 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:12.848765 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.848844 139850290401280 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 14:22:12.848948 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:12.848985 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:12.849014 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:12.850772 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.853126 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:12.858644 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.858899 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:12.861457 139850290401280 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:22:12.865042 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:12.865094 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:12.865128 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:12.865157 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.865269 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.865833 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.865914 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.866268 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.867017 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.869440 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.870066 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.870142 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:12.870176 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:12.870232 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.870357 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:12.870668 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:12.870710 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:12.872647 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.872738 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:12.875172 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.875250 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:12.875668 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:12.877894 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:12.879766 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.879859 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:12.880147 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.880225 139850290401280 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 14:22:12.880330 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:12.880367 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:12.880397 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:12.882259 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.884556 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:12.890084 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.890338 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:12.892871 139850290401280 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:22:12.896507 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:12.896561 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:12.896595 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:12.896624 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.896684 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.897233 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.897307 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.897677 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.898443 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.900861 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.901470 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.901545 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:12.901578 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:12.901634 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.901772 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:12.902086 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:12.902126 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:12.904073 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.904164 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:12.906597 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.906676 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:12.907092 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:12.909313 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:12.911219 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.911313 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:12.911599 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.911840 139850290401280 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:22:12.911905 139850290401280 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:22:12.911959 139850290401280 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:22:12.912012 139850290401280 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:22:12.912062 139850290401280 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:22:12.912112 139850290401280 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:22:12.912163 139850290401280 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:22:12.912212 139850290401280 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:22:12.912261 139850290401280 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:22:12.912310 139850290401280 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:22:12.912359 139850290401280 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:22:12.912407 139850290401280 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:22:12.912441 139850290401280 decoder_stack.py:344] dstack: Final layernorm.
I0123 14:22:12.915303 139850290401280 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:22:12.961896 139850290401280 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:12.961989 139850290401280 decoder_stack.py:333] dstack: autoregressive generator.
I0123 14:22:12.962040 139850290401280 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 14:22:12.962140 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:12.962176 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:12.962205 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:12.962262 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:12.964568 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:12.969837 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:12.970089 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:12.972602 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:22:12.985228 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:12.985280 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:12.985312 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:12.985340 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:12.985400 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:12.985960 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:12.986035 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:12.986392 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:12.987057 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:12.989507 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:12.990126 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:12.990202 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:12.990234 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:12.990290 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:12.990412 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:12.990519 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:12.990555 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:12.992362 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:12.992452 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:12.994815 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:12.994891 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:12.994995 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:12.997186 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:12.998983 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:12.999076 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:12.999364 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:12.999448 139850290401280 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 14:22:12.999555 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:12.999591 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:12.999620 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:12.999678 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.001873 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:13.007144 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.007396 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:13.009984 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:22:13.021896 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:13.021948 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:13.021981 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:13.022008 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.022067 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.022661 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.022735 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.023082 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.023741 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.026136 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.026736 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.026810 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:13.026842 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:13.026897 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.027023 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:13.027128 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:13.027164 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.028940 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.029029 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.031415 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.031493 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:13.031596 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:13.033739 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.035526 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.035618 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.035904 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.035983 139850290401280 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 14:22:13.036093 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:13.036130 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:13.036159 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:13.036217 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.038392 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:13.043665 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.043913 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:13.046438 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:22:13.058443 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:13.058496 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:13.058528 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:13.058556 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.058614 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.059153 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.059226 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.059574 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.060239 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.062626 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.063280 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.063354 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:13.063387 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:13.063442 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.063567 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:13.063671 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:13.063707 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.065493 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.065582 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.067939 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.068017 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:13.068120 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:13.070258 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.072112 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.072205 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.072493 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.072573 139850290401280 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 14:22:13.072677 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:13.072719 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:13.072748 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:13.072806 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.074988 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:13.080263 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.080511 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:13.083026 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:22:13.095475 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:13.095528 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:13.095561 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:13.095588 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.095647 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.096191 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.096265 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.096615 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.097277 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.099753 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.100360 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.100435 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:13.100467 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:13.100523 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.100645 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:13.100749 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:13.100786 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.102582 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.102673 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.105029 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.105106 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:13.105211 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:13.107414 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.109215 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.109306 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.109591 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.109678 139850290401280 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 14:22:13.109782 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:13.109819 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:13.109852 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:13.109912 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.112091 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:13.117355 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.117609 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:13.120202 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:22:13.132145 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:13.132198 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:13.132231 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:13.132259 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.132319 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.132915 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.132988 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.133336 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.134009 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.136392 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.136993 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.137067 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:13.137099 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:13.137154 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.137277 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:13.137383 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:13.137418 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.139223 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.139313 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.141722 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.141799 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:13.141904 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:13.144039 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.145842 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.145935 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.146221 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.146300 139850290401280 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 14:22:13.146404 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:13.146441 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:13.146475 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:13.146537 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.148716 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:13.154011 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.154260 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:13.156764 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:22:13.168766 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:13.168819 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:13.168852 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:13.168881 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.168941 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.169487 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.169560 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.169917 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.170582 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.172955 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.173602 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.173685 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:13.173717 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:13.173773 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.173897 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:13.174001 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:13.174037 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.175828 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.175918 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.178255 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.178332 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:13.178434 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:13.180556 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.182780 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.182874 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.183167 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.183246 139850290401280 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 14:22:13.183352 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:13.183389 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:13.183417 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:13.183481 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.185693 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:13.190973 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.191222 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:13.193744 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:22:13.205687 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:13.205740 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:13.205773 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:13.205802 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.205862 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.206405 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.206478 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.206829 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.207495 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.209950 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.210556 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.210631 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:13.210663 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:13.210718 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.210841 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:13.210946 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:13.210981 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.212773 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.212862 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.215206 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.215284 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:13.215387 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:13.217577 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.219400 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.219493 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.219779 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.219857 139850290401280 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 14:22:13.219961 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:13.219998 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:13.220026 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:13.220084 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.222280 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:13.227539 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.227793 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:13.230388 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:22:13.242414 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:13.242467 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:13.242499 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:13.242527 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.242586 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.243184 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.243257 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.243607 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.244275 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.246675 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.247275 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.247350 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:13.247383 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:13.247436 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.247561 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:13.247665 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:13.247702 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.249504 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.249594 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.251988 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.252064 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:13.252167 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:13.254313 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.256129 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.256220 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.256505 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.256583 139850290401280 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 14:22:13.256687 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:13.256724 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:13.256752 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:13.256810 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.259013 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:13.264367 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.264619 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:13.267185 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:22:13.279433 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:13.279486 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:13.279519 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:13.279547 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.279606 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.280151 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.280224 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.280579 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.281257 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.283709 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.284310 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.284384 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:13.284416 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:13.284470 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.284592 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:13.284697 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:13.284733 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.286973 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.287065 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.289418 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.289495 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:13.289600 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:13.291753 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.293565 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.293662 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.293955 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.294033 139850290401280 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 14:22:13.294138 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:13.294174 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:13.294203 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:13.294260 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.296454 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:13.301902 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.302153 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:13.304716 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:22:13.316928 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:13.316981 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:13.317014 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:13.317042 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.317101 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.317649 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.317723 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.318070 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.318747 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.321156 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.321773 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.321848 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:13.321880 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:13.321935 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.322057 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:13.322162 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:13.322198 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.324099 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.324188 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.326554 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.326631 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:13.326736 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:13.328907 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.330736 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.330827 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.331113 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.331192 139850290401280 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 14:22:13.331298 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:13.331335 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:13.331364 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:13.331422 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.333606 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:13.338985 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.339234 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:13.341768 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:22:13.353965 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:13.354019 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:13.354051 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:13.354079 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.354139 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.354679 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.354752 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.355103 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.355777 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.358198 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.358804 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.358879 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:13.358912 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:13.358966 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.359090 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:13.359194 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:13.359230 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.361096 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.361187 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.363551 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.363628 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:13.363732 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:13.365894 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.367716 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.367808 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.368098 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.368178 139850290401280 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 14:22:13.368284 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:13.368321 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:13.368352 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:13.368413 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.370613 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:13.375975 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.376235 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:13.378821 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:22:13.391104 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:13.391156 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:13.391189 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:13.391217 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.391276 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.391815 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.391887 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.392235 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.392903 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.395318 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.395921 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.395996 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:13.396028 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:13.396082 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.396205 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:13.396309 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:13.396345 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.398612 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.398704 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.401091 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.401168 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:13.401274 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:13.403465 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.405289 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.405381 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.405678 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.405763 139850290401280 decoder_stack.py:344] dstack: Final layernorm.
I0123 14:22:13.408566 139850290401280 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:22:13.458265 139850290401280 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.458348 139850290401280 decoder_stack.py:333] dstack: autoregressive generator.
I0123 14:22:13.458401 139850290401280 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 14:22:13.458503 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:13.458540 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:13.458575 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:13.458638 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.460984 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:13.466381 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.466636 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:13.469194 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:22:13.481769 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:13.481822 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:13.481855 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:13.481884 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.481944 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.482489 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.482563 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.482910 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.483568 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.486050 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.486650 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.486724 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:13.486756 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:13.486810 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.486932 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:13.487035 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:13.487070 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.488849 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.488941 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.491286 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.491364 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:13.491469 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:13.493655 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.495464 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.495556 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.495842 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.495921 139850290401280 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 14:22:13.496024 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:13.496060 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:13.496088 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:13.496152 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.498337 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:13.503601 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.503854 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:13.506461 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:22:13.518336 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:13.518388 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:13.518421 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:13.518450 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.518509 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.519047 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.519119 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.519467 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.520128 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.522589 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.523191 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.523266 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:13.523298 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:13.523352 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.523474 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:13.523579 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:13.523614 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.525405 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.525495 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.527828 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.527905 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:13.528007 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:13.530204 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.531991 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.532083 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.532366 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.532444 139850290401280 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 14:22:13.532547 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:13.532583 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:13.532611 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:13.532668 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.534860 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:13.540085 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.540331 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:13.542917 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:22:13.554861 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:13.554915 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:13.554948 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:13.554976 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.555037 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.555577 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.555650 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.555998 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.556660 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.559369 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.559973 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.560048 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:13.560080 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:13.560135 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.560259 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:13.560364 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:13.560400 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.562200 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.562290 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.564591 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.564667 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:13.564770 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:13.566981 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.568784 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.568875 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.569159 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.569238 139850290401280 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 14:22:13.569342 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:13.569378 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:13.569405 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:13.569462 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.571655 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:13.576942 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.577194 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:13.580219 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:22:13.592295 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:13.592348 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:13.592381 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:13.592409 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.592467 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.593004 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.593076 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.593424 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.594095 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.596567 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.597172 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.597246 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:13.597278 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:13.597332 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.597453 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:13.597558 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:13.597594 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.599414 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.599504 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.601862 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.601939 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:13.602043 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:13.604258 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.606076 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.606168 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.606452 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.606531 139850290401280 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 14:22:13.606634 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:13.606670 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:13.606698 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:13.606757 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.608952 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:13.614248 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.614502 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:13.617146 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:22:13.629240 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:13.629292 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:13.629325 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:13.629353 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.629412 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.629962 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.630037 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.630388 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.631058 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.633526 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.634134 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.634207 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:13.634239 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:13.634292 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.634412 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:13.634515 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:13.634550 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.636353 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.636442 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.638782 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.638859 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:13.638963 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:13.641146 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.642948 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.643040 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.643324 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.643402 139850290401280 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 14:22:13.643504 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:13.643540 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:13.643568 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:13.643626 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.645822 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:13.651078 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.651331 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:13.653935 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:22:13.666047 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:13.666100 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:13.666133 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:13.666162 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.666221 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.666760 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.666833 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.667183 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.667854 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.670357 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.670959 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.671032 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:13.671064 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:13.671121 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.671243 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:13.671347 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:13.671383 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.673182 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.673272 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.675622 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.675700 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:13.675805 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:13.678115 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.679960 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.680051 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.680338 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.680417 139850290401280 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 14:22:13.680521 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:13.680558 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:13.680587 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:13.680645 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.682845 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:13.688123 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.688378 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:13.691386 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:22:13.703460 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:13.703513 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:13.703546 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:13.703574 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.703634 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.704177 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.704251 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.704597 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.705262 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.707766 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.708370 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.708446 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:13.708477 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:13.708533 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.708656 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:13.708761 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:13.708797 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.710632 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.710723 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.713068 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.713144 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:13.713248 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:13.715465 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.717291 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.717382 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.717677 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.717760 139850290401280 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 14:22:13.717865 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:13.717900 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:13.717928 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:13.717986 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.720177 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:13.725481 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.725745 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:13.728360 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:22:13.740431 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:13.740484 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:13.740518 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:13.740545 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.740606 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.741149 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.741222 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.741571 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.742253 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.744738 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.745334 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.745407 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:13.745439 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:13.745494 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.745615 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:13.745727 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:13.745764 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.747564 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.747652 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.749993 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.750068 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:13.750172 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:13.752369 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.754191 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.754281 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.754565 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.754643 139850290401280 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 14:22:13.754746 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:13.754782 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:13.754810 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:13.754868 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.757044 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:13.762309 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.762559 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:13.765194 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:22:13.777309 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:13.777362 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:13.777394 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:13.777422 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.777479 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.778033 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.778106 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.778456 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.779120 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.781573 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.782181 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.782254 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:13.782286 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:13.782339 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.782459 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:13.782563 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:13.782599 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.784422 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.784509 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.786844 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.786920 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:13.787024 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:13.789212 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.791014 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.791107 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.791389 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.791467 139850290401280 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 14:22:13.791571 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:13.791607 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:13.791635 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:13.791692 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.793868 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:13.799135 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.799386 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:13.802368 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:22:13.814399 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:13.814452 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:13.814485 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:13.814514 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.814571 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.815113 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.815184 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.815534 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.816196 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.818682 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.819288 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.819361 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:13.819394 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:13.819448 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.819569 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:13.819674 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:13.819710 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.821518 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.821605 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.823952 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.824027 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:13.824131 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:13.826352 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.828167 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.828257 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.828542 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.828620 139850290401280 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 14:22:13.828725 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:13.828761 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:13.828789 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:13.828847 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.831046 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:13.836288 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.836539 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:13.839161 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:22:13.851200 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:13.851262 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:13.851295 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:13.851324 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.851383 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.851927 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.851999 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.852347 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.853012 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.855479 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.856081 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.856154 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:13.856186 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:13.856240 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.856363 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:13.856467 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:13.856503 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.858312 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.858400 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.860733 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.860807 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:13.860911 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:13.863119 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.864921 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.865011 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.865297 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.865375 139850290401280 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 14:22:13.865479 139850290401280 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:22:13.865515 139850290401280 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:22:13.865543 139850290401280 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:22:13.865602 139850290401280 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.867791 139850290401280 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:22:13.873078 139850290401280 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.873331 139850290401280 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:22:13.875969 139850290401280 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:22:13.888030 139850290401280 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:22:13.888084 139850290401280 attention.py:418] Single window, no scan.
I0123 14:22:13.888123 139850290401280 transformer_layer.py:389] tlayer: self-attention.
I0123 14:22:13.888153 139850290401280 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.888211 139850290401280 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.888758 139850290401280 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.888830 139850290401280 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.889181 139850290401280 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.889861 139850290401280 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.892338 139850290401280 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.892940 139850290401280 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.893013 139850290401280 transformer_layer.py:468] tlayer: End windows.
I0123 14:22:13.893045 139850290401280 transformer_layer.py:472] tlayer: final FFN.
I0123 14:22:13.893100 139850290401280 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.893220 139850290401280 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:22:13.893323 139850290401280 nn_components.py:325] mlp: activation = None
I0123 14:22:13.893360 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.895169 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.895258 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.897578 139850290401280 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.897660 139850290401280 transformer_base.py:443] tbase: final FFN
I0123 14:22:13.897771 139850290401280 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:22:13.899961 139850290401280 nn_components.py:329] mlp: final activation = None
I0123 14:22:13.901763 139850290401280 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.901854 139850290401280 nn_components.py:261] mlp: residual
I0123 14:22:13.902139 139850290401280 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:13.902220 139850290401280 decoder_stack.py:344] dstack: Final layernorm.
I0123 14:22:13.904986 139850290401280 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:22:25.965048 139850290401280 alphageometry.py:566] LM output (score=-1.042914): "l : C a c l 15 D a l c l 16 ;"
I0123 14:22:25.965449 139850290401280 alphageometry.py:567] Translation: "l = on_line l a c, on_bline l c a"

I0123 14:22:25.965513 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a ? coll h k j"
I0123 14:22:25.965672 139850290401280 graph.py:498] 
I0123 14:22:25.965731 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a ? coll h k j
I0123 14:22:27.320495 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2708697319030762
I0123 14:22:30.233677 139850290401280 ddar.py:60] Depth 2/1000 time = 2.9129579067230225
I0123 14:22:35.475060 139850290401280 ddar.py:60] Depth 3/1000 time = 5.241148471832275
I0123 14:22:40.223385 139850290401280 ddar.py:60] Depth 4/1000 time = 4.748062372207642
I0123 14:22:44.981247 139850290401280 ddar.py:60] Depth 5/1000 time = 4.757594347000122
I0123 14:22:49.753120 139850290401280 ddar.py:60] Depth 6/1000 time = 4.771132707595825
I0123 14:22:49.854634 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:22:49.854856 139850290401280 alphageometry.py:566] LM output (score=-1.558519): "l : C b c l 15 D b l c l 16 ;"
I0123 14:22:49.854896 139850290401280 alphageometry.py:567] Translation: "l = on_line l b c, on_bline l c b"

I0123 14:22:49.854947 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b ? coll h k j"
I0123 14:22:49.855119 139850290401280 graph.py:498] 
I0123 14:22:49.855171 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b ? coll h k j
I0123 14:22:51.168347 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2259376049041748
I0123 14:22:54.240052 139850290401280 ddar.py:60] Depth 2/1000 time = 3.0714948177337646
I0123 14:23:00.221522 139850290401280 ddar.py:60] Depth 3/1000 time = 5.9812400341033936
I0123 14:23:05.297943 139850290401280 ddar.py:60] Depth 4/1000 time = 5.0761425495147705
I0123 14:23:10.432642 139850290401280 ddar.py:60] Depth 5/1000 time = 5.134368419647217
I0123 14:23:15.536780 139850290401280 ddar.py:60] Depth 6/1000 time = 5.103394031524658
I0123 14:23:15.637199 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:23:15.637360 139850290401280 alphageometry.py:566] LM output (score=-1.607558): "l : C a e l 15 D a l e l 16 ;"
I0123 14:23:15.637397 139850290401280 alphageometry.py:567] Translation: "l = on_line l a e, on_bline l e a"

I0123 14:23:15.637440 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a ? coll h k j"
I0123 14:23:15.637598 139850290401280 graph.py:498] 
I0123 14:23:15.637657 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a ? coll h k j
I0123 14:23:16.923169 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1986675262451172
I0123 14:23:19.897381 139850290401280 ddar.py:60] Depth 2/1000 time = 2.9740066528320312
I0123 14:23:25.483642 139850290401280 ddar.py:60] Depth 3/1000 time = 5.5859575271606445
I0123 14:23:30.263304 139850290401280 ddar.py:60] Depth 4/1000 time = 4.779250383377075
I0123 14:23:35.044995 139850290401280 ddar.py:60] Depth 5/1000 time = 4.781437635421753
I0123 14:23:39.819158 139850290401280 ddar.py:60] Depth 6/1000 time = 4.773560285568237
I0123 14:23:39.922342 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:23:39.922494 139850290401280 alphageometry.py:566] LM output (score=-1.656553): "l : C b e l 15 D b l e l 16 ;"
I0123 14:23:39.922533 139850290401280 alphageometry.py:567] Translation: "l = on_line l b e, on_bline l e b"

I0123 14:23:39.922575 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b ? coll h k j"
I0123 14:23:39.922756 139850290401280 graph.py:498] 
I0123 14:23:39.922807 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b ? coll h k j
I0123 14:23:41.213144 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2020399570465088
I0123 14:23:44.294703 139850290401280 ddar.py:60] Depth 2/1000 time = 3.0813329219818115
I0123 14:23:49.503861 139850290401280 ddar.py:60] Depth 3/1000 time = 5.20888352394104
I0123 14:23:54.538353 139850290401280 ddar.py:60] Depth 4/1000 time = 5.0341856479644775
I0123 14:23:59.627003 139850290401280 ddar.py:60] Depth 5/1000 time = 5.088356971740723
I0123 14:24:04.670196 139850290401280 ddar.py:60] Depth 6/1000 time = 5.042547225952148
I0123 14:24:04.774585 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:24:04.774740 139850290401280 alphageometry.py:566] LM output (score=-1.742775): "l : C a b l 15 D a l b l 16 ;"
I0123 14:24:04.774779 139850290401280 alphageometry.py:567] Translation: "l = on_line l a b, on_bline l b a"

I0123 14:24:04.774825 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a ? coll h k j"
I0123 14:24:04.774988 139850290401280 graph.py:498] 
I0123 14:24:04.775042 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a ? coll h k j
I0123 14:24:06.093739 139850290401280 ddar.py:60] Depth 1/1000 time = 1.230513572692871
I0123 14:24:08.800279 139850290401280 ddar.py:60] Depth 2/1000 time = 2.7062551975250244
I0123 14:24:14.241435 139850290401280 ddar.py:60] Depth 3/1000 time = 5.440783977508545
I0123 14:24:19.514348 139850290401280 ddar.py:60] Depth 4/1000 time = 5.272611856460571
I0123 14:24:24.809981 139850290401280 ddar.py:60] Depth 5/1000 time = 5.295335054397583
I0123 14:24:30.396986 139850290401280 ddar.py:60] Depth 6/1000 time = 5.586307525634766
I0123 14:24:30.513726 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:24:30.513875 139850290401280 alphageometry.py:566] LM output (score=-1.871676): "l : C c d l 15 D c l d l 16 ;"
I0123 14:24:30.513914 139850290401280 alphageometry.py:567] Translation: "l = on_line l c d, on_bline l d c"

I0123 14:24:30.513955 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l c d, on_bline l d c ? coll h k j"
I0123 14:24:30.514111 139850290401280 graph.py:498] 
I0123 14:24:30.514164 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l c d, on_bline l d c ? coll h k j
I0123 14:24:31.603974 139850290401280 ddar.py:60] Depth 1/1000 time = 1.0019237995147705
I0123 14:24:34.219096 139850290401280 ddar.py:60] Depth 2/1000 time = 2.6149120330810547
I0123 14:24:37.697999 139850290401280 ddar.py:60] Depth 3/1000 time = 3.478686571121216
I0123 14:24:41.036858 139850290401280 ddar.py:60] Depth 4/1000 time = 3.338575601577759
I0123 14:24:44.402406 139850290401280 ddar.py:60] Depth 5/1000 time = 3.365290641784668
I0123 14:24:47.741815 139850290401280 ddar.py:60] Depth 6/1000 time = 3.338918447494507
I0123 14:24:52.318458 139850290401280 ddar.py:60] Depth 7/1000 time = 4.475568056106567
I0123 14:24:52.320818 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:24:52.320942 139850290401280 alphageometry.py:566] LM output (score=-2.113579): "l : C d e l 15 D d l e l 16 ;"
I0123 14:24:52.320980 139850290401280 alphageometry.py:567] Translation: "l = on_line l d e, on_bline l e d"

I0123 14:24:52.321020 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l d e, on_bline l e d ? coll h k j"
I0123 14:24:52.321175 139850290401280 graph.py:498] 
I0123 14:24:52.321228 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l d e, on_bline l e d ? coll h k j
I0123 14:24:53.403416 139850290401280 ddar.py:60] Depth 1/1000 time = 0.9914219379425049
I0123 14:24:56.044380 139850290401280 ddar.py:60] Depth 2/1000 time = 2.6407418251037598
I0123 14:24:59.308872 139850290401280 ddar.py:60] Depth 3/1000 time = 3.2642459869384766
I0123 14:25:02.912435 139850290401280 ddar.py:60] Depth 4/1000 time = 3.6033012866973877
I0123 14:25:06.283390 139850290401280 ddar.py:60] Depth 5/1000 time = 3.370710611343384
I0123 14:25:09.640379 139850290401280 ddar.py:60] Depth 6/1000 time = 3.356544256210327
I0123 14:25:14.146882 139850290401280 ddar.py:60] Depth 7/1000 time = 4.409268617630005
I0123 14:25:14.149324 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:25:14.149479 139850290401280 alphageometry.py:566] LM output (score=-2.179142): "l : C c e l 15 D c l e l 16 ;"
I0123 14:25:14.149518 139850290401280 alphageometry.py:567] Translation: "l = on_line l c e, on_bline l e c"

I0123 14:25:14.149573 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l c e, on_bline l e c ? coll h k j"
I0123 14:25:14.149757 139850290401280 graph.py:498] 
I0123 14:25:14.149811 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l c e, on_bline l e c ? coll h k j
I0123 14:25:15.519085 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2798399925231934
I0123 14:25:18.224236 139850290401280 ddar.py:60] Depth 2/1000 time = 2.704930067062378
I0123 14:25:23.409228 139850290401280 ddar.py:60] Depth 3/1000 time = 5.18475341796875
I0123 14:25:28.592070 139850290401280 ddar.py:60] Depth 4/1000 time = 5.182570934295654
I0123 14:25:33.794115 139850290401280 ddar.py:60] Depth 5/1000 time = 5.201681852340698
I0123 14:25:39.002531 139850290401280 ddar.py:60] Depth 6/1000 time = 5.207636594772339
I0123 14:25:39.118708 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:25:39.118848 139850290401280 alphageometry.py:566] LM output (score=-2.350849): "l : C a d l 15 D a l d l 16 ;"
I0123 14:25:39.118889 139850290401280 alphageometry.py:567] Translation: "l = on_line l a d, on_bline l d a"

I0123 14:25:39.118935 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a d, on_bline l d a ? coll h k j"
I0123 14:25:39.119089 139850290401280 graph.py:498] 
I0123 14:25:39.119162 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a d, on_bline l d a ? coll h k j
I0123 14:25:40.211514 139850290401280 ddar.py:60] Depth 1/1000 time = 1.0006070137023926
I0123 14:25:42.870532 139850290401280 ddar.py:60] Depth 2/1000 time = 2.6588284969329834
I0123 14:25:46.501102 139850290401280 ddar.py:60] Depth 3/1000 time = 3.6303412914276123
I0123 14:25:49.948280 139850290401280 ddar.py:60] Depth 4/1000 time = 3.4469242095947266
I0123 14:25:53.421752 139850290401280 ddar.py:60] Depth 5/1000 time = 3.4732069969177246
I0123 14:25:56.903329 139850290401280 ddar.py:60] Depth 6/1000 time = 3.48106050491333
I0123 14:26:01.311354 139850290401280 ddar.py:60] Depth 7/1000 time = 4.308854818344116
I0123 14:26:01.313671 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:26:01.313805 139850290401280 alphageometry.py:566] LM output (score=-2.357632): "l : C b d l 15 D b l d l 16 ;"
I0123 14:26:01.313843 139850290401280 alphageometry.py:567] Translation: "l = on_line l b d, on_bline l d b"

I0123 14:26:01.313884 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b d, on_bline l d b ? coll h k j"
I0123 14:26:01.314039 139850290401280 graph.py:498] 
I0123 14:26:01.314092 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b d, on_bline l d b ? coll h k j
I0123 14:26:02.676432 139850290401280 ddar.py:60] Depth 1/1000 time = 1.274519443511963
I0123 14:26:05.349911 139850290401280 ddar.py:60] Depth 2/1000 time = 2.673274278640747
I0123 14:26:08.733375 139850290401280 ddar.py:60] Depth 3/1000 time = 3.3832342624664307
I0123 14:26:12.169585 139850290401280 ddar.py:60] Depth 4/1000 time = 3.4359519481658936
I0123 14:26:15.636411 139850290401280 ddar.py:60] Depth 5/1000 time = 3.466562271118164
I0123 14:26:19.145403 139850290401280 ddar.py:60] Depth 6/1000 time = 3.5084855556488037
I0123 14:26:23.569631 139850290401280 ddar.py:60] Depth 7/1000 time = 4.327057838439941
I0123 14:26:23.571977 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:26:23.572111 139850290401280 alphageometry.py:566] LM output (score=-2.421284): "l : C a b l 15 D a f f l 16 ;"
I0123 14:26:23.572149 139850290401280 alphageometry.py:567] Translation: "l = on_line l a b, on_circle l f a"

I0123 14:26:23.572191 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_circle l f a ? coll h k j"
I0123 14:26:23.572347 139850290401280 graph.py:498] 
I0123 14:26:23.572398 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_circle l f a ? coll h k j
I0123 14:26:24.915653 139850290401280 ddar.py:60] Depth 1/1000 time = 1.255767583847046
I0123 14:26:27.368361 139850290401280 ddar.py:60] Depth 2/1000 time = 2.452479600906372
I0123 14:26:30.579715 139850290401280 ddar.py:60] Depth 3/1000 time = 3.211138963699341
I0123 14:26:33.888947 139850290401280 ddar.py:60] Depth 4/1000 time = 3.3089699745178223
I0123 14:26:37.194869 139850290401280 ddar.py:60] Depth 5/1000 time = 3.3056552410125732
I0123 14:26:40.564596 139850290401280 ddar.py:60] Depth 6/1000 time = 3.3691513538360596
I0123 14:26:45.057261 139850290401280 ddar.py:60] Depth 7/1000 time = 4.403024673461914
I0123 14:26:45.059973 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:26:45.060116 139850290401280 alphageometry.py:566] LM output (score=-2.440102): "l : C a c l 15 T a c b l 16 ;"
I0123 14:26:45.060154 139850290401280 alphageometry.py:567] Translation: "l = on_line l a c, on_tline l b a c"

I0123 14:26:45.060199 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_tline l b a c ? coll h k j"
I0123 14:26:45.060362 139850290401280 graph.py:498] 
I0123 14:26:45.060415 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_tline l b a c ? coll h k j
I0123 14:26:46.053112 139850290401280 ddar.py:60] Depth 1/1000 time = 0.9233617782592773
I0123 14:26:48.434491 139850290401280 ddar.py:60] Depth 2/1000 time = 2.381190776824951
I0123 14:26:51.621807 139850290401280 ddar.py:60] Depth 3/1000 time = 3.187084913253784
I0123 14:26:54.575926 139850290401280 ddar.py:60] Depth 4/1000 time = 2.9538698196411133
I0123 14:26:57.831989 139850290401280 ddar.py:60] Depth 5/1000 time = 3.255793809890747
I0123 14:27:02.256105 139850290401280 ddar.py:60] Depth 6/1000 time = 4.324067115783691
I0123 14:27:02.258363 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:27:02.258492 139850290401280 alphageometry.py:566] LM output (score=-2.455971): "l : C a d l 15 D a d d l 16 ;"
I0123 14:27:02.258530 139850290401280 alphageometry.py:567] Translation: "l = on_line l a d, on_circle l d a"

I0123 14:27:02.258577 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a d, on_circle l d a ? coll h k j"
I0123 14:27:02.258734 139850290401280 graph.py:498] 
I0123 14:27:02.258787 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a d, on_circle l d a ? coll h k j
I0123 14:27:03.762821 139850290401280 ddar.py:60] Depth 1/1000 time = 1.4224474430084229
I0123 14:27:08.467098 139850290401280 ddar.py:60] Depth 2/1000 time = 4.704067230224609
I0123 14:27:15.346546 139850290401280 ddar.py:60] Depth 3/1000 time = 6.879228115081787
I0123 14:27:21.608936 139850290401280 ddar.py:60] Depth 4/1000 time = 6.262114763259888
I0123 14:27:27.546136 139850290401280 ddar.py:60] Depth 5/1000 time = 5.9368674755096436
I0123 14:27:33.765795 139850290401280 ddar.py:60] Depth 6/1000 time = 6.2189905643463135
I0123 14:27:33.905399 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:27:33.905539 139850290401280 alphageometry.py:566] LM output (score=-2.460969): "l : C b d l 15 D b d d l 16 ;"
I0123 14:27:33.905576 139850290401280 alphageometry.py:567] Translation: "l = on_line l b d, on_circle l d b"

I0123 14:27:33.905619 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b d, on_circle l d b ? coll h k j"
I0123 14:27:33.905786 139850290401280 graph.py:498] 
I0123 14:27:33.905839 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b d, on_circle l d b ? coll h k j
I0123 14:27:35.466975 139850290401280 ddar.py:60] Depth 1/1000 time = 1.4793217182159424
I0123 14:27:39.644618 139850290401280 ddar.py:60] Depth 2/1000 time = 4.1774208545684814
I0123 14:27:46.325783 139850290401280 ddar.py:60] Depth 3/1000 time = 6.680850505828857
I0123 14:27:52.551255 139850290401280 ddar.py:60] Depth 4/1000 time = 6.225052356719971
I0123 14:27:58.410521 139850290401280 ddar.py:60] Depth 5/1000 time = 5.858983755111694
I0123 14:28:04.591475 139850290401280 ddar.py:60] Depth 6/1000 time = 6.180259704589844
I0123 14:28:04.731905 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:28:04.732071 139850290401280 alphageometry.py:566] LM output (score=-2.535596): "l : C d g l 15 D d g g l 16 ;"
I0123 14:28:04.732112 139850290401280 alphageometry.py:567] Translation: "l = on_line l d g, on_circle l g d"

I0123 14:28:04.732164 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l d g, on_circle l g d ? coll h k j"
I0123 14:28:04.732336 139850290401280 graph.py:498] 
I0123 14:28:04.732388 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l d g, on_circle l g d ? coll h k j
I0123 14:28:06.010312 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1973142623901367
I0123 14:28:09.182748 139850290401280 ddar.py:60] Depth 2/1000 time = 3.172198534011841
I0123 14:28:13.843574 139850290401280 ddar.py:60] Depth 3/1000 time = 4.660603284835815
I0123 14:28:18.706765 139850290401280 ddar.py:60] Depth 4/1000 time = 4.862935781478882
I0123 14:28:23.263170 139850290401280 ddar.py:60] Depth 5/1000 time = 4.556138515472412
I0123 14:28:27.840013 139850290401280 ddar.py:60] Depth 6/1000 time = 4.576267719268799
I0123 14:28:27.944056 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:28:27.944230 139850290401280 alphageometry.py:566] LM output (score=-2.536190): "l : C c d l 15 D c d d l 16 ;"
I0123 14:28:27.944267 139850290401280 alphageometry.py:567] Translation: "l = on_line l c d, on_circle l d c"

I0123 14:28:27.944326 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l c d, on_circle l d c ? coll h k j"
I0123 14:28:27.944497 139850290401280 graph.py:498] 
I0123 14:28:27.944551 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l c d, on_circle l d c ? coll h k j
I0123 14:28:29.788820 139850290401280 ddar.py:60] Depth 1/1000 time = 1.7624008655548096
I0123 14:28:34.131229 139850290401280 ddar.py:60] Depth 2/1000 time = 4.3421924114227295
I0123 14:28:40.701380 139850290401280 ddar.py:60] Depth 3/1000 time = 6.569914817810059
I0123 14:28:46.894655 139850290401280 ddar.py:60] Depth 4/1000 time = 6.192986488342285
I0123 14:28:52.835430 139850290401280 ddar.py:60] Depth 5/1000 time = 5.940386772155762
I0123 14:28:59.096769 139850290401280 ddar.py:60] Depth 6/1000 time = 6.2606730461120605
I0123 14:28:59.233211 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:28:59.233355 139850290401280 alphageometry.py:566] LM output (score=-2.660497): "l : C a g l 15 D a g g l 16 ;"
I0123 14:28:59.233393 139850290401280 alphageometry.py:567] Translation: "l = on_line l a g, on_circle l g a"

I0123 14:28:59.233453 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a g, on_circle l g a ? coll h k j"
I0123 14:28:59.233613 139850290401280 graph.py:498] 
I0123 14:28:59.233671 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a g, on_circle l g a ? coll h k j
I0123 14:29:00.369991 139850290401280 ddar.py:60] Depth 1/1000 time = 1.0544805526733398
I0123 14:29:03.255289 139850290401280 ddar.py:60] Depth 2/1000 time = 2.8850855827331543
I0123 14:29:06.891834 139850290401280 ddar.py:60] Depth 3/1000 time = 3.6362929344177246
I0123 14:29:10.275158 139850290401280 ddar.py:60] Depth 4/1000 time = 3.3830010890960693
I0123 14:29:14.054579 139850290401280 ddar.py:60] Depth 5/1000 time = 3.7790253162384033
I0123 14:29:17.769920 139850290401280 ddar.py:60] Depth 6/1000 time = 3.714857816696167
I0123 14:29:23.061875 139850290401280 ddar.py:60] Depth 7/1000 time = 5.193379878997803
I0123 14:29:23.064793 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:29:23.064942 139850290401280 alphageometry.py:566] LM output (score=-2.695523): "l : C a c l 15 T a c e l 16 ;"
I0123 14:29:23.064979 139850290401280 alphageometry.py:567] Translation: "l = on_line l a c, on_tline l e a c"

I0123 14:29:23.065022 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_tline l e a c ? coll h k j"
I0123 14:29:23.065179 139850290401280 graph.py:498] 
I0123 14:29:23.065233 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_tline l e a c ? coll h k j
I0123 14:29:24.066293 139850290401280 ddar.py:60] Depth 1/1000 time = 0.9297442436218262
I0123 14:29:26.530698 139850290401280 ddar.py:60] Depth 2/1000 time = 2.4641971588134766
I0123 14:29:29.809966 139850290401280 ddar.py:60] Depth 3/1000 time = 3.278989791870117
I0123 14:29:32.757996 139850290401280 ddar.py:60] Depth 4/1000 time = 2.9476466178894043
I0123 14:29:36.108120 139850290401280 ddar.py:60] Depth 5/1000 time = 3.3498339653015137
I0123 14:29:40.269507 139850290401280 ddar.py:60] Depth 6/1000 time = 4.058679103851318
I0123 14:29:40.271646 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:29:40.271785 139850290401280 alphageometry.py:566] LM output (score=-2.772862): "l : C c d l 15 T c d g l 16 ;"
I0123 14:29:40.271820 139850290401280 alphageometry.py:567] Translation: "l = on_line l c d, on_tline l g c d"

I0123 14:29:40.271861 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l c d, on_tline l g c d ? coll h k j"
I0123 14:29:40.272018 139850290401280 graph.py:498] 
I0123 14:29:40.272071 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l c d, on_tline l g c d ? coll h k j
I0123 14:29:41.615190 139850290401280 ddar.py:60] Depth 1/1000 time = 1.271129846572876
I0123 14:29:43.854569 139850290401280 ddar.py:60] Depth 2/1000 time = 2.239166498184204
I0123 14:29:47.300465 139850290401280 ddar.py:60] Depth 3/1000 time = 3.4456405639648438
I0123 14:29:50.794609 139850290401280 ddar.py:60] Depth 4/1000 time = 3.493875503540039
I0123 14:29:54.345248 139850290401280 ddar.py:60] Depth 5/1000 time = 3.550339460372925
I0123 14:29:57.844547 139850290401280 ddar.py:60] Depth 6/1000 time = 3.49872088432312
I0123 14:30:02.320944 139850290401280 ddar.py:60] Depth 7/1000 time = 4.376253366470337
I0123 14:30:02.324605 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:30:02.324752 139850290401280 alphageometry.py:566] LM output (score=-2.827159): "l : C a b l 15 T a b c l 16 ;"
I0123 14:30:02.324792 139850290401280 alphageometry.py:567] Translation: "l = on_line l a b, on_tline l c a b"

I0123 14:30:02.324834 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_tline l c a b ? coll h k j"
I0123 14:30:02.324993 139850290401280 graph.py:498] 
I0123 14:30:02.325047 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_tline l c a b ? coll h k j
I0123 14:30:03.732357 139850290401280 ddar.py:60] Depth 1/1000 time = 1.335045576095581
I0123 14:30:06.452886 139850290401280 ddar.py:60] Depth 2/1000 time = 2.7203075885772705
I0123 14:30:09.755610 139850290401280 ddar.py:60] Depth 3/1000 time = 3.302492380142212
I0123 14:30:13.510970 139850290401280 ddar.py:60] Depth 4/1000 time = 3.7550363540649414
I0123 14:30:17.638671 139850290401280 ddar.py:60] Depth 5/1000 time = 4.1273064613342285
I0123 14:30:23.153983 139850290401280 ddar.py:60] Depth 6/1000 time = 5.405644178390503
I0123 14:30:23.156248 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:30:23.156397 139850290401280 alphageometry.py:566] LM output (score=-2.864792): "l : C d e l 15 D d e d l 16 ;"
I0123 14:30:23.156436 139850290401280 alphageometry.py:567] Translation: "l = on_line l d e, on_circle l d e"

I0123 14:30:23.156485 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l d e, on_circle l d e ? coll h k j"
I0123 14:30:23.156648 139850290401280 graph.py:498] 
I0123 14:30:23.156702 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l d e, on_circle l d e ? coll h k j
I0123 14:30:25.036840 139850290401280 ddar.py:60] Depth 1/1000 time = 1.7991549968719482
I0123 14:30:29.148447 139850290401280 ddar.py:60] Depth 2/1000 time = 4.111392021179199
I0123 14:30:36.750647 139850290401280 ddar.py:60] Depth 3/1000 time = 7.601876735687256
I0123 14:30:42.670402 139850290401280 ddar.py:60] Depth 4/1000 time = 5.919309854507446
I0123 14:30:48.541557 139850290401280 ddar.py:60] Depth 5/1000 time = 5.870874881744385
I0123 14:30:54.795153 139850290401280 ddar.py:60] Depth 6/1000 time = 6.252988576889038
I0123 14:30:54.930298 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:30:54.930434 139850290401280 alphageometry.py:566] LM output (score=-2.870938): "l : C a c l 15 T a c d l 16 ;"
I0123 14:30:54.930474 139850290401280 alphageometry.py:567] Translation: "l = on_line l a c, on_tline l d a c"

I0123 14:30:54.930514 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_tline l d a c ? coll h k j"
I0123 14:30:54.930695 139850290401280 graph.py:498] 
I0123 14:30:54.930747 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_tline l d a c ? coll h k j
I0123 14:30:55.930072 139850290401280 ddar.py:60] Depth 1/1000 time = 0.9270715713500977
I0123 14:30:58.588089 139850290401280 ddar.py:60] Depth 2/1000 time = 2.657711982727051
I0123 14:31:02.019905 139850290401280 ddar.py:60] Depth 3/1000 time = 3.4315755367279053
I0123 14:31:06.162728 139850290401280 ddar.py:60] Depth 4/1000 time = 4.142575263977051
I0123 14:31:10.385166 139850290401280 ddar.py:60] Depth 5/1000 time = 4.22218918800354
I0123 14:31:14.579942 139850290401280 ddar.py:60] Depth 6/1000 time = 4.1942138671875
I0123 14:31:14.679237 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:31:14.679391 139850290401280 alphageometry.py:566] LM output (score=-2.871111): "l : D d g g l 15 ;"
I0123 14:31:14.679429 139850290401280 alphageometry.py:567] Translation: "l = on_circle l g d"

I0123 14:31:14.679465 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_circle l g d ? coll h k j"
I0123 14:31:14.679620 139850290401280 graph.py:498] 
I0123 14:31:14.679673 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_circle l g d ? coll h k j
I0123 14:31:15.920076 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1597709655761719
I0123 14:31:19.275505 139850290401280 ddar.py:60] Depth 2/1000 time = 3.3551461696624756
I0123 14:31:23.093488 139850290401280 ddar.py:60] Depth 3/1000 time = 3.8176324367523193
I0123 14:31:27.397547 139850290401280 ddar.py:60] Depth 4/1000 time = 4.30379581451416
I0123 14:31:31.683637 139850290401280 ddar.py:60] Depth 5/1000 time = 4.285822629928589
I0123 14:31:36.973148 139850290401280 ddar.py:60] Depth 6/1000 time = 5.176153898239136
I0123 14:31:36.975623 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:31:36.975749 139850290401280 alphageometry.py:566] LM output (score=-2.893415): "l : C a b l 15 D a b b l 16 ;"
I0123 14:31:36.975787 139850290401280 alphageometry.py:567] Translation: "l = on_line l a b, on_circle l b a"

I0123 14:31:36.975827 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_circle l b a ? coll h k j"
I0123 14:31:36.975987 139850290401280 graph.py:498] 
I0123 14:31:36.976041 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_circle l b a ? coll h k j
I0123 14:31:38.041023 139850290401280 ddar.py:60] Depth 1/1000 time = 0.9777114391326904
I0123 14:31:40.645345 139850290401280 ddar.py:60] Depth 2/1000 time = 2.6041059494018555
I0123 14:31:43.947415 139850290401280 ddar.py:60] Depth 3/1000 time = 3.301805019378662
I0123 14:31:47.356080 139850290401280 ddar.py:60] Depth 4/1000 time = 3.408417224884033
I0123 14:31:50.781621 139850290401280 ddar.py:60] Depth 5/1000 time = 3.4252939224243164
I0123 14:31:53.787857 139850290401280 ddar.py:60] Depth 6/1000 time = 3.005740165710449
I0123 14:31:58.697183 139850290401280 ddar.py:60] Depth 7/1000 time = 4.819103240966797
I0123 14:31:58.699586 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:31:58.699714 139850290401280 alphageometry.py:566] LM output (score=-2.920647): "l : C a c l 15 T a c g l 16 ;"
I0123 14:31:58.699753 139850290401280 alphageometry.py:567] Translation: "l = on_line l a c, on_tline l g a c"

I0123 14:31:58.699791 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_tline l g a c ? coll h k j"
I0123 14:31:58.699953 139850290401280 graph.py:498] 
I0123 14:31:58.700007 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_tline l g a c ? coll h k j
I0123 14:31:59.701546 139850290401280 ddar.py:60] Depth 1/1000 time = 0.9318826198577881
I0123 14:32:02.385721 139850290401280 ddar.py:60] Depth 2/1000 time = 2.683845281600952
I0123 14:32:05.528066 139850290401280 ddar.py:60] Depth 3/1000 time = 3.1420960426330566
I0123 14:32:10.163476 139850290401280 ddar.py:60] Depth 4/1000 time = 4.635159492492676
I0123 14:32:14.228670 139850290401280 ddar.py:60] Depth 5/1000 time = 4.064936876296997
I0123 14:32:18.282310 139850290401280 ddar.py:60] Depth 6/1000 time = 4.053121089935303
I0123 14:32:18.380533 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:32:18.380670 139850290401280 alphageometry.py:566] LM output (score=-2.953723): "l : C b c l 15 T b c d l 16 ;"
I0123 14:32:18.380710 139850290401280 alphageometry.py:567] Translation: "l = on_line l b c, on_tline l d b c"

I0123 14:32:18.380747 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_tline l d b c ? coll h k j"
I0123 14:32:18.380899 139850290401280 graph.py:498] 
I0123 14:32:18.380952 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_tline l d b c ? coll h k j
I0123 14:32:19.804512 139850290401280 ddar.py:60] Depth 1/1000 time = 1.3544154167175293
I0123 14:32:22.048149 139850290401280 ddar.py:60] Depth 2/1000 time = 2.243356704711914
I0123 14:32:25.604756 139850290401280 ddar.py:60] Depth 3/1000 time = 3.556260347366333
I0123 14:32:29.592587 139850290401280 ddar.py:60] Depth 4/1000 time = 3.987534999847412
I0123 14:32:33.842905 139850290401280 ddar.py:60] Depth 5/1000 time = 4.250061273574829
I0123 14:32:38.142954 139850290401280 ddar.py:60] Depth 6/1000 time = 4.299513339996338
I0123 14:32:38.249877 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:32:38.250026 139850290401280 alphageometry.py:566] LM output (score=-2.985959): "l : C b e l 15 T b e d l 16 ;"
I0123 14:32:38.250068 139850290401280 alphageometry.py:567] Translation: "l = on_line l b e, on_tline l d b e"

I0123 14:32:38.250116 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_tline l d b e ? coll h k j"
I0123 14:32:38.250278 139850290401280 graph.py:498] 
I0123 14:32:38.250333 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_tline l d b e ? coll h k j
I0123 14:32:39.250587 139850290401280 ddar.py:60] Depth 1/1000 time = 0.9294290542602539
I0123 14:32:41.874970 139850290401280 ddar.py:60] Depth 2/1000 time = 2.6241848468780518
I0123 14:32:45.403753 139850290401280 ddar.py:60] Depth 3/1000 time = 3.5285401344299316
I0123 14:32:49.533241 139850290401280 ddar.py:60] Depth 4/1000 time = 4.129188537597656
I0123 14:32:53.714998 139850290401280 ddar.py:60] Depth 5/1000 time = 4.181496858596802
I0123 14:32:57.911729 139850290401280 ddar.py:60] Depth 6/1000 time = 4.196131944656372
I0123 14:32:58.019476 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:32:58.019639 139850290401280 alphageometry.py:566] LM output (score=-2.997340): "l : T b e b l 15 ;"
I0123 14:32:58.019678 139850290401280 alphageometry.py:567] Translation: "l = on_tline l b b e"

I0123 14:32:58.019722 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_tline l b b e ? coll h k j"
I0123 14:32:58.019877 139850290401280 graph.py:498] 
I0123 14:32:58.019930 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_tline l b b e ? coll h k j
I0123 14:32:58.986510 139850290401280 ddar.py:60] Depth 1/1000 time = 0.8952300548553467
I0123 14:33:01.029149 139850290401280 ddar.py:60] Depth 2/1000 time = 2.042452573776245
I0123 14:33:04.273286 139850290401280 ddar.py:60] Depth 3/1000 time = 3.243872880935669
I0123 14:33:07.150021 139850290401280 ddar.py:60] Depth 4/1000 time = 2.8763415813446045
I0123 14:33:10.513438 139850290401280 ddar.py:60] Depth 5/1000 time = 3.363151788711548
I0123 14:33:14.725496 139850290401280 ddar.py:60] Depth 6/1000 time = 4.111680507659912
I0123 14:33:14.727673 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:33:14.727813 139850290401280 alphageometry.py:566] LM output (score=-2.997584): "l : C b c l 15 T b c e l 16 ;"
I0123 14:33:14.727851 139850290401280 alphageometry.py:567] Translation: "l = on_line l b c, on_tline l e b c"

I0123 14:33:14.727895 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_tline l e b c ? coll h k j"
I0123 14:33:14.728068 139850290401280 graph.py:498] 
I0123 14:33:14.728122 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_tline l e b c ? coll h k j
I0123 14:33:15.723048 139850290401280 ddar.py:60] Depth 1/1000 time = 0.9240999221801758
I0123 14:33:18.283468 139850290401280 ddar.py:60] Depth 2/1000 time = 2.5602169036865234
I0123 14:33:21.136971 139850290401280 ddar.py:60] Depth 3/1000 time = 2.8532845973968506
I0123 14:33:24.547555 139850290401280 ddar.py:60] Depth 4/1000 time = 3.4103212356567383
I0123 14:33:28.013113 139850290401280 ddar.py:60] Depth 5/1000 time = 3.4652669429779053
I0123 14:33:32.001351 139850290401280 ddar.py:60] Depth 6/1000 time = 3.884848117828369
I0123 14:33:32.003563 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:33:32.003697 139850290401280 alphageometry.py:566] LM output (score=-3.007012): "l : C b c l 15 T b c h l 16 ;"
I0123 14:33:32.003733 139850290401280 alphageometry.py:567] Translation: "l = on_line l b c, on_tline l h b c"

I0123 14:33:32.003784 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_tline l h b c ? coll h k j"
I0123 14:33:32.003982 139850290401280 graph.py:498] 
I0123 14:33:32.004034 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_tline l h b c ? coll h k j
I0123 14:33:33.447065 139850290401280 ddar.py:60] Depth 1/1000 time = 1.372931957244873
I0123 14:33:35.645025 139850290401280 ddar.py:60] Depth 2/1000 time = 2.197736978530884
I0123 14:33:39.049351 139850290401280 ddar.py:60] Depth 3/1000 time = 3.4040980339050293
I0123 14:33:43.146053 139850290401280 ddar.py:60] Depth 4/1000 time = 4.096446990966797
I0123 14:33:47.356864 139850290401280 ddar.py:60] Depth 5/1000 time = 4.210502624511719
I0123 14:33:51.601015 139850290401280 ddar.py:60] Depth 6/1000 time = 4.243450403213501
I0123 14:33:51.709861 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:33:51.710026 139850290401280 alphageometry.py:566] LM output (score=-3.016054): "l : T c f c l 15 ;"
I0123 14:33:51.710066 139850290401280 alphageometry.py:567] Translation: "l = on_tline l c c f"

I0123 14:33:51.710112 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_tline l c c f ? coll h k j"
I0123 14:33:51.710268 139850290401280 graph.py:498] 
I0123 14:33:51.710320 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_tline l c c f ? coll h k j
I0123 14:33:52.653983 139850290401280 ddar.py:60] Depth 1/1000 time = 0.8727474212646484
I0123 14:33:54.827569 139850290401280 ddar.py:60] Depth 2/1000 time = 2.173398971557617
I0123 14:33:58.466079 139850290401280 ddar.py:60] Depth 3/1000 time = 3.6382949352264404
I0123 14:34:01.709238 139850290401280 ddar.py:60] Depth 4/1000 time = 3.2429027557373047
I0123 14:34:05.407008 139850290401280 ddar.py:60] Depth 5/1000 time = 3.69752836227417
I0123 14:34:10.382557 139850290401280 ddar.py:60] Depth 6/1000 time = 4.868979454040527
I0123 14:34:10.384828 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:34:10.384964 139850290401280 alphageometry.py:566] LM output (score=-3.031459): "l : C c d l 15 T c d h l 16 ;"
I0123 14:34:10.385004 139850290401280 alphageometry.py:567] Translation: "l = on_line l c d, on_tline l h c d"

I0123 14:34:10.385056 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l c d, on_tline l h c d ? coll h k j"
I0123 14:34:10.385219 139850290401280 graph.py:498] 
I0123 14:34:10.385272 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l c d, on_tline l h c d ? coll h k j
I0123 14:34:11.377944 139850290401280 ddar.py:60] Depth 1/1000 time = 0.9236047267913818
I0123 14:34:14.126034 139850290401280 ddar.py:60] Depth 2/1000 time = 2.7478485107421875
I0123 14:34:17.694682 139850290401280 ddar.py:60] Depth 3/1000 time = 3.5684239864349365
I0123 14:34:20.913831 139850290401280 ddar.py:60] Depth 4/1000 time = 3.2188987731933594
I0123 14:34:24.610674 139850290401280 ddar.py:60] Depth 5/1000 time = 3.6965672969818115
I0123 14:34:28.333176 139850290401280 ddar.py:60] Depth 6/1000 time = 3.7219502925872803
I0123 14:34:32.873565 139850290401280 ddar.py:60] Depth 7/1000 time = 4.440212726593018
I0123 14:34:32.877449 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:34:32.877634 139850290401280 alphageometry.py:540] Depth 1. There are 32 nodes to expand:
I0123 14:34:32.877683 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C a c l 15 D a l c l 16 ; x00
I0123 14:34:32.877717 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C b c l 15 D b l c l 16 ; x00
I0123 14:34:32.877744 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C a e l 15 D a l e l 16 ; x00
I0123 14:34:32.877772 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C b e l 15 D b l e l 16 ; x00
I0123 14:34:32.877799 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C a b l 15 D a l b l 16 ; x00
I0123 14:34:32.877824 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C c d l 15 D c l d l 16 ; x00
I0123 14:34:32.877848 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C d e l 15 D d l e l 16 ; x00
I0123 14:34:32.877871 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C c e l 15 D c l e l 16 ; x00
I0123 14:34:32.877895 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C a d l 15 D a l d l 16 ; x00
I0123 14:34:32.877918 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C b d l 15 D b l d l 16 ; x00
I0123 14:34:32.877959 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C a b l 15 D a f f l 16 ; x00
I0123 14:34:32.877984 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C a c l 15 T a c b l 16 ; x00
I0123 14:34:32.878008 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C a d l 15 D a d d l 16 ; x00
I0123 14:34:32.878030 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C b d l 15 D b d d l 16 ; x00
I0123 14:34:32.878053 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C d g l 15 D d g g l 16 ; x00
I0123 14:34:32.878076 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C c d l 15 D c d d l 16 ; x00
I0123 14:34:32.878099 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C a g l 15 D a g g l 16 ; x00
I0123 14:34:32.878122 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C a c l 15 T a c e l 16 ; x00
I0123 14:34:32.878145 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C c d l 15 T c d g l 16 ; x00
I0123 14:34:32.878167 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C a b l 15 T a b c l 16 ; x00
I0123 14:34:32.878190 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C d e l 15 D d e d l 16 ; x00
I0123 14:34:32.878211 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C a c l 15 T a c d l 16 ; x00
I0123 14:34:32.878237 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : D d g g l 15 ; x00
I0123 14:34:32.878265 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C a b l 15 D a b b l 16 ; x00
I0123 14:34:32.878288 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C a c l 15 T a c g l 16 ; x00
I0123 14:34:32.878311 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C b c l 15 T b c d l 16 ; x00
I0123 14:34:32.878335 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C b e l 15 T b e d l 16 ; x00
I0123 14:34:32.878357 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : T b e b l 15 ; x00
I0123 14:34:32.878379 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C b c l 15 T b c e l 16 ; x00
I0123 14:34:32.878400 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C b c l 15 T b c h l 16 ; x00
I0123 14:34:32.878422 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : T c f c l 15 ; x00
I0123 14:34:32.878443 139850290401280 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C c d l 15 T c d h l 16 ; x00
I0123 14:34:32.878468 139850290401280 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C a c l 15 D a l c l 16 ; x00
I0123 14:34:40.035319 139850290401280 alphageometry.py:566] LM output (score=-0.555806): "m : C a e m 17 D a m e m 18 ;"
I0123 14:34:40.035479 139850290401280 alphageometry.py:567] Translation: "m = on_line m a e, on_bline m e a"

I0123 14:34:40.035527 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m a e, on_bline m e a ? coll h k j"
I0123 14:34:40.035695 139850290401280 graph.py:498] 
I0123 14:34:40.035750 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m a e, on_bline m e a ? coll h k j
I0123 14:34:41.472561 139850290401280 ddar.py:60] Depth 1/1000 time = 1.326948881149292
I0123 14:34:46.675292 139850290401280 ddar.py:60] Depth 2/1000 time = 5.202525854110718
I0123 14:34:54.693017 139850290401280 ddar.py:60] Depth 3/1000 time = 8.017480611801147
I0123 14:35:01.157963 139850290401280 ddar.py:60] Depth 4/1000 time = 6.464628219604492
I0123 14:35:08.654251 139850290401280 ddar.py:60] Depth 5/1000 time = 7.495950698852539
I0123 14:35:16.279992 139850290401280 ddar.py:60] Depth 6/1000 time = 7.624855279922485
I0123 14:35:23.265163 139850290401280 ddar.py:60] Depth 7/1000 time = 6.84320855140686
I0123 14:35:23.265622 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:35:23.265708 139850290401280 alphageometry.py:566] LM output (score=-1.006012): "m : C c e m 17 D c m e m 18 ;"
I0123 14:35:23.265746 139850290401280 alphageometry.py:567] Translation: "m = on_line m c e, on_bline m e c"

I0123 14:35:23.265796 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m c e, on_bline m e c ? coll h k j"
I0123 14:35:23.265977 139850290401280 graph.py:498] 
I0123 14:35:23.266035 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m c e, on_bline m e c ? coll h k j
I0123 14:35:25.139193 139850290401280 ddar.py:60] Depth 1/1000 time = 1.7654330730438232
I0123 14:35:29.481842 139850290401280 ddar.py:60] Depth 2/1000 time = 4.342442512512207
I0123 14:35:37.336822 139850290401280 ddar.py:60] Depth 3/1000 time = 7.854755640029907
I0123 14:35:44.521797 139850290401280 ddar.py:60] Depth 4/1000 time = 7.184705495834351
I0123 14:35:51.098970 139850290401280 ddar.py:60] Depth 5/1000 time = 6.576875448226929
I0123 14:35:58.209406 139850290401280 ddar.py:60] Depth 6/1000 time = 7.109673976898193
I0123 14:35:58.348263 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:35:58.348392 139850290401280 alphageometry.py:566] LM output (score=-1.295735): "m : C a f m 17 D a m f m 18 ;"
I0123 14:35:58.348431 139850290401280 alphageometry.py:567] Translation: "m = on_line m a f, on_bline m f a"

I0123 14:35:58.348473 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m a f, on_bline m f a ? coll h k j"
I0123 14:35:58.348668 139850290401280 graph.py:498] 
I0123 14:35:58.348724 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m a f, on_bline m f a ? coll h k j
I0123 14:36:00.222714 139850290401280 ddar.py:60] Depth 1/1000 time = 1.7681207656860352
I0123 14:36:03.713706 139850290401280 ddar.py:60] Depth 2/1000 time = 3.490466833114624
I0123 14:36:09.530574 139850290401280 ddar.py:60] Depth 3/1000 time = 5.816614866256714
I0123 14:36:14.555833 139850290401280 ddar.py:60] Depth 4/1000 time = 5.025006532669067
I0123 14:36:20.117675 139850290401280 ddar.py:60] Depth 5/1000 time = 5.561508417129517
I0123 14:36:25.180402 139850290401280 ddar.py:60] Depth 6/1000 time = 5.062010765075684
I0123 14:36:25.292753 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:36:25.292821 139850290401280 alphageometry.py:566] LM output (score=-1.384645): "m : C a d m 17 D a d d m 18 ;"
I0123 14:36:25.292857 139850290401280 alphageometry.py:567] Translation: "m = on_line m a d, on_circle m d a"

I0123 14:36:25.292898 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m a d, on_circle m d a ? coll h k j"
I0123 14:36:25.293059 139850290401280 graph.py:498] 
I0123 14:36:25.293110 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m a d, on_circle m d a ? coll h k j
I0123 14:36:27.120031 139850290401280 ddar.py:60] Depth 1/1000 time = 1.7263917922973633
I0123 14:36:32.828783 139850290401280 ddar.py:60] Depth 2/1000 time = 5.708547830581665
I0123 14:36:41.402719 139850290401280 ddar.py:60] Depth 3/1000 time = 8.573606014251709
I0123 14:36:49.443942 139850290401280 ddar.py:60] Depth 4/1000 time = 8.040757417678833
I0123 14:36:56.987050 139850290401280 ddar.py:60] Depth 5/1000 time = 7.542808294296265
I0123 14:37:05.120265 139850290401280 ddar.py:60] Depth 6/1000 time = 8.132476568222046
I0123 14:37:05.259248 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:37:05.259353 139850290401280 alphageometry.py:566] LM output (score=-1.387122): "m : C a b m 17 D a m b m 18 ;"
I0123 14:37:05.259392 139850290401280 alphageometry.py:567] Translation: "m = on_line m a b, on_bline m b a"

I0123 14:37:05.259436 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m a b, on_bline m b a ? coll h k j"
I0123 14:37:05.259602 139850290401280 graph.py:498] 
I0123 14:37:05.259655 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m a b, on_bline m b a ? coll h k j
I0123 14:37:06.649206 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2827541828155518
I0123 14:37:10.910184 139850290401280 ddar.py:60] Depth 2/1000 time = 4.260770797729492
I0123 14:37:18.840920 139850290401280 ddar.py:60] Depth 3/1000 time = 7.930439233779907
I0123 14:37:26.019986 139850290401280 ddar.py:60] Depth 4/1000 time = 7.178687334060669
I0123 14:37:33.090844 139850290401280 ddar.py:60] Depth 5/1000 time = 7.070544719696045
I0123 14:37:39.699687 139850290401280 ddar.py:60] Depth 6/1000 time = 6.608084440231323
I0123 14:37:39.830326 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:37:39.830421 139850290401280 alphageometry.py:566] LM output (score=-1.562616): "m : C b c m 17 D b m c m 18 ;"
I0123 14:37:39.830460 139850290401280 alphageometry.py:567] Translation: "m = on_line m b c, on_bline m c b"

I0123 14:37:39.830504 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m b c, on_bline m c b ? coll h k j"
I0123 14:37:39.830681 139850290401280 graph.py:498] 
I0123 14:37:39.830734 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m b c, on_bline m c b ? coll h k j
I0123 14:37:41.757051 139850290401280 ddar.py:60] Depth 1/1000 time = 1.818481683731079
I0123 14:37:46.541495 139850290401280 ddar.py:60] Depth 2/1000 time = 4.784229040145874
I0123 14:37:54.384878 139850290401280 ddar.py:60] Depth 3/1000 time = 7.843031167984009
I0123 14:38:01.977209 139850290401280 ddar.py:60] Depth 4/1000 time = 7.591832876205444
I0123 14:38:09.401273 139850290401280 ddar.py:60] Depth 5/1000 time = 7.423720121383667
I0123 14:38:17.427423 139850290401280 ddar.py:60] Depth 6/1000 time = 8.025186777114868
I0123 14:38:25.168506 139850290401280 ddar.py:60] Depth 7/1000 time = 7.600250244140625
I0123 14:38:25.168891 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:38:25.168955 139850290401280 alphageometry.py:566] LM output (score=-1.650470): "m : C c f m 17 D c m f m 18 ;"
I0123 14:38:25.168992 139850290401280 alphageometry.py:567] Translation: "m = on_line m c f, on_bline m f c"

I0123 14:38:25.169040 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m c f, on_bline m f c ? coll h k j"
I0123 14:38:25.169213 139850290401280 graph.py:498] 
I0123 14:38:25.169270 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m c f, on_bline m f c ? coll h k j
I0123 14:38:26.524672 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2476568222045898
I0123 14:38:30.350394 139850290401280 ddar.py:60] Depth 2/1000 time = 3.8255198001861572
I0123 14:38:37.291371 139850290401280 ddar.py:60] Depth 3/1000 time = 6.940711259841919
I0123 14:38:42.942889 139850290401280 ddar.py:60] Depth 4/1000 time = 5.651204586029053
I0123 14:38:48.625409 139850290401280 ddar.py:60] Depth 5/1000 time = 5.682243824005127
I0123 14:38:54.889052 139850290401280 ddar.py:60] Depth 6/1000 time = 6.262872695922852
I0123 14:38:55.002061 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:38:55.002164 139850290401280 alphageometry.py:566] LM output (score=-1.803877): "m : C c f m 17 D c f c m 18 ;"
I0123 14:38:55.002203 139850290401280 alphageometry.py:567] Translation: "m = on_line m c f, on_circle m c f"

I0123 14:38:55.002259 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m c f, on_circle m c f ? coll h k j"
I0123 14:38:55.002474 139850290401280 graph.py:498] 
I0123 14:38:55.002530 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m c f, on_circle m c f ? coll h k j
I0123 14:38:56.349818 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2378849983215332
I0123 14:38:59.884415 139850290401280 ddar.py:60] Depth 2/1000 time = 3.534390449523926
I0123 14:39:06.008018 139850290401280 ddar.py:60] Depth 3/1000 time = 6.123373031616211
I0123 14:39:11.474677 139850290401280 ddar.py:60] Depth 4/1000 time = 5.466328144073486
I0123 14:39:16.374829 139850290401280 ddar.py:60] Depth 5/1000 time = 4.899745225906372
I0123 14:39:21.228503 139850290401280 ddar.py:60] Depth 6/1000 time = 4.853045225143433
I0123 14:39:21.330234 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:39:21.330304 139850290401280 alphageometry.py:566] LM output (score=-1.824720): "m : C b e m 17 D b m e m 18 ;"
I0123 14:39:21.330341 139850290401280 alphageometry.py:567] Translation: "m = on_line m b e, on_bline m e b"

I0123 14:39:21.330381 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m b e, on_bline m e b ? coll h k j"
I0123 14:39:21.330542 139850290401280 graph.py:498] 
I0123 14:39:21.330594 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m b e, on_bline m e b ? coll h k j
I0123 14:39:22.700148 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2619521617889404
I0123 14:39:27.547686 139850290401280 ddar.py:60] Depth 2/1000 time = 4.847320318222046
I0123 14:39:34.418134 139850290401280 ddar.py:60] Depth 3/1000 time = 6.870090007781982
I0123 14:39:41.242997 139850290401280 ddar.py:60] Depth 4/1000 time = 6.824382543563843
I0123 14:39:47.933628 139850290401280 ddar.py:60] Depth 5/1000 time = 6.690321683883667
I0123 14:39:55.246997 139850290401280 ddar.py:60] Depth 6/1000 time = 7.313024282455444
I0123 14:40:01.945039 139850290401280 ddar.py:60] Depth 7/1000 time = 6.6972644329071045
I0123 14:40:08.668250 139850290401280 ddar.py:60] Depth 8/1000 time = 6.589106559753418
I0123 14:40:08.668708 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:40:08.668814 139850290401280 alphageometry.py:566] LM output (score=-1.828913): "m : C c f m 17 D c f f m 18 ;"
I0123 14:40:08.668851 139850290401280 alphageometry.py:567] Translation: "m = on_line m c f, on_circle m f c"

I0123 14:40:08.668909 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m c f, on_circle m f c ? coll h k j"
I0123 14:40:08.669102 139850290401280 graph.py:498] 
I0123 14:40:08.669159 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m c f, on_circle m f c ? coll h k j
I0123 14:40:10.620095 139850290401280 ddar.py:60] Depth 1/1000 time = 1.843085765838623
I0123 14:40:14.559704 139850290401280 ddar.py:60] Depth 2/1000 time = 3.9393739700317383
I0123 14:40:20.938243 139850290401280 ddar.py:60] Depth 3/1000 time = 6.378286838531494
I0123 14:40:27.470680 139850290401280 ddar.py:60] Depth 4/1000 time = 6.532106161117554
I0123 14:40:33.465380 139850290401280 ddar.py:60] Depth 5/1000 time = 5.994265794754028
I0123 14:40:39.382162 139850290401280 ddar.py:60] Depth 6/1000 time = 5.916024208068848
I0123 14:40:39.486617 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:40:39.486719 139850290401280 alphageometry.py:566] LM output (score=-2.025860): "m : C d e m 17 D d m e m 18 ;"
I0123 14:40:39.486757 139850290401280 alphageometry.py:567] Translation: "m = on_line m d e, on_bline m e d"

I0123 14:40:39.486798 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m d e, on_bline m e d ? coll h k j"
I0123 14:40:39.486972 139850290401280 graph.py:498] 
I0123 14:40:39.487027 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m d e, on_bline m e d ? coll h k j
I0123 14:40:41.419220 139850290401280 ddar.py:60] Depth 1/1000 time = 1.8245179653167725
I0123 14:40:45.063164 139850290401280 ddar.py:60] Depth 2/1000 time = 3.6437244415283203
I0123 14:40:51.992501 139850290401280 ddar.py:60] Depth 3/1000 time = 6.92908239364624
I0123 14:40:57.576703 139850290401280 ddar.py:60] Depth 4/1000 time = 5.583884000778198
I0123 14:41:03.163892 139850290401280 ddar.py:60] Depth 5/1000 time = 5.58692193031311
I0123 14:41:08.774051 139850290401280 ddar.py:60] Depth 6/1000 time = 5.6096296310424805
I0123 14:41:08.889018 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:41:08.889121 139850290401280 alphageometry.py:566] LM output (score=-2.401986): "m : C a g m 17 D a g g m 18 ;"
I0123 14:41:08.889158 139850290401280 alphageometry.py:567] Translation: "m = on_line m a g, on_circle m g a"

I0123 14:41:08.889213 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m a g, on_circle m g a ? coll h k j"
I0123 14:41:08.889398 139850290401280 graph.py:498] 
I0123 14:41:08.889453 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m a g, on_circle m g a ? coll h k j
I0123 14:41:10.320112 139850290401280 ddar.py:60] Depth 1/1000 time = 1.3286349773406982
I0123 14:41:14.411899 139850290401280 ddar.py:60] Depth 2/1000 time = 4.091583490371704
I0123 14:41:20.350207 139850290401280 ddar.py:60] Depth 3/1000 time = 5.938107967376709
I0123 14:41:25.973711 139850290401280 ddar.py:60] Depth 4/1000 time = 5.623219013214111
I0123 14:41:31.619544 139850290401280 ddar.py:60] Depth 5/1000 time = 5.645466327667236
I0123 14:41:37.225739 139850290401280 ddar.py:60] Depth 6/1000 time = 5.605705976486206
I0123 14:41:37.340719 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:41:37.340810 139850290401280 alphageometry.py:566] LM output (score=-2.404011): "m : C c f m 17 T c f d m 18 ;"
I0123 14:41:37.340848 139850290401280 alphageometry.py:567] Translation: "m = on_line m c f, on_tline m d c f"

I0123 14:41:37.340887 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m c f, on_tline m d c f ? coll h k j"
I0123 14:41:37.341078 139850290401280 graph.py:498] 
I0123 14:41:37.341133 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m c f, on_tline m d c f ? coll h k j
I0123 14:41:38.652777 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2238409519195557
I0123 14:41:42.612927 139850290401280 ddar.py:60] Depth 2/1000 time = 3.9599618911743164
I0123 14:41:50.813656 139850290401280 ddar.py:60] Depth 3/1000 time = 8.200409650802612
I0123 14:41:58.873946 139850290401280 ddar.py:60] Depth 4/1000 time = 8.059874773025513
I0123 14:42:06.986094 139850290401280 ddar.py:60] Depth 5/1000 time = 8.111767530441284
I0123 14:42:14.443699 139850290401280 ddar.py:60] Depth 6/1000 time = 7.45677375793457
I0123 14:42:14.579607 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:42:14.579688 139850290401280 alphageometry.py:566] LM output (score=-2.494612): "m : C c d m 17 D c d d m 18 ;"
I0123 14:42:14.579725 139850290401280 alphageometry.py:567] Translation: "m = on_line m c d, on_circle m d c"

I0123 14:42:14.579777 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m c d, on_circle m d c ? coll h k j"
I0123 14:42:14.579951 139850290401280 graph.py:498] 
I0123 14:42:14.580013 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m c d, on_circle m d c ? coll h k j
I0123 14:42:16.428074 139850290401280 ddar.py:60] Depth 1/1000 time = 1.7459437847137451
I0123 14:42:22.266879 139850290401280 ddar.py:60] Depth 2/1000 time = 5.838534832000732
I0123 14:42:31.080346 139850290401280 ddar.py:60] Depth 3/1000 time = 8.81307601928711
I0123 14:42:38.990031 139850290401280 ddar.py:60] Depth 4/1000 time = 7.909374237060547
I0123 14:42:47.521286 139850290401280 ddar.py:60] Depth 5/1000 time = 8.530889987945557
I0123 14:42:55.422513 139850290401280 ddar.py:60] Depth 6/1000 time = 7.9004294872283936
I0123 14:42:55.570637 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:42:55.570742 139850290401280 alphageometry.py:566] LM output (score=-2.525088): "m : C a g m 17 D a m g m 18 ;"
I0123 14:42:55.570781 139850290401280 alphageometry.py:567] Translation: "m = on_line m a g, on_bline m g a"

I0123 14:42:55.570828 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m a g, on_bline m g a ? coll h k j"
I0123 14:42:55.570999 139850290401280 graph.py:498] 
I0123 14:42:55.571057 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m a g, on_bline m g a ? coll h k j
I0123 14:42:56.866527 139850290401280 ddar.py:60] Depth 1/1000 time = 1.187453269958496
I0123 14:43:00.477320 139850290401280 ddar.py:60] Depth 2/1000 time = 3.6105287075042725
I0123 14:43:06.620243 139850290401280 ddar.py:60] Depth 3/1000 time = 6.1425416469573975
I0123 14:43:11.795562 139850290401280 ddar.py:60] Depth 4/1000 time = 5.175051212310791
I0123 14:43:16.994865 139850290401280 ddar.py:60] Depth 5/1000 time = 5.199066638946533
I0123 14:43:21.533119 139850290401280 ddar.py:60] Depth 6/1000 time = 4.537607431411743
I0123 14:43:21.638017 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:43:21.638132 139850290401280 alphageometry.py:566] LM output (score=-2.658739): "m : C d g m 17 D d g g m 18 ;"
I0123 14:43:21.638168 139850290401280 alphageometry.py:567] Translation: "m = on_line m d g, on_circle m g d"

I0123 14:43:21.638224 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m d g, on_circle m g d ? coll h k j"
I0123 14:43:21.638407 139850290401280 graph.py:498] 
I0123 14:43:21.638459 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m d g, on_circle m g d ? coll h k j
I0123 14:43:23.924949 139850290401280 ddar.py:60] Depth 1/1000 time = 2.184640884399414
I0123 14:43:28.914096 139850290401280 ddar.py:60] Depth 2/1000 time = 4.988940477371216
I0123 14:43:36.176704 139850290401280 ddar.py:60] Depth 3/1000 time = 7.262312650680542
I0123 14:43:44.078412 139850290401280 ddar.py:60] Depth 4/1000 time = 7.9013237953186035
I0123 14:43:51.332463 139850290401280 ddar.py:60] Depth 5/1000 time = 7.253789901733398
I0123 14:43:58.613889 139850290401280 ddar.py:60] Depth 6/1000 time = 7.28078556060791
I0123 14:44:06.595573 139850290401280 ddar.py:60] Depth 7/1000 time = 7.841548442840576
I0123 14:44:06.595827 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:44:06.595883 139850290401280 alphageometry.py:566] LM output (score=-2.738228): "m : C b e m 17 T b e i m 18 ;"
I0123 14:44:06.595919 139850290401280 alphageometry.py:567] Translation: "m = on_line m b e, on_tline m i b e"

I0123 14:44:06.595955 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m b e, on_tline m i b e ? coll h k j"
I0123 14:44:06.596133 139850290401280 graph.py:498] 
I0123 14:44:06.596186 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m b e, on_tline m i b e ? coll h k j
I0123 14:44:07.882390 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1961333751678467
I0123 14:44:11.248362 139850290401280 ddar.py:60] Depth 2/1000 time = 3.3657524585723877
I0123 14:44:18.804311 139850290401280 ddar.py:60] Depth 3/1000 time = 7.555734872817993
I0123 14:44:24.702584 139850290401280 ddar.py:60] Depth 4/1000 time = 5.897989511489868
I0123 14:44:30.689113 139850290401280 ddar.py:60] Depth 5/1000 time = 5.986251354217529
I0123 14:44:37.093955 139850290401280 ddar.py:60] Depth 6/1000 time = 6.404343128204346
I0123 14:44:43.416550 139850290401280 ddar.py:60] Depth 7/1000 time = 6.322278022766113
I0123 14:44:49.757186 139850290401280 ddar.py:60] Depth 8/1000 time = 6.339884996414185
I0123 14:44:55.958306 139850290401280 ddar.py:60] Depth 9/1000 time = 6.072323799133301
I0123 14:44:55.958627 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:44:55.958686 139850290401280 alphageometry.py:566] LM output (score=-2.939312): "m : C d e m 17 T d e i m 18 ;"
I0123 14:44:55.958742 139850290401280 alphageometry.py:567] Translation: "m = on_line m d e, on_tline m i d e"

I0123 14:44:55.958788 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m d e, on_tline m i d e ? coll h k j"
I0123 14:44:55.958960 139850290401280 graph.py:498] 
I0123 14:44:55.959014 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m d e, on_tline m i d e ? coll h k j
I0123 14:44:57.203632 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1559789180755615
I0123 14:45:01.227100 139850290401280 ddar.py:60] Depth 2/1000 time = 4.023265361785889
I0123 14:45:08.166177 139850290401280 ddar.py:60] Depth 3/1000 time = 6.938836097717285
I0123 14:45:14.049855 139850290401280 ddar.py:60] Depth 4/1000 time = 5.883382320404053
I0123 14:45:19.837566 139850290401280 ddar.py:60] Depth 5/1000 time = 5.787397384643555
I0123 14:45:25.643688 139850290401280 ddar.py:60] Depth 6/1000 time = 5.80551290512085
I0123 14:45:25.758968 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:45:25.759057 139850290401280 alphageometry.py:566] LM output (score=-2.969977): "m : C d e m 17 T d e j m 18 ;"
I0123 14:45:25.759096 139850290401280 alphageometry.py:567] Translation: "m = on_line m d e, on_tline m j d e"

I0123 14:45:25.759141 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m d e, on_tline m j d e ? coll h k j"
I0123 14:45:25.759312 139850290401280 graph.py:498] 
I0123 14:45:25.759363 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m d e, on_tline m j d e ? coll h k j
I0123 14:45:27.009085 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1614749431610107
I0123 14:45:30.774111 139850290401280 ddar.py:60] Depth 2/1000 time = 3.7648119926452637
I0123 14:45:36.140880 139850290401280 ddar.py:60] Depth 3/1000 time = 5.36651086807251
I0123 14:45:42.040952 139850290401280 ddar.py:60] Depth 4/1000 time = 5.8998472690582275
I0123 14:45:47.399686 139850290401280 ddar.py:60] Depth 5/1000 time = 5.358464241027832
I0123 14:45:52.698163 139850290401280 ddar.py:60] Depth 6/1000 time = 5.2979559898376465
I0123 14:45:52.811609 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:45:52.811679 139850290401280 alphageometry.py:566] LM output (score=-3.030556): "m : C b d m 17 D b m d m 18 ;"
I0123 14:45:52.811717 139850290401280 alphageometry.py:567] Translation: "m = on_line m b d, on_bline m d b"

I0123 14:45:52.811758 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m b d, on_bline m d b ? coll h k j"
I0123 14:45:52.811922 139850290401280 graph.py:498] 
I0123 14:45:52.811975 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m b d, on_bline m d b ? coll h k j
I0123 14:45:54.176636 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2556278705596924
I0123 14:45:58.409589 139850290401280 ddar.py:60] Depth 2/1000 time = 4.232751131057739
I0123 14:46:04.839792 139850290401280 ddar.py:60] Depth 3/1000 time = 6.429910898208618
I0123 14:46:10.705715 139850290401280 ddar.py:60] Depth 4/1000 time = 5.8654961585998535
I0123 14:46:16.512103 139850290401280 ddar.py:60] Depth 5/1000 time = 5.806111574172974
I0123 14:46:22.366534 139850290401280 ddar.py:60] Depth 6/1000 time = 5.853842258453369
I0123 14:46:22.477711 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:46:22.477814 139850290401280 alphageometry.py:566] LM output (score=-3.037381): "m : C c g m 17 D c g g m 18 ;"
I0123 14:46:22.477851 139850290401280 alphageometry.py:567] Translation: "m = on_line m c g, on_circle m g c"

I0123 14:46:22.477894 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m c g, on_circle m g c ? coll h k j"
I0123 14:46:22.478066 139850290401280 graph.py:498] 
I0123 14:46:22.478121 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m c g, on_circle m g c ? coll h k j
I0123 14:46:24.061767 139850290401280 ddar.py:60] Depth 1/1000 time = 1.4842631816864014
I0123 14:46:28.621882 139850290401280 ddar.py:60] Depth 2/1000 time = 4.559784173965454
I0123 14:46:34.989156 139850290401280 ddar.py:60] Depth 3/1000 time = 6.3670408725738525
I0123 14:46:41.449819 139850290401280 ddar.py:60] Depth 4/1000 time = 6.4604105949401855
I0123 14:46:47.238757 139850290401280 ddar.py:60] Depth 5/1000 time = 5.7886574268341064
I0123 14:46:52.976554 139850290401280 ddar.py:60] Depth 6/1000 time = 5.737255334854126
I0123 14:46:53.086305 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:46:53.086380 139850290401280 alphageometry.py:566] LM output (score=-3.065958): "m : C b e m 17 T b e f m 18 ;"
I0123 14:46:53.086418 139850290401280 alphageometry.py:567] Translation: "m = on_line m b e, on_tline m f b e"

I0123 14:46:53.086461 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m b e, on_tline m f b e ? coll h k j"
I0123 14:46:53.086628 139850290401280 graph.py:498] 
I0123 14:46:53.086684 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m b e, on_tline m f b e ? coll h k j
I0123 14:46:54.344917 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1695120334625244
I0123 14:46:57.705957 139850290401280 ddar.py:60] Depth 2/1000 time = 3.3608360290527344
I0123 14:47:04.055933 139850290401280 ddar.py:60] Depth 3/1000 time = 6.349673271179199
I0123 14:47:09.548293 139850290401280 ddar.py:60] Depth 4/1000 time = 5.4919445514678955
I0123 14:47:14.994233 139850290401280 ddar.py:60] Depth 5/1000 time = 5.445664882659912
I0123 14:47:20.452318 139850290401280 ddar.py:60] Depth 6/1000 time = 5.457404136657715
I0123 14:47:20.563384 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:47:20.563497 139850290401280 alphageometry.py:566] LM output (score=-3.107403): "m : C b e m 17 T b e h m 18 ;"
I0123 14:47:20.563543 139850290401280 alphageometry.py:567] Translation: "m = on_line m b e, on_tline m h b e"

I0123 14:47:20.563621 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m b e, on_tline m h b e ? coll h k j"
I0123 14:47:20.563807 139850290401280 graph.py:498] 
I0123 14:47:20.563862 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m b e, on_tline m h b e ? coll h k j
I0123 14:47:22.595403 139850290401280 ddar.py:60] Depth 1/1000 time = 1.9435889720916748
I0123 14:47:25.606667 139850290401280 ddar.py:60] Depth 2/1000 time = 3.0110514163970947
I0123 14:47:31.569696 139850290401280 ddar.py:60] Depth 3/1000 time = 5.962812900543213
I0123 14:47:36.984845 139850290401280 ddar.py:60] Depth 4/1000 time = 5.414880990982056
I0123 14:47:42.493817 139850290401280 ddar.py:60] Depth 5/1000 time = 5.50866961479187
I0123 14:47:47.890525 139850290401280 ddar.py:60] Depth 6/1000 time = 5.3960864543914795
I0123 14:47:48.002339 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:47:48.002413 139850290401280 alphageometry.py:566] LM output (score=-3.132629): "m : C a j m 17 D a m j m 18 ;"
I0123 14:47:48.002451 139850290401280 alphageometry.py:567] Translation: "m = on_line m a j, on_bline m j a"

I0123 14:47:48.002496 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m a j, on_bline m j a ? coll h k j"
I0123 14:47:48.002665 139850290401280 graph.py:498] 
I0123 14:47:48.002718 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m a j, on_bline m j a ? coll h k j
I0123 14:47:49.303525 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1930983066558838
I0123 14:47:52.407787 139850290401280 ddar.py:60] Depth 2/1000 time = 3.10404634475708
I0123 14:47:58.013712 139850290401280 ddar.py:60] Depth 3/1000 time = 5.605603933334351
I0123 14:48:03.554131 139850290401280 ddar.py:60] Depth 4/1000 time = 5.539981126785278
I0123 14:48:09.065823 139850290401280 ddar.py:60] Depth 5/1000 time = 5.511412858963013
I0123 14:48:14.609488 139850290401280 ddar.py:60] Depth 6/1000 time = 5.543022155761719
I0123 14:48:14.714444 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:48:14.714533 139850290401280 alphageometry.py:566] LM output (score=-3.180627): "m : C b e m 17 T b e d m 18 ;"
I0123 14:48:14.714570 139850290401280 alphageometry.py:567] Translation: "m = on_line m b e, on_tline m d b e"

I0123 14:48:14.714610 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m b e, on_tline m d b e ? coll h k j"
I0123 14:48:14.714778 139850290401280 graph.py:498] 
I0123 14:48:14.714829 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m b e, on_tline m d b e ? coll h k j
I0123 14:48:15.979097 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1716723442077637
I0123 14:48:19.761180 139850290401280 ddar.py:60] Depth 2/1000 time = 3.781748056411743
I0123 14:48:25.246679 139850290401280 ddar.py:60] Depth 3/1000 time = 5.485272407531738
I0123 14:48:30.659253 139850290401280 ddar.py:60] Depth 4/1000 time = 5.412347793579102
I0123 14:48:36.156438 139850290401280 ddar.py:60] Depth 5/1000 time = 5.49684739112854
I0123 14:48:42.001974 139850290401280 ddar.py:60] Depth 6/1000 time = 5.8451526165008545
I0123 14:48:47.824193 139850290401280 ddar.py:60] Depth 7/1000 time = 5.821948528289795
I0123 14:48:54.425139 139850290401280 ddar.py:60] Depth 8/1000 time = 6.600365400314331
I0123 14:49:00.304441 139850290401280 ddar.py:60] Depth 9/1000 time = 5.753305912017822
I0123 14:49:00.304730 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:49:00.304795 139850290401280 alphageometry.py:566] LM output (score=-3.303972): "m : C c g m 17 D c m g m 18 ;"
I0123 14:49:00.304831 139850290401280 alphageometry.py:567] Translation: "m = on_line m c g, on_bline m g c"

I0123 14:49:00.304876 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m c g, on_bline m g c ? coll h k j"
I0123 14:49:00.305047 139850290401280 graph.py:498] 
I0123 14:49:00.305102 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m c g, on_bline m g c ? coll h k j
I0123 14:49:01.605232 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1896543502807617
I0123 14:49:04.887681 139850290401280 ddar.py:60] Depth 2/1000 time = 3.2822511196136475
I0123 14:49:11.560257 139850290401280 ddar.py:60] Depth 3/1000 time = 6.672293424606323
I0123 14:49:17.467073 139850290401280 ddar.py:60] Depth 4/1000 time = 5.906404972076416
I0123 14:49:23.300390 139850290401280 ddar.py:60] Depth 5/1000 time = 5.833030462265015
I0123 14:49:29.166773 139850290401280 ddar.py:60] Depth 6/1000 time = 5.865685939788818
I0123 14:49:29.272729 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:49:29.272879 139850290401280 alphageometry.py:566] LM output (score=-3.312826): "m : C e f m 17 D e m f m 18 ;"
I0123 14:49:29.272919 139850290401280 alphageometry.py:567] Translation: "m = on_line m e f, on_bline m f e"

I0123 14:49:29.272971 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m e f, on_bline m f e ? coll h k j"
I0123 14:49:29.273158 139850290401280 graph.py:498] 
I0123 14:49:29.273212 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m e f, on_bline m f e ? coll h k j
I0123 14:49:30.656428 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2740347385406494
I0123 14:49:34.468049 139850290401280 ddar.py:60] Depth 2/1000 time = 3.8113672733306885
I0123 14:49:40.333087 139850290401280 ddar.py:60] Depth 3/1000 time = 5.864804983139038
I0123 14:49:45.850736 139850290401280 ddar.py:60] Depth 4/1000 time = 5.517394304275513
I0123 14:49:51.435035 139850290401280 ddar.py:60] Depth 5/1000 time = 5.583967685699463
I0123 14:49:57.015791 139850290401280 ddar.py:60] Depth 6/1000 time = 5.580051422119141
I0123 14:49:57.115637 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:49:57.115727 139850290401280 alphageometry.py:566] LM output (score=-3.338856): "m : C a d m 17 D a m d m 18 ;"
I0123 14:49:57.115766 139850290401280 alphageometry.py:567] Translation: "m = on_line m a d, on_bline m d a"

I0123 14:49:57.115808 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m a d, on_bline m d a ? coll h k j"
I0123 14:49:57.115973 139850290401280 graph.py:498] 
I0123 14:49:57.116026 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m a d, on_bline m d a ? coll h k j
I0123 14:49:58.517703 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2928779125213623
I0123 14:50:03.383736 139850290401280 ddar.py:60] Depth 2/1000 time = 4.865825414657593
I0123 14:50:10.668582 139850290401280 ddar.py:60] Depth 3/1000 time = 7.284527778625488
I0123 14:50:16.848469 139850290401280 ddar.py:60] Depth 4/1000 time = 6.179453134536743
I0123 14:50:22.949695 139850290401280 ddar.py:60] Depth 5/1000 time = 6.100941181182861
I0123 14:50:29.122311 139850290401280 ddar.py:60] Depth 6/1000 time = 6.1719794273376465
I0123 14:50:29.236027 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:50:29.236118 139850290401280 alphageometry.py:566] LM output (score=-3.339657): "m : C a j m 17 D a j j m 18 ;"
I0123 14:50:29.236155 139850290401280 alphageometry.py:567] Translation: "m = on_line m a j, on_circle m j a"

I0123 14:50:29.236204 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m a j, on_circle m j a ? coll h k j"
I0123 14:50:29.236378 139850290401280 graph.py:498] 
I0123 14:50:29.236432 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m a j, on_circle m j a ? coll h k j
I0123 14:50:30.819103 139850290401280 ddar.py:60] Depth 1/1000 time = 1.4823479652404785
I0123 14:50:35.478559 139850290401280 ddar.py:60] Depth 2/1000 time = 4.659250497817993
I0123 14:50:42.143288 139850290401280 ddar.py:60] Depth 3/1000 time = 6.664498805999756
I0123 14:50:47.447173 139850290401280 ddar.py:60] Depth 4/1000 time = 5.303540229797363
I0123 14:50:53.482245 139850290401280 ddar.py:60] Depth 5/1000 time = 6.034647703170776
I0123 14:50:59.492236 139850290401280 ddar.py:60] Depth 6/1000 time = 6.009383678436279
I0123 14:50:59.609485 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:50:59.609562 139850290401280 alphageometry.py:566] LM output (score=-3.429508): "m : C c e m 17 D c f f m 18 ;"
I0123 14:50:59.609599 139850290401280 alphageometry.py:567] Translation: "m = on_line m c e, on_circle m f c"

I0123 14:50:59.609645 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m c e, on_circle m f c ? coll h k j"
I0123 14:50:59.609818 139850290401280 graph.py:498] 
I0123 14:50:59.609871 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m c e, on_circle m f c ? coll h k j
I0123 14:51:01.742908 139850290401280 ddar.py:60] Depth 1/1000 time = 2.024846315383911
I0123 14:51:05.185477 139850290401280 ddar.py:60] Depth 2/1000 time = 3.4422836303710938
I0123 14:51:13.257558 139850290401280 ddar.py:60] Depth 3/1000 time = 8.071697235107422
I0123 14:51:19.332225 139850290401280 ddar.py:60] Depth 4/1000 time = 6.074383497238159
I0123 14:51:25.518099 139850290401280 ddar.py:60] Depth 5/1000 time = 6.185567378997803
I0123 14:51:31.662683 139850290401280 ddar.py:60] Depth 6/1000 time = 6.143845796585083
I0123 14:51:31.768304 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:51:31.768390 139850290401280 alphageometry.py:566] LM output (score=-3.445138): "m : C b e m 17 T b e j m 18 ;"
I0123 14:51:31.768428 139850290401280 alphageometry.py:567] Translation: "m = on_line m b e, on_tline m j b e"

I0123 14:51:31.768475 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m b e, on_tline m j b e ? coll h k j"
I0123 14:51:31.768643 139850290401280 graph.py:498] 
I0123 14:51:31.768697 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a c, on_bline l c a; m = on_line m b e, on_tline m j b e ? coll h k j
I0123 14:51:33.015327 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1574618816375732
I0123 14:51:36.266360 139850290401280 ddar.py:60] Depth 2/1000 time = 3.2508256435394287
I0123 14:51:42.284499 139850290401280 ddar.py:60] Depth 3/1000 time = 6.017818212509155
I0123 14:51:47.872289 139850290401280 ddar.py:60] Depth 4/1000 time = 5.587353467941284
I0123 14:51:53.390374 139850290401280 ddar.py:60] Depth 5/1000 time = 5.517803907394409
I0123 14:51:58.994285 139850290401280 ddar.py:60] Depth 6/1000 time = 5.603229284286499
I0123 14:51:59.105389 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:51:59.105513 139850290401280 alphageometry.py:566] LM output (score=-4.207747): "m : C b e m 17 T b e m s 18 ;"
I0123 14:51:59.105550 139850290401280 alphageometry.py:567] Translation: "ERROR: point s does not exist."

I0123 14:51:59.105618 139850290401280 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C b c l 15 D b l c l 16 ; x00
I0123 14:52:08.549356 139850290401280 alphageometry.py:566] LM output (score=-0.420923): "m : C a c m 17 D a m c m 18 ;"
I0123 14:52:08.549566 139850290401280 alphageometry.py:567] Translation: "m = on_line m a c, on_bline m c a"

I0123 14:52:08.549611 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m a c, on_bline m c a ? coll h k j"
I0123 14:52:08.549788 139850290401280 graph.py:498] 
I0123 14:52:08.549844 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m a c, on_bline m c a ? coll h k j
I0123 14:52:09.941370 139850290401280 ddar.py:60] Depth 1/1000 time = 1.277724266052246
I0123 14:52:14.796746 139850290401280 ddar.py:60] Depth 2/1000 time = 4.855138301849365
I0123 14:52:22.516871 139850290401280 ddar.py:60] Depth 3/1000 time = 7.719872951507568
I0123 14:52:29.288005 139850290401280 ddar.py:60] Depth 4/1000 time = 6.770800828933716
I0123 14:52:36.629031 139850290401280 ddar.py:60] Depth 5/1000 time = 7.340608596801758
I0123 14:52:44.049816 139850290401280 ddar.py:60] Depth 6/1000 time = 7.4197869300842285
I0123 14:52:51.222016 139850290401280 ddar.py:60] Depth 7/1000 time = 7.036069393157959
I0123 14:52:51.222311 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:52:51.222373 139850290401280 alphageometry.py:566] LM output (score=-0.917597): "m : C b e m 17 D b m e m 18 ;"
I0123 14:52:51.222409 139850290401280 alphageometry.py:567] Translation: "m = on_line m b e, on_bline m e b"

I0123 14:52:51.222459 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m b e, on_bline m e b ? coll h k j"
I0123 14:52:51.222644 139850290401280 graph.py:498] 
I0123 14:52:51.222700 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m b e, on_bline m e b ? coll h k j
I0123 14:52:52.671543 139850290401280 ddar.py:60] Depth 1/1000 time = 1.339383602142334
I0123 14:52:57.650096 139850290401280 ddar.py:60] Depth 2/1000 time = 4.978345155715942
I0123 14:53:05.333101 139850290401280 ddar.py:60] Depth 3/1000 time = 7.682745456695557
I0123 14:53:12.127499 139850290401280 ddar.py:60] Depth 4/1000 time = 6.793933868408203
I0123 14:53:19.455168 139850290401280 ddar.py:60] Depth 5/1000 time = 7.327180862426758
I0123 14:53:26.749710 139850290401280 ddar.py:60] Depth 6/1000 time = 7.293764352798462
I0123 14:53:34.012308 139850290401280 ddar.py:60] Depth 7/1000 time = 7.120842456817627
I0123 14:53:34.012586 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:53:34.012644 139850290401280 alphageometry.py:566] LM output (score=-1.093376): "m : C c e m 17 D c m e m 18 ;"
I0123 14:53:34.012681 139850290401280 alphageometry.py:567] Translation: "m = on_line m c e, on_bline m e c"

I0123 14:53:34.012726 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m c e, on_bline m e c ? coll h k j"
I0123 14:53:34.012902 139850290401280 graph.py:498] 
I0123 14:53:34.012958 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m c e, on_bline m e c ? coll h k j
I0123 14:53:35.433683 139850290401280 ddar.py:60] Depth 1/1000 time = 1.3074586391448975
I0123 14:53:39.950231 139850290401280 ddar.py:60] Depth 2/1000 time = 4.51611852645874
I0123 14:53:47.524909 139850290401280 ddar.py:60] Depth 3/1000 time = 7.574341058731079
I0123 14:53:55.037029 139850290401280 ddar.py:60] Depth 4/1000 time = 7.511612415313721
I0123 14:54:02.372097 139850290401280 ddar.py:60] Depth 5/1000 time = 7.334749460220337
I0123 14:54:09.766841 139850290401280 ddar.py:60] Depth 6/1000 time = 7.3939173221588135
I0123 14:54:09.900795 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:54:09.900921 139850290401280 alphageometry.py:566] LM output (score=-1.717108): "m : C a b m 17 D a m b m 18 ;"
I0123 14:54:09.900981 139850290401280 alphageometry.py:567] Translation: "m = on_line m a b, on_bline m b a"

I0123 14:54:09.901039 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m a b, on_bline m b a ? coll h k j"
I0123 14:54:09.901225 139850290401280 graph.py:498] 
I0123 14:54:09.901280 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m a b, on_bline m b a ? coll h k j
I0123 14:54:12.110325 139850290401280 ddar.py:60] Depth 1/1000 time = 2.099921703338623
I0123 14:54:15.551670 139850290401280 ddar.py:60] Depth 2/1000 time = 3.4411237239837646
I0123 14:54:23.709460 139850290401280 ddar.py:60] Depth 3/1000 time = 8.157533168792725
I0123 14:54:30.417490 139850290401280 ddar.py:60] Depth 4/1000 time = 6.707726001739502
I0123 14:54:37.194031 139850290401280 ddar.py:60] Depth 5/1000 time = 6.776215553283691
I0123 14:54:43.920021 139850290401280 ddar.py:60] Depth 6/1000 time = 6.725262403488159
I0123 14:54:44.058119 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:54:44.058194 139850290401280 alphageometry.py:566] LM output (score=-1.876952): "m : C b f m 17 D b m f m 18 ;"
I0123 14:54:44.058231 139850290401280 alphageometry.py:567] Translation: "m = on_line m b f, on_bline m f b"

I0123 14:54:44.058273 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m b f, on_bline m f b ? coll h k j"
I0123 14:54:44.058447 139850290401280 graph.py:498] 
I0123 14:54:44.058500 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m b f, on_bline m f b ? coll h k j
I0123 14:54:45.432384 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2641286849975586
I0123 14:54:49.368134 139850290401280 ddar.py:60] Depth 2/1000 time = 3.935537338256836
I0123 14:54:55.525935 139850290401280 ddar.py:60] Depth 3/1000 time = 6.1575586795806885
I0123 14:55:01.309432 139850290401280 ddar.py:60] Depth 4/1000 time = 5.783207893371582
I0123 14:55:07.223420 139850290401280 ddar.py:60] Depth 5/1000 time = 5.9137187004089355
I0123 14:55:13.137058 139850290401280 ddar.py:60] Depth 6/1000 time = 5.9130284786224365
I0123 14:55:13.252956 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:55:13.253025 139850290401280 alphageometry.py:566] LM output (score=-1.968559): "m : C c f m 17 D c m f m 18 ;"
I0123 14:55:13.253061 139850290401280 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 14:55:13.253102 139850290401280 alphageometry.py:566] LM output (score=-2.008921): "m : C a e m 17 D a m e m 18 ;"
I0123 14:55:13.253128 139850290401280 alphageometry.py:567] Translation: "m = on_line m a e, on_bline m e a"

I0123 14:55:13.253159 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m a e, on_bline m e a ? coll h k j"
I0123 14:55:13.253341 139850290401280 graph.py:498] 
I0123 14:55:13.253393 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m a e, on_bline m e a ? coll h k j
I0123 14:55:14.644678 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2827959060668945
I0123 14:55:18.278956 139850290401280 ddar.py:60] Depth 2/1000 time = 3.634068012237549
I0123 14:55:24.779807 139850290401280 ddar.py:60] Depth 3/1000 time = 6.500607252120972
I0123 14:55:31.255756 139850290401280 ddar.py:60] Depth 4/1000 time = 6.475538492202759
I0123 14:55:38.082184 139850290401280 ddar.py:60] Depth 5/1000 time = 6.825976371765137
I0123 14:55:44.897431 139850290401280 ddar.py:60] Depth 6/1000 time = 6.814946413040161
I0123 14:55:51.738410 139850290401280 ddar.py:60] Depth 7/1000 time = 6.840125560760498
I0123 14:55:58.417351 139850290401280 ddar.py:60] Depth 8/1000 time = 6.54728364944458
I0123 14:55:58.417635 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:55:58.417703 139850290401280 alphageometry.py:566] LM output (score=-2.285475): "m : C c f m 17 D c f f m 18 ;"
I0123 14:55:58.417738 139850290401280 alphageometry.py:567] Translation: "m = on_line m c f, on_circle m f c"

I0123 14:55:58.417783 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m c f, on_circle m f c ? coll h k j"
I0123 14:55:58.417960 139850290401280 graph.py:498] 
I0123 14:55:58.418015 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m c f, on_circle m f c ? coll h k j
I0123 14:56:00.601434 139850290401280 ddar.py:60] Depth 1/1000 time = 2.0747742652893066
I0123 14:56:03.967592 139850290401280 ddar.py:60] Depth 2/1000 time = 3.365945816040039
I0123 14:56:10.445038 139850290401280 ddar.py:60] Depth 3/1000 time = 6.47698974609375
I0123 14:56:16.368479 139850290401280 ddar.py:60] Depth 4/1000 time = 5.923084259033203
I0123 14:56:22.292453 139850290401280 ddar.py:60] Depth 5/1000 time = 5.923735618591309
I0123 14:56:28.288146 139850290401280 ddar.py:60] Depth 6/1000 time = 5.994993686676025
I0123 14:56:28.394421 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:56:28.394515 139850290401280 alphageometry.py:566] LM output (score=-2.403000): "m : C c f m 17 D c f c m 18 ;"
I0123 14:56:28.394553 139850290401280 alphageometry.py:567] Translation: "m = on_line m c f, on_circle m c f"

I0123 14:56:28.394610 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m c f, on_circle m c f ? coll h k j"
I0123 14:56:28.394793 139850290401280 graph.py:498] 
I0123 14:56:28.394845 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m c f, on_circle m c f ? coll h k j
I0123 14:56:30.595349 139850290401280 ddar.py:60] Depth 1/1000 time = 2.0909175872802734
I0123 14:56:33.517661 139850290401280 ddar.py:60] Depth 2/1000 time = 2.9220845699310303
I0123 14:56:39.327618 139850290401280 ddar.py:60] Depth 3/1000 time = 5.809734344482422
I0123 14:56:44.818301 139850290401280 ddar.py:60] Depth 4/1000 time = 5.490374565124512
I0123 14:56:50.265026 139850290401280 ddar.py:60] Depth 5/1000 time = 5.446317672729492
I0123 14:56:54.863657 139850290401280 ddar.py:60] Depth 6/1000 time = 4.597961664199829
I0123 14:56:54.967077 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:56:54.967174 139850290401280 alphageometry.py:566] LM output (score=-2.495940): "m : C c f m 17 T c f d m 18 ;"
I0123 14:56:54.967211 139850290401280 alphageometry.py:567] Translation: "m = on_line m c f, on_tline m d c f"

I0123 14:56:54.967252 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m c f, on_tline m d c f ? coll h k j"
I0123 14:56:54.967422 139850290401280 graph.py:498] 
I0123 14:56:54.967477 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m c f, on_tline m d c f ? coll h k j
I0123 14:56:57.092112 139850290401280 ddar.py:60] Depth 1/1000 time = 2.0373494625091553
I0123 14:57:00.318581 139850290401280 ddar.py:60] Depth 2/1000 time = 3.2262680530548096
I0123 14:57:09.364892 139850290401280 ddar.py:60] Depth 3/1000 time = 9.046069383621216
I0123 14:57:16.921855 139850290401280 ddar.py:60] Depth 4/1000 time = 7.556651830673218
I0123 14:57:24.553620 139850290401280 ddar.py:60] Depth 5/1000 time = 7.631365060806274
I0123 14:57:32.182642 139850290401280 ddar.py:60] Depth 6/1000 time = 7.6280999183654785
I0123 14:57:32.324383 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:57:32.324511 139850290401280 alphageometry.py:566] LM output (score=-2.518880): "m : C a d m 17 D a d d m 18 ;"
I0123 14:57:32.324553 139850290401280 alphageometry.py:567] Translation: "m = on_line m a d, on_circle m d a"

I0123 14:57:32.324598 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m a d, on_circle m d a ? coll h k j"
I0123 14:57:32.324772 139850290401280 graph.py:498] 
I0123 14:57:32.324827 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m a d, on_circle m d a ? coll h k j
I0123 14:57:34.186503 139850290401280 ddar.py:60] Depth 1/1000 time = 1.7612099647521973
I0123 14:57:41.979036 139850290401280 ddar.py:60] Depth 2/1000 time = 7.792238235473633
I0123 14:57:50.632184 139850290401280 ddar.py:60] Depth 3/1000 time = 8.652733325958252
I0123 14:57:58.677810 139850290401280 ddar.py:60] Depth 4/1000 time = 8.04524302482605
I0123 14:58:06.824813 139850290401280 ddar.py:60] Depth 5/1000 time = 8.146575689315796
I0123 14:58:14.882856 139850290401280 ddar.py:60] Depth 6/1000 time = 8.05727744102478
I0123 14:58:15.034045 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:58:15.034178 139850290401280 alphageometry.py:566] LM output (score=-2.561099): "m : C a g m 17 D a g g m 18 ;"
I0123 14:58:15.034219 139850290401280 alphageometry.py:567] Translation: "m = on_line m a g, on_circle m g a"

I0123 14:58:15.034267 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m a g, on_circle m g a ? coll h k j"
I0123 14:58:15.034475 139850290401280 graph.py:498] 
I0123 14:58:15.034531 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m a g, on_circle m g a ? coll h k j
I0123 14:58:16.485970 139850290401280 ddar.py:60] Depth 1/1000 time = 1.3504765033721924
I0123 14:58:21.117603 139850290401280 ddar.py:60] Depth 2/1000 time = 4.631345272064209
I0123 14:58:27.105041 139850290401280 ddar.py:60] Depth 3/1000 time = 5.9872260093688965
I0123 14:58:33.113114 139850290401280 ddar.py:60] Depth 4/1000 time = 6.007833003997803
I0123 14:58:39.199570 139850290401280 ddar.py:60] Depth 5/1000 time = 6.086196184158325
I0123 14:58:45.238083 139850290401280 ddar.py:60] Depth 6/1000 time = 6.037933349609375
I0123 14:58:45.357352 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:58:45.357424 139850290401280 alphageometry.py:566] LM output (score=-2.562442): "m : C a d m 17 D a m d m 18 ;"
I0123 14:58:45.357460 139850290401280 alphageometry.py:567] Translation: "m = on_line m a d, on_bline m d a"

I0123 14:58:45.357503 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m a d, on_bline m d a ? coll h k j"
I0123 14:58:45.357681 139850290401280 graph.py:498] 
I0123 14:58:45.357736 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m a d, on_bline m d a ? coll h k j
I0123 14:58:46.744056 139850290401280 ddar.py:60] Depth 1/1000 time = 1.278083086013794
I0123 14:58:49.950700 139850290401280 ddar.py:60] Depth 2/1000 time = 3.2064497470855713
I0123 14:58:55.836867 139850290401280 ddar.py:60] Depth 3/1000 time = 5.885884046554565
I0123 14:59:01.923595 139850290401280 ddar.py:60] Depth 4/1000 time = 6.086359262466431
I0123 14:59:08.000857 139850290401280 ddar.py:60] Depth 5/1000 time = 6.077052593231201
I0123 14:59:14.168982 139850290401280 ddar.py:60] Depth 6/1000 time = 6.167578458786011
I0123 14:59:14.280775 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:59:14.280868 139850290401280 alphageometry.py:566] LM output (score=-2.762602): "m : C d e m 17 D d m e m 18 ;"
I0123 14:59:14.280905 139850290401280 alphageometry.py:567] Translation: "m = on_line m d e, on_bline m e d"

I0123 14:59:14.280963 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m d e, on_bline m e d ? coll h k j"
I0123 14:59:14.281151 139850290401280 graph.py:498] 
I0123 14:59:14.281203 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m d e, on_bline m e d ? coll h k j
I0123 14:59:15.665518 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2755990028381348
I0123 14:59:19.016473 139850290401280 ddar.py:60] Depth 2/1000 time = 3.350743532180786
I0123 14:59:25.190573 139850290401280 ddar.py:60] Depth 3/1000 time = 6.173866033554077
I0123 14:59:30.810453 139850290401280 ddar.py:60] Depth 4/1000 time = 5.619582653045654
I0123 14:59:35.489401 139850290401280 ddar.py:60] Depth 5/1000 time = 4.6785666942596436
I0123 14:59:41.100025 139850290401280 ddar.py:60] Depth 6/1000 time = 5.610047817230225
I0123 14:59:41.213832 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:59:41.213904 139850290401280 alphageometry.py:566] LM output (score=-2.764223): "m : C b d m 17 D b d d m 18 ;"
I0123 14:59:41.213941 139850290401280 alphageometry.py:567] Translation: "m = on_line m b d, on_circle m d b"

I0123 14:59:41.213984 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m b d, on_circle m d b ? coll h k j"
I0123 14:59:41.214144 139850290401280 graph.py:498] 
I0123 14:59:41.214197 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m b d, on_circle m d b ? coll h k j
I0123 14:59:42.773121 139850290401280 ddar.py:60] Depth 1/1000 time = 1.458198070526123
I0123 14:59:48.925385 139850290401280 ddar.py:60] Depth 2/1000 time = 6.152000427246094
I0123 14:59:57.882222 139850290401280 ddar.py:60] Depth 3/1000 time = 8.956472396850586
I0123 15:00:05.760939 139850290401280 ddar.py:60] Depth 4/1000 time = 7.878444194793701
I0123 15:00:13.667770 139850290401280 ddar.py:60] Depth 5/1000 time = 7.90659236907959
I0123 15:00:21.492519 139850290401280 ddar.py:60] Depth 6/1000 time = 7.824026107788086
I0123 15:00:21.643959 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:00:21.644051 139850290401280 alphageometry.py:566] LM output (score=-2.961075): "m : C b g m 17 D b m g m 18 ;"
I0123 15:00:21.644088 139850290401280 alphageometry.py:567] Translation: "m = on_line m b g, on_bline m g b"

I0123 15:00:21.644133 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m b g, on_bline m g b ? coll h k j"
I0123 15:00:21.644299 139850290401280 graph.py:498] 
I0123 15:00:21.644352 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m b g, on_bline m g b ? coll h k j
I0123 15:00:22.975881 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2240452766418457
I0123 15:00:26.202989 139850290401280 ddar.py:60] Depth 2/1000 time = 3.226851224899292
I0123 15:00:33.272377 139850290401280 ddar.py:60] Depth 3/1000 time = 7.069070339202881
I0123 15:00:39.253893 139850290401280 ddar.py:60] Depth 4/1000 time = 5.981314659118652
I0123 15:00:44.326168 139850290401280 ddar.py:60] Depth 5/1000 time = 5.071779727935791
I0123 15:00:50.342052 139850290401280 ddar.py:60] Depth 6/1000 time = 6.015098810195923
I0123 15:00:50.450565 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:00:50.450638 139850290401280 alphageometry.py:566] LM output (score=-3.016130): "m : C c g m 17 D c m g m 18 ;"
I0123 15:00:50.450675 139850290401280 alphageometry.py:567] Translation: "m = on_line m c g, on_bline m g c"

I0123 15:00:50.450720 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m c g, on_bline m g c ? coll h k j"
I0123 15:00:50.450907 139850290401280 graph.py:498] 
I0123 15:00:50.450960 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m c g, on_bline m g c ? coll h k j
I0123 15:00:51.741519 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1836109161376953
I0123 15:00:55.720581 139850290401280 ddar.py:60] Depth 2/1000 time = 3.9788663387298584
I0123 15:01:01.190157 139850290401280 ddar.py:60] Depth 3/1000 time = 5.469378471374512
I0123 15:01:06.818622 139850290401280 ddar.py:60] Depth 4/1000 time = 5.6281898021698
I0123 15:01:12.429531 139850290401280 ddar.py:60] Depth 5/1000 time = 5.610596656799316
I0123 15:01:17.097767 139850290401280 ddar.py:60] Depth 6/1000 time = 4.667728662490845
I0123 15:01:17.204263 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:01:17.204338 139850290401280 alphageometry.py:566] LM output (score=-3.100866): "m : C c g m 17 D c g g m 18 ;"
I0123 15:01:17.204373 139850290401280 alphageometry.py:567] Translation: "m = on_line m c g, on_circle m g c"

I0123 15:01:17.204415 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m c g, on_circle m g c ? coll h k j"
I0123 15:01:17.204578 139850290401280 graph.py:498] 
I0123 15:01:17.204630 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m c g, on_circle m g c ? coll h k j
I0123 15:01:18.834214 139850290401280 ddar.py:60] Depth 1/1000 time = 1.5292482376098633
I0123 15:01:23.618400 139850290401280 ddar.py:60] Depth 2/1000 time = 4.783904314041138
I0123 15:01:30.683442 139850290401280 ddar.py:60] Depth 3/1000 time = 7.0646820068359375
I0123 15:01:36.658181 139850290401280 ddar.py:60] Depth 4/1000 time = 5.974536657333374
I0123 15:01:43.597910 139850290401280 ddar.py:60] Depth 5/1000 time = 6.939417839050293
I0123 15:01:50.521273 139850290401280 ddar.py:60] Depth 6/1000 time = 6.9225172996521
I0123 15:01:50.641403 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:01:50.641474 139850290401280 alphageometry.py:566] LM output (score=-3.103433): "m : C d g m 17 D d g g m 18 ;"
I0123 15:01:50.641511 139850290401280 alphageometry.py:567] Translation: "m = on_line m d g, on_circle m g d"

I0123 15:01:50.641554 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m d g, on_circle m g d ? coll h k j"
I0123 15:01:50.641737 139850290401280 graph.py:498] 
I0123 15:01:50.641792 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m d g, on_circle m g d ? coll h k j
I0123 15:01:52.245083 139850290401280 ddar.py:60] Depth 1/1000 time = 1.5034337043762207
I0123 15:01:57.083009 139850290401280 ddar.py:60] Depth 2/1000 time = 4.837737560272217
I0123 15:02:04.488880 139850290401280 ddar.py:60] Depth 3/1000 time = 7.405632019042969
I0123 15:02:09.790383 139850290401280 ddar.py:60] Depth 4/1000 time = 5.301234483718872
I0123 15:02:16.064842 139850290401280 ddar.py:60] Depth 5/1000 time = 6.274218320846558
I0123 15:02:22.429483 139850290401280 ddar.py:60] Depth 6/1000 time = 6.364035606384277
I0123 15:02:22.548849 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:02:22.548920 139850290401280 alphageometry.py:566] LM output (score=-3.195990): "m : C e f m 17 D e m f m 18 ;"
I0123 15:02:22.548956 139850290401280 alphageometry.py:567] Translation: "m = on_line m e f, on_bline m f e"

I0123 15:02:22.549001 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m e f, on_bline m f e ? coll h k j"
I0123 15:02:22.549168 139850290401280 graph.py:498] 
I0123 15:02:22.549220 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m e f, on_bline m f e ? coll h k j
I0123 15:02:23.913671 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2532198429107666
I0123 15:02:27.953581 139850290401280 ddar.py:60] Depth 2/1000 time = 4.039697647094727
I0123 15:02:33.157415 139850290401280 ddar.py:60] Depth 3/1000 time = 5.203615665435791
I0123 15:02:38.868326 139850290401280 ddar.py:60] Depth 4/1000 time = 5.7106263637542725
I0123 15:02:44.578618 139850290401280 ddar.py:60] Depth 5/1000 time = 5.709884881973267
I0123 15:02:50.242226 139850290401280 ddar.py:60] Depth 6/1000 time = 5.663041114807129
I0123 15:02:50.346147 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:02:50.346217 139850290401280 alphageometry.py:566] LM output (score=-3.233988): "m : C f g m 17 D f m g m 18 ;"
I0123 15:02:50.346253 139850290401280 alphageometry.py:567] Translation: "m = on_line m f g, on_bline m g f"

I0123 15:02:50.346295 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m f g, on_bline m g f ? coll h k j"
I0123 15:02:50.346463 139850290401280 graph.py:498] 
I0123 15:02:50.346513 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m f g, on_bline m g f ? coll h k j
I0123 15:02:51.661002 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2076079845428467
I0123 15:02:54.807383 139850290401280 ddar.py:60] Depth 2/1000 time = 3.146129846572876
I0123 15:03:01.301656 139850290401280 ddar.py:60] Depth 3/1000 time = 6.493939399719238
I0123 15:03:07.202719 139850290401280 ddar.py:60] Depth 4/1000 time = 5.900837659835815
I0123 15:03:12.167154 139850290401280 ddar.py:60] Depth 5/1000 time = 4.964157581329346
I0123 15:03:18.225213 139850290401280 ddar.py:60] Depth 6/1000 time = 6.057347774505615
I0123 15:03:18.332439 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:03:18.332515 139850290401280 alphageometry.py:566] LM output (score=-3.237854): "m : C f h m 17 D f m h m 18 ;"
I0123 15:03:18.332552 139850290401280 alphageometry.py:567] Translation: "m = on_line m f h, on_bline m h f"

I0123 15:03:18.332595 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m f h, on_bline m h f ? coll h k j"
I0123 15:03:18.332782 139850290401280 graph.py:498] 
I0123 15:03:18.332839 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m f h, on_bline m h f ? coll h k j
I0123 15:03:19.639542 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1985516548156738
I0123 15:03:22.540972 139850290401280 ddar.py:60] Depth 2/1000 time = 2.9012413024902344
I0123 15:03:28.732213 139850290401280 ddar.py:60] Depth 3/1000 time = 6.191038370132446
I0123 15:03:34.032253 139850290401280 ddar.py:60] Depth 4/1000 time = 5.299734592437744
I0123 15:03:38.284306 139850290401280 ddar.py:60] Depth 5/1000 time = 4.25163722038269
I0123 15:03:43.572076 139850290401280 ddar.py:60] Depth 6/1000 time = 5.28723669052124
I0123 15:03:43.677428 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:03:43.677503 139850290401280 alphageometry.py:566] LM output (score=-3.292606): "m : C g i m 17 T c m g i 18 ;"
I0123 15:03:43.677541 139850290401280 alphageometry.py:567] Translation: "m = on_line m g i, on_tline m c g i"

I0123 15:03:43.677587 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m g i, on_tline m c g i ? coll h k j"
I0123 15:03:43.677762 139850290401280 graph.py:498] 
I0123 15:03:43.677817 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m g i, on_tline m c g i ? coll h k j
I0123 15:03:44.982353 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2173001766204834
I0123 15:03:48.197985 139850290401280 ddar.py:60] Depth 2/1000 time = 3.2154204845428467
I0123 15:03:56.124600 139850290401280 ddar.py:60] Depth 3/1000 time = 7.926374673843384
I0123 15:04:02.301509 139850290401280 ddar.py:60] Depth 4/1000 time = 6.176626443862915
I0123 15:04:07.419510 139850290401280 ddar.py:60] Depth 5/1000 time = 5.117730379104614
I0123 15:04:13.553116 139850290401280 ddar.py:60] Depth 6/1000 time = 6.13299560546875
I0123 15:04:13.674497 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:04:13.674585 139850290401280 alphageometry.py:566] LM output (score=-3.311047): "m : C a b m 17 D a f f m 18 ;"
I0123 15:04:13.674622 139850290401280 alphageometry.py:567] Translation: "m = on_line m a b, on_circle m f a"

I0123 15:04:13.674669 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m a b, on_circle m f a ? coll h k j"
I0123 15:04:13.674841 139850290401280 graph.py:498] 
I0123 15:04:13.674896 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m a b, on_circle m f a ? coll h k j
I0123 15:04:16.058471 139850290401280 ddar.py:60] Depth 1/1000 time = 2.276261568069458
I0123 15:04:19.383098 139850290401280 ddar.py:60] Depth 2/1000 time = 3.324431896209717
I0123 15:04:26.621038 139850290401280 ddar.py:60] Depth 3/1000 time = 7.23774266242981
I0123 15:04:32.601565 139850290401280 ddar.py:60] Depth 4/1000 time = 5.980260610580444
I0123 15:04:37.561281 139850290401280 ddar.py:60] Depth 5/1000 time = 4.9594104290008545
I0123 15:04:43.418497 139850290401280 ddar.py:60] Depth 6/1000 time = 5.856567859649658
I0123 15:04:49.174428 139850290401280 ddar.py:60] Depth 7/1000 time = 5.6482203006744385
I0123 15:04:55.186408 139850290401280 ddar.py:60] Depth 8/1000 time = 6.011664152145386
I0123 15:05:00.222912 139850290401280 ddar.py:60] Depth 9/1000 time = 5.027586936950684
I0123 15:05:00.223177 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:05:00.223230 139850290401280 alphageometry.py:566] LM output (score=-3.319268): "m : C a l m 17 D a l l m 18 ;"
I0123 15:05:00.223265 139850290401280 alphageometry.py:567] Translation: "m = on_line m a l, on_circle m l a"

I0123 15:05:00.223309 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m a l, on_circle m l a ? coll h k j"
I0123 15:05:00.223470 139850290401280 graph.py:498] 
I0123 15:05:00.223524 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m a l, on_circle m l a ? coll h k j
I0123 15:05:02.600756 139850290401280 ddar.py:60] Depth 1/1000 time = 2.2697272300720215
I0123 15:05:05.966041 139850290401280 ddar.py:60] Depth 2/1000 time = 3.365004301071167
I0123 15:05:13.218802 139850290401280 ddar.py:60] Depth 3/1000 time = 7.252393960952759
I0123 15:05:18.392093 139850290401280 ddar.py:60] Depth 4/1000 time = 5.173039436340332
I0123 15:05:24.491101 139850290401280 ddar.py:60] Depth 5/1000 time = 6.09867262840271
I0123 15:05:30.691709 139850290401280 ddar.py:60] Depth 6/1000 time = 6.199807405471802
I0123 15:05:30.820014 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:05:30.820086 139850290401280 alphageometry.py:566] LM output (score=-3.355947): "m : C a g m 17 T a g d m 18 ;"
I0123 15:05:30.820123 139850290401280 alphageometry.py:567] Translation: "m = on_line m a g, on_tline m d a g"

I0123 15:05:30.820165 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m a g, on_tline m d a g ? coll h k j"
I0123 15:05:30.820327 139850290401280 graph.py:498] 
I0123 15:05:30.820378 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m a g, on_tline m d a g ? coll h k j
I0123 15:05:32.061372 139850290401280 ddar.py:60] Depth 1/1000 time = 1.152458667755127
I0123 15:05:35.344939 139850290401280 ddar.py:60] Depth 2/1000 time = 3.283372402191162
I0123 15:05:43.297211 139850290401280 ddar.py:60] Depth 3/1000 time = 7.95197319984436
I0123 15:05:49.449105 139850290401280 ddar.py:60] Depth 4/1000 time = 6.151478290557861
I0123 15:05:54.410032 139850290401280 ddar.py:60] Depth 5/1000 time = 4.960663080215454
I0123 15:06:00.427764 139850290401280 ddar.py:60] Depth 6/1000 time = 6.017007350921631
I0123 15:06:00.554030 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:06:00.554135 139850290401280 alphageometry.py:566] LM output (score=-3.366326): "m : C b i m 17 D b m i m 18 ;"
I0123 15:06:00.554172 139850290401280 alphageometry.py:567] Translation: "m = on_line m b i, on_bline m i b"

I0123 15:06:00.554225 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m b i, on_bline m i b ? coll h k j"
I0123 15:06:00.554430 139850290401280 graph.py:498] 
I0123 15:06:00.554486 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m b i, on_bline m i b ? coll h k j
I0123 15:06:01.864915 139850290401280 ddar.py:60] Depth 1/1000 time = 1.202225685119629
I0123 15:06:04.961569 139850290401280 ddar.py:60] Depth 2/1000 time = 3.0964341163635254
I0123 15:06:11.664185 139850290401280 ddar.py:60] Depth 3/1000 time = 6.702375888824463
I0123 15:06:16.330533 139850290401280 ddar.py:60] Depth 4/1000 time = 4.666107416152954
I0123 15:06:22.027549 139850290401280 ddar.py:60] Depth 5/1000 time = 5.696721315383911
I0123 15:06:27.751162 139850290401280 ddar.py:60] Depth 6/1000 time = 5.722965478897095
I0123 15:06:27.859137 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:06:27.859207 139850290401280 alphageometry.py:566] LM output (score=-3.382234): "m : C a d m 17 D a c c m 18 ;"
I0123 15:06:27.859245 139850290401280 alphageometry.py:567] Translation: "m = on_line m a d, on_circle m c a"

I0123 15:06:27.859288 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m a d, on_circle m c a ? coll h k j"
I0123 15:06:27.859457 139850290401280 graph.py:498] 
I0123 15:06:27.859509 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m a d, on_circle m c a ? coll h k j
I0123 15:06:29.197085 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2305505275726318
I0123 15:06:32.432332 139850290401280 ddar.py:60] Depth 2/1000 time = 3.2350471019744873
I0123 15:06:39.587851 139850290401280 ddar.py:60] Depth 3/1000 time = 7.155209302902222
I0123 15:06:44.917506 139850290401280 ddar.py:60] Depth 4/1000 time = 5.329228401184082
I0123 15:06:51.328444 139850290401280 ddar.py:60] Depth 5/1000 time = 6.41065788269043
I0123 15:06:57.738131 139850290401280 ddar.py:60] Depth 6/1000 time = 6.4089531898498535
I0123 15:06:57.865427 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:06:57.865538 139850290401280 alphageometry.py:566] LM output (score=-3.397717): "m : C c d m 17 D c d d m 18 ;"
I0123 15:06:57.865575 139850290401280 alphageometry.py:567] Translation: "m = on_line m c d, on_circle m d c"

I0123 15:06:57.865638 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m c d, on_circle m d c ? coll h k j"
I0123 15:06:57.865843 139850290401280 graph.py:498] 
I0123 15:06:57.865901 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m c d, on_circle m d c ? coll h k j
I0123 15:06:59.717869 139850290401280 ddar.py:60] Depth 1/1000 time = 1.749284029006958
I0123 15:07:04.258407 139850290401280 ddar.py:60] Depth 2/1000 time = 4.540329933166504
I0123 15:07:13.011698 139850290401280 ddar.py:60] Depth 3/1000 time = 8.753022909164429
I0123 15:07:21.078551 139850290401280 ddar.py:60] Depth 4/1000 time = 8.066524505615234
I0123 15:07:29.150184 139850290401280 ddar.py:60] Depth 5/1000 time = 8.071325302124023
I0123 15:07:37.266887 139850290401280 ddar.py:60] Depth 6/1000 time = 8.115873336791992
I0123 15:07:37.416073 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:07:37.416178 139850290401280 alphageometry.py:566] LM output (score=-3.426990): "m : C b e m 17 T b e i m 18 ;"
I0123 15:07:37.416214 139850290401280 alphageometry.py:567] Translation: "m = on_line m b e, on_tline m i b e"

I0123 15:07:37.416275 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m b e, on_tline m i b e ? coll h k j"
I0123 15:07:37.416467 139850290401280 graph.py:498] 
I0123 15:07:37.416522 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m b e, on_tline m i b e ? coll h k j
I0123 15:07:38.674503 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1695690155029297
I0123 15:07:43.019663 139850290401280 ddar.py:60] Depth 2/1000 time = 4.344951868057251
I0123 15:07:48.961844 139850290401280 ddar.py:60] Depth 3/1000 time = 5.941954135894775
I0123 15:07:55.898560 139850290401280 ddar.py:60] Depth 4/1000 time = 6.936440467834473
I0123 15:08:02.806311 139850290401280 ddar.py:60] Depth 5/1000 time = 6.907444715499878
I0123 15:08:10.291766 139850290401280 ddar.py:60] Depth 6/1000 time = 7.4850990772247314
I0123 15:08:16.690442 139850290401280 ddar.py:60] Depth 7/1000 time = 6.3978111743927
I0123 15:08:24.042755 139850290401280 ddar.py:60] Depth 8/1000 time = 7.208023548126221
I0123 15:08:24.043036 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:08:24.043096 139850290401280 alphageometry.py:566] LM output (score=-3.597950): "m : C d e m 17 T d e i m 18 ;"
I0123 15:08:24.043132 139850290401280 alphageometry.py:567] Translation: "m = on_line m d e, on_tline m i d e"

I0123 15:08:24.043177 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m d e, on_tline m i d e ? coll h k j"
I0123 15:08:24.043352 139850290401280 graph.py:498] 
I0123 15:08:24.043408 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m d e, on_tline m i d e ? coll h k j
I0123 15:08:25.297728 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1672804355621338
I0123 15:08:29.423350 139850290401280 ddar.py:60] Depth 2/1000 time = 4.1253533363342285
I0123 15:08:35.434164 139850290401280 ddar.py:60] Depth 3/1000 time = 6.010438680648804
I0123 15:08:40.263995 139850290401280 ddar.py:60] Depth 4/1000 time = 4.829583644866943
I0123 15:08:46.218128 139850290401280 ddar.py:60] Depth 5/1000 time = 5.953873634338379
I0123 15:08:52.257565 139850290401280 ddar.py:60] Depth 6/1000 time = 6.039008855819702
I0123 15:08:52.375199 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:08:52.375268 139850290401280 alphageometry.py:566] LM output (score=-3.629258): "m : C d e m 17 T d e j m 18 ;"
I0123 15:08:52.375305 139850290401280 alphageometry.py:567] Translation: "m = on_line m d e, on_tline m j d e"

I0123 15:08:52.375363 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m d e, on_tline m j d e ? coll h k j"
I0123 15:08:52.375526 139850290401280 graph.py:498] 
I0123 15:08:52.375580 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b c, on_bline l c b; m = on_line m d e, on_tline m j d e ? coll h k j
I0123 15:08:53.669758 139850290401280 ddar.py:60] Depth 1/1000 time = 1.202761173248291
I0123 15:08:57.053736 139850290401280 ddar.py:60] Depth 2/1000 time = 3.3837850093841553
I0123 15:09:04.324548 139850290401280 ddar.py:60] Depth 3/1000 time = 7.270585298538208
I0123 15:09:09.719186 139850290401280 ddar.py:60] Depth 4/1000 time = 5.394287586212158
I0123 15:09:16.277992 139850290401280 ddar.py:60] Depth 5/1000 time = 6.55836820602417
I0123 15:09:22.773748 139850290401280 ddar.py:60] Depth 6/1000 time = 6.495108366012573
I0123 15:09:22.891756 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:09:22.891880 139850290401280 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C a e l 15 D a l e l 16 ; x00
I0123 15:09:31.408194 139850290401280 alphageometry.py:566] LM output (score=-0.612650): "m : C a c m 17 D a m c m 18 ;"
I0123 15:09:31.408521 139850290401280 alphageometry.py:567] Translation: "m = on_line m a c, on_bline m c a"

I0123 15:09:31.408585 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m a c, on_bline m c a ? coll h k j"
I0123 15:09:31.408766 139850290401280 graph.py:498] 
I0123 15:09:31.408823 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m a c, on_bline m c a ? coll h k j
I0123 15:09:32.808045 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2937216758728027
I0123 15:09:38.011417 139850290401280 ddar.py:60] Depth 2/1000 time = 5.203158617019653
I0123 15:09:44.674296 139850290401280 ddar.py:60] Depth 3/1000 time = 6.662639617919922
I0123 15:09:51.637069 139850290401280 ddar.py:60] Depth 4/1000 time = 6.9624717235565186
I0123 15:09:59.211855 139850290401280 ddar.py:60] Depth 5/1000 time = 7.574483156204224
I0123 15:10:06.780425 139850290401280 ddar.py:60] Depth 6/1000 time = 7.567840099334717
I0123 15:10:14.161664 139850290401280 ddar.py:60] Depth 7/1000 time = 7.241532564163208
I0123 15:10:14.161918 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:10:14.161974 139850290401280 alphageometry.py:566] LM output (score=-1.044695): "m : C d e m 17 D d m e m 18 ;"
I0123 15:10:14.162010 139850290401280 alphageometry.py:567] Translation: "m = on_line m d e, on_bline m e d"

I0123 15:10:14.162048 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m d e, on_bline m e d ? coll h k j"
I0123 15:10:14.162237 139850290401280 graph.py:498] 
I0123 15:10:14.162291 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m d e, on_bline m e d ? coll h k j
I0123 15:10:15.550425 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2828786373138428
I0123 15:10:19.625662 139850290401280 ddar.py:60] Depth 2/1000 time = 4.074962139129639
I0123 15:10:26.227570 139850290401280 ddar.py:60] Depth 3/1000 time = 6.601537466049194
I0123 15:10:32.460054 139850290401280 ddar.py:60] Depth 4/1000 time = 6.232222318649292
I0123 15:10:37.616666 139850290401280 ddar.py:60] Depth 5/1000 time = 5.156355142593384
I0123 15:10:43.912390 139850290401280 ddar.py:60] Depth 6/1000 time = 6.295166015625
I0123 15:10:44.030334 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:10:44.030403 139850290401280 alphageometry.py:566] LM output (score=-1.317901): "m : C a f m 17 D a m f m 18 ;"
I0123 15:10:44.030441 139850290401280 alphageometry.py:567] Translation: "m = on_line m a f, on_bline m f a"

I0123 15:10:44.030483 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m a f, on_bline m f a ? coll h k j"
I0123 15:10:44.030646 139850290401280 graph.py:498] 
I0123 15:10:44.030699 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m a f, on_bline m f a ? coll h k j
I0123 15:10:45.408619 139850290401280 ddar.py:60] Depth 1/1000 time = 1.267287015914917
I0123 15:10:49.560787 139850290401280 ddar.py:60] Depth 2/1000 time = 4.151958703994751
I0123 15:10:55.326987 139850290401280 ddar.py:60] Depth 3/1000 time = 5.765908241271973
I0123 15:11:01.109298 139850290401280 ddar.py:60] Depth 4/1000 time = 5.781896114349365
I0123 15:11:06.860680 139850290401280 ddar.py:60] Depth 5/1000 time = 5.751122236251831
I0123 15:11:12.521158 139850290401280 ddar.py:60] Depth 6/1000 time = 5.6597373485565186
I0123 15:11:12.639364 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:11:12.639455 139850290401280 alphageometry.py:566] LM output (score=-1.620467): "m : C e f m 17 D e m f m 18 ;"
I0123 15:11:12.639494 139850290401280 alphageometry.py:567] Translation: "m = on_line m e f, on_bline m f e"

I0123 15:11:12.639539 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m e f, on_bline m f e ? coll h k j"
I0123 15:11:12.639711 139850290401280 graph.py:498] 
I0123 15:11:12.639765 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m e f, on_bline m f e ? coll h k j
I0123 15:11:14.006359 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2578105926513672
I0123 15:11:17.034310 139850290401280 ddar.py:60] Depth 2/1000 time = 3.027742385864258
I0123 15:11:23.663335 139850290401280 ddar.py:60] Depth 3/1000 time = 6.628793954849243
I0123 15:11:29.441427 139850290401280 ddar.py:60] Depth 4/1000 time = 5.777824878692627
I0123 15:11:34.022145 139850290401280 ddar.py:60] Depth 5/1000 time = 4.580422639846802
I0123 15:11:39.719903 139850290401280 ddar.py:60] Depth 6/1000 time = 5.697153329849243
I0123 15:11:39.834203 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:11:39.834282 139850290401280 alphageometry.py:566] LM output (score=-1.768223): "m : C c e m 17 D c m e m 18 ;"
I0123 15:11:39.834318 139850290401280 alphageometry.py:567] Translation: "m = on_line m c e, on_bline m e c"

I0123 15:11:39.834365 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m c e, on_bline m e c ? coll h k j"
I0123 15:11:39.834526 139850290401280 graph.py:498] 
I0123 15:11:39.834578 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m c e, on_bline m e c ? coll h k j
I0123 15:11:41.233301 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2909343242645264
I0123 15:11:46.236204 139850290401280 ddar.py:60] Depth 2/1000 time = 5.0027008056640625
I0123 15:11:54.282460 139850290401280 ddar.py:60] Depth 3/1000 time = 8.046031475067139
I0123 15:12:01.795514 139850290401280 ddar.py:60] Depth 4/1000 time = 7.512746572494507
I0123 15:12:08.169773 139850290401280 ddar.py:60] Depth 5/1000 time = 6.373924016952515
I0123 15:12:15.581980 139850290401280 ddar.py:60] Depth 6/1000 time = 7.411505699157715
I0123 15:12:15.720992 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:12:15.721096 139850290401280 alphageometry.py:566] LM output (score=-1.860700): "m : C b e m 17 D b m e m 18 ;"
I0123 15:12:15.721135 139850290401280 alphageometry.py:567] Translation: "m = on_line m b e, on_bline m e b"

I0123 15:12:15.721182 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m b e, on_bline m e b ? coll h k j"
I0123 15:12:15.721354 139850290401280 graph.py:498] 
I0123 15:12:15.721405 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m b e, on_bline m e b ? coll h k j
I0123 15:12:18.186907 139850290401280 ddar.py:60] Depth 1/1000 time = 2.360450029373169
I0123 15:12:22.374594 139850290401280 ddar.py:60] Depth 2/1000 time = 4.187479019165039
I0123 15:12:29.886468 139850290401280 ddar.py:60] Depth 3/1000 time = 7.511609792709351
I0123 15:12:37.132142 139850290401280 ddar.py:60] Depth 4/1000 time = 7.245321273803711
I0123 15:12:43.682669 139850290401280 ddar.py:60] Depth 5/1000 time = 6.55016827583313
I0123 15:12:51.324597 139850290401280 ddar.py:60] Depth 6/1000 time = 7.641148090362549
I0123 15:12:58.708167 139850290401280 ddar.py:60] Depth 7/1000 time = 7.250233173370361
I0123 15:12:58.708729 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:12:58.708798 139850290401280 alphageometry.py:566] LM output (score=-2.050827): "m : C e f m 17 D e f e m 18 ;"
I0123 15:12:58.708835 139850290401280 alphageometry.py:567] Translation: "m = on_line m e f, on_circle m e f"

I0123 15:12:58.708882 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m e f, on_circle m e f ? coll h k j"
I0123 15:12:58.709072 139850290401280 graph.py:498] 
I0123 15:12:58.709133 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m e f, on_circle m e f ? coll h k j
I0123 15:13:00.071206 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2571039199829102
I0123 15:13:04.517255 139850290401280 ddar.py:60] Depth 2/1000 time = 4.445828914642334
I0123 15:13:10.468804 139850290401280 ddar.py:60] Depth 3/1000 time = 5.951235055923462
I0123 15:13:16.556858 139850290401280 ddar.py:60] Depth 4/1000 time = 6.087611675262451
I0123 15:13:22.612414 139850290401280 ddar.py:60] Depth 5/1000 time = 6.055234670639038
I0123 15:13:28.626355 139850290401280 ddar.py:60] Depth 6/1000 time = 6.013204097747803
I0123 15:13:28.731070 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:13:28.731148 139850290401280 alphageometry.py:566] LM output (score=-2.195628): "m : C a d m 17 D a d d m 18 ;"
I0123 15:13:28.731189 139850290401280 alphageometry.py:567] Translation: "m = on_line m a d, on_circle m d a"

I0123 15:13:28.731234 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m a d, on_circle m d a ? coll h k j"
I0123 15:13:28.731398 139850290401280 graph.py:498] 
I0123 15:13:28.731455 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m a d, on_circle m d a ? coll h k j
I0123 15:13:30.590045 139850290401280 ddar.py:60] Depth 1/1000 time = 1.754335641860962
I0123 15:13:35.751684 139850290401280 ddar.py:60] Depth 2/1000 time = 5.161412477493286
I0123 15:13:44.997459 139850290401280 ddar.py:60] Depth 3/1000 time = 9.245523691177368
I0123 15:13:53.179412 139850290401280 ddar.py:60] Depth 4/1000 time = 8.181592464447021
I0123 15:14:01.255218 139850290401280 ddar.py:60] Depth 5/1000 time = 8.075437307357788
I0123 15:14:08.319915 139850290401280 ddar.py:60] Depth 6/1000 time = 7.0639808177948
I0123 15:14:08.473124 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:14:08.473209 139850290401280 alphageometry.py:566] LM output (score=-2.262707): "m : C a b m 17 D a m b m 18 ;"
I0123 15:14:08.473250 139850290401280 alphageometry.py:567] Translation: "m = on_line m a b, on_bline m b a"

I0123 15:14:08.473296 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m a b, on_bline m b a ? coll h k j"
I0123 15:14:08.473465 139850290401280 graph.py:498] 
I0123 15:14:08.473522 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m a b, on_bline m b a ? coll h k j
I0123 15:14:11.042015 139850290401280 ddar.py:60] Depth 1/1000 time = 2.4594595432281494
I0123 15:14:14.948858 139850290401280 ddar.py:60] Depth 2/1000 time = 3.906609535217285
I0123 15:14:23.856467 139850290401280 ddar.py:60] Depth 3/1000 time = 8.907243967056274
I0123 15:14:31.742902 139850290401280 ddar.py:60] Depth 4/1000 time = 7.88590669631958
I0123 15:14:39.527792 139850290401280 ddar.py:60] Depth 5/1000 time = 7.784553289413452
I0123 15:14:47.342237 139850290401280 ddar.py:60] Depth 6/1000 time = 7.813644647598267
I0123 15:14:47.479595 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:14:47.479685 139850290401280 alphageometry.py:566] LM output (score=-2.477822): "m : P c e c m 17 ;"
I0123 15:14:47.479726 139850290401280 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c e c m"

I0123 15:14:47.479767 139850290401280 alphageometry.py:566] LM output (score=-2.485375): "m : P c e g m 17 ;"
I0123 15:14:47.479794 139850290401280 alphageometry.py:567] Translation: "m = on_pline m g c e"

I0123 15:14:47.479830 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_pline m g c e ? coll h k j"
I0123 15:14:47.479998 139850290401280 graph.py:498] 
I0123 15:14:47.480059 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_pline m g c e ? coll h k j
I0123 15:14:48.706967 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1378769874572754
I0123 15:14:51.696882 139850290401280 ddar.py:60] Depth 2/1000 time = 2.9897055625915527
I0123 15:14:56.717919 139850290401280 ddar.py:60] Depth 3/1000 time = 5.020735025405884
I0123 15:15:02.237055 139850290401280 ddar.py:60] Depth 4/1000 time = 5.518710374832153
I0123 15:15:06.521567 139850290401280 ddar.py:60] Depth 5/1000 time = 4.284243583679199
I0123 15:15:11.925725 139850290401280 ddar.py:60] Depth 6/1000 time = 5.40355920791626
I0123 15:15:12.031598 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:15:12.031675 139850290401280 alphageometry.py:566] LM output (score=-2.489279): "m : P c f d m 17 ;"
I0123 15:15:12.031715 139850290401280 alphageometry.py:567] Translation: "m = on_pline m d c f"

I0123 15:15:12.031760 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_pline m d c f ? coll h k j"
I0123 15:15:12.031927 139850290401280 graph.py:498] 
I0123 15:15:12.031985 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_pline m d c f ? coll h k j
I0123 15:15:13.264921 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1442360877990723
I0123 15:15:16.403035 139850290401280 ddar.py:60] Depth 2/1000 time = 3.1378891468048096
I0123 15:15:22.171397 139850290401280 ddar.py:60] Depth 3/1000 time = 5.768115043640137
I0123 15:15:26.802495 139850290401280 ddar.py:60] Depth 4/1000 time = 4.630808353424072
I0123 15:15:32.680671 139850290401280 ddar.py:60] Depth 5/1000 time = 5.8778369426727295
I0123 15:15:37.353657 139850290401280 ddar.py:60] Depth 6/1000 time = 4.672168254852295
I0123 15:15:37.462986 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:15:37.463106 139850290401280 alphageometry.py:566] LM output (score=-2.514333): "m : C a b m 17 D a f f m 18 ;"
I0123 15:15:37.463145 139850290401280 alphageometry.py:567] Translation: "m = on_line m a b, on_circle m f a"

I0123 15:15:37.463207 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m a b, on_circle m f a ? coll h k j"
I0123 15:15:37.463429 139850290401280 graph.py:498] 
I0123 15:15:37.463490 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m a b, on_circle m f a ? coll h k j
I0123 15:15:40.031157 139850290401280 ddar.py:60] Depth 1/1000 time = 2.4597721099853516
I0123 15:15:43.167098 139850290401280 ddar.py:60] Depth 2/1000 time = 3.1357014179229736
I0123 15:15:49.685778 139850290401280 ddar.py:60] Depth 3/1000 time = 6.518438816070557
I0123 15:15:54.422860 139850290401280 ddar.py:60] Depth 4/1000 time = 4.736814022064209
I0123 15:16:00.311860 139850290401280 ddar.py:60] Depth 5/1000 time = 5.888731956481934
I0123 15:16:06.298050 139850290401280 ddar.py:60] Depth 6/1000 time = 5.985666036605835
I0123 15:16:06.407673 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:16:06.407750 139850290401280 alphageometry.py:566] LM output (score=-2.539663): "m : C e f m 17 D e f f m 18 ;"
I0123 15:16:06.407790 139850290401280 alphageometry.py:567] Translation: "m = on_line m e f, on_circle m f e"

I0123 15:16:06.407840 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m e f, on_circle m f e ? coll h k j"
I0123 15:16:06.408010 139850290401280 graph.py:498] 
I0123 15:16:06.408068 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m e f, on_circle m f e ? coll h k j
I0123 15:16:07.780890 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2655291557312012
I0123 15:16:11.093577 139850290401280 ddar.py:60] Depth 2/1000 time = 3.3124711513519287
I0123 15:16:17.810784 139850290401280 ddar.py:60] Depth 3/1000 time = 6.71696925163269
I0123 15:16:23.994251 139850290401280 ddar.py:60] Depth 4/1000 time = 6.183203458786011
I0123 15:16:29.052560 139850290401280 ddar.py:60] Depth 5/1000 time = 5.058030605316162
I0123 15:16:35.321521 139850290401280 ddar.py:60] Depth 6/1000 time = 6.268279552459717
I0123 15:16:35.427173 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:16:35.427256 139850290401280 alphageometry.py:566] LM output (score=-2.565723): "m : C a g m 17 D a g g m 18 ;"
I0123 15:16:35.427296 139850290401280 alphageometry.py:567] Translation: "m = on_line m a g, on_circle m g a"

I0123 15:16:35.427342 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m a g, on_circle m g a ? coll h k j"
I0123 15:16:35.427512 139850290401280 graph.py:498] 
I0123 15:16:35.427568 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m a g, on_circle m g a ? coll h k j
I0123 15:16:36.888784 139850290401280 ddar.py:60] Depth 1/1000 time = 1.361588716506958
I0123 15:16:40.734463 139850290401280 ddar.py:60] Depth 2/1000 time = 3.84533953666687
I0123 15:16:48.488204 139850290401280 ddar.py:60] Depth 3/1000 time = 7.753480911254883
I0123 15:16:55.036891 139850290401280 ddar.py:60] Depth 4/1000 time = 6.548410654067993
I0123 15:17:00.371887 139850290401280 ddar.py:60] Depth 5/1000 time = 5.334742784500122
I0123 15:17:06.951110 139850290401280 ddar.py:60] Depth 6/1000 time = 6.578643083572388
I0123 15:17:07.074476 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:17:07.074551 139850290401280 alphageometry.py:566] LM output (score=-2.769906): "m : C a f m 17 D a f f m 18 ;"
I0123 15:17:07.074586 139850290401280 alphageometry.py:567] Translation: "m = on_line m a f, on_circle m f a"

I0123 15:17:07.074630 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m a f, on_circle m f a ? coll h k j"
I0123 15:17:07.074797 139850290401280 graph.py:498] 
I0123 15:17:07.074852 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m a f, on_circle m f a ? coll h k j
I0123 15:17:08.454282 139850290401280 ddar.py:60] Depth 1/1000 time = 1.273294448852539
I0123 15:17:11.789446 139850290401280 ddar.py:60] Depth 2/1000 time = 3.334963798522949
I0123 15:17:19.115314 139850290401280 ddar.py:60] Depth 3/1000 time = 7.3255720138549805
I0123 15:17:25.444961 139850290401280 ddar.py:60] Depth 4/1000 time = 6.329249620437622
I0123 15:17:30.430152 139850290401280 ddar.py:60] Depth 5/1000 time = 4.984922170639038
I0123 15:17:36.639204 139850290401280 ddar.py:60] Depth 6/1000 time = 6.20846152305603
I0123 15:17:36.746598 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:17:36.746841 139850290401280 alphageometry.py:566] LM output (score=-2.771341): "m : C d g m 17 D d g g m 18 ;"
I0123 15:17:36.746883 139850290401280 alphageometry.py:567] Translation: "m = on_line m d g, on_circle m g d"

I0123 15:17:36.746924 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m d g, on_circle m g d ? coll h k j"
I0123 15:17:36.747087 139850290401280 graph.py:498] 
I0123 15:17:36.747140 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m d g, on_circle m g d ? coll h k j
I0123 15:17:38.344968 139850290401280 ddar.py:60] Depth 1/1000 time = 1.4982476234436035
I0123 15:17:42.500974 139850290401280 ddar.py:60] Depth 2/1000 time = 4.155803680419922
I0123 15:17:50.384105 139850290401280 ddar.py:60] Depth 3/1000 time = 7.8829169273376465
I0123 15:17:57.500293 139850290401280 ddar.py:60] Depth 4/1000 time = 7.115910291671753
I0123 15:18:03.293942 139850290401280 ddar.py:60] Depth 5/1000 time = 5.793343544006348
I0123 15:18:10.332712 139850290401280 ddar.py:60] Depth 6/1000 time = 7.038147449493408
I0123 15:18:10.450364 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:18:10.450435 139850290401280 alphageometry.py:566] LM output (score=-2.848068): "m : C d g m 17 T c m d g 18 ;"
I0123 15:18:10.450472 139850290401280 alphageometry.py:567] Translation: "m = on_line m d g, on_tline m c d g"

I0123 15:18:10.450515 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m d g, on_tline m c d g ? coll h k j"
I0123 15:18:10.450685 139850290401280 graph.py:498] 
I0123 15:18:10.450759 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m d g, on_tline m c d g ? coll h k j
I0123 15:18:11.700298 139850290401280 ddar.py:60] Depth 1/1000 time = 1.160285472869873
I0123 15:18:15.111025 139850290401280 ddar.py:60] Depth 2/1000 time = 3.410531759262085
I0123 15:18:22.926596 139850290401280 ddar.py:60] Depth 3/1000 time = 7.815343618392944
I0123 15:18:30.485337 139850290401280 ddar.py:60] Depth 4/1000 time = 7.55836296081543
I0123 15:18:36.679724 139850290401280 ddar.py:60] Depth 5/1000 time = 6.193916082382202
I0123 15:18:44.739460 139850290401280 ddar.py:60] Depth 6/1000 time = 8.059380769729614
I0123 15:18:52.731695 139850290401280 ddar.py:60] Depth 7/1000 time = 7.9915244579315186
I0123 15:19:00.582846 139850290401280 ddar.py:60] Depth 8/1000 time = 7.707103252410889
I0123 15:19:00.583121 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:19:00.583186 139850290401280 alphageometry.py:566] LM output (score=-2.867265): "m : P c e h m 17 ;"
I0123 15:19:00.583222 139850290401280 alphageometry.py:567] Translation: "m = on_pline m h c e"

I0123 15:19:00.583268 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_pline m h c e ? coll h k j"
I0123 15:19:00.583438 139850290401280 graph.py:498] 
I0123 15:19:00.583497 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_pline m h c e ? coll h k j
I0123 15:19:01.805388 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1340439319610596
I0123 15:19:04.748409 139850290401280 ddar.py:60] Depth 2/1000 time = 2.9428327083587646
I0123 15:19:09.995848 139850290401280 ddar.py:60] Depth 3/1000 time = 5.247150421142578
I0123 15:19:15.840836 139850290401280 ddar.py:60] Depth 4/1000 time = 5.844588041305542
I0123 15:19:20.387500 139850290401280 ddar.py:60] Depth 5/1000 time = 4.546349048614502
I0123 15:19:26.192708 139850290401280 ddar.py:60] Depth 6/1000 time = 5.804635286331177
I0123 15:19:26.298382 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:19:26.298463 139850290401280 alphageometry.py:566] LM output (score=-2.883646): "m : C f j m 17 D f m j m 18 ;"
I0123 15:19:26.298500 139850290401280 alphageometry.py:567] Translation: "m = on_line m f j, on_bline m j f"

I0123 15:19:26.298540 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m f j, on_bline m j f ? coll h k j"
I0123 15:19:26.298710 139850290401280 graph.py:498] 
I0123 15:19:26.298763 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m f j, on_bline m j f ? coll h k j
I0123 15:19:27.604850 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1990790367126465
I0123 15:19:30.480564 139850290401280 ddar.py:60] Depth 2/1000 time = 2.875511646270752
I0123 15:19:36.108489 139850290401280 ddar.py:60] Depth 3/1000 time = 5.627705335617065
I0123 15:19:40.689239 139850290401280 ddar.py:60] Depth 4/1000 time = 4.58050012588501
I0123 15:19:46.600301 139850290401280 ddar.py:60] Depth 5/1000 time = 5.910718202590942
I0123 15:19:51.196143 139850290401280 ddar.py:60] Depth 6/1000 time = 4.595158815383911
I0123 15:19:51.298810 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:19:51.298921 139850290401280 alphageometry.py:566] LM output (score=-2.925636): "m : C a f m 17 D a f a m 18 ;"
I0123 15:19:51.298959 139850290401280 alphageometry.py:567] Translation: "m = on_line m a f, on_circle m a f"

I0123 15:19:51.299019 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m a f, on_circle m a f ? coll h k j"
I0123 15:19:51.299209 139850290401280 graph.py:498] 
I0123 15:19:51.299274 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m a f, on_circle m a f ? coll h k j
I0123 15:19:52.657590 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2503199577331543
I0123 15:19:57.096588 139850290401280 ddar.py:60] Depth 2/1000 time = 4.438755035400391
I0123 15:20:02.615788 139850290401280 ddar.py:60] Depth 3/1000 time = 5.518957853317261
I0123 15:20:08.643323 139850290401280 ddar.py:60] Depth 4/1000 time = 6.027260780334473
I0123 15:20:14.693261 139850290401280 ddar.py:60] Depth 5/1000 time = 6.049682140350342
I0123 15:20:19.515596 139850290401280 ddar.py:60] Depth 6/1000 time = 4.82159161567688
I0123 15:20:19.618297 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:20:19.618401 139850290401280 alphageometry.py:566] LM output (score=-2.932266): "m : C e g m 17 D e m g m 18 ;"
I0123 15:20:19.618438 139850290401280 alphageometry.py:567] Translation: "m = on_line m e g, on_bline m g e"

I0123 15:20:19.618491 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m e g, on_bline m g e ? coll h k j"
I0123 15:20:19.618682 139850290401280 graph.py:498] 
I0123 15:20:19.618738 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m e g, on_bline m g e ? coll h k j
I0123 15:20:20.941301 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2136189937591553
I0123 15:20:25.497982 139850290401280 ddar.py:60] Depth 2/1000 time = 4.556461572647095
I0123 15:20:31.263336 139850290401280 ddar.py:60] Depth 3/1000 time = 5.765098810195923
I0123 15:20:37.247598 139850290401280 ddar.py:60] Depth 4/1000 time = 5.984013557434082
I0123 15:20:41.998504 139850290401280 ddar.py:60] Depth 5/1000 time = 4.750647068023682
I0123 15:20:48.050202 139850290401280 ddar.py:60] Depth 6/1000 time = 6.05113959312439
I0123 15:20:48.159395 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:20:48.159472 139850290401280 alphageometry.py:566] LM output (score=-2.951220): "m : P c f c m 17 ;"
I0123 15:20:48.159510 139850290401280 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c f c m"

I0123 15:20:48.159544 139850290401280 alphageometry.py:566] LM output (score=-3.015119): "m : P c e i m 17 ;"
I0123 15:20:48.159571 139850290401280 alphageometry.py:567] Translation: "m = on_pline m i c e"

I0123 15:20:48.159601 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_pline m i c e ? coll h k j"
I0123 15:20:48.159776 139850290401280 graph.py:498] 
I0123 15:20:48.159823 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_pline m i c e ? coll h k j
I0123 15:20:49.395120 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1440916061401367
I0123 15:20:52.176379 139850290401280 ddar.py:60] Depth 2/1000 time = 2.7810633182525635
I0123 15:20:57.060380 139850290401280 ddar.py:60] Depth 3/1000 time = 4.8837244510650635
I0123 15:21:02.596110 139850290401280 ddar.py:60] Depth 4/1000 time = 5.535329580307007
I0123 15:21:06.791674 139850290401280 ddar.py:60] Depth 5/1000 time = 4.195275068283081
I0123 15:21:12.233872 139850290401280 ddar.py:60] Depth 6/1000 time = 5.441673040390015
I0123 15:21:12.340817 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:21:12.340889 139850290401280 alphageometry.py:566] LM output (score=-3.019474): "m : P c e j m 17 ;"
I0123 15:21:12.340928 139850290401280 alphageometry.py:567] Translation: "m = on_pline m j c e"

I0123 15:21:12.340967 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_pline m j c e ? coll h k j"
I0123 15:21:12.341132 139850290401280 graph.py:498] 
I0123 15:21:12.341185 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_pline m j c e ? coll h k j
I0123 15:21:13.569972 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1393005847930908
I0123 15:21:16.304021 139850290401280 ddar.py:60] Depth 2/1000 time = 2.733839511871338
I0123 15:21:21.097230 139850290401280 ddar.py:60] Depth 3/1000 time = 4.792991399765015
I0123 15:21:26.699080 139850290401280 ddar.py:60] Depth 4/1000 time = 5.601604700088501
I0123 15:21:31.014673 139850290401280 ddar.py:60] Depth 5/1000 time = 4.315334796905518
I0123 15:21:36.719126 139850290401280 ddar.py:60] Depth 6/1000 time = 5.70393443107605
I0123 15:21:36.826559 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:21:36.826624 139850290401280 alphageometry.py:566] LM output (score=-3.138313): "m : P c f l m 17 ;"
I0123 15:21:36.826660 139850290401280 alphageometry.py:567] Translation: "m = on_pline m l c f"

I0123 15:21:36.826700 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_pline m l c f ? coll h k j"
I0123 15:21:36.826856 139850290401280 graph.py:498] 
I0123 15:21:36.826908 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_pline m l c f ? coll h k j
I0123 15:21:38.079968 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1644940376281738
I0123 15:21:40.924962 139850290401280 ddar.py:60] Depth 2/1000 time = 2.844783067703247
I0123 15:21:45.335455 139850290401280 ddar.py:60] Depth 3/1000 time = 4.410244941711426
I0123 15:21:51.235770 139850290401280 ddar.py:60] Depth 4/1000 time = 5.900057792663574
I0123 15:21:55.900946 139850290401280 ddar.py:60] Depth 5/1000 time = 4.664879322052002
I0123 15:22:01.839547 139850290401280 ddar.py:60] Depth 6/1000 time = 5.938004016876221
I0123 15:22:01.947057 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:22:01.947132 139850290401280 alphageometry.py:566] LM output (score=-3.144000): "m : C a g m 17 D a m g m 18 ;"
I0123 15:22:01.947170 139850290401280 alphageometry.py:567] Translation: "m = on_line m a g, on_bline m g a"

I0123 15:22:01.947209 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m a g, on_bline m g a ? coll h k j"
I0123 15:22:01.947387 139850290401280 graph.py:498] 
I0123 15:22:01.947439 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m a g, on_bline m g a ? coll h k j
I0123 15:22:03.258989 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2047340869903564
I0123 15:22:06.532694 139850290401280 ddar.py:60] Depth 2/1000 time = 3.273423910140991
I0123 15:22:13.519358 139850290401280 ddar.py:60] Depth 3/1000 time = 6.98636794090271
I0123 15:22:18.643929 139850290401280 ddar.py:60] Depth 4/1000 time = 5.124300241470337
I0123 15:22:25.037870 139850290401280 ddar.py:60] Depth 5/1000 time = 6.393669128417969
I0123 15:22:30.147034 139850290401280 ddar.py:60] Depth 6/1000 time = 5.108529329299927
I0123 15:22:30.254894 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:22:30.254969 139850290401280 alphageometry.py:566] LM output (score=-3.152180): "m : P c e l m 17 ;"
I0123 15:22:30.255006 139850290401280 alphageometry.py:567] Translation: "m = on_pline m l c e"

I0123 15:22:30.255051 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_pline m l c e ? coll h k j"
I0123 15:22:30.255219 139850290401280 graph.py:498] 
I0123 15:22:30.255275 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_pline m l c e ? coll h k j
I0123 15:22:32.791272 139850290401280 ddar.py:60] Depth 1/1000 time = 2.44714093208313
I0123 15:22:35.576110 139850290401280 ddar.py:60] Depth 2/1000 time = 2.7846198081970215
I0123 15:22:40.861827 139850290401280 ddar.py:60] Depth 3/1000 time = 5.285430431365967
I0123 15:22:46.603384 139850290401280 ddar.py:60] Depth 4/1000 time = 5.741158485412598
I0123 15:22:50.932154 139850290401280 ddar.py:60] Depth 5/1000 time = 4.328524351119995
I0123 15:22:55.270260 139850290401280 ddar.py:60] Depth 6/1000 time = 4.337571382522583
I0123 15:22:55.377239 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:22:55.377308 139850290401280 alphageometry.py:566] LM output (score=-3.309453): "m : C c d m 17 T c d g m 18 ;"
I0123 15:22:55.377344 139850290401280 alphageometry.py:567] Translation: "m = on_line m c d, on_tline m g c d"

I0123 15:22:55.377385 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m c d, on_tline m g c d ? coll h k j"
I0123 15:22:55.377547 139850290401280 graph.py:498] 
I0123 15:22:55.377620 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_line m c d, on_tline m g c d ? coll h k j
I0123 15:22:57.907924 139850290401280 ddar.py:60] Depth 1/1000 time = 2.4420409202575684
I0123 15:23:01.497402 139850290401280 ddar.py:60] Depth 2/1000 time = 3.589250087738037
I0123 15:23:07.725873 139850290401280 ddar.py:60] Depth 3/1000 time = 6.228250741958618
I0123 15:23:14.232196 139850290401280 ddar.py:60] Depth 4/1000 time = 6.506035566329956
I0123 15:23:20.796518 139850290401280 ddar.py:60] Depth 5/1000 time = 6.563985347747803
I0123 15:23:25.961497 139850290401280 ddar.py:60] Depth 6/1000 time = 5.164372205734253
I0123 15:23:26.080189 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:23:26.080263 139850290401280 alphageometry.py:566] LM output (score=-3.363671): "m : P c f i m 17 ;"
I0123 15:23:26.080301 139850290401280 alphageometry.py:567] Translation: "m = on_pline m i c f"

I0123 15:23:26.080346 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_pline m i c f ? coll h k j"
I0123 15:23:26.080519 139850290401280 graph.py:498] 
I0123 15:23:26.080572 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_pline m i c f ? coll h k j
I0123 15:23:27.309955 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1402866840362549
I0123 15:23:31.799733 139850290401280 ddar.py:60] Depth 2/1000 time = 4.489595413208008
I0123 15:23:37.569386 139850290401280 ddar.py:60] Depth 3/1000 time = 5.769420146942139
I0123 15:23:42.296191 139850290401280 ddar.py:60] Depth 4/1000 time = 4.726553440093994
I0123 15:23:48.381675 139850290401280 ddar.py:60] Depth 5/1000 time = 6.085175275802612
I0123 15:23:53.126156 139850290401280 ddar.py:60] Depth 6/1000 time = 4.74376916885376
I0123 15:23:53.234308 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:23:53.234426 139850290401280 alphageometry.py:566] LM output (score=-3.419361): "m : P c f h m 17 ;"
I0123 15:23:53.234465 139850290401280 alphageometry.py:567] Translation: "m = on_pline m h c f"

I0123 15:23:53.234522 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_pline m h c f ? coll h k j"
I0123 15:23:53.234732 139850290401280 graph.py:498] 
I0123 15:23:53.234787 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_pline m h c f ? coll h k j
I0123 15:23:55.779814 139850290401280 ddar.py:60] Depth 1/1000 time = 2.4562203884124756
I0123 15:23:58.900549 139850290401280 ddar.py:60] Depth 2/1000 time = 3.120513677597046
I0123 15:24:04.824940 139850290401280 ddar.py:60] Depth 3/1000 time = 5.924168348312378
I0123 15:24:11.011351 139850290401280 ddar.py:60] Depth 4/1000 time = 6.186150312423706
I0123 15:24:15.860179 139850290401280 ddar.py:60] Depth 5/1000 time = 4.848544597625732
I0123 15:24:22.159904 139850290401280 ddar.py:60] Depth 6/1000 time = 6.299013614654541
I0123 15:24:22.266634 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:24:22.266738 139850290401280 alphageometry.py:566] LM output (score=-3.446712): "m : P a l i m 17 ;"
I0123 15:24:22.266776 139850290401280 alphageometry.py:567] Translation: "m = on_pline m i a l"

I0123 15:24:22.266824 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_pline m i a l ? coll h k j"
I0123 15:24:22.266985 139850290401280 graph.py:498] 
I0123 15:24:22.267037 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a e, on_bline l e a; m = on_pline m i a l ? coll h k j
I0123 15:24:23.501253 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1381220817565918
I0123 15:24:26.285382 139850290401280 ddar.py:60] Depth 2/1000 time = 2.783864974975586
I0123 15:24:30.748814 139850290401280 ddar.py:60] Depth 3/1000 time = 4.463183164596558
I0123 15:24:36.527526 139850290401280 ddar.py:60] Depth 4/1000 time = 5.778467178344727
I0123 15:24:40.981652 139850290401280 ddar.py:60] Depth 5/1000 time = 4.453868865966797
I0123 15:24:46.772136 139850290401280 ddar.py:60] Depth 6/1000 time = 5.789927005767822
I0123 15:24:46.880609 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:24:46.880723 139850290401280 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C b e l 15 D b l e l 16 ; x00
I0123 15:24:55.846982 139850290401280 alphageometry.py:566] LM output (score=-0.758416): "m : C a e m 17 D a m e m 18 ;"
I0123 15:24:55.847177 139850290401280 alphageometry.py:567] Translation: "m = on_line m a e, on_bline m e a"

I0123 15:24:55.847223 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_line m a e, on_bline m e a ? coll h k j"
I0123 15:24:55.847385 139850290401280 graph.py:498] 
I0123 15:24:55.847441 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_line m a e, on_bline m e a ? coll h k j
I0123 15:24:57.247158 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2939889430999756
I0123 15:25:01.145239 139850290401280 ddar.py:60] Depth 2/1000 time = 3.897873640060425
I0123 15:25:08.952898 139850290401280 ddar.py:60] Depth 3/1000 time = 7.807426929473877
I0123 15:25:14.604678 139850290401280 ddar.py:60] Depth 4/1000 time = 5.651529312133789
I0123 15:25:22.113505 139850290401280 ddar.py:60] Depth 5/1000 time = 7.50854229927063
I0123 15:25:29.707774 139850290401280 ddar.py:60] Depth 6/1000 time = 7.593557357788086
I0123 15:25:35.964721 139850290401280 ddar.py:60] Depth 7/1000 time = 6.114853143692017
I0123 15:25:35.964999 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:25:35.965242 139850290401280 alphageometry.py:566] LM output (score=-1.093036): "m : C a b m 17 D a m b m 18 ;"
I0123 15:25:35.965281 139850290401280 alphageometry.py:567] Translation: "m = on_line m a b, on_bline m b a"

I0123 15:25:35.965331 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_line m a b, on_bline m b a ? coll h k j"
I0123 15:25:35.965524 139850290401280 graph.py:498] 
I0123 15:25:35.965581 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_line m a b, on_bline m b a ? coll h k j
I0123 15:25:38.744914 139850290401280 ddar.py:60] Depth 1/1000 time = 2.670358657836914
I0123 15:25:42.659301 139850290401280 ddar.py:60] Depth 2/1000 time = 3.914170980453491
I0123 15:25:50.573493 139850290401280 ddar.py:60] Depth 3/1000 time = 7.913955450057983
I0123 15:25:56.867141 139850290401280 ddar.py:60] Depth 4/1000 time = 6.293360710144043
I0123 15:26:04.508724 139850290401280 ddar.py:60] Depth 5/1000 time = 7.64128041267395
I0123 15:26:12.216084 139850290401280 ddar.py:60] Depth 6/1000 time = 7.706675291061401
I0123 15:26:12.357880 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:26:12.357997 139850290401280 alphageometry.py:566] LM output (score=-1.311134): "m : C a c m 17 D a m c m 18 ;"
I0123 15:26:12.358037 139850290401280 alphageometry.py:567] Translation: "m = on_line m a c, on_bline m c a"

I0123 15:26:12.358079 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_line m a c, on_bline m c a ? coll h k j"
I0123 15:26:12.358238 139850290401280 graph.py:498] 
I0123 15:26:12.358288 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_line m a c, on_bline m c a ? coll h k j
I0123 15:26:13.738629 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2758700847625732
I0123 15:26:18.120550 139850290401280 ddar.py:60] Depth 2/1000 time = 4.381527900695801
I0123 15:26:25.869201 139850290401280 ddar.py:60] Depth 3/1000 time = 7.748176336288452
I0123 15:26:33.369261 139850290401280 ddar.py:60] Depth 4/1000 time = 7.499724864959717
I0123 15:26:39.827342 139850290401280 ddar.py:60] Depth 5/1000 time = 6.457705736160278
I0123 15:26:47.666666 139850290401280 ddar.py:60] Depth 6/1000 time = 7.838913202285767
I0123 15:26:55.478428 139850290401280 ddar.py:60] Depth 7/1000 time = 7.810999631881714
I0123 15:27:01.828920 139850290401280 ddar.py:60] Depth 8/1000 time = 6.22397518157959
I0123 15:27:01.829215 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:27:01.829278 139850290401280 alphageometry.py:566] LM output (score=-1.632649): "m : C b c m 17 D b m c m 18 ;"
I0123 15:27:01.829315 139850290401280 alphageometry.py:567] Translation: "m = on_line m b c, on_bline m c b"

I0123 15:27:01.829378 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_line m b c, on_bline m c b ? coll h k j"
I0123 15:27:01.829559 139850290401280 graph.py:498] 
I0123 15:27:01.829616 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_line m b c, on_bline m c b ? coll h k j
I0123 15:27:03.237900 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2992885112762451
I0123 15:27:08.621454 139850290401280 ddar.py:60] Depth 2/1000 time = 5.383334398269653
I0123 15:27:15.640539 139850290401280 ddar.py:60] Depth 3/1000 time = 7.018853425979614
I0123 15:27:23.021040 139850290401280 ddar.py:60] Depth 4/1000 time = 7.380181789398193
I0123 15:27:31.011213 139850290401280 ddar.py:60] Depth 5/1000 time = 7.98980712890625
I0123 15:27:37.557615 139850290401280 ddar.py:60] Depth 6/1000 time = 6.545561075210571
I0123 15:27:45.249504 139850290401280 ddar.py:60] Depth 7/1000 time = 7.551388502120972
I0123 15:27:45.249984 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:27:45.250045 139850290401280 alphageometry.py:566] LM output (score=-1.810394): "m : C d e m 17 D d m e m 18 ;"
I0123 15:27:45.250081 139850290401280 alphageometry.py:567] Translation: "m = on_line m d e, on_bline m e d"

I0123 15:27:45.250127 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_line m d e, on_bline m e d ? coll h k j"
I0123 15:27:45.250298 139850290401280 graph.py:498] 
I0123 15:27:45.250355 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_line m d e, on_bline m e d ? coll h k j
I0123 15:27:46.649823 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2927021980285645
I0123 15:27:50.455670 139850290401280 ddar.py:60] Depth 2/1000 time = 3.8056480884552
I0123 15:27:57.296167 139850290401280 ddar.py:60] Depth 3/1000 time = 6.840270519256592
I0123 15:28:03.792299 139850290401280 ddar.py:60] Depth 4/1000 time = 6.495880126953125
I0123 15:28:08.920554 139850290401280 ddar.py:60] Depth 5/1000 time = 5.127995014190674
I0123 15:28:15.524148 139850290401280 ddar.py:60] Depth 6/1000 time = 6.603042125701904
I0123 15:28:15.640075 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:28:15.640152 139850290401280 alphageometry.py:566] LM output (score=-1.829445): "m : C b f m 17 D b m f m 18 ;"
I0123 15:28:15.640189 139850290401280 alphageometry.py:567] Translation: "m = on_line m b f, on_bline m f b"

I0123 15:28:15.640241 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_line m b f, on_bline m f b ? coll h k j"
I0123 15:28:15.640411 139850290401280 graph.py:498] 
I0123 15:28:15.640465 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_line m b f, on_bline m f b ? coll h k j
I0123 15:28:17.025655 139850290401280 ddar.py:60] Depth 1/1000 time = 1.275434970855713
I0123 15:28:20.045783 139850290401280 ddar.py:60] Depth 2/1000 time = 3.0198493003845215
I0123 15:28:26.915546 139850290401280 ddar.py:60] Depth 3/1000 time = 6.869505405426025
I0123 15:28:31.605571 139850290401280 ddar.py:60] Depth 4/1000 time = 4.68977427482605
I0123 15:28:37.727068 139850290401280 ddar.py:60] Depth 5/1000 time = 6.1212382316589355
I0123 15:28:42.429375 139850290401280 ddar.py:60] Depth 6/1000 time = 4.701768398284912
I0123 15:28:42.546115 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:28:42.546206 139850290401280 alphageometry.py:566] LM output (score=-1.921615): "m : C e f m 17 D e m f m 18 ;"
I0123 15:28:42.546246 139850290401280 alphageometry.py:567] Translation: "m = on_line m e f, on_bline m f e"

I0123 15:28:42.546307 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_line m e f, on_bline m f e ? coll h k j"
I0123 15:28:42.546467 139850290401280 graph.py:498] 
I0123 15:28:42.546515 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_line m e f, on_bline m f e ? coll h k j
I0123 15:28:45.318861 139850290401280 ddar.py:60] Depth 1/1000 time = 2.665587902069092
I0123 15:28:48.636830 139850290401280 ddar.py:60] Depth 2/1000 time = 3.31775164604187
I0123 15:28:54.599943 139850290401280 ddar.py:60] Depth 3/1000 time = 5.962890148162842
I0123 15:29:00.809198 139850290401280 ddar.py:60] Depth 4/1000 time = 6.208994150161743
I0123 15:29:07.139499 139850290401280 ddar.py:60] Depth 5/1000 time = 6.329975605010986
I0123 15:29:11.969188 139850290401280 ddar.py:60] Depth 6/1000 time = 4.8290345668792725
I0123 15:29:12.085151 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:29:12.085253 139850290401280 alphageometry.py:566] LM output (score=-2.064641): "m : C c e m 17 D c m e m 18 ;"
I0123 15:29:12.085289 139850290401280 alphageometry.py:567] Translation: "m = on_line m c e, on_bline m e c"

I0123 15:29:12.085340 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_line m c e, on_bline m e c ? coll h k j"
I0123 15:29:12.085518 139850290401280 graph.py:498] 
I0123 15:29:12.085572 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_line m c e, on_bline m e c ? coll h k j
I0123 15:29:13.495207 139850290401280 ddar.py:60] Depth 1/1000 time = 1.3017101287841797
I0123 15:29:18.805289 139850290401280 ddar.py:60] Depth 2/1000 time = 5.3098533153533936
I0123 15:29:27.356859 139850290401280 ddar.py:60] Depth 3/1000 time = 8.551320314407349
I0123 15:29:33.344465 139850290401280 ddar.py:60] Depth 4/1000 time = 5.987304925918579
I0123 15:29:40.841317 139850290401280 ddar.py:60] Depth 5/1000 time = 7.496569871902466
I0123 15:29:46.834068 139850290401280 ddar.py:60] Depth 6/1000 time = 5.992095232009888
I0123 15:29:46.965740 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:29:46.965823 139850290401280 alphageometry.py:566] LM output (score=-2.458485): "m : C a d m 17 D a m d m 18 ;"
I0123 15:29:46.965861 139850290401280 alphageometry.py:567] Translation: "m = on_line m a d, on_bline m d a"

I0123 15:29:46.965904 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_line m a d, on_bline m d a ? coll h k j"
I0123 15:29:46.966070 139850290401280 graph.py:498] 
I0123 15:29:46.966124 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_line m a d, on_bline m d a ? coll h k j
I0123 15:29:49.775000 139850290401280 ddar.py:60] Depth 1/1000 time = 2.700993776321411
I0123 15:29:53.423109 139850290401280 ddar.py:60] Depth 2/1000 time = 3.647843837738037
I0123 15:29:59.314886 139850290401280 ddar.py:60] Depth 3/1000 time = 5.8914268016815186
I0123 15:30:05.768544 139850290401280 ddar.py:60] Depth 4/1000 time = 6.453289985656738
I0123 15:30:10.772642 139850290401280 ddar.py:60] Depth 5/1000 time = 5.00383996963501
I0123 15:30:17.128616 139850290401280 ddar.py:60] Depth 6/1000 time = 6.355418920516968
I0123 15:30:17.243775 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:30:17.243851 139850290401280 alphageometry.py:566] LM output (score=-2.462585): "m : C a d m 17 D a d d m 18 ;"
I0123 15:30:17.243890 139850290401280 alphageometry.py:567] Translation: "m = on_line m a d, on_circle m d a"

I0123 15:30:17.243933 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_line m a d, on_circle m d a ? coll h k j"
I0123 15:30:17.244100 139850290401280 graph.py:498] 
I0123 15:30:17.244154 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_line m a d, on_circle m d a ? coll h k j
I0123 15:30:19.132426 139850290401280 ddar.py:60] Depth 1/1000 time = 1.7874302864074707
I0123 15:30:26.233965 139850290401280 ddar.py:60] Depth 2/1000 time = 7.101321458816528
I0123 15:30:33.320031 139850290401280 ddar.py:60] Depth 3/1000 time = 7.085817337036133
I0123 15:30:41.642963 139850290401280 ddar.py:60] Depth 4/1000 time = 8.322648525238037
I0123 15:30:48.468182 139850290401280 ddar.py:60] Depth 5/1000 time = 6.824826002120972
I0123 15:30:56.788700 139850290401280 ddar.py:60] Depth 6/1000 time = 8.319733619689941
I0123 15:30:56.945707 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:30:56.945781 139850290401280 alphageometry.py:566] LM output (score=-2.572787): "m : T c f c m 17 ;"
I0123 15:30:56.945819 139850290401280 alphageometry.py:567] Translation: "m = on_tline m c c f"

I0123 15:30:56.945863 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_tline m c c f ? coll h k j"
I0123 15:30:56.946023 139850290401280 graph.py:498] 
I0123 15:30:56.946075 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_tline m c c f ? coll h k j
I0123 15:30:58.152928 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1193339824676514
I0123 15:31:01.195286 139850290401280 ddar.py:60] Depth 2/1000 time = 3.042180061340332
I0123 15:31:08.776281 139850290401280 ddar.py:60] Depth 3/1000 time = 7.580772161483765
I0123 15:31:14.142626 139850290401280 ddar.py:60] Depth 4/1000 time = 5.366078853607178
I0123 15:31:21.022592 139850290401280 ddar.py:60] Depth 5/1000 time = 6.8796772956848145
I0123 15:31:26.437232 139850290401280 ddar.py:60] Depth 6/1000 time = 5.414012908935547
I0123 15:31:26.564436 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:31:26.564515 139850290401280 alphageometry.py:566] LM output (score=-2.797776): "m : C e f m 17 D e f e m 18 ;"
I0123 15:31:26.564553 139850290401280 alphageometry.py:567] Translation: "m = on_line m e f, on_circle m e f"

I0123 15:31:26.564595 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_line m e f, on_circle m e f ? coll h k j"
I0123 15:31:26.564796 139850290401280 graph.py:498] 
I0123 15:31:26.564851 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_line m e f, on_circle m e f ? coll h k j
I0123 15:31:27.921343 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2486639022827148
I0123 15:31:32.471287 139850290401280 ddar.py:60] Depth 2/1000 time = 4.549746513366699
I0123 15:31:38.482010 139850290401280 ddar.py:60] Depth 3/1000 time = 6.010441780090332
I0123 15:31:44.694576 139850290401280 ddar.py:60] Depth 4/1000 time = 6.21219277381897
I0123 15:31:49.370582 139850290401280 ddar.py:60] Depth 5/1000 time = 4.675735712051392
I0123 15:31:55.552638 139850290401280 ddar.py:60] Depth 6/1000 time = 6.18134617805481
I0123 15:31:55.654974 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:31:55.655042 139850290401280 alphageometry.py:566] LM output (score=-2.798289): "m : T c e h m 17 ;"
I0123 15:31:55.655079 139850290401280 alphageometry.py:567] Translation: "m = on_tline m h c e"

I0123 15:31:55.655119 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_tline m h c e ? coll h k j"
I0123 15:31:55.655283 139850290401280 graph.py:498] 
I0123 15:31:55.655337 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_tline m h c e ? coll h k j
I0123 15:31:56.854266 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1114466190338135
I0123 15:32:00.226154 139850290401280 ddar.py:60] Depth 2/1000 time = 3.3716964721679688
I0123 15:32:08.629009 139850290401280 ddar.py:60] Depth 3/1000 time = 8.402645587921143
I0123 15:32:14.761936 139850290401280 ddar.py:60] Depth 4/1000 time = 6.132681846618652
I0123 15:32:22.427627 139850290401280 ddar.py:60] Depth 5/1000 time = 7.665380477905273
I0123 15:32:28.505823 139850290401280 ddar.py:60] Depth 6/1000 time = 6.077409267425537
I0123 15:32:28.636438 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:32:28.636575 139850290401280 alphageometry.py:566] LM output (score=-2.820833): "m : T c f f m 17 ;"
I0123 15:32:28.636616 139850290401280 alphageometry.py:567] Translation: "m = on_tline m f c f"

I0123 15:32:28.636671 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_tline m f c f ? coll h k j"
I0123 15:32:28.636879 139850290401280 graph.py:498] 
I0123 15:32:28.636942 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_tline m f c f ? coll h k j
I0123 15:32:29.837871 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1141209602355957
I0123 15:32:34.612322 139850290401280 ddar.py:60] Depth 2/1000 time = 4.774232864379883
I0123 15:32:41.002766 139850290401280 ddar.py:60] Depth 3/1000 time = 6.390186548233032
I0123 15:32:48.521131 139850290401280 ddar.py:60] Depth 4/1000 time = 7.518041610717773
I0123 15:32:54.713215 139850290401280 ddar.py:60] Depth 5/1000 time = 6.191739797592163
I0123 15:33:02.316391 139850290401280 ddar.py:60] Depth 6/1000 time = 7.602396726608276
I0123 15:33:02.443266 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:33:02.443340 139850290401280 alphageometry.py:566] LM output (score=-2.826247): "m : P c e c m 17 ;"
I0123 15:33:02.443376 139850290401280 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c e c m"

I0123 15:33:02.443413 139850290401280 alphageometry.py:566] LM output (score=-2.878230): "m : T d g g m 17 ;"
I0123 15:33:02.443439 139850290401280 alphageometry.py:567] Translation: "m = on_tline m g d g"

I0123 15:33:02.443484 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_tline m g d g ? coll h k j"
I0123 15:33:02.443641 139850290401280 graph.py:498] 
I0123 15:33:02.443690 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_tline m g d g ? coll h k j
I0123 15:33:03.642688 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1118457317352295
I0123 15:33:06.753559 139850290401280 ddar.py:60] Depth 2/1000 time = 3.110663414001465
I0123 15:33:13.094844 139850290401280 ddar.py:60] Depth 3/1000 time = 6.341008901596069
I0123 15:33:19.365883 139850290401280 ddar.py:60] Depth 4/1000 time = 6.2707359790802
I0123 15:33:24.027445 139850290401280 ddar.py:60] Depth 5/1000 time = 4.661308526992798
I0123 15:33:30.149933 139850290401280 ddar.py:60] Depth 6/1000 time = 6.121847867965698
I0123 15:33:30.268294 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:33:30.268366 139850290401280 alphageometry.py:566] LM output (score=-2.917378): "m : T c e g m 17 ;"
I0123 15:33:30.268405 139850290401280 alphageometry.py:567] Translation: "m = on_tline m g c e"

I0123 15:33:30.268449 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_tline m g c e ? coll h k j"
I0123 15:33:30.268618 139850290401280 graph.py:498] 
I0123 15:33:30.268671 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_tline m g c e ? coll h k j
I0123 15:33:31.468900 139850290401280 ddar.py:60] Depth 1/1000 time = 1.111711025238037
I0123 15:33:34.873749 139850290401280 ddar.py:60] Depth 2/1000 time = 3.404653310775757
I0123 15:33:41.312680 139850290401280 ddar.py:60] Depth 3/1000 time = 6.438691139221191
I0123 15:33:48.454647 139850290401280 ddar.py:60] Depth 4/1000 time = 7.141684055328369
I0123 15:33:54.124624 139850290401280 ddar.py:60] Depth 5/1000 time = 5.669662237167358
I0123 15:34:01.363598 139850290401280 ddar.py:60] Depth 6/1000 time = 7.238163471221924
I0123 15:34:01.487119 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:34:01.487220 139850290401280 alphageometry.py:566] LM output (score=-3.073922): "m : P c e g m 17 ;"
I0123 15:34:01.487259 139850290401280 alphageometry.py:567] Translation: "m = on_pline m g c e"

I0123 15:34:01.487311 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_pline m g c e ? coll h k j"
I0123 15:34:01.487521 139850290401280 graph.py:498] 
I0123 15:34:01.487576 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_pline m g c e ? coll h k j
I0123 15:34:02.707974 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1330897808074951
I0123 15:34:05.878961 139850290401280 ddar.py:60] Depth 2/1000 time = 3.1707797050476074
I0123 15:34:13.167650 139850290401280 ddar.py:60] Depth 3/1000 time = 7.288429021835327
I0123 15:34:17.811157 139850290401280 ddar.py:60] Depth 4/1000 time = 4.643242835998535
I0123 15:34:22.495073 139850290401280 ddar.py:60] Depth 5/1000 time = 4.683627128601074
I0123 15:34:28.649181 139850290401280 ddar.py:60] Depth 6/1000 time = 6.1534974575042725
I0123 15:34:28.754742 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:34:28.754993 139850290401280 alphageometry.py:566] LM output (score=-3.095256): "m : P c f d m 17 ;"
I0123 15:34:28.755034 139850290401280 alphageometry.py:567] Translation: "m = on_pline m d c f"

I0123 15:34:28.755074 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_pline m d c f ? coll h k j"
I0123 15:34:28.755231 139850290401280 graph.py:498] 
I0123 15:34:28.755281 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_pline m d c f ? coll h k j
I0123 15:34:29.999705 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1527080535888672
I0123 15:34:33.041696 139850290401280 ddar.py:60] Depth 2/1000 time = 3.041792869567871
I0123 15:34:40.688863 139850290401280 ddar.py:60] Depth 3/1000 time = 7.646937370300293
I0123 15:34:45.111089 139850290401280 ddar.py:60] Depth 4/1000 time = 4.421926259994507
I0123 15:34:49.560159 139850290401280 ddar.py:60] Depth 5/1000 time = 4.448681592941284
I0123 15:34:55.608224 139850290401280 ddar.py:60] Depth 6/1000 time = 6.047492742538452
I0123 15:34:55.718525 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:34:55.718602 139850290401280 alphageometry.py:566] LM output (score=-3.123616): "m : C e f m 17 D e f f m 18 ;"
I0123 15:34:55.718641 139850290401280 alphageometry.py:567] Translation: "m = on_line m e f, on_circle m f e"

I0123 15:34:55.718687 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_line m e f, on_circle m f e ? coll h k j"
I0123 15:34:55.718865 139850290401280 graph.py:498] 
I0123 15:34:55.718921 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_line m e f, on_circle m f e ? coll h k j
I0123 15:34:57.098103 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2701599597930908
I0123 15:35:00.459365 139850290401280 ddar.py:60] Depth 2/1000 time = 3.3610429763793945
I0123 15:35:08.005110 139850290401280 ddar.py:60] Depth 3/1000 time = 7.545514822006226
I0123 15:35:12.918571 139850290401280 ddar.py:60] Depth 4/1000 time = 4.9132068157196045
I0123 15:35:19.431138 139850290401280 ddar.py:60] Depth 5/1000 time = 6.5123162269592285
I0123 15:35:24.365558 139850290401280 ddar.py:60] Depth 6/1000 time = 4.933833360671997
I0123 15:35:24.475871 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:35:24.475942 139850290401280 alphageometry.py:566] LM output (score=-3.154081): "m : C a b m 17 D a f f m 18 ;"
I0123 15:35:24.475978 139850290401280 alphageometry.py:567] Translation: "m = on_line m a b, on_circle m f a"

I0123 15:35:24.476018 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_line m a b, on_circle m f a ? coll h k j"
I0123 15:35:24.476178 139850290401280 graph.py:498] 
I0123 15:35:24.476230 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_line m a b, on_circle m f a ? coll h k j
I0123 15:35:25.851342 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2698605060577393
I0123 15:35:30.456314 139850290401280 ddar.py:60] Depth 2/1000 time = 4.604752779006958
I0123 15:35:35.169598 139850290401280 ddar.py:60] Depth 3/1000 time = 4.712977886199951
I0123 15:35:41.447466 139850290401280 ddar.py:60] Depth 4/1000 time = 6.277510404586792
I0123 15:35:46.223622 139850290401280 ddar.py:60] Depth 5/1000 time = 4.775875806808472
I0123 15:35:52.514429 139850290401280 ddar.py:60] Depth 6/1000 time = 6.290231704711914
I0123 15:35:57.148306 139850290401280 ddar.py:60] Depth 7/1000 time = 4.527849197387695
I0123 15:36:03.532707 139850290401280 ddar.py:60] Depth 8/1000 time = 6.384173631668091
I0123 15:36:08.600916 139850290401280 ddar.py:60] Depth 9/1000 time = 5.056827545166016
I0123 15:36:08.601167 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:36:08.601218 139850290401280 alphageometry.py:566] LM output (score=-3.174236): "m : T a e h m 17 ;"
I0123 15:36:08.601253 139850290401280 alphageometry.py:567] Translation: "m = on_tline m h a e"

I0123 15:36:08.601298 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_tline m h a e ? coll h k j"
I0123 15:36:08.601455 139850290401280 graph.py:498] 
I0123 15:36:08.601510 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_tline m h a e ? coll h k j
I0123 15:36:09.823473 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1350197792053223
I0123 15:36:12.963456 139850290401280 ddar.py:60] Depth 2/1000 time = 3.139798164367676
I0123 15:36:20.375766 139850290401280 ddar.py:60] Depth 3/1000 time = 7.412103652954102
I0123 15:36:25.206238 139850290401280 ddar.py:60] Depth 4/1000 time = 4.830179929733276
I0123 15:36:31.661254 139850290401280 ddar.py:60] Depth 5/1000 time = 6.4547107219696045
I0123 15:36:36.487694 139850290401280 ddar.py:60] Depth 6/1000 time = 4.825796365737915
I0123 15:36:36.603979 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:36:36.604053 139850290401280 alphageometry.py:566] LM output (score=-3.185565): "m : T c e c m 17 ;"
I0123 15:36:36.604090 139850290401280 alphageometry.py:567] Translation: "m = on_tline m c c e"

I0123 15:36:36.604133 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_tline m c c e ? coll h k j"
I0123 15:36:36.604325 139850290401280 graph.py:498] 
I0123 15:36:36.604382 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_tline m c c e ? coll h k j
I0123 15:36:37.800114 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1084868907928467
I0123 15:36:40.773236 139850290401280 ddar.py:60] Depth 2/1000 time = 2.972928762435913
I0123 15:36:48.809066 139850290401280 ddar.py:60] Depth 3/1000 time = 8.035606861114502
I0123 15:36:54.158796 139850290401280 ddar.py:60] Depth 4/1000 time = 5.349461317062378
I0123 15:36:59.371478 139850290401280 ddar.py:60] Depth 5/1000 time = 5.2123939990997314
I0123 15:37:06.041983 139850290401280 ddar.py:60] Depth 6/1000 time = 6.669861078262329
I0123 15:37:06.165419 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:37:06.165493 139850290401280 alphageometry.py:566] LM output (score=-3.208437): "m : P c e h m 17 ;"
I0123 15:37:06.165737 139850290401280 alphageometry.py:567] Translation: "m = on_pline m h c e"

I0123 15:37:06.165779 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_pline m h c e ? coll h k j"
I0123 15:37:06.165942 139850290401280 graph.py:498] 
I0123 15:37:06.165996 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_pline m h c e ? coll h k j
I0123 15:37:07.401625 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1446726322174072
I0123 15:37:10.455708 139850290401280 ddar.py:60] Depth 2/1000 time = 3.0538406372070312
I0123 15:37:17.712811 139850290401280 ddar.py:60] Depth 3/1000 time = 7.25678825378418
I0123 15:37:22.446410 139850290401280 ddar.py:60] Depth 4/1000 time = 4.733210563659668
I0123 15:37:27.215412 139850290401280 ddar.py:60] Depth 5/1000 time = 4.768681764602661
I0123 15:37:33.481188 139850290401280 ddar.py:60] Depth 6/1000 time = 6.265115737915039
I0123 15:37:33.588597 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:37:33.588674 139850290401280 alphageometry.py:566] LM output (score=-3.229219): "m : T c e f m 17 ;"
I0123 15:37:33.588713 139850290401280 alphageometry.py:567] Translation: "m = on_tline m f c e"

I0123 15:37:33.588758 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_tline m f c e ? coll h k j"
I0123 15:37:33.588932 139850290401280 graph.py:498] 
I0123 15:37:33.588989 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_tline m f c e ? coll h k j
I0123 15:37:34.788002 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1121854782104492
I0123 15:37:37.566703 139850290401280 ddar.py:60] Depth 2/1000 time = 2.778496265411377
I0123 15:37:44.416894 139850290401280 ddar.py:60] Depth 3/1000 time = 6.849934339523315
I0123 15:37:49.597500 139850290401280 ddar.py:60] Depth 4/1000 time = 5.180299520492554
I0123 15:37:54.829108 139850290401280 ddar.py:60] Depth 5/1000 time = 5.231295585632324
I0123 15:38:01.694982 139850290401280 ddar.py:60] Depth 6/1000 time = 6.865073919296265
I0123 15:38:01.821803 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:38:01.821905 139850290401280 alphageometry.py:566] LM output (score=-3.326009): "m : T c e i m 17 ;"
I0123 15:38:01.821945 139850290401280 alphageometry.py:567] Translation: "m = on_tline m i c e"

I0123 15:38:01.821999 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_tline m i c e ? coll h k j"
I0123 15:38:01.822176 139850290401280 graph.py:498] 
I0123 15:38:01.822234 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_tline m i c e ? coll h k j
I0123 15:38:03.017939 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1090583801269531
I0123 15:38:05.949826 139850290401280 ddar.py:60] Depth 2/1000 time = 2.9316701889038086
I0123 15:38:14.059961 139850290401280 ddar.py:60] Depth 3/1000 time = 8.109850406646729
I0123 15:38:19.192603 139850290401280 ddar.py:60] Depth 4/1000 time = 5.132341384887695
I0123 15:38:24.382670 139850290401280 ddar.py:60] Depth 5/1000 time = 5.189772367477417
I0123 15:38:31.077541 139850290401280 ddar.py:60] Depth 6/1000 time = 6.6942079067230225
I0123 15:38:31.202848 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:38:31.202931 139850290401280 alphageometry.py:566] LM output (score=-3.400711): "m : T f k k m 17 ;"
I0123 15:38:31.202974 139850290401280 alphageometry.py:567] Translation: "m = on_tline m k f k"

I0123 15:38:31.203016 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_tline m k f k ? coll h k j"
I0123 15:38:31.203171 139850290401280 graph.py:498] 
I0123 15:38:31.203224 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_tline m k f k ? coll h k j
I0123 15:38:32.393703 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1039791107177734
I0123 15:38:35.384717 139850290401280 ddar.py:60] Depth 2/1000 time = 2.9908010959625244
I0123 15:38:40.856117 139850290401280 ddar.py:60] Depth 3/1000 time = 5.47114634513855
I0123 15:38:47.167486 139850290401280 ddar.py:60] Depth 4/1000 time = 6.311003923416138
I0123 15:38:51.854182 139850290401280 ddar.py:60] Depth 5/1000 time = 4.686389207839966
I0123 15:38:56.562876 139850290401280 ddar.py:60] Depth 6/1000 time = 4.708133220672607
I0123 15:38:56.684817 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:38:56.684899 139850290401280 alphageometry.py:566] LM output (score=-3.428663): "m : P c e l m 17 ;"
I0123 15:38:56.684938 139850290401280 alphageometry.py:567] Translation: "m = on_pline m l c e"

I0123 15:38:56.684983 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_pline m l c e ? coll h k j"
I0123 15:38:56.685150 139850290401280 graph.py:498] 
I0123 15:38:56.685210 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_pline m l c e ? coll h k j
I0123 15:38:59.454706 139850290401280 ddar.py:60] Depth 1/1000 time = 2.6811063289642334
I0123 15:39:02.336770 139850290401280 ddar.py:60] Depth 2/1000 time = 2.881834030151367
I0123 15:39:06.752819 139850290401280 ddar.py:60] Depth 3/1000 time = 4.415805339813232
I0123 15:39:11.361807 139850290401280 ddar.py:60] Depth 4/1000 time = 4.608715772628784
I0123 15:39:17.599709 139850290401280 ddar.py:60] Depth 5/1000 time = 6.237622976303101
I0123 15:39:22.253113 139850290401280 ddar.py:60] Depth 6/1000 time = 4.652822017669678
I0123 15:39:22.360224 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:39:22.360310 139850290401280 alphageometry.py:566] LM output (score=-3.464761): "m : P c e i m 17 ;"
I0123 15:39:22.360350 139850290401280 alphageometry.py:567] Translation: "m = on_pline m i c e"

I0123 15:39:22.360395 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_pline m i c e ? coll h k j"
I0123 15:39:22.360587 139850290401280 graph.py:498] 
I0123 15:39:22.360651 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_pline m i c e ? coll h k j
I0123 15:39:23.578246 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1265966892242432
I0123 15:39:28.298060 139850290401280 ddar.py:60] Depth 2/1000 time = 4.719496488571167
I0123 15:39:33.857190 139850290401280 ddar.py:60] Depth 3/1000 time = 5.558778285980225
I0123 15:39:38.611255 139850290401280 ddar.py:60] Depth 4/1000 time = 4.753746509552002
I0123 15:39:44.942890 139850290401280 ddar.py:60] Depth 5/1000 time = 6.331346035003662
I0123 15:39:49.674847 139850290401280 ddar.py:60] Depth 6/1000 time = 4.731336832046509
I0123 15:39:49.779736 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:39:49.779809 139850290401280 alphageometry.py:566] LM output (score=-3.494134): "m : T a e e m 17 ;"
I0123 15:39:49.779850 139850290401280 alphageometry.py:567] Translation: "m = on_tline m e a e"

I0123 15:39:49.779896 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_tline m e a e ? coll h k j"
I0123 15:39:49.780070 139850290401280 graph.py:498] 
I0123 15:39:49.780128 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_tline m e a e ? coll h k j
I0123 15:39:51.001989 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1343355178833008
I0123 15:39:54.150412 139850290401280 ddar.py:60] Depth 2/1000 time = 3.1482176780700684
I0123 15:40:02.285218 139850290401280 ddar.py:60] Depth 3/1000 time = 8.134560108184814
I0123 15:40:07.024991 139850290401280 ddar.py:60] Depth 4/1000 time = 4.739471912384033
I0123 15:40:13.428962 139850290401280 ddar.py:60] Depth 5/1000 time = 6.403624773025513
I0123 15:40:18.176651 139850290401280 ddar.py:60] Depth 6/1000 time = 4.747063875198364
I0123 15:40:18.294032 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:40:18.294146 139850290401280 alphageometry.py:566] LM output (score=-3.503886): "m : T a e b m 17 ;"
I0123 15:40:18.294219 139850290401280 alphageometry.py:567] Translation: "m = on_tline m b a e"

I0123 15:40:18.294270 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_tline m b a e ? coll h k j"
I0123 15:40:18.294446 139850290401280 graph.py:498] 
I0123 15:40:18.294506 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_tline m b a e ? coll h k j
I0123 15:40:19.511776 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1255970001220703
I0123 15:40:22.562150 139850290401280 ddar.py:60] Depth 2/1000 time = 3.0501749515533447
I0123 15:40:30.204505 139850290401280 ddar.py:60] Depth 3/1000 time = 7.642143487930298
I0123 15:40:34.925484 139850290401280 ddar.py:60] Depth 4/1000 time = 4.720716238021851
I0123 15:40:39.658441 139850290401280 ddar.py:60] Depth 5/1000 time = 4.732678413391113
I0123 15:40:45.993216 139850290401280 ddar.py:60] Depth 6/1000 time = 6.334191083908081
I0123 15:40:46.109456 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:40:46.109531 139850290401280 alphageometry.py:566] LM output (score=-3.506251): "m : C b f m 17 D b f f m 18 ;"
I0123 15:40:46.109569 139850290401280 alphageometry.py:567] Translation: "m = on_line m b f, on_circle m f b"

I0123 15:40:46.109612 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_line m b f, on_circle m f b ? coll h k j"
I0123 15:40:46.109776 139850290401280 graph.py:498] 
I0123 15:40:46.109832 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l b e, on_bline l e b; m = on_line m b f, on_circle m f b ? coll h k j
I0123 15:40:47.487127 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2716567516326904
I0123 15:40:50.664054 139850290401280 ddar.py:60] Depth 2/1000 time = 3.1767027378082275
I0123 15:40:57.454190 139850290401280 ddar.py:60] Depth 3/1000 time = 6.789901256561279
I0123 15:41:02.138904 139850290401280 ddar.py:60] Depth 4/1000 time = 4.684434413909912
I0123 15:41:08.559922 139850290401280 ddar.py:60] Depth 5/1000 time = 6.420696496963501
I0123 15:41:13.267301 139850290401280 ddar.py:60] Depth 6/1000 time = 4.706812620162964
I0123 15:41:13.377425 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:41:13.377506 139850290401280 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : C a b f 03 C c e f 04 ; g : D a g c g 05 D a g d g 06 ; h : D b h c h 07 D c h d h 08 ; i : D b i d i 09 D b i e i 10 ; j : D a j e j 11 D d j e j 12 ; k : C d f k 13 C g i k 14 ? C h k j {F1} x00 l : C a b l 15 D a l b l 16 ; x00
I0123 15:41:23.252109 139850290401280 alphageometry.py:566] LM output (score=-0.698096): "m : C a c m 17 D a m c m 18 ;"
I0123 15:41:23.252307 139850290401280 alphageometry.py:567] Translation: "m = on_line m a c, on_bline m c a"

I0123 15:41:23.252353 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m a c, on_bline m c a ? coll h k j"
I0123 15:41:23.252514 139850290401280 graph.py:498] 
I0123 15:41:23.252598 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m a c, on_bline m c a ? coll h k j
I0123 15:41:24.670622 139850290401280 ddar.py:60] Depth 1/1000 time = 1.3100018501281738
I0123 15:41:30.152640 139850290401280 ddar.py:60] Depth 2/1000 time = 5.481781005859375
I0123 15:41:36.860138 139850290401280 ddar.py:60] Depth 3/1000 time = 6.707261085510254
I0123 15:41:44.581726 139850290401280 ddar.py:60] Depth 4/1000 time = 7.72128963470459
I0123 15:41:50.650228 139850290401280 ddar.py:60] Depth 5/1000 time = 6.068207263946533
I0123 15:41:58.329901 139850290401280 ddar.py:60] Depth 6/1000 time = 7.6789710521698
I0123 15:41:58.469529 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:41:58.469599 139850290401280 alphageometry.py:566] LM output (score=-0.719640): "m : C b e m 17 D b m e m 18 ;"
I0123 15:41:58.469637 139850290401280 alphageometry.py:567] Translation: "m = on_line m b e, on_bline m e b"

I0123 15:41:58.469686 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m b e, on_bline m e b ? coll h k j"
I0123 15:41:58.469849 139850290401280 graph.py:498] 
I0123 15:41:58.469902 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m b e, on_bline m e b ? coll h k j
I0123 15:41:59.876021 139850290401280 ddar.py:60] Depth 1/1000 time = 1.3010272979736328
I0123 15:42:03.497627 139850290401280 ddar.py:60] Depth 2/1000 time = 3.621392011642456
I0123 15:42:11.486303 139850290401280 ddar.py:60] Depth 3/1000 time = 7.988424301147461
I0123 15:42:19.996573 139850290401280 ddar.py:60] Depth 4/1000 time = 8.509989023208618
I0123 15:42:26.737909 139850290401280 ddar.py:60] Depth 5/1000 time = 6.741037607192993
I0123 15:42:35.160811 139850290401280 ddar.py:60] Depth 6/1000 time = 8.422184705734253
I0123 15:42:35.298248 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:42:35.298349 139850290401280 alphageometry.py:566] LM output (score=-0.898084): "m : C a e m 17 D a m e m 18 ;"
I0123 15:42:35.298391 139850290401280 alphageometry.py:567] Translation: "m = on_line m a e, on_bline m e a"

I0123 15:42:35.298433 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m a e, on_bline m e a ? coll h k j"
I0123 15:42:35.298597 139850290401280 graph.py:498] 
I0123 15:42:35.298651 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m a e, on_bline m e a ? coll h k j
I0123 15:42:36.701150 139850290401280 ddar.py:60] Depth 1/1000 time = 1.297715425491333
I0123 15:42:40.852047 139850290401280 ddar.py:60] Depth 2/1000 time = 4.150662422180176
I0123 15:42:49.683462 139850290401280 ddar.py:60] Depth 3/1000 time = 8.831168413162231
I0123 15:42:57.675174 139850290401280 ddar.py:60] Depth 4/1000 time = 7.991341590881348
I0123 15:43:03.909439 139850290401280 ddar.py:60] Depth 5/1000 time = 6.233786582946777
I0123 15:43:11.852367 139850290401280 ddar.py:60] Depth 6/1000 time = 7.942166566848755
I0123 15:43:11.990908 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:43:11.991003 139850290401280 alphageometry.py:566] LM output (score=-1.114379): "m : C b c m 17 D b m c m 18 ;"
I0123 15:43:11.991042 139850290401280 alphageometry.py:567] Translation: "m = on_line m b c, on_bline m c b"

I0123 15:43:11.991089 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m b c, on_bline m c b ? coll h k j"
I0123 15:43:11.991261 139850290401280 graph.py:498] 
I0123 15:43:11.991320 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m b c, on_bline m c b ? coll h k j
I0123 15:43:13.406040 139850290401280 ddar.py:60] Depth 1/1000 time = 1.3072147369384766
I0123 15:43:17.013201 139850290401280 ddar.py:60] Depth 2/1000 time = 3.606938600540161
I0123 15:43:25.641651 139850290401280 ddar.py:60] Depth 3/1000 time = 8.627995014190674
I0123 15:43:31.378867 139850290401280 ddar.py:60] Depth 4/1000 time = 5.736923694610596
I0123 15:43:38.772414 139850290401280 ddar.py:60] Depth 5/1000 time = 7.39325475692749
I0123 15:43:44.556815 139850290401280 ddar.py:60] Depth 6/1000 time = 5.783777952194214
I0123 15:43:44.694898 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:43:44.694990 139850290401280 alphageometry.py:566] LM output (score=-1.915871): "m : C a d m 17 D a d d m 18 ;"
I0123 15:43:44.695031 139850290401280 alphageometry.py:567] Translation: "m = on_line m a d, on_circle m d a"

I0123 15:43:44.695079 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m a d, on_circle m d a ? coll h k j"
I0123 15:43:44.695272 139850290401280 graph.py:498] 
I0123 15:43:44.695335 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m a d, on_circle m d a ? coll h k j
I0123 15:43:48.228717 139850290401280 ddar.py:60] Depth 1/1000 time = 3.4328699111938477
I0123 15:43:52.810594 139850290401280 ddar.py:60] Depth 2/1000 time = 4.581568956375122
I0123 15:44:02.403735 139850290401280 ddar.py:60] Depth 3/1000 time = 9.592752695083618
I0123 15:44:09.082815 139850290401280 ddar.py:60] Depth 4/1000 time = 6.678768157958984
I0123 15:44:17.486380 139850290401280 ddar.py:60] Depth 5/1000 time = 8.403250694274902
I0123 15:44:24.185748 139850290401280 ddar.py:60] Depth 6/1000 time = 6.698691368103027
I0123 15:44:24.334587 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:44:24.334661 139850290401280 alphageometry.py:566] LM output (score=-2.015963): "m : C a g m 17 D a m g m 18 ;"
I0123 15:44:24.334700 139850290401280 alphageometry.py:567] Translation: "m = on_line m a g, on_bline m g a"

I0123 15:44:24.334742 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m a g, on_bline m g a ? coll h k j"
I0123 15:44:24.334923 139850290401280 graph.py:498] 
I0123 15:44:24.334980 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m a g, on_bline m g a ? coll h k j
I0123 15:44:25.659235 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2167527675628662
I0123 15:44:30.208468 139850290401280 ddar.py:60] Depth 2/1000 time = 4.549018621444702
I0123 15:44:36.300314 139850290401280 ddar.py:60] Depth 3/1000 time = 6.091597080230713
I0123 15:44:41.512319 139850290401280 ddar.py:60] Depth 4/1000 time = 5.211734056472778
I0123 15:44:48.263765 139850290401280 ddar.py:60] Depth 5/1000 time = 6.751156568527222
I0123 15:44:53.304691 139850290401280 ddar.py:60] Depth 6/1000 time = 5.040332794189453
I0123 15:44:53.424044 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:44:53.424325 139850290401280 alphageometry.py:566] LM output (score=-2.414950): "m : C b d m 17 D b d d m 18 ;"
I0123 15:44:53.424370 139850290401280 alphageometry.py:567] Translation: "m = on_line m b d, on_circle m d b"

I0123 15:44:53.424414 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m b d, on_circle m d b ? coll h k j"
I0123 15:44:53.424588 139850290401280 graph.py:498] 
I0123 15:44:53.424645 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m b d, on_circle m d b ? coll h k j
I0123 15:44:54.998417 139850290401280 ddar.py:60] Depth 1/1000 time = 1.4725019931793213
I0123 15:45:01.113831 139850290401280 ddar.py:60] Depth 2/1000 time = 6.115041017532349
I0123 15:45:08.405227 139850290401280 ddar.py:60] Depth 3/1000 time = 7.291109561920166
I0123 15:45:16.522057 139850290401280 ddar.py:60] Depth 4/1000 time = 8.116548538208008
I0123 15:45:23.011585 139850290401280 ddar.py:60] Depth 5/1000 time = 6.489256381988525
I0123 15:45:31.172467 139850290401280 ddar.py:60] Depth 6/1000 time = 8.160259485244751
I0123 15:45:31.327192 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:45:31.327279 139850290401280 alphageometry.py:566] LM output (score=-2.481808): "m : C b d m 17 D b m d m 18 ;"
I0123 15:45:31.327316 139850290401280 alphageometry.py:567] Translation: "m = on_line m b d, on_bline m d b"

I0123 15:45:31.327354 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m b d, on_bline m d b ? coll h k j"
I0123 15:45:31.327515 139850290401280 graph.py:498] 
I0123 15:45:31.327567 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m b d, on_bline m d b ? coll h k j
I0123 15:45:32.731503 139850290401280 ddar.py:60] Depth 1/1000 time = 1.293839931488037
I0123 15:45:37.668286 139850290401280 ddar.py:60] Depth 2/1000 time = 4.936578750610352
I0123 15:45:44.670637 139850290401280 ddar.py:60] Depth 3/1000 time = 7.0021045207977295
I0123 15:45:52.160302 139850290401280 ddar.py:60] Depth 4/1000 time = 7.489391565322876
I0123 15:45:57.819419 139850290401280 ddar.py:60] Depth 5/1000 time = 5.658850193023682
I0123 15:46:05.182590 139850290401280 ddar.py:60] Depth 6/1000 time = 7.362603664398193
I0123 15:46:05.313413 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:46:05.313500 139850290401280 alphageometry.py:566] LM output (score=-2.486249): "m : C b g m 17 D b m g m 18 ;"
I0123 15:46:05.313538 139850290401280 alphageometry.py:567] Translation: "m = on_line m b g, on_bline m g b"

I0123 15:46:05.313581 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m b g, on_bline m g b ? coll h k j"
I0123 15:46:05.313750 139850290401280 graph.py:498] 
I0123 15:46:05.313802 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m b g, on_bline m g b ? coll h k j
I0123 15:46:06.644763 139850290401280 ddar.py:60] Depth 1/1000 time = 1.224585771560669
I0123 15:46:09.544807 139850290401280 ddar.py:60] Depth 2/1000 time = 2.8997254371643066
I0123 15:46:15.805485 139850290401280 ddar.py:60] Depth 3/1000 time = 6.260454893112183
I0123 15:46:22.665454 139850290401280 ddar.py:60] Depth 4/1000 time = 6.859663248062134
I0123 15:46:27.834798 139850290401280 ddar.py:60] Depth 5/1000 time = 5.169050931930542
I0123 15:46:34.719966 139850290401280 ddar.py:60] Depth 6/1000 time = 6.884614706039429
I0123 15:46:34.842767 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:46:34.842833 139850290401280 alphageometry.py:566] LM output (score=-2.550592): "m : C c e m 17 D c m e m 18 ;"
I0123 15:46:34.842872 139850290401280 alphageometry.py:567] Translation: "m = on_line m c e, on_bline m e c"

I0123 15:46:34.842912 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m c e, on_bline m e c ? coll h k j"
I0123 15:46:34.843089 139850290401280 graph.py:498] 
I0123 15:46:34.843145 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m c e, on_bline m e c ? coll h k j
I0123 15:46:36.285941 139850290401280 ddar.py:60] Depth 1/1000 time = 1.3346562385559082
I0123 15:46:39.594861 139850290401280 ddar.py:60] Depth 2/1000 time = 3.3087120056152344
I0123 15:46:48.357497 139850290401280 ddar.py:60] Depth 3/1000 time = 8.762384414672852
I0123 15:46:55.151302 139850290401280 ddar.py:60] Depth 4/1000 time = 6.793494939804077
I0123 15:47:03.663526 139850290401280 ddar.py:60] Depth 5/1000 time = 8.511924266815186
I0123 15:47:10.462831 139850290401280 ddar.py:60] Depth 6/1000 time = 6.798688650131226
I0123 15:47:18.737052 139850290401280 ddar.py:60] Depth 7/1000 time = 8.111729621887207
I0123 15:47:18.737473 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:47:18.737555 139850290401280 alphageometry.py:566] LM output (score=-2.616461): "m : C d e m 17 D d m e m 18 ;"
I0123 15:47:18.737590 139850290401280 alphageometry.py:567] Translation: "m = on_line m d e, on_bline m e d"

I0123 15:47:18.737654 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m d e, on_bline m e d ? coll h k j"
I0123 15:47:18.737841 139850290401280 graph.py:498] 
I0123 15:47:18.737895 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m d e, on_bline m e d ? coll h k j
I0123 15:47:20.131600 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2876203060150146
I0123 15:47:25.078866 139850290401280 ddar.py:60] Depth 2/1000 time = 4.947030782699585
I0123 15:47:31.909092 139850290401280 ddar.py:60] Depth 3/1000 time = 6.8299970626831055
I0123 15:47:37.099319 139850290401280 ddar.py:60] Depth 4/1000 time = 5.189995288848877
I0123 15:47:43.993974 139850290401280 ddar.py:60] Depth 5/1000 time = 6.894389390945435
I0123 15:47:49.177754 139850290401280 ddar.py:60] Depth 6/1000 time = 5.183218002319336
I0123 15:47:49.302847 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:47:49.302916 139850290401280 alphageometry.py:566] LM output (score=-2.641690): "m : C a f m 17 D a m f m 18 ;"
I0123 15:47:49.302953 139850290401280 alphageometry.py:567] Translation: "m = on_line m a f, on_bline m f a"

I0123 15:47:49.302992 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m a f, on_bline m f a ? coll h k j"
I0123 15:47:49.303149 139850290401280 graph.py:498] 
I0123 15:47:49.303199 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m a f, on_bline m f a ? coll h k j
I0123 15:47:52.463306 139850290401280 ddar.py:60] Depth 1/1000 time = 3.0508944988250732
I0123 15:47:55.455851 139850290401280 ddar.py:60] Depth 2/1000 time = 2.9923243522644043
I0123 15:48:02.879083 139850290401280 ddar.py:60] Depth 3/1000 time = 7.423003673553467
I0123 15:48:08.274568 139850290401280 ddar.py:60] Depth 4/1000 time = 5.395216464996338
I0123 15:48:15.510232 139850290401280 ddar.py:60] Depth 5/1000 time = 7.235389471054077
I0123 15:48:20.925209 139850290401280 ddar.py:60] Depth 6/1000 time = 5.41408896446228
I0123 15:48:21.040126 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:48:21.040241 139850290401280 alphageometry.py:566] LM output (score=-2.678267): "m : C a g m 17 D a g g m 18 ;"
I0123 15:48:21.040278 139850290401280 alphageometry.py:567] Translation: "m = on_line m a g, on_circle m g a"

I0123 15:48:21.040333 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m a g, on_circle m g a ? coll h k j"
I0123 15:48:21.040530 139850290401280 graph.py:498] 
I0123 15:48:21.040585 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m a g, on_circle m g a ? coll h k j
I0123 15:48:22.512593 139850290401280 ddar.py:60] Depth 1/1000 time = 1.3725926876068115
I0123 15:48:27.693356 139850290401280 ddar.py:60] Depth 2/1000 time = 5.180527448654175
I0123 15:48:34.437793 139850290401280 ddar.py:60] Depth 3/1000 time = 6.74418568611145
I0123 15:48:41.864716 139850290401280 ddar.py:60] Depth 4/1000 time = 7.426666975021362
I0123 15:48:47.517808 139850290401280 ddar.py:60] Depth 5/1000 time = 5.652833938598633
I0123 15:48:53.160115 139850290401280 ddar.py:60] Depth 6/1000 time = 5.641765594482422
I0123 15:48:53.294382 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:48:53.294469 139850290401280 alphageometry.py:566] LM output (score=-2.718198): "m : C a j m 17 D a m j m 18 ;"
I0123 15:48:53.294508 139850290401280 alphageometry.py:567] Translation: "m = on_line m a j, on_bline m j a"

I0123 15:48:53.294545 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m a j, on_bline m j a ? coll h k j"
I0123 15:48:53.294699 139850290401280 graph.py:498] 
I0123 15:48:53.294747 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m a j, on_bline m j a ? coll h k j
I0123 15:48:56.327132 139850290401280 ddar.py:60] Depth 1/1000 time = 2.925676107406616
I0123 15:48:59.232592 139850290401280 ddar.py:60] Depth 2/1000 time = 2.905247926712036
I0123 15:49:04.450750 139850290401280 ddar.py:60] Depth 3/1000 time = 5.21791934967041
I0123 15:49:11.551635 139850290401280 ddar.py:60] Depth 4/1000 time = 7.100612640380859
I0123 15:49:16.801890 139850290401280 ddar.py:60] Depth 5/1000 time = 5.249987363815308
I0123 15:49:22.080262 139850290401280 ddar.py:60] Depth 6/1000 time = 5.277783393859863
I0123 15:49:22.198285 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:49:22.198350 139850290401280 alphageometry.py:566] LM output (score=-2.750036): "m : C a f m 17 D a f f m 18 ;"
I0123 15:49:22.198385 139850290401280 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 15:49:22.198432 139850290401280 alphageometry.py:566] LM output (score=-2.922528): "m : C c f m 17 T c f d m 18 ;"
I0123 15:49:22.198459 139850290401280 alphageometry.py:567] Translation: "m = on_line m c f, on_tline m d c f"

I0123 15:49:22.198494 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m c f, on_tline m d c f ? coll h k j"
I0123 15:49:22.198670 139850290401280 graph.py:498] 
I0123 15:49:22.198730 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m c f, on_tline m d c f ? coll h k j
I0123 15:49:25.369265 139850290401280 ddar.py:60] Depth 1/1000 time = 3.085407257080078
I0123 15:49:28.423783 139850290401280 ddar.py:60] Depth 2/1000 time = 3.0542941093444824
I0123 15:49:34.216386 139850290401280 ddar.py:60] Depth 3/1000 time = 5.792282581329346
I0123 15:49:42.795320 139850290401280 ddar.py:60] Depth 4/1000 time = 8.57852840423584
I0123 15:49:51.461446 139850290401280 ddar.py:60] Depth 5/1000 time = 8.665810108184814
I0123 15:49:58.327662 139850290401280 ddar.py:60] Depth 6/1000 time = 6.865537881851196
I0123 15:50:06.865750 139850290401280 ddar.py:60] Depth 7/1000 time = 8.378145933151245
I0123 15:50:06.866006 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:50:06.866062 139850290401280 alphageometry.py:566] LM output (score=-2.991406): "m : C c d m 17 T c d g m 18 ;"
I0123 15:50:06.866098 139850290401280 alphageometry.py:567] Translation: "m = on_line m c d, on_tline m g c d"

I0123 15:50:06.866163 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m c d, on_tline m g c d ? coll h k j"
I0123 15:50:06.866334 139850290401280 graph.py:498] 
I0123 15:50:06.866388 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m c d, on_tline m g c d ? coll h k j
I0123 15:50:08.147276 139850290401280 ddar.py:60] Depth 1/1000 time = 1.1931936740875244
I0123 15:50:11.080845 139850290401280 ddar.py:60] Depth 2/1000 time = 2.93337345123291
I0123 15:50:18.736020 139850290401280 ddar.py:60] Depth 3/1000 time = 7.654955863952637
I0123 15:50:24.209387 139850290401280 ddar.py:60] Depth 4/1000 time = 5.473116397857666
I0123 15:50:29.689601 139850290401280 ddar.py:60] Depth 5/1000 time = 5.479943037033081
I0123 15:50:36.933924 139850290401280 ddar.py:60] Depth 6/1000 time = 7.243658542633057
I0123 15:50:37.067291 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:50:37.067355 139850290401280 alphageometry.py:566] LM output (score=-3.010445): "m : C a i m 17 D a m i m 18 ;"
I0123 15:50:37.067392 139850290401280 alphageometry.py:567] Translation: "m = on_line m a i, on_bline m i a"

I0123 15:50:37.067429 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m a i, on_bline m i a ? coll h k j"
I0123 15:50:37.067601 139850290401280 graph.py:498] 
I0123 15:50:37.067651 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m a i, on_bline m i a ? coll h k j
I0123 15:50:38.392146 139850290401280 ddar.py:60] Depth 1/1000 time = 1.2163300514221191
I0123 15:50:41.296745 139850290401280 ddar.py:60] Depth 2/1000 time = 2.904390811920166
I0123 15:50:48.634042 139850290401280 ddar.py:60] Depth 3/1000 time = 7.337033271789551
I0123 15:50:53.759715 139850290401280 ddar.py:60] Depth 4/1000 time = 5.125302791595459
I0123 15:50:58.932871 139850290401280 ddar.py:60] Depth 5/1000 time = 5.1728198528289795
I0123 15:51:05.819758 139850290401280 ddar.py:60] Depth 6/1000 time = 6.88627815246582
I0123 15:51:05.938432 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:51:05.938504 139850290401280 alphageometry.py:566] LM output (score=-3.025969): "m : C a f m 17 D a f a m 18 ;"
I0123 15:51:05.938541 139850290401280 alphageometry.py:567] Translation: "m = on_line m a f, on_circle m a f"

I0123 15:51:05.938585 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m a f, on_circle m a f ? coll h k j"
I0123 15:51:05.938754 139850290401280 graph.py:498] 
I0123 15:51:05.938808 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m a f, on_circle m a f ? coll h k j
I0123 15:51:07.405840 139850290401280 ddar.py:60] Depth 1/1000 time = 1.353909969329834
I0123 15:51:12.206818 139850290401280 ddar.py:60] Depth 2/1000 time = 4.800738096237183
I0123 15:51:17.876500 139850290401280 ddar.py:60] Depth 3/1000 time = 5.669439792633057
I0123 15:51:24.626475 139850290401280 ddar.py:60] Depth 4/1000 time = 6.749711275100708
I0123 15:51:29.564676 139850290401280 ddar.py:60] Depth 5/1000 time = 4.937945604324341
I0123 15:51:36.410485 139850290401280 ddar.py:60] Depth 6/1000 time = 6.845136404037476
I0123 15:51:36.527006 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:51:36.527066 139850290401280 alphageometry.py:566] LM output (score=-3.027872): "m : C a d m 17 D a m d m 18 ;"
I0123 15:51:36.527102 139850290401280 alphageometry.py:567] Translation: "m = on_line m a d, on_bline m d a"

I0123 15:51:36.527140 139850290401280 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m a d, on_bline m d a ? coll h k j"
I0123 15:51:36.527292 139850290401280 graph.py:498] 
I0123 15:51:36.527342 139850290401280 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_line f a b, on_line f c e; g = circle g d a c; h = circle h d c b; i = circle i d b e; j = circle j d e a; k = on_line k g i, on_line k d f; l = on_line l a b, on_bline l b a; m = on_line m a d, on_bline m d a ? coll h k j
I0123 15:51:37.948838 139850290401280 ddar.py:60] Depth 1/1000 time = 1.3142216205596924
I0123 15:51:41.313368 139850290401280 ddar.py:60] Depth 2/1000 time = 3.3643484115600586
I0123 15:51:51.049272 139850290401280 ddar.py:60] Depth 3/1000 time = 9.735687017440796
I0123 15:51:56.631257 139850290401280 ddar.py:60] Depth 4/1000 time = 5.581728219985962
I0123 15:52:04.065059 139850290401280 ddar.py:60] Depth 5/1000 time = 7.433538436889648
I0123 15:52:04.065719 139850290401280 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:52:04.065764 139850290401280 alphageometry.py:585] Timeout.
