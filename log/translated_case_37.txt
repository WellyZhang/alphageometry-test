I0123 19:06:35.847084 140508591796224 inference_utils.py:69] Parsing gin configuration.
I0123 19:06:35.847182 140508591796224 inference_utils.py:71] Added Gin search path meliad_lib/meliad/transformer/configs
I0123 19:06:35.847373 140508591796224 inference_utils.py:74] Loading Gin config file base_htrans.gin
I0123 19:06:35.847406 140508591796224 inference_utils.py:74] Loading Gin config file size/medium_150M.gin
I0123 19:06:35.847434 140508591796224 inference_utils.py:74] Loading Gin config file options/positions_t5.gin
I0123 19:06:35.847461 140508591796224 inference_utils.py:74] Loading Gin config file options/lr_cosine_decay.gin
I0123 19:06:35.847489 140508591796224 inference_utils.py:74] Loading Gin config file options/seq_1024_nocache.gin
I0123 19:06:35.847516 140508591796224 inference_utils.py:74] Loading Gin config file geometry_150M_generate.gin
I0123 19:06:35.847543 140508591796224 inference_utils.py:76] Overriding Gin param DecoderOnlyLanguageModelGenerate.output_token_losses=True
I0123 19:06:35.847568 140508591796224 inference_utils.py:76] Overriding Gin param TransformerTaskConfig.batch_size=32
I0123 19:06:35.847593 140508591796224 inference_utils.py:76] Overriding Gin param TransformerTaskConfig.sequence_length=128
I0123 19:06:35.847620 140508591796224 inference_utils.py:76] Overriding Gin param Trainer.restore_state_variables=False
I0123 19:06:35.847664 140508591796224 resource_reader.py:50] system_path_file_exists:base_htrans.gin
E0123 19:06:35.847794 140508591796224 resource_reader.py:55] Path not found: base_htrans.gin
I0123 19:06:35.847990 140508591796224 resource_reader.py:50] system_path_file_exists:trainer_configuration.gin
E0123 19:06:35.848086 140508591796224 resource_reader.py:55] Path not found: trainer_configuration.gin
I0123 19:06:35.854367 140508591796224 resource_reader.py:50] system_path_file_exists:size/medium_150M.gin
E0123 19:06:35.854487 140508591796224 resource_reader.py:55] Path not found: size/medium_150M.gin
I0123 19:06:35.854808 140508591796224 resource_reader.py:50] system_path_file_exists:options/positions_t5.gin
E0123 19:06:35.854912 140508591796224 resource_reader.py:55] Path not found: options/positions_t5.gin
I0123 19:06:35.855191 140508591796224 resource_reader.py:50] system_path_file_exists:options/lr_cosine_decay.gin
E0123 19:06:35.855292 140508591796224 resource_reader.py:55] Path not found: options/lr_cosine_decay.gin
I0123 19:06:35.855701 140508591796224 resource_reader.py:50] system_path_file_exists:options/seq_1024_nocache.gin
E0123 19:06:35.855801 140508591796224 resource_reader.py:55] Path not found: options/seq_1024_nocache.gin
I0123 19:06:35.859411 140508591796224 training_loop.py:334] ==== Training loop: initializing model ====
I0123 19:06:35.958447 140508591796224 xla_bridge.py:660] Unable to initialize backend 'rocm': NOT_FOUND: Could not find registered platform with name: "rocm". Available platform names are: CUDA
I0123 19:06:35.959190 140508591796224 xla_bridge.py:660] Unable to initialize backend 'tpu': INTERNAL: Failed to open libtpu.so: libtpu.so: cannot open shared object file: No such file or directory
I0123 19:06:35.965739 140508591796224 training_loop.py:335] Process 0 of 1
I0123 19:06:35.965792 140508591796224 training_loop.py:336] Local device count = 1
I0123 19:06:35.965831 140508591796224 training_loop.py:337] Number of replicas = 1
I0123 19:06:35.965862 140508591796224 training_loop.py:339] Using random number seed 42
I0123 19:06:36.446163 140508591796224 training_loop.py:359] Initializing the model.
I0123 19:06:36.866104 140508591796224 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.866344 140508591796224 decoder_stack.py:316] dstack: scanning over 1 windows.
I0123 19:06:36.866445 140508591796224 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 19:06:36.866522 140508591796224 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 19:06:36.866598 140508591796224 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 19:06:36.866682 140508591796224 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 19:06:36.866756 140508591796224 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 19:06:36.866830 140508591796224 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 19:06:36.866903 140508591796224 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 19:06:36.866975 140508591796224 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 19:06:36.867045 140508591796224 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 19:06:36.867117 140508591796224 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 19:06:36.867188 140508591796224 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 19:06:36.867258 140508591796224 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 19:06:36.867298 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:36.867343 140508591796224 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 19:06:36.867457 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:36.867497 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:36.867528 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:36.869600 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.875012 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:36.886069 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.886356 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:36.890859 140508591796224 transformer_layer.py:213] tlayer: windowed attention.
I0123 19:06:36.901569 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:36.901626 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:36.901677 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:36.901715 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.901777 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.903006 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.903087 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.903934 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.906403 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.912206 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.913925 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.914007 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:36.914043 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:36.914103 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.914233 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:36.914563 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:36.914611 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:36.916532 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.916631 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:36.919533 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.919613 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:36.920114 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:36.930322 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:36.939128 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.939226 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:36.939523 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.939604 140508591796224 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 19:06:36.939713 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:36.939751 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:36.939782 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:36.941619 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.944137 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:36.949755 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.950020 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:36.952673 140508591796224 transformer_layer.py:213] tlayer: windowed attention.
I0123 19:06:36.956493 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:36.956548 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:36.956583 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:36.956614 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.956676 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.957241 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.957316 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.957682 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.958457 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.960939 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.961550 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.961626 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:36.961667 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:36.961726 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.961852 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:36.962177 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:36.962220 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:36.964155 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.964246 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:36.966775 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.966857 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:36.967291 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:36.969605 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:36.971504 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.971614 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:36.971907 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.971987 140508591796224 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 19:06:36.972096 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:36.972134 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:36.972164 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:36.974077 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.976453 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:36.982452 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.982707 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:36.985380 140508591796224 transformer_layer.py:213] tlayer: windowed attention.
I0123 19:06:36.989235 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:36.989293 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:36.989333 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:36.989365 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.989427 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.989993 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.990069 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.990432 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.991202 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.993738 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.994402 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.994479 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:36.994513 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:36.994570 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.994706 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:36.995027 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:36.995070 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:36.996977 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:36.997073 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.000408 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.000549 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:37.001057 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:37.003399 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.005328 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.005428 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.005732 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.005817 140508591796224 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 19:06:37.005930 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:37.005969 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:37.006000 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:37.007901 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.010341 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:37.015992 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.016259 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:37.018921 140508591796224 transformer_layer.py:213] tlayer: windowed attention.
I0123 19:06:37.022783 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:37.022841 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:37.022877 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:37.022908 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.022971 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.023544 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.023620 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.023986 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.024749 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.027298 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.027928 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.028006 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:37.028041 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:37.028099 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.028228 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:37.028553 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:37.028599 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.030510 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.030604 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.033166 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.033252 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:37.033687 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:37.035948 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.037847 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.037945 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.038239 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.038320 140508591796224 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 19:06:37.038428 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:37.038466 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:37.038496 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:37.040389 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.042793 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:37.048382 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.048641 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:37.051339 140508591796224 transformer_layer.py:213] tlayer: windowed attention.
I0123 19:06:37.055083 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:37.055139 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:37.055175 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:37.055206 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.055267 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.055827 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.055902 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.056263 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.057027 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.059878 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.060493 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.060572 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:37.060606 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:37.060663 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.060795 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:37.061115 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:37.061158 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.063053 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.063145 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.065706 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.065784 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:37.066215 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:37.068489 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.070447 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.070542 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.070835 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.070916 140508591796224 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 19:06:37.071024 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:37.071062 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:37.071092 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:37.072924 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.075324 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:37.080946 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.081196 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:37.083912 140508591796224 transformer_layer.py:213] tlayer: windowed attention.
I0123 19:06:37.087732 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:37.087787 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:37.087822 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:37.087853 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.087914 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.088517 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.088595 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.088955 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.089744 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.092241 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.092868 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.092947 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:37.092982 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:37.093040 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.093166 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:37.093485 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:37.093529 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.095425 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.095519 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.098232 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.098310 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:37.098730 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:37.101046 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.103107 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.103203 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.103496 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.103576 140508591796224 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 19:06:37.103685 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:37.103722 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:37.103751 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:37.105585 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.108040 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:37.113716 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.113972 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:37.116610 140508591796224 transformer_layer.py:213] tlayer: windowed attention.
I0123 19:06:37.120372 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:37.120427 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:37.120462 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:37.120491 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.120556 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.121117 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.121196 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.121554 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.122336 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.124821 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.125443 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.125520 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:37.125555 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:37.125613 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.125747 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:37.126067 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:37.126111 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.128075 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.128172 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.130677 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.130758 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:37.131182 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:37.133812 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.135715 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.135819 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.136114 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.136193 140508591796224 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 19:06:37.136301 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:37.136340 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:37.136370 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:37.277165 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.280443 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:37.286450 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.286772 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:37.289550 140508591796224 transformer_layer.py:213] tlayer: windowed attention.
I0123 19:06:37.293500 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:37.293560 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:37.293598 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:37.293630 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.293712 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.294337 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.294415 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.294787 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.295578 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.298225 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.298865 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.298945 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:37.298981 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:37.299043 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.299171 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:37.299519 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:37.299564 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.301466 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.301560 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.304371 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.304456 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:37.304905 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:37.307267 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.309360 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.309468 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.309778 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.309865 140508591796224 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 19:06:37.309977 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:37.310017 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:37.310048 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:37.312004 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.314415 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:37.320052 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.320315 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:37.323007 140508591796224 transformer_layer.py:213] tlayer: windowed attention.
I0123 19:06:37.326818 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:37.326874 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:37.326914 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:37.326945 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.327008 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.327573 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.327648 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.328005 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.328790 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.331351 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.331975 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.332053 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:37.332089 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:37.332147 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.332278 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:37.332599 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:37.332643 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.334553 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.334646 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.337225 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.337304 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:37.337746 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:37.340018 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.341976 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.342075 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.342370 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.342456 140508591796224 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 19:06:37.342567 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:37.342607 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:37.342637 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:37.344479 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.346927 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:37.352522 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.352779 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:37.355813 140508591796224 transformer_layer.py:213] tlayer: windowed attention.
I0123 19:06:37.359563 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:37.359618 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:37.359654 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:37.359685 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.359750 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.360351 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.360427 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.360787 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.361552 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.364040 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.364657 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.364735 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:37.364769 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:37.364828 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.364959 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:37.365283 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:37.365326 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.367229 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.367323 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.369911 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.369990 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:37.370419 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:37.372721 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.374629 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.374728 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.375021 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.375107 140508591796224 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 19:06:37.375218 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:37.375256 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:37.375286 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:37.377099 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.379559 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:37.385141 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.385400 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:37.388031 140508591796224 transformer_layer.py:213] tlayer: windowed attention.
I0123 19:06:37.391790 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:37.391847 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:37.391885 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:37.391916 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.391979 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.392537 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.392612 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.392974 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.393747 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.396217 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.396820 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.396895 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:37.396929 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:37.396988 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.397114 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:37.397437 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:37.397481 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.399429 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.399525 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.402285 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.402364 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:37.402796 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:37.405120 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.407018 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.407117 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.407567 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.407648 140508591796224 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 19:06:37.407766 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:37.407805 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:37.407835 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:37.409903 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.412274 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:37.417883 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.418140 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:37.420758 140508591796224 transformer_layer.py:213] tlayer: windowed attention.
I0123 19:06:37.424561 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:37.424618 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:37.424654 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:37.424684 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.424746 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.425313 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.425391 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.425754 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.426527 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.429028 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.430014 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.430094 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:37.430130 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:37.430193 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.430320 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:37.430644 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:37.430688 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.432585 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.432678 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.435195 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.435276 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:37.435764 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:37.437999 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.439903 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.439997 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.440290 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.440572 140508591796224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 19:06:37.440640 140508591796224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 19:06:37.440705 140508591796224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 19:06:37.440761 140508591796224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 19:06:37.440815 140508591796224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 19:06:37.440868 140508591796224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 19:06:37.440920 140508591796224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 19:06:37.440972 140508591796224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 19:06:37.441025 140508591796224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 19:06:37.441078 140508591796224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 19:06:37.441129 140508591796224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 19:06:37.441181 140508591796224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 19:06:37.441219 140508591796224 decoder_stack.py:344] dstack: Final layernorm.
I0123 19:06:37.444753 140508591796224 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:37.492579 140508591796224 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.492665 140508591796224 decoder_stack.py:333] dstack: autoregressive generator.
I0123 19:06:37.492717 140508591796224 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 19:06:37.492820 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:37.492858 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:37.492887 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:37.492950 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.495425 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:37.500903 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.501162 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:37.503823 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:37.520624 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:37.520682 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:37.520719 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:37.520750 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.520812 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.521955 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.522035 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.522755 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.524763 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.529562 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.530902 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.530988 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:37.531024 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:37.531085 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.531219 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:37.531329 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:37.531368 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.533283 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.533377 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.535847 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.535928 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:37.536037 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:37.538281 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.540241 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.540337 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.540634 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.540716 140508591796224 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 19:06:37.540825 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:37.540864 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:37.540894 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:37.540958 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.543251 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:37.548793 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.549052 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:37.551755 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:37.564909 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:37.564966 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:37.565001 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:37.565032 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.565092 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.565653 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.565730 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.566093 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.566800 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.569293 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.569913 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.569991 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:37.570030 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:37.570090 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.570217 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:37.570326 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:37.570368 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.572316 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.572410 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.574841 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.574920 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:37.575026 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:37.577231 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.579182 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.579279 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.579569 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.579651 140508591796224 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 19:06:37.579758 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:37.579796 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:37.579826 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:37.579890 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.582169 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:37.587638 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.587894 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:37.590591 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:37.603301 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:37.603357 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:37.603392 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:37.603423 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.603483 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.604035 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.604110 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.604478 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.605169 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.607672 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.608306 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.608382 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:37.608417 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:37.608487 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.608625 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:37.608734 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:37.608772 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.610721 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.610816 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.613286 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.613365 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:37.613473 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:37.615710 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.617645 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.617745 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.618035 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.618117 140508591796224 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 19:06:37.618227 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:37.618266 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:37.618297 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:37.618360 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.620611 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:37.626084 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.626343 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:37.629049 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:37.641751 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:37.641808 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:37.641844 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:37.641875 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.641937 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.642491 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.642571 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.642925 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.643607 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.646097 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.646727 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.646807 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:37.646841 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:37.646900 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.647034 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:37.647142 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:37.647180 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.649126 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.649221 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.651668 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.651748 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:37.651856 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:37.658663 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.660755 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.660863 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.661168 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.661256 140508591796224 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 19:06:37.661370 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:37.661411 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:37.661443 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:37.661511 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.664207 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:37.669771 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.670037 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:37.672735 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:37.685673 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:37.685731 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:37.685780 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:37.685811 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.685884 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.686486 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.686563 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.686925 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.687628 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.690262 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.690898 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.690976 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:37.691011 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:37.691070 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.691206 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:37.691316 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:37.691354 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.693248 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.693341 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.695771 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.695851 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:37.695958 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:37.698254 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.700148 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.700243 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.700528 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.700608 140508591796224 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 19:06:37.700716 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:37.700755 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:37.700785 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:37.700847 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.703105 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:37.708574 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.708829 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:37.711522 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:37.724178 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:37.724235 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:37.724271 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:37.724302 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.724363 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.724921 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.724998 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.725356 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.726066 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.728569 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.729186 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.729263 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:37.729297 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:37.729355 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.729486 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:37.729604 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:37.729652 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.731601 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.731694 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.734112 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.734191 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:37.734297 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:37.736506 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.738371 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.738466 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.738756 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.738836 140508591796224 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 19:06:37.738942 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:37.738980 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:37.739010 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:37.739073 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.741319 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:37.746881 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.747139 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:37.749761 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:37.762410 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:37.762466 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:37.762501 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:37.762531 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.762593 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.763149 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.763225 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.763578 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.764262 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.766758 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.767740 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.767818 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:37.767852 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:37.767910 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.768040 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:37.768150 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:37.768193 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.770092 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.770186 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.772584 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.772663 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:37.772769 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:37.774981 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.776910 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.777004 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.777291 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.777371 140508591796224 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 19:06:37.777478 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:37.777516 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:37.777546 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:37.777607 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.779845 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:37.785320 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.785586 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:37.788266 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:37.800886 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:37.800941 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:37.800976 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:37.801007 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.801069 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.801683 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.801760 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.802113 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.802809 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.805296 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.805922 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.806001 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:37.806036 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:37.806093 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.806226 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:37.806336 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:37.806380 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.808234 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.808327 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.810797 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.810877 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:37.810983 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:37.813190 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.815082 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.815178 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.815464 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.815543 140508591796224 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 19:06:37.815650 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:37.815688 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:37.815718 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:37.815780 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.818017 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:37.823497 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.823752 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:37.826381 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:37.838983 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:37.839039 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:37.839074 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:37.839103 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.839166 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.839723 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.839798 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.840157 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.840845 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.843358 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.844019 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.844096 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:37.844130 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:37.844188 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.844317 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:37.844427 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:37.844465 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.846351 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.846444 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.848857 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.848938 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:37.849044 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:37.851255 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.853196 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.853290 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.853576 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.853662 140508591796224 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 19:06:37.853771 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:37.853810 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:37.853841 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:37.853903 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.856155 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:37.862045 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.862302 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:37.864969 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:37.877964 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:37.878021 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:37.878057 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:37.878086 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.878147 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.878753 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.878829 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.879189 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.879882 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.882369 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.882985 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.883063 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:37.883097 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:37.883157 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.883287 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:37.883399 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:37.883439 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.885391 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.885493 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.888039 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.888120 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:37.888226 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:37.890478 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.892357 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.892451 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.892735 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.892815 140508591796224 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 19:06:37.892923 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:37.892962 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:37.892992 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:37.893052 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.895344 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:37.900855 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.901112 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:37.903789 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:37.916369 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:37.916425 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:37.916461 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:37.916492 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.916553 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.917105 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.917183 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.917541 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.918244 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.920719 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.921374 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.921451 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:37.921485 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:37.921543 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.921684 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:37.921799 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:37.921838 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.923738 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.923837 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.926284 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.926363 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:37.926469 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:37.928680 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.930613 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.930710 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.930997 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.931079 140508591796224 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 19:06:37.931188 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:37.931227 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:37.931257 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:37.931319 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.933548 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:37.939013 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.939273 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:37.942010 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:37.954682 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:37.954738 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:37.954773 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:37.954804 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.954866 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.955421 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.955498 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.955859 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.956599 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.959101 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.959722 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.959799 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:37.959832 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:37.959889 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.960015 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:37.960121 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:37.960159 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.962057 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.962152 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.964560 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.964640 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:37.964747 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:37.967041 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:37.968892 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.968987 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:37.969272 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:37.969362 140508591796224 decoder_stack.py:344] dstack: Final layernorm.
I0123 19:06:37.972223 140508591796224 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:38.027955 140508591796224 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.028041 140508591796224 decoder_stack.py:333] dstack: autoregressive generator.
I0123 19:06:38.028094 140508591796224 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 19:06:38.028200 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:38.028239 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:38.028269 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:38.028332 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.031027 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:38.036413 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.036673 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:38.039271 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:38.051539 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:38.051595 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:38.051631 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:38.051661 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.051723 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.052275 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.052351 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.052709 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.053386 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.055868 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.056481 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.056557 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:38.056592 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:38.056651 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.056780 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:38.056894 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:38.056933 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:38.058770 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.058865 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:38.061245 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.061324 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:38.061430 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:38.063685 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:38.065536 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.065631 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:38.065927 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.066008 140508591796224 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 19:06:38.066116 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:38.066155 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:38.066185 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:38.066248 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.068472 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:38.073830 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.074084 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:38.076708 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:38.088922 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:38.088979 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:38.089014 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:38.089045 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.089107 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.089665 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.089746 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.090103 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.090777 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.093260 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.093886 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.093965 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:38.094000 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:38.094058 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.094189 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:38.094297 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:38.094341 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:38.096163 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.096257 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:38.098638 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.098717 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:38.098826 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:38.101047 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:38.102892 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.102988 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:38.103275 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.103356 140508591796224 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 19:06:38.103463 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:38.103502 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:38.103532 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:38.103595 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.105823 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:38.111157 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.111413 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:38.114076 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:38.126317 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:38.126373 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:38.126409 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:38.126439 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.126500 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.127050 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.127126 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.127480 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.128165 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.130699 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.131315 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.131393 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:38.131428 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:38.131487 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.131615 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:38.131723 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:38.131762 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:38.133588 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.133690 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:38.136066 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.136144 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:38.136251 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:38.138945 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:38.140799 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.140895 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:38.141184 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.141267 140508591796224 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 19:06:38.141374 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:38.141413 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:38.141443 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:38.141505 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.143720 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:38.149082 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.149340 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:38.152009 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:38.164393 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:38.164448 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:38.164489 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:38.164528 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.164592 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.165147 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.165222 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.165580 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.166274 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.168780 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.169394 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.169468 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:38.169502 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:38.169560 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.169689 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:38.169797 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:38.169837 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:38.171701 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.171793 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:38.174193 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.174271 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:38.174376 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:38.176619 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:38.178484 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.178579 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:38.178861 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.178939 140508591796224 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 19:06:38.179044 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:38.179081 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:38.179110 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:38.179172 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.181374 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:38.186710 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.186961 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:38.189637 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:38.202137 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:38.202192 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:38.202226 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:38.202255 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.202315 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.202855 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.202930 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.203281 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.203958 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.206486 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.207101 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.207176 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:38.207210 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:38.207265 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.207388 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:38.207493 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:38.207530 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:38.209390 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.209486 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:38.211873 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.211949 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:38.212054 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:38.214320 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:38.216167 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.216259 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:38.216543 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.216622 140508591796224 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 19:06:38.216727 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:38.216765 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:38.216794 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:38.216854 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.219089 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:38.224421 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.224673 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:38.227367 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:38.239766 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:38.239820 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:38.239854 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:38.239884 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.239944 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.240495 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.240569 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.240931 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.241613 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.244162 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.244775 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.244850 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:38.244884 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:38.244940 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.245063 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:38.245169 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:38.245206 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:38.247072 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.247169 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:38.249533 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.249609 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:38.249720 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:38.252370 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:38.254222 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.254314 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:38.254597 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.254677 140508591796224 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 19:06:38.254781 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:38.254817 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:38.254845 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:38.254905 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.257109 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:38.262448 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.262700 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:38.265376 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:38.277717 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:38.277770 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:38.277804 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:38.277833 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.277893 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.278458 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.278533 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.278882 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.279571 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.282106 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.282719 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.282794 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:38.282828 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:38.282884 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.283007 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:38.283116 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:38.283152 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:38.285005 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.285097 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:38.287480 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.287557 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:38.287661 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:38.289915 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:38.291753 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.291847 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:38.292136 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.292217 140508591796224 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 19:06:38.292323 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:38.292361 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:38.292389 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:38.292451 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.294684 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:38.300062 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.300318 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:38.303000 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:38.315387 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:38.315441 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:38.315474 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:38.315503 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.315566 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.316117 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.316191 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.316545 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.317224 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.319756 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.320369 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.320443 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:38.320477 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:38.320533 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.320659 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:38.320765 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:38.320802 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:38.322654 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.322745 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:38.325137 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.325219 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:38.325326 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:38.327589 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:38.329423 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.329516 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:38.329808 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.329889 140508591796224 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 19:06:38.329994 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:38.330032 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:38.330061 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:38.330122 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.332329 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:38.337707 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.337958 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:38.340613 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:38.352964 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:38.353018 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:38.353051 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:38.353081 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.353140 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.353694 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.353769 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.354120 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.354801 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.357312 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.357923 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.357999 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:38.358032 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:38.358088 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.358210 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:38.358314 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:38.358350 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:38.360208 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.360297 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:38.362682 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.362764 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:38.362871 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:38.365494 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:38.367343 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.367437 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:38.367722 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.367803 140508591796224 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 19:06:38.367908 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:38.367945 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:38.367973 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:38.368034 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.370271 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:38.375637 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.375891 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:38.378553 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:38.390912 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:38.390965 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:38.391000 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:38.391031 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.391091 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.391644 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.391718 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.392073 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.392763 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.395287 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.395899 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.395974 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:38.396008 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:38.396062 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.396185 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:38.396290 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:38.396326 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:38.398691 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.398785 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:38.401161 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.401238 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:38.401350 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:38.403581 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:38.405403 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.405496 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:38.405786 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.405866 140508591796224 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 19:06:38.405971 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:38.406008 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:38.406036 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:38.406097 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.408321 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:38.413686 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.413939 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:38.416597 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:38.428900 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:38.428953 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:38.428987 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:38.429016 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.429075 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.429625 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.429709 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.430061 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.430746 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.433270 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.433888 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.433964 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:38.433997 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:38.434052 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.434182 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:38.434287 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:38.434324 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:38.436182 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.436273 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:38.438650 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.438728 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:38.438837 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:38.441072 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:38.442915 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.443010 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:38.443295 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.443375 140508591796224 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 19:06:38.443481 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:38.443518 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:38.443548 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:38.443610 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.445846 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:38.451241 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.451492 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:38.454167 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:38.466505 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:38.466558 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:38.466592 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:38.466621 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.466684 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.467236 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.467311 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.467667 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.468355 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.470874 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.471491 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.471567 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:38.471601 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:38.471656 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.471784 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:38.471894 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:38.471932 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:38.473792 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.473882 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:38.476241 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.476319 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:38.476423 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:38.479051 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:38.480898 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.480990 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:38.481275 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:38.481360 140508591796224 decoder_stack.py:344] dstack: Final layernorm.
I0123 19:06:38.484192 140508591796224 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:42.883924 140508591796224 optimizer_config.py:74] Using Flax Adafactor Optimizer. lr=1.000000, b1=0.900000
I0123 19:06:43.388639 140508591796224 training_loop.py:409] No working directory specified.
I0123 19:06:43.388747 140508591796224 training_loop.py:431] Loading pre-trained model from ag_ckpt_vocab:
I0123 19:06:43.389471 140508591796224 checkpoints.py:1062] Restoring legacy Flax checkpoint from ag_ckpt_vocab/checkpoint_10999999
I0123 19:06:46.688193 140508591796224 training_loop.py:447] Only restoring trainable parameters.
I0123 19:06:46.688839 140508591796224 training_loop.py:724] parameter: decoder/embed/embedding, shape (1024, 1024), size 1048576
I0123 19:06:46.688920 140508591796224 training_loop.py:724] parameter: decoder/final_layernorm/scale, shape (1024,), size 1024
I0123 19:06:46.688971 140508591796224 training_loop.py:724] parameter: decoder/transformer0/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 19:06:46.689015 140508591796224 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 19:06:46.689055 140508591796224 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.689093 140508591796224 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 19:06:46.689130 140508591796224 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.689168 140508591796224 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.689203 140508591796224 training_loop.py:724] parameter: decoder/transformer0/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 19:06:46.689239 140508591796224 training_loop.py:724] parameter: decoder/transformer0/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 19:06:46.689274 140508591796224 training_loop.py:724] parameter: decoder/transformer0/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.689310 140508591796224 training_loop.py:724] parameter: decoder/transformer0/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 19:06:46.689345 140508591796224 training_loop.py:724] parameter: decoder/transformer1/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 19:06:46.689381 140508591796224 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 19:06:46.689416 140508591796224 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.689452 140508591796224 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 19:06:46.689501 140508591796224 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.689536 140508591796224 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.689571 140508591796224 training_loop.py:724] parameter: decoder/transformer1/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 19:06:46.689606 140508591796224 training_loop.py:724] parameter: decoder/transformer1/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 19:06:46.689666 140508591796224 training_loop.py:724] parameter: decoder/transformer1/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.689713 140508591796224 training_loop.py:724] parameter: decoder/transformer1/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 19:06:46.689754 140508591796224 training_loop.py:724] parameter: decoder/transformer10/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 19:06:46.689790 140508591796224 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 19:06:46.689825 140508591796224 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.689859 140508591796224 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 19:06:46.689894 140508591796224 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.689929 140508591796224 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.689963 140508591796224 training_loop.py:724] parameter: decoder/transformer10/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 19:06:46.689997 140508591796224 training_loop.py:724] parameter: decoder/transformer10/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 19:06:46.690032 140508591796224 training_loop.py:724] parameter: decoder/transformer10/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.690069 140508591796224 training_loop.py:724] parameter: decoder/transformer10/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 19:06:46.690104 140508591796224 training_loop.py:724] parameter: decoder/transformer11/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 19:06:46.690140 140508591796224 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 19:06:46.690176 140508591796224 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.690211 140508591796224 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 19:06:46.690248 140508591796224 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.690283 140508591796224 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.690318 140508591796224 training_loop.py:724] parameter: decoder/transformer11/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 19:06:46.690353 140508591796224 training_loop.py:724] parameter: decoder/transformer11/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 19:06:46.690388 140508591796224 training_loop.py:724] parameter: decoder/transformer11/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.690423 140508591796224 training_loop.py:724] parameter: decoder/transformer11/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 19:06:46.690459 140508591796224 training_loop.py:724] parameter: decoder/transformer2/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 19:06:46.690494 140508591796224 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 19:06:46.690529 140508591796224 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.690563 140508591796224 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 19:06:46.690604 140508591796224 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.690641 140508591796224 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.690676 140508591796224 training_loop.py:724] parameter: decoder/transformer2/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 19:06:46.690711 140508591796224 training_loop.py:724] parameter: decoder/transformer2/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 19:06:46.690747 140508591796224 training_loop.py:724] parameter: decoder/transformer2/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.690781 140508591796224 training_loop.py:724] parameter: decoder/transformer2/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 19:06:46.690816 140508591796224 training_loop.py:724] parameter: decoder/transformer3/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 19:06:46.690850 140508591796224 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 19:06:46.690886 140508591796224 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.690920 140508591796224 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 19:06:46.690955 140508591796224 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.690989 140508591796224 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.691024 140508591796224 training_loop.py:724] parameter: decoder/transformer3/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 19:06:46.691058 140508591796224 training_loop.py:724] parameter: decoder/transformer3/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 19:06:46.691092 140508591796224 training_loop.py:724] parameter: decoder/transformer3/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.691126 140508591796224 training_loop.py:724] parameter: decoder/transformer3/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 19:06:46.691159 140508591796224 training_loop.py:724] parameter: decoder/transformer4/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 19:06:46.691194 140508591796224 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 19:06:46.691227 140508591796224 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.691262 140508591796224 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 19:06:46.691297 140508591796224 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.691330 140508591796224 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.691365 140508591796224 training_loop.py:724] parameter: decoder/transformer4/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 19:06:46.691400 140508591796224 training_loop.py:724] parameter: decoder/transformer4/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 19:06:46.691436 140508591796224 training_loop.py:724] parameter: decoder/transformer4/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.691470 140508591796224 training_loop.py:724] parameter: decoder/transformer4/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 19:06:46.691505 140508591796224 training_loop.py:724] parameter: decoder/transformer5/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 19:06:46.691546 140508591796224 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 19:06:46.691582 140508591796224 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.691618 140508591796224 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 19:06:46.691653 140508591796224 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.691688 140508591796224 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.691723 140508591796224 training_loop.py:724] parameter: decoder/transformer5/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 19:06:46.691758 140508591796224 training_loop.py:724] parameter: decoder/transformer5/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 19:06:46.691792 140508591796224 training_loop.py:724] parameter: decoder/transformer5/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.691827 140508591796224 training_loop.py:724] parameter: decoder/transformer5/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 19:06:46.691862 140508591796224 training_loop.py:724] parameter: decoder/transformer6/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 19:06:46.691896 140508591796224 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 19:06:46.691930 140508591796224 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.691964 140508591796224 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 19:06:46.691998 140508591796224 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.692032 140508591796224 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.692066 140508591796224 training_loop.py:724] parameter: decoder/transformer6/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 19:06:46.692100 140508591796224 training_loop.py:724] parameter: decoder/transformer6/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 19:06:46.692134 140508591796224 training_loop.py:724] parameter: decoder/transformer6/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.692169 140508591796224 training_loop.py:724] parameter: decoder/transformer6/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 19:06:46.692204 140508591796224 training_loop.py:724] parameter: decoder/transformer7/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 19:06:46.692238 140508591796224 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 19:06:46.692272 140508591796224 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.692305 140508591796224 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 19:06:46.692339 140508591796224 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.692374 140508591796224 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.692408 140508591796224 training_loop.py:724] parameter: decoder/transformer7/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 19:06:46.692443 140508591796224 training_loop.py:724] parameter: decoder/transformer7/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 19:06:46.692482 140508591796224 training_loop.py:724] parameter: decoder/transformer7/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.692518 140508591796224 training_loop.py:724] parameter: decoder/transformer7/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 19:06:46.692553 140508591796224 training_loop.py:724] parameter: decoder/transformer8/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 19:06:46.692587 140508591796224 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 19:06:46.692622 140508591796224 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.692656 140508591796224 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 19:06:46.692690 140508591796224 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.692725 140508591796224 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.692759 140508591796224 training_loop.py:724] parameter: decoder/transformer8/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 19:06:46.692794 140508591796224 training_loop.py:724] parameter: decoder/transformer8/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 19:06:46.692828 140508591796224 training_loop.py:724] parameter: decoder/transformer8/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.692862 140508591796224 training_loop.py:724] parameter: decoder/transformer8/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 19:06:46.692896 140508591796224 training_loop.py:724] parameter: decoder/transformer9/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 19:06:46.692929 140508591796224 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 19:06:46.692964 140508591796224 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.692997 140508591796224 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 19:06:46.693030 140508591796224 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.693064 140508591796224 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.693098 140508591796224 training_loop.py:724] parameter: decoder/transformer9/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 19:06:46.693132 140508591796224 training_loop.py:724] parameter: decoder/transformer9/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 19:06:46.693166 140508591796224 training_loop.py:724] parameter: decoder/transformer9/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 19:06:46.693200 140508591796224 training_loop.py:724] parameter: decoder/transformer9/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 19:06:46.693227 140508591796224 training_loop.py:725] Total parameters: 152072288
I0123 19:06:46.693459 140508591796224 training_loop.py:739] Total state size: 0
I0123 19:06:46.718738 140508591796224 training_loop.py:492] Training loop: creating task for mode beam_search
I0123 19:06:46.718992 140508591796224 training_loop.py:685] Creating logging writer (train) for mode beam_search
I0123 19:06:46.719321 140508591796224 training_loop.py:652] Compiling mode beam_search with jit.
I0123 19:06:46.719659 140508591796224 training_loop.py:89] registering functions: dict_keys([])
I0123 19:06:46.736208 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a ? coll h j i
I0123 19:06:47.778282 140508591796224 ddar.py:60] Depth 1/1000 time = 1.0096502304077148
I0123 19:06:50.632338 140508591796224 ddar.py:60] Depth 2/1000 time = 2.853919267654419
I0123 19:06:53.270693 140508591796224 ddar.py:60] Depth 3/1000 time = 2.6381936073303223
I0123 19:06:53.277153 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:06:53.277228 140508591796224 alphageometry.py:540] Depth 0. There are 1 nodes to expand:
I0123 19:06:53.277261 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00
I0123 19:06:53.277291 140508591796224 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00
I0123 19:06:53.397393 140508591796224 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.397553 140508591796224 decoder_stack.py:316] dstack: scanning over 1 windows.
I0123 19:06:53.397655 140508591796224 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 19:06:53.397731 140508591796224 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 19:06:53.397803 140508591796224 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 19:06:53.397872 140508591796224 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 19:06:53.397942 140508591796224 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 19:06:53.398009 140508591796224 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 19:06:53.398076 140508591796224 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 19:06:53.398143 140508591796224 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 19:06:53.398210 140508591796224 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 19:06:53.398278 140508591796224 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 19:06:53.398345 140508591796224 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 19:06:53.398412 140508591796224 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 19:06:53.398451 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:53.398494 140508591796224 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 19:06:53.398599 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:53.398637 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:53.398667 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:53.400506 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.402966 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:53.408615 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.408882 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:53.411482 140508591796224 transformer_layer.py:213] tlayer: windowed attention.
I0123 19:06:53.415294 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:53.415355 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:53.415390 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:53.415420 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.415481 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.416072 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.416146 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.416503 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.417267 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.419771 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.420390 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.420466 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:53.420499 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:53.420558 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.420684 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:53.421003 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:53.421046 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.423038 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.423133 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.425598 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.425682 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:53.426102 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:53.428359 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.430245 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.430341 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.430636 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.430717 140508591796224 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 19:06:53.430823 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:53.430861 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:53.430891 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:53.432754 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.435099 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:53.440643 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.440896 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:53.443989 140508591796224 transformer_layer.py:213] tlayer: windowed attention.
I0123 19:06:53.447632 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:53.447684 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:53.447717 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:53.447753 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.447814 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.448364 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.448439 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.448795 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.449544 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.452130 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.452791 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.452867 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:53.452900 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:53.452957 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.453082 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:53.453395 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:53.453436 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.455506 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.455597 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.458043 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.458121 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:53.458540 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:53.460832 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.462718 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.462812 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.463100 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.463181 140508591796224 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 19:06:53.463288 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:53.463325 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:53.463354 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:53.465096 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.467399 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:53.473006 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.473259 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:53.475831 140508591796224 transformer_layer.py:213] tlayer: windowed attention.
I0123 19:06:53.479452 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:53.479506 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:53.479540 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:53.479569 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.479635 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.480277 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.480360 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.480734 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.481514 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.484005 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.484626 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.484703 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:53.484738 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:53.484797 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.484925 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:53.485243 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:53.485286 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.487279 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.487371 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.489839 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.489917 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:53.490331 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:53.492545 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.494454 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.494548 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.494836 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.494915 140508591796224 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 19:06:53.495021 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:53.495058 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:53.495086 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:53.496932 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.499240 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:53.504754 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.505003 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:53.507539 140508591796224 transformer_layer.py:213] tlayer: windowed attention.
I0123 19:06:53.511179 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:53.511231 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:53.511265 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:53.511295 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.511359 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.511907 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.511982 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.512337 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.513094 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.515563 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.516178 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.516255 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:53.516288 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:53.516344 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.516469 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:53.516832 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:53.516874 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.518779 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.518870 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.521321 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.521399 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:53.521832 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:53.524062 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.526028 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.526122 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.526412 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.526491 140508591796224 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 19:06:53.526597 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:53.526635 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:53.526664 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:53.528439 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.530782 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:53.536450 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.536706 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:53.539290 140508591796224 transformer_layer.py:213] tlayer: windowed attention.
I0123 19:06:53.542896 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:53.542950 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:53.542983 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:53.543012 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.543121 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.543683 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.543757 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.544106 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.544856 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.547311 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.547921 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.547997 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:53.548031 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:53.548087 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.548211 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:53.548523 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:53.548564 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.550892 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.550987 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.553630 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.553714 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:53.554133 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:53.556544 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.558424 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.558518 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.558805 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.558885 140508591796224 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 19:06:53.558993 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:53.559031 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:53.559059 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:53.560888 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.563196 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:53.568747 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.568997 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:53.571636 140508591796224 transformer_layer.py:213] tlayer: windowed attention.
I0123 19:06:53.575224 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:53.575278 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:53.575312 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:53.575341 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.575402 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.575958 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.576039 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.576399 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.577161 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.579627 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.580356 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.580435 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:53.580470 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:53.580528 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.580675 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:53.580995 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:53.581037 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.582959 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.583051 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.585523 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.585600 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:53.586029 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:53.588356 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.590289 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.590383 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.590677 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.590757 140508591796224 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 19:06:53.590863 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:53.590900 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:53.590930 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:53.592719 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.595044 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:53.600688 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.600939 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:53.603511 140508591796224 transformer_layer.py:213] tlayer: windowed attention.
I0123 19:06:53.607151 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:53.607206 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:53.607240 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:53.607271 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.607381 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.607933 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.608013 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.608375 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.609136 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.611613 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.612225 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.612303 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:53.612335 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:53.612391 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.612516 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:53.612827 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:53.612869 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.614826 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.614919 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.617344 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.617421 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:53.617902 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:53.620134 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.622037 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.622133 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.622421 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.622501 140508591796224 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 19:06:53.622606 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:53.622644 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:53.622672 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:53.624491 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.626890 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:53.632450 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.632703 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:53.635318 140508591796224 transformer_layer.py:213] tlayer: windowed attention.
I0123 19:06:53.638935 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:53.638988 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:53.639022 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:53.639052 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.639114 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.639663 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.639738 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.640097 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.640847 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.643306 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.643964 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.644041 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:53.644074 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:53.644129 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.644257 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:53.644572 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:53.644615 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.646514 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.646607 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.649043 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.649121 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:53.649544 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:53.651861 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.653776 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.653871 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.654159 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.654239 140508591796224 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 19:06:53.654345 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:53.654383 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:53.654412 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:53.656296 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.658767 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:53.664683 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.664936 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:53.667465 140508591796224 transformer_layer.py:213] tlayer: windowed attention.
I0123 19:06:53.671050 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:53.671103 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:53.671137 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:53.671167 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.671228 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.671830 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.671905 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.672259 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.673017 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.675461 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.676069 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.676146 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:53.676179 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:53.676235 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.676359 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:53.676666 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:53.676707 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.678592 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.678684 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.681168 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.681244 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:53.681667 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:53.683891 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.685787 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.685881 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.686172 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.686252 140508591796224 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 19:06:53.686359 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:53.686396 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:53.686425 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:53.688194 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.690574 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:53.696118 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.696373 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:53.698956 140508591796224 transformer_layer.py:213] tlayer: windowed attention.
I0123 19:06:53.702573 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:53.702627 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:53.702661 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:53.702690 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.702802 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.703370 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.703444 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.703799 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.704568 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.707040 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.707657 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.707734 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:53.707767 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:53.707824 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.707951 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:53.708271 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:53.708313 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.710207 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.710300 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.712808 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.712884 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:53.713305 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:53.715559 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.717441 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.717534 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.717830 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.717911 140508591796224 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 19:06:53.718017 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:53.718054 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:53.718082 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:53.719849 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.722268 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:53.727828 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.728080 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:53.730654 140508591796224 transformer_layer.py:213] tlayer: windowed attention.
I0123 19:06:53.734257 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:53.734310 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:53.734344 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:53.734374 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.734487 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.735043 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.735119 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.735478 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.736240 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.738667 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.739277 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.739352 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:53.739386 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:53.739442 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.739568 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:53.739881 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:53.739922 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.741881 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.741973 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.744408 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.744486 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:53.744906 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:53.747159 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.749039 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.749131 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.749423 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.749504 140508591796224 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 19:06:53.749610 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:53.749652 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:53.749686 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:53.751529 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.753840 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:53.759533 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.759784 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:53.762349 140508591796224 transformer_layer.py:213] tlayer: windowed attention.
I0123 19:06:53.766012 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:53.766065 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:53.766098 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:53.766128 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.766188 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.766733 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.766808 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.767161 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.767908 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.770344 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.770958 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.771034 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:53.771068 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:53.771123 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.771248 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:53.771560 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:53.771601 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.773530 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.773620 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.776049 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.776126 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:53.776538 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:53.778759 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.780677 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.780771 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.781058 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.781300 140508591796224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 19:06:53.781364 140508591796224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 19:06:53.781420 140508591796224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 19:06:53.781471 140508591796224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 19:06:53.781521 140508591796224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 19:06:53.781571 140508591796224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 19:06:53.781621 140508591796224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 19:06:53.781680 140508591796224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 19:06:53.781731 140508591796224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 19:06:53.781781 140508591796224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 19:06:53.781831 140508591796224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 19:06:53.781880 140508591796224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 19:06:53.781914 140508591796224 decoder_stack.py:344] dstack: Final layernorm.
I0123 19:06:53.784780 140508591796224 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 19:06:53.829072 140508591796224 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.829154 140508591796224 decoder_stack.py:333] dstack: autoregressive generator.
I0123 19:06:53.829205 140508591796224 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 19:06:53.829307 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:53.829344 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:53.829372 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:53.829438 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.831795 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:53.837138 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.837393 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:53.839968 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:53.852791 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:53.852846 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:53.852879 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:53.852909 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.852969 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.853527 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.853602 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.853972 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.854661 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.857182 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.857958 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.858036 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:53.858070 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:53.858126 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.858253 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:53.858358 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:53.858394 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.860231 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.860322 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.862925 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.863003 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:53.863110 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:53.865343 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.867197 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.867290 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.867576 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.867654 140508591796224 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 19:06:53.867759 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:53.867795 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:53.867823 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:53.867888 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.870124 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:53.875466 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.875721 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:53.878370 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:53.890895 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:53.890951 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:53.890986 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:53.891016 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.891079 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.891627 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.891700 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.892052 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.892779 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.895247 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.895856 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.895932 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:53.895965 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:53.896021 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.896146 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:53.896250 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:53.896287 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.898125 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.898221 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.900649 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.900727 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:53.900833 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:53.903111 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.904934 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.905026 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.905316 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.905395 140508591796224 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 19:06:53.905501 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:53.905538 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:53.905567 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:53.905626 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.907921 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:53.913305 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.913557 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:53.916219 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:53.928441 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:53.928494 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:53.928528 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:53.928558 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.928617 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.929167 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.929241 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.929596 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.930337 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.932781 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.933391 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.933466 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:53.933500 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:53.933556 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.933686 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:53.933800 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:53.933836 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.935682 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.935772 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.938203 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.938281 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:53.938388 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:53.940634 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.942475 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.942569 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.942857 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.942937 140508591796224 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 19:06:53.943044 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:53.943081 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:53.943110 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:53.943171 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.945399 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:53.950747 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.951003 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:53.953706 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:53.966782 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:53.966836 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:53.966870 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:53.966899 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.966960 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.967511 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.967587 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.967943 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.968675 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.971155 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.971768 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.971845 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:53.971878 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:53.971934 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.972060 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:53.972167 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:53.972203 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.974039 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.974133 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.976528 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.976605 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:53.976710 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:53.978953 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:53.980839 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.980933 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:53.981225 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.981304 140508591796224 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 19:06:53.981410 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:53.981447 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:53.981476 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:53.981534 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.983753 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:53.989110 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:53.989367 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:53.992030 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:54.004377 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:54.004431 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:54.004465 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:54.004495 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.004556 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.005106 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.005182 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.005536 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.006278 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.008723 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.009338 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.009418 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:54.009452 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:54.009507 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.009634 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:54.009747 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:54.009783 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.011618 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.011709 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.014107 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.014185 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:54.014292 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:54.016539 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.018386 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.018479 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.018766 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.018845 140508591796224 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 19:06:54.018951 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:54.018987 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:54.019016 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:54.019076 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.021317 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:54.026690 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.026953 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:54.029606 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:54.041931 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:54.041986 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:54.042020 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:54.042049 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.042110 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.042661 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.042736 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.043091 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.043829 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.046268 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.046883 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.046959 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:54.046992 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:54.047049 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.047174 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:54.047280 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:54.047317 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.049162 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.049253 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.051652 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.051730 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:54.051836 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:54.054091 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.055925 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.056018 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.056308 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.056387 140508591796224 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 19:06:54.056495 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:54.056532 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:54.056561 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:54.056622 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.058852 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:54.064383 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.064643 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:54.067307 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:54.080179 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:54.080234 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:54.080268 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:54.080297 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.080358 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.080909 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.080984 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.081341 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.082083 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.084542 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.085155 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.085231 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:54.085263 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:54.085319 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.085444 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:54.085558 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:54.085595 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.087416 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.087507 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.089893 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.089971 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:54.090077 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:54.092319 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.094173 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.094265 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.094551 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.094631 140508591796224 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 19:06:54.094738 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:54.094775 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:54.094805 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:54.094864 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.097088 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:54.102463 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.102724 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:54.105385 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:54.117622 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:54.117681 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:54.117715 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:54.117744 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.117805 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.118353 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.118428 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.118783 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.119509 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.121974 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.122583 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.122659 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:54.122692 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:54.122748 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.122872 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:54.122978 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:54.123014 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.124835 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.124926 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.127333 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.127409 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:54.127515 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:54.129760 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.131593 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.131686 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.131974 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.132054 140508591796224 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 19:06:54.132161 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:54.132197 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:54.132225 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:54.132287 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.134503 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:54.139841 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.140096 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:54.142749 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:54.154990 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:54.155044 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:54.155079 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:54.155108 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.155170 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.155712 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.155787 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.156136 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.156806 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.159351 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.159969 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.160046 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:54.160079 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:54.160135 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.160262 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:54.160371 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:54.160409 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.162277 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.162368 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.164773 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.164852 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:54.164960 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:54.167194 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.169186 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.169280 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.169570 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.169656 140508591796224 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 19:06:54.169765 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:54.169802 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:54.169830 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:54.169889 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.172107 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:54.177424 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.177687 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:54.180384 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:54.193206 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:54.193259 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:54.193292 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:54.193321 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.193383 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.193938 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.194014 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.194372 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.195052 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.197548 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.198168 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.198244 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:54.198278 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:54.198334 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.198461 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:54.198569 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:54.198606 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.200442 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.200534 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.202928 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.203005 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:54.203111 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:54.205340 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.207185 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.207279 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.207567 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.207647 140508591796224 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 19:06:54.207753 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:54.207790 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:54.207818 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:54.207878 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.210098 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:54.215427 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.215681 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:54.218345 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:54.230620 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:54.230680 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:54.230715 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:54.230744 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.230806 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.231356 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.231431 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.231787 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.232463 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.234982 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.235592 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.235668 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:54.235702 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:54.235758 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.235885 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:54.235991 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:54.236028 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.237859 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.237951 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.240344 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.240420 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:54.240526 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:54.242760 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.244579 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.244672 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.244959 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.245039 140508591796224 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 19:06:54.245146 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:54.245185 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:54.245214 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:54.245274 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.247499 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:54.252840 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.253099 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:54.255767 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:54.267990 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:54.268044 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:54.268084 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:54.268116 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.268177 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.268730 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.268805 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.269162 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.269853 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.272345 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.272955 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.273031 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:54.273064 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:54.273119 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.273246 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:54.273352 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:54.273389 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.275224 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.275315 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.277693 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.277771 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:54.277876 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:54.280137 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.281970 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.282063 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.282353 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.282438 140508591796224 decoder_stack.py:344] dstack: Final layernorm.
I0123 19:06:54.285267 140508591796224 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 19:06:54.335269 140508591796224 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.335352 140508591796224 decoder_stack.py:333] dstack: autoregressive generator.
I0123 19:06:54.335405 140508591796224 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 19:06:54.335506 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:54.335543 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:54.335571 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:54.335631 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.337903 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:54.343345 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.343611 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:54.346205 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:54.358532 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:54.358586 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:54.358619 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:54.358648 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.358710 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.359260 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.359335 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.359693 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.360372 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.362833 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.363442 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.363518 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:54.363551 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:54.363607 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.363732 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:54.363837 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:54.363874 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.366161 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.366254 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.368655 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.368732 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:54.368837 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:54.371004 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.372838 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.372931 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.373220 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.373300 140508591796224 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 19:06:54.373406 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:54.373444 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:54.373473 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:54.373534 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.375760 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:54.381215 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.381479 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:54.384080 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:54.396378 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:54.396433 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:54.396467 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:54.396497 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.396558 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.397107 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.397180 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.397534 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.398218 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.400653 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.401262 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.401338 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:54.401372 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:54.401430 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.401556 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:54.401668 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:54.401706 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.403600 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.403691 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.406059 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.406137 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:54.406241 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:54.408385 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.410214 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.410308 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.410597 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.410678 140508591796224 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 19:06:54.410784 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:54.410822 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:54.410851 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:54.410912 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.413117 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:54.418535 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.418788 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:54.421358 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:54.433546 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:54.433600 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:54.433634 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:54.433674 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.433736 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.434283 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.434358 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.434713 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.435384 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.437822 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.438432 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.438509 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:54.438542 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:54.438598 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.438724 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:54.438831 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:54.438868 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.440762 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.440854 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.443257 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.443336 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:54.443443 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:54.445614 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.447440 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.447534 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.447824 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.447905 140508591796224 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 19:06:54.448011 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:54.448048 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:54.448076 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:54.448137 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.450369 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:54.455962 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.456217 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:54.458786 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:54.470978 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:54.471032 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:54.471066 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:54.471096 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.471156 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.471704 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.471777 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.472128 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.472791 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.475219 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.475834 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.475910 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:54.475942 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:54.475998 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.476124 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:54.476231 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:54.476269 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.478639 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.478731 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.481117 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.481194 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:54.481301 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:54.483460 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.485291 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.485385 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.485682 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.485764 140508591796224 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 19:06:54.485871 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:54.485908 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:54.485936 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:54.485996 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.488198 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:54.493614 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.493883 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:54.496446 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:54.508635 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:54.508689 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:54.508723 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:54.508753 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.508814 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.509361 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.509436 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.509802 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.510478 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.512904 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.513514 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.513589 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:54.513622 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:54.513685 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.513819 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:54.513925 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:54.513963 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.515865 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.515956 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.518345 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.518423 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:54.518529 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:54.520679 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.522509 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.522604 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.522893 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.522973 140508591796224 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 19:06:54.523077 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:54.523114 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:54.523144 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:54.523204 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.525416 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:54.530824 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.531075 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:54.533622 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:54.545818 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:54.545878 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:54.545915 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:54.545945 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.546006 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.546576 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.546654 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.547024 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.547708 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.550175 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.550809 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.550888 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:54.550923 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:54.550983 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.551112 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:54.551220 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:54.551257 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.553330 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.553421 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.555784 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.555861 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:54.555967 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:54.558123 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.559937 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.560030 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.560319 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.560399 140508591796224 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 19:06:54.560504 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:54.560540 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:54.560568 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:54.560627 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.562838 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:54.568271 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.568524 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:54.571106 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:54.583313 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:54.583367 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:54.583408 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:54.583440 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.583501 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.584051 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.584126 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.584477 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.585141 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.587566 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.588174 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.588248 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:54.588281 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:54.588336 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.588459 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:54.588565 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:54.588602 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.590894 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.590987 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.593353 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.593429 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:54.593534 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:54.595696 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.597516 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.597608 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.597902 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.597982 140508591796224 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 19:06:54.598088 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:54.598124 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:54.598152 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:54.598211 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.600400 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:54.605776 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.606031 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:54.608588 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:54.620903 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:54.620957 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:54.620991 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:54.621026 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.621090 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.621647 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.621727 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.622201 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.622872 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.625281 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.625890 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.625965 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:54.625998 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:54.626052 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.626175 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:54.626293 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:54.626333 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.628229 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.628319 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.630700 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.630777 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:54.630884 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:54.633022 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.634848 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.634941 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.635227 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.635304 140508591796224 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 19:06:54.635410 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:54.635446 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:54.635475 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:54.635535 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.637730 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:54.643103 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.643360 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:54.645931 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:54.658056 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:54.658110 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:54.658144 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:54.658174 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.658239 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.658784 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.658858 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.659211 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.659883 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.662340 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.662947 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.663020 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:54.663053 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:54.663109 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.663232 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:54.663337 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:54.663374 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.665255 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.665344 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.667711 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.667787 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:54.667893 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:54.670044 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.671860 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.671951 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.672237 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.672317 140508591796224 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 19:06:54.672421 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:54.672458 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:54.672488 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:54.672549 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.674751 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:54.680122 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.680373 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:54.682895 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:54.695014 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:54.695067 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:54.695100 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:54.695129 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.695193 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.695737 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.695810 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.696161 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.696830 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.699255 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.699864 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.699938 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:54.699970 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:54.700026 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.700147 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:54.700252 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:54.700289 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.702553 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.702645 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.705023 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.705099 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:54.705204 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:54.707381 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.709199 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.709291 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.709582 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.709666 140508591796224 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 19:06:54.709779 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:54.709815 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:54.709845 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:54.709905 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.712296 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:54.717704 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.717957 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:54.720491 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:54.732871 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:54.732925 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:54.732959 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:54.732988 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.733047 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.733598 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.733680 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.734035 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.734704 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.737136 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.737752 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.737828 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:54.737862 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:54.737918 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.738042 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:54.738149 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:54.738187 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.740075 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.740164 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.742542 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.742618 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:54.742723 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:54.744867 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.746682 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.746773 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.747057 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.747135 140508591796224 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 19:06:54.747239 140508591796224 transformer_layer.py:154] tlayer: recurrent = False
I0123 19:06:54.747277 140508591796224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 19:06:54.747306 140508591796224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 19:06:54.747366 140508591796224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.749558 140508591796224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 19:06:54.754962 140508591796224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.755216 140508591796224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 19:06:54.757790 140508591796224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 19:06:54.769936 140508591796224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 19:06:54.769989 140508591796224 attention.py:418] Single window, no scan.
I0123 19:06:54.770023 140508591796224 transformer_layer.py:389] tlayer: self-attention.
I0123 19:06:54.770053 140508591796224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.770112 140508591796224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.770661 140508591796224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.770735 140508591796224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.771084 140508591796224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.771743 140508591796224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.774163 140508591796224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.774769 140508591796224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.774843 140508591796224 transformer_layer.py:468] tlayer: End windows.
I0123 19:06:54.774876 140508591796224 transformer_layer.py:472] tlayer: final FFN.
I0123 19:06:54.774933 140508591796224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.775056 140508591796224 transformer_base.py:410] tbase: post-attention MLP.
I0123 19:06:54.775162 140508591796224 nn_components.py:325] mlp: activation = None
I0123 19:06:54.775199 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.777069 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.777157 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.779528 140508591796224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.779604 140508591796224 transformer_base.py:443] tbase: final FFN
I0123 19:06:54.779708 140508591796224 nn_components.py:320] mlp: hidden 4096, relu
I0123 19:06:54.781861 140508591796224 nn_components.py:329] mlp: final activation = None
I0123 19:06:54.783681 140508591796224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.783770 140508591796224 nn_components.py:261] mlp: residual
I0123 19:06:54.784054 140508591796224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:06:54.784136 140508591796224 decoder_stack.py:344] dstack: Final layernorm.
I0123 19:06:54.786962 140508591796224 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 19:07:07.432492 140508591796224 alphageometry.py:566] LM output (score=-1.503911): "k : D a k e k 11 D a k h k 12 ;"
I0123 19:07:07.432757 140508591796224 alphageometry.py:567] Translation: "k = on_bline k e a, on_bline k h a"

I0123 19:07:07.432818 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a ? coll h j i"
I0123 19:07:07.432962 140508591796224 graph.py:498] 
I0123 19:07:07.433017 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a ? coll h j i
I0123 19:07:08.833319 140508591796224 ddar.py:60] Depth 1/1000 time = 1.370478630065918
I0123 19:07:12.699538 140508591796224 ddar.py:60] Depth 2/1000 time = 3.8660571575164795
I0123 19:07:15.862314 140508591796224 ddar.py:60] Depth 3/1000 time = 3.162599563598633
I0123 19:07:19.278365 140508591796224 ddar.py:60] Depth 4/1000 time = 3.401188373565674
I0123 19:07:22.613824 140508591796224 ddar.py:60] Depth 5/1000 time = 3.335283041000366
I0123 19:07:22.619119 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:07:22.619208 140508591796224 alphageometry.py:566] LM output (score=-1.504252): "k : D a k e k 11 D a k j k 12 ;"
I0123 19:07:22.619244 140508591796224 alphageometry.py:567] Translation: "k = on_bline k e a, on_bline k j a"

I0123 19:07:22.619282 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a ? coll h j i"
I0123 19:07:22.619414 140508591796224 graph.py:498] 
I0123 19:07:22.619463 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a ? coll h j i
I0123 19:07:24.188030 140508591796224 ddar.py:60] Depth 1/1000 time = 1.5411326885223389
I0123 19:07:27.787204 140508591796224 ddar.py:60] Depth 2/1000 time = 3.5989792346954346
I0123 19:07:30.898650 140508591796224 ddar.py:60] Depth 3/1000 time = 3.111213207244873
I0123 19:07:34.051163 140508591796224 ddar.py:60] Depth 4/1000 time = 3.1515791416168213
I0123 19:07:37.408359 140508591796224 ddar.py:60] Depth 5/1000 time = 3.357017993927002
I0123 19:07:41.108015 140508591796224 ddar.py:60] Depth 6/1000 time = 3.6753475666046143
I0123 19:07:44.775172 140508591796224 ddar.py:60] Depth 7/1000 time = 3.666996479034424
I0123 19:07:48.427448 140508591796224 ddar.py:60] Depth 8/1000 time = 3.6520397663116455
I0123 19:07:48.433228 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:07:48.433340 140508591796224 alphageometry.py:566] LM output (score=-1.574060): "k : D a k g k 11 D a k i k 12 ;"
I0123 19:07:48.433377 140508591796224 alphageometry.py:567] Translation: "k = on_bline k g a, on_bline k i a"

I0123 19:07:48.433424 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a ? coll h j i"
I0123 19:07:48.433578 140508591796224 graph.py:498] 
I0123 19:07:48.433632 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a ? coll h j i
I0123 19:07:50.027788 140508591796224 ddar.py:60] Depth 1/1000 time = 1.5624675750732422
I0123 19:07:53.608450 140508591796224 ddar.py:60] Depth 2/1000 time = 3.5804851055145264
I0123 19:07:56.685268 140508591796224 ddar.py:60] Depth 3/1000 time = 3.076641321182251
I0123 19:07:59.811918 140508591796224 ddar.py:60] Depth 4/1000 time = 3.1257431507110596
I0123 19:08:03.201591 140508591796224 ddar.py:60] Depth 5/1000 time = 3.389439821243286
I0123 19:08:06.963260 140508591796224 ddar.py:60] Depth 6/1000 time = 3.737921953201294
I0123 19:08:10.620962 140508591796224 ddar.py:60] Depth 7/1000 time = 3.657520294189453
I0123 19:08:14.301131 140508591796224 ddar.py:60] Depth 8/1000 time = 3.6799821853637695
I0123 19:08:14.306751 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:08:14.306835 140508591796224 alphageometry.py:566] LM output (score=-1.579170): "k : D a c a k 11 D b c b k 12 ;"
I0123 19:08:14.306872 140508591796224 alphageometry.py:567] Translation: "k = on_circle k a c, on_circle k b c"

I0123 19:08:14.306909 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c ? coll h j i"
I0123 19:08:14.307064 140508591796224 graph.py:498] 
I0123 19:08:14.307118 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c ? coll h j i
I0123 19:08:15.864229 140508591796224 ddar.py:60] Depth 1/1000 time = 1.520606517791748
I0123 19:08:19.350693 140508591796224 ddar.py:60] Depth 2/1000 time = 3.4862892627716064
I0123 19:08:22.687032 140508591796224 ddar.py:60] Depth 3/1000 time = 3.33613920211792
I0123 19:08:26.058175 140508591796224 ddar.py:60] Depth 4/1000 time = 3.3709161281585693
I0123 19:08:29.623359 140508591796224 ddar.py:60] Depth 5/1000 time = 3.5451371669769287
I0123 19:08:33.114543 140508591796224 ddar.py:60] Depth 6/1000 time = 3.491008996963501
I0123 19:08:36.878536 140508591796224 ddar.py:60] Depth 7/1000 time = 3.753316879272461
I0123 19:08:36.879657 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:08:36.879752 140508591796224 alphageometry.py:566] LM output (score=-1.582767): "k : D a k g k 11 D g k i k 12 ;"
I0123 19:08:36.879793 140508591796224 alphageometry.py:567] Translation: "k = on_bline k g a, on_bline k i g"

I0123 19:08:36.879832 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i g ? coll h j i"
I0123 19:08:36.879977 140508591796224 graph.py:498] 
I0123 19:08:36.880031 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i g ? coll h j i
I0123 19:08:38.313813 140508591796224 ddar.py:60] Depth 1/1000 time = 1.3989603519439697
I0123 19:08:41.416189 140508591796224 ddar.py:60] Depth 2/1000 time = 3.1021769046783447
I0123 19:08:44.540224 140508591796224 ddar.py:60] Depth 3/1000 time = 3.1237339973449707
I0123 19:08:47.699395 140508591796224 ddar.py:60] Depth 4/1000 time = 3.1582510471343994
I0123 19:08:51.086812 140508591796224 ddar.py:60] Depth 5/1000 time = 3.387235164642334
I0123 19:08:54.832293 140508591796224 ddar.py:60] Depth 6/1000 time = 3.720453977584839
I0123 19:08:58.526922 140508591796224 ddar.py:60] Depth 7/1000 time = 3.694448709487915
I0123 19:09:02.219363 140508591796224 ddar.py:60] Depth 8/1000 time = 3.6922407150268555
I0123 19:09:02.224474 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:09:02.224569 140508591796224 alphageometry.py:566] LM output (score=-1.604487): "k : D a c c k 11 D a e e k 12 ;"
I0123 19:09:02.224607 140508591796224 alphageometry.py:567] Translation: "k = on_circle k c a, on_circle k e a"

I0123 19:09:02.224644 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k c a, on_circle k e a ? coll h j i"
I0123 19:09:02.224786 140508591796224 graph.py:498] 
I0123 19:09:02.224841 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k c a, on_circle k e a ? coll h j i
I0123 19:09:03.854644 140508591796224 ddar.py:60] Depth 1/1000 time = 1.594163417816162
I0123 19:09:07.384542 140508591796224 ddar.py:60] Depth 2/1000 time = 3.5297186374664307
I0123 19:09:10.725032 140508591796224 ddar.py:60] Depth 3/1000 time = 3.340306282043457
I0123 19:09:14.118285 140508591796224 ddar.py:60] Depth 4/1000 time = 3.3930752277374268
I0123 19:09:17.724826 140508591796224 ddar.py:60] Depth 5/1000 time = 3.5864174365997314
I0123 19:09:21.257511 140508591796224 ddar.py:60] Depth 6/1000 time = 3.532499313354492
I0123 19:09:24.857217 140508591796224 ddar.py:60] Depth 7/1000 time = 3.5896711349487305
I0123 19:09:24.858398 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:09:24.858509 140508591796224 alphageometry.py:566] LM output (score=-1.709849): "k : D a k e k 11 D e k j k 12 ;"
I0123 19:09:24.858545 140508591796224 alphageometry.py:567] Translation: "k = on_bline k e a, on_bline k j e"

I0123 19:09:24.858592 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j e ? coll h j i"
I0123 19:09:24.858745 140508591796224 graph.py:498] 
I0123 19:09:24.858800 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j e ? coll h j i
I0123 19:09:26.533890 140508591796224 ddar.py:60] Depth 1/1000 time = 1.644038438796997
I0123 19:09:30.250299 140508591796224 ddar.py:60] Depth 2/1000 time = 3.7162275314331055
I0123 19:09:33.360348 140508591796224 ddar.py:60] Depth 3/1000 time = 3.109870195388794
I0123 19:09:36.541671 140508591796224 ddar.py:60] Depth 4/1000 time = 3.1804375648498535
I0123 19:09:39.755282 140508591796224 ddar.py:60] Depth 5/1000 time = 3.2134273052215576
I0123 19:09:43.758513 140508591796224 ddar.py:60] Depth 6/1000 time = 3.9784035682678223
I0123 19:09:47.538209 140508591796224 ddar.py:60] Depth 7/1000 time = 3.779493570327759
I0123 19:09:51.278783 140508591796224 ddar.py:60] Depth 8/1000 time = 3.7403454780578613
I0123 19:09:51.284405 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:09:51.284507 140508591796224 alphageometry.py:566] LM output (score=-1.902246): "k : D a k c k 11 D c k j k 12 ;"
I0123 19:09:51.284544 140508591796224 alphageometry.py:567] Translation: "k = on_bline k c a, on_bline k j c"

I0123 19:09:51.284583 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k c a, on_bline k j c ? coll h j i"
I0123 19:09:51.284731 140508591796224 graph.py:498] 
I0123 19:09:51.284786 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k c a, on_bline k j c ? coll h j i
I0123 19:09:52.737671 140508591796224 ddar.py:60] Depth 1/1000 time = 1.3869309425354004
I0123 19:09:56.346257 140508591796224 ddar.py:60] Depth 2/1000 time = 3.6084437370300293
I0123 19:09:59.473765 140508591796224 ddar.py:60] Depth 3/1000 time = 3.1273434162139893
I0123 19:10:02.669821 140508591796224 ddar.py:60] Depth 4/1000 time = 3.1951780319213867
I0123 19:10:05.888524 140508591796224 ddar.py:60] Depth 5/1000 time = 3.218520164489746
I0123 19:10:09.973063 140508591796224 ddar.py:60] Depth 6/1000 time = 4.059450149536133
I0123 19:10:13.708010 140508591796224 ddar.py:60] Depth 7/1000 time = 3.734769344329834
I0123 19:10:17.469743 140508591796224 ddar.py:60] Depth 8/1000 time = 3.7615408897399902
I0123 19:10:17.475369 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:10:17.475456 140508591796224 alphageometry.py:566] LM output (score=-2.070569): "k : P a b c k 11 ;"
I0123 19:10:17.475493 140508591796224 alphageometry.py:567] Translation: "k = on_pline k c a b"

I0123 19:10:17.475547 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_pline k c a b ? coll h j i"
I0123 19:10:17.475690 140508591796224 graph.py:498] 
I0123 19:10:17.475742 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_pline k c a b ? coll h j i
I0123 19:10:18.657295 140508591796224 ddar.py:60] Depth 1/1000 time = 1.1652500629425049
I0123 19:10:21.731035 140508591796224 ddar.py:60] Depth 2/1000 time = 3.073601484298706
I0123 19:10:24.383883 140508591796224 ddar.py:60] Depth 3/1000 time = 2.652679443359375
I0123 19:10:24.393468 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:10:24.393546 140508591796224 alphageometry.py:566] LM output (score=-2.156126): "k : D a k b k 11 D b k d k 12 ;"
I0123 19:10:24.393583 140508591796224 alphageometry.py:567] Translation: "k = on_bline k b a, on_bline k d b"

I0123 19:10:24.393620 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k b a, on_bline k d b ? coll h j i"
I0123 19:10:24.393758 140508591796224 graph.py:498] 
I0123 19:10:24.393808 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k b a, on_bline k d b ? coll h j i
I0123 19:10:26.055686 140508591796224 ddar.py:60] Depth 1/1000 time = 1.620877981185913
I0123 19:10:29.682888 140508591796224 ddar.py:60] Depth 2/1000 time = 3.6270179748535156
I0123 19:10:32.819689 140508591796224 ddar.py:60] Depth 3/1000 time = 3.136591672897339
I0123 19:10:36.185334 140508591796224 ddar.py:60] Depth 4/1000 time = 3.3506996631622314
I0123 19:10:36.188954 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:10:36.189050 140508591796224 alphageometry.py:566] LM output (score=-2.210770): "k : D a c c k 11 D a d d k 12 ;"
I0123 19:10:36.189091 140508591796224 alphageometry.py:567] Translation: "k = on_circle k c a, on_circle k d a"

I0123 19:10:36.189129 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k c a, on_circle k d a ? coll h j i"
I0123 19:10:36.189277 140508591796224 graph.py:498] 
I0123 19:10:36.189330 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k c a, on_circle k d a ? coll h j i
I0123 19:10:38.919763 140508591796224 ddar.py:60] Depth 1/1000 time = 2.6907896995544434
I0123 19:10:47.394432 140508591796224 ddar.py:60] Depth 2/1000 time = 8.474494695663452
I0123 19:10:55.811558 140508591796224 ddar.py:60] Depth 3/1000 time = 8.416926383972168
I0123 19:10:55.850078 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:10:55.850176 140508591796224 alphageometry.py:566] LM output (score=-2.231279): "k : D a k j k 11 D c k j k 12 ;"
I0123 19:10:55.850212 140508591796224 alphageometry.py:567] Translation: "k = on_bline k j a, on_bline k j c"

I0123 19:10:55.850248 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k j a, on_bline k j c ? coll h j i"
I0123 19:10:55.850399 140508591796224 graph.py:498] 
I0123 19:10:55.850452 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k j a, on_bline k j c ? coll h j i
I0123 19:10:57.505272 140508591796224 ddar.py:60] Depth 1/1000 time = 1.6050474643707275
I0123 19:11:01.187971 140508591796224 ddar.py:60] Depth 2/1000 time = 3.682530641555786
I0123 19:11:04.358272 140508591796224 ddar.py:60] Depth 3/1000 time = 3.1701276302337646
I0123 19:11:07.327522 140508591796224 ddar.py:60] Depth 4/1000 time = 2.968383550643921
I0123 19:11:10.581913 140508591796224 ddar.py:60] Depth 5/1000 time = 3.254204273223877
I0123 19:11:14.693363 140508591796224 ddar.py:60] Depth 6/1000 time = 4.086461782455444
I0123 19:11:18.461923 140508591796224 ddar.py:60] Depth 7/1000 time = 3.7683775424957275
I0123 19:11:22.254114 140508591796224 ddar.py:60] Depth 8/1000 time = 3.7920143604278564
I0123 19:11:22.259907 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:11:22.260015 140508591796224 alphageometry.py:566] LM output (score=-2.349099): "k : D a k i k 11 D c k i k 12 ;"
I0123 19:11:22.260051 140508591796224 alphageometry.py:567] Translation: "k = on_bline k i a, on_bline k i c"

I0123 19:11:22.260087 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k i a, on_bline k i c ? coll h j i"
I0123 19:11:22.260238 140508591796224 graph.py:498] 
I0123 19:11:22.260291 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k i a, on_bline k i c ? coll h j i
I0123 19:11:23.673721 140508591796224 ddar.py:60] Depth 1/1000 time = 1.3551344871520996
I0123 19:11:27.375019 140508591796224 ddar.py:60] Depth 2/1000 time = 3.701141119003296
I0123 19:11:30.552299 140508591796224 ddar.py:60] Depth 3/1000 time = 3.1770987510681152
I0123 19:11:33.776601 140508591796224 ddar.py:60] Depth 4/1000 time = 3.2233493328094482
I0123 19:11:37.068722 140508591796224 ddar.py:60] Depth 5/1000 time = 3.291813611984253
I0123 19:11:40.887594 140508591796224 ddar.py:60] Depth 6/1000 time = 3.7945261001586914
I0123 19:11:44.673519 140508591796224 ddar.py:60] Depth 7/1000 time = 3.7857630252838135
I0123 19:11:48.441883 140508591796224 ddar.py:60] Depth 8/1000 time = 3.7681775093078613
I0123 19:11:48.447123 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:11:48.447209 140508591796224 alphageometry.py:566] LM output (score=-2.386515): "k : D a k c k 11 D a k i k 12 ;"
I0123 19:11:48.447246 140508591796224 alphageometry.py:567] Translation: "k = on_bline k c a, on_bline k i a"

I0123 19:11:48.447284 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k c a, on_bline k i a ? coll h j i"
I0123 19:11:48.447432 140508591796224 graph.py:498] 
I0123 19:11:48.447485 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k c a, on_bline k i a ? coll h j i
I0123 19:11:50.094442 140508591796224 ddar.py:60] Depth 1/1000 time = 1.616258144378662
I0123 19:11:53.742964 140508591796224 ddar.py:60] Depth 2/1000 time = 3.648348569869995
I0123 19:11:56.953634 140508591796224 ddar.py:60] Depth 3/1000 time = 3.210448741912842
I0123 19:11:59.919835 140508591796224 ddar.py:60] Depth 4/1000 time = 2.9652769565582275
I0123 19:12:03.167510 140508591796224 ddar.py:60] Depth 5/1000 time = 3.2474846839904785
I0123 19:12:07.236597 140508591796224 ddar.py:60] Depth 6/1000 time = 4.044964790344238
I0123 19:12:10.719367 140508591796224 ddar.py:60] Depth 7/1000 time = 3.482600450515747
I0123 19:12:14.757551 140508591796224 ddar.py:60] Depth 8/1000 time = 4.038006544113159
I0123 19:12:14.762933 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:12:14.763021 140508591796224 alphageometry.py:566] LM output (score=-2.396820): "k : D a c c k 11 D a j j k 12 ;"
I0123 19:12:14.763059 140508591796224 alphageometry.py:567] Translation: "k = on_circle k c a, on_circle k j a"

I0123 19:12:14.763097 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k c a, on_circle k j a ? coll h j i"
I0123 19:12:14.763241 140508591796224 graph.py:498] 
I0123 19:12:14.763294 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k c a, on_circle k j a ? coll h j i
I0123 19:12:16.096374 140508591796224 ddar.py:60] Depth 1/1000 time = 1.2990658283233643
I0123 19:12:19.705495 140508591796224 ddar.py:60] Depth 2/1000 time = 3.608859062194824
I0123 19:12:23.125299 140508591796224 ddar.py:60] Depth 3/1000 time = 3.4196197986602783
I0123 19:12:26.612615 140508591796224 ddar.py:60] Depth 4/1000 time = 3.4871468544006348
I0123 19:12:30.314017 140508591796224 ddar.py:60] Depth 5/1000 time = 3.6842148303985596
I0123 19:12:34.009610 140508591796224 ddar.py:60] Depth 6/1000 time = 3.6954104900360107
I0123 19:12:34.021447 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:12:34.021536 140508591796224 alphageometry.py:566] LM output (score=-2.405423): "k : C b g k 11 D b k g k 12 ;"
I0123 19:12:34.021573 140508591796224 alphageometry.py:567] Translation: "k = on_line k b g, on_bline k g b"

I0123 19:12:34.021610 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_line k b g, on_bline k g b ? coll h j i"
I0123 19:12:34.021760 140508591796224 graph.py:498] 
I0123 19:12:34.021815 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_line k b g, on_bline k g b ? coll h j i
I0123 19:12:35.612122 140508591796224 ddar.py:60] Depth 1/1000 time = 1.5666258335113525
I0123 19:12:39.260522 140508591796224 ddar.py:60] Depth 2/1000 time = 3.648209810256958
I0123 19:12:42.437136 140508591796224 ddar.py:60] Depth 3/1000 time = 3.1764042377471924
I0123 19:12:45.900719 140508591796224 ddar.py:60] Depth 4/1000 time = 3.463151216506958
I0123 19:12:45.909416 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:12:45.909500 140508591796224 alphageometry.py:566] LM output (score=-2.435342): "k : D a e a k 11 D b e b k 12 ;"
I0123 19:12:45.909536 140508591796224 alphageometry.py:567] Translation: "k = on_circle k a e, on_circle k b e"

I0123 19:12:45.909571 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a e, on_circle k b e ? coll h j i"
I0123 19:12:45.909723 140508591796224 graph.py:498] 
I0123 19:12:45.909777 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a e, on_circle k b e ? coll h j i
I0123 19:12:47.279364 140508591796224 ddar.py:60] Depth 1/1000 time = 1.319843053817749
I0123 19:12:50.833401 140508591796224 ddar.py:60] Depth 2/1000 time = 3.5539019107818604
I0123 19:12:54.212521 140508591796224 ddar.py:60] Depth 3/1000 time = 3.378943920135498
I0123 19:12:57.397017 140508591796224 ddar.py:60] Depth 4/1000 time = 3.1843252182006836
I0123 19:13:01.416950 140508591796224 ddar.py:60] Depth 5/1000 time = 4.000274419784546
I0123 19:13:05.031135 140508591796224 ddar.py:60] Depth 6/1000 time = 3.613990068435669
I0123 19:13:08.722289 140508591796224 ddar.py:60] Depth 7/1000 time = 3.680349111557007
I0123 19:13:08.723365 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:13:08.723449 140508591796224 alphageometry.py:566] LM output (score=-2.449716): "k : D a c c k 11 D a i i k 12 ;"
I0123 19:13:08.723484 140508591796224 alphageometry.py:567] Translation: "k = on_circle k c a, on_circle k i a"

I0123 19:13:08.723519 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k c a, on_circle k i a ? coll h j i"
I0123 19:13:08.723660 140508591796224 graph.py:498] 
I0123 19:13:08.723715 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k c a, on_circle k i a ? coll h j i
I0123 19:13:10.051556 140508591796224 ddar.py:60] Depth 1/1000 time = 1.287407398223877
I0123 19:13:13.638568 140508591796224 ddar.py:60] Depth 2/1000 time = 3.5868639945983887
I0123 19:13:17.075803 140508591796224 ddar.py:60] Depth 3/1000 time = 3.437049150466919
I0123 19:13:20.564568 140508591796224 ddar.py:60] Depth 4/1000 time = 3.488542318344116
I0123 19:13:24.361929 140508591796224 ddar.py:60] Depth 5/1000 time = 3.779926061630249
I0123 19:13:28.055197 140508591796224 ddar.py:60] Depth 6/1000 time = 3.693086624145508
I0123 19:13:28.066880 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:13:28.066962 140508591796224 alphageometry.py:566] LM output (score=-2.490008): "k : D b k e k 11 D e k h k 12 ;"
I0123 19:13:28.066998 140508591796224 alphageometry.py:567] Translation: "k = on_bline k e b, on_bline k h e"

I0123 19:13:28.067033 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e b, on_bline k h e ? coll h j i"
I0123 19:13:28.067171 140508591796224 graph.py:498] 
I0123 19:13:28.067223 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e b, on_bline k h e ? coll h j i
I0123 19:13:29.494003 140508591796224 ddar.py:60] Depth 1/1000 time = 1.3970005512237549
I0123 19:13:33.238713 140508591796224 ddar.py:60] Depth 2/1000 time = 3.7445595264434814
I0123 19:13:36.432405 140508591796224 ddar.py:60] Depth 3/1000 time = 3.1935338973999023
I0123 19:13:39.378460 140508591796224 ddar.py:60] Depth 4/1000 time = 2.9451889991760254
I0123 19:13:42.647214 140508591796224 ddar.py:60] Depth 5/1000 time = 3.268519878387451
I0123 19:13:46.492611 140508591796224 ddar.py:60] Depth 6/1000 time = 3.8214313983917236
I0123 19:13:50.255440 140508591796224 ddar.py:60] Depth 7/1000 time = 3.7626380920410156
I0123 19:13:54.001256 140508591796224 ddar.py:60] Depth 8/1000 time = 3.745624303817749
I0123 19:13:54.006482 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:13:54.006571 140508591796224 alphageometry.py:566] LM output (score=-2.497825): "k : D b k j k 11 D c k j k 12 ;"
I0123 19:13:54.006608 140508591796224 alphageometry.py:567] Translation: "k = on_bline k j b, on_bline k j c"

I0123 19:13:54.006645 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k j b, on_bline k j c ? coll h j i"
I0123 19:13:54.006797 140508591796224 graph.py:498] 
I0123 19:13:54.006849 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k j b, on_bline k j c ? coll h j i
I0123 19:13:55.695205 140508591796224 ddar.py:60] Depth 1/1000 time = 1.65199613571167
I0123 19:13:59.370478 140508591796224 ddar.py:60] Depth 2/1000 time = 3.675102949142456
I0123 19:14:02.603634 140508591796224 ddar.py:60] Depth 3/1000 time = 3.2329349517822266
I0123 19:14:05.564067 140508591796224 ddar.py:60] Depth 4/1000 time = 2.959409713745117
I0123 19:14:08.889298 140508591796224 ddar.py:60] Depth 5/1000 time = 3.325021743774414
I0123 19:14:12.716008 140508591796224 ddar.py:60] Depth 6/1000 time = 3.8020782470703125
I0123 19:14:16.489781 140508591796224 ddar.py:60] Depth 7/1000 time = 3.7735886573791504
I0123 19:14:20.265243 140508591796224 ddar.py:60] Depth 8/1000 time = 3.7752723693847656
I0123 19:14:20.270674 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:14:20.270783 140508591796224 alphageometry.py:566] LM output (score=-2.505543): "k : D a k b c 11 P a b c k 12 ;"
I0123 19:14:20.270820 140508591796224 alphageometry.py:567] Translation: "k = eqdistance k a b c, on_pline k c a b"

I0123 19:14:20.270858 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = eqdistance k a b c, on_pline k c a b ? coll h j i"
I0123 19:14:20.271004 140508591796224 graph.py:498] 
I0123 19:14:20.271057 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = eqdistance k a b c, on_pline k c a b ? coll h j i
I0123 19:14:21.840631 140508591796224 ddar.py:60] Depth 1/1000 time = 1.5423977375030518
I0123 19:14:24.320684 140508591796224 ddar.py:60] Depth 2/1000 time = 2.4798431396484375
I0123 19:14:27.166373 140508591796224 ddar.py:60] Depth 3/1000 time = 2.8454034328460693
I0123 19:14:27.175335 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:14:27.175444 140508591796224 alphageometry.py:566] LM output (score=-2.506718): "k : D a c c k 11 D a g g k 12 ;"
I0123 19:14:27.175482 140508591796224 alphageometry.py:567] Translation: "k = on_circle k c a, on_circle k g a"

I0123 19:14:27.175519 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k c a, on_circle k g a ? coll h j i"
I0123 19:14:27.175662 140508591796224 graph.py:498] 
I0123 19:14:27.175716 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k c a, on_circle k g a ? coll h j i
I0123 19:14:28.846085 140508591796224 ddar.py:60] Depth 1/1000 time = 1.638979196548462
I0123 19:14:31.654405 140508591796224 ddar.py:60] Depth 2/1000 time = 2.808151960372925
I0123 19:14:35.082740 140508591796224 ddar.py:60] Depth 3/1000 time = 3.428171157836914
I0123 19:14:38.574394 140508591796224 ddar.py:60] Depth 4/1000 time = 3.491473913192749
I0123 19:14:42.303242 140508591796224 ddar.py:60] Depth 5/1000 time = 3.709200143814087
I0123 19:14:45.980851 140508591796224 ddar.py:60] Depth 6/1000 time = 3.6773924827575684
I0123 19:14:49.734430 140508591796224 ddar.py:60] Depth 7/1000 time = 3.7420029640197754
I0123 19:14:49.735484 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:14:49.735581 140508591796224 alphageometry.py:566] LM output (score=-2.508719): "k : C c f k 11 D c k f k 12 ;"
I0123 19:14:49.735617 140508591796224 alphageometry.py:567] Translation: "k = on_line k c f, on_bline k f c"

I0123 19:14:49.735654 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_line k c f, on_bline k f c ? coll h j i"
I0123 19:14:49.735798 140508591796224 graph.py:498] 
I0123 19:14:49.735854 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_line k c f, on_bline k f c ? coll h j i
I0123 19:14:51.322105 140508591796224 ddar.py:60] Depth 1/1000 time = 1.5509498119354248
I0123 19:14:54.583648 140508591796224 ddar.py:60] Depth 2/1000 time = 3.2613883018493652
I0123 19:14:57.678557 140508591796224 ddar.py:60] Depth 3/1000 time = 3.0947232246398926
I0123 19:15:00.768573 140508591796224 ddar.py:60] Depth 4/1000 time = 3.089623212814331
I0123 19:15:00.777472 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:15:00.777559 140508591796224 alphageometry.py:566] LM output (score=-2.550969): "k : C b f k 11 D b k f k 12 ;"
I0123 19:15:00.777597 140508591796224 alphageometry.py:567] Translation: "k = on_line k b f, on_bline k f b"

I0123 19:15:00.777637 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_line k b f, on_bline k f b ? coll h j i"
I0123 19:15:00.777776 140508591796224 graph.py:498] 
I0123 19:15:00.777825 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_line k b f, on_bline k f b ? coll h j i
I0123 19:15:02.360236 140508591796224 ddar.py:60] Depth 1/1000 time = 1.5597643852233887
I0123 19:15:05.458030 140508591796224 ddar.py:60] Depth 2/1000 time = 3.097630023956299
I0123 19:15:08.623616 140508591796224 ddar.py:60] Depth 3/1000 time = 3.1654021739959717
I0123 19:15:11.401170 140508591796224 ddar.py:60] Depth 4/1000 time = 2.7771384716033936
I0123 19:15:11.410122 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:15:11.410235 140508591796224 alphageometry.py:566] LM output (score=-2.552464): "k : D b c c k 11 D b e e k 12 ;"
I0123 19:15:11.410275 140508591796224 alphageometry.py:567] Translation: "k = on_circle k c b, on_circle k e b"

I0123 19:15:11.410316 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k c b, on_circle k e b ? coll h j i"
I0123 19:15:11.410469 140508591796224 graph.py:498] 
I0123 19:15:11.410522 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k c b, on_circle k e b ? coll h j i
I0123 19:15:13.108740 140508591796224 ddar.py:60] Depth 1/1000 time = 1.663182258605957
I0123 19:15:16.706330 140508591796224 ddar.py:60] Depth 2/1000 time = 3.597417116165161
I0123 19:15:19.811761 140508591796224 ddar.py:60] Depth 3/1000 time = 3.1052448749542236
I0123 19:15:23.279937 140508591796224 ddar.py:60] Depth 4/1000 time = 3.4679927825927734
I0123 19:15:27.042726 140508591796224 ddar.py:60] Depth 5/1000 time = 3.742859125137329
I0123 19:15:30.770175 140508591796224 ddar.py:60] Depth 6/1000 time = 3.7272391319274902
I0123 19:15:34.511802 140508591796224 ddar.py:60] Depth 7/1000 time = 3.731447458267212
I0123 19:15:34.512850 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:15:34.512952 140508591796224 alphageometry.py:566] LM output (score=-2.553566): "k : D a c a k 11 D c j j k 12 ;"
I0123 19:15:34.512990 140508591796224 alphageometry.py:567] Translation: "k = on_circle k a c, on_circle k j c"

I0123 19:15:34.513028 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k j c ? coll h j i"
I0123 19:15:34.513170 140508591796224 graph.py:498] 
I0123 19:15:34.513225 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k j c ? coll h j i
I0123 19:15:35.829292 140508591796224 ddar.py:60] Depth 1/1000 time = 1.2847044467926025
I0123 19:15:38.978257 140508591796224 ddar.py:60] Depth 2/1000 time = 3.148820400238037
I0123 19:15:42.451120 140508591796224 ddar.py:60] Depth 3/1000 time = 3.4727001190185547
I0123 19:15:45.946002 140508591796224 ddar.py:60] Depth 4/1000 time = 3.494708299636841
I0123 19:15:49.722042 140508591796224 ddar.py:60] Depth 5/1000 time = 3.758483409881592
I0123 19:15:53.090391 140508591796224 ddar.py:60] Depth 6/1000 time = 3.368074655532837
I0123 19:15:53.103057 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:15:53.103158 140508591796224 alphageometry.py:566] LM output (score=-2.603122): "k : D b k e k 11 D b k h k 12 ;"
I0123 19:15:53.103195 140508591796224 alphageometry.py:567] Translation: "k = on_bline k e b, on_bline k h b"

I0123 19:15:53.103242 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e b, on_bline k h b ? coll h j i"
I0123 19:15:53.103401 140508591796224 graph.py:498] 
I0123 19:15:53.103454 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e b, on_bline k h b ? coll h j i
I0123 19:15:54.885488 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7491576671600342
I0123 19:15:58.276520 140508591796224 ddar.py:60] Depth 2/1000 time = 3.3908629417419434
I0123 19:16:01.528363 140508591796224 ddar.py:60] Depth 3/1000 time = 3.2516722679138184
I0123 19:16:04.844475 140508591796224 ddar.py:60] Depth 4/1000 time = 3.3152217864990234
I0123 19:16:08.206653 140508591796224 ddar.py:60] Depth 5/1000 time = 3.361995220184326
I0123 19:16:12.081446 140508591796224 ddar.py:60] Depth 6/1000 time = 3.8482279777526855
I0123 19:16:15.925663 140508591796224 ddar.py:60] Depth 7/1000 time = 3.8439106941223145
I0123 19:16:19.404888 140508591796224 ddar.py:60] Depth 8/1000 time = 3.479027271270752
I0123 19:16:19.410330 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:16:19.410440 140508591796224 alphageometry.py:566] LM output (score=-2.618320): "k : D a k c k 11 D c k i k 12 ;"
I0123 19:16:19.410479 140508591796224 alphageometry.py:567] Translation: "k = on_bline k c a, on_bline k i c"

I0123 19:16:19.410516 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k c a, on_bline k i c ? coll h j i"
I0123 19:16:19.410660 140508591796224 graph.py:498] 
I0123 19:16:19.410713 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k c a, on_bline k i c ? coll h j i
I0123 19:16:21.193469 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7502555847167969
I0123 19:16:24.946995 140508591796224 ddar.py:60] Depth 2/1000 time = 3.7533726692199707
I0123 19:16:27.838717 140508591796224 ddar.py:60] Depth 3/1000 time = 2.891559362411499
I0123 19:16:31.143505 140508591796224 ddar.py:60] Depth 4/1000 time = 3.3039112091064453
I0123 19:16:34.543339 140508591796224 ddar.py:60] Depth 5/1000 time = 3.3996338844299316
I0123 19:16:38.425035 140508591796224 ddar.py:60] Depth 6/1000 time = 3.856426239013672
I0123 19:16:41.910286 140508591796224 ddar.py:60] Depth 7/1000 time = 3.485069751739502
I0123 19:16:45.725159 140508591796224 ddar.py:60] Depth 8/1000 time = 3.814685583114624
I0123 19:16:45.730211 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:16:45.730297 140508591796224 alphageometry.py:566] LM output (score=-2.631272): "k : D a k c k 11 D a k j k 12 ;"
I0123 19:16:45.730333 140508591796224 alphageometry.py:567] Translation: "k = on_bline k c a, on_bline k j a"

I0123 19:16:45.730371 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k c a, on_bline k j a ? coll h j i"
I0123 19:16:45.730516 140508591796224 graph.py:498] 
I0123 19:16:45.730569 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k c a, on_bline k j a ? coll h j i
I0123 19:16:47.488383 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7128167152404785
I0123 19:16:50.391821 140508591796224 ddar.py:60] Depth 2/1000 time = 2.903263807296753
I0123 19:16:53.642363 140508591796224 ddar.py:60] Depth 3/1000 time = 3.2503647804260254
I0123 19:16:57.015767 140508591796224 ddar.py:60] Depth 4/1000 time = 3.3725104331970215
I0123 19:17:00.365873 140508591796224 ddar.py:60] Depth 5/1000 time = 3.349884271621704
I0123 19:17:04.282269 140508591796224 ddar.py:60] Depth 6/1000 time = 3.8913705348968506
I0123 19:17:07.778691 140508591796224 ddar.py:60] Depth 7/1000 time = 3.4962432384490967
I0123 19:17:11.654577 140508591796224 ddar.py:60] Depth 8/1000 time = 3.875694513320923
I0123 19:17:11.659777 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:17:11.659859 140508591796224 alphageometry.py:566] LM output (score=-2.633678): "k : D a k b k 11 D b k h k 12 ;"
I0123 19:17:11.659896 140508591796224 alphageometry.py:567] Translation: "k = on_bline k b a, on_bline k h b"

I0123 19:17:11.659933 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k b a, on_bline k h b ? coll h j i"
I0123 19:17:11.660087 140508591796224 graph.py:498] 
I0123 19:17:11.660141 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k b a, on_bline k h b ? coll h j i
I0123 19:17:13.063498 140508591796224 ddar.py:60] Depth 1/1000 time = 1.3623826503753662
I0123 19:17:16.887837 140508591796224 ddar.py:60] Depth 2/1000 time = 3.8241326808929443
I0123 19:17:20.270557 140508591796224 ddar.py:60] Depth 3/1000 time = 3.382444143295288
I0123 19:17:23.859462 140508591796224 ddar.py:60] Depth 4/1000 time = 3.5742218494415283
I0123 19:17:26.998987 140508591796224 ddar.py:60] Depth 5/1000 time = 3.1393492221832275
I0123 19:17:27.003866 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:17:27.003949 140508591796224 alphageometry.py:566] LM output (score=-2.640557): "k : P c e c k 11 ;"
I0123 19:17:27.003986 140508591796224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c e c k"

I0123 19:17:27.004021 140508591796224 alphageometry.py:566] LM output (score=-2.656452): "k : C a e k 11 D a k e k 12 ;"
I0123 19:17:27.004049 140508591796224 alphageometry.py:567] Translation: "k = on_line k a e, on_bline k e a"

I0123 19:17:27.004079 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_line k a e, on_bline k e a ? coll h j i"
I0123 19:17:27.004218 140508591796224 graph.py:498] 
I0123 19:17:27.004271 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_line k a e, on_bline k e a ? coll h j i
I0123 19:17:28.642363 140508591796224 ddar.py:60] Depth 1/1000 time = 1.6013493537902832
I0123 19:17:31.766001 140508591796224 ddar.py:60] Depth 2/1000 time = 3.1234681606292725
I0123 19:17:34.544539 140508591796224 ddar.py:60] Depth 3/1000 time = 2.7783591747283936
I0123 19:17:37.693642 140508591796224 ddar.py:60] Depth 4/1000 time = 3.148681402206421
I0123 19:17:37.702596 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:17:37.702754 140508591796224 alphageometry.py:540] Depth 1. There are 31 nodes to expand:
I0123 19:17:37.702794 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : D a k e k 11 D a k h k 12 ; x00
I0123 19:17:37.702830 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : D a k e k 11 D a k j k 12 ; x00
I0123 19:17:37.702859 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : D a k g k 11 D a k i k 12 ; x00
I0123 19:17:37.702887 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : D a c a k 11 D b c b k 12 ; x00
I0123 19:17:37.702930 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : D a k g k 11 D g k i k 12 ; x00
I0123 19:17:37.702959 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : D a c c k 11 D a e e k 12 ; x00
I0123 19:17:37.702984 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : D a k e k 11 D e k j k 12 ; x00
I0123 19:17:37.703009 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : D a k c k 11 D c k j k 12 ; x00
I0123 19:17:37.703035 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : P a b c k 11 ; x00
I0123 19:17:37.703063 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : D a k b k 11 D b k d k 12 ; x00
I0123 19:17:37.703088 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : D a c c k 11 D a d d k 12 ; x00
I0123 19:17:37.703112 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : D a k j k 11 D c k j k 12 ; x00
I0123 19:17:37.703135 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : D a k i k 11 D c k i k 12 ; x00
I0123 19:17:37.703159 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : D a k c k 11 D a k i k 12 ; x00
I0123 19:17:37.703182 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : D a c c k 11 D a j j k 12 ; x00
I0123 19:17:37.703205 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : C b g k 11 D b k g k 12 ; x00
I0123 19:17:37.703228 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : D a e a k 11 D b e b k 12 ; x00
I0123 19:17:37.703251 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : D a c c k 11 D a i i k 12 ; x00
I0123 19:17:37.703278 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : D b k e k 11 D e k h k 12 ; x00
I0123 19:17:37.703304 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : D b k j k 11 D c k j k 12 ; x00
I0123 19:17:37.703328 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : D a k b c 11 P a b c k 12 ; x00
I0123 19:17:37.703352 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : D a c c k 11 D a g g k 12 ; x00
I0123 19:17:37.703377 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : C c f k 11 D c k f k 12 ; x00
I0123 19:17:37.703400 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : C b f k 11 D b k f k 12 ; x00
I0123 19:17:37.703423 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : D b c c k 11 D b e e k 12 ; x00
I0123 19:17:37.703447 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : D a c a k 11 D c j j k 12 ; x00
I0123 19:17:37.703469 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : D b k e k 11 D b k h k 12 ; x00
I0123 19:17:37.703493 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : D a k c k 11 D c k i k 12 ; x00
I0123 19:17:37.703515 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : D a k c k 11 D a k j k 12 ; x00
I0123 19:17:37.703537 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : D a k b k 11 D b k h k 12 ; x00
I0123 19:17:37.703559 140508591796224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : C a e k 11 D a k e k 12 ; x00
I0123 19:17:37.703592 140508591796224 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : D a k e k 11 D a k h k 12 ; x00
I0123 19:17:44.493622 140508591796224 alphageometry.py:566] LM output (score=-0.977369): "l : D a l j l 13 D c l j l 14 ;"
I0123 19:17:44.493789 140508591796224 alphageometry.py:567] Translation: "l = on_bline l j a, on_bline l j c"

I0123 19:17:44.493840 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l j a, on_bline l j c ? coll h j i"
I0123 19:17:44.493999 140508591796224 graph.py:498] 
I0123 19:17:44.494053 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l j a, on_bline l j c ? coll h j i
I0123 19:17:46.781541 140508591796224 ddar.py:60] Depth 1/1000 time = 2.240971803665161
I0123 19:17:51.508223 140508591796224 ddar.py:60] Depth 2/1000 time = 4.72650146484375
I0123 19:17:55.752800 140508591796224 ddar.py:60] Depth 3/1000 time = 4.244392395019531
I0123 19:17:59.716768 140508591796224 ddar.py:60] Depth 4/1000 time = 3.9627609252929688
I0123 19:18:04.146423 140508591796224 ddar.py:60] Depth 5/1000 time = 4.429461717605591
I0123 19:18:09.507499 140508591796224 ddar.py:60] Depth 6/1000 time = 5.316091537475586
I0123 19:18:14.818804 140508591796224 ddar.py:60] Depth 7/1000 time = 5.311139106750488
I0123 19:18:20.035808 140508591796224 ddar.py:60] Depth 8/1000 time = 5.216834545135498
I0123 19:18:20.044875 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:18:20.044927 140508591796224 alphageometry.py:566] LM output (score=-1.282877): "l : D a l i l 13 D c l i l 14 ;"
I0123 19:18:20.044960 140508591796224 alphageometry.py:567] Translation: "l = on_bline l i a, on_bline l i c"

I0123 19:18:20.044996 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l i a, on_bline l i c ? coll h j i"
I0123 19:18:20.045131 140508591796224 graph.py:498] 
I0123 19:18:20.045179 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l i a, on_bline l i c ? coll h j i
I0123 19:18:22.276544 140508591796224 ddar.py:60] Depth 1/1000 time = 2.18693470954895
I0123 19:18:26.406839 140508591796224 ddar.py:60] Depth 2/1000 time = 4.130089044570923
I0123 19:18:30.571019 140508591796224 ddar.py:60] Depth 3/1000 time = 4.163914442062378
I0123 19:18:34.494786 140508591796224 ddar.py:60] Depth 4/1000 time = 3.922334909439087
I0123 19:18:38.859493 140508591796224 ddar.py:60] Depth 5/1000 time = 4.364526987075806
I0123 19:18:44.656332 140508591796224 ddar.py:60] Depth 6/1000 time = 5.7494282722473145
I0123 19:18:50.018173 140508591796224 ddar.py:60] Depth 7/1000 time = 5.361640691757202
I0123 19:18:55.450508 140508591796224 ddar.py:60] Depth 8/1000 time = 5.432122707366943
I0123 19:18:55.458947 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:18:55.459004 140508591796224 alphageometry.py:566] LM output (score=-1.618015): "l : D a l c l 13 D c l j l 14 ;"
I0123 19:18:55.459048 140508591796224 alphageometry.py:567] Translation: "l = on_bline l c a, on_bline l j c"

I0123 19:18:55.459085 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l c a, on_bline l j c ? coll h j i"
I0123 19:18:55.459232 140508591796224 graph.py:498] 
I0123 19:18:55.459288 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l c a, on_bline l j c ? coll h j i
I0123 19:18:57.332823 140508591796224 ddar.py:60] Depth 1/1000 time = 1.8120691776275635
I0123 19:19:02.054209 140508591796224 ddar.py:60] Depth 2/1000 time = 4.72121787071228
I0123 19:19:06.233140 140508591796224 ddar.py:60] Depth 3/1000 time = 4.178761720657349
I0123 19:19:10.557978 140508591796224 ddar.py:60] Depth 4/1000 time = 4.3236353397369385
I0123 19:19:14.598845 140508591796224 ddar.py:60] Depth 5/1000 time = 4.040637731552124
I0123 19:19:20.022113 140508591796224 ddar.py:60] Depth 6/1000 time = 5.379144906997681
I0123 19:19:25.324981 140508591796224 ddar.py:60] Depth 7/1000 time = 5.302680015563965
I0123 19:19:30.603619 140508591796224 ddar.py:60] Depth 8/1000 time = 5.278383255004883
I0123 19:19:30.612147 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:19:30.612230 140508591796224 alphageometry.py:566] LM output (score=-1.745956): "l : D a l g l 13 D g l i l 14 ;"
I0123 19:19:30.612264 140508591796224 alphageometry.py:567] Translation: "l = on_bline l g a, on_bline l i g"

I0123 19:19:30.612311 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l g a, on_bline l i g ? coll h j i"
I0123 19:19:30.612484 140508591796224 graph.py:498] 
I0123 19:19:30.612538 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l g a, on_bline l i g ? coll h j i
I0123 19:19:32.928539 140508591796224 ddar.py:60] Depth 1/1000 time = 2.2553045749664307
I0123 19:19:37.767141 140508591796224 ddar.py:60] Depth 2/1000 time = 4.838403940200806
I0123 19:19:41.963976 140508591796224 ddar.py:60] Depth 3/1000 time = 4.196656227111816
I0123 19:19:45.903095 140508591796224 ddar.py:60] Depth 4/1000 time = 3.937896490097046
I0123 19:19:50.322174 140508591796224 ddar.py:60] Depth 5/1000 time = 4.418837785720825
I0123 19:19:55.832588 140508591796224 ddar.py:60] Depth 6/1000 time = 5.462690114974976
I0123 19:20:01.243336 140508591796224 ddar.py:60] Depth 7/1000 time = 5.410553932189941
I0123 19:20:06.628615 140508591796224 ddar.py:60] Depth 8/1000 time = 5.385075330734253
I0123 19:20:06.637051 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:20:06.637116 140508591796224 alphageometry.py:566] LM output (score=-1.840425): "l : D a l j l 13 D a l i l 14 ;"
I0123 19:20:06.637151 140508591796224 alphageometry.py:567] Translation: "l = on_bline l j a, on_bline l i a"

I0123 19:20:06.637188 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l j a, on_bline l i a ? coll h j i"
I0123 19:20:06.637349 140508591796224 graph.py:498] 
I0123 19:20:06.637403 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l j a, on_bline l i a ? coll h j i
I0123 19:20:08.797862 140508591796224 ddar.py:60] Depth 1/1000 time = 2.1091177463531494
I0123 19:20:13.322721 140508591796224 ddar.py:60] Depth 2/1000 time = 4.5245912075042725
I0123 19:20:16.826091 140508591796224 ddar.py:60] Depth 3/1000 time = 3.503181219100952
I0123 19:20:21.173987 140508591796224 ddar.py:60] Depth 4/1000 time = 4.32509708404541
I0123 19:20:25.465261 140508591796224 ddar.py:60] Depth 5/1000 time = 4.291090965270996
I0123 19:20:25.472800 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:20:25.472883 140508591796224 alphageometry.py:566] LM output (score=-1.845769): "l : C b g l 13 D b l g l 14 ;"
I0123 19:20:25.472921 140508591796224 alphageometry.py:567] Translation: "l = on_line l b g, on_bline l g b"

I0123 19:20:25.472960 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_line l b g, on_bline l g b ? coll h j i"
I0123 19:20:25.473112 140508591796224 graph.py:498] 
I0123 19:20:25.473165 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_line l b g, on_bline l g b ? coll h j i
I0123 19:20:27.640776 140508591796224 ddar.py:60] Depth 1/1000 time = 2.1276135444641113
I0123 19:20:31.688772 140508591796224 ddar.py:60] Depth 2/1000 time = 4.047728538513184
I0123 19:20:35.726500 140508591796224 ddar.py:60] Depth 3/1000 time = 4.037542104721069
I0123 19:20:39.754703 140508591796224 ddar.py:60] Depth 4/1000 time = 4.027817010879517
I0123 19:20:44.551443 140508591796224 ddar.py:60] Depth 5/1000 time = 4.7774269580841064
I0123 19:20:48.948637 140508591796224 ddar.py:60] Depth 6/1000 time = 4.3969810009002686
I0123 19:20:48.954558 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:20:48.954617 140508591796224 alphageometry.py:566] LM output (score=-1.894292): "l : D a l c l 13 D a l i l 14 ;"
I0123 19:20:48.954653 140508591796224 alphageometry.py:567] Translation: "l = on_bline l c a, on_bline l i a"

I0123 19:20:48.954691 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l c a, on_bline l i a ? coll h j i"
I0123 19:20:48.954838 140508591796224 graph.py:498] 
I0123 19:20:48.954892 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l c a, on_bline l i a ? coll h j i
I0123 19:20:50.808155 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7841565608978271
I0123 19:20:55.605591 140508591796224 ddar.py:60] Depth 2/1000 time = 4.797280311584473
I0123 19:20:59.405480 140508591796224 ddar.py:60] Depth 3/1000 time = 3.799699306488037
I0123 19:21:03.737556 140508591796224 ddar.py:60] Depth 4/1000 time = 4.330829858779907
I0123 19:21:08.204891 140508591796224 ddar.py:60] Depth 5/1000 time = 4.467117547988892
I0123 19:21:13.669529 140508591796224 ddar.py:60] Depth 6/1000 time = 5.417166471481323
I0123 19:21:19.076864 140508591796224 ddar.py:60] Depth 7/1000 time = 5.4071269035339355
I0123 19:21:24.456171 140508591796224 ddar.py:60] Depth 8/1000 time = 5.379081964492798
I0123 19:21:24.465144 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:21:24.465227 140508591796224 alphageometry.py:566] LM output (score=-1.965821): "l : D a l i l 13 D g l i l 14 ;"
I0123 19:21:24.465261 140508591796224 alphageometry.py:567] Translation: "l = on_bline l i a, on_bline l i g"

I0123 19:21:24.465308 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l i a, on_bline l i g ? coll h j i"
I0123 19:21:24.465476 140508591796224 graph.py:498] 
I0123 19:21:24.465530 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l i a, on_bline l i g ? coll h j i
I0123 19:21:26.318113 140508591796224 ddar.py:60] Depth 1/1000 time = 1.8023276329040527
I0123 19:21:31.127340 140508591796224 ddar.py:60] Depth 2/1000 time = 4.809045314788818
I0123 19:21:35.377562 140508591796224 ddar.py:60] Depth 3/1000 time = 4.250041484832764
I0123 19:21:39.336315 140508591796224 ddar.py:60] Depth 4/1000 time = 3.957526683807373
I0123 19:21:43.767375 140508591796224 ddar.py:60] Depth 5/1000 time = 4.430817365646362
I0123 19:21:49.307949 140508591796224 ddar.py:60] Depth 6/1000 time = 5.49527645111084
I0123 19:21:54.721329 140508591796224 ddar.py:60] Depth 7/1000 time = 5.413209915161133
I0123 19:22:00.131062 140508591796224 ddar.py:60] Depth 8/1000 time = 5.409541606903076
I0123 19:22:00.140329 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:22:00.140387 140508591796224 alphageometry.py:566] LM output (score=-2.006992): "l : D a l c l 13 D a l j l 14 ;"
I0123 19:22:00.140422 140508591796224 alphageometry.py:567] Translation: "l = on_bline l c a, on_bline l j a"

I0123 19:22:00.140460 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l c a, on_bline l j a ? coll h j i"
I0123 19:22:00.140612 140508591796224 graph.py:498] 
I0123 19:22:00.140666 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l c a, on_bline l j a ? coll h j i
I0123 19:22:01.954709 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7662110328674316
I0123 19:22:06.768715 140508591796224 ddar.py:60] Depth 2/1000 time = 4.813810348510742
I0123 19:22:11.023061 140508591796224 ddar.py:60] Depth 3/1000 time = 4.254134893417358
I0123 19:22:15.376420 140508591796224 ddar.py:60] Depth 4/1000 time = 4.352140665054321
I0123 19:22:19.882651 140508591796224 ddar.py:60] Depth 5/1000 time = 4.506043910980225
I0123 19:22:24.811453 140508591796224 ddar.py:60] Depth 6/1000 time = 4.885154724121094
I0123 19:22:30.152958 140508591796224 ddar.py:60] Depth 7/1000 time = 5.3412086963653564
I0123 19:22:35.438933 140508591796224 ddar.py:60] Depth 8/1000 time = 5.285779714584351
I0123 19:22:35.447771 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:22:35.447828 140508591796224 alphageometry.py:566] LM output (score=-2.020523): "l : D a l c l 13 D c l i l 14 ;"
I0123 19:22:35.447862 140508591796224 alphageometry.py:567] Translation: "l = on_bline l c a, on_bline l i c"

I0123 19:22:35.447913 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l c a, on_bline l i c ? coll h j i"
I0123 19:22:35.448064 140508591796224 graph.py:498] 
I0123 19:22:35.448117 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l c a, on_bline l i c ? coll h j i
I0123 19:22:37.793138 140508591796224 ddar.py:60] Depth 1/1000 time = 2.2818446159362793
I0123 19:22:42.229418 140508591796224 ddar.py:60] Depth 2/1000 time = 4.436054468154907
I0123 19:22:46.511181 140508591796224 ddar.py:60] Depth 3/1000 time = 4.281453847885132
I0123 19:22:50.824097 140508591796224 ddar.py:60] Depth 4/1000 time = 4.311705589294434
I0123 19:22:55.217800 140508591796224 ddar.py:60] Depth 5/1000 time = 4.393518924713135
I0123 19:23:00.275289 140508591796224 ddar.py:60] Depth 6/1000 time = 5.011279582977295
I0123 19:23:05.733010 140508591796224 ddar.py:60] Depth 7/1000 time = 5.457420349121094
I0123 19:23:11.203666 140508591796224 ddar.py:60] Depth 8/1000 time = 5.470459699630737
I0123 19:23:11.212742 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:23:11.212798 140508591796224 alphageometry.py:566] LM output (score=-2.022560): "l : D a l j l 13 D e l j l 14 ;"
I0123 19:23:11.212834 140508591796224 alphageometry.py:567] Translation: "l = on_bline l j a, on_bline l j e"

I0123 19:23:11.212870 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l j a, on_bline l j e ? coll h j i"
I0123 19:23:11.213022 140508591796224 graph.py:498] 
I0123 19:23:11.213076 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l j a, on_bline l j e ? coll h j i
I0123 19:23:13.528548 140508591796224 ddar.py:60] Depth 1/1000 time = 2.2605652809143066
I0123 19:23:17.842176 140508591796224 ddar.py:60] Depth 2/1000 time = 4.3134541511535645
I0123 19:23:22.035798 140508591796224 ddar.py:60] Depth 3/1000 time = 4.193427801132202
I0123 19:23:26.296580 140508591796224 ddar.py:60] Depth 4/1000 time = 4.259683609008789
I0123 19:23:30.601842 140508591796224 ddar.py:60] Depth 5/1000 time = 4.3050689697265625
I0123 19:23:35.843210 140508591796224 ddar.py:60] Depth 6/1000 time = 5.207813024520874
I0123 19:23:41.057965 140508591796224 ddar.py:60] Depth 7/1000 time = 5.214566707611084
I0123 19:23:46.199459 140508591796224 ddar.py:60] Depth 8/1000 time = 5.141277313232422
I0123 19:23:46.207935 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:23:46.207996 140508591796224 alphageometry.py:566] LM output (score=-2.222747): "l : D a g g l 13 D a i i l 14 ;"
I0123 19:23:46.208029 140508591796224 alphageometry.py:567] Translation: "l = on_circle l g a, on_circle l i a"

I0123 19:23:46.208063 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_circle l g a, on_circle l i a ? coll h j i"
I0123 19:23:46.208216 140508591796224 graph.py:498] 
I0123 19:23:46.208273 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_circle l g a, on_circle l i a ? coll h j i
I0123 19:23:47.974185 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7076001167297363
I0123 19:23:52.648334 140508591796224 ddar.py:60] Depth 2/1000 time = 4.673987627029419
I0123 19:23:56.680872 140508591796224 ddar.py:60] Depth 3/1000 time = 4.032312631607056
I0123 19:24:01.313277 140508591796224 ddar.py:60] Depth 4/1000 time = 4.632095575332642
I0123 19:24:05.906376 140508591796224 ddar.py:60] Depth 5/1000 time = 4.592926263809204
I0123 19:24:11.104660 140508591796224 ddar.py:60] Depth 6/1000 time = 5.1626293659210205
I0123 19:24:16.302613 140508591796224 ddar.py:60] Depth 7/1000 time = 5.197719097137451
I0123 19:24:16.321634 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:24:16.321723 140508591796224 alphageometry.py:566] LM output (score=-2.226554): "l : D a c c l 13 D a i i l 14 ;"
I0123 19:24:16.321759 140508591796224 alphageometry.py:567] Translation: "l = on_circle l c a, on_circle l i a"

I0123 19:24:16.321808 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_circle l c a, on_circle l i a ? coll h j i"
I0123 19:24:16.321973 140508591796224 graph.py:498] 
I0123 19:24:16.322028 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_circle l c a, on_circle l i a ? coll h j i
I0123 19:24:18.085243 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7094686031341553
I0123 19:24:22.799514 140508591796224 ddar.py:60] Depth 2/1000 time = 4.714082956314087
I0123 19:24:26.891635 140508591796224 ddar.py:60] Depth 3/1000 time = 4.0919458866119385
I0123 19:24:31.455424 140508591796224 ddar.py:60] Depth 4/1000 time = 4.5636146068573
I0123 19:24:36.069880 140508591796224 ddar.py:60] Depth 5/1000 time = 4.614217281341553
I0123 19:24:41.337844 140508591796224 ddar.py:60] Depth 6/1000 time = 5.232500076293945
I0123 19:24:46.481406 140508591796224 ddar.py:60] Depth 7/1000 time = 5.143373250961304
I0123 19:24:46.499171 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:24:46.499232 140508591796224 alphageometry.py:566] LM output (score=-2.253987): "l : D a l g l 13 ;"
I0123 19:24:46.499266 140508591796224 alphageometry.py:567] Translation: "l = on_bline l g a"

I0123 19:24:46.499303 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l g a ? coll h j i"
I0123 19:24:46.499460 140508591796224 graph.py:498] 
I0123 19:24:46.499514 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l g a ? coll h j i
I0123 19:24:48.181902 140508591796224 ddar.py:60] Depth 1/1000 time = 1.6275920867919922
I0123 19:24:52.665091 140508591796224 ddar.py:60] Depth 2/1000 time = 4.4830162525177
I0123 19:24:56.189255 140508591796224 ddar.py:60] Depth 3/1000 time = 3.523921012878418
I0123 19:25:00.689019 140508591796224 ddar.py:60] Depth 4/1000 time = 4.477248907089233
I0123 19:25:05.071161 140508591796224 ddar.py:60] Depth 5/1000 time = 4.381956577301025
I0123 19:25:05.077130 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:25:05.077184 140508591796224 alphageometry.py:566] LM output (score=-2.259187): "l : D a c a l 13 D c j j l 14 ;"
I0123 19:25:05.077218 140508591796224 alphageometry.py:567] Translation: "l = on_circle l a c, on_circle l j c"

I0123 19:25:05.077254 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_circle l a c, on_circle l j c ? coll h j i"
I0123 19:25:05.077403 140508591796224 graph.py:498] 
I0123 19:25:05.077456 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_circle l a c, on_circle l j c ? coll h j i
I0123 19:25:06.844217 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7143399715423584
I0123 19:25:10.928668 140508591796224 ddar.py:60] Depth 2/1000 time = 4.084277153015137
I0123 19:25:15.033368 140508591796224 ddar.py:60] Depth 3/1000 time = 4.1044394969940186
I0123 19:25:19.705363 140508591796224 ddar.py:60] Depth 4/1000 time = 4.671687126159668
I0123 19:25:25.001090 140508591796224 ddar.py:60] Depth 5/1000 time = 5.258311033248901
I0123 19:25:30.278341 140508591796224 ddar.py:60] Depth 6/1000 time = 5.277071237564087
I0123 19:25:30.296466 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:25:30.296547 140508591796224 alphageometry.py:566] LM output (score=-2.272355): "l : C a e l 13 D a l e l 14 ;"
I0123 19:25:30.296583 140508591796224 alphageometry.py:567] Translation: "l = on_line l a e, on_bline l e a"

I0123 19:25:30.296619 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_line l a e, on_bline l e a ? coll h j i"
I0123 19:25:30.296765 140508591796224 graph.py:498] 
I0123 19:25:30.296818 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_line l a e, on_bline l e a ? coll h j i
I0123 19:25:32.072309 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7328567504882812
I0123 19:25:36.265886 140508591796224 ddar.py:60] Depth 2/1000 time = 4.193292140960693
I0123 19:25:40.475090 140508591796224 ddar.py:60] Depth 3/1000 time = 4.209025144577026
I0123 19:25:44.723514 140508591796224 ddar.py:60] Depth 4/1000 time = 4.248237133026123
I0123 19:25:48.441065 140508591796224 ddar.py:60] Depth 5/1000 time = 3.7171475887298584
I0123 19:25:48.462738 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:25:48.462797 140508591796224 alphageometry.py:566] LM output (score=-2.290076): "l : D a l g l 13 D a l i l 14 ;"
I0123 19:25:48.462831 140508591796224 alphageometry.py:567] Translation: "l = on_bline l g a, on_bline l i a"

I0123 19:25:48.462867 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l g a, on_bline l i a ? coll h j i"
I0123 19:25:48.463010 140508591796224 graph.py:498] 
I0123 19:25:48.463062 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l g a, on_bline l i a ? coll h j i
I0123 19:25:50.808283 140508591796224 ddar.py:60] Depth 1/1000 time = 2.2976040840148926
I0123 19:25:55.147222 140508591796224 ddar.py:60] Depth 2/1000 time = 4.338669300079346
I0123 19:25:59.450706 140508591796224 ddar.py:60] Depth 3/1000 time = 4.303279161453247
I0123 19:26:03.857360 140508591796224 ddar.py:60] Depth 4/1000 time = 4.405420541763306
I0123 19:26:07.852830 140508591796224 ddar.py:60] Depth 5/1000 time = 3.99528431892395
I0123 19:26:13.430333 140508591796224 ddar.py:60] Depth 6/1000 time = 5.5285303592681885
I0123 19:26:18.878385 140508591796224 ddar.py:60] Depth 7/1000 time = 5.447832345962524
I0123 19:26:24.354103 140508591796224 ddar.py:60] Depth 8/1000 time = 5.475521802902222
I0123 19:26:24.362868 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:26:24.362924 140508591796224 alphageometry.py:566] LM output (score=-2.313562): "l : D a l e l 13 D a l j l 14 ;"
I0123 19:26:24.362959 140508591796224 alphageometry.py:567] Translation: "l = on_bline l e a, on_bline l j a"

I0123 19:26:24.362996 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l e a, on_bline l j a ? coll h j i"
I0123 19:26:24.363147 140508591796224 graph.py:498] 
I0123 19:26:24.363202 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l e a, on_bline l j a ? coll h j i
I0123 19:26:26.163070 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7426502704620361
I0123 19:26:30.993835 140508591796224 ddar.py:60] Depth 2/1000 time = 4.830523729324341
I0123 19:26:35.238955 140508591796224 ddar.py:60] Depth 3/1000 time = 4.244804382324219
I0123 19:26:39.558580 140508591796224 ddar.py:60] Depth 4/1000 time = 4.318615436553955
I0123 19:26:43.403659 140508591796224 ddar.py:60] Depth 5/1000 time = 3.844872236251831
I0123 19:26:48.609683 140508591796224 ddar.py:60] Depth 6/1000 time = 5.168590307235718
I0123 19:26:53.965414 140508591796224 ddar.py:60] Depth 7/1000 time = 5.355429649353027
I0123 19:26:59.189775 140508591796224 ddar.py:60] Depth 8/1000 time = 5.224162817001343
I0123 19:26:59.198839 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:26:59.198895 140508591796224 alphageometry.py:566] LM output (score=-2.321097): "l : D d g d l 13 ;"
I0123 19:26:59.198928 140508591796224 alphageometry.py:567] Translation: "l = on_circle l d g"

I0123 19:26:59.198962 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_circle l d g ? coll h j i"
I0123 19:26:59.199116 140508591796224 graph.py:498] 
I0123 19:26:59.199168 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_circle l d g ? coll h j i
I0123 19:27:01.854645 140508591796224 ddar.py:60] Depth 1/1000 time = 2.5769646167755127
I0123 19:27:11.710189 140508591796224 ddar.py:60] Depth 2/1000 time = 9.855334043502808
I0123 19:27:20.424593 140508591796224 ddar.py:60] Depth 3/1000 time = 8.714180946350098
I0123 19:27:29.743956 140508591796224 ddar.py:60] Depth 4/1000 time = 9.28943657875061
I0123 19:27:38.949569 140508591796224 ddar.py:60] Depth 5/1000 time = 9.205352544784546
I0123 19:27:38.956295 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:27:38.956353 140508591796224 alphageometry.py:566] LM output (score=-2.322017): "l : D a l i l 13 D a l j l 14 ;"
I0123 19:27:38.956387 140508591796224 alphageometry.py:567] Translation: "l = on_bline l i a, on_bline l j a"

I0123 19:27:38.956425 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l i a, on_bline l j a ? coll h j i"
I0123 19:27:38.956581 140508591796224 graph.py:498] 
I0123 19:27:38.956634 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l i a, on_bline l j a ? coll h j i
I0123 19:27:40.711464 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7062273025512695
I0123 19:27:45.341370 140508591796224 ddar.py:60] Depth 2/1000 time = 4.629681587219238
I0123 19:27:49.404113 140508591796224 ddar.py:60] Depth 3/1000 time = 4.062438488006592
I0123 19:27:53.405914 140508591796224 ddar.py:60] Depth 4/1000 time = 3.9769296646118164
I0123 19:27:57.902196 140508591796224 ddar.py:60] Depth 5/1000 time = 4.496092081069946
I0123 19:27:57.909698 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:27:57.909768 140508591796224 alphageometry.py:566] LM output (score=-2.328471): "l : C c g l 13 D c l g l 14 ;"
I0123 19:27:57.909806 140508591796224 alphageometry.py:567] Translation: "l = on_line l c g, on_bline l g c"

I0123 19:27:57.909844 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_line l c g, on_bline l g c ? coll h j i"
I0123 19:27:57.910003 140508591796224 graph.py:498] 
I0123 19:27:57.910058 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_line l c g, on_bline l g c ? coll h j i
I0123 19:27:59.650931 140508591796224 ddar.py:60] Depth 1/1000 time = 1.6954658031463623
I0123 19:28:03.753681 140508591796224 ddar.py:60] Depth 2/1000 time = 4.102556467056274
I0123 19:28:07.976108 140508591796224 ddar.py:60] Depth 3/1000 time = 4.222215175628662
I0123 19:28:12.137327 140508591796224 ddar.py:60] Depth 4/1000 time = 4.160757064819336
I0123 19:28:17.155109 140508591796224 ddar.py:60] Depth 5/1000 time = 4.998075246810913
I0123 19:28:21.085922 140508591796224 ddar.py:60] Depth 6/1000 time = 3.9306421279907227
I0123 19:28:21.091854 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:28:21.091910 140508591796224 alphageometry.py:566] LM output (score=-2.373948): "l : D a c c l 13 D a j j l 14 ;"
I0123 19:28:21.091943 140508591796224 alphageometry.py:567] Translation: "l = on_circle l c a, on_circle l j a"

I0123 19:28:21.091979 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_circle l c a, on_circle l j a ? coll h j i"
I0123 19:28:21.092128 140508591796224 graph.py:498] 
I0123 19:28:21.092180 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_circle l c a, on_circle l j a ? coll h j i
I0123 19:28:23.392930 140508591796224 ddar.py:60] Depth 1/1000 time = 2.248863697052002
I0123 19:28:28.149845 140508591796224 ddar.py:60] Depth 2/1000 time = 4.756627321243286
I0123 19:28:32.257827 140508591796224 ddar.py:60] Depth 3/1000 time = 4.107781648635864
I0123 19:28:36.914676 140508591796224 ddar.py:60] Depth 4/1000 time = 4.656661033630371
I0123 19:28:42.241137 140508591796224 ddar.py:60] Depth 5/1000 time = 5.293237686157227
I0123 19:28:46.980829 140508591796224 ddar.py:60] Depth 6/1000 time = 4.739412069320679
I0123 19:28:46.996389 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:28:46.996474 140508591796224 alphageometry.py:566] LM output (score=-2.443027): "l : D b l j l 13 D c l j l 14 ;"
I0123 19:28:46.996510 140508591796224 alphageometry.py:567] Translation: "l = on_bline l j b, on_bline l j c"

I0123 19:28:46.996558 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l j b, on_bline l j c ? coll h j i"
I0123 19:28:46.996732 140508591796224 graph.py:498] 
I0123 19:28:46.996785 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l j b, on_bline l j c ? coll h j i
I0123 19:28:49.424303 140508591796224 ddar.py:60] Depth 1/1000 time = 2.3815855979919434
I0123 19:28:54.249164 140508591796224 ddar.py:60] Depth 2/1000 time = 4.824679374694824
I0123 19:28:57.980896 140508591796224 ddar.py:60] Depth 3/1000 time = 3.7315280437469482
I0123 19:29:02.417214 140508591796224 ddar.py:60] Depth 4/1000 time = 4.434581756591797
I0123 19:29:07.751996 140508591796224 ddar.py:60] Depth 5/1000 time = 5.294070243835449
I0123 19:29:12.411058 140508591796224 ddar.py:60] Depth 6/1000 time = 4.658885717391968
I0123 19:29:17.617804 140508591796224 ddar.py:60] Depth 7/1000 time = 5.206555128097534
I0123 19:29:17.626465 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:29:17.626538 140508591796224 alphageometry.py:566] LM output (score=-2.447168): "l : C b f l 13 D b l f l 14 ;"
I0123 19:29:17.626573 140508591796224 alphageometry.py:567] Translation: "l = on_line l b f, on_bline l f b"

I0123 19:29:17.626609 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_line l b f, on_bline l f b ? coll h j i"
I0123 19:29:17.626761 140508591796224 graph.py:498] 
I0123 19:29:17.626815 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_line l b f, on_bline l f b ? coll h j i
I0123 19:29:19.343254 140508591796224 ddar.py:60] Depth 1/1000 time = 1.6666102409362793
I0123 19:29:23.488446 140508591796224 ddar.py:60] Depth 2/1000 time = 4.145001411437988
I0123 19:29:27.635187 140508591796224 ddar.py:60] Depth 3/1000 time = 4.146532297134399
I0123 19:29:31.216118 140508591796224 ddar.py:60] Depth 4/1000 time = 3.580519914627075
I0123 19:29:35.680584 140508591796224 ddar.py:60] Depth 5/1000 time = 4.444011926651001
I0123 19:29:40.114478 140508591796224 ddar.py:60] Depth 6/1000 time = 4.433650016784668
I0123 19:29:40.120629 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:29:40.120724 140508591796224 alphageometry.py:566] LM output (score=-2.480434): "l : C b e l 13 D b l e l 14 ;"
I0123 19:29:40.120760 140508591796224 alphageometry.py:567] Translation: "l = on_line l b e, on_bline l e b"

I0123 19:29:40.120807 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_line l b e, on_bline l e b ? coll h j i"
I0123 19:29:40.120970 140508591796224 graph.py:498] 
I0123 19:29:40.121024 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_line l b e, on_bline l e b ? coll h j i
I0123 19:29:41.818568 140508591796224 ddar.py:60] Depth 1/1000 time = 1.654667615890503
I0123 19:29:46.574198 140508591796224 ddar.py:60] Depth 2/1000 time = 4.7554404735565186
I0123 19:29:50.867847 140508591796224 ddar.py:60] Depth 3/1000 time = 4.293469429016113
I0123 19:29:54.594042 140508591796224 ddar.py:60] Depth 4/1000 time = 3.7260067462921143
I0123 19:29:58.910588 140508591796224 ddar.py:60] Depth 5/1000 time = 4.3160834312438965
I0123 19:30:03.392431 140508591796224 ddar.py:60] Depth 6/1000 time = 4.463188886642456
I0123 19:30:07.761334 140508591796224 ddar.py:60] Depth 7/1000 time = 4.368728160858154
I0123 19:30:07.767163 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:30:07.767216 140508591796224 alphageometry.py:566] LM output (score=-2.595374): "l : D a c c l 13 D a e e l 14 ;"
I0123 19:30:07.767250 140508591796224 alphageometry.py:567] Translation: "l = on_circle l c a, on_circle l e a"

I0123 19:30:07.767285 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_circle l c a, on_circle l e a ? coll h j i"
I0123 19:30:07.767432 140508591796224 graph.py:498] 
I0123 19:30:07.767484 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_circle l c a, on_circle l e a ? coll h j i
I0123 19:30:09.532388 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7127599716186523
I0123 19:30:13.155295 140508591796224 ddar.py:60] Depth 2/1000 time = 3.62273907661438
I0123 19:30:17.769319 140508591796224 ddar.py:60] Depth 3/1000 time = 4.613786935806274
I0123 19:30:22.560197 140508591796224 ddar.py:60] Depth 4/1000 time = 4.790551424026489
I0123 19:30:27.921095 140508591796224 ddar.py:60] Depth 5/1000 time = 5.325414419174194
I0123 19:30:32.604042 140508591796224 ddar.py:60] Depth 6/1000 time = 4.682767391204834
I0123 19:30:37.946021 140508591796224 ddar.py:60] Depth 7/1000 time = 5.329085826873779
I0123 19:30:37.949340 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:30:37.949413 140508591796224 alphageometry.py:566] LM output (score=-2.615487): "l : D a k k l 13 ;"
I0123 19:30:37.949446 140508591796224 alphageometry.py:567] Translation: "l = on_circle l k a"

I0123 19:30:37.949491 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_circle l k a ? coll h j i"
I0123 19:30:37.949653 140508591796224 graph.py:498] 
I0123 19:30:37.949707 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_circle l k a ? coll h j i
I0123 19:30:39.669470 140508591796224 ddar.py:60] Depth 1/1000 time = 1.679825782775879
I0123 19:30:44.509744 140508591796224 ddar.py:60] Depth 2/1000 time = 4.840111970901489
I0123 19:30:48.215092 140508591796224 ddar.py:60] Depth 3/1000 time = 3.705167531967163
I0123 19:30:52.835718 140508591796224 ddar.py:60] Depth 4/1000 time = 4.600130558013916
I0123 19:30:57.466924 140508591796224 ddar.py:60] Depth 5/1000 time = 4.630995750427246
I0123 19:30:57.473002 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:30:57.473067 140508591796224 alphageometry.py:566] LM output (score=-2.628790): "l : D b c b l 13 D c j j l 14 ;"
I0123 19:30:57.473102 140508591796224 alphageometry.py:567] Translation: "l = on_circle l b c, on_circle l j c"

I0123 19:30:57.473143 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_circle l b c, on_circle l j c ? coll h j i"
I0123 19:30:57.473296 140508591796224 graph.py:498] 
I0123 19:30:57.473349 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_circle l b c, on_circle l j c ? coll h j i
I0123 19:30:59.249675 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7219858169555664
I0123 19:31:04.035381 140508591796224 ddar.py:60] Depth 2/1000 time = 4.785526514053345
I0123 19:31:08.146364 140508591796224 ddar.py:60] Depth 3/1000 time = 4.110802412033081
I0123 19:31:12.909602 140508591796224 ddar.py:60] Depth 4/1000 time = 4.763047933578491
I0123 19:31:18.345308 140508591796224 ddar.py:60] Depth 5/1000 time = 5.400733947753906
I0123 19:31:23.075990 140508591796224 ddar.py:60] Depth 6/1000 time = 4.730463743209839
I0123 19:31:23.094846 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:31:23.094903 140508591796224 alphageometry.py:566] LM output (score=-2.638303): "l : D a d d l 13 ;"
I0123 19:31:23.094937 140508591796224 alphageometry.py:567] Translation: "l = on_circle l d a"

I0123 19:31:23.094978 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_circle l d a ? coll h j i"
I0123 19:31:23.095128 140508591796224 graph.py:498] 
I0123 19:31:23.095180 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_circle l d a ? coll h j i
I0123 19:31:26.804303 140508591796224 ddar.py:60] Depth 1/1000 time = 3.6670265197753906
I0123 19:31:36.134780 140508591796224 ddar.py:60] Depth 2/1000 time = 9.330226421356201
I0123 19:31:44.890429 140508591796224 ddar.py:60] Depth 3/1000 time = 8.755330801010132
I0123 19:31:54.327494 140508591796224 ddar.py:60] Depth 4/1000 time = 9.404399633407593
I0123 19:32:03.645690 140508591796224 ddar.py:60] Depth 5/1000 time = 9.317879915237427
I0123 19:32:03.652394 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:32:03.652450 140508591796224 alphageometry.py:566] LM output (score=-2.660344): "l : D a l c l 13 ;"
I0123 19:32:03.652484 140508591796224 alphageometry.py:567] Translation: "l = on_bline l c a"

I0123 19:32:03.652531 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l c a ? coll h j i"
I0123 19:32:03.652686 140508591796224 graph.py:498] 
I0123 19:32:03.652739 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l c a ? coll h j i
I0123 19:32:05.350247 140508591796224 ddar.py:60] Depth 1/1000 time = 1.632890224456787
I0123 19:32:09.374615 140508591796224 ddar.py:60] Depth 2/1000 time = 4.024209976196289
I0123 19:32:12.908226 140508591796224 ddar.py:60] Depth 3/1000 time = 3.533358335494995
I0123 19:32:17.525990 140508591796224 ddar.py:60] Depth 4/1000 time = 4.5957512855529785
I0123 19:32:21.411762 140508591796224 ddar.py:60] Depth 5/1000 time = 3.8856077194213867
I0123 19:32:21.417901 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:32:21.417956 140508591796224 alphageometry.py:566] LM output (score=-2.681781): "l : D a l i l 13 D e l i l 14 ;"
I0123 19:32:21.417991 140508591796224 alphageometry.py:567] Translation: "l = on_bline l i a, on_bline l i e"

I0123 19:32:21.418026 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l i a, on_bline l i e ? coll h j i"
I0123 19:32:21.418177 140508591796224 graph.py:498] 
I0123 19:32:21.418230 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l i a, on_bline l i e ? coll h j i
I0123 19:32:23.864855 140508591796224 ddar.py:60] Depth 1/1000 time = 2.3956899642944336
I0123 19:32:28.342572 140508591796224 ddar.py:60] Depth 2/1000 time = 4.477550506591797
I0123 19:32:32.779539 140508591796224 ddar.py:60] Depth 3/1000 time = 4.436722040176392
I0123 19:32:37.795038 140508591796224 ddar.py:60] Depth 4/1000 time = 4.992961406707764
I0123 19:32:42.121088 140508591796224 ddar.py:60] Depth 5/1000 time = 4.325868129730225
I0123 19:32:42.128983 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:32:42.129039 140508591796224 alphageometry.py:566] LM output (score=-2.683354): "l : D a l e l 13 ;"
I0123 19:32:42.129073 140508591796224 alphageometry.py:567] Translation: "l = on_bline l e a"

I0123 19:32:42.129108 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l e a ? coll h j i"
I0123 19:32:42.129261 140508591796224 graph.py:498] 
I0123 19:32:42.129315 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k h a; l = on_bline l e a ? coll h j i
I0123 19:32:43.788749 140508591796224 ddar.py:60] Depth 1/1000 time = 1.6143207550048828
I0123 19:32:47.780909 140508591796224 ddar.py:60] Depth 2/1000 time = 3.991999387741089
I0123 19:32:51.880599 140508591796224 ddar.py:60] Depth 3/1000 time = 4.099486351013184
I0123 19:32:55.688204 140508591796224 ddar.py:60] Depth 4/1000 time = 3.790595769882202
I0123 19:33:00.019446 140508591796224 ddar.py:60] Depth 5/1000 time = 4.331049919128418
I0123 19:33:00.025537 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:33:00.025596 140508591796224 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : D a k e k 11 D a k j k 12 ; x00
I0123 19:33:06.563789 140508591796224 alphageometry.py:566] LM output (score=-1.554281): "l : D a l g l 13 ;"
I0123 19:33:06.563938 140508591796224 alphageometry.py:567] Translation: "l = on_bline l g a"

I0123 19:33:06.563983 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l g a ? coll h j i"
I0123 19:33:06.564124 140508591796224 graph.py:498] 
I0123 19:33:06.564177 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l g a ? coll h j i
I0123 19:33:08.245085 140508591796224 ddar.py:60] Depth 1/1000 time = 1.6385138034820557
I0123 19:33:12.826139 140508591796224 ddar.py:60] Depth 2/1000 time = 4.580892562866211
I0123 19:33:16.295370 140508591796224 ddar.py:60] Depth 3/1000 time = 3.4690470695495605
I0123 19:33:20.538921 140508591796224 ddar.py:60] Depth 4/1000 time = 4.24234676361084
I0123 19:33:24.198739 140508591796224 ddar.py:60] Depth 5/1000 time = 3.6595423221588135
I0123 19:33:29.156807 140508591796224 ddar.py:60] Depth 6/1000 time = 4.9229185581207275
I0123 19:33:34.027452 140508591796224 ddar.py:60] Depth 7/1000 time = 4.870478391647339
I0123 19:33:38.295902 140508591796224 ddar.py:60] Depth 8/1000 time = 4.268259048461914
I0123 19:33:38.302177 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:33:38.302232 140508591796224 alphageometry.py:566] LM output (score=-1.596032): "l : D a l i l 13 D c l i l 14 ;"
I0123 19:33:38.302266 140508591796224 alphageometry.py:567] Translation: "l = on_bline l i a, on_bline l i c"

I0123 19:33:38.302300 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l i a, on_bline l i c ? coll h j i"
I0123 19:33:38.302445 140508591796224 graph.py:498] 
I0123 19:33:38.302497 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l i a, on_bline l i c ? coll h j i
I0123 19:33:40.175366 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7963507175445557
I0123 19:33:44.423416 140508591796224 ddar.py:60] Depth 2/1000 time = 4.247870445251465
I0123 19:33:48.731408 140508591796224 ddar.py:60] Depth 3/1000 time = 4.3078083992004395
I0123 19:33:52.695504 140508591796224 ddar.py:60] Depth 4/1000 time = 3.9618468284606934
I0123 19:33:57.456354 140508591796224 ddar.py:60] Depth 5/1000 time = 4.760658025741577
I0123 19:34:02.839307 140508591796224 ddar.py:60] Depth 6/1000 time = 5.322121620178223
I0123 19:34:08.815228 140508591796224 ddar.py:60] Depth 7/1000 time = 5.975606918334961
I0123 19:34:14.782385 140508591796224 ddar.py:60] Depth 8/1000 time = 5.966966152191162
I0123 19:34:14.791792 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:34:14.791859 140508591796224 alphageometry.py:566] LM output (score=-1.650356): "l : D d g d l 13 ;"
I0123 19:34:14.791908 140508591796224 alphageometry.py:567] Translation: "l = on_circle l d g"

I0123 19:34:14.791948 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_circle l d g ? coll h j i"
I0123 19:34:14.792096 140508591796224 graph.py:498] 
I0123 19:34:14.792151 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_circle l d g ? coll h j i
I0123 19:34:17.412982 140508591796224 ddar.py:60] Depth 1/1000 time = 2.5753350257873535
I0123 19:34:26.143139 140508591796224 ddar.py:60] Depth 2/1000 time = 8.729966402053833
I0123 19:34:34.828763 140508591796224 ddar.py:60] Depth 3/1000 time = 8.685418605804443
I0123 19:34:43.075276 140508591796224 ddar.py:60] Depth 4/1000 time = 8.245259523391724
I0123 19:34:52.095276 140508591796224 ddar.py:60] Depth 5/1000 time = 9.019661903381348
I0123 19:35:02.475758 140508591796224 ddar.py:60] Depth 6/1000 time = 10.332926750183105
I0123 19:35:12.735754 140508591796224 ddar.py:60] Depth 7/1000 time = 10.259788513183594
I0123 19:35:22.381146 140508591796224 ddar.py:60] Depth 8/1000 time = 9.645110368728638
I0123 19:35:22.387857 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:35:22.387947 140508591796224 alphageometry.py:566] LM output (score=-1.683742): "l : D a l g l 13 D g l i l 14 ;"
I0123 19:35:22.387982 140508591796224 alphageometry.py:567] Translation: "l = on_bline l g a, on_bline l i g"

I0123 19:35:22.388031 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l g a, on_bline l i g ? coll h j i"
I0123 19:35:22.388207 140508591796224 graph.py:498] 
I0123 19:35:22.388262 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l g a, on_bline l i g ? coll h j i
I0123 19:35:24.969923 140508591796224 ddar.py:60] Depth 1/1000 time = 2.5176775455474854
I0123 19:35:29.225675 140508591796224 ddar.py:60] Depth 2/1000 time = 4.255568742752075
I0123 19:35:33.582715 140508591796224 ddar.py:60] Depth 3/1000 time = 4.3568115234375
I0123 19:35:37.520655 140508591796224 ddar.py:60] Depth 4/1000 time = 3.935556411743164
I0123 19:35:42.399732 140508591796224 ddar.py:60] Depth 5/1000 time = 4.878859758377075
I0123 19:35:46.731358 140508591796224 ddar.py:60] Depth 6/1000 time = 4.331451892852783
I0123 19:35:51.936856 140508591796224 ddar.py:60] Depth 7/1000 time = 5.205275774002075
I0123 19:35:57.276612 140508591796224 ddar.py:60] Depth 8/1000 time = 5.339438199996948
I0123 19:36:03.103091 140508591796224 ddar.py:60] Depth 9/1000 time = 5.762279748916626
I0123 19:36:09.630100 140508591796224 ddar.py:60] Depth 10/1000 time = 6.526822805404663
I0123 19:36:16.263354 140508591796224 ddar.py:60] Depth 11/1000 time = 6.633035898208618
I0123 19:36:16.281723 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:36:16.281785 140508591796224 alphageometry.py:566] LM output (score=-1.806674): "l : D a l i l 13 D g l i l 14 ;"
I0123 19:36:16.281820 140508591796224 alphageometry.py:567] Translation: "l = on_bline l i a, on_bline l i g"

I0123 19:36:16.281856 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l i a, on_bline l i g ? coll h j i"
I0123 19:36:16.282014 140508591796224 graph.py:498] 
I0123 19:36:16.282070 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l i a, on_bline l i g ? coll h j i
I0123 19:36:18.138109 140508591796224 ddar.py:60] Depth 1/1000 time = 1.810896635055542
I0123 19:36:22.422969 140508591796224 ddar.py:60] Depth 2/1000 time = 4.284703493118286
I0123 19:36:26.743656 140508591796224 ddar.py:60] Depth 3/1000 time = 4.320507287979126
I0123 19:36:31.404557 140508591796224 ddar.py:60] Depth 4/1000 time = 4.658576488494873
I0123 19:36:35.647177 140508591796224 ddar.py:60] Depth 5/1000 time = 4.242308855056763
I0123 19:36:40.690968 140508591796224 ddar.py:60] Depth 6/1000 time = 5.043605327606201
I0123 19:36:45.292417 140508591796224 ddar.py:60] Depth 7/1000 time = 4.6012725830078125
I0123 19:36:50.633170 140508591796224 ddar.py:60] Depth 8/1000 time = 5.340497255325317
I0123 19:36:57.218998 140508591796224 ddar.py:60] Depth 9/1000 time = 6.5218260288238525
I0123 19:37:03.215020 140508591796224 ddar.py:60] Depth 10/1000 time = 5.995830774307251
I0123 19:37:09.824878 140508591796224 ddar.py:60] Depth 11/1000 time = 6.609594345092773
I0123 19:37:09.844011 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:37:09.844094 140508591796224 alphageometry.py:566] LM output (score=-1.898911): "l : D a g g l 13 D a i i l 14 ;"
I0123 19:37:09.844131 140508591796224 alphageometry.py:567] Translation: "l = on_circle l g a, on_circle l i a"

I0123 19:37:09.844181 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_circle l g a, on_circle l i a ? coll h j i"
I0123 19:37:09.844349 140508591796224 graph.py:498] 
I0123 19:37:09.844405 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_circle l g a, on_circle l i a ? coll h j i
I0123 19:37:11.598192 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7032132148742676
I0123 19:37:16.446749 140508591796224 ddar.py:60] Depth 2/1000 time = 4.84839940071106
I0123 19:37:20.373883 140508591796224 ddar.py:60] Depth 3/1000 time = 3.9269649982452393
I0123 19:37:25.016175 140508591796224 ddar.py:60] Depth 4/1000 time = 4.642065763473511
I0123 19:37:29.796506 140508591796224 ddar.py:60] Depth 5/1000 time = 4.780009508132935
I0123 19:37:33.994919 140508591796224 ddar.py:60] Depth 6/1000 time = 4.197088956832886
I0123 19:37:38.933366 140508591796224 ddar.py:60] Depth 7/1000 time = 4.938267946243286
I0123 19:37:43.353852 140508591796224 ddar.py:60] Depth 8/1000 time = 4.420296907424927
I0123 19:37:48.703136 140508591796224 ddar.py:60] Depth 9/1000 time = 5.349090576171875
I0123 19:37:53.424049 140508591796224 ddar.py:60] Depth 10/1000 time = 4.7207136154174805
I0123 19:37:59.530169 140508591796224 ddar.py:60] Depth 11/1000 time = 6.053885221481323
I0123 19:38:05.906671 140508591796224 ddar.py:60] Depth 12/1000 time = 6.376280307769775
I0123 19:38:12.284522 140508591796224 ddar.py:60] Depth 13/1000 time = 6.377604246139526
I0123 19:38:12.312207 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:38:12.312270 140508591796224 alphageometry.py:566] LM output (score=-1.902453): "l : D a l j l 13 ;"
I0123 19:38:12.312303 140508591796224 alphageometry.py:567] Translation: "l = on_bline l j a"

I0123 19:38:12.312358 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l j a ? coll h j i"
I0123 19:38:12.312513 140508591796224 graph.py:498] 
I0123 19:38:12.312565 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l j a ? coll h j i
I0123 19:38:13.959050 140508591796224 ddar.py:60] Depth 1/1000 time = 1.6010370254516602
I0123 19:38:17.304415 140508591796224 ddar.py:60] Depth 2/1000 time = 3.3452014923095703
I0123 19:38:21.419457 140508591796224 ddar.py:60] Depth 3/1000 time = 4.114781856536865
I0123 19:38:24.951572 140508591796224 ddar.py:60] Depth 4/1000 time = 3.530794620513916
I0123 19:38:29.293938 140508591796224 ddar.py:60] Depth 5/1000 time = 4.3421478271484375
I0123 19:38:33.017043 140508591796224 ddar.py:60] Depth 6/1000 time = 3.722907543182373
I0123 19:38:38.085971 140508591796224 ddar.py:60] Depth 7/1000 time = 5.0285046100616455
I0123 19:38:42.408236 140508591796224 ddar.py:60] Depth 8/1000 time = 4.32201361656189
I0123 19:38:47.489264 140508591796224 ddar.py:60] Depth 9/1000 time = 5.080690622329712
I0123 19:38:47.494792 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:38:47.494856 140508591796224 alphageometry.py:566] LM output (score=-1.928182): "l : D j k k l 13 ;"
I0123 19:38:47.494890 140508591796224 alphageometry.py:567] Translation: "l = on_circle l k j"

I0123 19:38:47.494928 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_circle l k j ? coll h j i"
I0123 19:38:47.495085 140508591796224 graph.py:498] 
I0123 19:38:47.495140 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_circle l k j ? coll h j i
I0123 19:38:49.317797 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7792232036590576
I0123 19:38:54.201956 140508591796224 ddar.py:60] Depth 2/1000 time = 4.884007930755615
I0123 19:38:57.861498 140508591796224 ddar.py:60] Depth 3/1000 time = 3.6593050956726074
I0123 19:39:02.408055 140508591796224 ddar.py:60] Depth 4/1000 time = 4.545324802398682
I0123 19:39:06.242921 140508591796224 ddar.py:60] Depth 5/1000 time = 3.8346827030181885
I0123 19:39:11.325346 140508591796224 ddar.py:60] Depth 6/1000 time = 5.047802686691284
I0123 19:39:15.705789 140508591796224 ddar.py:60] Depth 7/1000 time = 4.380256175994873
I0123 19:39:20.848436 140508591796224 ddar.py:60] Depth 8/1000 time = 5.142434358596802
I0123 19:39:20.854825 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:39:20.854885 140508591796224 alphageometry.py:566] LM output (score=-2.119548): "l : D a l e l 13 D a l k l 14 ;"
I0123 19:39:20.854919 140508591796224 alphageometry.py:567] Translation: "l = on_bline l e a, on_bline l k a"

I0123 19:39:20.854957 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l e a, on_bline l k a ? coll h j i"
I0123 19:39:20.855103 140508591796224 graph.py:498] 
I0123 19:39:20.855172 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l e a, on_bline l k a ? coll h j i
I0123 19:39:22.640004 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7221109867095947
I0123 19:39:27.520827 140508591796224 ddar.py:60] Depth 2/1000 time = 4.880656003952026
I0123 19:39:31.094812 140508591796224 ddar.py:60] Depth 3/1000 time = 3.5738043785095215
I0123 19:39:35.470588 140508591796224 ddar.py:60] Depth 4/1000 time = 4.37450647354126
I0123 19:39:39.170746 140508591796224 ddar.py:60] Depth 5/1000 time = 3.6998534202575684
I0123 19:39:44.333060 140508591796224 ddar.py:60] Depth 6/1000 time = 5.1270833015441895
I0123 19:39:48.678967 140508591796224 ddar.py:60] Depth 7/1000 time = 4.345739126205444
I0123 19:39:53.673571 140508591796224 ddar.py:60] Depth 8/1000 time = 4.9944069385528564
I0123 19:39:53.685080 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:39:53.685258 140508591796224 alphageometry.py:566] LM output (score=-2.269743): "l : D a l j l 13 D a l i l 14 ;"
I0123 19:39:53.685300 140508591796224 alphageometry.py:567] Translation: "l = on_bline l j a, on_bline l i a"

I0123 19:39:53.685354 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l j a, on_bline l i a ? coll h j i"
I0123 19:39:53.685531 140508591796224 graph.py:498] 
I0123 19:39:53.685586 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l j a, on_bline l i a ? coll h j i
I0123 19:39:55.466472 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7331249713897705
I0123 19:39:59.861525 140508591796224 ddar.py:60] Depth 2/1000 time = 4.394873142242432
I0123 19:40:03.601252 140508591796224 ddar.py:60] Depth 3/1000 time = 3.7395339012145996
I0123 19:40:08.127221 140508591796224 ddar.py:60] Depth 4/1000 time = 4.524595737457275
I0123 19:40:12.872745 140508591796224 ddar.py:60] Depth 5/1000 time = 4.7452778816223145
I0123 19:40:16.944489 140508591796224 ddar.py:60] Depth 6/1000 time = 4.0714194774627686
I0123 19:40:22.703416 140508591796224 ddar.py:60] Depth 7/1000 time = 5.704282522201538
I0123 19:40:27.638749 140508591796224 ddar.py:60] Depth 8/1000 time = 4.935157537460327
I0123 19:40:33.294288 140508591796224 ddar.py:60] Depth 9/1000 time = 5.655287742614746
I0123 19:40:33.301963 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:40:33.302040 140508591796224 alphageometry.py:566] LM output (score=-2.279364): "l : D a l c l 13 D c l i l 14 ;"
I0123 19:40:33.302075 140508591796224 alphageometry.py:567] Translation: "l = on_bline l c a, on_bline l i c"

I0123 19:40:33.302126 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l c a, on_bline l i c ? coll h j i"
I0123 19:40:33.302290 140508591796224 graph.py:498] 
I0123 19:40:33.302346 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l c a, on_bline l i c ? coll h j i
I0123 19:40:35.184225 140508591796224 ddar.py:60] Depth 1/1000 time = 1.8329546451568604
I0123 19:40:40.248481 140508591796224 ddar.py:60] Depth 2/1000 time = 5.064073801040649
I0123 19:40:43.948466 140508591796224 ddar.py:60] Depth 3/1000 time = 3.6997976303100586
I0123 19:40:48.601588 140508591796224 ddar.py:60] Depth 4/1000 time = 4.650805234909058
I0123 19:40:52.800709 140508591796224 ddar.py:60] Depth 5/1000 time = 4.198861598968506
I0123 19:40:58.950439 140508591796224 ddar.py:60] Depth 6/1000 time = 6.086059331893921
I0123 19:41:04.256496 140508591796224 ddar.py:60] Depth 7/1000 time = 5.305871963500977
I0123 19:41:10.306247 140508591796224 ddar.py:60] Depth 8/1000 time = 6.049484729766846
I0123 19:41:10.315552 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:41:10.315650 140508591796224 alphageometry.py:566] LM output (score=-2.357515): "l : D a l g l 13 D a l i l 14 ;"
I0123 19:41:10.315687 140508591796224 alphageometry.py:567] Translation: "l = on_bline l g a, on_bline l i a"

I0123 19:41:10.315736 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l g a, on_bline l i a ? coll h j i"
I0123 19:41:10.315901 140508591796224 graph.py:498] 
I0123 19:41:10.315956 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l g a, on_bline l i a ? coll h j i
I0123 19:41:12.130418 140508591796224 ddar.py:60] Depth 1/1000 time = 1.768465280532837
I0123 19:41:17.135128 140508591796224 ddar.py:60] Depth 2/1000 time = 5.004534721374512
I0123 19:41:20.821052 140508591796224 ddar.py:60] Depth 3/1000 time = 3.6857500076293945
I0123 19:41:25.460237 140508591796224 ddar.py:60] Depth 4/1000 time = 4.636926174163818
I0123 19:41:29.678564 140508591796224 ddar.py:60] Depth 5/1000 time = 4.218078374862671
I0123 19:41:34.766688 140508591796224 ddar.py:60] Depth 6/1000 time = 5.087813138961792
I0123 19:41:39.337849 140508591796224 ddar.py:60] Depth 7/1000 time = 4.570974349975586
I0123 19:41:44.676516 140508591796224 ddar.py:60] Depth 8/1000 time = 5.338473320007324
I0123 19:41:50.604342 140508591796224 ddar.py:60] Depth 9/1000 time = 5.859655141830444
I0123 19:41:57.254977 140508591796224 ddar.py:60] Depth 10/1000 time = 6.650339841842651
I0123 19:42:03.939622 140508591796224 ddar.py:60] Depth 11/1000 time = 6.684382438659668
I0123 19:42:03.958107 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:42:03.958206 140508591796224 alphageometry.py:566] LM output (score=-2.382843): "l : D a k k l 13 ;"
I0123 19:42:03.958241 140508591796224 alphageometry.py:567] Translation: "l = on_circle l k a"

I0123 19:42:03.958290 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_circle l k a ? coll h j i"
I0123 19:42:03.958458 140508591796224 graph.py:498] 
I0123 19:42:03.958513 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_circle l k a ? coll h j i
I0123 19:42:05.675521 140508591796224 ddar.py:60] Depth 1/1000 time = 1.6640815734863281
I0123 19:42:09.995287 140508591796224 ddar.py:60] Depth 2/1000 time = 4.319583892822266
I0123 19:42:13.680470 140508591796224 ddar.py:60] Depth 3/1000 time = 3.6849868297576904
I0123 19:42:18.189238 140508591796224 ddar.py:60] Depth 4/1000 time = 4.507722854614258
I0123 19:42:22.021852 140508591796224 ddar.py:60] Depth 5/1000 time = 3.832402229309082
I0123 19:42:27.330404 140508591796224 ddar.py:60] Depth 6/1000 time = 5.274345874786377
I0123 19:42:31.759950 140508591796224 ddar.py:60] Depth 7/1000 time = 4.429356575012207
I0123 19:42:36.931948 140508591796224 ddar.py:60] Depth 8/1000 time = 5.171808481216431
I0123 19:42:36.938389 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:42:36.938444 140508591796224 alphageometry.py:566] LM output (score=-2.387980): "l : D d e d l 13 ;"
I0123 19:42:36.938479 140508591796224 alphageometry.py:567] Translation: "l = on_circle l d e"

I0123 19:42:36.938516 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_circle l d e ? coll h j i"
I0123 19:42:36.938664 140508591796224 graph.py:498] 
I0123 19:42:36.938719 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_circle l d e ? coll h j i
I0123 19:42:40.068914 140508591796224 ddar.py:60] Depth 1/1000 time = 3.061410903930664
I0123 19:42:49.963481 140508591796224 ddar.py:60] Depth 2/1000 time = 9.894379138946533
I0123 19:42:57.933859 140508591796224 ddar.py:60] Depth 3/1000 time = 7.970181465148926
I0123 19:43:06.978492 140508591796224 ddar.py:60] Depth 4/1000 time = 9.043426513671875
I0123 19:43:15.988793 140508591796224 ddar.py:60] Depth 5/1000 time = 9.010101556777954
I0123 19:43:25.602351 140508591796224 ddar.py:60] Depth 6/1000 time = 9.562879800796509
I0123 19:43:35.907464 140508591796224 ddar.py:60] Depth 7/1000 time = 10.304794549942017
I0123 19:43:46.223764 140508591796224 ddar.py:60] Depth 8/1000 time = 10.31606912612915
I0123 19:43:46.230349 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:43:46.230409 140508591796224 alphageometry.py:566] LM output (score=-2.391145): "l : D a l i l 13 D e l i l 14 ;"
I0123 19:43:46.230443 140508591796224 alphageometry.py:567] Translation: "l = on_bline l i a, on_bline l i e"

I0123 19:43:46.230480 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l i a, on_bline l i e ? coll h j i"
I0123 19:43:46.230630 140508591796224 graph.py:498] 
I0123 19:43:46.230685 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l i a, on_bline l i e ? coll h j i
I0123 19:43:48.085659 140508591796224 ddar.py:60] Depth 1/1000 time = 1.8057904243469238
I0123 19:43:51.813445 140508591796224 ddar.py:60] Depth 2/1000 time = 3.7276134490966797
I0123 19:43:56.242357 140508591796224 ddar.py:60] Depth 3/1000 time = 4.428677320480347
I0123 19:44:00.842258 140508591796224 ddar.py:60] Depth 4/1000 time = 4.598788738250732
I0123 19:44:04.696972 140508591796224 ddar.py:60] Depth 5/1000 time = 3.854519844055176
I0123 19:44:10.173736 140508591796224 ddar.py:60] Depth 6/1000 time = 5.442038297653198
I0123 19:44:14.907959 140508591796224 ddar.py:60] Depth 7/1000 time = 4.733994722366333
I0123 19:44:20.379936 140508591796224 ddar.py:60] Depth 8/1000 time = 5.471676826477051
I0123 19:44:20.388117 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:44:20.388175 140508591796224 alphageometry.py:566] LM output (score=-2.408350): "l : C b g l 13 D b l g l 14 ;"
I0123 19:44:20.388222 140508591796224 alphageometry.py:567] Translation: "l = on_line l b g, on_bline l g b"

I0123 19:44:20.388259 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_line l b g, on_bline l g b ? coll h j i"
I0123 19:44:20.388411 140508591796224 graph.py:498] 
I0123 19:44:20.388464 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_line l b g, on_bline l g b ? coll h j i
I0123 19:44:22.114287 140508591796224 ddar.py:60] Depth 1/1000 time = 1.687326431274414
I0123 19:44:26.365949 140508591796224 ddar.py:60] Depth 2/1000 time = 4.251490116119385
I0123 19:44:30.669746 140508591796224 ddar.py:60] Depth 3/1000 time = 4.303614854812622
I0123 19:44:34.268759 140508591796224 ddar.py:60] Depth 4/1000 time = 3.59856915473938
I0123 19:44:38.704837 140508591796224 ddar.py:60] Depth 5/1000 time = 4.434821844100952
I0123 19:44:43.274195 140508591796224 ddar.py:60] Depth 6/1000 time = 4.569163084030151
I0123 19:44:47.956634 140508591796224 ddar.py:60] Depth 7/1000 time = 4.682256460189819
I0123 19:44:52.249428 140508591796224 ddar.py:60] Depth 8/1000 time = 4.292526006698608
I0123 19:44:57.364846 140508591796224 ddar.py:60] Depth 9/1000 time = 5.115097999572754
I0123 19:44:57.401646 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:44:57.401712 140508591796224 alphageometry.py:566] LM output (score=-2.411996): "l : D c l f l 13 D d f f l 14 ;"
I0123 19:44:57.401747 140508591796224 alphageometry.py:567] Translation: "l = on_bline l f c, on_circle l f d"

I0123 19:44:57.401785 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l f c, on_circle l f d ? coll h j i"
I0123 19:44:57.401938 140508591796224 graph.py:498] 
I0123 19:44:57.401990 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l f c, on_circle l f d ? coll h j i
I0123 19:45:00.507218 140508591796224 ddar.py:60] Depth 1/1000 time = 3.065664529800415
I0123 19:45:06.245920 140508591796224 ddar.py:60] Depth 2/1000 time = 5.738541841506958
I0123 19:45:11.124831 140508591796224 ddar.py:60] Depth 3/1000 time = 4.878664255142212
I0123 19:45:15.318765 140508591796224 ddar.py:60] Depth 4/1000 time = 4.1925859451293945
I0123 19:45:20.423456 140508591796224 ddar.py:60] Depth 5/1000 time = 5.104488372802734
I0123 19:45:24.763257 140508591796224 ddar.py:60] Depth 6/1000 time = 4.339608907699585
I0123 19:45:30.612730 140508591796224 ddar.py:60] Depth 7/1000 time = 5.804922580718994
I0123 19:45:36.406010 140508591796224 ddar.py:60] Depth 8/1000 time = 5.792964935302734
I0123 19:45:41.432129 140508591796224 ddar.py:60] Depth 9/1000 time = 5.025921583175659
I0123 19:45:41.438695 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:45:41.438764 140508591796224 alphageometry.py:566] LM output (score=-2.475270): "l : D a c c l 13 D a i i l 14 ;"
I0123 19:45:41.438799 140508591796224 alphageometry.py:567] Translation: "l = on_circle l c a, on_circle l i a"

I0123 19:45:41.438838 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_circle l c a, on_circle l i a ? coll h j i"
I0123 19:45:41.439003 140508591796224 graph.py:498] 
I0123 19:45:41.439058 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_circle l c a, on_circle l i a ? coll h j i
I0123 19:45:43.926831 140508591796224 ddar.py:60] Depth 1/1000 time = 2.4364781379699707
I0123 19:45:47.499902 140508591796224 ddar.py:60] Depth 2/1000 time = 3.572852849960327
I0123 19:45:52.251087 140508591796224 ddar.py:60] Depth 3/1000 time = 4.750893831253052
I0123 19:45:56.274503 140508591796224 ddar.py:60] Depth 4/1000 time = 4.023231744766235
I0123 19:46:00.319309 140508591796224 ddar.py:60] Depth 5/1000 time = 4.044633626937866
I0123 19:46:05.177532 140508591796224 ddar.py:60] Depth 6/1000 time = 4.856938123703003
I0123 19:46:10.306381 140508591796224 ddar.py:60] Depth 7/1000 time = 5.128634214401245
I0123 19:46:14.727622 140508591796224 ddar.py:60] Depth 8/1000 time = 4.421030521392822
I0123 19:46:20.097649 140508591796224 ddar.py:60] Depth 9/1000 time = 5.369853258132935
I0123 19:46:24.810222 140508591796224 ddar.py:60] Depth 10/1000 time = 4.712326765060425
I0123 19:46:31.193157 140508591796224 ddar.py:60] Depth 11/1000 time = 6.329104423522949
I0123 19:46:36.815668 140508591796224 ddar.py:60] Depth 12/1000 time = 5.622316122055054
I0123 19:46:43.249440 140508591796224 ddar.py:60] Depth 13/1000 time = 6.433524131774902
I0123 19:46:43.276340 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:46:43.276431 140508591796224 alphageometry.py:566] LM output (score=-2.515101): "l : D b l e l 13 D d e e l 14 ;"
I0123 19:46:43.276466 140508591796224 alphageometry.py:567] Translation: "l = on_bline l e b, on_circle l e d"

I0123 19:46:43.276513 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l e b, on_circle l e d ? coll h j i"
I0123 19:46:43.276687 140508591796224 graph.py:498] 
I0123 19:46:43.276743 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l e b, on_circle l e d ? coll h j i
I0123 19:46:46.413724 140508591796224 ddar.py:60] Depth 1/1000 time = 3.0923728942871094
I0123 19:46:52.218924 140508591796224 ddar.py:60] Depth 2/1000 time = 5.805007696151733
I0123 19:46:57.399481 140508591796224 ddar.py:60] Depth 3/1000 time = 5.1803693771362305
I0123 19:47:03.408503 140508591796224 ddar.py:60] Depth 4/1000 time = 6.007755279541016
I0123 19:47:09.635893 140508591796224 ddar.py:60] Depth 5/1000 time = 6.227073669433594
I0123 19:47:15.786074 140508591796224 ddar.py:60] Depth 6/1000 time = 6.104769468307495
I0123 19:47:22.568510 140508591796224 ddar.py:60] Depth 7/1000 time = 6.782195568084717
I0123 19:47:29.426392 140508591796224 ddar.py:60] Depth 8/1000 time = 6.857555150985718
I0123 19:47:29.433450 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:47:29.433526 140508591796224 alphageometry.py:566] LM output (score=-2.531981): "l : D g h g l 13 ;"
I0123 19:47:29.433564 140508591796224 alphageometry.py:567] Translation: "l = on_circle l g h"

I0123 19:47:29.433603 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_circle l g h ? coll h j i"
I0123 19:47:29.433784 140508591796224 graph.py:498] 
I0123 19:47:29.433841 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_circle l g h ? coll h j i
I0123 19:47:31.041698 140508591796224 ddar.py:60] Depth 1/1000 time = 1.568559169769287
I0123 19:47:34.739982 140508591796224 ddar.py:60] Depth 2/1000 time = 3.6981313228607178
I0123 19:47:38.637659 140508591796224 ddar.py:60] Depth 3/1000 time = 3.8974902629852295
I0123 19:47:41.870389 140508591796224 ddar.py:60] Depth 4/1000 time = 3.2317373752593994
I0123 19:47:45.980300 140508591796224 ddar.py:60] Depth 5/1000 time = 4.109387159347534
I0123 19:47:49.788090 140508591796224 ddar.py:60] Depth 6/1000 time = 3.7827935218811035
I0123 19:47:53.546576 140508591796224 ddar.py:60] Depth 7/1000 time = 3.758310079574585
I0123 19:47:58.054354 140508591796224 ddar.py:60] Depth 8/1000 time = 4.5075342655181885
I0123 19:47:58.061133 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:47:58.061225 140508591796224 alphageometry.py:566] LM output (score=-2.587295): "l : D a g g l 13 D a k k l 14 ;"
I0123 19:47:58.061259 140508591796224 alphageometry.py:567] Translation: "l = on_circle l g a, on_circle l k a"

I0123 19:47:58.061306 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_circle l g a, on_circle l k a ? coll h j i"
I0123 19:47:58.061478 140508591796224 graph.py:498] 
I0123 19:47:58.061533 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_circle l g a, on_circle l k a ? coll h j i
I0123 19:47:59.921665 140508591796224 ddar.py:60] Depth 1/1000 time = 1.8130135536193848
I0123 19:48:05.418397 140508591796224 ddar.py:60] Depth 2/1000 time = 5.4965434074401855
I0123 19:48:09.633414 140508591796224 ddar.py:60] Depth 3/1000 time = 4.214831352233887
I0123 19:48:14.716825 140508591796224 ddar.py:60] Depth 4/1000 time = 5.082141637802124
I0123 19:48:19.114407 140508591796224 ddar.py:60] Depth 5/1000 time = 4.3973228931427
I0123 19:48:25.132635 140508591796224 ddar.py:60] Depth 6/1000 time = 5.972535610198975
I0123 19:48:30.227012 140508591796224 ddar.py:60] Depth 7/1000 time = 5.094188928604126
I0123 19:48:36.089672 140508591796224 ddar.py:60] Depth 8/1000 time = 5.862411260604858
I0123 19:48:36.096960 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:48:36.097069 140508591796224 alphageometry.py:566] LM output (score=-2.590898): "l : D d e e l 13 D d h h l 14 ;"
I0123 19:48:36.097105 140508591796224 alphageometry.py:567] Translation: "l = on_circle l e d, on_circle l h d"

I0123 19:48:36.097152 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_circle l e d, on_circle l h d ? coll h j i"
I0123 19:48:36.097321 140508591796224 graph.py:498] 
I0123 19:48:36.097376 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_circle l e d, on_circle l h d ? coll h j i
I0123 19:48:38.661468 140508591796224 ddar.py:60] Depth 1/1000 time = 2.503354072570801
I0123 19:48:43.285885 140508591796224 ddar.py:60] Depth 2/1000 time = 4.624204874038696
I0123 19:48:50.725415 140508591796224 ddar.py:60] Depth 3/1000 time = 7.439345598220825
I0123 19:48:57.184012 140508591796224 ddar.py:60] Depth 4/1000 time = 6.457332611083984
I0123 19:49:03.795591 140508591796224 ddar.py:60] Depth 5/1000 time = 6.611242055892944
I0123 19:49:10.357695 140508591796224 ddar.py:60] Depth 6/1000 time = 6.523404598236084
I0123 19:49:17.714191 140508591796224 ddar.py:60] Depth 7/1000 time = 7.356289863586426
I0123 19:49:24.194291 140508591796224 ddar.py:60] Depth 8/1000 time = 6.479871034622192
I0123 19:49:24.211974 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:49:24.212042 140508591796224 alphageometry.py:566] LM output (score=-2.618993): "l : D a l j l 13 D j l i l 14 ;"
I0123 19:49:24.212075 140508591796224 alphageometry.py:567] Translation: "l = on_bline l j a, on_bline l i j"

I0123 19:49:24.212115 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l j a, on_bline l i j ? coll h j i"
I0123 19:49:24.212268 140508591796224 graph.py:498] 
I0123 19:49:24.212323 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l j a, on_bline l i j ? coll h j i
I0123 19:49:26.844030 140508591796224 ddar.py:60] Depth 1/1000 time = 2.560720920562744
I0123 19:49:30.623941 140508591796224 ddar.py:60] Depth 2/1000 time = 3.7797293663024902
I0123 19:49:35.256425 140508591796224 ddar.py:60] Depth 3/1000 time = 4.63228178024292
I0123 19:49:39.178466 140508591796224 ddar.py:60] Depth 4/1000 time = 3.9208154678344727
I0123 19:49:43.983094 140508591796224 ddar.py:60] Depth 5/1000 time = 4.8044469356536865
I0123 19:49:48.069488 140508591796224 ddar.py:60] Depth 6/1000 time = 4.086203575134277
I0123 19:49:53.857787 140508591796224 ddar.py:60] Depth 7/1000 time = 5.737284183502197
I0123 19:49:58.729596 140508591796224 ddar.py:60] Depth 8/1000 time = 4.871603012084961
I0123 19:50:03.624484 140508591796224 ddar.py:60] Depth 9/1000 time = 4.894697904586792
I0123 19:50:03.631826 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:50:03.631882 140508591796224 alphageometry.py:566] LM output (score=-2.629462): "l : D d f d l 13 ;"
I0123 19:50:03.631915 140508591796224 alphageometry.py:567] Translation: "l = on_circle l d f"

I0123 19:50:03.631952 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_circle l d f ? coll h j i"
I0123 19:50:03.632106 140508591796224 graph.py:498] 
I0123 19:50:03.632159 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_circle l d f ? coll h j i
I0123 19:50:07.031326 140508591796224 ddar.py:60] Depth 1/1000 time = 3.3355140686035156
I0123 19:50:16.232576 140508591796224 ddar.py:60] Depth 2/1000 time = 9.201014995574951
I0123 19:50:25.123742 140508591796224 ddar.py:60] Depth 3/1000 time = 8.890851497650146
I0123 19:50:34.313027 140508591796224 ddar.py:60] Depth 4/1000 time = 9.188095092773438
I0123 19:50:42.684866 140508591796224 ddar.py:60] Depth 5/1000 time = 8.371626138687134
I0123 19:50:53.108206 140508591796224 ddar.py:60] Depth 6/1000 time = 10.374768733978271
I0123 19:51:02.598956 140508591796224 ddar.py:60] Depth 7/1000 time = 9.490540504455566
I0123 19:51:12.994443 140508591796224 ddar.py:60] Depth 8/1000 time = 10.395263433456421
I0123 19:51:13.001070 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:51:13.001129 140508591796224 alphageometry.py:566] LM output (score=-2.636502): "l : D a d d l 13 ;"
I0123 19:51:13.001164 140508591796224 alphageometry.py:567] Translation: "l = on_circle l d a"

I0123 19:51:13.001200 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_circle l d a ? coll h j i"
I0123 19:51:13.001346 140508591796224 graph.py:498] 
I0123 19:51:13.001399 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_circle l d a ? coll h j i
I0123 19:51:16.090114 140508591796224 ddar.py:60] Depth 1/1000 time = 3.048532009124756
I0123 19:51:26.033602 140508591796224 ddar.py:60] Depth 2/1000 time = 9.943254947662354
I0123 19:51:34.894393 140508591796224 ddar.py:60] Depth 3/1000 time = 8.860465049743652
I0123 19:51:43.147940 140508591796224 ddar.py:60] Depth 4/1000 time = 8.252318143844604
I0123 19:51:52.335004 140508591796224 ddar.py:60] Depth 5/1000 time = 9.186728715896606
I0123 19:52:01.918935 140508591796224 ddar.py:60] Depth 6/1000 time = 9.535966873168945
I0123 19:52:12.301183 140508591796224 ddar.py:60] Depth 7/1000 time = 10.381927490234375
I0123 19:52:22.828357 140508591796224 ddar.py:60] Depth 8/1000 time = 10.526952743530273
I0123 19:52:22.834951 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:52:22.835010 140508591796224 alphageometry.py:566] LM output (score=-2.649744): "l : D a l e l 13 ;"
I0123 19:52:22.835046 140508591796224 alphageometry.py:567] Translation: "l = on_bline l e a"

I0123 19:52:22.835082 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l e a ? coll h j i"
I0123 19:52:22.835227 140508591796224 graph.py:498] 
I0123 19:52:22.835282 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l e a ? coll h j i
I0123 19:52:24.487520 140508591796224 ddar.py:60] Depth 1/1000 time = 1.5981640815734863
I0123 19:52:28.476187 140508591796224 ddar.py:60] Depth 2/1000 time = 3.9885144233703613
I0123 19:52:32.663708 140508591796224 ddar.py:60] Depth 3/1000 time = 4.187345266342163
I0123 19:52:36.151316 140508591796224 ddar.py:60] Depth 4/1000 time = 3.486647844314575
I0123 19:52:39.657371 140508591796224 ddar.py:60] Depth 5/1000 time = 3.505807399749756
I0123 19:52:44.675863 140508591796224 ddar.py:60] Depth 6/1000 time = 4.990695953369141
I0123 19:52:49.633082 140508591796224 ddar.py:60] Depth 7/1000 time = 4.957047939300537
I0123 19:52:53.783233 140508591796224 ddar.py:60] Depth 8/1000 time = 4.149958848953247
I0123 19:52:53.789138 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:52:53.789209 140508591796224 alphageometry.py:566] LM output (score=-2.681582): "l : D d h d l 13 D g h g l 14 ;"
I0123 19:52:53.789245 140508591796224 alphageometry.py:567] Translation: "l = on_circle l d h, on_circle l g h"

I0123 19:52:53.789284 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_circle l d h, on_circle l g h ? coll h j i"
I0123 19:52:53.789454 140508591796224 graph.py:498] 
I0123 19:52:53.789511 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_circle l d h, on_circle l g h ? coll h j i
I0123 19:52:55.584896 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7436401844024658
I0123 19:53:00.732155 140508591796224 ddar.py:60] Depth 2/1000 time = 5.147076368331909
I0123 19:53:04.407305 140508591796224 ddar.py:60] Depth 3/1000 time = 3.674948215484619
I0123 19:53:08.209309 140508591796224 ddar.py:60] Depth 4/1000 time = 3.800821542739868
I0123 19:53:12.838860 140508591796224 ddar.py:60] Depth 5/1000 time = 4.629369735717773
I0123 19:53:17.480117 140508591796224 ddar.py:60] Depth 6/1000 time = 4.6025168895721436
I0123 19:53:22.905792 140508591796224 ddar.py:60] Depth 7/1000 time = 5.425363302230835
I0123 19:53:27.499216 140508591796224 ddar.py:60] Depth 8/1000 time = 4.593226432800293
I0123 19:53:27.506652 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:53:27.506708 140508591796224 alphageometry.py:566] LM output (score=-2.686161): "l : D a l i l 13 D a l j l 14 ;"
I0123 19:53:27.506741 140508591796224 alphageometry.py:567] Translation: "l = on_bline l i a, on_bline l j a"

I0123 19:53:27.506776 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l i a, on_bline l j a ? coll h j i"
I0123 19:53:27.506927 140508591796224 graph.py:498] 
I0123 19:53:27.506978 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l i a, on_bline l j a ? coll h j i
I0123 19:53:30.084839 140508591796224 ddar.py:60] Depth 1/1000 time = 2.5195810794830322
I0123 19:53:33.776806 140508591796224 ddar.py:60] Depth 2/1000 time = 3.6917476654052734
I0123 19:53:37.526518 140508591796224 ddar.py:60] Depth 3/1000 time = 3.7494115829467773
I0123 19:53:42.261306 140508591796224 ddar.py:60] Depth 4/1000 time = 4.733546257019043
I0123 19:53:46.299725 140508591796224 ddar.py:60] Depth 5/1000 time = 4.0382208824157715
I0123 19:53:51.176963 140508591796224 ddar.py:60] Depth 6/1000 time = 4.87704610824585
I0123 19:53:56.218296 140508591796224 ddar.py:60] Depth 7/1000 time = 4.987361669540405
I0123 19:54:02.029710 140508591796224 ddar.py:60] Depth 8/1000 time = 5.811107397079468
I0123 19:54:07.792106 140508591796224 ddar.py:60] Depth 9/1000 time = 5.76221227645874
I0123 19:54:07.799805 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:54:07.799862 140508591796224 alphageometry.py:566] LM output (score=-2.694402): "l : D f i f l 13 ;"
I0123 19:54:07.799896 140508591796224 alphageometry.py:567] Translation: "l = on_circle l f i"

I0123 19:54:07.799932 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_circle l f i ? coll h j i"
I0123 19:54:07.800081 140508591796224 graph.py:498] 
I0123 19:54:07.800136 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_circle l f i ? coll h j i
I0123 19:54:09.423485 140508591796224 ddar.py:60] Depth 1/1000 time = 1.5704193115234375
I0123 19:54:13.138434 140508591796224 ddar.py:60] Depth 2/1000 time = 3.7147178649902344
I0123 19:54:17.178073 140508591796224 ddar.py:60] Depth 3/1000 time = 4.039335250854492
I0123 19:54:20.405731 140508591796224 ddar.py:60] Depth 4/1000 time = 3.2267284393310547
I0123 19:54:23.669069 140508591796224 ddar.py:60] Depth 5/1000 time = 3.2631471157073975
I0123 19:54:28.346937 140508591796224 ddar.py:60] Depth 6/1000 time = 4.653214693069458
I0123 19:54:32.114192 140508591796224 ddar.py:60] Depth 7/1000 time = 3.7670154571533203
I0123 19:54:36.743293 140508591796224 ddar.py:60] Depth 8/1000 time = 4.628766775131226
I0123 19:54:36.750094 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:54:36.750159 140508591796224 alphageometry.py:566] LM output (score=-2.714746): "l : D a l c l 13 ;"
I0123 19:54:36.750193 140508591796224 alphageometry.py:567] Translation: "l = on_bline l c a"

I0123 19:54:36.750230 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l c a ? coll h j i"
I0123 19:54:36.750383 140508591796224 graph.py:498] 
I0123 19:54:36.750436 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l c a ? coll h j i
I0123 19:54:38.410503 140508591796224 ddar.py:60] Depth 1/1000 time = 1.6173386573791504
I0123 19:54:42.364542 140508591796224 ddar.py:60] Depth 2/1000 time = 3.9538819789886475
I0123 19:54:46.700722 140508591796224 ddar.py:60] Depth 3/1000 time = 4.336005926132202
I0123 19:54:50.261205 140508591796224 ddar.py:60] Depth 4/1000 time = 3.5592565536499023
I0123 19:54:53.897523 140508591796224 ddar.py:60] Depth 5/1000 time = 3.635990858078003
I0123 19:54:59.002981 140508591796224 ddar.py:60] Depth 6/1000 time = 5.0731520652771
I0123 19:55:03.184551 140508591796224 ddar.py:60] Depth 7/1000 time = 4.181396484375
I0123 19:55:08.273858 140508591796224 ddar.py:60] Depth 8/1000 time = 5.089055299758911
I0123 19:55:08.280035 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:55:08.280113 140508591796224 alphageometry.py:566] LM output (score=-2.761451): "l : D b l j l 13 D c l j l 14 ;"
I0123 19:55:08.280148 140508591796224 alphageometry.py:567] Translation: "l = on_bline l j b, on_bline l j c"

I0123 19:55:08.280196 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l j b, on_bline l j c ? coll h j i"
I0123 19:55:08.280362 140508591796224 graph.py:498] 
I0123 19:55:08.280416 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l j b, on_bline l j c ? coll h j i
I0123 19:55:10.149225 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7989816665649414
I0123 19:55:14.446487 140508591796224 ddar.py:60] Depth 2/1000 time = 4.297098636627197
I0123 19:55:19.010626 140508591796224 ddar.py:60] Depth 3/1000 time = 4.563953638076782
I0123 19:55:22.941987 140508591796224 ddar.py:60] Depth 4/1000 time = 3.927933931350708
I0123 19:55:28.560822 140508591796224 ddar.py:60] Depth 5/1000 time = 5.618623495101929
I0123 19:55:33.338783 140508591796224 ddar.py:60] Depth 6/1000 time = 4.777720928192139
I0123 19:55:39.614837 140508591796224 ddar.py:60] Depth 7/1000 time = 6.27587103843689
I0123 19:55:45.198792 140508591796224 ddar.py:60] Depth 8/1000 time = 5.583700180053711
I0123 19:55:45.267265 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:55:45.267361 140508591796224 alphageometry.py:566] LM output (score=-2.783303): "l : D b l e l 13 D b l h l 14 ;"
I0123 19:55:45.267396 140508591796224 alphageometry.py:567] Translation: "l = on_bline l e b, on_bline l h b"

I0123 19:55:45.267443 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l e b, on_bline l h b ? coll h j i"
I0123 19:55:45.267622 140508591796224 graph.py:498] 
I0123 19:55:45.267678 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k e a, on_bline k j a; l = on_bline l e b, on_bline l h b ? coll h j i
I0123 19:55:48.038811 140508591796224 ddar.py:60] Depth 1/1000 time = 2.7249386310577393
I0123 19:55:51.719501 140508591796224 ddar.py:60] Depth 2/1000 time = 3.680516481399536
I0123 19:55:55.423777 140508591796224 ddar.py:60] Depth 3/1000 time = 3.704094886779785
I0123 19:56:00.172157 140508591796224 ddar.py:60] Depth 4/1000 time = 4.746147155761719
I0123 19:56:04.360737 140508591796224 ddar.py:60] Depth 5/1000 time = 4.188321828842163
I0123 19:56:10.723326 140508591796224 ddar.py:60] Depth 6/1000 time = 6.299703121185303
I0123 19:56:16.066504 140508591796224 ddar.py:60] Depth 7/1000 time = 5.34299635887146
I0123 19:56:22.235685 140508591796224 ddar.py:60] Depth 8/1000 time = 6.168936014175415
I0123 19:56:22.244054 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:56:22.244184 140508591796224 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : D a k g k 11 D a k i k 12 ; x00
I0123 19:56:28.974735 140508591796224 alphageometry.py:566] LM output (score=-1.477875): "l : D a l e l 13 D a l j l 14 ;"
I0123 19:56:28.974893 140508591796224 alphageometry.py:567] Translation: "l = on_bline l e a, on_bline l j a"

I0123 19:56:28.974943 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_bline l e a, on_bline l j a ? coll h j i"
I0123 19:56:28.975108 140508591796224 graph.py:498] 
I0123 19:56:28.975165 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_bline l e a, on_bline l j a ? coll h j i
I0123 19:56:30.823965 140508591796224 ddar.py:60] Depth 1/1000 time = 1.788086175918579
I0123 19:56:35.109542 140508591796224 ddar.py:60] Depth 2/1000 time = 4.2854156494140625
I0123 19:56:39.742440 140508591796224 ddar.py:60] Depth 3/1000 time = 4.632715940475464
I0123 19:56:43.745569 140508591796224 ddar.py:60] Depth 4/1000 time = 4.000850677490234
I0123 19:56:48.819754 140508591796224 ddar.py:60] Depth 5/1000 time = 5.0739898681640625
I0123 19:56:53.193756 140508591796224 ddar.py:60] Depth 6/1000 time = 4.3738319873809814
I0123 19:56:58.644585 140508591796224 ddar.py:60] Depth 7/1000 time = 5.450639724731445
I0123 19:57:03.321350 140508591796224 ddar.py:60] Depth 8/1000 time = 4.676557779312134
I0123 19:57:10.271696 140508591796224 ddar.py:60] Depth 9/1000 time = 6.881986856460571
I0123 19:57:16.277177 140508591796224 ddar.py:60] Depth 10/1000 time = 6.00529670715332
I0123 19:57:23.179888 140508591796224 ddar.py:60] Depth 11/1000 time = 6.902512073516846
I0123 19:57:23.198680 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:57:23.198737 140508591796224 alphageometry.py:566] LM output (score=-1.605451): "l : D a l j l 13 D c l j l 14 ;"
I0123 19:57:23.198771 140508591796224 alphageometry.py:567] Translation: "l = on_bline l j a, on_bline l j c"

I0123 19:57:23.198806 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_bline l j a, on_bline l j c ? coll h j i"
I0123 19:57:23.198955 140508591796224 graph.py:498] 
I0123 19:57:23.199008 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_bline l j a, on_bline l j c ? coll h j i
I0123 19:57:25.048339 140508591796224 ddar.py:60] Depth 1/1000 time = 1.8017430305480957
I0123 19:57:29.328448 140508591796224 ddar.py:60] Depth 2/1000 time = 4.279897212982178
I0123 19:57:33.979877 140508591796224 ddar.py:60] Depth 3/1000 time = 4.651139497756958
I0123 19:57:37.927417 140508591796224 ddar.py:60] Depth 4/1000 time = 3.945237874984741
I0123 19:57:42.933586 140508591796224 ddar.py:60] Depth 5/1000 time = 5.005985975265503
I0123 19:57:48.289509 140508591796224 ddar.py:60] Depth 6/1000 time = 5.294666528701782
I0123 19:57:54.566897 140508591796224 ddar.py:60] Depth 7/1000 time = 6.277079105377197
I0123 19:57:59.904478 140508591796224 ddar.py:60] Depth 8/1000 time = 5.33739709854126
I0123 19:57:59.913832 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:57:59.913901 140508591796224 alphageometry.py:566] LM output (score=-1.783467): "l : C b g l 13 D b l g l 14 ;"
I0123 19:57:59.913937 140508591796224 alphageometry.py:567] Translation: "l = on_line l b g, on_bline l g b"

I0123 19:57:59.913975 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_line l b g, on_bline l g b ? coll h j i"
I0123 19:57:59.914129 140508591796224 graph.py:498] 
I0123 19:57:59.914183 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_line l b g, on_bline l g b ? coll h j i
I0123 19:58:02.500231 140508591796224 ddar.py:60] Depth 1/1000 time = 2.531639337539673
I0123 19:58:06.662503 140508591796224 ddar.py:60] Depth 2/1000 time = 4.162045955657959
I0123 19:58:11.329009 140508591796224 ddar.py:60] Depth 3/1000 time = 4.666206359863281
I0123 19:58:15.040206 140508591796224 ddar.py:60] Depth 4/1000 time = 3.7110068798065186
I0123 19:58:19.579544 140508591796224 ddar.py:60] Depth 5/1000 time = 4.538904190063477
I0123 19:58:24.325401 140508591796224 ddar.py:60] Depth 6/1000 time = 4.744707345962524
I0123 19:58:28.192304 140508591796224 ddar.py:60] Depth 7/1000 time = 3.8666470050811768
I0123 19:58:33.453488 140508591796224 ddar.py:60] Depth 8/1000 time = 5.228716850280762
I0123 19:58:37.699737 140508591796224 ddar.py:60] Depth 9/1000 time = 4.246072292327881
I0123 19:58:42.844506 140508591796224 ddar.py:60] Depth 10/1000 time = 5.144584894180298
I0123 19:58:42.850893 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:58:42.850970 140508591796224 alphageometry.py:566] LM output (score=-2.024336): "l : T d f f l 13 ;"
I0123 19:58:42.851007 140508591796224 alphageometry.py:567] Translation: "l = on_tline l f d f"

I0123 19:58:42.851044 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_tline l f d f ? coll h j i"
I0123 19:58:42.851200 140508591796224 graph.py:498] 
I0123 19:58:42.851253 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_tline l f d f ? coll h j i
I0123 19:58:44.382139 140508591796224 ddar.py:60] Depth 1/1000 time = 1.5001697540283203
I0123 19:58:47.525490 140508591796224 ddar.py:60] Depth 2/1000 time = 3.1430861949920654
I0123 19:58:51.615246 140508591796224 ddar.py:60] Depth 3/1000 time = 4.0895466804504395
I0123 19:58:54.898443 140508591796224 ddar.py:60] Depth 4/1000 time = 3.2820873260498047
I0123 19:58:59.173657 140508591796224 ddar.py:60] Depth 5/1000 time = 4.275017976760864
I0123 19:59:02.757523 140508591796224 ddar.py:60] Depth 6/1000 time = 3.583636522293091
I0123 19:59:06.596173 140508591796224 ddar.py:60] Depth 7/1000 time = 3.8383657932281494
I0123 19:59:11.450525 140508591796224 ddar.py:60] Depth 8/1000 time = 4.854126691818237
I0123 19:59:11.485371 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 19:59:11.485428 140508591796224 alphageometry.py:566] LM output (score=-2.298533): "l : D a l j l 13 D e l j l 14 ;"
I0123 19:59:11.485462 140508591796224 alphageometry.py:567] Translation: "l = on_bline l j a, on_bline l j e"

I0123 19:59:11.485498 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_bline l j a, on_bline l j e ? coll h j i"
I0123 19:59:11.485656 140508591796224 graph.py:498] 
I0123 19:59:11.485711 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_bline l j a, on_bline l j e ? coll h j i
I0123 19:59:13.317400 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7861998081207275
I0123 19:59:17.672943 140508591796224 ddar.py:60] Depth 2/1000 time = 4.355375528335571
I0123 19:59:22.350087 140508591796224 ddar.py:60] Depth 3/1000 time = 4.676892280578613
I0123 19:59:26.333016 140508591796224 ddar.py:60] Depth 4/1000 time = 3.980468511581421
I0123 19:59:31.521748 140508591796224 ddar.py:60] Depth 5/1000 time = 5.188533306121826
I0123 19:59:35.874523 140508591796224 ddar.py:60] Depth 6/1000 time = 4.352593183517456
I0123 19:59:40.473143 140508591796224 ddar.py:60] Depth 7/1000 time = 4.598395586013794
I0123 19:59:46.029776 140508591796224 ddar.py:60] Depth 8/1000 time = 5.556340932846069
I0123 19:59:51.945993 140508591796224 ddar.py:60] Depth 9/1000 time = 5.850280046463013
I0123 19:59:58.784595 140508591796224 ddar.py:60] Depth 10/1000 time = 6.838376522064209
I0123 20:00:04.799882 140508591796224 ddar.py:60] Depth 11/1000 time = 6.014963388442993
I0123 20:00:04.818082 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:00:04.818175 140508591796224 alphageometry.py:566] LM output (score=-2.323970): "l : T a i e l 13 ;"
I0123 20:00:04.818209 140508591796224 alphageometry.py:567] Translation: "l = on_tline l e a i"

I0123 20:00:04.818271 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_tline l e a i ? coll h j i"
I0123 20:00:04.818458 140508591796224 graph.py:498] 
I0123 20:00:04.818512 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_tline l e a i ? coll h j i
I0123 20:00:07.275843 140508591796224 ddar.py:60] Depth 1/1000 time = 2.4093894958496094
I0123 20:00:10.884124 140508591796224 ddar.py:60] Depth 2/1000 time = 3.608097553253174
I0123 20:00:14.037006 140508591796224 ddar.py:60] Depth 3/1000 time = 3.1527047157287598
I0123 20:00:18.256414 140508591796224 ddar.py:60] Depth 4/1000 time = 4.218209743499756
I0123 20:00:21.622239 140508591796224 ddar.py:60] Depth 5/1000 time = 3.3655600547790527
I0123 20:00:25.046897 140508591796224 ddar.py:60] Depth 6/1000 time = 3.424488067626953
I0123 20:00:29.925209 140508591796224 ddar.py:60] Depth 7/1000 time = 4.8433837890625
I0123 20:00:33.849185 140508591796224 ddar.py:60] Depth 8/1000 time = 3.9237983226776123
I0123 20:00:38.752963 140508591796224 ddar.py:60] Depth 9/1000 time = 4.903578281402588
I0123 20:00:38.758077 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:00:38.758136 140508591796224 alphageometry.py:566] LM output (score=-2.339441): "l : T d g g l 13 ;"
I0123 20:00:38.758170 140508591796224 alphageometry.py:567] Translation: "l = on_tline l g d g"

I0123 20:00:38.758208 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_tline l g d g ? coll h j i"
I0123 20:00:38.758359 140508591796224 graph.py:498] 
I0123 20:00:38.758413 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_tline l g d g ? coll h j i
I0123 20:00:40.294541 140508591796224 ddar.py:60] Depth 1/1000 time = 1.4938621520996094
I0123 20:00:43.998258 140508591796224 ddar.py:60] Depth 2/1000 time = 3.703561305999756
I0123 20:00:47.242444 140508591796224 ddar.py:60] Depth 3/1000 time = 3.2440130710601807
I0123 20:00:51.384695 140508591796224 ddar.py:60] Depth 4/1000 time = 4.142071723937988
I0123 20:00:54.749569 140508591796224 ddar.py:60] Depth 5/1000 time = 3.3636839389801025
I0123 20:00:59.141927 140508591796224 ddar.py:60] Depth 6/1000 time = 4.392053127288818
I0123 20:01:02.968497 140508591796224 ddar.py:60] Depth 7/1000 time = 3.7958147525787354
I0123 20:01:06.764189 140508591796224 ddar.py:60] Depth 8/1000 time = 3.7955260276794434
I0123 20:01:11.449486 140508591796224 ddar.py:60] Depth 9/1000 time = 4.685104131698608
I0123 20:01:11.454922 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:01:11.455001 140508591796224 alphageometry.py:566] LM output (score=-2.365096): "l : D a l e l 13 D e l j l 14 ;"
I0123 20:01:11.455037 140508591796224 alphageometry.py:567] Translation: "l = on_bline l e a, on_bline l j e"

I0123 20:01:11.455077 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_bline l e a, on_bline l j e ? coll h j i"
I0123 20:01:11.455250 140508591796224 graph.py:498] 
I0123 20:01:11.455302 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_bline l e a, on_bline l j e ? coll h j i
I0123 20:01:13.337880 140508591796224 ddar.py:60] Depth 1/1000 time = 1.8328752517700195
I0123 20:01:17.663342 140508591796224 ddar.py:60] Depth 2/1000 time = 4.325178861618042
I0123 20:01:22.324520 140508591796224 ddar.py:60] Depth 3/1000 time = 4.660973310470581
I0123 20:01:26.282632 140508591796224 ddar.py:60] Depth 4/1000 time = 3.955836296081543
I0123 20:01:30.498875 140508591796224 ddar.py:60] Depth 5/1000 time = 4.216001987457275
I0123 20:01:35.780127 140508591796224 ddar.py:60] Depth 6/1000 time = 5.280957937240601
I0123 20:01:40.357212 140508591796224 ddar.py:60] Depth 7/1000 time = 4.576899290084839
I0123 20:01:45.878034 140508591796224 ddar.py:60] Depth 8/1000 time = 5.52062726020813
I0123 20:01:51.732763 140508591796224 ddar.py:60] Depth 9/1000 time = 5.789689540863037
I0123 20:01:58.655042 140508591796224 ddar.py:60] Depth 10/1000 time = 6.921963930130005
I0123 20:02:04.563643 140508591796224 ddar.py:60] Depth 11/1000 time = 5.9084084033966064
I0123 20:02:04.582057 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:02:04.582122 140508591796224 alphageometry.py:566] LM output (score=-2.446572): "l : D d e d l 13 ;"
I0123 20:02:04.582156 140508591796224 alphageometry.py:567] Translation: "l = on_circle l d e"

I0123 20:02:04.582194 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_circle l d e ? coll h j i"
I0123 20:02:04.582349 140508591796224 graph.py:498] 
I0123 20:02:04.582405 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_circle l d e ? coll h j i
I0123 20:02:08.624140 140508591796224 ddar.py:60] Depth 1/1000 time = 3.9943761825561523
I0123 20:02:17.781141 140508591796224 ddar.py:60] Depth 2/1000 time = 9.156716585159302
I0123 20:02:26.863247 140508591796224 ddar.py:60] Depth 3/1000 time = 9.081857919692993
I0123 20:02:35.124679 140508591796224 ddar.py:60] Depth 4/1000 time = 8.260149002075195
I0123 20:02:44.426598 140508591796224 ddar.py:60] Depth 5/1000 time = 9.30169677734375
I0123 20:02:54.092909 140508591796224 ddar.py:60] Depth 6/1000 time = 9.61953616142273
I0123 20:03:04.696640 140508591796224 ddar.py:60] Depth 7/1000 time = 10.60336947441101
I0123 20:03:14.277901 140508591796224 ddar.py:60] Depth 8/1000 time = 9.580933570861816
I0123 20:03:14.284436 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:03:14.284528 140508591796224 alphageometry.py:566] LM output (score=-2.453140): "l : T d e e l 13 ;"
I0123 20:03:14.284564 140508591796224 alphageometry.py:567] Translation: "l = on_tline l e d e"

I0123 20:03:14.284612 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_tline l e d e ? coll h j i"
I0123 20:03:14.284797 140508591796224 graph.py:498] 
I0123 20:03:14.284852 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_tline l e d e ? coll h j i
I0123 20:03:15.828978 140508591796224 ddar.py:60] Depth 1/1000 time = 1.5010807514190674
I0123 20:03:20.540370 140508591796224 ddar.py:60] Depth 2/1000 time = 4.711242914199829
I0123 20:03:23.757426 140508591796224 ddar.py:60] Depth 3/1000 time = 3.216815710067749
I0123 20:03:27.081737 140508591796224 ddar.py:60] Depth 4/1000 time = 3.322974920272827
I0123 20:03:31.467415 140508591796224 ddar.py:60] Depth 5/1000 time = 4.38549017906189
I0123 20:03:35.357268 140508591796224 ddar.py:60] Depth 6/1000 time = 3.8587770462036133
I0123 20:03:40.163847 140508591796224 ddar.py:60] Depth 7/1000 time = 4.806382417678833
I0123 20:03:44.009221 140508591796224 ddar.py:60] Depth 8/1000 time = 3.8451244831085205
I0123 20:03:44.015142 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:03:44.015226 140508591796224 alphageometry.py:566] LM output (score=-2.490636): "l : C c g l 13 D c l g l 14 ;"
I0123 20:03:44.015261 140508591796224 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 20:03:44.015306 140508591796224 alphageometry.py:566] LM output (score=-2.513863): "l : D b l e l 13 D d e e l 14 ;"
I0123 20:03:44.015334 140508591796224 alphageometry.py:567] Translation: "l = on_bline l e b, on_circle l e d"

I0123 20:03:44.015366 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_bline l e b, on_circle l e d ? coll h j i"
I0123 20:03:44.015535 140508591796224 graph.py:498] 
I0123 20:03:44.015590 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_bline l e b, on_circle l e d ? coll h j i
I0123 20:03:47.121052 140508591796224 ddar.py:60] Depth 1/1000 time = 3.0631790161132812
I0123 20:03:53.053894 140508591796224 ddar.py:60] Depth 2/1000 time = 5.932674407958984
I0123 20:03:58.077126 140508591796224 ddar.py:60] Depth 3/1000 time = 5.023050308227539
I0123 20:04:04.208810 140508591796224 ddar.py:60] Depth 4/1000 time = 6.130506277084351
I0123 20:04:09.435954 140508591796224 ddar.py:60] Depth 5/1000 time = 5.226916551589966
I0123 20:04:16.484208 140508591796224 ddar.py:60] Depth 6/1000 time = 7.007941484451294
I0123 20:04:22.540874 140508591796224 ddar.py:60] Depth 7/1000 time = 6.056400299072266
I0123 20:04:29.544520 140508591796224 ddar.py:60] Depth 8/1000 time = 7.003305435180664
I0123 20:04:29.551999 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:04:29.552062 140508591796224 alphageometry.py:566] LM output (score=-2.528026): "l : T c e h l 13 ;"
I0123 20:04:29.552097 140508591796224 alphageometry.py:567] Translation: "l = on_tline l h c e"

I0123 20:04:29.552133 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_tline l h c e ? coll h j i"
I0123 20:04:29.552293 140508591796224 graph.py:498] 
I0123 20:04:29.552347 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_tline l h c e ? coll h j i
I0123 20:04:31.101356 140508591796224 ddar.py:60] Depth 1/1000 time = 1.509918212890625
I0123 20:04:34.752005 140508591796224 ddar.py:60] Depth 2/1000 time = 3.6504762172698975
I0123 20:04:38.879323 140508591796224 ddar.py:60] Depth 3/1000 time = 4.1271116733551025
I0123 20:04:42.084411 140508591796224 ddar.py:60] Depth 4/1000 time = 3.203958511352539
I0123 20:04:45.394971 140508591796224 ddar.py:60] Depth 5/1000 time = 3.3103866577148438
I0123 20:04:49.675196 140508591796224 ddar.py:60] Depth 6/1000 time = 4.280035734176636
I0123 20:04:53.706565 140508591796224 ddar.py:60] Depth 7/1000 time = 3.9957265853881836
I0123 20:04:57.691783 140508591796224 ddar.py:60] Depth 8/1000 time = 3.9849839210510254
I0123 20:05:02.692173 140508591796224 ddar.py:60] Depth 9/1000 time = 5.0000481605529785
I0123 20:05:02.697824 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:05:02.697884 140508591796224 alphageometry.py:566] LM output (score=-2.571993): "l : D b l j l 13 D e l j l 14 ;"
I0123 20:05:02.697919 140508591796224 alphageometry.py:567] Translation: "l = on_bline l j b, on_bline l j e"

I0123 20:05:02.697955 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_bline l j b, on_bline l j e ? coll h j i"
I0123 20:05:02.698114 140508591796224 graph.py:498] 
I0123 20:05:02.698166 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_bline l j b, on_bline l j e ? coll h j i
I0123 20:05:04.569914 140508591796224 ddar.py:60] Depth 1/1000 time = 1.8144497871398926
I0123 20:05:08.848500 140508591796224 ddar.py:60] Depth 2/1000 time = 4.278426647186279
I0123 20:05:13.457741 140508591796224 ddar.py:60] Depth 3/1000 time = 4.609015941619873
I0123 20:05:17.376313 140508591796224 ddar.py:60] Depth 4/1000 time = 3.916264057159424
I0123 20:05:21.564721 140508591796224 ddar.py:60] Depth 5/1000 time = 4.188186883926392
I0123 20:05:26.787345 140508591796224 ddar.py:60] Depth 6/1000 time = 5.2224440574646
I0123 20:05:32.248426 140508591796224 ddar.py:60] Depth 7/1000 time = 5.397708415985107
I0123 20:05:38.682882 140508591796224 ddar.py:60] Depth 8/1000 time = 6.434163570404053
I0123 20:05:44.057012 140508591796224 ddar.py:60] Depth 9/1000 time = 5.373946189880371
I0123 20:05:44.065441 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:05:44.065497 140508591796224 alphageometry.py:566] LM output (score=-2.574533): "l : T a j e l 13 ;"
I0123 20:05:44.065531 140508591796224 alphageometry.py:567] Translation: "l = on_tline l e a j"

I0123 20:05:44.065566 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_tline l e a j ? coll h j i"
I0123 20:05:44.065728 140508591796224 graph.py:498] 
I0123 20:05:44.065784 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_tline l e a j ? coll h j i
I0123 20:05:45.655256 140508591796224 ddar.py:60] Depth 1/1000 time = 1.5003514289855957
I0123 20:05:50.270731 140508591796224 ddar.py:60] Depth 2/1000 time = 4.615309000015259
I0123 20:05:53.430888 140508591796224 ddar.py:60] Depth 3/1000 time = 3.1599156856536865
I0123 20:05:56.684308 140508591796224 ddar.py:60] Depth 4/1000 time = 3.252140522003174
I0123 20:06:01.001520 140508591796224 ddar.py:60] Depth 5/1000 time = 4.317005157470703
I0123 20:06:04.949769 140508591796224 ddar.py:60] Depth 6/1000 time = 3.9140777587890625
I0123 20:06:08.837483 140508591796224 ddar.py:60] Depth 7/1000 time = 3.8875410556793213
I0123 20:06:13.757832 140508591796224 ddar.py:60] Depth 8/1000 time = 4.920144319534302
I0123 20:06:13.763470 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:06:13.763527 140508591796224 alphageometry.py:566] LM output (score=-2.599038): "l : D a l j l 13 D a l i l 14 ;"
I0123 20:06:13.763561 140508591796224 alphageometry.py:567] Translation: "l = on_bline l j a, on_bline l i a"

I0123 20:06:13.763596 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_bline l j a, on_bline l i a ? coll h j i"
I0123 20:06:13.763740 140508591796224 graph.py:498] 
I0123 20:06:13.763793 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_bline l j a, on_bline l i a ? coll h j i
I0123 20:06:15.531627 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7182912826538086
I0123 20:06:19.827864 140508591796224 ddar.py:60] Depth 2/1000 time = 4.296072483062744
I0123 20:06:24.544999 140508591796224 ddar.py:60] Depth 3/1000 time = 4.716947793960571
I0123 20:06:28.448658 140508591796224 ddar.py:60] Depth 4/1000 time = 3.902397394180298
I0123 20:06:33.560829 140508591796224 ddar.py:60] Depth 5/1000 time = 5.1118433475494385
I0123 20:06:37.668288 140508591796224 ddar.py:60] Depth 6/1000 time = 4.107261419296265
I0123 20:06:42.690567 140508591796224 ddar.py:60] Depth 7/1000 time = 4.970346450805664
I0123 20:06:48.658244 140508591796224 ddar.py:60] Depth 8/1000 time = 5.967419147491455
I0123 20:06:53.590879 140508591796224 ddar.py:60] Depth 9/1000 time = 4.932299375534058
I0123 20:06:53.598452 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:06:53.598537 140508591796224 alphageometry.py:566] LM output (score=-2.602569): "l : T c d c l 13 ;"
I0123 20:06:53.598572 140508591796224 alphageometry.py:567] Translation: "l = on_tline l c c d"

I0123 20:06:53.598621 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_tline l c c d ? coll h j i"
I0123 20:06:53.598796 140508591796224 graph.py:498] 
I0123 20:06:53.598852 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_tline l c c d ? coll h j i
I0123 20:06:55.137672 140508591796224 ddar.py:60] Depth 1/1000 time = 1.492753505706787
I0123 20:06:59.287186 140508591796224 ddar.py:60] Depth 2/1000 time = 4.149357795715332
I0123 20:07:02.499038 140508591796224 ddar.py:60] Depth 3/1000 time = 3.2116715908050537
I0123 20:07:05.808737 140508591796224 ddar.py:60] Depth 4/1000 time = 3.308540105819702
I0123 20:07:10.313869 140508591796224 ddar.py:60] Depth 5/1000 time = 4.5048441886901855
I0123 20:07:13.940277 140508591796224 ddar.py:60] Depth 6/1000 time = 3.6262354850769043
I0123 20:07:17.845278 140508591796224 ddar.py:60] Depth 7/1000 time = 3.9048237800598145
I0123 20:07:22.751041 140508591796224 ddar.py:60] Depth 8/1000 time = 4.9055705070495605
I0123 20:07:22.788168 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:07:22.788245 140508591796224 alphageometry.py:566] LM output (score=-2.632632): "l : D a l c l 13 D c l j l 14 ;"
I0123 20:07:22.788282 140508591796224 alphageometry.py:567] Translation: "l = on_bline l c a, on_bline l j c"

I0123 20:07:22.788322 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_bline l c a, on_bline l j c ? coll h j i"
I0123 20:07:22.788478 140508591796224 graph.py:498] 
I0123 20:07:22.788532 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_bline l c a, on_bline l j c ? coll h j i
I0123 20:07:24.662435 140508591796224 ddar.py:60] Depth 1/1000 time = 1.824634075164795
I0123 20:07:28.324705 140508591796224 ddar.py:60] Depth 2/1000 time = 3.661990165710449
I0123 20:07:33.088070 140508591796224 ddar.py:60] Depth 3/1000 time = 4.763154983520508
I0123 20:07:37.076525 140508591796224 ddar.py:60] Depth 4/1000 time = 3.98614764213562
I0123 20:07:41.300592 140508591796224 ddar.py:60] Depth 5/1000 time = 4.2238781452178955
I0123 20:07:47.779080 140508591796224 ddar.py:60] Depth 6/1000 time = 6.4166364669799805
I0123 20:07:53.135387 140508591796224 ddar.py:60] Depth 7/1000 time = 5.356108903884888
I0123 20:07:59.447307 140508591796224 ddar.py:60] Depth 8/1000 time = 6.311720848083496
I0123 20:07:59.456529 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:07:59.456597 140508591796224 alphageometry.py:566] LM output (score=-2.641030): "l : T a b h l 13 ;"
I0123 20:07:59.456633 140508591796224 alphageometry.py:567] Translation: "l = on_tline l h a b"

I0123 20:07:59.456670 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_tline l h a b ? coll h j i"
I0123 20:07:59.456831 140508591796224 graph.py:498] 
I0123 20:07:59.456887 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_tline l h a b ? coll h j i
I0123 20:08:01.002524 140508591796224 ddar.py:60] Depth 1/1000 time = 1.5015537738800049
I0123 20:08:04.083719 140508591796224 ddar.py:60] Depth 2/1000 time = 3.0809195041656494
I0123 20:08:08.330800 140508591796224 ddar.py:60] Depth 3/1000 time = 4.246879577636719
I0123 20:08:11.559732 140508591796224 ddar.py:60] Depth 4/1000 time = 3.227764844894409
I0123 20:08:14.873362 140508591796224 ddar.py:60] Depth 5/1000 time = 3.3134403228759766
I0123 20:08:19.885467 140508591796224 ddar.py:60] Depth 6/1000 time = 4.976700782775879
I0123 20:08:23.798537 140508591796224 ddar.py:60] Depth 7/1000 time = 3.9127702713012695
I0123 20:08:27.698084 140508591796224 ddar.py:60] Depth 8/1000 time = 3.8993306159973145
I0123 20:08:27.703563 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:08:27.703651 140508591796224 alphageometry.py:566] LM output (score=-2.646388): "l : D a l e l 13 ;"
I0123 20:08:27.703689 140508591796224 alphageometry.py:567] Translation: "l = on_bline l e a"

I0123 20:08:27.703741 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_bline l e a ? coll h j i"
I0123 20:08:27.703927 140508591796224 graph.py:498] 
I0123 20:08:27.703983 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_bline l e a ? coll h j i
I0123 20:08:29.382195 140508591796224 ddar.py:60] Depth 1/1000 time = 1.6352715492248535
I0123 20:08:34.368147 140508591796224 ddar.py:60] Depth 2/1000 time = 4.9857916831970215
I0123 20:08:37.844289 140508591796224 ddar.py:60] Depth 3/1000 time = 3.475919485092163
I0123 20:08:41.418099 140508591796224 ddar.py:60] Depth 4/1000 time = 3.572486162185669
I0123 20:08:46.129757 140508591796224 ddar.py:60] Depth 5/1000 time = 4.711440324783325
I0123 20:08:50.472986 140508591796224 ddar.py:60] Depth 6/1000 time = 4.308495044708252
I0123 20:08:55.763921 140508591796224 ddar.py:60] Depth 7/1000 time = 5.290755271911621
I0123 20:09:00.029330 140508591796224 ddar.py:60] Depth 8/1000 time = 4.265181303024292
I0123 20:09:00.035531 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:09:00.035608 140508591796224 alphageometry.py:566] LM output (score=-2.668419): "l : D a e a l 13 ;"
I0123 20:09:00.035642 140508591796224 alphageometry.py:567] Translation: "l = on_circle l a e"

I0123 20:09:00.035688 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_circle l a e ? coll h j i"
I0123 20:09:00.035845 140508591796224 graph.py:498] 
I0123 20:09:00.035899 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_circle l a e ? coll h j i
I0123 20:09:01.674834 140508591796224 ddar.py:60] Depth 1/1000 time = 1.5974955558776855
I0123 20:09:05.387382 140508591796224 ddar.py:60] Depth 2/1000 time = 3.7123982906341553
I0123 20:09:09.555258 140508591796224 ddar.py:60] Depth 3/1000 time = 4.167698621749878
I0123 20:09:12.795709 140508591796224 ddar.py:60] Depth 4/1000 time = 3.2395076751708984
I0123 20:09:16.076718 140508591796224 ddar.py:60] Depth 5/1000 time = 3.280771493911743
I0123 20:09:20.972354 140508591796224 ddar.py:60] Depth 6/1000 time = 4.868557691574097
I0123 20:09:24.731523 140508591796224 ddar.py:60] Depth 7/1000 time = 3.758983612060547
I0123 20:09:28.505305 140508591796224 ddar.py:60] Depth 8/1000 time = 3.773597240447998
I0123 20:09:28.511569 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:09:28.511637 140508591796224 alphageometry.py:566] LM output (score=-2.701625): "l : T c e f l 13 ;"
I0123 20:09:28.511673 140508591796224 alphageometry.py:567] Translation: "l = on_tline l f c e"

I0123 20:09:28.511711 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_tline l f c e ? coll h j i"
I0123 20:09:28.511858 140508591796224 graph.py:498] 
I0123 20:09:28.511912 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_tline l f c e ? coll h j i
I0123 20:09:31.020881 140508591796224 ddar.py:60] Depth 1/1000 time = 2.46492075920105
I0123 20:09:34.665705 140508591796224 ddar.py:60] Depth 2/1000 time = 3.644585609436035
I0123 20:09:37.772903 140508591796224 ddar.py:60] Depth 3/1000 time = 3.1069071292877197
I0123 20:09:42.079405 140508591796224 ddar.py:60] Depth 4/1000 time = 4.305351495742798
I0123 20:09:45.378673 140508591796224 ddar.py:60] Depth 5/1000 time = 3.2990825176239014
I0123 20:09:48.714870 140508591796224 ddar.py:60] Depth 6/1000 time = 3.3360235691070557
I0123 20:09:52.711186 140508591796224 ddar.py:60] Depth 7/1000 time = 3.9617462158203125
I0123 20:09:57.683321 140508591796224 ddar.py:60] Depth 8/1000 time = 4.971839904785156
I0123 20:10:01.640169 140508591796224 ddar.py:60] Depth 9/1000 time = 3.9566571712493896
I0123 20:10:01.645492 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:10:01.645548 140508591796224 alphageometry.py:566] LM output (score=-2.746900): "l : D i k k l 13 ;"
I0123 20:10:01.645582 140508591796224 alphageometry.py:567] Translation: "l = on_circle l k i"

I0123 20:10:01.645619 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_circle l k i ? coll h j i"
I0123 20:10:01.645789 140508591796224 graph.py:498] 
I0123 20:10:01.645843 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_circle l k i ? coll h j i
I0123 20:10:03.465848 140508591796224 ddar.py:60] Depth 1/1000 time = 1.780775547027588
I0123 20:10:08.689116 140508591796224 ddar.py:60] Depth 2/1000 time = 5.2231035232543945
I0123 20:10:12.376303 140508591796224 ddar.py:60] Depth 3/1000 time = 3.686943292617798
I0123 20:10:16.204869 140508591796224 ddar.py:60] Depth 4/1000 time = 3.8273303508758545
I0123 20:10:21.138351 140508591796224 ddar.py:60] Depth 5/1000 time = 4.933283805847168
I0123 20:10:25.576901 140508591796224 ddar.py:60] Depth 6/1000 time = 4.405199289321899
I0123 20:10:31.042091 140508591796224 ddar.py:60] Depth 7/1000 time = 5.464933633804321
I0123 20:10:35.476573 140508591796224 ddar.py:60] Depth 8/1000 time = 4.434150695800781
I0123 20:10:35.483056 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:10:35.483139 140508591796224 alphageometry.py:566] LM output (score=-2.766808): "l : T c e c l 13 ;"
I0123 20:10:35.483173 140508591796224 alphageometry.py:567] Translation: "l = on_tline l c c e"

I0123 20:10:35.483220 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_tline l c c e ? coll h j i"
I0123 20:10:35.483392 140508591796224 graph.py:498] 
I0123 20:10:35.483446 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_tline l c c e ? coll h j i
I0123 20:10:37.092554 140508591796224 ddar.py:60] Depth 1/1000 time = 1.5504369735717773
I0123 20:10:40.751639 140508591796224 ddar.py:60] Depth 2/1000 time = 3.6589198112487793
I0123 20:10:44.898468 140508591796224 ddar.py:60] Depth 3/1000 time = 4.146649122238159
I0123 20:10:48.110119 140508591796224 ddar.py:60] Depth 4/1000 time = 3.210480213165283
I0123 20:10:51.416707 140508591796224 ddar.py:60] Depth 5/1000 time = 3.3062875270843506
I0123 20:10:55.824187 140508591796224 ddar.py:60] Depth 6/1000 time = 4.4072651863098145
I0123 20:10:59.823326 140508591796224 ddar.py:60] Depth 7/1000 time = 3.9654228687286377
I0123 20:11:03.762932 140508591796224 ddar.py:60] Depth 8/1000 time = 3.939439058303833
I0123 20:11:08.811193 140508591796224 ddar.py:60] Depth 9/1000 time = 5.047974348068237
I0123 20:11:08.816917 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:11:08.817004 140508591796224 alphageometry.py:566] LM output (score=-2.772073): "l : D b c b l 13 D c j j l 14 ;"
I0123 20:11:08.817043 140508591796224 alphageometry.py:567] Translation: "l = on_circle l b c, on_circle l j c"

I0123 20:11:08.817097 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_circle l b c, on_circle l j c ? coll h j i"
I0123 20:11:08.817298 140508591796224 graph.py:498] 
I0123 20:11:08.817367 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_circle l b c, on_circle l j c ? coll h j i
I0123 20:11:10.644295 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7684180736541748
I0123 20:11:14.232420 140508591796224 ddar.py:60] Depth 2/1000 time = 3.587705135345459
I0123 20:11:19.473851 140508591796224 ddar.py:60] Depth 3/1000 time = 5.24104380607605
I0123 20:11:23.574441 140508591796224 ddar.py:60] Depth 4/1000 time = 4.100202560424805
I0123 20:11:27.801075 140508591796224 ddar.py:60] Depth 5/1000 time = 4.22514796257019
I0123 20:11:33.268748 140508591796224 ddar.py:60] Depth 6/1000 time = 5.467328310012817
I0123 20:11:37.701777 140508591796224 ddar.py:60] Depth 7/1000 time = 4.432778358459473
I0123 20:11:43.331672 140508591796224 ddar.py:60] Depth 8/1000 time = 5.629528045654297
I0123 20:11:48.526305 140508591796224 ddar.py:60] Depth 9/1000 time = 5.143146753311157
I0123 20:11:53.759299 140508591796224 ddar.py:60] Depth 10/1000 time = 5.23267388343811
I0123 20:12:00.075488 140508591796224 ddar.py:60] Depth 11/1000 time = 6.31597375869751
I0123 20:12:00.096287 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:12:00.096349 140508591796224 alphageometry.py:566] LM output (score=-2.775287): "l : D b l e l 13 D b l h l 14 ;"
I0123 20:12:00.096384 140508591796224 alphageometry.py:567] Translation: "l = on_bline l e b, on_bline l h b"

I0123 20:12:00.096425 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_bline l e b, on_bline l h b ? coll h j i"
I0123 20:12:00.096574 140508591796224 graph.py:498] 
I0123 20:12:00.096628 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_bline l e b, on_bline l h b ? coll h j i
I0123 20:12:01.929201 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7763240337371826
I0123 20:12:06.220638 140508591796224 ddar.py:60] Depth 2/1000 time = 4.291217803955078
I0123 20:12:11.025662 140508591796224 ddar.py:60] Depth 3/1000 time = 4.804710865020752
I0123 20:12:14.965065 140508591796224 ddar.py:60] Depth 4/1000 time = 3.9371414184570312
I0123 20:12:19.170162 140508591796224 ddar.py:60] Depth 5/1000 time = 4.204842567443848
I0123 20:12:24.489738 140508591796224 ddar.py:60] Depth 6/1000 time = 5.319275379180908
I0123 20:12:29.948875 140508591796224 ddar.py:60] Depth 7/1000 time = 5.394242763519287
I0123 20:12:36.442860 140508591796224 ddar.py:60] Depth 8/1000 time = 6.493746280670166
I0123 20:12:41.791383 140508591796224 ddar.py:60] Depth 9/1000 time = 5.348198652267456
I0123 20:12:41.800592 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:12:41.800707 140508591796224 alphageometry.py:566] LM output (score=-2.793166): "l : D b l j l 13 D c l j l 14 ;"
I0123 20:12:41.800745 140508591796224 alphageometry.py:567] Translation: "l = on_bline l j b, on_bline l j c"

I0123 20:12:41.800792 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_bline l j b, on_bline l j c ? coll h j i"
I0123 20:12:41.800974 140508591796224 graph.py:498] 
I0123 20:12:41.801029 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_bline l j b, on_bline l j c ? coll h j i
I0123 20:12:43.667559 140508591796224 ddar.py:60] Depth 1/1000 time = 1.8053109645843506
I0123 20:12:48.412760 140508591796224 ddar.py:60] Depth 2/1000 time = 4.745031356811523
I0123 20:12:52.100783 140508591796224 ddar.py:60] Depth 3/1000 time = 3.6877853870391846
I0123 20:12:56.042071 140508591796224 ddar.py:60] Depth 4/1000 time = 3.938894510269165
I0123 20:13:01.390214 140508591796224 ddar.py:60] Depth 5/1000 time = 5.347923994064331
I0123 20:13:05.637881 140508591796224 ddar.py:60] Depth 6/1000 time = 4.247488260269165
I0123 20:13:11.179326 140508591796224 ddar.py:60] Depth 7/1000 time = 5.474937915802002
I0123 20:13:17.785461 140508591796224 ddar.py:60] Depth 8/1000 time = 6.605828046798706
I0123 20:13:23.270334 140508591796224 ddar.py:60] Depth 9/1000 time = 5.484676361083984
I0123 20:13:23.280794 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:13:23.280850 140508591796224 alphageometry.py:566] LM output (score=-2.794575): "l : T a b c l 13 ;"
I0123 20:13:23.280885 140508591796224 alphageometry.py:567] Translation: "l = on_tline l c a b"

I0123 20:13:23.280923 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_tline l c a b ? coll h j i"
I0123 20:13:23.281071 140508591796224 graph.py:498] 
I0123 20:13:23.281124 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_tline l c a b ? coll h j i
I0123 20:13:25.856392 140508591796224 ddar.py:60] Depth 1/1000 time = 2.542170286178589
I0123 20:13:29.465759 140508591796224 ddar.py:60] Depth 2/1000 time = 3.60914945602417
I0123 20:13:32.598288 140508591796224 ddar.py:60] Depth 3/1000 time = 3.1322226524353027
I0123 20:13:35.824293 140508591796224 ddar.py:60] Depth 4/1000 time = 3.2248172760009766
I0123 20:13:40.213528 140508591796224 ddar.py:60] Depth 5/1000 time = 4.389038801193237
I0123 20:13:44.199809 140508591796224 ddar.py:60] Depth 6/1000 time = 3.9520773887634277
I0123 20:13:48.082404 140508591796224 ddar.py:60] Depth 7/1000 time = 3.882340431213379
I0123 20:13:53.056437 140508591796224 ddar.py:60] Depth 8/1000 time = 4.973694086074829
I0123 20:13:53.061787 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:13:53.061861 140508591796224 alphageometry.py:566] LM output (score=-2.813165): "l : D b l e l 13 ;"
I0123 20:13:53.061897 140508591796224 alphageometry.py:567] Translation: "l = on_bline l e b"

I0123 20:13:53.061933 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_bline l e b ? coll h j i"
I0123 20:13:53.062103 140508591796224 graph.py:498] 
I0123 20:13:53.062156 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_bline l e b ? coll h j i
I0123 20:13:54.759152 140508591796224 ddar.py:60] Depth 1/1000 time = 1.6559598445892334
I0123 20:13:58.735882 140508591796224 ddar.py:60] Depth 2/1000 time = 3.976576566696167
I0123 20:14:03.263338 140508591796224 ddar.py:60] Depth 3/1000 time = 4.5272605419158936
I0123 20:14:06.807044 140508591796224 ddar.py:60] Depth 4/1000 time = 3.5424838066101074
I0123 20:14:10.414572 140508591796224 ddar.py:60] Depth 5/1000 time = 3.6072020530700684
I0123 20:14:15.889259 140508591796224 ddar.py:60] Depth 6/1000 time = 5.4382545948028564
I0123 20:14:20.182392 140508591796224 ddar.py:60] Depth 7/1000 time = 4.292957067489624
I0123 20:14:24.504061 140508591796224 ddar.py:60] Depth 8/1000 time = 4.321431875228882
I0123 20:14:24.510538 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:14:24.510651 140508591796224 alphageometry.py:566] LM output (score=-2.820519): "l : D a c c l 13 D a j j l 14 ;"
I0123 20:14:24.510689 140508591796224 alphageometry.py:567] Translation: "l = on_circle l c a, on_circle l j a"

I0123 20:14:24.510739 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_circle l c a, on_circle l j a ? coll h j i"
I0123 20:14:24.510918 140508591796224 graph.py:498] 
I0123 20:14:24.510977 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_circle l c a, on_circle l j a ? coll h j i
I0123 20:14:26.275724 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7043683528900146
I0123 20:14:30.970681 140508591796224 ddar.py:60] Depth 2/1000 time = 4.694768905639648
I0123 20:14:34.972658 140508591796224 ddar.py:60] Depth 3/1000 time = 4.001810550689697
I0123 20:14:39.056386 140508591796224 ddar.py:60] Depth 4/1000 time = 4.083552598953247
I0123 20:14:44.216538 140508591796224 ddar.py:60] Depth 5/1000 time = 5.159892320632935
I0123 20:14:48.439211 140508591796224 ddar.py:60] Depth 6/1000 time = 4.221111297607422
I0123 20:14:53.913510 140508591796224 ddar.py:60] Depth 7/1000 time = 5.474106073379517
I0123 20:14:58.391870 140508591796224 ddar.py:60] Depth 8/1000 time = 4.4781718254089355
I0123 20:15:03.064372 140508591796224 ddar.py:60] Depth 9/1000 time = 4.672247648239136
I0123 20:15:08.948006 140508591796224 ddar.py:60] Depth 10/1000 time = 5.8833043575286865
I0123 20:15:14.583541 140508591796224 ddar.py:60] Depth 11/1000 time = 5.583452224731445
I0123 20:15:21.487884 140508591796224 ddar.py:60] Depth 12/1000 time = 6.904130220413208
I0123 20:15:27.214729 140508591796224 ddar.py:60] Depth 13/1000 time = 5.7266151905059814
I0123 20:15:27.243230 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:15:27.243326 140508591796224 alphageometry.py:566] LM output (score=-2.937221): "l : T c i c l 13 ;"
I0123 20:15:27.243362 140508591796224 alphageometry.py:567] Translation: "l = on_tline l c c i"

I0123 20:15:27.243402 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_tline l c c i ? coll h j i"
I0123 20:15:27.243553 140508591796224 graph.py:498] 
I0123 20:15:27.243623 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_tline l c c i ? coll h j i
I0123 20:15:28.783864 140508591796224 ddar.py:60] Depth 1/1000 time = 1.5082690715789795
I0123 20:15:32.429163 140508591796224 ddar.py:60] Depth 2/1000 time = 3.645142078399658
I0123 20:15:36.696644 140508591796224 ddar.py:60] Depth 3/1000 time = 4.267307996749878
I0123 20:15:39.945844 140508591796224 ddar.py:60] Depth 4/1000 time = 3.248008966445923
I0123 20:15:43.325202 140508591796224 ddar.py:60] Depth 5/1000 time = 3.379026412963867
I0123 20:15:47.906639 140508591796224 ddar.py:60] Depth 6/1000 time = 4.581250190734863
I0123 20:15:51.906815 140508591796224 ddar.py:60] Depth 7/1000 time = 3.9662044048309326
I0123 20:15:55.853946 140508591796224 ddar.py:60] Depth 8/1000 time = 3.9469566345214844
I0123 20:15:59.802949 140508591796224 ddar.py:60] Depth 9/1000 time = 3.9487385749816895
I0123 20:15:59.808449 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:15:59.808543 140508591796224 alphageometry.py:566] LM output (score=-2.949065): "l : D b l e l 13 D e l h l 14 ;"
I0123 20:15:59.808579 140508591796224 alphageometry.py:567] Translation: "l = on_bline l e b, on_bline l h e"

I0123 20:15:59.808627 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_bline l e b, on_bline l h e ? coll h j i"
I0123 20:15:59.808815 140508591796224 graph.py:498] 
I0123 20:15:59.808876 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_bline k g a, on_bline k i a; l = on_bline l e b, on_bline l h e ? coll h j i
I0123 20:16:02.814919 140508591796224 ddar.py:60] Depth 1/1000 time = 2.9568376541137695
I0123 20:16:07.080451 140508591796224 ddar.py:60] Depth 2/1000 time = 4.2653515338897705
I0123 20:16:10.753737 140508591796224 ddar.py:60] Depth 3/1000 time = 3.6731057167053223
I0123 20:16:15.797789 140508591796224 ddar.py:60] Depth 4/1000 time = 5.0417749881744385
I0123 20:16:19.991159 140508591796224 ddar.py:60] Depth 5/1000 time = 4.193056106567383
I0123 20:16:24.216479 140508591796224 ddar.py:60] Depth 6/1000 time = 4.225100755691528
I0123 20:16:30.821933 140508591796224 ddar.py:60] Depth 7/1000 time = 6.542089223861694
I0123 20:16:36.256768 140508591796224 ddar.py:60] Depth 8/1000 time = 5.434586763381958
I0123 20:16:42.871927 140508591796224 ddar.py:60] Depth 9/1000 time = 6.614843845367432
I0123 20:16:42.880137 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:16:42.880220 140508591796224 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : D b d d e 02 ; f : D c d d f 03 ; g : D d e d g 04 ; h : C b g h 05 C e f h 06 ; i : C a f i 07 C c g i 08 ; j : C a b j 09 C c e j 10 ? C h j i {F1} x00 k : D a c a k 11 D b c b k 12 ; x00
I0123 20:16:49.137884 140508591796224 alphageometry.py:566] LM output (score=-1.313325): "l : D a l c l 13 D a l j l 14 ;"
I0123 20:16:49.138035 140508591796224 alphageometry.py:567] Translation: "l = on_bline l c a, on_bline l j a"

I0123 20:16:49.138084 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_bline l c a, on_bline l j a ? coll h j i"
I0123 20:16:49.138233 140508591796224 graph.py:498] 
I0123 20:16:49.138303 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_bline l c a, on_bline l j a ? coll h j i
I0123 20:16:50.912852 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7225341796875
I0123 20:16:55.061339 140508591796224 ddar.py:60] Depth 2/1000 time = 4.148315906524658
I0123 20:17:00.142594 140508591796224 ddar.py:60] Depth 3/1000 time = 5.081068515777588
I0123 20:17:04.179484 140508591796224 ddar.py:60] Depth 4/1000 time = 4.036679983139038
I0123 20:17:08.375605 140508591796224 ddar.py:60] Depth 5/1000 time = 4.194770097732544
I0123 20:17:13.940510 140508591796224 ddar.py:60] Depth 6/1000 time = 5.564575910568237
I0123 20:17:18.514927 140508591796224 ddar.py:60] Depth 7/1000 time = 4.574247121810913
I0123 20:17:23.124077 140508591796224 ddar.py:60] Depth 8/1000 time = 4.608954191207886
I0123 20:17:29.739490 140508591796224 ddar.py:60] Depth 9/1000 time = 6.553028106689453
I0123 20:17:35.253856 140508591796224 ddar.py:60] Depth 10/1000 time = 5.514193773269653
I0123 20:17:41.819997 140508591796224 ddar.py:60] Depth 11/1000 time = 6.565945625305176
I0123 20:17:41.843235 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:17:41.843295 140508591796224 alphageometry.py:566] LM output (score=-1.482102): "l : D a l g l 13 D g l i l 14 ;"
I0123 20:17:41.843330 140508591796224 alphageometry.py:567] Translation: "l = on_bline l g a, on_bline l i g"

I0123 20:17:41.843366 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_bline l g a, on_bline l i g ? coll h j i"
I0123 20:17:41.843518 140508591796224 graph.py:498] 
I0123 20:17:41.843572 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_bline l g a, on_bline l i g ? coll h j i
I0123 20:17:43.691387 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7984647750854492
I0123 20:17:47.295801 140508591796224 ddar.py:60] Depth 2/1000 time = 3.6042375564575195
I0123 20:17:51.278972 140508591796224 ddar.py:60] Depth 3/1000 time = 3.982980251312256
I0123 20:17:56.491249 140508591796224 ddar.py:60] Depth 4/1000 time = 5.212063789367676
I0123 20:18:00.658664 140508591796224 ddar.py:60] Depth 5/1000 time = 4.166082382202148
I0123 20:18:06.073757 140508591796224 ddar.py:60] Depth 6/1000 time = 5.414900302886963
I0123 20:18:10.495944 140508591796224 ddar.py:60] Depth 7/1000 time = 4.421995401382446
I0123 20:18:14.944860 140508591796224 ddar.py:60] Depth 8/1000 time = 4.448721885681152
I0123 20:18:21.362159 140508591796224 ddar.py:60] Depth 9/1000 time = 6.3612377643585205
I0123 20:18:26.520226 140508591796224 ddar.py:60] Depth 10/1000 time = 5.157857179641724
I0123 20:18:31.716173 140508591796224 ddar.py:60] Depth 11/1000 time = 5.195764780044556
I0123 20:18:38.066984 140508591796224 ddar.py:60] Depth 12/1000 time = 6.336245775222778
I0123 20:18:38.070938 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:18:38.071007 140508591796224 alphageometry.py:566] LM output (score=-1.498170): "l : D a l e l 13 D a l j l 14 ;"
I0123 20:18:38.071044 140508591796224 alphageometry.py:567] Translation: "l = on_bline l e a, on_bline l j a"

I0123 20:18:38.071083 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_bline l e a, on_bline l j a ? coll h j i"
I0123 20:18:38.071247 140508591796224 graph.py:498] 
I0123 20:18:38.071303 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_bline l e a, on_bline l j a ? coll h j i
I0123 20:18:39.877213 140508591796224 ddar.py:60] Depth 1/1000 time = 1.754828929901123
I0123 20:18:43.444318 140508591796224 ddar.py:60] Depth 2/1000 time = 3.566882371902466
I0123 20:18:48.645522 140508591796224 ddar.py:60] Depth 3/1000 time = 5.200917959213257
I0123 20:18:52.696721 140508591796224 ddar.py:60] Depth 4/1000 time = 4.050994873046875
I0123 20:18:57.021547 140508591796224 ddar.py:60] Depth 5/1000 time = 4.3224406242370605
I0123 20:19:02.781675 140508591796224 ddar.py:60] Depth 6/1000 time = 5.759920835494995
I0123 20:19:07.509977 140508591796224 ddar.py:60] Depth 7/1000 time = 4.728123903274536
I0123 20:19:13.141121 140508591796224 ddar.py:60] Depth 8/1000 time = 5.574115037918091
I0123 20:19:19.932625 140508591796224 ddar.py:60] Depth 9/1000 time = 6.791208744049072
I0123 20:19:25.466611 140508591796224 ddar.py:60] Depth 10/1000 time = 5.533777475357056
I0123 20:19:25.489271 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:19:25.489330 140508591796224 alphageometry.py:566] LM output (score=-1.598520): "l : D a l c l 13 D c l j l 14 ;"
I0123 20:19:25.489364 140508591796224 alphageometry.py:567] Translation: "l = on_bline l c a, on_bline l j c"

I0123 20:19:25.489403 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_bline l c a, on_bline l j c ? coll h j i"
I0123 20:19:25.489565 140508591796224 graph.py:498] 
I0123 20:19:25.489620 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_bline l c a, on_bline l j c ? coll h j i
I0123 20:19:28.424103 140508591796224 ddar.py:60] Depth 1/1000 time = 2.8842430114746094
I0123 20:19:32.597287 140508591796224 ddar.py:60] Depth 2/1000 time = 4.173003435134888
I0123 20:19:36.614146 140508591796224 ddar.py:60] Depth 3/1000 time = 4.01665735244751
I0123 20:19:41.903190 140508591796224 ddar.py:60] Depth 4/1000 time = 5.288804769515991
I0123 20:19:46.127026 140508591796224 ddar.py:60] Depth 5/1000 time = 4.222429275512695
I0123 20:19:50.558349 140508591796224 ddar.py:60] Depth 6/1000 time = 4.4311089515686035
I0123 20:19:56.323499 140508591796224 ddar.py:60] Depth 7/1000 time = 5.764984369277954
I0123 20:20:00.916039 140508591796224 ddar.py:60] Depth 8/1000 time = 4.592344284057617
I0123 20:20:06.293520 140508591796224 ddar.py:60] Depth 9/1000 time = 5.318441867828369
I0123 20:20:12.874548 140508591796224 ddar.py:60] Depth 10/1000 time = 6.580721616744995
I0123 20:20:18.271372 140508591796224 ddar.py:60] Depth 11/1000 time = 5.396627426147461
I0123 20:20:18.294441 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:20:18.294500 140508591796224 alphageometry.py:566] LM output (score=-1.651524): "l : C b g l 13 D b l g l 14 ;"
I0123 20:20:18.294535 140508591796224 alphageometry.py:567] Translation: "l = on_line l b g, on_bline l g b"

I0123 20:20:18.294571 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_line l b g, on_bline l g b ? coll h j i"
I0123 20:20:18.294745 140508591796224 graph.py:498] 
I0123 20:20:18.294800 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_line l b g, on_bline l g b ? coll h j i
I0123 20:20:20.006400 140508591796224 ddar.py:60] Depth 1/1000 time = 1.657369613647461
I0123 20:20:25.103342 140508591796224 ddar.py:60] Depth 2/1000 time = 5.09677791595459
I0123 20:20:29.061342 140508591796224 ddar.py:60] Depth 3/1000 time = 3.9578139781951904
I0123 20:20:34.315965 140508591796224 ddar.py:60] Depth 4/1000 time = 5.254433870315552
I0123 20:20:38.423707 140508591796224 ddar.py:60] Depth 5/1000 time = 4.107526540756226
I0123 20:20:43.649097 140508591796224 ddar.py:60] Depth 6/1000 time = 5.224935054779053
I0123 20:20:47.790200 140508591796224 ddar.py:60] Depth 7/1000 time = 4.104009389877319
I0123 20:20:47.791302 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:20:47.791358 140508591796224 alphageometry.py:566] LM output (score=-1.699469): "l : C b f l 13 D b l f l 14 ;"
I0123 20:20:47.791393 140508591796224 alphageometry.py:567] Translation: "l = on_line l b f, on_bline l f b"

I0123 20:20:47.791430 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_line l b f, on_bline l f b ? coll h j i"
I0123 20:20:47.791584 140508591796224 graph.py:498] 
I0123 20:20:47.791640 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_line l b f, on_bline l f b ? coll h j i
I0123 20:20:49.448289 140508591796224 ddar.py:60] Depth 1/1000 time = 1.6133995056152344
I0123 20:20:53.935712 140508591796224 ddar.py:60] Depth 2/1000 time = 4.487250089645386
I0123 20:20:57.793906 140508591796224 ddar.py:60] Depth 3/1000 time = 3.857950448989868
I0123 20:21:02.957093 140508591796224 ddar.py:60] Depth 4/1000 time = 5.162877082824707
I0123 20:21:06.986127 140508591796224 ddar.py:60] Depth 5/1000 time = 4.0288474559783936
I0123 20:21:11.010865 140508591796224 ddar.py:60] Depth 6/1000 time = 4.024291276931763
I0123 20:21:16.229037 140508591796224 ddar.py:60] Depth 7/1000 time = 5.18185019493103
I0123 20:21:16.230129 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:21:16.230184 140508591796224 alphageometry.py:566] LM output (score=-1.766395): "l : C c k l 13 D c l k l 14 ;"
I0123 20:21:16.230217 140508591796224 alphageometry.py:567] Translation: "l = on_line l c k, on_bline l k c"

I0123 20:21:16.230253 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_line l c k, on_bline l k c ? coll h j i"
I0123 20:21:16.230409 140508591796224 graph.py:498] 
I0123 20:21:16.230465 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_line l c k, on_bline l k c ? coll h j i
I0123 20:21:17.932881 140508591796224 ddar.py:60] Depth 1/1000 time = 1.6553020477294922
I0123 20:21:21.481824 140508591796224 ddar.py:60] Depth 2/1000 time = 3.548720121383667
I0123 20:21:26.675829 140508591796224 ddar.py:60] Depth 3/1000 time = 5.193715572357178
I0123 20:21:30.701953 140508591796224 ddar.py:60] Depth 4/1000 time = 4.0259315967559814
I0123 20:21:35.839321 140508591796224 ddar.py:60] Depth 5/1000 time = 5.136982679367065
I0123 20:21:41.324605 140508591796224 ddar.py:60] Depth 6/1000 time = 5.460928201675415
I0123 20:21:45.547151 140508591796224 ddar.py:60] Depth 7/1000 time = 4.222360134124756
I0123 20:21:51.078719 140508591796224 ddar.py:60] Depth 8/1000 time = 5.519474029541016
I0123 20:21:51.079844 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:21:51.079904 140508591796224 alphageometry.py:566] LM output (score=-1.777043): "l : D a l j l 13 D c l j l 14 ;"
I0123 20:21:51.079937 140508591796224 alphageometry.py:567] Translation: "l = on_bline l j a, on_bline l j c"

I0123 20:21:51.079974 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_bline l j a, on_bline l j c ? coll h j i"
I0123 20:21:51.080122 140508591796224 graph.py:498] 
I0123 20:21:51.080176 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_bline l j a, on_bline l j c ? coll h j i
I0123 20:21:52.913676 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7728946208953857
I0123 20:21:56.478258 140508591796224 ddar.py:60] Depth 2/1000 time = 3.564397096633911
I0123 20:22:00.471508 140508591796224 ddar.py:60] Depth 3/1000 time = 3.9930710792541504
I0123 20:22:05.684633 140508591796224 ddar.py:60] Depth 4/1000 time = 5.212929010391235
I0123 20:22:09.908977 140508591796224 ddar.py:60] Depth 5/1000 time = 4.2230894565582275
I0123 20:22:14.360313 140508591796224 ddar.py:60] Depth 6/1000 time = 4.451099634170532
I0123 20:22:20.136643 140508591796224 ddar.py:60] Depth 7/1000 time = 5.776052474975586
I0123 20:22:24.741240 140508591796224 ddar.py:60] Depth 8/1000 time = 4.604390382766724
I0123 20:22:31.518249 140508591796224 ddar.py:60] Depth 9/1000 time = 6.717345714569092
I0123 20:22:37.125219 140508591796224 ddar.py:60] Depth 10/1000 time = 5.606789827346802
I0123 20:22:42.713757 140508591796224 ddar.py:60] Depth 11/1000 time = 5.588352203369141
I0123 20:22:42.736490 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:22:42.736560 140508591796224 alphageometry.py:566] LM output (score=-1.920556): "l : C c g l 13 D c l g l 14 ;"
I0123 20:22:42.736595 140508591796224 alphageometry.py:567] Translation: "l = on_line l c g, on_bline l g c"

I0123 20:22:42.736632 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_line l c g, on_bline l g c ? coll h j i"
I0123 20:22:42.736794 140508591796224 graph.py:498] 
I0123 20:22:42.736854 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_line l c g, on_bline l g c ? coll h j i
I0123 20:22:45.678354 140508591796224 ddar.py:60] Depth 1/1000 time = 2.888328790664673
I0123 20:22:49.141512 140508591796224 ddar.py:60] Depth 2/1000 time = 3.4629716873168945
I0123 20:22:54.269661 140508591796224 ddar.py:60] Depth 3/1000 time = 5.127926826477051
I0123 20:22:58.364355 140508591796224 ddar.py:60] Depth 4/1000 time = 4.094517230987549
I0123 20:23:03.739501 140508591796224 ddar.py:60] Depth 5/1000 time = 5.374966144561768
I0123 20:23:07.904607 140508591796224 ddar.py:60] Depth 6/1000 time = 4.164679765701294
I0123 20:23:12.153075 140508591796224 ddar.py:60] Depth 7/1000 time = 4.2097485065460205
I0123 20:23:12.154382 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:23:12.154467 140508591796224 alphageometry.py:566] LM output (score=-1.946566): "l : D a l g l 13 D a l i l 14 ;"
I0123 20:23:12.154500 140508591796224 alphageometry.py:567] Translation: "l = on_bline l g a, on_bline l i a"

I0123 20:23:12.154546 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_bline l g a, on_bline l i a ? coll h j i"
I0123 20:23:12.154725 140508591796224 graph.py:498] 
I0123 20:23:12.154784 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_bline l g a, on_bline l i a ? coll h j i
I0123 20:23:15.193090 140508591796224 ddar.py:60] Depth 1/1000 time = 2.9846272468566895
I0123 20:23:18.740171 140508591796224 ddar.py:60] Depth 2/1000 time = 3.546884775161743
I0123 20:23:22.668909 140508591796224 ddar.py:60] Depth 3/1000 time = 3.92856502532959
I0123 20:23:27.883125 140508591796224 ddar.py:60] Depth 4/1000 time = 5.214019060134888
I0123 20:23:32.048571 140508591796224 ddar.py:60] Depth 5/1000 time = 4.1641740798950195
I0123 20:23:36.359411 140508591796224 ddar.py:60] Depth 6/1000 time = 4.310658693313599
I0123 20:23:42.055878 140508591796224 ddar.py:60] Depth 7/1000 time = 5.696277379989624
I0123 20:23:46.498326 140508591796224 ddar.py:60] Depth 8/1000 time = 4.442217588424683
I0123 20:23:51.782494 140508591796224 ddar.py:60] Depth 9/1000 time = 5.226570129394531
I0123 20:23:58.168510 140508591796224 ddar.py:60] Depth 10/1000 time = 6.385829925537109
I0123 20:24:03.381139 140508591796224 ddar.py:60] Depth 11/1000 time = 5.212430953979492
I0123 20:24:08.674633 140508591796224 ddar.py:60] Depth 12/1000 time = 5.277789354324341
I0123 20:24:08.678375 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:24:08.678467 140508591796224 alphageometry.py:566] LM output (score=-2.013732): "l : D a c a l 13 D c e e l 14 ;"
I0123 20:24:08.678503 140508591796224 alphageometry.py:567] Translation: "l = on_circle l a c, on_circle l e c"

I0123 20:24:08.678555 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_circle l a c, on_circle l e c ? coll h j i"
I0123 20:24:08.678743 140508591796224 graph.py:498] 
I0123 20:24:08.678807 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_circle l a c, on_circle l e c ? coll h j i
I0123 20:24:11.720710 140508591796224 ddar.py:60] Depth 1/1000 time = 2.9700796604156494
I0123 20:24:15.973150 140508591796224 ddar.py:60] Depth 2/1000 time = 4.2522594928741455
I0123 20:24:20.187587 140508591796224 ddar.py:60] Depth 3/1000 time = 4.214255332946777
I0123 20:24:25.690258 140508591796224 ddar.py:60] Depth 4/1000 time = 5.502499580383301
I0123 20:24:30.150326 140508591796224 ddar.py:60] Depth 5/1000 time = 4.459836483001709
I0123 20:24:34.674258 140508591796224 ddar.py:60] Depth 6/1000 time = 4.523610591888428
I0123 20:24:41.413430 140508591796224 ddar.py:60] Depth 7/1000 time = 6.676581621170044
I0123 20:24:46.633076 140508591796224 ddar.py:60] Depth 8/1000 time = 5.219463109970093
I0123 20:24:46.652588 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:24:46.652655 140508591796224 alphageometry.py:566] LM output (score=-2.060237): "l : D a l g l 13 ;"
I0123 20:24:46.652692 140508591796224 alphageometry.py:567] Translation: "l = on_bline l g a"

I0123 20:24:46.652729 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_bline l g a ? coll h j i"
I0123 20:24:46.652880 140508591796224 graph.py:498] 
I0123 20:24:46.652933 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_bline l g a ? coll h j i
I0123 20:24:48.298224 140508591796224 ddar.py:60] Depth 1/1000 time = 1.6000514030456543
I0123 20:24:51.593620 140508591796224 ddar.py:60] Depth 2/1000 time = 3.2952420711517334
I0123 20:24:56.497067 140508591796224 ddar.py:60] Depth 3/1000 time = 4.90320611000061
I0123 20:25:00.325023 140508591796224 ddar.py:60] Depth 4/1000 time = 3.8276314735412598
I0123 20:25:04.513792 140508591796224 ddar.py:60] Depth 5/1000 time = 4.16130805015564
I0123 20:25:09.787789 140508591796224 ddar.py:60] Depth 6/1000 time = 5.2738258838653564
I0123 20:25:13.958224 140508591796224 ddar.py:60] Depth 7/1000 time = 4.157670974731445
I0123 20:25:13.959334 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:25:13.959390 140508591796224 alphageometry.py:566] LM output (score=-2.086083): "l : D a c c l 13 D a j j l 14 ;"
I0123 20:25:13.959424 140508591796224 alphageometry.py:567] Translation: "l = on_circle l c a, on_circle l j a"

I0123 20:25:13.959462 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_circle l c a, on_circle l j a ? coll h j i"
I0123 20:25:13.959615 140508591796224 graph.py:498] 
I0123 20:25:13.959669 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_circle l c a, on_circle l j a ? coll h j i
I0123 20:25:15.690282 140508591796224 ddar.py:60] Depth 1/1000 time = 1.6577136516571045
I0123 20:25:19.815939 140508591796224 ddar.py:60] Depth 2/1000 time = 4.125448226928711
I0123 20:25:25.661802 140508591796224 ddar.py:60] Depth 3/1000 time = 5.845569610595703
I0123 20:25:30.346850 140508591796224 ddar.py:60] Depth 4/1000 time = 4.684876203536987
I0123 20:25:36.269257 140508591796224 ddar.py:60] Depth 5/1000 time = 5.922234535217285
I0123 20:25:41.529574 140508591796224 ddar.py:60] Depth 6/1000 time = 5.212994813919067
I0123 20:25:46.760481 140508591796224 ddar.py:60] Depth 7/1000 time = 5.2306554317474365
I0123 20:25:53.329730 140508591796224 ddar.py:60] Depth 8/1000 time = 6.536924600601196
I0123 20:25:53.332531 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:25:53.332588 140508591796224 alphageometry.py:566] LM output (score=-2.089878): "l : D a l b l 13 D b l k l 14 ;"
I0123 20:25:53.332621 140508591796224 alphageometry.py:567] Translation: "l = on_bline l b a, on_bline l k b"

I0123 20:25:53.332657 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_bline l b a, on_bline l k b ? coll h j i"
I0123 20:25:53.332818 140508591796224 graph.py:498] 
I0123 20:25:53.332878 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_bline l b a, on_bline l k b ? coll h j i
I0123 20:25:55.199687 140508591796224 ddar.py:60] Depth 1/1000 time = 1.8120653629302979
I0123 20:25:59.231097 140508591796224 ddar.py:60] Depth 2/1000 time = 4.03123927116394
I0123 20:26:03.032362 140508591796224 ddar.py:60] Depth 3/1000 time = 3.8010787963867188
I0123 20:26:08.101077 140508591796224 ddar.py:60] Depth 4/1000 time = 5.068530797958374
I0123 20:26:12.053128 140508591796224 ddar.py:60] Depth 5/1000 time = 3.951483726501465
I0123 20:26:19.729609 140508591796224 ddar.py:60] Depth 6/1000 time = 7.676278829574585
I0123 20:26:26.893771 140508591796224 ddar.py:60] Depth 7/1000 time = 7.1639416217803955
I0123 20:26:36.156574 140508591796224 ddar.py:60] Depth 8/1000 time = 9.26262640953064
I0123 20:26:44.518396 140508591796224 ddar.py:60] Depth 9/1000 time = 8.361567497253418
I0123 20:26:51.368454 140508591796224 ddar.py:60] Depth 10/1000 time = 6.809371471405029
I0123 20:26:59.480700 140508591796224 ddar.py:60] Depth 11/1000 time = 8.096216917037964
I0123 20:27:07.690907 140508591796224 ddar.py:60] Depth 12/1000 time = 8.19572901725769
I0123 20:27:14.662037 140508591796224 ddar.py:60] Depth 13/1000 time = 6.955940246582031
I0123 20:27:14.662371 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:27:14.662493 140508591796224 alphageometry.py:566] LM output (score=-2.144713): "l : D a l i l 13 D c l i l 14 ;"
I0123 20:27:14.662530 140508591796224 alphageometry.py:567] Translation: "l = on_bline l i a, on_bline l i c"

I0123 20:27:14.662579 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_bline l i a, on_bline l i c ? coll h j i"
I0123 20:27:14.662759 140508591796224 graph.py:498] 
I0123 20:27:14.662815 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_bline l i a, on_bline l i c ? coll h j i
I0123 20:27:16.500658 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7837672233581543
I0123 20:27:20.681637 140508591796224 ddar.py:60] Depth 2/1000 time = 4.180784463882446
I0123 20:27:25.898142 140508591796224 ddar.py:60] Depth 3/1000 time = 5.216318845748901
I0123 20:27:29.961511 140508591796224 ddar.py:60] Depth 4/1000 time = 4.06318998336792
I0123 20:27:34.147591 140508591796224 ddar.py:60] Depth 5/1000 time = 4.184810161590576
I0123 20:27:39.663622 140508591796224 ddar.py:60] Depth 6/1000 time = 5.515832901000977
I0123 20:27:44.812752 140508591796224 ddar.py:60] Depth 7/1000 time = 5.100395679473877
I0123 20:27:49.857829 140508591796224 ddar.py:60] Depth 8/1000 time = 5.044874906539917
I0123 20:27:56.107919 140508591796224 ddar.py:60] Depth 9/1000 time = 6.249895095825195
I0123 20:28:01.313615 140508591796224 ddar.py:60] Depth 10/1000 time = 5.191146612167358
I0123 20:28:01.317281 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:28:01.317372 140508591796224 alphageometry.py:566] LM output (score=-2.159344): "l : D a g g l 13 D a i i l 14 ;"
I0123 20:28:01.317407 140508591796224 alphageometry.py:567] Translation: "l = on_circle l g a, on_circle l i a"

I0123 20:28:01.317455 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_circle l g a, on_circle l i a ? coll h j i"
I0123 20:28:01.317660 140508591796224 graph.py:498] 
I0123 20:28:01.317724 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_circle l g a, on_circle l i a ? coll h j i
I0123 20:28:03.057862 140508591796224 ddar.py:60] Depth 1/1000 time = 1.6817047595977783
I0123 20:28:08.405136 140508591796224 ddar.py:60] Depth 2/1000 time = 5.3470847606658936
I0123 20:28:12.821159 140508591796224 ddar.py:60] Depth 3/1000 time = 4.415836572647095
I0123 20:28:17.409524 140508591796224 ddar.py:60] Depth 4/1000 time = 4.588181495666504
I0123 20:28:23.842723 140508591796224 ddar.py:60] Depth 5/1000 time = 6.38766884803772
I0123 20:28:29.001319 140508591796224 ddar.py:60] Depth 6/1000 time = 5.158348798751831
I0123 20:28:34.207781 140508591796224 ddar.py:60] Depth 7/1000 time = 5.178261995315552
I0123 20:28:34.210003 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:28:34.210100 140508591796224 alphageometry.py:566] LM output (score=-2.161449): "l : C c f l 13 D c l f l 14 ;"
I0123 20:28:34.210135 140508591796224 alphageometry.py:567] Translation: "l = on_line l c f, on_bline l f c"

I0123 20:28:34.210188 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_line l c f, on_bline l f c ? coll h j i"
I0123 20:28:34.210378 140508591796224 graph.py:498] 
I0123 20:28:34.210436 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_line l c f, on_bline l f c ? coll h j i
I0123 20:28:37.131113 140508591796224 ddar.py:60] Depth 1/1000 time = 2.8715202808380127
I0123 20:28:40.479725 140508591796224 ddar.py:60] Depth 2/1000 time = 3.3484487533569336
I0123 20:28:44.321183 140508591796224 ddar.py:60] Depth 3/1000 time = 3.841273307800293
I0123 20:28:49.601354 140508591796224 ddar.py:60] Depth 4/1000 time = 5.27998161315918
I0123 20:28:53.655186 140508591796224 ddar.py:60] Depth 5/1000 time = 4.053574800491333
I0123 20:28:57.695980 140508591796224 ddar.py:60] Depth 6/1000 time = 4.040194988250732
I0123 20:29:03.139228 140508591796224 ddar.py:60] Depth 7/1000 time = 5.4056196212768555
I0123 20:29:03.140307 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:29:03.140372 140508591796224 alphageometry.py:566] LM output (score=-2.192878): "l : C a e l 13 D a l e l 14 ;"
I0123 20:29:03.140408 140508591796224 alphageometry.py:567] Translation: "l = on_line l a e, on_bline l e a"

I0123 20:29:03.140442 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_line l a e, on_bline l e a ? coll h j i"
I0123 20:29:03.140594 140508591796224 graph.py:498] 
I0123 20:29:03.140651 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_line l a e, on_bline l e a ? coll h j i
I0123 20:29:04.812155 140508591796224 ddar.py:60] Depth 1/1000 time = 1.6150648593902588
I0123 20:29:08.187692 140508591796224 ddar.py:60] Depth 2/1000 time = 3.375372886657715
I0123 20:29:12.046316 140508591796224 ddar.py:60] Depth 3/1000 time = 3.8584563732147217
I0123 20:29:17.378223 140508591796224 ddar.py:60] Depth 4/1000 time = 5.331666707992554
I0123 20:29:21.472374 140508591796224 ddar.py:60] Depth 5/1000 time = 4.093854188919067
I0123 20:29:25.548651 140508591796224 ddar.py:60] Depth 6/1000 time = 4.075811862945557
I0123 20:29:25.585468 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:29:25.585577 140508591796224 alphageometry.py:566] LM output (score=-2.253676): "l : C a b l 13 D a l b l 14 ;"
I0123 20:29:25.585613 140508591796224 alphageometry.py:567] Translation: "l = on_line l a b, on_bline l b a"

I0123 20:29:25.585674 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_line l a b, on_bline l b a ? coll h j i"
I0123 20:29:25.585847 140508591796224 graph.py:498] 
I0123 20:29:25.585902 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_line l a b, on_bline l b a ? coll h j i
I0123 20:29:28.564192 140508591796224 ddar.py:60] Depth 1/1000 time = 2.9305403232574463
I0123 20:29:32.671187 140508591796224 ddar.py:60] Depth 2/1000 time = 4.1068220138549805
I0123 20:29:37.086948 140508591796224 ddar.py:60] Depth 3/1000 time = 4.415582895278931
I0123 20:29:42.853469 140508591796224 ddar.py:60] Depth 4/1000 time = 5.76629114151001
I0123 20:29:47.402780 140508591796224 ddar.py:60] Depth 5/1000 time = 4.548741817474365
I0123 20:29:53.275174 140508591796224 ddar.py:60] Depth 6/1000 time = 5.830397129058838
I0123 20:29:53.276303 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:29:53.276361 140508591796224 alphageometry.py:566] LM output (score=-2.267690): "l : C b e l 13 D b l e l 14 ;"
I0123 20:29:53.276395 140508591796224 alphageometry.py:567] Translation: "l = on_line l b e, on_bline l e b"

I0123 20:29:53.276431 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_line l b e, on_bline l e b ? coll h j i"
I0123 20:29:53.276591 140508591796224 graph.py:498] 
I0123 20:29:53.276648 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_line l b e, on_bline l e b ? coll h j i
I0123 20:29:54.946779 140508591796224 ddar.py:60] Depth 1/1000 time = 1.6227328777313232
I0123 20:29:58.959675 140508591796224 ddar.py:60] Depth 2/1000 time = 4.012748718261719
I0123 20:30:04.047172 140508591796224 ddar.py:60] Depth 3/1000 time = 5.087322235107422
I0123 20:30:08.059552 140508591796224 ddar.py:60] Depth 4/1000 time = 4.012200355529785
I0123 20:30:13.475221 140508591796224 ddar.py:60] Depth 5/1000 time = 5.415483713150024
I0123 20:30:17.583489 140508591796224 ddar.py:60] Depth 6/1000 time = 4.107812166213989
I0123 20:30:17.620817 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:30:17.620900 140508591796224 alphageometry.py:566] LM output (score=-2.302953): "l : D a c a l 13 D c f f l 14 ;"
I0123 20:30:17.620936 140508591796224 alphageometry.py:567] Translation: "l = on_circle l a c, on_circle l f c"

I0123 20:30:17.620975 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_circle l a c, on_circle l f c ? coll h j i"
I0123 20:30:17.621142 140508591796224 graph.py:498] 
I0123 20:30:17.621201 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_circle l a c, on_circle l f c ? coll h j i
I0123 20:30:19.438014 140508591796224 ddar.py:60] Depth 1/1000 time = 1.765174150466919
I0123 20:30:23.635197 140508591796224 ddar.py:60] Depth 2/1000 time = 4.1970226764678955
I0123 20:30:29.326847 140508591796224 ddar.py:60] Depth 3/1000 time = 5.691471815109253
I0123 20:30:34.049570 140508591796224 ddar.py:60] Depth 4/1000 time = 4.7225422859191895
I0123 20:30:38.843616 140508591796224 ddar.py:60] Depth 5/1000 time = 4.7938072681427
I0123 20:30:45.096586 140508591796224 ddar.py:60] Depth 6/1000 time = 6.252635717391968
I0123 20:30:50.859036 140508591796224 ddar.py:60] Depth 7/1000 time = 5.697502851486206
I0123 20:30:56.483602 140508591796224 ddar.py:60] Depth 8/1000 time = 5.624377965927124
I0123 20:31:03.496143 140508591796224 ddar.py:60] Depth 9/1000 time = 6.985859155654907
I0123 20:31:03.498833 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:31:03.498914 140508591796224 alphageometry.py:566] LM output (score=-2.359131): "l : D a c a l 13 D c k k l 14 ;"
I0123 20:31:03.498949 140508591796224 alphageometry.py:567] Translation: "l = on_circle l a c, on_circle l k c"

I0123 20:31:03.498996 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_circle l a c, on_circle l k c ? coll h j i"
I0123 20:31:03.499168 140508591796224 graph.py:498] 
I0123 20:31:03.499227 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_circle l a c, on_circle l k c ? coll h j i
I0123 20:31:05.267733 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7143375873565674
I0123 20:31:09.312196 140508591796224 ddar.py:60] Depth 2/1000 time = 4.044300317764282
I0123 20:31:14.472468 140508591796224 ddar.py:60] Depth 3/1000 time = 5.160079717636108
I0123 20:31:18.555798 140508591796224 ddar.py:60] Depth 4/1000 time = 4.083139657974243
I0123 20:31:22.652272 140508591796224 ddar.py:60] Depth 5/1000 time = 4.0962865352630615
I0123 20:31:28.579541 140508591796224 ddar.py:60] Depth 6/1000 time = 5.889518976211548
I0123 20:31:33.071111 140508591796224 ddar.py:60] Depth 7/1000 time = 4.49129319190979
I0123 20:31:33.085894 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:31:33.085971 140508591796224 alphageometry.py:566] LM output (score=-2.378505): "l : D b l c l 13 D b l j l 14 ;"
I0123 20:31:33.086006 140508591796224 alphageometry.py:567] Translation: "l = on_bline l c b, on_bline l j b"

I0123 20:31:33.086054 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_bline l c b, on_bline l j b ? coll h j i"
I0123 20:31:33.086225 140508591796224 graph.py:498] 
I0123 20:31:33.086280 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_bline l c b, on_bline l j b ? coll h j i
I0123 20:31:34.872519 140508591796224 ddar.py:60] Depth 1/1000 time = 1.72861909866333
I0123 20:31:39.010165 140508591796224 ddar.py:60] Depth 2/1000 time = 4.137481212615967
I0123 20:31:44.253905 140508591796224 ddar.py:60] Depth 3/1000 time = 5.243571519851685
I0123 20:31:48.322140 140508591796224 ddar.py:60] Depth 4/1000 time = 4.068047761917114
I0123 20:31:52.523580 140508591796224 ddar.py:60] Depth 5/1000 time = 4.200124979019165
I0123 20:31:58.299402 140508591796224 ddar.py:60] Depth 6/1000 time = 5.7755286693573
I0123 20:32:02.869174 140508591796224 ddar.py:60] Depth 7/1000 time = 4.569568157196045
I0123 20:32:07.449300 140508591796224 ddar.py:60] Depth 8/1000 time = 4.579939126968384
I0123 20:32:14.207058 140508591796224 ddar.py:60] Depth 9/1000 time = 6.69765043258667
I0123 20:32:19.684715 140508591796224 ddar.py:60] Depth 10/1000 time = 5.47747015953064
I0123 20:32:25.156336 140508591796224 ddar.py:60] Depth 11/1000 time = 5.471371173858643
I0123 20:32:25.178615 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:32:25.178708 140508591796224 alphageometry.py:566] LM output (score=-2.386127): "l : D a l e l 13 D a l h l 14 ;"
I0123 20:32:25.178743 140508591796224 alphageometry.py:567] Translation: "l = on_bline l e a, on_bline l h a"

I0123 20:32:25.178792 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_bline l e a, on_bline l h a ? coll h j i"
I0123 20:32:25.178976 140508591796224 graph.py:498] 
I0123 20:32:25.179039 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_bline l e a, on_bline l h a ? coll h j i
I0123 20:32:26.983947 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7512779235839844
I0123 20:32:31.925047 140508591796224 ddar.py:60] Depth 2/1000 time = 4.940931081771851
I0123 20:32:35.964406 140508591796224 ddar.py:60] Depth 3/1000 time = 4.039177417755127
I0123 20:32:40.108216 140508591796224 ddar.py:60] Depth 4/1000 time = 4.143617391586304
I0123 20:32:46.143563 140508591796224 ddar.py:60] Depth 5/1000 time = 5.99795389175415
I0123 20:32:50.866680 140508591796224 ddar.py:60] Depth 6/1000 time = 4.722939491271973
I0123 20:32:50.884440 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:32:50.884507 140508591796224 alphageometry.py:566] LM output (score=-2.405598): "l : D a c a l 13 D c d d l 14 ;"
I0123 20:32:50.884542 140508591796224 alphageometry.py:567] Translation: "l = on_circle l a c, on_circle l d c"

I0123 20:32:50.884579 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_circle l a c, on_circle l d c ? coll h j i"
I0123 20:32:50.884736 140508591796224 graph.py:498] 
I0123 20:32:50.884794 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_circle l a c, on_circle l d c ? coll h j i
I0123 20:32:54.305379 140508591796224 ddar.py:60] Depth 1/1000 time = 3.3331029415130615
I0123 20:33:06.407203 140508591796224 ddar.py:60] Depth 2/1000 time = 12.101530313491821
I0123 20:33:16.864198 140508591796224 ddar.py:60] Depth 3/1000 time = 10.4568190574646
I0123 20:33:29.170487 140508591796224 ddar.py:60] Depth 4/1000 time = 12.306079864501953
I0123 20:33:40.043941 140508591796224 ddar.py:60] Depth 5/1000 time = 10.873226881027222
I0123 20:33:52.496305 140508591796224 ddar.py:60] Depth 6/1000 time = 12.36903691291809
I0123 20:33:52.497848 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:33:52.497934 140508591796224 alphageometry.py:566] LM output (score=-2.460509): "l : C a g l 13 D a l g l 14 ;"
I0123 20:33:52.497969 140508591796224 alphageometry.py:567] Translation: "l = on_line l a g, on_bline l g a"

I0123 20:33:52.498018 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_line l a g, on_bline l g a ? coll h j i"
I0123 20:33:52.498190 140508591796224 graph.py:498] 
I0123 20:33:52.498247 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_line l a g, on_bline l g a ? coll h j i
I0123 20:33:54.162189 140508591796224 ddar.py:60] Depth 1/1000 time = 1.6172454357147217
I0123 20:33:58.103951 140508591796224 ddar.py:60] Depth 2/1000 time = 3.941596746444702
I0123 20:34:01.935389 140508591796224 ddar.py:60] Depth 3/1000 time = 3.8312277793884277
I0123 20:34:07.228516 140508591796224 ddar.py:60] Depth 4/1000 time = 5.292949914932251
I0123 20:34:11.268806 140508591796224 ddar.py:60] Depth 5/1000 time = 4.040092468261719
I0123 20:34:15.296507 140508591796224 ddar.py:60] Depth 6/1000 time = 4.027173280715942
I0123 20:34:20.765725 140508591796224 ddar.py:60] Depth 7/1000 time = 5.432184219360352
I0123 20:34:20.766841 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:34:20.766899 140508591796224 alphageometry.py:566] LM output (score=-2.520868): "l : D a c c l 13 D a e e l 14 ;"
I0123 20:34:20.766932 140508591796224 alphageometry.py:567] Translation: "l = on_circle l c a, on_circle l e a"

I0123 20:34:20.766967 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_circle l c a, on_circle l e a ? coll h j i"
I0123 20:34:20.767122 140508591796224 graph.py:498] 
I0123 20:34:20.767181 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_circle l c a, on_circle l e a ? coll h j i
I0123 20:34:22.525818 140508591796224 ddar.py:60] Depth 1/1000 time = 1.6995460987091064
I0123 20:34:26.558181 140508591796224 ddar.py:60] Depth 2/1000 time = 4.03220534324646
I0123 20:34:31.027866 140508591796224 ddar.py:60] Depth 3/1000 time = 4.46949577331543
I0123 20:34:37.071464 140508591796224 ddar.py:60] Depth 4/1000 time = 6.043398141860962
I0123 20:34:41.842848 140508591796224 ddar.py:60] Depth 5/1000 time = 4.771099328994751
I0123 20:34:47.236590 140508591796224 ddar.py:60] Depth 6/1000 time = 5.342155456542969
I0123 20:34:53.747733 140508591796224 ddar.py:60] Depth 7/1000 time = 6.510926008224487
I0123 20:34:59.145307 140508591796224 ddar.py:60] Depth 8/1000 time = 5.3675854206085205
I0123 20:34:59.148204 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:34:59.148275 140508591796224 alphageometry.py:566] LM output (score=-2.608945): "l : D b l e l 13 D b l h l 14 ;"
I0123 20:34:59.148313 140508591796224 alphageometry.py:567] Translation: "l = on_bline l e b, on_bline l h b"

I0123 20:34:59.148366 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_bline l e b, on_bline l h b ? coll h j i"
I0123 20:34:59.148521 140508591796224 graph.py:498] 
I0123 20:34:59.148577 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_bline l e b, on_bline l h b ? coll h j i
I0123 20:35:00.954864 140508591796224 ddar.py:60] Depth 1/1000 time = 1.7566397190093994
I0123 20:35:06.478726 140508591796224 ddar.py:60] Depth 2/1000 time = 5.523646831512451
I0123 20:35:10.490852 140508591796224 ddar.py:60] Depth 3/1000 time = 4.011855602264404
I0123 20:35:14.564446 140508591796224 ddar.py:60] Depth 4/1000 time = 4.0733802318573
I0123 20:35:20.055888 140508591796224 ddar.py:60] Depth 5/1000 time = 5.490148544311523
I0123 20:35:24.324014 140508591796224 ddar.py:60] Depth 6/1000 time = 4.267932891845703
I0123 20:35:29.537165 140508591796224 ddar.py:60] Depth 7/1000 time = 5.160189151763916
I0123 20:35:36.060062 140508591796224 ddar.py:60] Depth 8/1000 time = 6.522594451904297
I0123 20:35:41.240203 140508591796224 ddar.py:60] Depth 9/1000 time = 5.179946660995483
I0123 20:35:41.257722 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:35:41.257780 140508591796224 alphageometry.py:566] LM output (score=-2.611698): "l : C c e l 13 D c l e l 14 ;"
I0123 20:35:41.257814 140508591796224 alphageometry.py:567] Translation: "l = on_line l c e, on_bline l e c"

I0123 20:35:41.257850 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_line l c e, on_bline l e c ? coll h j i"
I0123 20:35:41.258012 140508591796224 graph.py:498] 
I0123 20:35:41.258069 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_line l c e, on_bline l e c ? coll h j i
I0123 20:35:42.988517 140508591796224 ddar.py:60] Depth 1/1000 time = 1.6647861003875732
I0123 20:35:46.998710 140508591796224 ddar.py:60] Depth 2/1000 time = 4.010026454925537
I0123 20:35:52.204133 140508591796224 ddar.py:60] Depth 3/1000 time = 5.205223560333252
I0123 20:35:56.235774 140508591796224 ddar.py:60] Depth 4/1000 time = 4.03137731552124
I0123 20:36:01.680464 140508591796224 ddar.py:60] Depth 5/1000 time = 5.444410085678101
I0123 20:36:05.766213 140508591796224 ddar.py:60] Depth 6/1000 time = 4.085291385650635
I0123 20:36:11.217560 140508591796224 ddar.py:60] Depth 7/1000 time = 5.4132304191589355
I0123 20:36:11.218740 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:36:11.218802 140508591796224 alphageometry.py:566] LM output (score=-2.613365): "l : D a h a l 13 D c h c l 14 ;"
I0123 20:36:11.218837 140508591796224 alphageometry.py:567] Translation: "l = on_circle l a h, on_circle l c h"

I0123 20:36:11.218876 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_circle l a h, on_circle l c h ? coll h j i"
I0123 20:36:11.219027 140508591796224 graph.py:498] 
I0123 20:36:11.219080 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_circle l a h, on_circle l c h ? coll h j i
I0123 20:36:12.967673 140508591796224 ddar.py:60] Depth 1/1000 time = 1.6944777965545654
I0123 20:36:16.552955 140508591796224 ddar.py:60] Depth 2/1000 time = 3.5851314067840576
I0123 20:36:20.533009 140508591796224 ddar.py:60] Depth 3/1000 time = 3.9798130989074707
I0123 20:36:26.038998 140508591796224 ddar.py:60] Depth 4/1000 time = 5.505661487579346
I0123 20:36:30.632188 140508591796224 ddar.py:60] Depth 5/1000 time = 4.560981035232544
I0123 20:36:35.085415 140508591796224 ddar.py:60] Depth 6/1000 time = 4.453038215637207
I0123 20:36:39.631233 140508591796224 ddar.py:60] Depth 7/1000 time = 4.531304359436035
I0123 20:36:39.632411 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:36:39.632486 140508591796224 alphageometry.py:566] LM output (score=-2.616615): "l : D a c c l 13 D a d d l 14 ;"
I0123 20:36:39.632521 140508591796224 alphageometry.py:567] Translation: "l = on_circle l c a, on_circle l d a"

I0123 20:36:39.632557 140508591796224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_circle l c a, on_circle l d a ? coll h j i"
I0123 20:36:39.632709 140508591796224 graph.py:498] 
I0123 20:36:39.632762 140508591796224 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b; f = on_circle f d c; g = on_circle g d e; h = on_line h b g, on_line h e f; i = on_line i f a, on_line i c g; j = on_line j c e, on_line j b a; k = on_circle k a c, on_circle k b c; l = on_circle l c a, on_circle l d a ? coll h j i
I0123 20:36:44.294779 140508591796224 ddar.py:60] Depth 1/1000 time = 4.572290897369385
I0123 20:36:53.501167 140508591796224 ddar.py:60] Depth 2/1000 time = 9.206141948699951
I0123 20:37:05.345905 140508591796224 ddar.py:60] Depth 3/1000 time = 11.844420433044434
I0123 20:37:16.257611 140508591796224 ddar.py:60] Depth 4/1000 time = 10.911461114883423
I0123 20:37:27.443821 140508591796224 ddar.py:60] Depth 5/1000 time = 11.185867071151733
I0123 20:37:27.535733 140508591796224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 20:37:27.535790 140508591796224 alphageometry.py:585] Timeout.
