I0123 13:31:27.260717 139700910706688 inference_utils.py:69] Parsing gin configuration.
I0123 13:31:27.260931 139700910706688 inference_utils.py:71] Added Gin search path meliad_lib/meliad/transformer/configs
I0123 13:31:27.261353 139700910706688 inference_utils.py:74] Loading Gin config file base_htrans.gin
I0123 13:31:27.261398 139700910706688 inference_utils.py:74] Loading Gin config file size/medium_150M.gin
I0123 13:31:27.261430 139700910706688 inference_utils.py:74] Loading Gin config file options/positions_t5.gin
I0123 13:31:27.261459 139700910706688 inference_utils.py:74] Loading Gin config file options/lr_cosine_decay.gin
I0123 13:31:27.261487 139700910706688 inference_utils.py:74] Loading Gin config file options/seq_1024_nocache.gin
I0123 13:31:27.261515 139700910706688 inference_utils.py:74] Loading Gin config file geometry_150M_generate.gin
I0123 13:31:27.261542 139700910706688 inference_utils.py:76] Overriding Gin param DecoderOnlyLanguageModelGenerate.output_token_losses=True
I0123 13:31:27.261569 139700910706688 inference_utils.py:76] Overriding Gin param TransformerTaskConfig.batch_size=32
I0123 13:31:27.261597 139700910706688 inference_utils.py:76] Overriding Gin param TransformerTaskConfig.sequence_length=128
I0123 13:31:27.261623 139700910706688 inference_utils.py:76] Overriding Gin param Trainer.restore_state_variables=False
I0123 13:31:27.261718 139700910706688 resource_reader.py:50] system_path_file_exists:base_htrans.gin
E0123 13:31:27.261957 139700910706688 resource_reader.py:55] Path not found: base_htrans.gin
I0123 13:31:27.262340 139700910706688 resource_reader.py:50] system_path_file_exists:trainer_configuration.gin
E0123 13:31:27.262472 139700910706688 resource_reader.py:55] Path not found: trainer_configuration.gin
I0123 13:31:27.269596 139700910706688 resource_reader.py:50] system_path_file_exists:size/medium_150M.gin
E0123 13:31:27.269749 139700910706688 resource_reader.py:55] Path not found: size/medium_150M.gin
I0123 13:31:27.270083 139700910706688 resource_reader.py:50] system_path_file_exists:options/positions_t5.gin
E0123 13:31:27.270190 139700910706688 resource_reader.py:55] Path not found: options/positions_t5.gin
I0123 13:31:27.270477 139700910706688 resource_reader.py:50] system_path_file_exists:options/lr_cosine_decay.gin
E0123 13:31:27.270580 139700910706688 resource_reader.py:55] Path not found: options/lr_cosine_decay.gin
I0123 13:31:27.270997 139700910706688 resource_reader.py:50] system_path_file_exists:options/seq_1024_nocache.gin
E0123 13:31:27.271099 139700910706688 resource_reader.py:55] Path not found: options/seq_1024_nocache.gin
I0123 13:31:27.275427 139700910706688 training_loop.py:334] ==== Training loop: initializing model ====
I0123 13:31:27.376879 139700910706688 xla_bridge.py:660] Unable to initialize backend 'rocm': NOT_FOUND: Could not find registered platform with name: "rocm". Available platform names are: CUDA
I0123 13:31:27.377921 139700910706688 xla_bridge.py:660] Unable to initialize backend 'tpu': INTERNAL: Failed to open libtpu.so: libtpu.so: cannot open shared object file: No such file or directory
I0123 13:31:27.384688 139700910706688 training_loop.py:335] Process 0 of 1
I0123 13:31:27.384747 139700910706688 training_loop.py:336] Local device count = 1
I0123 13:31:27.384788 139700910706688 training_loop.py:337] Number of replicas = 1
I0123 13:31:27.384819 139700910706688 training_loop.py:339] Using random number seed 42
I0123 13:31:27.898418 139700910706688 training_loop.py:359] Initializing the model.
I0123 13:31:28.331629 139700910706688 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.331920 139700910706688 decoder_stack.py:316] dstack: scanning over 1 windows.
I0123 13:31:28.332031 139700910706688 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 13:31:28.332115 139700910706688 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 13:31:28.332195 139700910706688 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 13:31:28.332281 139700910706688 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 13:31:28.332357 139700910706688 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 13:31:28.332431 139700910706688 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 13:31:28.332504 139700910706688 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 13:31:28.332577 139700910706688 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 13:31:28.332649 139700910706688 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 13:31:28.332722 139700910706688 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 13:31:28.332794 139700910706688 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 13:31:28.332866 139700910706688 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 13:31:28.332910 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:28.332959 139700910706688 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 13:31:28.333080 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:28.333122 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:28.333153 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:28.335363 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.340957 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:28.351920 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.352237 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:28.356713 139700910706688 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:31:28.367883 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:28.367943 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:28.367981 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:28.368014 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.368082 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.369334 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.369415 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.370159 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.372700 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.378587 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.380394 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.380478 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:28.380513 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:28.380576 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.380708 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:28.381069 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:28.381118 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:28.383128 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.383234 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:28.386209 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.386292 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:28.386812 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:28.397750 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:28.406805 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.406906 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:28.407211 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.407296 139700910706688 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 13:31:28.407410 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:28.407451 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:28.407483 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:28.409439 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.411959 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:28.417721 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.417991 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:28.420671 139700910706688 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:31:28.424618 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:28.424676 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:28.424716 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:28.424748 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.424811 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.425388 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.425466 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.425847 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.426649 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.429158 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.429804 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.429884 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:28.429919 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:28.429979 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.430115 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:28.430450 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:28.430494 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:28.432485 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.432586 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:28.435169 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.435255 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:28.435694 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:28.438085 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:28.440048 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.440145 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:28.440443 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.440526 139700910706688 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 13:31:28.440638 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:28.440677 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:28.440707 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:28.442691 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.445134 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:28.451274 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.451547 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:28.454286 139700910706688 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:31:28.458271 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:28.458327 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:28.458362 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:28.458394 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.458458 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.459034 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.459111 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.459480 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.460261 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.462815 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.463502 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.463582 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:28.463618 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:28.463678 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.463815 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:28.464144 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:28.464187 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:28.466173 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.466271 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:28.468818 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.468908 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:28.469398 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:28.471755 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:28.473731 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.473830 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:28.474125 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.474208 139700910706688 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 13:31:28.474319 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:28.474359 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:28.474388 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:28.476345 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.478807 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:28.484575 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.484853 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:28.487586 139700910706688 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:31:28.491545 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:28.491602 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:28.491637 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:28.491668 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.491731 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.492310 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.492392 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.492760 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.493553 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.496275 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.496912 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.496991 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:28.497038 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:28.497102 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.497233 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:28.497569 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:28.497612 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:28.499586 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.499681 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:28.502321 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.502407 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:28.502855 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:28.505199 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:28.507194 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.507293 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:28.507595 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.507678 139700910706688 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 13:31:28.507790 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:28.507838 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:28.507868 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:28.509851 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.512303 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:28.518199 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.518480 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:28.521259 139700910706688 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:31:28.525199 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:28.525256 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:28.525293 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:28.525324 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.525391 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.525984 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.526064 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.526435 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.527227 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.530202 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.530842 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.530921 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:28.530957 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:28.531018 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.531152 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:28.531492 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:28.531536 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:28.533488 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.533584 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:28.536215 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.536302 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:28.536756 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:28.539129 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:28.541150 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.541249 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:28.541553 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.541636 139700910706688 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 13:31:28.541760 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:28.541800 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:28.541831 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:28.543703 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.546076 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:28.551737 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.551997 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:28.554682 139700910706688 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:31:28.558459 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:28.558514 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:28.558548 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:28.558578 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.558639 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.559244 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.559319 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.559678 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.560465 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.563032 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.563670 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.563748 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:28.563781 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:28.563840 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.563966 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:28.564283 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:28.564325 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:28.566261 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.566361 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:28.568907 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.568986 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:28.569417 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:28.571714 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:28.573629 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.573732 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:28.574021 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.574101 139700910706688 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 13:31:28.574210 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:28.574249 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:28.574278 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:28.576073 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.578518 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:28.584113 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.584375 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:28.586996 139700910706688 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:31:28.590799 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:28.590854 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:28.590887 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:28.590916 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.590975 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.591535 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.591611 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.591961 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.592730 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.595386 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.596014 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.596092 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:28.596126 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:28.596184 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.596309 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:28.596624 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:28.596667 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:28.598615 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.598710 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:28.601190 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.601272 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:28.601701 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:28.604347 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:28.606272 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.606376 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:28.606667 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.606747 139700910706688 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 13:31:28.606858 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:28.606897 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:28.606927 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:28.816322 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.819668 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:28.825564 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.825890 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:28.828604 139700910706688 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:31:28.832602 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:28.832661 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:28.832698 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:28.832729 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.832797 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.833429 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.833505 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.833875 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.834670 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.837251 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.837902 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.837981 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:28.838015 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:28.838079 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.838209 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:28.838555 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:28.838598 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:28.840495 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.840595 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:28.843159 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.843239 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:28.843679 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:28.846037 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:28.847957 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.848066 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:28.848360 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.848444 139700910706688 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 13:31:28.848555 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:28.848593 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:28.848623 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:28.850623 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.852999 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:28.858650 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.858911 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:28.861648 139700910706688 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:31:28.865571 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:28.865626 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:28.865671 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:28.865703 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.865765 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.866352 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.866432 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.866803 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.867612 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.870188 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.870835 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.870919 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:28.870954 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:28.871014 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.871146 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:28.871494 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:28.871545 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:28.873450 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.873544 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:28.876176 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.876255 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:28.876688 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:28.879060 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:28.881083 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.881178 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:28.881465 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.881553 139700910706688 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 13:31:28.881671 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:28.881712 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:28.881743 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:28.883671 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.886100 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:28.891816 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.892078 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:28.895144 139700910706688 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:31:28.899014 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:28.899072 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:28.899108 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:28.899139 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.899203 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.899843 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.899918 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.900270 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.901041 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.903583 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.904369 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.904447 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:28.904481 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:28.904540 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.904669 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:28.905184 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:28.905227 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:28.907186 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.907286 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:28.910239 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.910322 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:28.910762 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:28.913131 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:28.915101 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.915203 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:28.915518 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.915618 139700910706688 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 13:31:28.915731 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:28.915771 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:28.915801 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:28.917651 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.920143 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:28.925831 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.926117 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:28.928807 139700910706688 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:31:28.932845 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:28.932904 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:28.932942 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:28.932973 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.933038 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.933657 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.933733 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.934101 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.934921 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.937492 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.938181 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.938266 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:28.938302 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:28.938370 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.938502 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:28.938860 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:28.938905 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:28.940925 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.941023 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:28.944151 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.944232 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:28.944688 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:28.947173 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:28.949131 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.949230 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:28.949524 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.949612 139700910706688 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 13:31:28.949746 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:28.949788 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:28.949820 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:28.951915 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.954359 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:28.960133 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.960410 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:28.963134 139700910706688 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:31:28.967220 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:28.967281 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:28.967319 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:28.967352 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.967415 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.968080 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.968158 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.968516 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.969304 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.971815 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.973016 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.973094 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:28.973129 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:28.973190 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.973338 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:28.973683 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:28.973728 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:28.975638 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.975732 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:28.978243 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.978327 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:28.978824 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:28.981128 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:28.983064 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.983165 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:28.983464 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:28.983768 139700910706688 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 13:31:28.983839 139700910706688 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 13:31:28.983923 139700910706688 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 13:31:28.983981 139700910706688 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 13:31:28.984035 139700910706688 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 13:31:28.984088 139700910706688 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 13:31:28.984141 139700910706688 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 13:31:28.984193 139700910706688 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 13:31:28.984246 139700910706688 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 13:31:28.984297 139700910706688 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 13:31:28.984349 139700910706688 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 13:31:28.984400 139700910706688 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 13:31:28.984438 139700910706688 decoder_stack.py:344] dstack: Final layernorm.
I0123 13:31:28.988038 139700910706688 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:31:29.036779 139700910706688 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.036899 139700910706688 decoder_stack.py:333] dstack: autoregressive generator.
I0123 13:31:29.036956 139700910706688 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 13:31:29.037061 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:29.037099 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:29.037128 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:29.037196 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.039643 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:29.045115 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.045374 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:29.048036 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:31:29.066237 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:29.066380 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:29.066421 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:29.066456 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.066549 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.067801 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.067880 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.068591 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.070660 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.075487 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.076802 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.076891 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:29.076927 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:29.076995 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.077125 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:29.077241 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:29.077280 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.079304 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.079403 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.081873 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.081955 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:29.082067 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:29.084319 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.086275 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.086372 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.086655 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.086743 139700910706688 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 13:31:29.086851 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:29.086889 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:29.086919 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:29.086987 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.089185 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:29.094613 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.094869 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:29.097545 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:31:29.110897 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:29.110953 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:29.110988 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:29.111018 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.111079 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.111635 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.111711 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.112069 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.112750 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.115201 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.115814 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.115891 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:29.115931 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:29.115991 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.116122 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:29.116231 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:29.116270 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.118186 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.118282 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.120675 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.120754 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:29.121053 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:29.123296 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.125198 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.125294 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.125577 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.125667 139700910706688 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 13:31:29.125779 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:29.125818 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:29.125848 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:29.125911 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.128140 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:29.133571 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.133838 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:29.136497 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:31:29.149320 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:29.149376 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:29.149411 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:29.149441 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.149502 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.150068 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.150144 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.150502 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.151189 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.153621 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.154250 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.154325 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:29.154359 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:29.154422 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.154549 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:29.154658 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:29.154696 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.156598 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.156694 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.159086 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.159165 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:29.159274 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:29.161469 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.163389 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.163487 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.163771 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.163853 139700910706688 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 13:31:29.163961 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:29.164000 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:29.164030 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:29.164093 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.166323 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:29.171750 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.172009 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:29.174660 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:31:29.187371 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:29.187429 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:29.187464 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:29.187495 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.187556 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.188116 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.188192 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.188543 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.189235 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.191689 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.192310 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.192386 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:29.192419 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:29.192481 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.192616 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:29.192724 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:29.192762 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.194699 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.194796 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.197196 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.197275 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:29.197384 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:29.199609 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.201465 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.201561 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.201855 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.201938 139700910706688 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 13:31:29.202048 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:29.202087 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:29.202120 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:29.202185 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.204739 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:29.210196 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.210462 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:29.213063 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:31:29.225920 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:29.225975 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:29.226010 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:29.226040 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.226100 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.226660 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.226736 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.227095 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.227842 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.230371 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.230996 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.231075 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:29.231109 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:29.231167 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.231300 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:29.231415 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:29.231454 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.233309 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.233403 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.235792 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.235871 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:29.235978 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:29.238274 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.240127 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.240221 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.240502 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.240583 139700910706688 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 13:31:29.240691 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:29.240730 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:29.240760 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:29.240822 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.243057 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:29.248594 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.248849 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:29.251500 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:31:29.264163 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:29.264218 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:29.264252 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:29.264283 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.264344 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.264904 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.264979 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.265328 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.266018 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.268464 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.269081 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.269158 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:29.269191 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:29.269248 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.269377 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:29.269492 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:29.269531 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.271474 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.271569 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.273954 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.274034 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:29.274141 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:29.276362 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.278208 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.278305 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.278587 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.278667 139700910706688 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 13:31:29.278777 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:29.278815 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:29.278844 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:29.278904 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.281097 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:29.286711 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.286970 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:29.289531 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:31:29.302253 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:29.302309 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:29.302343 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:29.302373 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.302435 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.302991 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.303069 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.303418 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.304106 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.306560 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.307536 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.307613 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:29.307647 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:29.307705 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.307838 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:29.307950 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:29.307993 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.309869 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.309963 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.312326 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.312408 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:29.312516 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:29.314732 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.316637 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.316731 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.317009 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.317090 139700910706688 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 13:31:29.317198 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:29.317236 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:29.317265 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:29.317325 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.319531 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:29.324948 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.325213 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:29.327870 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:31:29.340463 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:29.340519 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:29.340554 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:29.340584 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.340645 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.341246 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.341322 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.341677 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.342356 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.344960 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.345581 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.345664 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:29.345698 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:29.345756 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.345884 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:29.346115 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:29.346158 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.348019 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.348113 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.350569 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.350649 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:29.350755 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:29.352955 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.354802 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.354900 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.355183 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.355264 139700910706688 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 13:31:29.355372 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:29.355411 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:29.355440 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:29.355502 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.357730 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:29.363165 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.363426 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:29.366011 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:31:29.378595 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:29.378651 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:29.378685 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:29.378714 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.378775 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.379329 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.379404 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.379754 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.380445 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.382891 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.383553 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.383630 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:29.383666 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:29.383724 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.383855 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:29.383964 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:29.384002 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.385858 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.385951 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.388330 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.388409 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:29.388517 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:29.390733 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.392648 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.392743 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.393025 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.393106 139700910706688 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 13:31:29.393213 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:29.393252 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:29.393281 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:29.393344 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.395566 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:29.400942 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.401202 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:29.403851 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:31:29.416759 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:29.416815 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:29.416850 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:29.416881 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.416943 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.417546 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.417623 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.417993 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.418677 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.421101 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.421723 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.421799 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:29.421833 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:29.421891 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.422021 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:29.422131 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:29.422170 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.424041 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.424142 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.426579 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.426659 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:29.426768 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:29.428971 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.430837 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.430933 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.431215 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.431296 139700910706688 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 13:31:29.431405 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:29.431444 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:29.431476 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:29.431539 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.433745 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:29.439223 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.439483 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:29.442113 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:31:29.454699 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:29.454755 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:29.454790 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:29.454820 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.454880 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.455428 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.455505 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.455856 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.456537 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.458972 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.459631 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.459708 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:29.459742 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:29.459798 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.459923 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:29.460028 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:29.460066 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.461956 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.462056 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.464429 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.464507 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:29.464614 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:29.466817 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.468724 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.468821 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.469101 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.469182 139700910706688 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 13:31:29.469289 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:29.469328 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:29.469358 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:29.469419 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.471633 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:29.476979 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.477233 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:29.479879 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:31:29.492366 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:29.492422 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:29.492456 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:29.492486 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.492547 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.493104 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.493179 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.493534 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.494260 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.496670 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.497289 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.497365 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:29.497399 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:29.497456 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.497584 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:29.497702 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:29.497743 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.499585 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.499679 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.502215 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.502294 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:29.502402 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:29.504647 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.506484 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.506580 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.506859 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.506947 139700910706688 decoder_stack.py:344] dstack: Final layernorm.
I0123 13:31:29.509771 139700910706688 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:31:29.564692 139700910706688 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.564778 139700910706688 decoder_stack.py:333] dstack: autoregressive generator.
I0123 13:31:29.564831 139700910706688 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 13:31:29.564932 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:29.564969 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:29.564998 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:29.565060 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.567668 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:29.572975 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.573232 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:29.575727 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:31:29.587920 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:29.587975 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:29.588010 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:29.588038 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.588099 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.588641 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.588717 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.589061 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.589731 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.592166 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.592771 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.592848 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:29.592883 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:29.592942 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.593069 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:29.593184 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:29.593223 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.595043 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.595137 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.597469 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.597548 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:29.597665 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:29.599878 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.601711 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.602001 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.602289 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.602372 139700910706688 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 13:31:29.602481 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:29.602519 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:29.602550 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:29.602612 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.604828 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:29.610339 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.610603 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:29.613205 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:31:29.625595 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:29.625657 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:29.625693 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:29.625723 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.625784 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.626331 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.626406 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.626753 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.627420 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.629889 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.630501 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.630578 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:29.630612 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:29.630671 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.630798 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:29.630908 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:29.630953 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.632781 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.632875 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.635246 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.635325 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:29.635435 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:29.637678 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.639504 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.639599 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.639880 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.639960 139700910706688 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 13:31:29.640067 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:29.640105 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:29.640134 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:29.640195 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.642391 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:29.647717 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.647977 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:29.650593 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:31:29.662828 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:29.662885 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:29.662919 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:29.662949 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.663009 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.663557 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.663632 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.663976 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.664643 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.667094 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.667700 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.667777 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:29.667810 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:29.667868 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.667994 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:29.668102 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:29.668139 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.669959 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.670053 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.672402 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.672481 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:29.672589 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:29.675263 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.677091 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.677186 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.677471 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.677552 139700910706688 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 13:31:29.677666 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:29.677706 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:29.677736 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:29.677799 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.679980 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:29.685264 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.685521 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:29.688133 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:31:29.700479 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:29.700534 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:29.700571 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:29.700616 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.700680 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.701235 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.701310 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.701671 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.702350 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.704804 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.705415 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.705490 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:29.705523 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:29.705582 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.705718 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:29.705828 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:29.705868 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.707722 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.707814 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.710164 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.710242 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:29.710347 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:29.712615 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.714449 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.714545 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.714825 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.714905 139700910706688 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 13:31:29.715011 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:29.715048 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:29.715076 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:29.715138 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.717314 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:29.722820 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.723078 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:29.725720 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:31:29.738294 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:29.738348 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:29.738381 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:29.738410 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.738472 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.739024 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.739100 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.739448 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.740123 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.742607 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.743218 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.743292 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:29.743324 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:29.743381 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.743506 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:29.743613 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:29.743650 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.745498 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.745595 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.747965 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.748042 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:29.748152 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:29.750414 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.752240 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.752333 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.752611 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.752690 139700910706688 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 13:31:29.752797 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:29.752834 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:29.752862 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:29.752924 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.755113 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:29.760454 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.760710 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:29.763358 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:31:29.775944 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:29.775998 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:29.776031 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:29.776059 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.776122 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.776674 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.776747 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.777096 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.777790 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.780283 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.780900 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.780975 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:29.781007 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:29.781064 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.781187 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:29.781294 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:29.781331 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.783192 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.783291 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.785647 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.785725 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:29.785832 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:29.788488 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.790351 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.790446 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.790728 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.790807 139700910706688 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 13:31:29.790914 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:29.790951 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:29.790980 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:29.791041 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.793247 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:29.798624 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.798878 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:29.801542 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:31:29.814018 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:29.814070 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:29.814103 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:29.814131 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.814190 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.814745 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.814818 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.815169 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.815840 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.818316 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.818937 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.819012 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:29.819045 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:29.819102 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.819226 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:29.819331 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:29.819367 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.821219 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.821312 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.823656 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.823739 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:29.823846 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:29.826113 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.828133 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.828227 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.828506 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.828587 139700910706688 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 13:31:29.828692 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:29.828729 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:29.828758 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:29.828819 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.831016 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:29.836552 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.836808 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:29.839442 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:31:29.851953 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:29.852007 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:29.852041 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:29.852071 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.852130 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.852685 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.852759 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.853103 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.853797 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.856280 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.856900 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.856975 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:29.857008 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:29.857066 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.857190 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:29.857295 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:29.857331 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.859171 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.859264 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.861706 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.861793 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:29.861904 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:29.864204 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.866053 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.866152 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.866441 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.866526 139700910706688 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 13:31:29.866635 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:29.866673 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:29.866703 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:29.866765 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.869028 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:29.874513 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.874779 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:29.877422 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:31:29.890166 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:29.890222 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:29.890256 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:29.890287 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.890350 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.890921 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.890999 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.891368 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.892045 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.894575 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.895208 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.895286 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:29.895320 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:29.895377 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.895519 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:29.895639 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:29.895675 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.897517 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.897608 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.900037 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.900122 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:29.900231 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:29.902926 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.904817 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.904912 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.905192 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.905271 139700910706688 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 13:31:29.905377 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:29.905414 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:29.905443 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:29.905504 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.907768 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:29.913206 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.913463 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:29.916183 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:31:29.928920 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:29.928975 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:29.929007 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:29.929036 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.929095 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.929663 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.929739 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.930093 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.930800 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.933477 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.934112 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.934192 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:29.934226 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:29.934285 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.934420 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:29.934532 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:29.934569 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.936872 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.936965 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.939403 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.939494 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:29.939626 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:29.941842 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.943748 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.943840 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.944116 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.944195 139700910706688 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 13:31:29.944301 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:29.944337 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:29.944366 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:29.944426 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.946625 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:29.952104 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.952360 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:29.955051 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:31:29.967727 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:29.967781 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:29.967814 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:29.967843 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.967904 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.968454 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.968527 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.968875 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.969544 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.972017 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.972629 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.972706 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:29.972739 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:29.972795 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.972918 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:29.973023 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:29.973060 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.974919 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.975012 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.977360 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.977437 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:29.977542 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:29.979789 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:29.981604 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.981709 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:29.981987 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.982066 139700910706688 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 13:31:29.982172 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:31:29.982208 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:31:29.982236 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:31:29.982296 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.984481 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:31:29.998306 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:29.998707 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:31:30.001914 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:31:30.014765 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:31:30.014821 139700910706688 attention.py:418] Single window, no scan.
I0123 13:31:30.014856 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:31:30.014885 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:30.014948 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:30.015595 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:30.015690 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:30.016056 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:30.016759 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:30.019290 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:30.019920 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:30.019996 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:31:30.020029 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:31:30.020086 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:30.020214 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:31:30.020326 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:31:30.020362 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:30.022354 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:30.022448 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:30.024851 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:30.024927 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:31:30.025036 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:31:30.027734 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:31:30.029598 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:30.029700 139700910706688 nn_components.py:261] mlp: residual
I0123 13:31:30.029977 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:30.030086 139700910706688 decoder_stack.py:344] dstack: Final layernorm.
I0123 13:31:30.032927 139700910706688 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:31:34.606865 139700910706688 optimizer_config.py:74] Using Flax Adafactor Optimizer. lr=1.000000, b1=0.900000
I0123 13:31:35.161979 139700910706688 training_loop.py:409] No working directory specified.
I0123 13:31:35.162117 139700910706688 training_loop.py:431] Loading pre-trained model from ag_ckpt_vocab:
I0123 13:31:35.162914 139700910706688 checkpoints.py:1062] Restoring legacy Flax checkpoint from ag_ckpt_vocab/checkpoint_10999999
I0123 13:31:38.182286 139700910706688 training_loop.py:447] Only restoring trainable parameters.
I0123 13:31:38.183027 139700910706688 training_loop.py:724] parameter: decoder/embed/embedding, shape (1024, 1024), size 1048576
I0123 13:31:38.183085 139700910706688 training_loop.py:724] parameter: decoder/final_layernorm/scale, shape (1024,), size 1024
I0123 13:31:38.183131 139700910706688 training_loop.py:724] parameter: decoder/transformer0/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 13:31:38.183174 139700910706688 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 13:31:38.183216 139700910706688 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.183255 139700910706688 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 13:31:38.183293 139700910706688 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.183332 139700910706688 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.183370 139700910706688 training_loop.py:724] parameter: decoder/transformer0/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 13:31:38.183408 139700910706688 training_loop.py:724] parameter: decoder/transformer0/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 13:31:38.183445 139700910706688 training_loop.py:724] parameter: decoder/transformer0/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.183483 139700910706688 training_loop.py:724] parameter: decoder/transformer0/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 13:31:38.183521 139700910706688 training_loop.py:724] parameter: decoder/transformer1/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 13:31:38.183560 139700910706688 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 13:31:38.183597 139700910706688 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.183634 139700910706688 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 13:31:38.183671 139700910706688 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.183708 139700910706688 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.183746 139700910706688 training_loop.py:724] parameter: decoder/transformer1/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 13:31:38.183783 139700910706688 training_loop.py:724] parameter: decoder/transformer1/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 13:31:38.183833 139700910706688 training_loop.py:724] parameter: decoder/transformer1/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.183871 139700910706688 training_loop.py:724] parameter: decoder/transformer1/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 13:31:38.183909 139700910706688 training_loop.py:724] parameter: decoder/transformer10/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 13:31:38.183945 139700910706688 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 13:31:38.183981 139700910706688 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.184017 139700910706688 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 13:31:38.184052 139700910706688 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.184088 139700910706688 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.184124 139700910706688 training_loop.py:724] parameter: decoder/transformer10/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 13:31:38.184159 139700910706688 training_loop.py:724] parameter: decoder/transformer10/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 13:31:38.184194 139700910706688 training_loop.py:724] parameter: decoder/transformer10/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.184231 139700910706688 training_loop.py:724] parameter: decoder/transformer10/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 13:31:38.184269 139700910706688 training_loop.py:724] parameter: decoder/transformer11/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 13:31:38.184306 139700910706688 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 13:31:38.184342 139700910706688 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.184378 139700910706688 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 13:31:38.184415 139700910706688 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.184451 139700910706688 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.184485 139700910706688 training_loop.py:724] parameter: decoder/transformer11/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 13:31:38.184520 139700910706688 training_loop.py:724] parameter: decoder/transformer11/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 13:31:38.184556 139700910706688 training_loop.py:724] parameter: decoder/transformer11/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.184592 139700910706688 training_loop.py:724] parameter: decoder/transformer11/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 13:31:38.184627 139700910706688 training_loop.py:724] parameter: decoder/transformer2/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 13:31:38.184662 139700910706688 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 13:31:38.184697 139700910706688 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.184732 139700910706688 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 13:31:38.184773 139700910706688 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.184810 139700910706688 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.184846 139700910706688 training_loop.py:724] parameter: decoder/transformer2/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 13:31:38.184881 139700910706688 training_loop.py:724] parameter: decoder/transformer2/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 13:31:38.184916 139700910706688 training_loop.py:724] parameter: decoder/transformer2/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.184952 139700910706688 training_loop.py:724] parameter: decoder/transformer2/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 13:31:38.184988 139700910706688 training_loop.py:724] parameter: decoder/transformer3/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 13:31:38.185023 139700910706688 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 13:31:38.185059 139700910706688 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.185094 139700910706688 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 13:31:38.185129 139700910706688 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.185165 139700910706688 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.185200 139700910706688 training_loop.py:724] parameter: decoder/transformer3/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 13:31:38.185235 139700910706688 training_loop.py:724] parameter: decoder/transformer3/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 13:31:38.185269 139700910706688 training_loop.py:724] parameter: decoder/transformer3/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.185304 139700910706688 training_loop.py:724] parameter: decoder/transformer3/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 13:31:38.185340 139700910706688 training_loop.py:724] parameter: decoder/transformer4/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 13:31:38.185376 139700910706688 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 13:31:38.185412 139700910706688 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.185447 139700910706688 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 13:31:38.185482 139700910706688 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.185518 139700910706688 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.185554 139700910706688 training_loop.py:724] parameter: decoder/transformer4/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 13:31:38.185590 139700910706688 training_loop.py:724] parameter: decoder/transformer4/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 13:31:38.185626 139700910706688 training_loop.py:724] parameter: decoder/transformer4/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.185680 139700910706688 training_loop.py:724] parameter: decoder/transformer4/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 13:31:38.185717 139700910706688 training_loop.py:724] parameter: decoder/transformer5/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 13:31:38.185758 139700910706688 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 13:31:38.185795 139700910706688 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.185830 139700910706688 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 13:31:38.185865 139700910706688 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.185900 139700910706688 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.185935 139700910706688 training_loop.py:724] parameter: decoder/transformer5/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 13:31:38.185970 139700910706688 training_loop.py:724] parameter: decoder/transformer5/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 13:31:38.186006 139700910706688 training_loop.py:724] parameter: decoder/transformer5/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.186041 139700910706688 training_loop.py:724] parameter: decoder/transformer5/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 13:31:38.186076 139700910706688 training_loop.py:724] parameter: decoder/transformer6/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 13:31:38.186110 139700910706688 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 13:31:38.186145 139700910706688 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.186181 139700910706688 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 13:31:38.186216 139700910706688 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.186251 139700910706688 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.186286 139700910706688 training_loop.py:724] parameter: decoder/transformer6/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 13:31:38.186322 139700910706688 training_loop.py:724] parameter: decoder/transformer6/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 13:31:38.186358 139700910706688 training_loop.py:724] parameter: decoder/transformer6/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.186394 139700910706688 training_loop.py:724] parameter: decoder/transformer6/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 13:31:38.186429 139700910706688 training_loop.py:724] parameter: decoder/transformer7/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 13:31:38.186464 139700910706688 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 13:31:38.186499 139700910706688 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.186535 139700910706688 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 13:31:38.186570 139700910706688 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.186606 139700910706688 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.186640 139700910706688 training_loop.py:724] parameter: decoder/transformer7/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 13:31:38.186675 139700910706688 training_loop.py:724] parameter: decoder/transformer7/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 13:31:38.186715 139700910706688 training_loop.py:724] parameter: decoder/transformer7/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.186752 139700910706688 training_loop.py:724] parameter: decoder/transformer7/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 13:31:38.186787 139700910706688 training_loop.py:724] parameter: decoder/transformer8/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 13:31:38.186822 139700910706688 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 13:31:38.186857 139700910706688 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.186893 139700910706688 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 13:31:38.186929 139700910706688 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.186964 139700910706688 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.187000 139700910706688 training_loop.py:724] parameter: decoder/transformer8/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 13:31:38.187034 139700910706688 training_loop.py:724] parameter: decoder/transformer8/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 13:31:38.187069 139700910706688 training_loop.py:724] parameter: decoder/transformer8/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.187103 139700910706688 training_loop.py:724] parameter: decoder/transformer8/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 13:31:38.187138 139700910706688 training_loop.py:724] parameter: decoder/transformer9/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 13:31:38.187173 139700910706688 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 13:31:38.187208 139700910706688 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.187243 139700910706688 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 13:31:38.187278 139700910706688 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.187314 139700910706688 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.187350 139700910706688 training_loop.py:724] parameter: decoder/transformer9/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 13:31:38.187386 139700910706688 training_loop.py:724] parameter: decoder/transformer9/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 13:31:38.187421 139700910706688 training_loop.py:724] parameter: decoder/transformer9/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:31:38.187455 139700910706688 training_loop.py:724] parameter: decoder/transformer9/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 13:31:38.187483 139700910706688 training_loop.py:725] Total parameters: 152072288
I0123 13:31:38.187743 139700910706688 training_loop.py:739] Total state size: 0
I0123 13:31:38.209486 139700910706688 training_loop.py:492] Training loop: creating task for mode beam_search
I0123 13:31:38.209778 139700910706688 training_loop.py:685] Creating logging writer (train) for mode beam_search
I0123 13:31:38.210124 139700910706688 training_loop.py:652] Compiling mode beam_search with jit.
I0123 13:31:38.210464 139700910706688 training_loop.py:89] registering functions: dict_keys([])
I0123 13:31:38.227593 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h ? cong l h l j
I0123 13:31:40.142150 139700910706688 ddar.py:60] Depth 1/1000 time = 1.876077651977539
I0123 13:31:42.277575 139700910706688 ddar.py:60] Depth 2/1000 time = 2.135256290435791
I0123 13:31:45.067258 139700910706688 ddar.py:60] Depth 3/1000 time = 2.7895078659057617
I0123 13:31:48.083466 139700910706688 ddar.py:60] Depth 4/1000 time = 3.016000509262085
I0123 13:31:51.624349 139700910706688 ddar.py:60] Depth 5/1000 time = 3.5406203269958496
I0123 13:31:55.523410 139700910706688 ddar.py:60] Depth 6/1000 time = 3.8988497257232666
I0123 13:31:59.393003 139700910706688 ddar.py:60] Depth 7/1000 time = 3.869424343109131
I0123 13:32:03.484102 139700910706688 ddar.py:60] Depth 8/1000 time = 4.090907096862793
I0123 13:32:07.560127 139700910706688 ddar.py:60] Depth 9/1000 time = 4.075759410858154
I0123 13:32:11.632334 139700910706688 ddar.py:60] Depth 10/1000 time = 4.071501016616821
I0123 13:32:11.679593 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:32:11.679719 139700910706688 alphageometry.py:540] Depth 0. There are 1 nodes to expand:
I0123 13:32:11.679757 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00
I0123 13:32:11.679787 139700910706688 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00
I0123 13:32:11.828467 139700910706688 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.828642 139700910706688 decoder_stack.py:316] dstack: scanning over 1 windows.
I0123 13:32:11.828740 139700910706688 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 13:32:11.828814 139700910706688 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 13:32:11.828882 139700910706688 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 13:32:11.828947 139700910706688 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 13:32:11.829018 139700910706688 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 13:32:11.829085 139700910706688 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 13:32:11.829150 139700910706688 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 13:32:11.829215 139700910706688 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 13:32:11.829279 139700910706688 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 13:32:11.829344 139700910706688 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 13:32:11.829408 139700910706688 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 13:32:11.829471 139700910706688 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 13:32:11.829509 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:11.829551 139700910706688 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 13:32:11.829664 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:11.829711 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:11.829741 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:11.831572 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.833975 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:11.839601 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.839865 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:11.842406 139700910706688 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:32:11.846227 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:11.846280 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:11.846314 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:11.846345 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.846405 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.847002 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.847077 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.847433 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.848184 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.850607 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.851217 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.851290 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:11.851322 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:11.851378 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.851500 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:11.851812 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:11.851851 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:11.853801 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.853893 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:11.856283 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.856360 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:11.856774 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:11.859048 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:11.860964 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.861063 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:11.861360 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.861442 139700910706688 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 13:32:11.861550 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:11.861588 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:11.861624 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:11.863559 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.866199 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:11.871762 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.872014 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:11.874582 139700910706688 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:32:11.878231 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:11.878286 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:11.878320 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:11.878352 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.878415 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.878991 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.879069 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.879433 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.880192 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.882613 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.883301 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.883381 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:11.883414 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:11.883473 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.883606 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:11.883926 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:11.883966 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:11.885944 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.886035 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:11.888503 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.888579 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:11.888995 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:11.891775 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:11.893670 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.893764 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:11.894051 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.894134 139700910706688 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 13:32:11.894244 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:11.894283 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:11.894312 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:11.896147 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.898438 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:11.904187 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.904440 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:11.907003 139700910706688 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:32:11.910703 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:11.910760 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:11.910796 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:11.910826 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.910890 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.911513 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.911590 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.911941 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.912691 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.915157 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.915802 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.915877 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:11.915910 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:11.915965 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.916092 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:11.916405 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:11.916446 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:11.918421 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.918517 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:11.920973 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.921050 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:11.921469 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:11.923768 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:11.925658 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.925751 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:11.926033 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.926115 139700910706688 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 13:32:11.926222 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:11.926260 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:11.926290 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:11.928207 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.930546 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:11.936202 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.936456 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:11.939031 139700910706688 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:32:11.942769 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:11.942825 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:11.942859 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:11.942888 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.942951 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.943517 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.943594 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.943948 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.944690 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.947118 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.947751 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.947826 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:11.947859 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:11.947913 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.948038 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:11.948395 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:11.948436 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:11.950358 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.950454 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:11.952876 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.952953 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:11.953366 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:11.955606 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:11.957542 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.957635 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:11.957926 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.958004 139700910706688 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 13:32:11.958108 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:11.958145 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:11.958173 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:11.959918 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.962186 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:11.967926 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.968178 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:11.971010 139700910706688 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:32:11.974648 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:11.974701 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:11.974735 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:11.974763 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.974823 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.975432 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.975508 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.975861 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.976815 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.979227 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.979850 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.979925 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:11.979958 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:11.980014 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.980139 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:11.980445 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:11.980485 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:11.982434 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.982527 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:11.984952 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.985028 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:11.985446 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:11.987692 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:11.989584 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.989685 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:11.989972 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.990051 139700910706688 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 13:32:11.990157 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:11.990193 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:11.990221 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:11.992087 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:11.994364 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:11.999872 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.000288 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:12.002808 139700910706688 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:32:12.006835 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:12.006888 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:12.006921 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:12.006949 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.007008 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.007556 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.007631 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.007978 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.008722 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.011108 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.011716 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.011790 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:12.011823 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:12.011879 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.012035 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:12.012402 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:12.012443 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.014328 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.014420 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.016824 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.016902 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:12.017319 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:12.019544 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.021499 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.021593 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.021887 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.021968 139700910706688 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 13:32:12.022074 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:12.022110 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:12.022138 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:12.023905 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.026197 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:12.031792 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.032051 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:12.034584 139700910706688 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:32:12.038225 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:12.038278 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:12.038311 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:12.038339 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.038399 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.038996 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.039071 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.039418 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.040164 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.042559 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.043165 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.043241 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:12.043273 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:12.043330 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.043456 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:12.043770 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:12.043810 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.045749 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.045842 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.048253 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.048331 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:12.048753 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:12.051007 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.052879 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.052972 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.053261 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.053340 139700910706688 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 13:32:12.053445 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:12.053483 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:12.053511 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:12.055361 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.057612 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:12.063117 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.063371 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:12.065959 139700910706688 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:32:12.069592 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:12.069649 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:12.069684 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:12.069713 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.069773 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.070322 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.070401 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.070749 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.071483 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.073898 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.074570 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.074660 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:12.074693 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:12.074750 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.074875 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:12.075185 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:12.075226 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.077115 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.077207 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.079621 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.079699 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:12.080115 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:12.082424 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.084300 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.084393 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.084679 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.084758 139700910706688 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 13:32:12.084864 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:12.084900 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:12.084928 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:12.086701 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.088951 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:12.094543 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.094795 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:12.097288 139700910706688 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:32:12.101040 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:12.101092 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:12.101124 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:12.101153 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.101212 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.101819 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.101896 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.102348 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.103101 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.105504 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.106109 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.106185 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:12.106217 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:12.106273 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.106399 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:12.106705 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:12.106746 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.108611 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.108701 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.111483 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.111562 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:12.111974 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:12.114198 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.116057 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.116150 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.116428 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.116507 139700910706688 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 13:32:12.116612 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:12.116648 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:12.116676 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:12.118422 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.120735 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:12.126246 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.126497 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:12.129017 139700910706688 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:32:12.132643 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:12.132703 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:12.132737 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:12.132765 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.132876 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.133430 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.133504 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.133860 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.134599 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.136979 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.137592 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.137675 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:12.137708 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:12.137764 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.137890 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:12.138199 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:12.138239 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.140095 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.140187 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.142640 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.142719 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:12.143131 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:12.145347 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.147228 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.147322 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.147599 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.147677 139700910706688 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 13:32:12.147781 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:12.147818 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:12.147846 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:12.149610 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.151954 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:12.157487 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.157750 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:12.160271 139700910706688 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:32:12.163903 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:12.163959 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:12.163992 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:12.164026 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.164137 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.164698 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.164773 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.165121 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.165888 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.168274 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.168883 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.168958 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:12.168992 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:12.169049 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.169174 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:12.169481 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:12.169521 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.171408 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.171500 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.173958 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.174036 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:12.174455 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:12.176677 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.178544 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.178639 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.178922 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.179001 139700910706688 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 13:32:12.179106 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:12.179143 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:12.179172 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:12.180937 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.183274 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:12.188773 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.189027 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:12.191578 139700910706688 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:32:12.195181 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:12.195234 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:12.195268 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:12.195297 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.195414 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.195974 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.196048 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.196395 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.197143 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.199539 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.200160 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.200236 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:12.200269 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:12.200325 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.200450 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:12.200762 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:12.200802 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.202855 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.202948 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.205583 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.205668 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:12.206084 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:12.208305 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.210191 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.210284 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.210565 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.210808 139700910706688 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 13:32:12.210874 139700910706688 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 13:32:12.210927 139700910706688 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 13:32:12.210980 139700910706688 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 13:32:12.211030 139700910706688 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 13:32:12.211079 139700910706688 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 13:32:12.211128 139700910706688 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 13:32:12.211177 139700910706688 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 13:32:12.211227 139700910706688 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 13:32:12.211276 139700910706688 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 13:32:12.211324 139700910706688 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 13:32:12.211373 139700910706688 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 13:32:12.211414 139700910706688 decoder_stack.py:344] dstack: Final layernorm.
I0123 13:32:12.214253 139700910706688 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:32:12.258587 139700910706688 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.258670 139700910706688 decoder_stack.py:333] dstack: autoregressive generator.
I0123 13:32:12.258719 139700910706688 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 13:32:12.258820 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:12.258855 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:12.258882 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:12.258941 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.261252 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:12.266598 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.266852 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:12.269341 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:32:12.281975 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:12.282029 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:12.282061 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:12.282090 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.282150 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.282696 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.282769 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.283113 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.283785 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.286277 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.286883 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.286958 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:12.286991 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:12.287047 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.287174 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:12.287280 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:12.287316 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.289135 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.289226 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.291590 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.291668 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:12.291773 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:12.294332 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.296171 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.296264 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.296547 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.296627 139700910706688 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 13:32:12.296732 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:12.296769 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:12.296798 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:12.296857 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.299061 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:12.304605 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.304862 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:12.307652 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:32:12.320072 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:12.320126 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:12.320160 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:12.320189 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.320249 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.320793 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.320868 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.321213 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.321951 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.324355 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.324958 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.325033 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:12.325066 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:12.325122 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.325251 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:12.325358 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:12.325394 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.327236 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.327328 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.329693 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.329770 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:12.329876 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:12.332103 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.333929 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.334023 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.334304 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.334383 139700910706688 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 13:32:12.334487 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:12.334524 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:12.334552 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:12.334611 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.336788 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:12.342109 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.342363 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:12.344964 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:32:12.357328 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:12.357381 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:12.357414 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:12.357441 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.357501 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.358055 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.358130 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.358478 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.359201 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.361604 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.362220 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.362295 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:12.362327 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:12.362386 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.362518 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:12.362623 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:12.362659 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.364476 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.364567 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.366931 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.367009 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:12.367113 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:12.369348 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.371182 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.371284 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.371570 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.371650 139700910706688 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 13:32:12.371755 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:12.371792 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:12.371819 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:12.371879 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.374059 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:12.379370 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.379627 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:12.382255 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:32:12.394554 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:12.394607 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:12.394641 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:12.394670 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.394730 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.395272 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.395345 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.395690 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.396412 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.398822 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.399429 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.399505 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:12.399537 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:12.399592 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.399720 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:12.399827 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:12.399862 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.401695 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.401786 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.404129 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.404205 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:12.404311 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:12.407129 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.408948 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.409047 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.409331 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.409410 139700910706688 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 13:32:12.409516 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:12.409553 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:12.409581 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:12.409646 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.411856 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:12.417220 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.417483 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:12.420111 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:32:12.432500 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:12.432553 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:12.432585 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:12.432613 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.432673 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.433227 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.433301 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.433652 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.434374 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.436766 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.437377 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.437451 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:12.437484 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:12.437539 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.437673 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:12.437783 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:12.437819 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.439637 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.439728 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.442098 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.442176 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:12.442282 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:12.444513 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.446354 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.446449 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.446743 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.446824 139700910706688 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 13:32:12.446932 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:12.446969 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:12.446997 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:12.447057 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.449242 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:12.454595 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.454850 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:12.457461 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:32:12.470121 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:12.470175 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:12.470208 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:12.470237 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.470298 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.470850 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.470924 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.471265 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.471995 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.474431 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.475042 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.475117 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:12.475151 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:12.475210 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.475341 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:12.475449 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:12.475487 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.477327 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.477418 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.479782 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.479859 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:12.479964 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:12.482190 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.484018 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.484112 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.484395 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.484480 139700910706688 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 13:32:12.484590 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:12.484627 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:12.484655 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:12.484715 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.486917 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:12.492309 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.492563 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:12.495207 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:32:12.507606 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:12.507658 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:12.507691 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:12.507719 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.507779 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.508338 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.508412 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.508759 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.509496 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.511925 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.512539 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.512614 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:12.512646 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:12.512703 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.512828 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:12.512935 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:12.512972 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.514823 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.514915 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.517269 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.517346 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:12.517452 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:12.520107 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.521931 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.522025 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.522305 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.522391 139700910706688 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 13:32:12.522498 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:12.522534 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:12.522562 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:12.522622 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.524789 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:12.530098 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.530354 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:12.532951 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:32:12.545277 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:12.545332 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:12.545365 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:12.545394 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.545455 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.546010 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.546084 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.546427 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.547150 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.549538 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.550156 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.550233 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:12.550265 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:12.550321 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.550447 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:12.550554 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:12.550591 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.552408 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.552500 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.554858 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.554937 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:12.555043 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:12.557284 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.559127 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.559221 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.559504 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.559589 139700910706688 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 13:32:12.559697 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:12.559734 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:12.559762 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:12.559822 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.562014 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:12.567728 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.567985 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:12.570616 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:32:12.582974 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:12.583028 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:12.583060 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:12.583089 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.583148 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.583691 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.583766 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.584116 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.584794 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.587273 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.587882 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.587956 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:12.587988 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:12.588042 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.588169 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:12.588275 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:12.588310 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.590147 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.590240 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.592598 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.592675 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:12.592781 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:12.595027 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.596867 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.596961 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.597243 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.597323 139700910706688 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 13:32:12.597438 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:12.597475 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:12.597503 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:12.597563 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.599752 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:12.605054 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.605307 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:12.607927 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:32:12.620271 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:12.620323 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:12.620356 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:12.620384 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.620444 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.620985 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.621060 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.621403 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.622090 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.624547 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.625157 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.625231 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:12.625263 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:12.625320 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.625445 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:12.625550 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:12.625587 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.627490 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.627587 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.629981 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.630061 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:12.630167 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:12.632784 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.634627 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.634721 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.635002 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.635081 139700910706688 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 13:32:12.635186 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:12.635230 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:12.635259 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:12.635321 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.637518 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:12.642875 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.643133 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:12.645755 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:32:12.658150 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:12.658203 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:12.658237 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:12.658266 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.658326 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.658870 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.658943 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.659292 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.659958 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.662427 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.663034 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.663109 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:12.663141 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:12.663196 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.663320 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:12.663426 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:12.663462 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.665473 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.665565 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.667943 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.668021 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:12.668128 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:12.670525 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.672370 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.672465 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.672748 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.672827 139700910706688 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 13:32:12.672931 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:12.672967 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:12.673001 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:12.673063 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.675254 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:12.680588 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.680844 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:12.683492 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:32:12.695916 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:12.695970 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:12.696004 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:12.696032 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.696092 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.696645 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.696720 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.697066 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.697752 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.700225 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.700834 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.700910 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:12.700942 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:12.700999 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.701124 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:12.701231 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:12.701268 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.703111 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.703202 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.705548 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.705624 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:12.705739 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:12.707978 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.709796 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.709891 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.710179 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.710263 139700910706688 decoder_stack.py:344] dstack: Final layernorm.
I0123 13:32:12.713058 139700910706688 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:32:12.761892 139700910706688 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.761985 139700910706688 decoder_stack.py:333] dstack: autoregressive generator.
I0123 13:32:12.762038 139700910706688 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 13:32:12.762139 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:12.762175 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:12.762202 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:12.762263 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.764469 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:12.770025 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.770283 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:12.772810 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:32:12.785161 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:12.785216 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:12.785248 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:12.785276 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.785336 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.785894 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.785969 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.786314 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.786973 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.789348 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.789960 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.790035 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:12.790068 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:12.790123 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.790249 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:12.790355 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:12.790392 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.792260 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.792351 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.794694 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.794772 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:12.794876 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:12.797005 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.798832 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.798927 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.799210 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.799297 139700910706688 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 13:32:12.799405 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:12.799442 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:12.799470 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:12.799530 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.801708 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:12.807116 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.807375 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:12.809939 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:32:12.822606 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:12.822659 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:12.822693 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:12.822723 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.822784 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.823329 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.823403 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.823752 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.824417 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.826816 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.827421 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.827496 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:12.827528 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:12.827585 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.827709 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:12.827814 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:12.827851 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.829733 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.829826 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.832157 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.832235 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:12.832343 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:12.834510 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.836319 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.836413 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.836694 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.836781 139700910706688 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 13:32:12.836889 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:12.836925 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:12.836953 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:12.837012 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.839184 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:12.844527 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.844782 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:12.847317 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:32:12.859561 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:12.859616 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:12.859650 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:12.859678 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.859740 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.860283 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.860358 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.860708 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.861400 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.863856 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.864455 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.864531 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:12.864563 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:12.864619 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.864742 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:12.864848 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:12.864884 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.866789 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.866885 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.869256 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.869332 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:12.869436 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:12.871675 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.873500 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.873594 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.873885 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.873965 139700910706688 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 13:32:12.874083 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:12.874123 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:12.874152 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:12.874215 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.876453 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:12.882100 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.882369 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:12.885024 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:32:12.897584 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:12.897637 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:12.897681 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:12.897711 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.897771 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.898332 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.898408 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.898771 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.899505 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.901938 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.902570 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.902647 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:12.902681 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:12.902740 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.902869 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:12.902979 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:12.903017 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.904937 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.905030 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.907440 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.907521 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:12.907632 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:12.909815 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.911696 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.911791 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.912073 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.912153 139700910706688 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 13:32:12.912259 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:12.912302 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:12.912332 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:12.912394 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.914613 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:12.920153 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.920409 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:12.923007 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:32:12.936065 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:12.936119 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:12.936153 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:12.936182 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.936244 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.936792 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.936866 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.937212 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.937890 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.940352 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.940963 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.941039 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:12.941071 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:12.941128 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.941251 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:12.941357 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:12.941393 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.943336 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.943432 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.945780 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.945865 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:12.945973 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:12.948194 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.950016 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.950115 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.950412 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.950496 139700910706688 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 13:32:12.950606 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:12.950653 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:12.950684 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:12.950747 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.952983 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:12.958491 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.958747 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:12.961282 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:32:12.973737 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:12.973795 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:12.973828 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:12.973858 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.973917 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.974480 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.974558 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.974918 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.975614 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.978238 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.978852 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.978928 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:12.978960 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:12.979016 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.979141 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:12.979247 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:12.979283 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.981166 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.981258 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.983597 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.983675 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:12.983781 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:12.986050 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:12.987853 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.987946 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:12.988223 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.988301 139700910706688 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 13:32:12.988405 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:12.988440 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:12.988474 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:12.988536 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.990730 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:12.996107 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:12.996359 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:12.998891 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:32:13.011173 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:13.011227 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:13.011260 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:13.011289 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.011349 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.011897 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.011970 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.012310 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.012977 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.015379 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.015987 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.016063 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:13.016096 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:13.016153 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.016278 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:13.016383 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:13.016419 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:13.018316 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.018407 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:13.020739 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.020816 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:13.020921 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:13.023083 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:13.024892 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.024986 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:13.025265 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.025345 139700910706688 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 13:32:13.025449 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:13.025485 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:13.025513 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:13.025579 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.027757 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:13.033140 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.033393 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:13.035933 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:32:13.048613 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:13.048667 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:13.048701 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:13.048731 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.048791 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.049336 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.049410 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.049771 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.050441 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.052826 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.053431 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.053505 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:13.053538 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:13.053593 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.053731 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:13.053838 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:13.053874 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:13.055751 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.055840 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:13.058163 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.058240 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:13.058346 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:13.060499 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:13.062309 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.062402 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:13.062682 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.062762 139700910706688 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 13:32:13.062867 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:13.062904 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:13.062933 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:13.062999 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.065179 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:13.070608 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.070862 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:13.073402 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:32:13.085955 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:13.086008 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:13.086041 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:13.086070 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.086128 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.086668 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.086741 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.087088 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.087756 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.090178 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.090783 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.090858 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:13.090891 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:13.090947 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.091071 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:13.091178 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:13.091214 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:13.093100 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.093189 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:13.095526 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.095602 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:13.095709 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:13.097889 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:13.099699 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.099790 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:13.100068 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.100146 139700910706688 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 13:32:13.100249 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:13.100285 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:13.100313 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:13.100371 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.102569 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:13.107960 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.108214 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:13.110754 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:32:13.123104 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:13.123157 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:13.123189 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:13.123219 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.123275 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.123824 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.123897 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.124243 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.124912 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.127306 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.127908 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.127981 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:13.128013 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:13.128068 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.128191 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:13.128298 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:13.128334 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:13.130235 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.130325 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:13.132648 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.132722 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:13.132827 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:13.135013 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:13.136820 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.136912 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:13.137192 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.137269 139700910706688 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 13:32:13.137373 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:13.137410 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:13.137439 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:13.137499 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.139694 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:13.145080 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.145335 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:13.147868 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:32:13.160543 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:13.160596 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:13.160629 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:13.160657 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.160722 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.161306 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.161382 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.161750 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.162457 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.164824 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.165433 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.165505 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:13.165537 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:13.165592 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.165728 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:13.165835 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:13.165871 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:13.167743 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.167832 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:13.170165 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.170241 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:13.170345 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:13.172497 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:13.174311 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.174403 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:13.174681 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.174759 139700910706688 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 13:32:13.174866 139700910706688 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:32:13.174904 139700910706688 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:32:13.174932 139700910706688 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:32:13.174992 139700910706688 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.177145 139700910706688 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:32:13.182516 139700910706688 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.182770 139700910706688 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:32:13.185296 139700910706688 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:32:13.197865 139700910706688 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:32:13.197919 139700910706688 attention.py:418] Single window, no scan.
I0123 13:32:13.197951 139700910706688 transformer_layer.py:389] tlayer: self-attention.
I0123 13:32:13.197980 139700910706688 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.198038 139700910706688 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.198586 139700910706688 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.198659 139700910706688 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.199002 139700910706688 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.199673 139700910706688 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.202092 139700910706688 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.202697 139700910706688 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.202771 139700910706688 transformer_layer.py:468] tlayer: End windows.
I0123 13:32:13.202803 139700910706688 transformer_layer.py:472] tlayer: final FFN.
I0123 13:32:13.202859 139700910706688 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.202981 139700910706688 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:32:13.203088 139700910706688 nn_components.py:325] mlp: activation = None
I0123 13:32:13.203125 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:13.205010 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.205101 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:13.207453 139700910706688 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.207530 139700910706688 transformer_base.py:443] tbase: final FFN
I0123 13:32:13.207636 139700910706688 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:32:13.209809 139700910706688 nn_components.py:329] mlp: final activation = None
I0123 13:32:13.211624 139700910706688 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.211716 139700910706688 nn_components.py:261] mlp: residual
I0123 13:32:13.211996 139700910706688 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:13.212079 139700910706688 decoder_stack.py:344] dstack: Final layernorm.
I0123 13:32:13.214871 139700910706688 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:32:25.635178 139700910706688 alphageometry.py:566] LM output (score=-2.178466): "m : P f g k m 17 ;"
I0123 13:32:25.635454 139700910706688 alphageometry.py:567] Translation: "m = on_pline m k f g"

I0123 13:32:25.635513 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g ? cong l h l j"
I0123 13:32:25.635685 139700910706688 graph.py:498] 
I0123 13:32:25.635742 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g ? cong l h l j
I0123 13:32:27.517991 139700910706688 ddar.py:60] Depth 1/1000 time = 1.8501207828521729
I0123 13:32:29.807011 139700910706688 ddar.py:60] Depth 2/1000 time = 2.2888681888580322
I0123 13:32:32.115110 139700910706688 ddar.py:60] Depth 3/1000 time = 2.307941198348999
I0123 13:32:34.983951 139700910706688 ddar.py:60] Depth 4/1000 time = 2.8686909675598145
I0123 13:32:38.673129 139700910706688 ddar.py:60] Depth 5/1000 time = 3.6890058517456055
I0123 13:32:42.879703 139700910706688 ddar.py:60] Depth 6/1000 time = 4.206394195556641
I0123 13:32:47.084976 139700910706688 ddar.py:60] Depth 7/1000 time = 4.205108642578125
I0123 13:32:51.203253 139700910706688 ddar.py:60] Depth 8/1000 time = 4.1181111335754395
I0123 13:32:55.364101 139700910706688 ddar.py:60] Depth 9/1000 time = 4.160654544830322
I0123 13:32:59.470655 139700910706688 ddar.py:60] Depth 10/1000 time = 4.105989456176758
I0123 13:32:59.522716 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:32:59.522815 139700910706688 alphageometry.py:566] LM output (score=-2.237466): "m : P d f g m 17 ;"
I0123 13:32:59.522853 139700910706688 alphageometry.py:567] Translation: "m = on_pline m g d f"

I0123 13:32:59.522891 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f ? cong l h l j"
I0123 13:32:59.523041 139700910706688 graph.py:498] 
I0123 13:32:59.523096 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f ? cong l h l j
I0123 13:33:01.476136 139700910706688 ddar.py:60] Depth 1/1000 time = 1.9134149551391602
I0123 13:33:03.600811 139700910706688 ddar.py:60] Depth 2/1000 time = 2.12432599067688
I0123 13:33:06.129819 139700910706688 ddar.py:60] Depth 3/1000 time = 2.528804302215576
I0123 13:33:09.080245 139700910706688 ddar.py:60] Depth 4/1000 time = 2.9502315521240234
I0123 13:33:12.948546 139700910706688 ddar.py:60] Depth 5/1000 time = 3.868119716644287
I0123 13:33:17.093030 139700910706688 ddar.py:60] Depth 6/1000 time = 4.144311428070068
I0123 13:33:21.335372 139700910706688 ddar.py:60] Depth 7/1000 time = 4.242178916931152
I0123 13:33:25.850027 139700910706688 ddar.py:60] Depth 8/1000 time = 4.5144877433776855
I0123 13:33:29.957263 139700910706688 ddar.py:60] Depth 9/1000 time = 4.107037782669067
I0123 13:33:34.494733 139700910706688 ddar.py:60] Depth 10/1000 time = 4.536864519119263
I0123 13:33:34.544797 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:33:34.544910 139700910706688 alphageometry.py:566] LM output (score=-2.335097): "m : P f g i m 17 ;"
I0123 13:33:34.544949 139700910706688 alphageometry.py:567] Translation: "m = on_pline m i f g"

I0123 13:33:34.544993 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g ? cong l h l j"
I0123 13:33:34.545174 139700910706688 graph.py:498] 
I0123 13:33:34.545233 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g ? cong l h l j
I0123 13:33:36.292396 139700910706688 ddar.py:60] Depth 1/1000 time = 1.7135279178619385
I0123 13:33:38.438234 139700910706688 ddar.py:60] Depth 2/1000 time = 2.1456778049468994
I0123 13:33:40.752588 139700910706688 ddar.py:60] Depth 3/1000 time = 2.314192771911621
I0123 13:33:43.459249 139700910706688 ddar.py:60] Depth 4/1000 time = 2.7064924240112305
I0123 13:33:47.097791 139700910706688 ddar.py:60] Depth 5/1000 time = 3.6383798122406006
I0123 13:33:50.820711 139700910706688 ddar.py:60] Depth 6/1000 time = 3.722735643386841
I0123 13:33:55.243928 139700910706688 ddar.py:60] Depth 7/1000 time = 4.423027038574219
I0123 13:33:59.248384 139700910706688 ddar.py:60] Depth 8/1000 time = 4.004253149032593
I0123 13:34:03.673556 139700910706688 ddar.py:60] Depth 9/1000 time = 4.42500114440918
I0123 13:34:07.639616 139700910706688 ddar.py:60] Depth 10/1000 time = 3.9654788970947266
I0123 13:34:07.692272 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:34:07.692363 139700910706688 alphageometry.py:566] LM output (score=-2.495557): "m : C c i m 17 D c m i m 18 ;"
I0123 13:34:07.692399 139700910706688 alphageometry.py:567] Translation: "m = on_line m c i, on_bline m i c"

I0123 13:34:07.692437 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_line m c i, on_bline m i c ? cong l h l j"
I0123 13:34:07.692602 139700910706688 graph.py:498] 
I0123 13:34:07.692659 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_line m c i, on_bline m i c ? cong l h l j
I0123 13:34:09.737034 139700910706688 ddar.py:60] Depth 1/1000 time = 2.001718521118164
I0123 13:34:12.217414 139700910706688 ddar.py:60] Depth 2/1000 time = 2.4802193641662598
I0123 13:34:15.204255 139700910706688 ddar.py:60] Depth 3/1000 time = 2.9866671562194824
I0123 13:34:18.508963 139700910706688 ddar.py:60] Depth 4/1000 time = 3.3045361042022705
I0123 13:34:23.072933 139700910706688 ddar.py:60] Depth 5/1000 time = 4.563801288604736
I0123 13:34:28.171005 139700910706688 ddar.py:60] Depth 6/1000 time = 5.097899913787842
I0123 13:34:33.218575 139700910706688 ddar.py:60] Depth 7/1000 time = 5.047405242919922
I0123 13:34:38.311218 139700910706688 ddar.py:60] Depth 8/1000 time = 5.09243369102478
I0123 13:34:43.645218 139700910706688 ddar.py:60] Depth 9/1000 time = 5.333781480789185
I0123 13:34:48.507729 139700910706688 ddar.py:60] Depth 10/1000 time = 4.8620765209198
I0123 13:34:48.567781 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:34:48.567893 139700910706688 alphageometry.py:566] LM output (score=-2.495962): "m : T d f d m 17 ;"
I0123 13:34:48.567929 139700910706688 alphageometry.py:567] Translation: "m = on_tline m d d f"

I0123 13:34:48.567967 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_tline m d d f ? cong l h l j"
I0123 13:34:48.568147 139700910706688 graph.py:498] 
I0123 13:34:48.568207 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_tline m d d f ? cong l h l j
I0123 13:34:50.352743 139700910706688 ddar.py:60] Depth 1/1000 time = 1.750739574432373
I0123 13:34:52.979553 139700910706688 ddar.py:60] Depth 2/1000 time = 2.6266422271728516
I0123 13:34:55.606054 139700910706688 ddar.py:60] Depth 3/1000 time = 2.6263318061828613
I0123 13:34:58.882137 139700910706688 ddar.py:60] Depth 4/1000 time = 3.275880813598633
I0123 13:35:02.988591 139700910706688 ddar.py:60] Depth 5/1000 time = 4.106252670288086
I0123 13:35:07.375453 139700910706688 ddar.py:60] Depth 6/1000 time = 4.386683940887451
I0123 13:35:11.950028 139700910706688 ddar.py:60] Depth 7/1000 time = 4.574410915374756
I0123 13:35:16.529233 139700910706688 ddar.py:60] Depth 8/1000 time = 4.579037189483643
I0123 13:35:21.142916 139700910706688 ddar.py:60] Depth 9/1000 time = 4.613471031188965
I0123 13:35:25.671686 139700910706688 ddar.py:60] Depth 10/1000 time = 4.52813196182251
I0123 13:35:30.243842 139700910706688 ddar.py:60] Depth 11/1000 time = 4.545227766036987
I0123 13:35:34.833012 139700910706688 ddar.py:60] Depth 12/1000 time = 4.559723615646362
I0123 13:35:34.835229 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:35:34.835346 139700910706688 alphageometry.py:566] LM output (score=-2.530177): "m : C c k m 17 D c m k m 18 ;"
I0123 13:35:34.835381 139700910706688 alphageometry.py:567] Translation: "m = on_line m c k, on_bline m k c"

I0123 13:35:34.835420 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_line m c k, on_bline m k c ? cong l h l j"
I0123 13:35:34.835592 139700910706688 graph.py:498] 
I0123 13:35:34.835647 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_line m c k, on_bline m k c ? cong l h l j
I0123 13:35:36.962833 139700910706688 ddar.py:60] Depth 1/1000 time = 2.083089590072632
I0123 13:35:39.482445 139700910706688 ddar.py:60] Depth 2/1000 time = 2.5193982124328613
I0123 13:35:42.518996 139700910706688 ddar.py:60] Depth 3/1000 time = 3.0362751483917236
I0123 13:35:46.125391 139700910706688 ddar.py:60] Depth 4/1000 time = 3.6062166690826416
I0123 13:35:50.578103 139700910706688 ddar.py:60] Depth 5/1000 time = 4.452546119689941
I0123 13:35:55.485273 139700910706688 ddar.py:60] Depth 6/1000 time = 4.906977415084839
I0123 13:36:00.882058 139700910706688 ddar.py:60] Depth 7/1000 time = 5.396546840667725
I0123 13:36:05.804315 139700910706688 ddar.py:60] Depth 8/1000 time = 4.921951532363892
I0123 13:36:11.213359 139700910706688 ddar.py:60] Depth 9/1000 time = 5.408863306045532
I0123 13:36:16.143903 139700910706688 ddar.py:60] Depth 10/1000 time = 4.930034399032593
I0123 13:36:16.204522 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:36:16.204642 139700910706688 alphageometry.py:566] LM output (score=-2.569263): "m : P f g j m 17 ;"
I0123 13:36:16.204682 139700910706688 alphageometry.py:567] Translation: "m = on_pline m j f g"

I0123 13:36:16.204720 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m j f g ? cong l h l j"
I0123 13:36:16.204895 139700910706688 graph.py:498] 
I0123 13:36:16.204954 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m j f g ? cong l h l j
I0123 13:36:18.044858 139700910706688 ddar.py:60] Depth 1/1000 time = 1.8036606311798096
I0123 13:36:20.284139 139700910706688 ddar.py:60] Depth 2/1000 time = 2.23911452293396
I0123 13:36:23.049289 139700910706688 ddar.py:60] Depth 3/1000 time = 2.7649166584014893
I0123 13:36:26.205788 139700910706688 ddar.py:60] Depth 4/1000 time = 3.1562256813049316
I0123 13:36:30.263613 139700910706688 ddar.py:60] Depth 5/1000 time = 4.057665586471558
I0123 13:36:34.527958 139700910706688 ddar.py:60] Depth 6/1000 time = 4.264176368713379
I0123 13:36:38.657374 139700910706688 ddar.py:60] Depth 7/1000 time = 4.129248142242432
I0123 13:36:43.045589 139700910706688 ddar.py:60] Depth 8/1000 time = 4.388019800186157
I0123 13:36:47.126878 139700910706688 ddar.py:60] Depth 9/1000 time = 4.080644607543945
I0123 13:36:47.178674 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:36:47.178786 139700910706688 alphageometry.py:566] LM output (score=-2.638968): "m : P a m c e 17 ;"
I0123 13:36:47.178822 139700910706688 alphageometry.py:567] Translation: "m = on_pline m a c e"

I0123 13:36:47.178862 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m a c e ? cong l h l j"
I0123 13:36:47.179026 139700910706688 graph.py:498] 
I0123 13:36:47.179081 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m a c e ? cong l h l j
I0123 13:36:48.990364 139700910706688 ddar.py:60] Depth 1/1000 time = 1.7764325141906738
I0123 13:36:51.258839 139700910706688 ddar.py:60] Depth 2/1000 time = 2.2682933807373047
I0123 13:36:53.739105 139700910706688 ddar.py:60] Depth 3/1000 time = 2.4801113605499268
I0123 13:36:56.880779 139700910706688 ddar.py:60] Depth 4/1000 time = 3.141500473022461
I0123 13:37:00.561511 139700910706688 ddar.py:60] Depth 5/1000 time = 3.6805593967437744
I0123 13:37:04.726690 139700910706688 ddar.py:60] Depth 6/1000 time = 4.164927005767822
I0123 13:37:08.831898 139700910706688 ddar.py:60] Depth 7/1000 time = 4.10487174987793
I0123 13:37:13.214458 139700910706688 ddar.py:60] Depth 8/1000 time = 4.382368326187134
I0123 13:37:17.310587 139700910706688 ddar.py:60] Depth 9/1000 time = 4.095960855484009
I0123 13:37:21.667570 139700910706688 ddar.py:60] Depth 10/1000 time = 4.356485843658447
I0123 13:37:21.717064 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:37:21.717179 139700910706688 alphageometry.py:566] LM output (score=-2.664604): "m : P a b c m 17 T a b a m 18 ;"
I0123 13:37:21.717219 139700910706688 alphageometry.py:567] Translation: "m = on_pline m c a b, on_tline m a a b"

I0123 13:37:21.717257 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m c a b, on_tline m a a b ? cong l h l j"
I0123 13:37:21.717437 139700910706688 graph.py:498] 
I0123 13:37:21.717495 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m c a b, on_tline m a a b ? cong l h l j
I0123 13:37:23.337612 139700910706688 ddar.py:60] Depth 1/1000 time = 1.5841171741485596
I0123 13:37:26.164132 139700910706688 ddar.py:60] Depth 2/1000 time = 2.8263580799102783
I0123 13:37:29.094135 139700910706688 ddar.py:60] Depth 3/1000 time = 2.929811477661133
I0123 13:37:33.087930 139700910706688 ddar.py:60] Depth 4/1000 time = 3.993406295776367
I0123 13:37:37.887271 139700910706688 ddar.py:60] Depth 5/1000 time = 4.799157619476318
I0123 13:37:42.926013 139700910706688 ddar.py:60] Depth 6/1000 time = 5.038548946380615
I0123 13:37:47.834767 139700910706688 ddar.py:60] Depth 7/1000 time = 4.908512115478516
I0123 13:37:53.009577 139700910706688 ddar.py:60] Depth 8/1000 time = 5.174497365951538
I0123 13:37:58.121684 139700910706688 ddar.py:60] Depth 9/1000 time = 5.111394166946411
I0123 13:37:58.188947 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:37:58.189059 139700910706688 alphageometry.py:566] LM output (score=-2.684289): "m : P a b c m 17 ;"
I0123 13:37:58.189095 139700910706688 alphageometry.py:567] Translation: "m = on_pline m c a b"

I0123 13:37:58.189133 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m c a b ? cong l h l j"
I0123 13:37:58.189309 139700910706688 graph.py:498] 
I0123 13:37:58.189366 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m c a b ? cong l h l j
I0123 13:38:00.064913 139700910706688 ddar.py:60] Depth 1/1000 time = 1.8421483039855957
I0123 13:38:02.077992 139700910706688 ddar.py:60] Depth 2/1000 time = 2.012913942337036
I0123 13:38:04.545289 139700910706688 ddar.py:60] Depth 3/1000 time = 2.4671106338500977
I0123 13:38:07.197002 139700910706688 ddar.py:60] Depth 4/1000 time = 2.651552438735962
I0123 13:38:11.121237 139700910706688 ddar.py:60] Depth 5/1000 time = 3.9240031242370605
I0123 13:38:15.120372 139700910706688 ddar.py:60] Depth 6/1000 time = 3.998913526535034
I0123 13:38:19.261266 139700910706688 ddar.py:60] Depth 7/1000 time = 4.140719652175903
I0123 13:38:23.735428 139700910706688 ddar.py:60] Depth 8/1000 time = 4.4739830493927
I0123 13:38:27.949184 139700910706688 ddar.py:60] Depth 9/1000 time = 4.213581323623657
I0123 13:38:32.142494 139700910706688 ddar.py:60] Depth 10/1000 time = 4.1926963329315186
I0123 13:38:32.192911 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:38:32.193050 139700910706688 alphageometry.py:566] LM output (score=-2.699218): "m : P f g h m 17 ;"
I0123 13:38:32.193093 139700910706688 alphageometry.py:567] Translation: "m = on_pline m h f g"

I0123 13:38:32.193146 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m h f g ? cong l h l j"
I0123 13:38:32.193346 139700910706688 graph.py:498] 
I0123 13:38:32.193408 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m h f g ? cong l h l j
I0123 13:38:33.893303 139700910706688 ddar.py:60] Depth 1/1000 time = 1.6662940979003906
I0123 13:38:36.238826 139700910706688 ddar.py:60] Depth 2/1000 time = 2.345353364944458
I0123 13:38:38.771207 139700910706688 ddar.py:60] Depth 3/1000 time = 2.532188653945923
I0123 13:38:41.195246 139700910706688 ddar.py:60] Depth 4/1000 time = 2.4238641262054443
I0123 13:38:45.076039 139700910706688 ddar.py:60] Depth 5/1000 time = 3.88059663772583
I0123 13:38:48.998114 139700910706688 ddar.py:60] Depth 6/1000 time = 3.9218909740448
I0123 13:38:53.468846 139700910706688 ddar.py:60] Depth 7/1000 time = 4.470489025115967
I0123 13:38:57.731334 139700910706688 ddar.py:60] Depth 8/1000 time = 4.262173414230347
I0123 13:39:01.949710 139700910706688 ddar.py:60] Depth 9/1000 time = 4.218191623687744
I0123 13:39:06.424876 139700910706688 ddar.py:60] Depth 10/1000 time = 4.474531888961792
I0123 13:39:06.478728 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:39:06.478844 139700910706688 alphageometry.py:566] LM output (score=-2.703654): "m : T b i b m 17 ;"
I0123 13:39:06.478888 139700910706688 alphageometry.py:567] Translation: "m = on_tline m b b i"

I0123 13:39:06.478938 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_tline m b b i ? cong l h l j"
I0123 13:39:06.479107 139700910706688 graph.py:498] 
I0123 13:39:06.479175 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_tline m b b i ? cong l h l j
I0123 13:39:08.124058 139700910706688 ddar.py:60] Depth 1/1000 time = 1.6089458465576172
I0123 13:39:10.600206 139700910706688 ddar.py:60] Depth 2/1000 time = 2.475978136062622
I0123 13:39:13.267932 139700910706688 ddar.py:60] Depth 3/1000 time = 2.667557954788208
I0123 13:39:16.424983 139700910706688 ddar.py:60] Depth 4/1000 time = 3.1568140983581543
I0123 13:39:20.468944 139700910706688 ddar.py:60] Depth 5/1000 time = 4.043755531311035
I0123 13:39:24.711167 139700910706688 ddar.py:60] Depth 6/1000 time = 4.242045879364014
I0123 13:39:29.481902 139700910706688 ddar.py:60] Depth 7/1000 time = 4.770556926727295
I0123 13:39:33.966719 139700910706688 ddar.py:60] Depth 8/1000 time = 4.484633922576904
I0123 13:39:38.777888 139700910706688 ddar.py:60] Depth 9/1000 time = 4.810935020446777
I0123 13:39:43.251824 139700910706688 ddar.py:60] Depth 10/1000 time = 4.473323583602905
I0123 13:39:43.306184 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:39:43.306306 139700910706688 alphageometry.py:566] LM output (score=-2.703967): "m : P b i e m 17 ;"
I0123 13:39:43.306347 139700910706688 alphageometry.py:567] Translation: "m = on_pline m e b i"

I0123 13:39:43.306392 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m e b i ? cong l h l j"
I0123 13:39:43.306577 139700910706688 graph.py:498] 
I0123 13:39:43.306643 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m e b i ? cong l h l j
I0123 13:39:45.313610 139700910706688 ddar.py:60] Depth 1/1000 time = 1.9710042476654053
I0123 13:39:47.407249 139700910706688 ddar.py:60] Depth 2/1000 time = 2.0934462547302246
I0123 13:39:49.987052 139700910706688 ddar.py:60] Depth 3/1000 time = 2.5796449184417725
I0123 13:39:53.293743 139700910706688 ddar.py:60] Depth 4/1000 time = 3.306516170501709
I0123 13:39:57.233258 139700910706688 ddar.py:60] Depth 5/1000 time = 3.939262866973877
I0123 13:40:01.449533 139700910706688 ddar.py:60] Depth 6/1000 time = 4.215956687927246
I0123 13:40:05.772430 139700910706688 ddar.py:60] Depth 7/1000 time = 4.322714328765869
I0123 13:40:10.112319 139700910706688 ddar.py:60] Depth 8/1000 time = 4.3397135734558105
I0123 13:40:14.485587 139700910706688 ddar.py:60] Depth 9/1000 time = 4.373092412948608
I0123 13:40:18.445553 139700910706688 ddar.py:60] Depth 10/1000 time = 3.9593379497528076
I0123 13:40:18.495544 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:40:18.495684 139700910706688 alphageometry.py:566] LM output (score=-2.714413): "m : D d e d m 17 ;"
I0123 13:40:18.495725 139700910706688 alphageometry.py:567] Translation: "m = on_circle m d e"

I0123 13:40:18.495779 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_circle m d e ? cong l h l j"
I0123 13:40:18.495963 139700910706688 graph.py:498] 
I0123 13:40:18.496024 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_circle m d e ? cong l h l j
I0123 13:40:20.854205 139700910706688 ddar.py:60] Depth 1/1000 time = 2.3188316822052
I0123 13:40:24.042435 139700910706688 ddar.py:60] Depth 2/1000 time = 3.1880605220794678
I0123 13:40:27.649599 139700910706688 ddar.py:60] Depth 3/1000 time = 3.6069891452789307
I0123 13:40:31.061153 139700910706688 ddar.py:60] Depth 4/1000 time = 3.411367416381836
I0123 13:40:36.283959 139700910706688 ddar.py:60] Depth 5/1000 time = 5.222622871398926
I0123 13:40:41.615712 139700910706688 ddar.py:60] Depth 6/1000 time = 5.331485986709595
I0123 13:40:47.182237 139700910706688 ddar.py:60] Depth 7/1000 time = 5.566205263137817
I0123 13:40:53.083390 139700910706688 ddar.py:60] Depth 8/1000 time = 5.900966167449951
I0123 13:40:58.696487 139700910706688 ddar.py:60] Depth 9/1000 time = 5.612897872924805
I0123 13:41:04.266570 139700910706688 ddar.py:60] Depth 10/1000 time = 5.569381952285767
I0123 13:41:04.325599 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:41:04.325716 139700910706688 alphageometry.py:566] LM output (score=-2.743711): "m : P a m e f 17 ;"
I0123 13:41:04.325758 139700910706688 alphageometry.py:567] Translation: "m = on_pline m a e f"

I0123 13:41:04.325802 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m a e f ? cong l h l j"
I0123 13:41:04.325984 139700910706688 graph.py:498] 
I0123 13:41:04.326046 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m a e f ? cong l h l j
I0123 13:41:06.370061 139700910706688 ddar.py:60] Depth 1/1000 time = 2.009531021118164
I0123 13:41:08.469239 139700910706688 ddar.py:60] Depth 2/1000 time = 2.099010467529297
I0123 13:41:11.046550 139700910706688 ddar.py:60] Depth 3/1000 time = 2.5771398544311523
I0123 13:41:13.830368 139700910706688 ddar.py:60] Depth 4/1000 time = 2.783644437789917
I0123 13:41:17.585691 139700910706688 ddar.py:60] Depth 5/1000 time = 3.7551393508911133
I0123 13:41:21.716885 139700910706688 ddar.py:60] Depth 6/1000 time = 4.130997180938721
I0123 13:41:26.447496 139700910706688 ddar.py:60] Depth 7/1000 time = 4.730391025543213
I0123 13:41:30.816602 139700910706688 ddar.py:60] Depth 8/1000 time = 4.368915796279907
I0123 13:41:35.191495 139700910706688 ddar.py:60] Depth 9/1000 time = 4.374709844589233
I0123 13:41:39.533945 139700910706688 ddar.py:60] Depth 10/1000 time = 4.341814041137695
I0123 13:41:39.584960 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:41:39.585077 139700910706688 alphageometry.py:566] LM output (score=-2.749324): "m : P a m b f 17 ;"
I0123 13:41:39.585119 139700910706688 alphageometry.py:567] Translation: "m = on_pline m a b f"

I0123 13:41:39.585160 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m a b f ? cong l h l j"
I0123 13:41:39.585327 139700910706688 graph.py:498] 
I0123 13:41:39.585388 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m a b f ? cong l h l j
I0123 13:41:41.652223 139700910706688 ddar.py:60] Depth 1/1000 time = 2.0331618785858154
I0123 13:41:43.782166 139700910706688 ddar.py:60] Depth 2/1000 time = 2.1295056343078613
I0123 13:41:46.414947 139700910706688 ddar.py:60] Depth 3/1000 time = 2.6324644088745117
I0123 13:41:49.222363 139700910706688 ddar.py:60] Depth 4/1000 time = 2.8072195053100586
I0123 13:41:53.017758 139700910706688 ddar.py:60] Depth 5/1000 time = 3.7952206134796143
I0123 13:41:57.198769 139700910706688 ddar.py:60] Depth 6/1000 time = 4.180821418762207
I0123 13:42:01.557599 139700910706688 ddar.py:60] Depth 7/1000 time = 4.358649969100952
I0123 13:42:05.989887 139700910706688 ddar.py:60] Depth 8/1000 time = 4.4320595264434814
I0123 13:42:10.401904 139700910706688 ddar.py:60] Depth 9/1000 time = 4.411696434020996
I0123 13:42:14.748845 139700910706688 ddar.py:60] Depth 10/1000 time = 4.346315622329712
I0123 13:42:14.800129 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:42:14.800258 139700910706688 alphageometry.py:566] LM output (score=-2.781732): "m : P b i e m 17 P b m e i 18 ;"
I0123 13:42:14.800300 139700910706688 alphageometry.py:567] Translation: "m = on_pline m e b i, on_pline m b e i"

I0123 13:42:14.800344 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m e b i, on_pline m b e i ? cong l h l j"
I0123 13:42:14.800537 139700910706688 graph.py:498] 
I0123 13:42:14.800602 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m e b i, on_pline m b e i ? cong l h l j
I0123 13:42:16.998302 139700910706688 ddar.py:60] Depth 1/1000 time = 2.1607770919799805
I0123 13:42:20.230079 139700910706688 ddar.py:60] Depth 2/1000 time = 3.2315897941589355
I0123 13:42:24.072479 139700910706688 ddar.py:60] Depth 3/1000 time = 3.842221975326538
I0123 13:42:28.788339 139700910706688 ddar.py:60] Depth 4/1000 time = 4.715613603591919
I0123 13:42:34.619756 139700910706688 ddar.py:60] Depth 5/1000 time = 5.831096172332764
I0123 13:42:40.294361 139700910706688 ddar.py:60] Depth 6/1000 time = 5.674427032470703
I0123 13:42:46.400731 139700910706688 ddar.py:60] Depth 7/1000 time = 6.106189727783203
I0123 13:42:52.558902 139700910706688 ddar.py:60] Depth 8/1000 time = 6.157939195632935
I0123 13:42:58.341216 139700910706688 ddar.py:60] Depth 9/1000 time = 5.781726121902466
I0123 13:42:58.402304 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:42:58.402434 139700910706688 alphageometry.py:566] LM output (score=-2.805653): "m : T b i i m 17 ;"
I0123 13:42:58.402473 139700910706688 alphageometry.py:567] Translation: "m = on_tline m i b i"

I0123 13:42:58.402512 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_tline m i b i ? cong l h l j"
I0123 13:42:58.402681 139700910706688 graph.py:498] 
I0123 13:42:58.402743 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_tline m i b i ? cong l h l j
I0123 13:43:00.472310 139700910706688 ddar.py:60] Depth 1/1000 time = 2.0357213020324707
I0123 13:43:02.734144 139700910706688 ddar.py:60] Depth 2/1000 time = 2.2616658210754395
I0123 13:43:05.562571 139700910706688 ddar.py:60] Depth 3/1000 time = 2.828258991241455
I0123 13:43:08.482051 139700910706688 ddar.py:60] Depth 4/1000 time = 2.9193265438079834
I0123 13:43:12.656223 139700910706688 ddar.py:60] Depth 5/1000 time = 4.173973083496094
I0123 13:43:17.049647 139700910706688 ddar.py:60] Depth 6/1000 time = 4.393193483352661
I0123 13:43:21.999358 139700910706688 ddar.py:60] Depth 7/1000 time = 4.949537038803101
I0123 13:43:26.306463 139700910706688 ddar.py:60] Depth 8/1000 time = 4.306938409805298
I0123 13:43:30.934789 139700910706688 ddar.py:60] Depth 9/1000 time = 4.628086090087891
I0123 13:43:35.535755 139700910706688 ddar.py:60] Depth 10/1000 time = 4.600203275680542
I0123 13:43:35.589740 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:43:35.589885 139700910706688 alphageometry.py:566] LM output (score=-2.814740): "m : T d e e m 17 ;"
I0123 13:43:35.589927 139700910706688 alphageometry.py:567] Translation: "m = on_tline m e d e"

I0123 13:43:35.589967 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_tline m e d e ? cong l h l j"
I0123 13:43:35.590139 139700910706688 graph.py:498] 
I0123 13:43:35.590199 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_tline m e d e ? cong l h l j
I0123 13:43:37.710173 139700910706688 ddar.py:60] Depth 1/1000 time = 2.0844783782958984
I0123 13:43:39.950276 139700910706688 ddar.py:60] Depth 2/1000 time = 2.239942789077759
I0123 13:43:42.752653 139700910706688 ddar.py:60] Depth 3/1000 time = 2.8022167682647705
I0123 13:43:46.187200 139700910706688 ddar.py:60] Depth 4/1000 time = 3.434372901916504
I0123 13:43:49.932122 139700910706688 ddar.py:60] Depth 5/1000 time = 3.7447378635406494
I0123 13:43:54.585860 139700910706688 ddar.py:60] Depth 6/1000 time = 4.653488397598267
I0123 13:43:58.993358 139700910706688 ddar.py:60] Depth 7/1000 time = 4.407288312911987
I0123 13:44:03.045764 139700910706688 ddar.py:60] Depth 8/1000 time = 4.052203178405762
I0123 13:44:07.371077 139700910706688 ddar.py:60] Depth 9/1000 time = 4.324683904647827
I0123 13:44:07.421844 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:44:07.421975 139700910706688 alphageometry.py:566] LM output (score=-2.885215): "m : P a m d f 17 ;"
I0123 13:44:07.422017 139700910706688 alphageometry.py:567] Translation: "m = on_pline m a d f"

I0123 13:44:07.422056 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m a d f ? cong l h l j"
I0123 13:44:07.422224 139700910706688 graph.py:498] 
I0123 13:44:07.422283 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m a d f ? cong l h l j
I0123 13:44:09.595820 139700910706688 ddar.py:60] Depth 1/1000 time = 2.1348469257354736
I0123 13:44:11.812277 139700910706688 ddar.py:60] Depth 2/1000 time = 2.21630597114563
I0123 13:44:14.672144 139700910706688 ddar.py:60] Depth 3/1000 time = 2.8596975803375244
I0123 13:44:17.829709 139700910706688 ddar.py:60] Depth 4/1000 time = 3.1573829650878906
I0123 13:44:22.023849 139700910706688 ddar.py:60] Depth 5/1000 time = 4.193966627120972
I0123 13:44:26.788034 139700910706688 ddar.py:60] Depth 6/1000 time = 4.763999700546265
I0123 13:44:31.243953 139700910706688 ddar.py:60] Depth 7/1000 time = 4.455742597579956
I0123 13:44:35.767230 139700910706688 ddar.py:60] Depth 8/1000 time = 4.522990465164185
I0123 13:44:40.281745 139700910706688 ddar.py:60] Depth 9/1000 time = 4.513722896575928
I0123 13:44:40.331800 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:44:40.331908 139700910706688 alphageometry.py:566] LM output (score=-2.995589): "m : D a d d m 17 ;"
I0123 13:44:40.331945 139700910706688 alphageometry.py:567] Translation: "m = on_circle m d a"

I0123 13:44:40.331981 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_circle m d a ? cong l h l j"
I0123 13:44:40.332151 139700910706688 graph.py:498] 
I0123 13:44:40.332209 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_circle m d a ? cong l h l j
I0123 13:44:42.106973 139700910706688 ddar.py:60] Depth 1/1000 time = 1.734985113143921
I0123 13:44:45.401111 139700910706688 ddar.py:60] Depth 2/1000 time = 3.2939717769622803
I0123 13:44:48.668898 139700910706688 ddar.py:60] Depth 3/1000 time = 3.2676141262054443
I0123 13:44:52.492247 139700910706688 ddar.py:60] Depth 4/1000 time = 3.823194742202759
I0123 13:44:57.527492 139700910706688 ddar.py:60] Depth 5/1000 time = 5.035016059875488
I0123 13:45:02.979999 139700910706688 ddar.py:60] Depth 6/1000 time = 5.452198505401611
I0123 13:45:08.710593 139700910706688 ddar.py:60] Depth 7/1000 time = 5.730406999588013
I0123 13:45:14.456458 139700910706688 ddar.py:60] Depth 8/1000 time = 5.745683908462524
I0123 13:45:19.851268 139700910706688 ddar.py:60] Depth 9/1000 time = 5.394551038742065
I0123 13:45:25.582277 139700910706688 ddar.py:60] Depth 10/1000 time = 5.7302937507629395
I0123 13:45:25.640821 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:45:25.640933 139700910706688 alphageometry.py:566] LM output (score=-3.042040): "m : P f m g i 17 ;"
I0123 13:45:25.640970 139700910706688 alphageometry.py:567] Translation: "m = on_pline m f g i"

I0123 13:45:25.641007 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m f g i ? cong l h l j"
I0123 13:45:25.641166 139700910706688 graph.py:498] 
I0123 13:45:25.641223 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m f g i ? cong l h l j
I0123 13:45:27.839061 139700910706688 ddar.py:60] Depth 1/1000 time = 2.160322904586792
I0123 13:45:30.079987 139700910706688 ddar.py:60] Depth 2/1000 time = 2.2407755851745605
I0123 13:45:32.509000 139700910706688 ddar.py:60] Depth 3/1000 time = 2.428849458694458
I0123 13:45:35.370243 139700910706688 ddar.py:60] Depth 4/1000 time = 2.8610763549804688
I0123 13:45:39.437711 139700910706688 ddar.py:60] Depth 5/1000 time = 4.067225694656372
I0123 13:45:43.782701 139700910706688 ddar.py:60] Depth 6/1000 time = 4.344681978225708
I0123 13:45:48.209667 139700910706688 ddar.py:60] Depth 7/1000 time = 4.426780939102173
I0123 13:45:52.660387 139700910706688 ddar.py:60] Depth 8/1000 time = 4.4505393505096436
I0123 13:45:57.135451 139700910706688 ddar.py:60] Depth 9/1000 time = 4.474884510040283
I0123 13:46:01.221738 139700910706688 ddar.py:60] Depth 10/1000 time = 4.085684061050415
I0123 13:46:01.271559 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:46:01.271709 139700910706688 alphageometry.py:566] LM output (score=-3.055177): "m : P f g l m 17 ;"
I0123 13:46:01.271748 139700910706688 alphageometry.py:567] Translation: "m = on_pline m l f g"

I0123 13:46:01.271803 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m l f g ? cong l h l j"
I0123 13:46:01.271984 139700910706688 graph.py:498] 
I0123 13:46:01.272041 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m l f g ? cong l h l j
I0123 13:46:03.110472 139700910706688 ddar.py:60] Depth 1/1000 time = 1.8041307926177979
I0123 13:46:05.750649 139700910706688 ddar.py:60] Depth 2/1000 time = 2.63999605178833
I0123 13:46:08.277736 139700910706688 ddar.py:60] Depth 3/1000 time = 2.526927947998047
I0123 13:46:11.352854 139700910706688 ddar.py:60] Depth 4/1000 time = 3.0749564170837402
I0123 13:46:15.488983 139700910706688 ddar.py:60] Depth 5/1000 time = 4.135958909988403
I0123 13:46:19.825727 139700910706688 ddar.py:60] Depth 6/1000 time = 4.336549997329712
I0123 13:46:24.320204 139700910706688 ddar.py:60] Depth 7/1000 time = 4.4942591190338135
I0123 13:46:28.415920 139700910706688 ddar.py:60] Depth 8/1000 time = 4.095442771911621
I0123 13:46:32.793454 139700910706688 ddar.py:60] Depth 9/1000 time = 4.376857280731201
I0123 13:46:32.845515 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:46:32.845650 139700910706688 alphageometry.py:566] LM output (score=-3.062347): "m : P a m c g 17 ;"
I0123 13:46:32.845690 139700910706688 alphageometry.py:567] Translation: "m = on_pline m a c g"

I0123 13:46:32.845734 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m a c g ? cong l h l j"
I0123 13:46:32.845903 139700910706688 graph.py:498] 
I0123 13:46:32.845963 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m a c g ? cong l h l j
I0123 13:46:34.665971 139700910706688 ddar.py:60] Depth 1/1000 time = 1.7866730690002441
I0123 13:46:37.302327 139700910706688 ddar.py:60] Depth 2/1000 time = 2.636186361312866
I0123 13:46:39.738100 139700910706688 ddar.py:60] Depth 3/1000 time = 2.43560528755188
I0123 13:46:42.352670 139700910706688 ddar.py:60] Depth 4/1000 time = 2.6144087314605713
I0123 13:46:46.277158 139700910706688 ddar.py:60] Depth 5/1000 time = 3.924290180206299
I0123 13:46:50.109038 139700910706688 ddar.py:60] Depth 6/1000 time = 3.8316690921783447
I0123 13:46:54.531596 139700910706688 ddar.py:60] Depth 7/1000 time = 4.422385931015015
I0123 13:46:59.007494 139700910706688 ddar.py:60] Depth 8/1000 time = 4.475723028182983
I0123 13:47:03.089755 139700910706688 ddar.py:60] Depth 9/1000 time = 4.082062721252441
I0123 13:47:07.599913 139700910706688 ddar.py:60] Depth 10/1000 time = 4.509493112564087
I0123 13:47:07.652737 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:47:07.652842 139700910706688 alphageometry.py:566] LM output (score=-3.076487): "m : P a m c f 17 ;"
I0123 13:47:07.652878 139700910706688 alphageometry.py:567] Translation: "m = on_pline m a c f"

I0123 13:47:07.652920 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m a c f ? cong l h l j"
I0123 13:47:07.653084 139700910706688 graph.py:498] 
I0123 13:47:07.653139 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m a c f ? cong l h l j
I0123 13:47:09.531095 139700910706688 ddar.py:60] Depth 1/1000 time = 1.8451547622680664
I0123 13:47:11.836044 139700910706688 ddar.py:60] Depth 2/1000 time = 2.3047921657562256
I0123 13:47:14.394787 139700910706688 ddar.py:60] Depth 3/1000 time = 2.558568239212036
I0123 13:47:17.533895 139700910706688 ddar.py:60] Depth 4/1000 time = 3.138934373855591
I0123 13:47:21.750349 139700910706688 ddar.py:60] Depth 5/1000 time = 4.216288805007935
I0123 13:47:25.739959 139700910706688 ddar.py:60] Depth 6/1000 time = 3.9894368648529053
I0123 13:47:30.285077 139700910706688 ddar.py:60] Depth 7/1000 time = 4.544893980026245
I0123 13:47:34.793072 139700910706688 ddar.py:60] Depth 8/1000 time = 4.507766246795654
I0123 13:47:38.876675 139700910706688 ddar.py:60] Depth 9/1000 time = 4.0830512046813965
I0123 13:47:38.929172 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:47:38.929311 139700910706688 alphageometry.py:566] LM output (score=-3.124079): "m : T b e e m 17 ;"
I0123 13:47:38.929351 139700910706688 alphageometry.py:567] Translation: "m = on_tline m e b e"

I0123 13:47:38.929389 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_tline m e b e ? cong l h l j"
I0123 13:47:38.929553 139700910706688 graph.py:498] 
I0123 13:47:38.929613 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_tline m e b e ? cong l h l j
I0123 13:47:41.218059 139700910706688 ddar.py:60] Depth 1/1000 time = 2.2545809745788574
I0123 13:47:43.579444 139700910706688 ddar.py:60] Depth 2/1000 time = 2.361222267150879
I0123 13:47:46.173624 139700910706688 ddar.py:60] Depth 3/1000 time = 2.5940113067626953
I0123 13:47:49.370311 139700910706688 ddar.py:60] Depth 4/1000 time = 3.196484088897705
I0123 13:47:53.662202 139700910706688 ddar.py:60] Depth 5/1000 time = 4.291672945022583
I0123 13:47:57.705853 139700910706688 ddar.py:60] Depth 6/1000 time = 4.043471574783325
I0123 13:48:02.276027 139700910706688 ddar.py:60] Depth 7/1000 time = 4.569990158081055
I0123 13:48:06.429023 139700910706688 ddar.py:60] Depth 8/1000 time = 4.152821063995361
I0123 13:48:11.022612 139700910706688 ddar.py:60] Depth 9/1000 time = 4.592942714691162
I0123 13:48:11.074975 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:48:11.075113 139700910706688 alphageometry.py:566] LM output (score=-3.125751): "m : P a m f g 17 ;"
I0123 13:48:11.075151 139700910706688 alphageometry.py:567] Translation: "m = on_pline m a f g"

I0123 13:48:11.075205 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m a f g ? cong l h l j"
I0123 13:48:11.075381 139700910706688 graph.py:498] 
I0123 13:48:11.075439 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m a f g ? cong l h l j
I0123 13:48:12.593326 139700910706688 ddar.py:60] Depth 1/1000 time = 1.4849622249603271
I0123 13:48:15.314770 139700910706688 ddar.py:60] Depth 2/1000 time = 2.7212843894958496
I0123 13:48:17.892616 139700910706688 ddar.py:60] Depth 3/1000 time = 2.5776827335357666
I0123 13:48:21.042405 139700910706688 ddar.py:60] Depth 4/1000 time = 3.1496376991271973
I0123 13:48:25.290796 139700910706688 ddar.py:60] Depth 5/1000 time = 4.2482194900512695
I0123 13:48:29.781061 139700910706688 ddar.py:60] Depth 6/1000 time = 4.490084886550903
I0123 13:48:33.995873 139700910706688 ddar.py:60] Depth 7/1000 time = 4.214616060256958
I0123 13:48:38.588412 139700910706688 ddar.py:60] Depth 8/1000 time = 4.592326402664185
I0123 13:48:42.708832 139700910706688 ddar.py:60] Depth 9/1000 time = 4.119804382324219
I0123 13:48:42.759841 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:48:42.759954 139700910706688 alphageometry.py:566] LM output (score=-3.144457): "m : P a m c i 17 ;"
I0123 13:48:42.759989 139700910706688 alphageometry.py:567] Translation: "m = on_pline m a c i"

I0123 13:48:42.760025 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m a c i ? cong l h l j"
I0123 13:48:42.760185 139700910706688 graph.py:498] 
I0123 13:48:42.760246 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m a c i ? cong l h l j
I0123 13:48:44.639080 139700910706688 ddar.py:60] Depth 1/1000 time = 1.8460538387298584
I0123 13:48:46.936582 139700910706688 ddar.py:60] Depth 2/1000 time = 2.2973453998565674
I0123 13:48:49.484357 139700910706688 ddar.py:60] Depth 3/1000 time = 2.5475914478302
I0123 13:48:52.646254 139700910706688 ddar.py:60] Depth 4/1000 time = 3.1616709232330322
I0123 13:48:56.939818 139700910706688 ddar.py:60] Depth 5/1000 time = 4.293282747268677
I0123 13:49:00.966991 139700910706688 ddar.py:60] Depth 6/1000 time = 4.026999473571777
I0123 13:49:05.490777 139700910706688 ddar.py:60] Depth 7/1000 time = 4.523611545562744
I0123 13:49:09.602790 139700910706688 ddar.py:60] Depth 8/1000 time = 4.111842632293701
I0123 13:49:14.137785 139700910706688 ddar.py:60] Depth 9/1000 time = 4.534415006637573
I0123 13:49:14.185615 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:49:14.185766 139700910706688 alphageometry.py:566] LM output (score=-3.163456): "m : P e f g m 17 ;"
I0123 13:49:14.185808 139700910706688 alphageometry.py:567] Translation: "m = on_pline m g e f"

I0123 13:49:14.185866 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g e f ? cong l h l j"
I0123 13:49:14.186045 139700910706688 graph.py:498] 
I0123 13:49:14.186102 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g e f ? cong l h l j
I0123 13:49:16.207459 139700910706688 ddar.py:60] Depth 1/1000 time = 1.9835054874420166
I0123 13:49:18.115916 139700910706688 ddar.py:60] Depth 2/1000 time = 1.908289909362793
I0123 13:49:21.019317 139700910706688 ddar.py:60] Depth 3/1000 time = 2.9032328128814697
I0123 13:49:23.726800 139700910706688 ddar.py:60] Depth 4/1000 time = 2.70731782913208
I0123 13:49:27.427011 139700910706688 ddar.py:60] Depth 5/1000 time = 3.7000362873077393
I0123 13:49:31.919379 139700910706688 ddar.py:60] Depth 6/1000 time = 4.492188215255737
I0123 13:49:36.234360 139700910706688 ddar.py:60] Depth 7/1000 time = 4.314748048782349
I0123 13:49:40.959146 139700910706688 ddar.py:60] Depth 8/1000 time = 4.724484920501709
I0123 13:49:45.226024 139700910706688 ddar.py:60] Depth 9/1000 time = 4.266700744628906
I0123 13:49:49.868779 139700910706688 ddar.py:60] Depth 10/1000 time = 4.6421215534210205
I0123 13:49:49.920559 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:49:49.920663 139700910706688 alphageometry.py:566] LM output (score=-3.173569): "m : P b i k m 17 ;"
I0123 13:49:49.920701 139700910706688 alphageometry.py:567] Translation: "m = on_pline m k b i"

I0123 13:49:49.920737 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k b i ? cong l h l j"
I0123 13:49:49.920899 139700910706688 graph.py:498] 
I0123 13:49:49.920959 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k b i ? cong l h l j
I0123 13:49:51.846798 139700910706688 ddar.py:60] Depth 1/1000 time = 1.8930180072784424
I0123 13:49:54.179935 139700910706688 ddar.py:60] Depth 2/1000 time = 2.3329756259918213
I0123 13:49:56.723448 139700910706688 ddar.py:60] Depth 3/1000 time = 2.543287515640259
I0123 13:50:00.152459 139700910706688 ddar.py:60] Depth 4/1000 time = 3.428731679916382
I0123 13:50:03.950065 139700910706688 ddar.py:60] Depth 5/1000 time = 3.7974400520324707
I0123 13:50:08.021137 139700910706688 ddar.py:60] Depth 6/1000 time = 4.070897579193115
I0123 13:50:12.650672 139700910706688 ddar.py:60] Depth 7/1000 time = 4.62937593460083
I0123 13:50:16.868329 139700910706688 ddar.py:60] Depth 8/1000 time = 4.2174882888793945
I0123 13:50:21.554445 139700910706688 ddar.py:60] Depth 9/1000 time = 4.685909032821655
I0123 13:50:25.711936 139700910706688 ddar.py:60] Depth 10/1000 time = 4.156895160675049
I0123 13:50:25.762410 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:50:25.762529 139700910706688 alphageometry.py:566] LM output (score=-3.176147): "m : P b f g m 17 ;"
I0123 13:50:25.762569 139700910706688 alphageometry.py:567] Translation: "m = on_pline m g b f"

I0123 13:50:25.762607 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g b f ? cong l h l j"
I0123 13:50:25.762774 139700910706688 graph.py:498] 
I0123 13:50:25.762832 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g b f ? cong l h l j
I0123 13:50:28.201217 139700910706688 ddar.py:60] Depth 1/1000 time = 2.406006336212158
I0123 13:50:30.143944 139700910706688 ddar.py:60] Depth 2/1000 time = 1.9425721168518066
I0123 13:50:33.219665 139700910706688 ddar.py:60] Depth 3/1000 time = 3.0755627155303955
I0123 13:50:36.559723 139700910706688 ddar.py:60] Depth 4/1000 time = 3.339895486831665
I0123 13:50:40.642052 139700910706688 ddar.py:60] Depth 5/1000 time = 4.082097291946411
I0123 13:50:45.322557 139700910706688 ddar.py:60] Depth 6/1000 time = 4.680191278457642
I0123 13:50:49.619482 139700910706688 ddar.py:60] Depth 7/1000 time = 4.296744108200073
I0123 13:50:54.368688 139700910706688 ddar.py:60] Depth 8/1000 time = 4.749009370803833
I0123 13:50:58.637740 139700910706688 ddar.py:60] Depth 9/1000 time = 4.268476486206055
I0123 13:50:58.686748 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:50:58.686874 139700910706688 alphageometry.py:566] LM output (score=-3.189591): "m : P b i j m 17 ;"
I0123 13:50:58.686917 139700910706688 alphageometry.py:567] Translation: "m = on_pline m j b i"

I0123 13:50:58.686957 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m j b i ? cong l h l j"
I0123 13:50:58.687125 139700910706688 graph.py:498] 
I0123 13:50:58.687183 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m j b i ? cong l h l j
I0123 13:51:00.681137 139700910706688 ddar.py:60] Depth 1/1000 time = 1.9552016258239746
I0123 13:51:03.071133 139700910706688 ddar.py:60] Depth 2/1000 time = 2.389726161956787
I0123 13:51:06.044096 139700910706688 ddar.py:60] Depth 3/1000 time = 2.9727818965911865
I0123 13:51:09.023427 139700910706688 ddar.py:60] Depth 4/1000 time = 2.9791648387908936
I0123 13:51:12.850862 139700910706688 ddar.py:60] Depth 5/1000 time = 3.8272721767425537
I0123 13:51:17.375921 139700910706688 ddar.py:60] Depth 6/1000 time = 4.524876356124878
I0123 13:51:21.626684 139700910706688 ddar.py:60] Depth 7/1000 time = 4.250584125518799
I0123 13:51:25.906230 139700910706688 ddar.py:60] Depth 8/1000 time = 4.279347658157349
I0123 13:51:30.594403 139700910706688 ddar.py:60] Depth 9/1000 time = 4.687968015670776
I0123 13:51:34.811349 139700910706688 ddar.py:60] Depth 10/1000 time = 4.216388463973999
I0123 13:51:34.862193 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:51:34.862330 139700910706688 alphageometry.py:540] Depth 1. There are 32 nodes to expand:
I0123 13:51:34.862371 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : P f g k m 17 ; x00
I0123 13:51:34.862401 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : P d f g m 17 ; x00
I0123 13:51:34.862427 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : P f g i m 17 ; x00
I0123 13:51:34.862451 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : C c i m 17 D c m i m 18 ; x00
I0123 13:51:34.862475 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : T d f d m 17 ; x00
I0123 13:51:34.862515 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : C c k m 17 D c m k m 18 ; x00
I0123 13:51:34.862541 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : P f g j m 17 ; x00
I0123 13:51:34.862566 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : P a m c e 17 ; x00
I0123 13:51:34.862589 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : P a b c m 17 T a b a m 18 ; x00
I0123 13:51:34.862612 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : P a b c m 17 ; x00
I0123 13:51:34.862635 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : P f g h m 17 ; x00
I0123 13:51:34.862658 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : T b i b m 17 ; x00
I0123 13:51:34.862680 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : P b i e m 17 ; x00
I0123 13:51:34.862703 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : D d e d m 17 ; x00
I0123 13:51:34.862726 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : P a m e f 17 ; x00
I0123 13:51:34.862749 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : P a m b f 17 ; x00
I0123 13:51:34.862776 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : P b i e m 17 P b m e i 18 ; x00
I0123 13:51:34.862800 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : T b i i m 17 ; x00
I0123 13:51:34.862823 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : T d e e m 17 ; x00
I0123 13:51:34.862845 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : P a m d f 17 ; x00
I0123 13:51:34.862868 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : D a d d m 17 ; x00
I0123 13:51:34.862889 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : P f m g i 17 ; x00
I0123 13:51:34.862911 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : P f g l m 17 ; x00
I0123 13:51:34.862934 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : P a m c g 17 ; x00
I0123 13:51:34.862956 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : P a m c f 17 ; x00
I0123 13:51:34.862977 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : T b e e m 17 ; x00
I0123 13:51:34.863003 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : P a m f g 17 ; x00
I0123 13:51:34.863026 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : P a m c i 17 ; x00
I0123 13:51:34.863048 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : P e f g m 17 ; x00
I0123 13:51:34.863070 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : P b i k m 17 ; x00
I0123 13:51:34.863092 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : P b f g m 17 ; x00
I0123 13:51:34.863113 139700910706688 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : P b i j m 17 ; x00
I0123 13:51:34.863138 139700910706688 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : P f g k m 17 ; x00
I0123 13:51:39.509128 139700910706688 alphageometry.py:566] LM output (score=-1.885101): "n : T k m m n 18 ;"
I0123 13:51:39.509283 139700910706688 alphageometry.py:567] Translation: "n = on_tline n m k m"

I0123 13:51:39.509327 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n m k m ? cong l h l j"
I0123 13:51:39.509488 139700910706688 graph.py:498] 
I0123 13:51:39.509544 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n m k m ? cong l h l j
I0123 13:51:42.109977 139700910706688 ddar.py:60] Depth 1/1000 time = 2.5657947063446045
I0123 13:51:44.186976 139700910706688 ddar.py:60] Depth 2/1000 time = 2.076840877532959
I0123 13:51:47.393976 139700910706688 ddar.py:60] Depth 3/1000 time = 3.206838846206665
I0123 13:51:50.875117 139700910706688 ddar.py:60] Depth 4/1000 time = 3.48095703125
I0123 13:51:55.572396 139700910706688 ddar.py:60] Depth 5/1000 time = 4.697093486785889
I0123 13:52:00.030071 139700910706688 ddar.py:60] Depth 6/1000 time = 4.45746111869812
I0123 13:52:05.020554 139700910706688 ddar.py:60] Depth 7/1000 time = 4.990300893783569
I0123 13:52:09.584566 139700910706688 ddar.py:60] Depth 8/1000 time = 4.563845157623291
I0123 13:52:14.071190 139700910706688 ddar.py:60] Depth 9/1000 time = 4.485938549041748
I0123 13:52:14.126075 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:52:14.126165 139700910706688 alphageometry.py:566] LM output (score=-2.045099): "n : T b i b n 18 ;"
I0123 13:52:14.126204 139700910706688 alphageometry.py:567] Translation: "n = on_tline n b b i"

I0123 13:52:14.126243 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n b b i ? cong l h l j"
I0123 13:52:14.126423 139700910706688 graph.py:498] 
I0123 13:52:14.126480 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n b b i ? cong l h l j
I0123 13:52:16.195381 139700910706688 ddar.py:60] Depth 1/1000 time = 2.0309205055236816
I0123 13:52:19.296986 139700910706688 ddar.py:60] Depth 2/1000 time = 3.1014351844787598
I0123 13:52:22.279562 139700910706688 ddar.py:60] Depth 3/1000 time = 2.9824085235595703
I0123 13:52:25.924594 139700910706688 ddar.py:60] Depth 4/1000 time = 3.644874334335327
I0123 13:52:30.295777 139700910706688 ddar.py:60] Depth 5/1000 time = 4.371018409729004
I0123 13:52:35.324425 139700910706688 ddar.py:60] Depth 6/1000 time = 5.02847146987915
I0123 13:52:40.055600 139700910706688 ddar.py:60] Depth 7/1000 time = 4.730958700180054
I0123 13:52:45.276047 139700910706688 ddar.py:60] Depth 8/1000 time = 5.220158815383911
I0123 13:52:49.910798 139700910706688 ddar.py:60] Depth 9/1000 time = 4.63413667678833
I0123 13:52:49.970133 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:52:49.970198 139700910706688 alphageometry.py:566] LM output (score=-2.168046): "n : T j k k n 18 ;"
I0123 13:52:49.970234 139700910706688 alphageometry.py:567] Translation: "n = on_tline n k j k"

I0123 13:52:49.970271 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n k j k ? cong l h l j"
I0123 13:52:49.970454 139700910706688 graph.py:498] 
I0123 13:52:49.970516 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n k j k ? cong l h l j
I0123 13:52:52.044631 139700910706688 ddar.py:60] Depth 1/1000 time = 2.0378329753875732
I0123 13:52:54.677711 139700910706688 ddar.py:60] Depth 2/1000 time = 2.6329288482666016
I0123 13:52:57.567099 139700910706688 ddar.py:60] Depth 3/1000 time = 2.8892223834991455
I0123 13:53:01.393487 139700910706688 ddar.py:60] Depth 4/1000 time = 3.8261923789978027
I0123 13:53:05.619212 139700910706688 ddar.py:60] Depth 5/1000 time = 4.2254416942596436
I0123 13:53:10.533289 139700910706688 ddar.py:60] Depth 6/1000 time = 4.913901090621948
I0123 13:53:15.178675 139700910706688 ddar.py:60] Depth 7/1000 time = 4.645204067230225
I0123 13:53:20.417844 139700910706688 ddar.py:60] Depth 8/1000 time = 5.238964080810547
I0123 13:53:25.145382 139700910706688 ddar.py:60] Depth 9/1000 time = 4.727320671081543
I0123 13:53:29.819669 139700910706688 ddar.py:60] Depth 10/1000 time = 4.6737024784088135
I0123 13:53:29.879375 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:53:29.879439 139700910706688 alphageometry.py:566] LM output (score=-2.273990): "n : T k m k n 18 ;"
I0123 13:53:29.879474 139700910706688 alphageometry.py:567] Translation: "n = on_tline n k k m"

I0123 13:53:29.879511 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n k k m ? cong l h l j"
I0123 13:53:29.879687 139700910706688 graph.py:498] 
I0123 13:53:29.879748 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n k k m ? cong l h l j
I0123 13:53:32.058202 139700910706688 ddar.py:60] Depth 1/1000 time = 2.1403932571411133
I0123 13:53:34.590204 139700910706688 ddar.py:60] Depth 2/1000 time = 2.531834363937378
I0123 13:53:37.368673 139700910706688 ddar.py:60] Depth 3/1000 time = 2.778252601623535
I0123 13:53:41.102170 139700910706688 ddar.py:60] Depth 4/1000 time = 3.7332217693328857
I0123 13:53:45.199883 139700910706688 ddar.py:60] Depth 5/1000 time = 4.0975501537323
I0123 13:53:50.035254 139700910706688 ddar.py:60] Depth 6/1000 time = 4.8351850509643555
I0123 13:53:54.614720 139700910706688 ddar.py:60] Depth 7/1000 time = 4.579295635223389
I0123 13:53:59.205842 139700910706688 ddar.py:60] Depth 8/1000 time = 4.590924024581909
I0123 13:54:04.212511 139700910706688 ddar.py:60] Depth 9/1000 time = 5.006455183029175
I0123 13:54:08.716814 139700910706688 ddar.py:60] Depth 10/1000 time = 4.503620147705078
I0123 13:54:08.771438 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:54:08.771507 139700910706688 alphageometry.py:566] LM output (score=-2.379565): "n : T j k m n 18 ;"
I0123 13:54:08.771541 139700910706688 alphageometry.py:567] Translation: "n = on_tline n m j k"

I0123 13:54:08.771578 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n m j k ? cong l h l j"
I0123 13:54:08.771752 139700910706688 graph.py:498] 
I0123 13:54:08.771813 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n m j k ? cong l h l j
I0123 13:54:10.873787 139700910706688 ddar.py:60] Depth 1/1000 time = 2.065739393234253
I0123 13:54:13.516035 139700910706688 ddar.py:60] Depth 2/1000 time = 2.6420841217041016
I0123 13:54:16.938599 139700910706688 ddar.py:60] Depth 3/1000 time = 3.4223859310150146
I0123 13:54:20.310989 139700910706688 ddar.py:60] Depth 4/1000 time = 3.3721988201141357
I0123 13:54:24.550433 139700910706688 ddar.py:60] Depth 5/1000 time = 4.239258766174316
I0123 13:54:29.062453 139700910706688 ddar.py:60] Depth 6/1000 time = 4.511850357055664
I0123 13:54:34.289025 139700910706688 ddar.py:60] Depth 7/1000 time = 5.226377964019775
I0123 13:54:39.050011 139700910706688 ddar.py:60] Depth 8/1000 time = 4.760754823684692
I0123 13:54:43.770834 139700910706688 ddar.py:60] Depth 9/1000 time = 4.720641374588013
I0123 13:54:48.942090 139700910706688 ddar.py:60] Depth 10/1000 time = 5.17067289352417
I0123 13:54:49.001837 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:54:49.001903 139700910706688 alphageometry.py:566] LM output (score=-2.531593): "n : T b i i n 18 ;"
I0123 13:54:49.001936 139700910706688 alphageometry.py:567] Translation: "n = on_tline n i b i"

I0123 13:54:49.001972 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n i b i ? cong l h l j"
I0123 13:54:49.002141 139700910706688 graph.py:498] 
I0123 13:54:49.002197 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n i b i ? cong l h l j
I0123 13:54:51.166312 139700910706688 ddar.py:60] Depth 1/1000 time = 2.1285483837127686
I0123 13:54:53.949817 139700910706688 ddar.py:60] Depth 2/1000 time = 2.78334379196167
I0123 13:54:56.412742 139700910706688 ddar.py:60] Depth 3/1000 time = 2.462747573852539
I0123 13:55:00.225670 139700910706688 ddar.py:60] Depth 4/1000 time = 3.812758207321167
I0123 13:55:04.508061 139700910706688 ddar.py:60] Depth 5/1000 time = 4.282218933105469
I0123 13:55:09.037750 139700910706688 ddar.py:60] Depth 6/1000 time = 4.5295164585113525
I0123 13:55:14.320265 139700910706688 ddar.py:60] Depth 7/1000 time = 5.282323360443115
I0123 13:55:19.115122 139700910706688 ddar.py:60] Depth 8/1000 time = 4.794663906097412
I0123 13:55:23.911829 139700910706688 ddar.py:60] Depth 9/1000 time = 4.796534061431885
I0123 13:55:28.589766 139700910706688 ddar.py:60] Depth 10/1000 time = 4.677365779876709
I0123 13:55:28.648256 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:55:28.648333 139700910706688 alphageometry.py:566] LM output (score=-2.564163): "n : T d f d n 18 ;"
I0123 13:55:28.648369 139700910706688 alphageometry.py:567] Translation: "n = on_tline n d d f"

I0123 13:55:28.648405 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n d d f ? cong l h l j"
I0123 13:55:28.648573 139700910706688 graph.py:498] 
I0123 13:55:28.648632 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n d d f ? cong l h l j
I0123 13:55:30.916854 139700910706688 ddar.py:60] Depth 1/1000 time = 2.2312028408050537
I0123 13:55:33.730652 139700910706688 ddar.py:60] Depth 2/1000 time = 2.813521146774292
I0123 13:55:36.770143 139700910706688 ddar.py:60] Depth 3/1000 time = 3.0393128395080566
I0123 13:55:40.736672 139700910706688 ddar.py:60] Depth 4/1000 time = 3.9663617610931396
I0123 13:55:45.078868 139700910706688 ddar.py:60] Depth 5/1000 time = 4.3420186042785645
I0123 13:55:49.670114 139700910706688 ddar.py:60] Depth 6/1000 time = 4.591055870056152
I0123 13:55:54.480754 139700910706688 ddar.py:60] Depth 7/1000 time = 4.8104448318481445
I0123 13:55:59.230895 139700910706688 ddar.py:60] Depth 8/1000 time = 4.749962091445923
I0123 13:56:04.479614 139700910706688 ddar.py:60] Depth 9/1000 time = 5.248550891876221
I0123 13:56:09.219001 139700910706688 ddar.py:60] Depth 10/1000 time = 4.738744258880615
I0123 13:56:14.552853 139700910706688 ddar.py:60] Depth 11/1000 time = 5.305056571960449
I0123 13:56:19.415123 139700910706688 ddar.py:60] Depth 12/1000 time = 4.831818580627441
I0123 13:56:19.417280 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:56:19.417340 139700910706688 alphageometry.py:566] LM output (score=-2.597965): "n : T g i i n 18 ;"
I0123 13:56:19.417375 139700910706688 alphageometry.py:567] Translation: "n = on_tline n i g i"

I0123 13:56:19.417410 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n i g i ? cong l h l j"
I0123 13:56:19.417587 139700910706688 graph.py:498] 
I0123 13:56:19.417653 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n i g i ? cong l h l j
I0123 13:56:21.114506 139700910706688 ddar.py:60] Depth 1/1000 time = 1.6597449779510498
I0123 13:56:23.798561 139700910706688 ddar.py:60] Depth 2/1000 time = 2.6838996410369873
I0123 13:56:26.747775 139700910706688 ddar.py:60] Depth 3/1000 time = 2.949044704437256
I0123 13:56:30.167561 139700910706688 ddar.py:60] Depth 4/1000 time = 3.4195852279663086
I0123 13:56:34.936749 139700910706688 ddar.py:60] Depth 5/1000 time = 4.768989086151123
I0123 13:56:39.478483 139700910706688 ddar.py:60] Depth 6/1000 time = 4.541550159454346
I0123 13:56:44.170850 139700910706688 ddar.py:60] Depth 7/1000 time = 4.692207336425781
I0123 13:56:49.465530 139700910706688 ddar.py:60] Depth 8/1000 time = 5.294425964355469
I0123 13:56:54.280247 139700910706688 ddar.py:60] Depth 9/1000 time = 4.814202785491943
I0123 13:56:58.955578 139700910706688 ddar.py:60] Depth 10/1000 time = 4.6747095584869385
I0123 13:56:59.015574 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:56:59.015651 139700910706688 alphageometry.py:566] LM output (score=-2.792511): "n : T k j m n 18 ;"
I0123 13:56:59.015686 139700910706688 alphageometry.py:567] Translation: "n = on_tline n m k j"

I0123 13:56:59.015722 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n m k j ? cong l h l j"
I0123 13:56:59.015903 139700910706688 graph.py:498] 
I0123 13:56:59.015962 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n m k j ? cong l h l j
I0123 13:57:01.195759 139700910706688 ddar.py:60] Depth 1/1000 time = 2.1394433975219727
I0123 13:57:03.901705 139700910706688 ddar.py:60] Depth 2/1000 time = 2.705775260925293
I0123 13:57:06.334687 139700910706688 ddar.py:60] Depth 3/1000 time = 2.4327445030212402
I0123 13:57:09.979568 139700910706688 ddar.py:60] Depth 4/1000 time = 3.6445987224578857
I0123 13:57:14.082799 139700910706688 ddar.py:60] Depth 5/1000 time = 4.10306453704834
I0123 13:57:18.569896 139700910706688 ddar.py:60] Depth 6/1000 time = 4.486926794052124
I0123 13:57:23.300837 139700910706688 ddar.py:60] Depth 7/1000 time = 4.730759143829346
I0123 13:57:28.136633 139700910706688 ddar.py:60] Depth 8/1000 time = 4.835592746734619
I0123 13:57:33.421499 139700910706688 ddar.py:60] Depth 9/1000 time = 5.284616470336914
I0123 13:57:38.182312 139700910706688 ddar.py:60] Depth 10/1000 time = 4.76022744178772
I0123 13:57:38.242464 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:57:38.242543 139700910706688 alphageometry.py:566] LM output (score=-2.847018): "n : P d f g n 18 ;"
I0123 13:57:38.242580 139700910706688 alphageometry.py:567] Translation: "n = on_pline n g d f"

I0123 13:57:38.242617 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_pline n g d f ? cong l h l j"
I0123 13:57:38.242795 139700910706688 graph.py:498] 
I0123 13:57:38.242857 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_pline n g d f ? cong l h l j
I0123 13:57:40.055412 139700910706688 ddar.py:60] Depth 1/1000 time = 1.7681078910827637
I0123 13:57:42.697576 139700910706688 ddar.py:60] Depth 2/1000 time = 2.6419928073883057
I0123 13:57:45.528458 139700910706688 ddar.py:60] Depth 3/1000 time = 2.8306491374969482
I0123 13:57:48.592759 139700910706688 ddar.py:60] Depth 4/1000 time = 3.0640242099761963
I0123 13:57:52.620182 139700910706688 ddar.py:60] Depth 5/1000 time = 4.027246475219727
I0123 13:57:57.003663 139700910706688 ddar.py:60] Depth 6/1000 time = 4.383309841156006
I0123 13:58:02.182475 139700910706688 ddar.py:60] Depth 7/1000 time = 5.178634166717529
I0123 13:58:06.908678 139700910706688 ddar.py:60] Depth 8/1000 time = 4.726002216339111
I0123 13:58:11.568794 139700910706688 ddar.py:60] Depth 9/1000 time = 4.659904956817627
I0123 13:58:16.170018 139700910706688 ddar.py:60] Depth 10/1000 time = 4.600557327270508
I0123 13:58:16.225199 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:58:16.225271 139700910706688 alphageometry.py:566] LM output (score=-2.851350): "n : T g i g n 18 ;"
I0123 13:58:16.225307 139700910706688 alphageometry.py:567] Translation: "n = on_tline n g g i"

I0123 13:58:16.225345 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n g g i ? cong l h l j"
I0123 13:58:16.225514 139700910706688 graph.py:498] 
I0123 13:58:16.225572 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n g g i ? cong l h l j
I0123 13:58:18.416919 139700910706688 ddar.py:60] Depth 1/1000 time = 2.1549973487854004
I0123 13:58:21.203099 139700910706688 ddar.py:60] Depth 2/1000 time = 2.786008596420288
I0123 13:58:24.294702 139700910706688 ddar.py:60] Depth 3/1000 time = 3.0914087295532227
I0123 13:58:27.212896 139700910706688 ddar.py:60] Depth 4/1000 time = 2.9180078506469727
I0123 13:58:32.065986 139700910706688 ddar.py:60] Depth 5/1000 time = 4.852914094924927
I0123 13:58:36.681433 139700910706688 ddar.py:60] Depth 6/1000 time = 4.61506462097168
I0123 13:58:41.520876 139700910706688 ddar.py:60] Depth 7/1000 time = 4.839266538619995
I0123 13:58:46.375905 139700910706688 ddar.py:60] Depth 8/1000 time = 4.854828357696533
I0123 13:58:51.174195 139700910706688 ddar.py:60] Depth 9/1000 time = 4.798090696334839
I0123 13:58:56.493750 139700910706688 ddar.py:60] Depth 10/1000 time = 5.318912744522095
I0123 13:58:56.553668 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:58:56.553739 139700910706688 alphageometry.py:566] LM output (score=-2.862568): "n : T d e e n 18 ;"
I0123 13:58:56.553774 139700910706688 alphageometry.py:567] Translation: "n = on_tline n e d e"

I0123 13:58:56.553812 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n e d e ? cong l h l j"
I0123 13:58:56.553981 139700910706688 graph.py:498] 
I0123 13:58:56.554039 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n e d e ? cong l h l j
I0123 13:58:58.344584 139700910706688 ddar.py:60] Depth 1/1000 time = 1.7531697750091553
I0123 13:59:01.098761 139700910706688 ddar.py:60] Depth 2/1000 time = 2.753960132598877
I0123 13:59:04.093811 139700910706688 ddar.py:60] Depth 3/1000 time = 2.994757890701294
I0123 13:59:07.641522 139700910706688 ddar.py:60] Depth 4/1000 time = 3.5475289821624756
I0123 13:59:12.393899 139700910706688 ddar.py:60] Depth 5/1000 time = 4.752197742462158
I0123 13:59:16.864827 139700910706688 ddar.py:60] Depth 6/1000 time = 4.470728635787964
I0123 13:59:21.487065 139700910706688 ddar.py:60] Depth 7/1000 time = 4.62200140953064
I0123 13:59:26.098000 139700910706688 ddar.py:60] Depth 8/1000 time = 4.610604286193848
I0123 13:59:30.633453 139700910706688 ddar.py:60] Depth 9/1000 time = 4.534830570220947
I0123 13:59:30.687866 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:59:30.687950 139700910706688 alphageometry.py:566] LM output (score=-2.901249): "n : T i j i n 18 ;"
I0123 13:59:30.687987 139700910706688 alphageometry.py:567] Translation: "n = on_tline n i i j"

I0123 13:59:30.688025 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n i i j ? cong l h l j"
I0123 13:59:30.688216 139700910706688 graph.py:498] 
I0123 13:59:30.688277 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n i i j ? cong l h l j
I0123 13:59:32.411429 139700910706688 ddar.py:60] Depth 1/1000 time = 1.6859807968139648
I0123 13:59:35.124573 139700910706688 ddar.py:60] Depth 2/1000 time = 2.7129909992218018
I0123 13:59:38.159379 139700910706688 ddar.py:60] Depth 3/1000 time = 3.0346107482910156
I0123 13:59:41.892886 139700910706688 ddar.py:60] Depth 4/1000 time = 3.7333133220672607
I0123 13:59:46.274079 139700910706688 ddar.py:60] Depth 5/1000 time = 4.380979299545288
I0123 13:59:51.398855 139700910706688 ddar.py:60] Depth 6/1000 time = 5.124597787857056
I0123 13:59:56.154192 139700910706688 ddar.py:60] Depth 7/1000 time = 4.755155086517334
I0123 14:00:01.018993 139700910706688 ddar.py:60] Depth 8/1000 time = 4.864604949951172
I0123 14:00:05.141652 139700910706688 ddar.py:60] Depth 9/1000 time = 4.1220526695251465
I0123 14:00:05.196806 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:00:05.196896 139700910706688 alphageometry.py:566] LM output (score=-2.961003): "n : T b i m n 18 ;"
I0123 14:00:05.196933 139700910706688 alphageometry.py:567] Translation: "n = on_tline n m b i"

I0123 14:00:05.196971 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n m b i ? cong l h l j"
I0123 14:00:05.197143 139700910706688 graph.py:498] 
I0123 14:00:05.197206 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n m b i ? cong l h l j
I0123 14:00:07.408719 139700910706688 ddar.py:60] Depth 1/1000 time = 2.1750080585479736
I0123 14:00:10.187038 139700910706688 ddar.py:60] Depth 2/1000 time = 2.7781598567962646
I0123 14:00:13.229736 139700910706688 ddar.py:60] Depth 3/1000 time = 3.042524814605713
I0123 14:00:16.172619 139700910706688 ddar.py:60] Depth 4/1000 time = 2.9426562786102295
I0123 14:00:21.147824 139700910706688 ddar.py:60] Depth 5/1000 time = 4.974899053573608
I0123 14:00:25.788570 139700910706688 ddar.py:60] Depth 6/1000 time = 4.640566110610962
I0123 14:00:30.610752 139700910706688 ddar.py:60] Depth 7/1000 time = 4.8219993114471436
I0123 14:00:35.527022 139700910706688 ddar.py:60] Depth 8/1000 time = 4.916039228439331
I0123 14:00:40.419908 139700910706688 ddar.py:60] Depth 9/1000 time = 4.892571449279785
I0123 14:00:45.253140 139700910706688 ddar.py:60] Depth 10/1000 time = 4.8326499462127686
I0123 14:00:45.312372 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:00:45.312466 139700910706688 alphageometry.py:566] LM output (score=-2.969241): "n : P f n k m 18 ;"
I0123 14:00:45.312504 139700910706688 alphageometry.py:567] Translation: "n = on_pline n f k m"

I0123 14:00:45.312542 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_pline n f k m ? cong l h l j"
I0123 14:00:45.312717 139700910706688 graph.py:498] 
I0123 14:00:45.312777 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_pline n f k m ? cong l h l j
I0123 14:00:47.104238 139700910706688 ddar.py:60] Depth 1/1000 time = 1.7552416324615479
I0123 14:00:50.650029 139700910706688 ddar.py:60] Depth 2/1000 time = 3.5456390380859375
I0123 14:00:53.956504 139700910706688 ddar.py:60] Depth 3/1000 time = 3.306253671646118
I0123 14:00:58.173063 139700910706688 ddar.py:60] Depth 4/1000 time = 4.216286897659302
I0123 14:01:03.199607 139700910706688 ddar.py:60] Depth 5/1000 time = 5.026382207870483
I0123 14:01:08.497551 139700910706688 ddar.py:60] Depth 6/1000 time = 5.297766208648682
I0123 14:01:13.998724 139700910706688 ddar.py:60] Depth 7/1000 time = 5.500920295715332
I0123 14:01:19.504812 139700910706688 ddar.py:60] Depth 8/1000 time = 5.505793333053589
I0123 14:01:25.016420 139700910706688 ddar.py:60] Depth 9/1000 time = 5.5114288330078125
I0123 14:01:30.496642 139700910706688 ddar.py:60] Depth 10/1000 time = 5.47956109046936
I0123 14:01:30.551110 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:01:30.551205 139700910706688 alphageometry.py:566] LM output (score=-2.972204): "n : T c i c n 18 ;"
I0123 14:01:30.551241 139700910706688 alphageometry.py:567] Translation: "n = on_tline n c c i"

I0123 14:01:30.551293 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n c c i ? cong l h l j"
I0123 14:01:30.551483 139700910706688 graph.py:498] 
I0123 14:01:30.551542 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n c c i ? cong l h l j
I0123 14:01:32.331010 139700910706688 ddar.py:60] Depth 1/1000 time = 1.7418420314788818
I0123 14:01:35.056785 139700910706688 ddar.py:60] Depth 2/1000 time = 2.725593328475952
I0123 14:01:38.020461 139700910706688 ddar.py:60] Depth 3/1000 time = 2.963514804840088
I0123 14:01:41.440000 139700910706688 ddar.py:60] Depth 4/1000 time = 3.4193789958953857
I0123 14:01:45.803404 139700910706688 ddar.py:60] Depth 5/1000 time = 4.363224506378174
I0123 14:01:50.483242 139700910706688 ddar.py:60] Depth 6/1000 time = 4.6795899868011475
I0123 14:01:54.749702 139700910706688 ddar.py:60] Depth 7/1000 time = 4.266157627105713
I0123 14:02:00.079225 139700910706688 ddar.py:60] Depth 8/1000 time = 5.329299688339233
I0123 14:02:04.311857 139700910706688 ddar.py:60] Depth 9/1000 time = 4.232441186904907
I0123 14:02:09.043957 139700910706688 ddar.py:60] Depth 10/1000 time = 4.73143458366394
I0123 14:02:09.102589 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:02:09.102677 139700910706688 alphageometry.py:566] LM output (score=-2.973814): "n : T h i i n 18 ;"
I0123 14:02:09.102712 139700910706688 alphageometry.py:567] Translation: "n = on_tline n i h i"

I0123 14:02:09.102769 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n i h i ? cong l h l j"
I0123 14:02:09.102955 139700910706688 graph.py:498] 
I0123 14:02:09.103013 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n i h i ? cong l h l j
I0123 14:02:11.395290 139700910706688 ddar.py:60] Depth 1/1000 time = 2.2558469772338867
I0123 14:02:14.235473 139700910706688 ddar.py:60] Depth 2/1000 time = 2.840012788772583
I0123 14:02:16.853564 139700910706688 ddar.py:60] Depth 3/1000 time = 2.617920398712158
I0123 14:02:20.344812 139700910706688 ddar.py:60] Depth 4/1000 time = 3.4910662174224854
I0123 14:02:25.289696 139700910706688 ddar.py:60] Depth 5/1000 time = 4.944716930389404
I0123 14:02:30.108628 139700910706688 ddar.py:60] Depth 6/1000 time = 4.8187127113342285
I0123 14:02:34.451596 139700910706688 ddar.py:60] Depth 7/1000 time = 4.342772722244263
I0123 14:02:39.921623 139700910706688 ddar.py:60] Depth 8/1000 time = 5.469841003417969
I0123 14:02:44.887632 139700910706688 ddar.py:60] Depth 9/1000 time = 4.965760946273804
I0123 14:02:49.831577 139700910706688 ddar.py:60] Depth 10/1000 time = 4.943212985992432
I0123 14:02:49.890978 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:02:49.891045 139700910706688 alphageometry.py:566] LM output (score=-3.017389): "n : T c i i n 18 ;"
I0123 14:02:49.891080 139700910706688 alphageometry.py:567] Translation: "n = on_tline n i c i"

I0123 14:02:49.891117 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n i c i ? cong l h l j"
I0123 14:02:49.891293 139700910706688 graph.py:498] 
I0123 14:02:49.891352 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n i c i ? cong l h l j
I0123 14:02:51.636448 139700910706688 ddar.py:60] Depth 1/1000 time = 1.708461046218872
I0123 14:02:54.442837 139700910706688 ddar.py:60] Depth 2/1000 time = 2.8062236309051514
I0123 14:02:56.987903 139700910706688 ddar.py:60] Depth 3/1000 time = 2.5449116230010986
I0123 14:03:00.750810 139700910706688 ddar.py:60] Depth 4/1000 time = 3.762723207473755
I0123 14:03:05.358232 139700910706688 ddar.py:60] Depth 5/1000 time = 4.607208013534546
I0123 14:03:10.119667 139700910706688 ddar.py:60] Depth 6/1000 time = 4.761152267456055
I0123 14:03:14.980879 139700910706688 ddar.py:60] Depth 7/1000 time = 4.86103367805481
I0123 14:03:19.848482 139700910706688 ddar.py:60] Depth 8/1000 time = 4.867426872253418
I0123 14:03:24.752538 139700910706688 ddar.py:60] Depth 9/1000 time = 4.9034082889556885
I0123 14:03:24.810658 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:03:24.810742 139700910706688 alphageometry.py:566] LM output (score=-3.023965): "n : P i j l n 18 ;"
I0123 14:03:24.810781 139700910706688 alphageometry.py:567] Translation: "n = on_pline n l i j"

I0123 14:03:24.810824 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_pline n l i j ? cong l h l j"
I0123 14:03:24.810997 139700910706688 graph.py:498] 
I0123 14:03:24.811058 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_pline n l i j ? cong l h l j
I0123 14:03:26.600897 139700910706688 ddar.py:60] Depth 1/1000 time = 1.7527461051940918
I0123 14:03:29.391805 139700910706688 ddar.py:60] Depth 2/1000 time = 2.790748357772827
I0123 14:03:31.825608 139700910706688 ddar.py:60] Depth 3/1000 time = 2.433627128601074
I0123 14:03:35.189417 139700910706688 ddar.py:60] Depth 4/1000 time = 3.3636252880096436
I0123 14:03:39.375797 139700910706688 ddar.py:60] Depth 5/1000 time = 4.186204671859741
I0123 14:03:43.896473 139700910706688 ddar.py:60] Depth 6/1000 time = 4.520467281341553
I0123 14:03:48.491823 139700910706688 ddar.py:60] Depth 7/1000 time = 4.59515118598938
I0123 14:03:53.081834 139700910706688 ddar.py:60] Depth 8/1000 time = 4.589831590652466
I0123 14:03:57.720879 139700910706688 ddar.py:60] Depth 9/1000 time = 4.638849496841431
I0123 14:04:02.388567 139700910706688 ddar.py:60] Depth 10/1000 time = 4.667063474655151
I0123 14:04:02.441174 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:04:02.441257 139700910706688 alphageometry.py:566] LM output (score=-3.037703): "n : P a n k m 18 ;"
I0123 14:04:02.441295 139700910706688 alphageometry.py:567] Translation: "n = on_pline n a k m"

I0123 14:04:02.441338 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_pline n a k m ? cong l h l j"
I0123 14:04:02.441513 139700910706688 graph.py:498] 
I0123 14:04:02.441572 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_pline n a k m ? cong l h l j
I0123 14:04:04.304090 139700910706688 ddar.py:60] Depth 1/1000 time = 1.8248143196105957
I0123 14:04:07.102147 139700910706688 ddar.py:60] Depth 2/1000 time = 2.7978787422180176
I0123 14:04:09.503263 139700910706688 ddar.py:60] Depth 3/1000 time = 2.400926113128662
I0123 14:04:12.657783 139700910706688 ddar.py:60] Depth 4/1000 time = 3.15436053276062
I0123 14:04:16.770358 139700910706688 ddar.py:60] Depth 5/1000 time = 4.112407684326172
I0123 14:04:21.268658 139700910706688 ddar.py:60] Depth 6/1000 time = 4.498096704483032
I0123 14:04:25.984272 139700910706688 ddar.py:60] Depth 7/1000 time = 4.715404987335205
I0123 14:04:30.695795 139700910706688 ddar.py:60] Depth 8/1000 time = 4.71135687828064
I0123 14:04:35.430647 139700910706688 ddar.py:60] Depth 9/1000 time = 4.734670400619507
I0123 14:04:40.207117 139700910706688 ddar.py:60] Depth 10/1000 time = 4.775800466537476
I0123 14:04:40.262891 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:04:40.262956 139700910706688 alphageometry.py:566] LM output (score=-3.040097): "n : P j k m n 18 ;"
I0123 14:04:40.262991 139700910706688 alphageometry.py:567] Translation: "n = on_pline n m j k"

I0123 14:04:40.263027 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_pline n m j k ? cong l h l j"
I0123 14:04:40.263196 139700910706688 graph.py:498] 
I0123 14:04:40.263254 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_pline n m j k ? cong l h l j
I0123 14:04:42.101186 139700910706688 ddar.py:60] Depth 1/1000 time = 1.8014538288116455
I0123 14:04:44.841074 139700910706688 ddar.py:60] Depth 2/1000 time = 2.7397191524505615
I0123 14:04:47.169329 139700910706688 ddar.py:60] Depth 3/1000 time = 2.3280651569366455
I0123 14:04:50.272340 139700910706688 ddar.py:60] Depth 4/1000 time = 3.1028428077697754
I0123 14:04:54.363971 139700910706688 ddar.py:60] Depth 5/1000 time = 4.091392278671265
I0123 14:04:58.871454 139700910706688 ddar.py:60] Depth 6/1000 time = 4.507162809371948
I0123 14:05:03.528033 139700910706688 ddar.py:60] Depth 7/1000 time = 4.656399965286255
I0123 14:05:08.210285 139700910706688 ddar.py:60] Depth 8/1000 time = 4.682078123092651
I0123 14:05:12.930075 139700910706688 ddar.py:60] Depth 9/1000 time = 4.719549179077148
I0123 14:05:17.649368 139700910706688 ddar.py:60] Depth 10/1000 time = 4.718557834625244
I0123 14:05:17.704602 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:05:17.704667 139700910706688 alphageometry.py:566] LM output (score=-3.040462): "n : T a e c n 18 ;"
I0123 14:05:17.704702 139700910706688 alphageometry.py:567] Translation: "n = on_tline n c a e"

I0123 14:05:17.704738 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n c a e ? cong l h l j"
I0123 14:05:17.704915 139700910706688 graph.py:498] 
I0123 14:05:17.704975 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n c a e ? cong l h l j
I0123 14:05:19.495070 139700910706688 ddar.py:60] Depth 1/1000 time = 1.7461519241333008
I0123 14:05:22.375724 139700910706688 ddar.py:60] Depth 2/1000 time = 2.8804829120635986
I0123 14:05:24.814959 139700910706688 ddar.py:60] Depth 3/1000 time = 2.439067840576172
I0123 14:05:28.058447 139700910706688 ddar.py:60] Depth 4/1000 time = 3.2433207035064697
I0123 14:05:31.653796 139700910706688 ddar.py:60] Depth 5/1000 time = 3.5951194763183594
I0123 14:05:36.214047 139700910706688 ddar.py:60] Depth 6/1000 time = 4.559937000274658
I0123 14:05:40.964375 139700910706688 ddar.py:60] Depth 7/1000 time = 4.750143527984619
I0123 14:05:45.701701 139700910706688 ddar.py:60] Depth 8/1000 time = 4.737143039703369
I0123 14:05:50.451376 139700910706688 ddar.py:60] Depth 9/1000 time = 4.749432325363159
I0123 14:05:55.210223 139700910706688 ddar.py:60] Depth 10/1000 time = 4.75812029838562
I0123 14:05:55.264755 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:05:55.264832 139700910706688 alphageometry.py:566] LM output (score=-3.045475): "n : T k m i n 18 ;"
I0123 14:05:55.264867 139700910706688 alphageometry.py:567] Translation: "n = on_tline n i k m"

I0123 14:05:55.264904 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n i k m ? cong l h l j"
I0123 14:05:55.265081 139700910706688 graph.py:498] 
I0123 14:05:55.265140 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n i k m ? cong l h l j
I0123 14:05:57.704926 139700910706688 ddar.py:60] Depth 1/1000 time = 2.399813413619995
I0123 14:06:00.541238 139700910706688 ddar.py:60] Depth 2/1000 time = 2.8361427783966064
I0123 14:06:02.988462 139700910706688 ddar.py:60] Depth 3/1000 time = 2.447058916091919
I0123 14:06:06.484032 139700910706688 ddar.py:60] Depth 4/1000 time = 3.495404005050659
I0123 14:06:10.946340 139700910706688 ddar.py:60] Depth 5/1000 time = 4.462091684341431
I0123 14:06:15.539589 139700910706688 ddar.py:60] Depth 6/1000 time = 4.593031883239746
I0123 14:06:20.360417 139700910706688 ddar.py:60] Depth 7/1000 time = 4.820638656616211
I0123 14:06:25.200805 139700910706688 ddar.py:60] Depth 8/1000 time = 4.840215444564819
I0123 14:06:29.462913 139700910706688 ddar.py:60] Depth 9/1000 time = 4.2618567943573
I0123 14:06:34.898509 139700910706688 ddar.py:60] Depth 10/1000 time = 5.434818506240845
I0123 14:06:34.953227 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:06:34.953314 139700910706688 alphageometry.py:566] LM output (score=-3.090134): "n : T i k k n 18 ;"
I0123 14:06:34.953461 139700910706688 alphageometry.py:567] Translation: "n = on_tline n k i k"

I0123 14:06:34.953504 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n k i k ? cong l h l j"
I0123 14:06:34.953698 139700910706688 graph.py:498] 
I0123 14:06:34.953759 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n k i k ? cong l h l j
I0123 14:06:36.775211 139700910706688 ddar.py:60] Depth 1/1000 time = 1.7827835083007812
I0123 14:06:39.093104 139700910706688 ddar.py:60] Depth 2/1000 time = 2.3177261352539062
I0123 14:06:42.269870 139700910706688 ddar.py:60] Depth 3/1000 time = 3.176607370376587
I0123 14:06:46.208004 139700910706688 ddar.py:60] Depth 4/1000 time = 3.9379138946533203
I0123 14:06:50.234852 139700910706688 ddar.py:60] Depth 5/1000 time = 4.026562452316284
I0123 14:06:54.976725 139700910706688 ddar.py:60] Depth 6/1000 time = 4.741696357727051
I0123 14:06:59.840514 139700910706688 ddar.py:60] Depth 7/1000 time = 4.863624572753906
I0123 14:07:04.732959 139700910706688 ddar.py:60] Depth 8/1000 time = 4.89218807220459
I0123 14:07:09.649235 139700910706688 ddar.py:60] Depth 9/1000 time = 4.915497064590454
I0123 14:07:09.705522 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:07:09.705593 139700910706688 alphageometry.py:566] LM output (score=-3.096015): "n : T b i g n 18 ;"
I0123 14:07:09.705629 139700910706688 alphageometry.py:567] Translation: "n = on_tline n g b i"

I0123 14:07:09.705672 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n g b i ? cong l h l j"
I0123 14:07:09.705853 139700910706688 graph.py:498] 
I0123 14:07:09.705913 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n g b i ? cong l h l j
I0123 14:07:11.499664 139700910706688 ddar.py:60] Depth 1/1000 time = 1.756174087524414
I0123 14:07:14.411812 139700910706688 ddar.py:60] Depth 2/1000 time = 2.9119794368743896
I0123 14:07:17.596712 139700910706688 ddar.py:60] Depth 3/1000 time = 3.184696912765503
I0123 14:07:20.351143 139700910706688 ddar.py:60] Depth 4/1000 time = 2.7542498111724854
I0123 14:07:24.751580 139700910706688 ddar.py:60] Depth 5/1000 time = 4.400187730789185
I0123 14:07:29.538783 139700910706688 ddar.py:60] Depth 6/1000 time = 4.7868735790252686
I0123 14:07:34.508536 139700910706688 ddar.py:60] Depth 7/1000 time = 4.9695725440979
I0123 14:07:39.514887 139700910706688 ddar.py:60] Depth 8/1000 time = 5.006173372268677
I0123 14:07:44.603609 139700910706688 ddar.py:60] Depth 9/1000 time = 5.088514566421509
I0123 14:07:49.630880 139700910706688 ddar.py:60] Depth 10/1000 time = 5.026677370071411
I0123 14:07:49.692394 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:07:49.692461 139700910706688 alphageometry.py:566] LM output (score=-3.115665): "n : T e k k n 18 ;"
I0123 14:07:49.692497 139700910706688 alphageometry.py:567] Translation: "n = on_tline n k e k"

I0123 14:07:49.692536 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n k e k ? cong l h l j"
I0123 14:07:49.692715 139700910706688 graph.py:498] 
I0123 14:07:49.692777 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n k e k ? cong l h l j
I0123 14:07:51.514979 139700910706688 ddar.py:60] Depth 1/1000 time = 1.7833540439605713
I0123 14:07:54.491780 139700910706688 ddar.py:60] Depth 2/1000 time = 2.9766345024108887
I0123 14:07:57.730292 139700910706688 ddar.py:60] Depth 3/1000 time = 3.2383532524108887
I0123 14:08:00.782491 139700910706688 ddar.py:60] Depth 4/1000 time = 3.0519840717315674
I0123 14:08:05.361977 139700910706688 ddar.py:60] Depth 5/1000 time = 4.579193830490112
I0123 14:08:10.164509 139700910706688 ddar.py:60] Depth 6/1000 time = 4.8023459911346436
I0123 14:08:15.215478 139700910706688 ddar.py:60] Depth 7/1000 time = 5.050802946090698
I0123 14:08:20.306290 139700910706688 ddar.py:60] Depth 8/1000 time = 5.090578317642212
I0123 14:08:24.750936 139700910706688 ddar.py:60] Depth 9/1000 time = 4.444327354431152
I0123 14:08:29.704158 139700910706688 ddar.py:60] Depth 10/1000 time = 4.952637434005737
I0123 14:08:29.764446 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:08:29.764536 139700910706688 alphageometry.py:566] LM output (score=-3.146714): "n : P a e c n 18 ;"
I0123 14:08:29.764572 139700910706688 alphageometry.py:567] Translation: "n = on_pline n c a e"

I0123 14:08:29.764609 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_pline n c a e ? cong l h l j"
I0123 14:08:29.764787 139700910706688 graph.py:498] 
I0123 14:08:29.764850 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_pline n c a e ? cong l h l j
I0123 14:08:32.244302 139700910706688 ddar.py:60] Depth 1/1000 time = 2.4411637783050537
I0123 14:08:34.456678 139700910706688 ddar.py:60] Depth 2/1000 time = 2.212200880050659
I0123 14:08:37.548215 139700910706688 ddar.py:60] Depth 3/1000 time = 3.091297149658203
I0123 14:08:40.755704 139700910706688 ddar.py:60] Depth 4/1000 time = 3.2070746421813965
I0123 14:08:45.972530 139700910706688 ddar.py:60] Depth 5/1000 time = 5.216101408004761
I0123 14:08:50.520612 139700910706688 ddar.py:60] Depth 6/1000 time = 4.547496795654297
I0123 14:08:55.315450 139700910706688 ddar.py:60] Depth 7/1000 time = 4.794328451156616
I0123 14:08:59.430412 139700910706688 ddar.py:60] Depth 8/1000 time = 4.114506483078003
I0123 14:09:04.173036 139700910706688 ddar.py:60] Depth 9/1000 time = 4.742129564285278
I0123 14:09:08.870519 139700910706688 ddar.py:60] Depth 10/1000 time = 4.696527719497681
I0123 14:09:08.924242 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:09:08.924392 139700910706688 alphageometry.py:566] LM output (score=-3.178572): "n : T k m l n 18 ;"
I0123 14:09:08.924431 139700910706688 alphageometry.py:567] Translation: "n = on_tline n l k m"

I0123 14:09:08.924481 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n l k m ? cong l h l j"
I0123 14:09:08.924699 139700910706688 graph.py:498] 
I0123 14:09:08.924768 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n l k m ? cong l h l j
I0123 14:09:11.565116 139700910706688 ddar.py:60] Depth 1/1000 time = 2.594489574432373
I0123 14:09:13.830066 139700910706688 ddar.py:60] Depth 2/1000 time = 2.26472544670105
I0123 14:09:17.017986 139700910706688 ddar.py:60] Depth 3/1000 time = 3.187629461288452
I0123 14:09:19.956961 139700910706688 ddar.py:60] Depth 4/1000 time = 2.938631534576416
I0123 14:09:24.287314 139700910706688 ddar.py:60] Depth 5/1000 time = 4.330115795135498
I0123 14:09:28.982589 139700910706688 ddar.py:60] Depth 6/1000 time = 4.6949849128723145
I0123 14:09:33.812180 139700910706688 ddar.py:60] Depth 7/1000 time = 4.829305648803711
I0123 14:09:38.675317 139700910706688 ddar.py:60] Depth 8/1000 time = 4.862803220748901
I0123 14:09:43.562373 139700910706688 ddar.py:60] Depth 9/1000 time = 4.88662576675415
I0123 14:09:48.363612 139700910706688 ddar.py:60] Depth 10/1000 time = 4.800504922866821
I0123 14:09:48.417637 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:09:48.417737 139700910706688 alphageometry.py:566] LM output (score=-3.199686): "n : P i j m n 18 ;"
I0123 14:09:48.417773 139700910706688 alphageometry.py:567] Translation: "n = on_pline n m i j"

I0123 14:09:48.417811 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_pline n m i j ? cong l h l j"
I0123 14:09:48.418039 139700910706688 graph.py:498] 
I0123 14:09:48.418111 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_pline n m i j ? cong l h l j
I0123 14:09:50.306345 139700910706688 ddar.py:60] Depth 1/1000 time = 1.8501677513122559
I0123 14:09:53.189560 139700910706688 ddar.py:60] Depth 2/1000 time = 2.88289475440979
I0123 14:09:55.612960 139700910706688 ddar.py:60] Depth 3/1000 time = 2.4231295585632324
I0123 14:09:58.842175 139700910706688 ddar.py:60] Depth 4/1000 time = 3.228982925415039
I0123 14:10:02.280107 139700910706688 ddar.py:60] Depth 5/1000 time = 3.4376940727233887
I0123 14:10:06.688211 139700910706688 ddar.py:60] Depth 6/1000 time = 4.40775465965271
I0123 14:10:11.409600 139700910706688 ddar.py:60] Depth 7/1000 time = 4.720958709716797
I0123 14:10:16.085902 139700910706688 ddar.py:60] Depth 8/1000 time = 4.676048755645752
I0123 14:10:20.119858 139700910706688 ddar.py:60] Depth 9/1000 time = 4.033679485321045
I0123 14:10:24.773702 139700910706688 ddar.py:60] Depth 10/1000 time = 4.653114080429077
I0123 14:10:24.828024 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:10:24.828128 139700910706688 alphageometry.py:566] LM output (score=-3.204651): "n : T k m g n 18 ;"
I0123 14:10:24.828164 139700910706688 alphageometry.py:567] Translation: "n = on_tline n g k m"

I0123 14:10:24.828211 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n g k m ? cong l h l j"
I0123 14:10:24.828413 139700910706688 graph.py:498] 
I0123 14:10:24.828472 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n g k m ? cong l h l j
I0123 14:10:26.804764 139700910706688 ddar.py:60] Depth 1/1000 time = 1.939946174621582
I0123 14:10:29.732994 139700910706688 ddar.py:60] Depth 2/1000 time = 2.9279751777648926
I0123 14:10:32.199730 139700910706688 ddar.py:60] Depth 3/1000 time = 2.466512680053711
I0123 14:10:35.729701 139700910706688 ddar.py:60] Depth 4/1000 time = 3.5297415256500244
I0123 14:10:40.171569 139700910706688 ddar.py:60] Depth 5/1000 time = 4.441624402999878
I0123 14:10:44.878503 139700910706688 ddar.py:60] Depth 6/1000 time = 4.706613540649414
I0123 14:10:49.776452 139700910706688 ddar.py:60] Depth 7/1000 time = 4.897587537765503
I0123 14:10:54.646288 139700910706688 ddar.py:60] Depth 8/1000 time = 4.8695878982543945
I0123 14:10:58.827103 139700910706688 ddar.py:60] Depth 9/1000 time = 4.180532693862915
I0123 14:11:03.659194 139700910706688 ddar.py:60] Depth 10/1000 time = 4.8312764167785645
I0123 14:11:03.713386 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:11:03.713489 139700910706688 alphageometry.py:566] LM output (score=-3.392851): "n : T f n g i 18 ;"
I0123 14:11:03.713525 139700910706688 alphageometry.py:567] Translation: "n = on_tline n f g i"

I0123 14:11:03.713576 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n f g i ? cong l h l j"
I0123 14:11:03.713781 139700910706688 graph.py:498] 
I0123 14:11:03.713841 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_tline n f g i ? cong l h l j
I0123 14:11:06.251002 139700910706688 ddar.py:60] Depth 1/1000 time = 2.500274419784546
I0123 14:11:08.627536 139700910706688 ddar.py:60] Depth 2/1000 time = 2.3762829303741455
I0123 14:11:11.231901 139700910706688 ddar.py:60] Depth 3/1000 time = 2.6039350032806396
I0123 14:11:14.846420 139700910706688 ddar.py:60] Depth 4/1000 time = 3.6142892837524414
I0123 14:11:19.396086 139700910706688 ddar.py:60] Depth 5/1000 time = 4.54943060874939
I0123 14:11:24.276154 139700910706688 ddar.py:60] Depth 6/1000 time = 4.879780292510986
I0123 14:11:29.328701 139700910706688 ddar.py:60] Depth 7/1000 time = 5.052272081375122
I0123 14:11:33.695594 139700910706688 ddar.py:60] Depth 8/1000 time = 4.366645336151123
I0123 14:11:38.737751 139700910706688 ddar.py:60] Depth 9/1000 time = 5.041876554489136
I0123 14:11:43.777444 139700910706688 ddar.py:60] Depth 10/1000 time = 5.038975477218628
I0123 14:11:43.836346 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:11:43.836421 139700910706688 alphageometry.py:566] LM output (score=-3.764653): "n : P a n c e 18 ;"
I0123 14:11:43.836455 139700910706688 alphageometry.py:567] Translation: "n = on_pline n a c e"

I0123 14:11:43.836491 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_pline n a c e ? cong l h l j"
I0123 14:11:43.836671 139700910706688 graph.py:498] 
I0123 14:11:43.836727 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m k f g; n = on_pline n a c e ? cong l h l j
I0123 14:11:45.675524 139700910706688 ddar.py:60] Depth 1/1000 time = 1.801387071609497
I0123 14:11:48.570042 139700910706688 ddar.py:60] Depth 2/1000 time = 2.8942930698394775
I0123 14:11:51.045713 139700910706688 ddar.py:60] Depth 3/1000 time = 2.475440263748169
I0123 14:11:54.557432 139700910706688 ddar.py:60] Depth 4/1000 time = 3.511492967605591
I0123 14:11:58.220110 139700910706688 ddar.py:60] Depth 5/1000 time = 3.6623852252960205
I0123 14:12:02.745455 139700910706688 ddar.py:60] Depth 6/1000 time = 4.524947643280029
I0123 14:12:07.406365 139700910706688 ddar.py:60] Depth 7/1000 time = 4.660653591156006
I0123 14:12:12.158463 139700910706688 ddar.py:60] Depth 8/1000 time = 4.75183892250061
I0123 14:12:16.246539 139700910706688 ddar.py:60] Depth 9/1000 time = 4.087725877761841
I0123 14:12:20.971917 139700910706688 ddar.py:60] Depth 10/1000 time = 4.7245707511901855
I0123 14:12:21.023540 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:12:21.023653 139700910706688 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : P d f g m 17 ; x00
I0123 14:12:26.709571 139700910706688 alphageometry.py:566] LM output (score=-1.984327): "n : T b i b n 18 ;"
I0123 14:12:26.709803 139700910706688 alphageometry.py:567] Translation: "n = on_tline n b b i"

I0123 14:12:26.709847 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n b b i ? cong l h l j"
I0123 14:12:26.710012 139700910706688 graph.py:498] 
I0123 14:12:26.710091 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n b b i ? cong l h l j
I0123 14:12:28.585616 139700910706688 ddar.py:60] Depth 1/1000 time = 1.839939832687378
I0123 14:12:31.651587 139700910706688 ddar.py:60] Depth 2/1000 time = 3.0657331943511963
I0123 14:12:34.277798 139700910706688 ddar.py:60] Depth 3/1000 time = 2.6259765625
I0123 14:12:37.992552 139700910706688 ddar.py:60] Depth 4/1000 time = 3.7145230770111084
I0123 14:12:42.632287 139700910706688 ddar.py:60] Depth 5/1000 time = 4.639490842819214
I0123 14:12:47.597378 139700910706688 ddar.py:60] Depth 6/1000 time = 4.964810609817505
I0123 14:12:52.761898 139700910706688 ddar.py:60] Depth 7/1000 time = 5.164276838302612
I0123 14:12:57.237228 139700910706688 ddar.py:60] Depth 8/1000 time = 4.475064992904663
I0123 14:13:02.410512 139700910706688 ddar.py:60] Depth 9/1000 time = 5.173007249832153
I0123 14:13:07.544340 139700910706688 ddar.py:60] Depth 10/1000 time = 5.133162021636963
I0123 14:13:07.605110 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:13:07.605279 139700910706688 alphageometry.py:566] LM output (score=-2.027671): "n : T g i g n 18 ;"
I0123 14:13:07.605318 139700910706688 alphageometry.py:567] Translation: "n = on_tline n g g i"

I0123 14:13:07.605370 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n g g i ? cong l h l j"
I0123 14:13:07.605567 139700910706688 graph.py:498] 
I0123 14:13:07.605624 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n g g i ? cong l h l j
I0123 14:13:09.527932 139700910706688 ddar.py:60] Depth 1/1000 time = 1.8818731307983398
I0123 14:13:12.614795 139700910706688 ddar.py:60] Depth 2/1000 time = 3.0866286754608154
I0123 14:13:15.250662 139700910706688 ddar.py:60] Depth 3/1000 time = 2.6356263160705566
I0123 14:13:18.962402 139700910706688 ddar.py:60] Depth 4/1000 time = 3.7115137577056885
I0123 14:13:23.689540 139700910706688 ddar.py:60] Depth 5/1000 time = 4.726898670196533
I0123 14:13:28.009999 139700910706688 ddar.py:60] Depth 6/1000 time = 4.320173978805542
I0123 14:13:33.265099 139700910706688 ddar.py:60] Depth 7/1000 time = 5.254836797714233
I0123 14:13:38.461097 139700910706688 ddar.py:60] Depth 8/1000 time = 5.19571328163147
I0123 14:13:43.670368 139700910706688 ddar.py:60] Depth 9/1000 time = 5.208991527557373
I0123 14:13:48.855354 139700910706688 ddar.py:60] Depth 10/1000 time = 5.184286117553711
I0123 14:13:48.912763 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:13:48.912838 139700910706688 alphageometry.py:566] LM output (score=-2.131037): "n : T g i i n 18 ;"
I0123 14:13:48.912873 139700910706688 alphageometry.py:567] Translation: "n = on_tline n i g i"

I0123 14:13:48.912910 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n i g i ? cong l h l j"
I0123 14:13:48.913089 139700910706688 graph.py:498] 
I0123 14:13:48.913171 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n i g i ? cong l h l j
I0123 14:13:50.792553 139700910706688 ddar.py:60] Depth 1/1000 time = 1.8430423736572266
I0123 14:13:53.213425 139700910706688 ddar.py:60] Depth 2/1000 time = 2.4206502437591553
I0123 14:13:56.573684 139700910706688 ddar.py:60] Depth 3/1000 time = 3.359745979309082
I0123 14:13:59.702985 139700910706688 ddar.py:60] Depth 4/1000 time = 3.1289377212524414
I0123 14:14:04.393147 139700910706688 ddar.py:60] Depth 5/1000 time = 4.689896583557129
I0123 14:14:09.399439 139700910706688 ddar.py:60] Depth 6/1000 time = 5.006008625030518
I0123 14:14:13.884335 139700910706688 ddar.py:60] Depth 7/1000 time = 4.484657526016235
I0123 14:14:19.077916 139700910706688 ddar.py:60] Depth 8/1000 time = 5.1933324337005615
I0123 14:14:24.230532 139700910706688 ddar.py:60] Depth 9/1000 time = 5.152346611022949
I0123 14:14:29.443471 139700910706688 ddar.py:60] Depth 10/1000 time = 5.2122180461883545
I0123 14:14:29.501591 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:14:29.501697 139700910706688 alphageometry.py:566] LM output (score=-2.250983): "n : T j k k n 18 ;"
I0123 14:14:29.501734 139700910706688 alphageometry.py:567] Translation: "n = on_tline n k j k"

I0123 14:14:29.501783 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n k j k ? cong l h l j"
I0123 14:14:29.501978 139700910706688 graph.py:498] 
I0123 14:14:29.502035 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n k j k ? cong l h l j
I0123 14:14:31.405743 139700910706688 ddar.py:60] Depth 1/1000 time = 1.8676445484161377
I0123 14:14:34.515840 139700910706688 ddar.py:60] Depth 2/1000 time = 3.1098575592041016
I0123 14:14:37.171538 139700910706688 ddar.py:60] Depth 3/1000 time = 2.655472993850708
I0123 14:14:40.913737 139700910706688 ddar.py:60] Depth 4/1000 time = 3.7419631481170654
I0123 14:14:45.615238 139700910706688 ddar.py:60] Depth 5/1000 time = 4.7012715339660645
I0123 14:14:50.041940 139700910706688 ddar.py:60] Depth 6/1000 time = 4.426427125930786
I0123 14:14:55.182608 139700910706688 ddar.py:60] Depth 7/1000 time = 5.140443563461304
I0123 14:15:00.385707 139700910706688 ddar.py:60] Depth 8/1000 time = 5.2028632164001465
I0123 14:15:05.579126 139700910706688 ddar.py:60] Depth 9/1000 time = 5.193160057067871
I0123 14:15:10.842795 139700910706688 ddar.py:60] Depth 10/1000 time = 5.263002395629883
I0123 14:15:10.899780 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:15:10.899892 139700910706688 alphageometry.py:566] LM output (score=-2.416499): "n : T j k m n 18 ;"
I0123 14:15:10.899931 139700910706688 alphageometry.py:567] Translation: "n = on_tline n m j k"

I0123 14:15:10.899969 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n m j k ? cong l h l j"
I0123 14:15:10.900173 139700910706688 graph.py:498] 
I0123 14:15:10.900233 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n m j k ? cong l h l j
I0123 14:15:12.797108 139700910706688 ddar.py:60] Depth 1/1000 time = 1.8586583137512207
I0123 14:15:15.884019 139700910706688 ddar.py:60] Depth 2/1000 time = 3.0866823196411133
I0123 14:15:18.472891 139700910706688 ddar.py:60] Depth 3/1000 time = 2.5886199474334717
I0123 14:15:21.237831 139700910706688 ddar.py:60] Depth 4/1000 time = 2.76472806930542
I0123 14:15:25.749579 139700910706688 ddar.py:60] Depth 5/1000 time = 4.511521339416504
I0123 14:15:30.656669 139700910706688 ddar.py:60] Depth 6/1000 time = 4.906808853149414
I0123 14:15:35.841084 139700910706688 ddar.py:60] Depth 7/1000 time = 5.184155225753784
I0123 14:15:40.316549 139700910706688 ddar.py:60] Depth 8/1000 time = 4.475219011306763
I0123 14:15:45.562073 139700910706688 ddar.py:60] Depth 9/1000 time = 5.245248317718506
I0123 14:15:50.742307 139700910706688 ddar.py:60] Depth 10/1000 time = 5.179572343826294
I0123 14:15:50.801801 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:15:50.801883 139700910706688 alphageometry.py:566] LM output (score=-2.540552): "n : T b i i n 18 ;"
I0123 14:15:50.801918 139700910706688 alphageometry.py:567] Translation: "n = on_tline n i b i"

I0123 14:15:50.801956 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n i b i ? cong l h l j"
I0123 14:15:50.802136 139700910706688 graph.py:498] 
I0123 14:15:50.802192 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n i b i ? cong l h l j
I0123 14:15:52.744652 139700910706688 ddar.py:60] Depth 1/1000 time = 1.9051854610443115
I0123 14:15:55.212919 139700910706688 ddar.py:60] Depth 2/1000 time = 2.4679462909698486
I0123 14:15:58.595676 139700910706688 ddar.py:60] Depth 3/1000 time = 3.3825180530548096
I0123 14:16:01.682215 139700910706688 ddar.py:60] Depth 4/1000 time = 3.0862996578216553
I0123 14:16:06.408348 139700910706688 ddar.py:60] Depth 5/1000 time = 4.725895404815674
I0123 14:16:11.484645 139700910706688 ddar.py:60] Depth 6/1000 time = 5.076018810272217
I0123 14:16:15.977170 139700910706688 ddar.py:60] Depth 7/1000 time = 4.492302894592285
I0123 14:16:21.185077 139700910706688 ddar.py:60] Depth 8/1000 time = 5.207666635513306
I0123 14:16:26.447939 139700910706688 ddar.py:60] Depth 9/1000 time = 5.262587308883667
I0123 14:16:30.929598 139700910706688 ddar.py:60] Depth 10/1000 time = 4.480995178222656
I0123 14:16:30.986038 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:16:30.986135 139700910706688 alphageometry.py:566] LM output (score=-2.649073): "n : T b i g n 18 ;"
I0123 14:16:30.986172 139700910706688 alphageometry.py:567] Translation: "n = on_tline n g b i"

I0123 14:16:30.986212 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n g b i ? cong l h l j"
I0123 14:16:30.986424 139700910706688 graph.py:498] 
I0123 14:16:30.986479 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n g b i ? cong l h l j
I0123 14:16:33.616610 139700910706688 ddar.py:60] Depth 1/1000 time = 2.593074321746826
I0123 14:16:36.063919 139700910706688 ddar.py:60] Depth 2/1000 time = 2.44708514213562
I0123 14:16:38.745920 139700910706688 ddar.py:60] Depth 3/1000 time = 2.681776523590088
I0123 14:16:42.553344 139700910706688 ddar.py:60] Depth 4/1000 time = 3.8072094917297363
I0123 14:16:46.628167 139700910706688 ddar.py:60] Depth 5/1000 time = 4.074601888656616
I0123 14:16:51.677771 139700910706688 ddar.py:60] Depth 6/1000 time = 5.049322843551636
I0123 14:16:56.886769 139700910706688 ddar.py:60] Depth 7/1000 time = 5.208728313446045
I0123 14:17:02.133758 139700910706688 ddar.py:60] Depth 8/1000 time = 5.246729373931885
I0123 14:17:07.404584 139700910706688 ddar.py:60] Depth 9/1000 time = 5.270568370819092
I0123 14:17:11.924679 139700910706688 ddar.py:60] Depth 10/1000 time = 4.519429683685303
I0123 14:17:11.982387 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:17:11.982476 139700910706688 alphageometry.py:566] LM output (score=-2.780914): "n : D g i g n 18 D m i m n 19 ;"
I0123 14:17:11.982512 139700910706688 alphageometry.py:567] Translation: "n = on_circle n g i, on_circle n m i"

I0123 14:17:11.982550 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_circle n g i, on_circle n m i ? cong l h l j"
I0123 14:17:11.982729 139700910706688 graph.py:498] 
I0123 14:17:11.982792 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_circle n g i, on_circle n m i ? cong l h l j
I0123 14:17:14.739352 139700910706688 ddar.py:60] Depth 1/1000 time = 2.7012014389038086
I0123 14:17:17.474667 139700910706688 ddar.py:60] Depth 2/1000 time = 2.7350950241088867
I0123 14:17:20.418666 139700910706688 ddar.py:60] Depth 3/1000 time = 2.943737268447876
I0123 14:17:24.302900 139700910706688 ddar.py:60] Depth 4/1000 time = 3.884009838104248
I0123 14:17:29.273211 139700910706688 ddar.py:60] Depth 5/1000 time = 4.970072269439697
I0123 14:17:34.634336 139700910706688 ddar.py:60] Depth 6/1000 time = 5.360846519470215
I0123 14:17:39.469008 139700910706688 ddar.py:60] Depth 7/1000 time = 4.8344080448150635
I0123 14:17:45.012491 139700910706688 ddar.py:60] Depth 8/1000 time = 5.543236255645752
I0123 14:17:50.568015 139700910706688 ddar.py:60] Depth 9/1000 time = 5.55526328086853
I0123 14:17:56.139799 139700910706688 ddar.py:60] Depth 10/1000 time = 5.571094274520874
I0123 14:18:01.883414 139700910706688 ddar.py:60] Depth 11/1000 time = 5.677462816238403
I0123 14:18:01.885655 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:18:01.885909 139700910706688 alphageometry.py:566] LM output (score=-2.783808): "n : T c i i n 18 ;"
I0123 14:18:01.885943 139700910706688 alphageometry.py:567] Translation: "n = on_tline n i c i"

I0123 14:18:01.885985 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n i c i ? cong l h l j"
I0123 14:18:01.886194 139700910706688 graph.py:498] 
I0123 14:18:01.886254 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n i c i ? cong l h l j
I0123 14:18:03.856190 139700910706688 ddar.py:60] Depth 1/1000 time = 1.935023307800293
I0123 14:18:06.223799 139700910706688 ddar.py:60] Depth 2/1000 time = 2.367387294769287
I0123 14:18:08.792846 139700910706688 ddar.py:60] Depth 3/1000 time = 2.5688374042510986
I0123 14:18:12.579780 139700910706688 ddar.py:60] Depth 4/1000 time = 3.78670597076416
I0123 14:18:17.362596 139700910706688 ddar.py:60] Depth 5/1000 time = 4.782591104507446
I0123 14:18:21.724358 139700910706688 ddar.py:60] Depth 6/1000 time = 4.361316442489624
I0123 14:18:26.931453 139700910706688 ddar.py:60] Depth 7/1000 time = 5.206866979598999
I0123 14:18:31.383198 139700910706688 ddar.py:60] Depth 8/1000 time = 4.451515197753906
I0123 14:18:36.582890 139700910706688 ddar.py:60] Depth 9/1000 time = 5.199450492858887
I0123 14:18:41.824132 139700910706688 ddar.py:60] Depth 10/1000 time = 5.2406322956085205
I0123 14:18:41.879437 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:18:41.879497 139700910706688 alphageometry.py:566] LM output (score=-2.807370): "n : P f g m n 18 ;"
I0123 14:18:41.879532 139700910706688 alphageometry.py:567] Translation: "n = on_pline n m f g"

I0123 14:18:41.879568 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_pline n m f g ? cong l h l j"
I0123 14:18:41.879731 139700910706688 graph.py:498] 
I0123 14:18:41.879781 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_pline n m f g ? cong l h l j
I0123 14:18:43.881511 139700910706688 ddar.py:60] Depth 1/1000 time = 1.9643399715423584
I0123 14:18:46.218763 139700910706688 ddar.py:60] Depth 2/1000 time = 2.337028980255127
I0123 14:18:48.710929 139700910706688 ddar.py:60] Depth 3/1000 time = 2.4919235706329346
I0123 14:18:52.133621 139700910706688 ddar.py:60] Depth 4/1000 time = 3.422461748123169
I0123 14:18:55.794509 139700910706688 ddar.py:60] Depth 5/1000 time = 3.660640001296997
I0123 14:19:00.504280 139700910706688 ddar.py:60] Depth 6/1000 time = 4.709508657455444
I0123 14:19:05.508186 139700910706688 ddar.py:60] Depth 7/1000 time = 5.003675937652588
I0123 14:19:10.595766 139700910706688 ddar.py:60] Depth 8/1000 time = 5.087346792221069
I0123 14:19:14.874038 139700910706688 ddar.py:60] Depth 9/1000 time = 4.27794075012207
I0123 14:19:19.907839 139700910706688 ddar.py:60] Depth 10/1000 time = 5.032970666885376
I0123 14:19:19.963490 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:19:19.963596 139700910706688 alphageometry.py:566] LM output (score=-2.811342): "n : T b i m n 18 ;"
I0123 14:19:19.963634 139700910706688 alphageometry.py:567] Translation: "n = on_tline n m b i"

I0123 14:19:19.963672 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n m b i ? cong l h l j"
I0123 14:19:19.963873 139700910706688 graph.py:498] 
I0123 14:19:19.963936 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n m b i ? cong l h l j
I0123 14:19:21.913728 139700910706688 ddar.py:60] Depth 1/1000 time = 1.9142210483551025
I0123 14:19:24.385450 139700910706688 ddar.py:60] Depth 2/1000 time = 2.4714815616607666
I0123 14:19:27.134702 139700910706688 ddar.py:60] Depth 3/1000 time = 2.7490456104278564
I0123 14:19:31.305043 139700910706688 ddar.py:60] Depth 4/1000 time = 4.170116662979126
I0123 14:19:36.291916 139700910706688 ddar.py:60] Depth 5/1000 time = 4.986638069152832
I0123 14:19:40.673695 139700910706688 ddar.py:60] Depth 6/1000 time = 4.38152289390564
I0123 14:19:45.943833 139700910706688 ddar.py:60] Depth 7/1000 time = 5.269924640655518
I0123 14:19:51.175563 139700910706688 ddar.py:60] Depth 8/1000 time = 5.2314612865448
I0123 14:19:55.670953 139700910706688 ddar.py:60] Depth 9/1000 time = 4.494645118713379
I0123 14:19:55.728924 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:19:55.728989 139700910706688 alphageometry.py:566] LM output (score=-2.819489): "n : T h i i n 18 ;"
I0123 14:19:55.729025 139700910706688 alphageometry.py:567] Translation: "n = on_tline n i h i"

I0123 14:19:55.729062 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n i h i ? cong l h l j"
I0123 14:19:55.729229 139700910706688 graph.py:498] 
I0123 14:19:55.729279 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n i h i ? cong l h l j
I0123 14:19:57.649360 139700910706688 ddar.py:60] Depth 1/1000 time = 1.8840868473052979
I0123 14:20:00.841455 139700910706688 ddar.py:60] Depth 2/1000 time = 3.1918752193450928
I0123 14:20:03.545372 139700910706688 ddar.py:60] Depth 3/1000 time = 2.703700304031372
I0123 14:20:07.418500 139700910706688 ddar.py:60] Depth 4/1000 time = 3.872913122177124
I0123 14:20:11.515700 139700910706688 ddar.py:60] Depth 5/1000 time = 4.096975088119507
I0123 14:20:16.621611 139700910706688 ddar.py:60] Depth 6/1000 time = 5.105666875839233
I0123 14:20:21.924483 139700910706688 ddar.py:60] Depth 7/1000 time = 5.302636623382568
I0123 14:20:26.479147 139700910706688 ddar.py:60] Depth 8/1000 time = 4.554422616958618
I0123 14:20:31.837530 139700910706688 ddar.py:60] Depth 9/1000 time = 5.358128786087036
I0123 14:20:36.378916 139700910706688 ddar.py:60] Depth 10/1000 time = 4.5407493114471436
I0123 14:20:36.435652 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:20:36.435747 139700910706688 alphageometry.py:566] LM output (score=-2.846550): "n : D a d d n 18 ;"
I0123 14:20:36.435786 139700910706688 alphageometry.py:567] Translation: "n = on_circle n d a"

I0123 14:20:36.435825 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_circle n d a ? cong l h l j"
I0123 14:20:36.436020 139700910706688 graph.py:498] 
I0123 14:20:36.436094 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_circle n d a ? cong l h l j
I0123 14:20:39.550504 139700910706688 ddar.py:60] Depth 1/1000 time = 3.075425386428833
I0123 14:20:42.780597 139700910706688 ddar.py:60] Depth 2/1000 time = 3.2298717498779297
I0123 14:20:46.215795 139700910706688 ddar.py:60] Depth 3/1000 time = 3.434969663619995
I0123 14:20:50.956535 139700910706688 ddar.py:60] Depth 4/1000 time = 4.740506172180176
I0123 14:20:56.032330 139700910706688 ddar.py:60] Depth 5/1000 time = 5.075544834136963
I0123 14:21:02.133927 139700910706688 ddar.py:60] Depth 6/1000 time = 6.101334810256958
I0123 14:21:08.482921 139700910706688 ddar.py:60] Depth 7/1000 time = 6.348758697509766
I0123 14:21:14.926940 139700910706688 ddar.py:60] Depth 8/1000 time = 6.443799018859863
I0123 14:21:20.524767 139700910706688 ddar.py:60] Depth 9/1000 time = 5.597562313079834
I0123 14:21:26.856858 139700910706688 ddar.py:60] Depth 10/1000 time = 6.331405162811279
I0123 14:21:26.918756 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:21:26.918841 139700910706688 alphageometry.py:566] LM output (score=-2.868958): "n : T c i c n 18 ;"
I0123 14:21:26.918876 139700910706688 alphageometry.py:567] Translation: "n = on_tline n c c i"

I0123 14:21:26.918913 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n c c i ? cong l h l j"
I0123 14:21:26.919092 139700910706688 graph.py:498] 
I0123 14:21:26.919144 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n c c i ? cong l h l j
I0123 14:21:28.934507 139700910706688 ddar.py:60] Depth 1/1000 time = 1.9809532165527344
I0123 14:21:31.329117 139700910706688 ddar.py:60] Depth 2/1000 time = 2.3944013118743896
I0123 14:21:33.965298 139700910706688 ddar.py:60] Depth 3/1000 time = 2.635972023010254
I0123 14:21:37.871069 139700910706688 ddar.py:60] Depth 4/1000 time = 3.905550479888916
I0123 14:21:41.977849 139700910706688 ddar.py:60] Depth 5/1000 time = 4.106558084487915
I0123 14:21:47.144154 139700910706688 ddar.py:60] Depth 6/1000 time = 5.166054725646973
I0123 14:21:51.675719 139700910706688 ddar.py:60] Depth 7/1000 time = 4.53135085105896
I0123 14:21:57.053832 139700910706688 ddar.py:60] Depth 8/1000 time = 5.377897500991821
I0123 14:22:01.587087 139700910706688 ddar.py:60] Depth 9/1000 time = 4.532986879348755
I0123 14:22:06.818757 139700910706688 ddar.py:60] Depth 10/1000 time = 5.2310309410095215
I0123 14:22:06.874768 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:22:06.874830 139700910706688 alphageometry.py:566] LM output (score=-2.886062): "n : T k j j n 18 ;"
I0123 14:22:06.874865 139700910706688 alphageometry.py:567] Translation: "n = on_tline n j k j"

I0123 14:22:06.874904 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n j k j ? cong l h l j"
I0123 14:22:06.875093 139700910706688 graph.py:498] 
I0123 14:22:06.875144 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n j k j ? cong l h l j
I0123 14:22:08.847067 139700910706688 ddar.py:60] Depth 1/1000 time = 1.932196855545044
I0123 14:22:11.323385 139700910706688 ddar.py:60] Depth 2/1000 time = 2.476099729537964
I0123 14:22:14.794383 139700910706688 ddar.py:60] Depth 3/1000 time = 3.4707729816436768
I0123 14:22:18.015271 139700910706688 ddar.py:60] Depth 4/1000 time = 3.22066068649292
I0123 14:22:22.958053 139700910706688 ddar.py:60] Depth 5/1000 time = 4.942556619644165
I0123 14:22:27.343088 139700910706688 ddar.py:60] Depth 6/1000 time = 4.384784936904907
I0123 14:22:32.617672 139700910706688 ddar.py:60] Depth 7/1000 time = 5.274346828460693
I0123 14:22:37.993348 139700910706688 ddar.py:60] Depth 8/1000 time = 5.375448942184448
I0123 14:22:42.568589 139700910706688 ddar.py:60] Depth 9/1000 time = 4.574913740158081
I0123 14:22:47.887814 139700910706688 ddar.py:60] Depth 10/1000 time = 5.318452835083008
I0123 14:22:47.944100 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:22:47.944209 139700910706688 alphageometry.py:566] LM output (score=-2.909171): "n : D g i g n 18 D i m m n 19 ;"
I0123 14:22:47.944247 139700910706688 alphageometry.py:567] Translation: "n = on_circle n g i, on_circle n m i"

I0123 14:22:47.944285 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_circle n g i, on_circle n m i ? cong l h l j"
I0123 14:22:47.944460 139700910706688 graph.py:498] 
I0123 14:22:47.944528 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_circle n g i, on_circle n m i ? cong l h l j
I0123 14:22:50.092075 139700910706688 ddar.py:60] Depth 1/1000 time = 2.093082904815674
I0123 14:22:53.691711 139700910706688 ddar.py:60] Depth 2/1000 time = 3.5994155406951904
I0123 14:22:56.818381 139700910706688 ddar.py:60] Depth 3/1000 time = 3.126408815383911
I0123 14:23:01.434884 139700910706688 ddar.py:60] Depth 4/1000 time = 4.61627721786499
I0123 14:23:06.046014 139700910706688 ddar.py:60] Depth 5/1000 time = 4.61090350151062
I0123 14:23:11.616895 139700910706688 ddar.py:60] Depth 6/1000 time = 5.570627212524414
I0123 14:23:17.374477 139700910706688 ddar.py:60] Depth 7/1000 time = 5.757357597351074
I0123 14:23:22.289797 139700910706688 ddar.py:60] Depth 8/1000 time = 4.915053129196167
I0123 14:23:27.917285 139700910706688 ddar.py:60] Depth 9/1000 time = 5.626854419708252
I0123 14:23:33.689649 139700910706688 ddar.py:60] Depth 10/1000 time = 5.720976114273071
I0123 14:23:33.706455 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:23:33.706517 139700910706688 alphageometry.py:566] LM output (score=-2.909547): "n : T a c g n 18 ;"
I0123 14:23:33.706551 139700910706688 alphageometry.py:567] Translation: "n = on_tline n g a c"

I0123 14:23:33.706587 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n g a c ? cong l h l j"
I0123 14:23:33.706777 139700910706688 graph.py:498] 
I0123 14:23:33.706830 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n g a c ? cong l h l j
I0123 14:23:35.715262 139700910706688 ddar.py:60] Depth 1/1000 time = 1.9689626693725586
I0123 14:23:38.115354 139700910706688 ddar.py:60] Depth 2/1000 time = 2.399873733520508
I0123 14:23:40.775130 139700910706688 ddar.py:60] Depth 3/1000 time = 2.659550428390503
I0123 14:23:44.669634 139700910706688 ddar.py:60] Depth 4/1000 time = 3.894282817840576
I0123 14:23:48.720805 139700910706688 ddar.py:60] Depth 5/1000 time = 4.0509233474731445
I0123 14:23:53.894871 139700910706688 ddar.py:60] Depth 6/1000 time = 5.173811197280884
I0123 14:23:58.415652 139700910706688 ddar.py:60] Depth 7/1000 time = 4.52055025100708
I0123 14:24:03.723824 139700910706688 ddar.py:60] Depth 8/1000 time = 5.307928562164307
I0123 14:24:08.219161 139700910706688 ddar.py:60] Depth 9/1000 time = 4.495076417922974
I0123 14:24:13.434372 139700910706688 ddar.py:60] Depth 10/1000 time = 5.2145466804504395
I0123 14:24:13.488082 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:24:13.488151 139700910706688 alphageometry.py:566] LM output (score=-2.911796): "n : D b k b n 18 ;"
I0123 14:24:13.488186 139700910706688 alphageometry.py:567] Translation: "n = on_circle n b k"

I0123 14:24:13.488224 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_circle n b k ? cong l h l j"
I0123 14:24:13.488394 139700910706688 graph.py:498] 
I0123 14:24:13.488446 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_circle n b k ? cong l h l j
I0123 14:24:15.764422 139700910706688 ddar.py:60] Depth 1/1000 time = 2.234757661819458
I0123 14:24:18.751904 139700910706688 ddar.py:60] Depth 2/1000 time = 2.9872539043426514
I0123 14:24:21.810565 139700910706688 ddar.py:60] Depth 3/1000 time = 3.0584332942962646
I0123 14:24:26.320487 139700910706688 ddar.py:60] Depth 4/1000 time = 4.509692907333374
I0123 14:24:31.325124 139700910706688 ddar.py:60] Depth 5/1000 time = 5.0043981075286865
I0123 14:24:37.469383 139700910706688 ddar.py:60] Depth 6/1000 time = 6.1439924240112305
I0123 14:24:43.842318 139700910706688 ddar.py:60] Depth 7/1000 time = 6.372698068618774
I0123 14:24:49.443448 139700910706688 ddar.py:60] Depth 8/1000 time = 5.6008827686309814
I0123 14:24:55.823047 139700910706688 ddar.py:60] Depth 9/1000 time = 6.379312992095947
I0123 14:25:01.365529 139700910706688 ddar.py:60] Depth 10/1000 time = 5.541698932647705
I0123 14:25:01.434868 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:25:01.434976 139700910706688 alphageometry.py:566] LM output (score=-2.947497): "n : T f i i n 18 ;"
I0123 14:25:01.435016 139700910706688 alphageometry.py:567] Translation: "n = on_tline n i f i"

I0123 14:25:01.435065 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n i f i ? cong l h l j"
I0123 14:25:01.435294 139700910706688 graph.py:498] 
I0123 14:25:01.435357 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n i f i ? cong l h l j
I0123 14:25:03.471008 139700910706688 ddar.py:60] Depth 1/1000 time = 2.000969409942627
I0123 14:25:06.743226 139700910706688 ddar.py:60] Depth 2/1000 time = 3.2719943523406982
I0123 14:25:09.485280 139700910706688 ddar.py:60] Depth 3/1000 time = 2.7418291568756104
I0123 14:25:12.643751 139700910706688 ddar.py:60] Depth 4/1000 time = 3.158238410949707
I0123 14:25:16.795320 139700910706688 ddar.py:60] Depth 5/1000 time = 4.151345491409302
I0123 14:25:21.968061 139700910706688 ddar.py:60] Depth 6/1000 time = 5.172500848770142
I0123 14:25:27.316041 139700910706688 ddar.py:60] Depth 7/1000 time = 5.3477113246917725
I0123 14:25:31.895716 139700910706688 ddar.py:60] Depth 8/1000 time = 4.579416513442993
I0123 14:25:37.279579 139700910706688 ddar.py:60] Depth 9/1000 time = 5.38361930847168
I0123 14:25:41.808867 139700910706688 ddar.py:60] Depth 10/1000 time = 4.52862811088562
I0123 14:25:41.862882 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:25:41.862949 139700910706688 alphageometry.py:566] LM output (score=-2.965092): "n : T c e g n 18 ;"
I0123 14:25:41.862985 139700910706688 alphageometry.py:567] Translation: "n = on_tline n g c e"

I0123 14:25:41.863024 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n g c e ? cong l h l j"
I0123 14:25:41.863194 139700910706688 graph.py:498] 
I0123 14:25:41.863245 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n g c e ? cong l h l j
I0123 14:25:43.853967 139700910706688 ddar.py:60] Depth 1/1000 time = 1.9533419609069824
I0123 14:25:46.304697 139700910706688 ddar.py:60] Depth 2/1000 time = 2.4505105018615723
I0123 14:25:49.799755 139700910706688 ddar.py:60] Depth 3/1000 time = 3.4948318004608154
I0123 14:25:53.207756 139700910706688 ddar.py:60] Depth 4/1000 time = 3.4077799320220947
I0123 14:25:58.219932 139700910706688 ddar.py:60] Depth 5/1000 time = 5.011947154998779
I0123 14:26:02.579323 139700910706688 ddar.py:60] Depth 6/1000 time = 4.359095573425293
I0123 14:26:07.799661 139700910706688 ddar.py:60] Depth 7/1000 time = 5.2200987339019775
I0123 14:26:12.258800 139700910706688 ddar.py:60] Depth 8/1000 time = 4.458834171295166
I0123 14:26:17.526394 139700910706688 ddar.py:60] Depth 9/1000 time = 5.266957759857178
I0123 14:26:17.579001 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:26:17.579063 139700910706688 alphageometry.py:566] LM output (score=-3.003496): "n : T i j i n 18 ;"
I0123 14:26:17.579097 139700910706688 alphageometry.py:567] Translation: "n = on_tline n i i j"

I0123 14:26:17.579133 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n i i j ? cong l h l j"
I0123 14:26:17.579320 139700910706688 graph.py:498] 
I0123 14:26:17.579371 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n i i j ? cong l h l j
I0123 14:26:19.637578 139700910706688 ddar.py:60] Depth 1/1000 time = 2.0221645832061768
I0123 14:26:22.124300 139700910706688 ddar.py:60] Depth 2/1000 time = 2.4864869117736816
I0123 14:26:24.877456 139700910706688 ddar.py:60] Depth 3/1000 time = 2.752939224243164
I0123 14:26:28.068091 139700910706688 ddar.py:60] Depth 4/1000 time = 3.19041109085083
I0123 14:26:32.967906 139700910706688 ddar.py:60] Depth 5/1000 time = 4.899591445922852
I0123 14:26:37.335511 139700910706688 ddar.py:60] Depth 6/1000 time = 4.367353677749634
I0123 14:26:42.681959 139700910706688 ddar.py:60] Depth 7/1000 time = 5.346221685409546
I0123 14:26:47.229157 139700910706688 ddar.py:60] Depth 8/1000 time = 4.546947240829468
I0123 14:26:51.748192 139700910706688 ddar.py:60] Depth 9/1000 time = 4.518760442733765
I0123 14:26:57.036409 139700910706688 ddar.py:60] Depth 10/1000 time = 5.28758978843689
I0123 14:26:57.089852 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:26:57.089912 139700910706688 alphageometry.py:566] LM output (score=-3.029195): "n : T g k k n 18 ;"
I0123 14:26:57.089946 139700910706688 alphageometry.py:567] Translation: "n = on_tline n k g k"

I0123 14:26:57.089983 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n k g k ? cong l h l j"
I0123 14:26:57.090145 139700910706688 graph.py:498] 
I0123 14:26:57.090194 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n k g k ? cong l h l j
I0123 14:26:59.116744 139700910706688 ddar.py:60] Depth 1/1000 time = 1.9926698207855225
I0123 14:27:01.654883 139700910706688 ddar.py:60] Depth 2/1000 time = 2.5379061698913574
I0123 14:27:05.244519 139700910706688 ddar.py:60] Depth 3/1000 time = 3.5894105434417725
I0123 14:27:08.472078 139700910706688 ddar.py:60] Depth 4/1000 time = 3.2273359298706055
I0123 14:27:12.548505 139700910706688 ddar.py:60] Depth 5/1000 time = 4.076206684112549
I0123 14:27:17.800271 139700910706688 ddar.py:60] Depth 6/1000 time = 5.251520872116089
I0123 14:27:22.338279 139700910706688 ddar.py:60] Depth 7/1000 time = 4.537776947021484
I0123 14:27:27.762730 139700910706688 ddar.py:60] Depth 8/1000 time = 5.424213647842407
I0123 14:27:33.236443 139700910706688 ddar.py:60] Depth 9/1000 time = 5.473449468612671
I0123 14:27:37.830785 139700910706688 ddar.py:60] Depth 10/1000 time = 4.593702554702759
I0123 14:27:37.888314 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:27:37.888390 139700910706688 alphageometry.py:566] LM output (score=-3.031016): "n : T g k g n 18 ;"
I0123 14:27:37.888424 139700910706688 alphageometry.py:567] Translation: "n = on_tline n g g k"

I0123 14:27:37.888461 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n g g k ? cong l h l j"
I0123 14:27:37.888676 139700910706688 graph.py:498] 
I0123 14:27:37.888736 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n g g k ? cong l h l j
I0123 14:27:39.913224 139700910706688 ddar.py:60] Depth 1/1000 time = 1.99061918258667
I0123 14:27:42.444403 139700910706688 ddar.py:60] Depth 2/1000 time = 2.5308992862701416
I0123 14:27:45.251567 139700910706688 ddar.py:60] Depth 3/1000 time = 2.8068411350250244
I0123 14:27:49.278963 139700910706688 ddar.py:60] Depth 4/1000 time = 4.02716064453125
I0123 14:27:53.418833 139700910706688 ddar.py:60] Depth 5/1000 time = 4.139638662338257
I0123 14:27:58.650281 139700910706688 ddar.py:60] Depth 6/1000 time = 5.2311930656433105
I0123 14:28:03.240860 139700910706688 ddar.py:60] Depth 7/1000 time = 4.590334415435791
I0123 14:28:08.680267 139700910706688 ddar.py:60] Depth 8/1000 time = 5.439162015914917
I0123 14:28:13.280081 139700910706688 ddar.py:60] Depth 9/1000 time = 4.599538087844849
I0123 14:28:18.683763 139700910706688 ddar.py:60] Depth 10/1000 time = 5.402988433837891
I0123 14:28:18.740569 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:28:18.740686 139700910706688 alphageometry.py:566] LM output (score=-3.041977): "n : T e k k n 18 ;"
I0123 14:28:18.740724 139700910706688 alphageometry.py:567] Translation: "n = on_tline n k e k"

I0123 14:28:18.740763 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n k e k ? cong l h l j"
I0123 14:28:18.740939 139700910706688 graph.py:498] 
I0123 14:28:18.740993 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n k e k ? cong l h l j
I0123 14:28:20.774250 139700910706688 ddar.py:60] Depth 1/1000 time = 1.997908353805542
I0123 14:28:23.295697 139700910706688 ddar.py:60] Depth 2/1000 time = 2.5212173461914062
I0123 14:28:26.021248 139700910706688 ddar.py:60] Depth 3/1000 time = 2.7252986431121826
I0123 14:28:28.922410 139700910706688 ddar.py:60] Depth 4/1000 time = 2.9009382724761963
I0123 14:28:33.680566 139700910706688 ddar.py:60] Depth 5/1000 time = 4.757934331893921
I0123 14:28:38.024642 139700910706688 ddar.py:60] Depth 6/1000 time = 4.343799829483032
I0123 14:28:43.405635 139700910706688 ddar.py:60] Depth 7/1000 time = 5.380756139755249
I0123 14:28:48.854161 139700910706688 ddar.py:60] Depth 8/1000 time = 5.448273420333862
I0123 14:28:53.483420 139700910706688 ddar.py:60] Depth 9/1000 time = 4.629014015197754
I0123 14:28:58.105980 139700910706688 ddar.py:60] Depth 10/1000 time = 4.621936321258545
I0123 14:28:58.164911 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:28:58.164971 139700910706688 alphageometry.py:566] LM output (score=-3.055963): "n : T a e c n 18 ;"
I0123 14:28:58.165006 139700910706688 alphageometry.py:567] Translation: "n = on_tline n c a e"

I0123 14:28:58.165066 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n c a e ? cong l h l j"
I0123 14:28:58.165236 139700910706688 graph.py:498] 
I0123 14:28:58.165288 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n c a e ? cong l h l j
I0123 14:29:01.048975 139700910706688 ddar.py:60] Depth 1/1000 time = 2.8494198322296143
I0123 14:29:03.584029 139700910706688 ddar.py:60] Depth 2/1000 time = 2.5348384380340576
I0123 14:29:06.277169 139700910706688 ddar.py:60] Depth 3/1000 time = 2.692876100540161
I0123 14:29:09.143192 139700910706688 ddar.py:60] Depth 4/1000 time = 2.8657965660095215
I0123 14:29:13.040894 139700910706688 ddar.py:60] Depth 5/1000 time = 3.8974661827087402
I0123 14:29:18.171813 139700910706688 ddar.py:60] Depth 6/1000 time = 5.130656003952026
I0123 14:29:22.689299 139700910706688 ddar.py:60] Depth 7/1000 time = 4.517219543457031
I0123 14:29:27.184764 139700910706688 ddar.py:60] Depth 8/1000 time = 4.495220899581909
I0123 14:29:32.506032 139700910706688 ddar.py:60] Depth 9/1000 time = 5.3210015296936035
I0123 14:29:36.977521 139700910706688 ddar.py:60] Depth 10/1000 time = 4.470840215682983
I0123 14:29:37.031343 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:29:37.031413 139700910706688 alphageometry.py:566] LM output (score=-3.057986): "n : T g m m n 18 ;"
I0123 14:29:37.031447 139700910706688 alphageometry.py:567] Translation: "n = on_tline n m g m"

I0123 14:29:37.031485 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n m g m ? cong l h l j"
I0123 14:29:37.031648 139700910706688 graph.py:498] 
I0123 14:29:37.031698 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n m g m ? cong l h l j
I0123 14:29:39.971706 139700910706688 ddar.py:60] Depth 1/1000 time = 2.9039084911346436
I0123 14:29:42.464424 139700910706688 ddar.py:60] Depth 2/1000 time = 2.492497205734253
I0123 14:29:45.169233 139700910706688 ddar.py:60] Depth 3/1000 time = 2.7045726776123047
I0123 14:29:48.293024 139700910706688 ddar.py:60] Depth 4/1000 time = 3.1235625743865967
I0123 14:29:52.256314 139700910706688 ddar.py:60] Depth 5/1000 time = 3.9630515575408936
I0123 14:29:57.306654 139700910706688 ddar.py:60] Depth 6/1000 time = 5.050079107284546
I0123 14:30:01.674521 139700910706688 ddar.py:60] Depth 7/1000 time = 4.36763596534729
I0123 14:30:06.896371 139700910706688 ddar.py:60] Depth 8/1000 time = 5.221606016159058
I0123 14:30:11.282336 139700910706688 ddar.py:60] Depth 9/1000 time = 4.385718107223511
I0123 14:30:16.470366 139700910706688 ddar.py:60] Depth 10/1000 time = 5.18731427192688
I0123 14:30:16.523067 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:30:16.523130 139700910706688 alphageometry.py:566] LM output (score=-3.065461): "n : T b g g n 18 ;"
I0123 14:30:16.523166 139700910706688 alphageometry.py:567] Translation: "n = on_tline n g b g"

I0123 14:30:16.523230 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n g b g ? cong l h l j"
I0123 14:30:16.523401 139700910706688 graph.py:498] 
I0123 14:30:16.523477 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n g b g ? cong l h l j
I0123 14:30:18.569203 139700910706688 ddar.py:60] Depth 1/1000 time = 2.008589029312134
I0123 14:30:21.149851 139700910706688 ddar.py:60] Depth 2/1000 time = 2.5804240703582764
I0123 14:30:23.987776 139700910706688 ddar.py:60] Depth 3/1000 time = 2.8377039432525635
I0123 14:30:28.122026 139700910706688 ddar.py:60] Depth 4/1000 time = 4.134037494659424
I0123 14:30:32.323186 139700910706688 ddar.py:60] Depth 5/1000 time = 4.200924396514893
I0123 14:30:36.768995 139700910706688 ddar.py:60] Depth 6/1000 time = 4.4455647468566895
I0123 14:30:42.207848 139700910706688 ddar.py:60] Depth 7/1000 time = 5.438618421554565
I0123 14:30:46.863680 139700910706688 ddar.py:60] Depth 8/1000 time = 4.655587434768677
I0123 14:30:52.378585 139700910706688 ddar.py:60] Depth 9/1000 time = 5.514634370803833
I0123 14:30:57.816744 139700910706688 ddar.py:60] Depth 10/1000 time = 5.437489986419678
I0123 14:30:57.874453 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:30:57.874520 139700910706688 alphageometry.py:566] LM output (score=-3.105820): "n : T c k c n 18 ;"
I0123 14:30:57.874556 139700910706688 alphageometry.py:567] Translation: "n = on_tline n c c k"

I0123 14:30:57.874600 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n c c k ? cong l h l j"
I0123 14:30:57.874770 139700910706688 graph.py:498] 
I0123 14:30:57.874822 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n c c k ? cong l h l j
I0123 14:31:00.021076 139700910706688 ddar.py:60] Depth 1/1000 time = 2.1095521450042725
I0123 14:31:02.538753 139700910706688 ddar.py:60] Depth 2/1000 time = 2.5174357891082764
I0123 14:31:05.306553 139700910706688 ddar.py:60] Depth 3/1000 time = 2.7675721645355225
I0123 14:31:08.552748 139700910706688 ddar.py:60] Depth 4/1000 time = 3.2459633350372314
I0123 14:31:12.754308 139700910706688 ddar.py:60] Depth 5/1000 time = 4.201326131820679
I0123 14:31:18.077939 139700910706688 ddar.py:60] Depth 6/1000 time = 5.32336163520813
I0123 14:31:22.682559 139700910706688 ddar.py:60] Depth 7/1000 time = 4.6043713092803955
I0123 14:31:27.306196 139700910706688 ddar.py:60] Depth 8/1000 time = 4.62336802482605
I0123 14:31:32.796520 139700910706688 ddar.py:60] Depth 9/1000 time = 5.490043878555298
I0123 14:31:37.435543 139700910706688 ddar.py:60] Depth 10/1000 time = 4.638326406478882
I0123 14:31:37.491163 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:31:37.491247 139700910706688 alphageometry.py:566] LM output (score=-3.113887): "n : T a e a n 18 ;"
I0123 14:31:37.491283 139700910706688 alphageometry.py:567] Translation: "n = on_tline n a a e"

I0123 14:31:37.491348 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n a a e ? cong l h l j"
I0123 14:31:37.491530 139700910706688 graph.py:498] 
I0123 14:31:37.491584 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n a a e ? cong l h l j
I0123 14:31:39.546238 139700910706688 ddar.py:60] Depth 1/1000 time = 2.0182199478149414
I0123 14:31:43.053532 139700910706688 ddar.py:60] Depth 2/1000 time = 3.507072925567627
I0123 14:31:45.936759 139700910706688 ddar.py:60] Depth 3/1000 time = 2.8829915523529053
I0123 14:31:49.517145 139700910706688 ddar.py:60] Depth 4/1000 time = 3.5801541805267334
I0123 14:31:54.754799 139700910706688 ddar.py:60] Depth 5/1000 time = 5.237426996231079
I0123 14:31:59.273841 139700910706688 ddar.py:60] Depth 6/1000 time = 4.518785238265991
I0123 14:32:04.787481 139700910706688 ddar.py:60] Depth 7/1000 time = 5.5134007930755615
I0123 14:32:09.379385 139700910706688 ddar.py:60] Depth 8/1000 time = 4.59163761138916
I0123 14:32:14.870697 139700910706688 ddar.py:60] Depth 9/1000 time = 5.490659475326538
I0123 14:32:14.923534 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:32:14.923594 139700910706688 alphageometry.py:566] LM output (score=-3.121861): "n : T f n g i 18 ;"
I0123 14:32:14.923628 139700910706688 alphageometry.py:567] Translation: "n = on_tline n f g i"

I0123 14:32:14.923664 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n f g i ? cong l h l j"
I0123 14:32:14.923827 139700910706688 graph.py:498] 
I0123 14:32:14.923878 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n f g i ? cong l h l j
I0123 14:32:16.115936 139700910706688 ddar.py:60] Depth 1/1000 time = 1.1574711799621582
I0123 14:32:19.581044 139700910706688 ddar.py:60] Depth 2/1000 time = 3.4648828506469727
I0123 14:32:22.396383 139700910706688 ddar.py:60] Depth 3/1000 time = 2.815065383911133
I0123 14:32:25.383200 139700910706688 ddar.py:60] Depth 4/1000 time = 2.986598014831543
I0123 14:32:29.372825 139700910706688 ddar.py:60] Depth 5/1000 time = 3.989392042160034
I0123 14:32:34.757191 139700910706688 ddar.py:60] Depth 6/1000 time = 5.384103059768677
I0123 14:32:39.424463 139700910706688 ddar.py:60] Depth 7/1000 time = 4.667021751403809
I0123 14:32:44.112818 139700910706688 ddar.py:60] Depth 8/1000 time = 4.688116788864136
I0123 14:32:49.691801 139700910706688 ddar.py:60] Depth 9/1000 time = 5.5787060260772705
I0123 14:32:54.381554 139700910706688 ddar.py:60] Depth 10/1000 time = 4.68909215927124
I0123 14:32:54.440899 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:32:54.440961 139700910706688 alphageometry.py:566] LM output (score=-3.122577): "n : T g h g n 18 ;"
I0123 14:32:54.440996 139700910706688 alphageometry.py:567] Translation: "n = on_tline n g g h"

I0123 14:32:54.441056 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n g g h ? cong l h l j"
I0123 14:32:54.441225 139700910706688 graph.py:498] 
I0123 14:32:54.441275 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n g g h ? cong l h l j
I0123 14:32:56.482064 139700910706688 ddar.py:60] Depth 1/1000 time = 2.006300926208496
I0123 14:32:59.975135 139700910706688 ddar.py:60] Depth 2/1000 time = 3.492884874343872
I0123 14:33:02.913556 139700910706688 ddar.py:60] Depth 3/1000 time = 2.93819522857666
I0123 14:33:06.539371 139700910706688 ddar.py:60] Depth 4/1000 time = 3.6255931854248047
I0123 14:33:10.913888 139700910706688 ddar.py:60] Depth 5/1000 time = 4.374277353286743
I0123 14:33:16.373320 139700910706688 ddar.py:60] Depth 6/1000 time = 5.459160327911377
I0123 14:33:21.062593 139700910706688 ddar.py:60] Depth 7/1000 time = 4.689038515090942
I0123 14:33:26.731616 139700910706688 ddar.py:60] Depth 8/1000 time = 5.668735980987549
I0123 14:33:31.511806 139700910706688 ddar.py:60] Depth 9/1000 time = 4.779530763626099
I0123 14:33:31.569095 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:33:31.569157 139700910706688 alphageometry.py:566] LM output (score=-3.186854): "n : T a n g m 18 ;"
I0123 14:33:31.569192 139700910706688 alphageometry.py:567] Translation: "n = on_tline n a g m"

I0123 14:33:31.569230 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n a g m ? cong l h l j"
I0123 14:33:31.569401 139700910706688 graph.py:498] 
I0123 14:33:31.569451 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m g d f; n = on_tline n a g m ? cong l h l j
I0123 14:33:33.714631 139700910706688 ddar.py:60] Depth 1/1000 time = 2.1094183921813965
I0123 14:33:36.247284 139700910706688 ddar.py:60] Depth 2/1000 time = 2.532430410385132
I0123 14:33:39.044938 139700910706688 ddar.py:60] Depth 3/1000 time = 2.7974283695220947
I0123 14:33:42.461209 139700910706688 ddar.py:60] Depth 4/1000 time = 3.4160361289978027
I0123 14:33:47.500277 139700910706688 ddar.py:60] Depth 5/1000 time = 5.038832187652588
I0123 14:33:51.876444 139700910706688 ddar.py:60] Depth 6/1000 time = 4.375904560089111
I0123 14:33:57.225479 139700910706688 ddar.py:60] Depth 7/1000 time = 5.348794937133789
I0123 14:34:01.685998 139700910706688 ddar.py:60] Depth 8/1000 time = 4.460236310958862
I0123 14:34:07.012643 139700910706688 ddar.py:60] Depth 9/1000 time = 5.32591986656189
I0123 14:34:07.065891 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:34:07.065958 139700910706688 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : P f g i m 17 ; x00
I0123 14:34:11.349589 139700910706688 alphageometry.py:566] LM output (score=-1.691807): "n : T j k k n 18 ;"
I0123 14:34:11.349797 139700910706688 alphageometry.py:567] Translation: "n = on_tline n k j k"

I0123 14:34:11.349839 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n k j k ? cong l h l j"
I0123 14:34:11.350071 139700910706688 graph.py:498] 
I0123 14:34:11.350133 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n k j k ? cong l h l j
I0123 14:34:12.583761 139700910706688 ddar.py:60] Depth 1/1000 time = 1.1995649337768555
I0123 14:34:16.119216 139700910706688 ddar.py:60] Depth 2/1000 time = 3.5352325439453125
I0123 14:34:19.064005 139700910706688 ddar.py:60] Depth 3/1000 time = 2.944553852081299
I0123 14:34:22.631391 139700910706688 ddar.py:60] Depth 4/1000 time = 3.5671586990356445
I0123 14:34:26.978127 139700910706688 ddar.py:60] Depth 5/1000 time = 4.346498012542725
I0123 14:34:32.460495 139700910706688 ddar.py:60] Depth 6/1000 time = 5.4821038246154785
I0123 14:34:37.150624 139700910706688 ddar.py:60] Depth 7/1000 time = 4.689885139465332
I0123 14:34:41.818499 139700910706688 ddar.py:60] Depth 8/1000 time = 4.667600870132446
I0123 14:34:46.355463 139700910706688 ddar.py:60] Depth 9/1000 time = 4.536332607269287
I0123 14:34:46.414340 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:34:46.414401 139700910706688 alphageometry.py:566] LM output (score=-1.976215): "n : T b i b n 18 ;"
I0123 14:34:46.414437 139700910706688 alphageometry.py:567] Translation: "n = on_tline n b b i"

I0123 14:34:46.414474 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n b b i ? cong l h l j"
I0123 14:34:46.414644 139700910706688 graph.py:498] 
I0123 14:34:46.414695 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n b b i ? cong l h l j
I0123 14:34:49.354870 139700910706688 ddar.py:60] Depth 1/1000 time = 2.9026436805725098
I0123 14:34:51.979751 139700910706688 ddar.py:60] Depth 2/1000 time = 2.6246650218963623
I0123 14:34:54.802068 139700910706688 ddar.py:60] Depth 3/1000 time = 2.8220605850219727
I0123 14:34:57.821188 139700910706688 ddar.py:60] Depth 4/1000 time = 3.0188868045806885
I0123 14:35:01.786989 139700910706688 ddar.py:60] Depth 5/1000 time = 3.965566873550415
I0123 14:35:06.083837 139700910706688 ddar.py:60] Depth 6/1000 time = 4.296590805053711
I0123 14:35:11.598329 139700910706688 ddar.py:60] Depth 7/1000 time = 5.514239311218262
I0123 14:35:16.226483 139700910706688 ddar.py:60] Depth 8/1000 time = 4.627908945083618
I0123 14:35:20.830744 139700910706688 ddar.py:60] Depth 9/1000 time = 4.603978872299194
I0123 14:35:25.377959 139700910706688 ddar.py:60] Depth 10/1000 time = 4.546567440032959
I0123 14:35:25.439264 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:35:25.439355 139700910706688 alphageometry.py:566] LM output (score=-2.102965): "n : T j k m n 18 ;"
I0123 14:35:25.439393 139700910706688 alphageometry.py:567] Translation: "n = on_tline n m j k"

I0123 14:35:25.439432 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n m j k ? cong l h l j"
I0123 14:35:25.439598 139700910706688 graph.py:498] 
I0123 14:35:25.439650 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n m j k ? cong l h l j
I0123 14:35:27.461940 139700910706688 ddar.py:60] Depth 1/1000 time = 1.9854753017425537
I0123 14:35:30.926018 139700910706688 ddar.py:60] Depth 2/1000 time = 3.463853120803833
I0123 14:35:33.723648 139700910706688 ddar.py:60] Depth 3/1000 time = 2.7973837852478027
I0123 14:35:36.688466 139700910706688 ddar.py:60] Depth 4/1000 time = 2.964601993560791
I0123 14:35:40.615631 139700910706688 ddar.py:60] Depth 5/1000 time = 3.9269282817840576
I0123 14:35:44.889002 139700910706688 ddar.py:60] Depth 6/1000 time = 4.273097038269043
I0123 14:35:50.340225 139700910706688 ddar.py:60] Depth 7/1000 time = 5.450967788696289
I0123 14:35:54.932088 139700910706688 ddar.py:60] Depth 8/1000 time = 4.591626167297363
I0123 14:35:59.512077 139700910706688 ddar.py:60] Depth 9/1000 time = 4.579720973968506
I0123 14:36:04.076266 139700910706688 ddar.py:60] Depth 10/1000 time = 4.563556432723999
I0123 14:36:04.138287 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:36:04.138355 139700910706688 alphageometry.py:566] LM output (score=-2.284920): "n : T b i m n 18 ;"
I0123 14:36:04.138390 139700910706688 alphageometry.py:567] Translation: "n = on_tline n m b i"

I0123 14:36:04.138428 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n m b i ? cong l h l j"
I0123 14:36:04.138592 139700910706688 graph.py:498] 
I0123 14:36:04.138641 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n m b i ? cong l h l j
I0123 14:36:06.187787 139700910706688 ddar.py:60] Depth 1/1000 time = 2.0136125087738037
I0123 14:36:09.716151 139700910706688 ddar.py:60] Depth 2/1000 time = 3.5281407833099365
I0123 14:36:12.582206 139700910706688 ddar.py:60] Depth 3/1000 time = 2.8658246994018555
I0123 14:36:15.837350 139700910706688 ddar.py:60] Depth 4/1000 time = 3.254913330078125
I0123 14:36:19.984371 139700910706688 ddar.py:60] Depth 5/1000 time = 4.146790027618408
I0123 14:36:24.398886 139700910706688 ddar.py:60] Depth 6/1000 time = 4.414254426956177
I0123 14:36:29.918133 139700910706688 ddar.py:60] Depth 7/1000 time = 5.519016265869141
I0123 14:36:34.563319 139700910706688 ddar.py:60] Depth 8/1000 time = 4.644949436187744
I0123 14:36:39.175616 139700910706688 ddar.py:60] Depth 9/1000 time = 4.61204195022583
I0123 14:36:44.668666 139700910706688 ddar.py:60] Depth 10/1000 time = 5.4923906326293945
I0123 14:36:44.728229 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:36:44.728334 139700910706688 alphageometry.py:566] LM output (score=-2.394041): "n : T d f d n 18 ;"
I0123 14:36:44.728371 139700910706688 alphageometry.py:567] Translation: "n = on_tline n d d f"

I0123 14:36:44.728409 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n d d f ? cong l h l j"
I0123 14:36:44.728588 139700910706688 graph.py:498] 
I0123 14:36:44.728640 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n d d f ? cong l h l j
I0123 14:36:46.992085 139700910706688 ddar.py:60] Depth 1/1000 time = 2.2261199951171875
I0123 14:36:49.755305 139700910706688 ddar.py:60] Depth 2/1000 time = 2.7629988193511963
I0123 14:36:52.753222 139700910706688 ddar.py:60] Depth 3/1000 time = 2.997695207595825
I0123 14:36:56.163343 139700910706688 ddar.py:60] Depth 4/1000 time = 3.409895181655884
I0123 14:37:00.402126 139700910706688 ddar.py:60] Depth 5/1000 time = 4.2385547161102295
I0123 14:37:05.841697 139700910706688 ddar.py:60] Depth 6/1000 time = 5.439249038696289
I0123 14:37:10.624017 139700910706688 ddar.py:60] Depth 7/1000 time = 4.781970262527466
I0123 14:37:15.307010 139700910706688 ddar.py:60] Depth 8/1000 time = 4.682749509811401
I0123 14:37:20.948803 139700910706688 ddar.py:60] Depth 9/1000 time = 5.641522407531738
I0123 14:37:25.600954 139700910706688 ddar.py:60] Depth 10/1000 time = 4.651518821716309
I0123 14:37:30.313338 139700910706688 ddar.py:60] Depth 11/1000 time = 4.683173418045044
I0123 14:37:35.055795 139700910706688 ddar.py:60] Depth 12/1000 time = 4.711671829223633
I0123 14:37:35.057993 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:37:35.058063 139700910706688 alphageometry.py:566] LM output (score=-2.415882): "n : T b i i n 18 ;"
I0123 14:37:35.058100 139700910706688 alphageometry.py:567] Translation: "n = on_tline n i b i"

I0123 14:37:35.058138 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n i b i ? cong l h l j"
I0123 14:37:35.058325 139700910706688 graph.py:498] 
I0123 14:37:35.058379 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n i b i ? cong l h l j
I0123 14:37:37.179259 139700910706688 ddar.py:60] Depth 1/1000 time = 2.0811290740966797
I0123 14:37:39.819443 139700910706688 ddar.py:60] Depth 2/1000 time = 2.63995361328125
I0123 14:37:42.712525 139700910706688 ddar.py:60] Depth 3/1000 time = 2.8928518295288086
I0123 14:37:46.932863 139700910706688 ddar.py:60] Depth 4/1000 time = 4.220107793807983
I0123 14:37:51.190634 139700910706688 ddar.py:60] Depth 5/1000 time = 4.257542133331299
I0123 14:37:55.677425 139700910706688 ddar.py:60] Depth 6/1000 time = 4.4865193367004395
I0123 14:38:00.363077 139700910706688 ddar.py:60] Depth 7/1000 time = 4.685402870178223
I0123 14:38:05.949978 139700910706688 ddar.py:60] Depth 8/1000 time = 5.586662292480469
I0123 14:38:10.620874 139700910706688 ddar.py:60] Depth 9/1000 time = 4.670596599578857
I0123 14:38:15.259133 139700910706688 ddar.py:60] Depth 10/1000 time = 4.6376142501831055
I0123 14:38:15.318566 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:38:15.318628 139700910706688 alphageometry.py:566] LM output (score=-2.587557): "n : T g i i n 18 ;"
I0123 14:38:15.318663 139700910706688 alphageometry.py:567] Translation: "n = on_tline n i g i"

I0123 14:38:15.318701 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n i g i ? cong l h l j"
I0123 14:38:15.318868 139700910706688 graph.py:498] 
I0123 14:38:15.318920 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n i g i ? cong l h l j
I0123 14:38:17.398710 139700910706688 ddar.py:60] Depth 1/1000 time = 2.0432562828063965
I0123 14:38:19.989980 139700910706688 ddar.py:60] Depth 2/1000 time = 2.5910441875457764
I0123 14:38:22.802522 139700910706688 ddar.py:60] Depth 3/1000 time = 2.812270402908325
I0123 14:38:26.762236 139700910706688 ddar.py:60] Depth 4/1000 time = 3.95949125289917
I0123 14:38:30.773224 139700910706688 ddar.py:60] Depth 5/1000 time = 4.010741710662842
I0123 14:38:35.167211 139700910706688 ddar.py:60] Depth 6/1000 time = 4.393697261810303
I0123 14:38:39.760741 139700910706688 ddar.py:60] Depth 7/1000 time = 4.593265533447266
I0123 14:38:45.339583 139700910706688 ddar.py:60] Depth 8/1000 time = 5.5785980224609375
I0123 14:38:49.995473 139700910706688 ddar.py:60] Depth 9/1000 time = 4.655611276626587
I0123 14:38:54.592097 139700910706688 ddar.py:60] Depth 10/1000 time = 4.595988512039185
I0123 14:38:54.651961 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:38:54.652025 139700910706688 alphageometry.py:566] LM output (score=-2.594114): "n : T i k m n 18 ;"
I0123 14:38:54.652061 139700910706688 alphageometry.py:567] Translation: "n = on_tline n m i k"

I0123 14:38:54.652100 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n m i k ? cong l h l j"
I0123 14:38:54.652272 139700910706688 graph.py:498] 
I0123 14:38:54.652324 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n m i k ? cong l h l j
I0123 14:38:56.751340 139700910706688 ddar.py:60] Depth 1/1000 time = 2.059398889541626
I0123 14:38:59.348312 139700910706688 ddar.py:60] Depth 2/1000 time = 2.596750020980835
I0123 14:39:02.212561 139700910706688 ddar.py:60] Depth 3/1000 time = 2.864017963409424
I0123 14:39:06.629975 139700910706688 ddar.py:60] Depth 4/1000 time = 4.417189121246338
I0123 14:39:10.904508 139700910706688 ddar.py:60] Depth 5/1000 time = 4.274266004562378
I0123 14:39:15.354408 139700910706688 ddar.py:60] Depth 6/1000 time = 4.449640274047852
I0123 14:39:19.894081 139700910706688 ddar.py:60] Depth 7/1000 time = 4.5394251346588135
I0123 14:39:24.444952 139700910706688 ddar.py:60] Depth 8/1000 time = 4.550573825836182
I0123 14:39:29.913173 139700910706688 ddar.py:60] Depth 9/1000 time = 5.467525243759155
I0123 14:39:29.968742 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:39:29.968805 139700910706688 alphageometry.py:566] LM output (score=-2.615862): "n : T g i g n 18 ;"
I0123 14:39:29.968842 139700910706688 alphageometry.py:567] Translation: "n = on_tline n g g i"

I0123 14:39:29.968880 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n g g i ? cong l h l j"
I0123 14:39:29.969047 139700910706688 graph.py:498] 
I0123 14:39:29.969097 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n g g i ? cong l h l j
I0123 14:39:32.137292 139700910706688 ddar.py:60] Depth 1/1000 time = 2.126784086227417
I0123 14:39:34.815085 139700910706688 ddar.py:60] Depth 2/1000 time = 2.677556276321411
I0123 14:39:37.701385 139700910706688 ddar.py:60] Depth 3/1000 time = 2.886028289794922
I0123 14:39:40.815486 139700910706688 ddar.py:60] Depth 4/1000 time = 3.1138603687286377
I0123 14:39:44.879620 139700910706688 ddar.py:60] Depth 5/1000 time = 4.063896179199219
I0123 14:39:49.292591 139700910706688 ddar.py:60] Depth 6/1000 time = 4.412702560424805
I0123 14:39:53.946285 139700910706688 ddar.py:60] Depth 7/1000 time = 4.653416633605957
I0123 14:39:59.599109 139700910706688 ddar.py:60] Depth 8/1000 time = 5.652580499649048
I0123 14:40:04.332912 139700910706688 ddar.py:60] Depth 9/1000 time = 4.733513832092285
I0123 14:40:08.991685 139700910706688 ddar.py:60] Depth 10/1000 time = 4.658120393753052
I0123 14:40:09.051779 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:40:09.051862 139700910706688 alphageometry.py:566] LM output (score=-2.642243): "n : T d e e n 18 ;"
I0123 14:40:09.051897 139700910706688 alphageometry.py:567] Translation: "n = on_tline n e d e"

I0123 14:40:09.051934 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n e d e ? cong l h l j"
I0123 14:40:09.052103 139700910706688 graph.py:498] 
I0123 14:40:09.052153 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n e d e ? cong l h l j
I0123 14:40:11.258692 139700910706688 ddar.py:60] Depth 1/1000 time = 2.1726348400115967
I0123 14:40:13.912860 139700910706688 ddar.py:60] Depth 2/1000 time = 2.653942823410034
I0123 14:40:16.774121 139700910706688 ddar.py:60] Depth 3/1000 time = 2.8610265254974365
I0123 14:40:20.204987 139700910706688 ddar.py:60] Depth 4/1000 time = 3.430644989013672
I0123 14:40:24.362077 139700910706688 ddar.py:60] Depth 5/1000 time = 4.156833171844482
I0123 14:40:29.573052 139700910706688 ddar.py:60] Depth 6/1000 time = 5.210693359375
I0123 14:40:34.035192 139700910706688 ddar.py:60] Depth 7/1000 time = 4.461888790130615
I0123 14:40:38.459327 139700910706688 ddar.py:60] Depth 8/1000 time = 4.4238457679748535
I0123 14:40:42.871371 139700910706688 ddar.py:60] Depth 9/1000 time = 4.411314249038696
I0123 14:40:42.926665 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:40:42.926725 139700910706688 alphageometry.py:566] LM output (score=-2.677332): "n : T c i i n 18 ;"
I0123 14:40:42.926761 139700910706688 alphageometry.py:567] Translation: "n = on_tline n i c i"

I0123 14:40:42.926798 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n i c i ? cong l h l j"
I0123 14:40:42.926967 139700910706688 graph.py:498] 
I0123 14:40:42.927018 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n i c i ? cong l h l j
I0123 14:40:45.073675 139700910706688 ddar.py:60] Depth 1/1000 time = 2.1067793369293213
I0123 14:40:47.671864 139700910706688 ddar.py:60] Depth 2/1000 time = 2.597960948944092
I0123 14:40:50.487949 139700910706688 ddar.py:60] Depth 3/1000 time = 2.8158087730407715
I0123 14:40:53.484946 139700910706688 ddar.py:60] Depth 4/1000 time = 2.9967751502990723
I0123 14:40:57.513186 139700910706688 ddar.py:60] Depth 5/1000 time = 4.028011083602905
I0123 14:41:02.906566 139700910706688 ddar.py:60] Depth 6/1000 time = 5.393104553222656
I0123 14:41:07.556709 139700910706688 ddar.py:60] Depth 7/1000 time = 4.6498918533325195
I0123 14:41:12.186805 139700910706688 ddar.py:60] Depth 8/1000 time = 4.629868268966675
I0123 14:41:16.847412 139700910706688 ddar.py:60] Depth 9/1000 time = 4.660349369049072
I0123 14:41:21.432554 139700910706688 ddar.py:60] Depth 10/1000 time = 4.584468364715576
I0123 14:41:21.491988 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:41:21.492051 139700910706688 alphageometry.py:566] LM output (score=-2.774900): "n : T k j j n 18 ;"
I0123 14:41:21.492085 139700910706688 alphageometry.py:567] Translation: "n = on_tline n j k j"

I0123 14:41:21.492123 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n j k j ? cong l h l j"
I0123 14:41:21.492290 139700910706688 graph.py:498] 
I0123 14:41:21.492341 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n j k j ? cong l h l j
I0123 14:41:23.617342 139700910706688 ddar.py:60] Depth 1/1000 time = 2.0873830318450928
I0123 14:41:26.293737 139700910706688 ddar.py:60] Depth 2/1000 time = 2.6761579513549805
I0123 14:41:30.200868 139700910706688 ddar.py:60] Depth 3/1000 time = 3.9069061279296875
I0123 14:41:33.793496 139700910706688 ddar.py:60] Depth 4/1000 time = 3.5923874378204346
I0123 14:41:38.195082 139700910706688 ddar.py:60] Depth 5/1000 time = 4.401350498199463
I0123 14:41:42.776184 139700910706688 ddar.py:60] Depth 6/1000 time = 4.580844163894653
I0123 14:41:48.489844 139700910706688 ddar.py:60] Depth 7/1000 time = 5.713428020477295
I0123 14:41:53.213436 139700910706688 ddar.py:60] Depth 8/1000 time = 4.723328590393066
I0123 14:41:57.910088 139700910706688 ddar.py:60] Depth 9/1000 time = 4.696007966995239
I0123 14:41:57.968842 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:41:57.968904 139700910706688 alphageometry.py:566] LM output (score=-2.782072): "n : T h i i n 18 ;"
I0123 14:41:57.968937 139700910706688 alphageometry.py:567] Translation: "n = on_tline n i h i"

I0123 14:41:57.968973 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n i h i ? cong l h l j"
I0123 14:41:57.969136 139700910706688 graph.py:498] 
I0123 14:41:57.969186 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n i h i ? cong l h l j
I0123 14:42:00.157480 139700910706688 ddar.py:60] Depth 1/1000 time = 2.1535096168518066
I0123 14:42:02.868682 139700910706688 ddar.py:60] Depth 2/1000 time = 2.7109687328338623
I0123 14:42:05.851315 139700910706688 ddar.py:60] Depth 3/1000 time = 2.982401132583618
I0123 14:42:09.259358 139700910706688 ddar.py:60] Depth 4/1000 time = 3.4078140258789062
I0123 14:42:13.503128 139700910706688 ddar.py:60] Depth 5/1000 time = 4.243544816970825
I0123 14:42:18.068312 139700910706688 ddar.py:60] Depth 6/1000 time = 4.564921855926514
I0123 14:42:22.729173 139700910706688 ddar.py:60] Depth 7/1000 time = 4.660633325576782
I0123 14:42:28.401607 139700910706688 ddar.py:60] Depth 8/1000 time = 5.672189712524414
I0123 14:42:33.177360 139700910706688 ddar.py:60] Depth 9/1000 time = 4.775481939315796
I0123 14:42:37.913374 139700910706688 ddar.py:60] Depth 10/1000 time = 4.73535943031311
I0123 14:42:37.973116 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:42:37.973182 139700910706688 alphageometry.py:566] LM output (score=-2.843197): "n : T e k k n 18 ;"
I0123 14:42:37.973219 139700910706688 alphageometry.py:567] Translation: "n = on_tline n k e k"

I0123 14:42:37.973256 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n k e k ? cong l h l j"
I0123 14:42:37.973423 139700910706688 graph.py:498] 
I0123 14:42:37.973473 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n k e k ? cong l h l j
I0123 14:42:40.166701 139700910706688 ddar.py:60] Depth 1/1000 time = 2.154371738433838
I0123 14:42:42.883147 139700910706688 ddar.py:60] Depth 2/1000 time = 2.716221570968628
I0123 14:42:45.848899 139700910706688 ddar.py:60] Depth 3/1000 time = 2.9655230045318604
I0123 14:42:49.228452 139700910706688 ddar.py:60] Depth 4/1000 time = 3.3793325424194336
I0123 14:42:53.468680 139700910706688 ddar.py:60] Depth 5/1000 time = 4.240005254745483
I0123 14:42:58.013293 139700910706688 ddar.py:60] Depth 6/1000 time = 4.5443434715271
I0123 14:43:03.659117 139700910706688 ddar.py:60] Depth 7/1000 time = 5.645590543746948
I0123 14:43:08.389998 139700910706688 ddar.py:60] Depth 8/1000 time = 4.730632305145264
I0123 14:43:13.123023 139700910706688 ddar.py:60] Depth 9/1000 time = 4.732762575149536
I0123 14:43:17.829352 139700910706688 ddar.py:60] Depth 10/1000 time = 4.705667495727539
I0123 14:43:17.890475 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:43:17.890536 139700910706688 alphageometry.py:566] LM output (score=-2.853028): "n : T i j m n 18 ;"
I0123 14:43:17.890572 139700910706688 alphageometry.py:567] Translation: "n = on_tline n m i j"

I0123 14:43:17.890609 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n m i j ? cong l h l j"
I0123 14:43:17.890778 139700910706688 graph.py:498] 
I0123 14:43:17.890827 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n m i j ? cong l h l j
I0123 14:43:20.052368 139700910706688 ddar.py:60] Depth 1/1000 time = 2.1260006427764893
I0123 14:43:22.658115 139700910706688 ddar.py:60] Depth 2/1000 time = 2.6055185794830322
I0123 14:43:25.512094 139700910706688 ddar.py:60] Depth 3/1000 time = 2.853715181350708
I0123 14:43:28.540619 139700910706688 ddar.py:60] Depth 4/1000 time = 3.0282931327819824
I0123 14:43:33.546904 139700910706688 ddar.py:60] Depth 5/1000 time = 5.006040811538696
I0123 14:43:37.919279 139700910706688 ddar.py:60] Depth 6/1000 time = 4.372090578079224
I0123 14:43:42.530138 139700910706688 ddar.py:60] Depth 7/1000 time = 4.610595941543579
I0123 14:43:47.153931 139700910706688 ddar.py:60] Depth 8/1000 time = 4.6235480308532715
I0123 14:43:51.800081 139700910706688 ddar.py:60] Depth 9/1000 time = 4.645878791809082
I0123 14:43:56.375273 139700910706688 ddar.py:60] Depth 10/1000 time = 4.574528932571411
I0123 14:43:56.433291 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:43:56.433372 139700910706688 alphageometry.py:566] LM output (score=-2.858961): "n : T b i g n 18 ;"
I0123 14:43:56.433409 139700910706688 alphageometry.py:567] Translation: "n = on_tline n g b i"

I0123 14:43:56.433450 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n g b i ? cong l h l j"
I0123 14:43:56.433626 139700910706688 graph.py:498] 
I0123 14:43:56.433688 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n g b i ? cong l h l j
I0123 14:43:58.607611 139700910706688 ddar.py:60] Depth 1/1000 time = 2.138862133026123
I0123 14:44:01.336902 139700910706688 ddar.py:60] Depth 2/1000 time = 2.729069709777832
I0123 14:44:04.322148 139700910706688 ddar.py:60] Depth 3/1000 time = 2.9850330352783203
I0123 14:44:08.944683 139700910706688 ddar.py:60] Depth 4/1000 time = 4.622304916381836
I0123 14:44:13.373842 139700910706688 ddar.py:60] Depth 5/1000 time = 4.428962230682373
I0123 14:44:17.998734 139700910706688 ddar.py:60] Depth 6/1000 time = 4.624629735946655
I0123 14:44:22.746886 139700910706688 ddar.py:60] Depth 7/1000 time = 4.747910976409912
I0123 14:44:27.510282 139700910706688 ddar.py:60] Depth 8/1000 time = 4.76313853263855
I0123 14:44:33.227350 139700910706688 ddar.py:60] Depth 9/1000 time = 5.716401815414429
I0123 14:44:33.287501 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:44:33.287580 139700910706688 alphageometry.py:566] LM output (score=-2.878726): "n : T c k c n 18 ;"
I0123 14:44:33.287616 139700910706688 alphageometry.py:567] Translation: "n = on_tline n c c k"

I0123 14:44:33.287653 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n c c k ? cong l h l j"
I0123 14:44:33.287820 139700910706688 graph.py:498] 
I0123 14:44:33.287872 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n c c k ? cong l h l j
I0123 14:44:34.499880 139700910706688 ddar.py:60] Depth 1/1000 time = 1.1776862144470215
I0123 14:44:37.132429 139700910706688 ddar.py:60] Depth 2/1000 time = 2.6323156356811523
I0123 14:44:40.030894 139700910706688 ddar.py:60] Depth 3/1000 time = 2.898242950439453
I0123 14:44:43.397044 139700910706688 ddar.py:60] Depth 4/1000 time = 3.3659183979034424
I0123 14:44:48.673182 139700910706688 ddar.py:60] Depth 5/1000 time = 5.275907278060913
I0123 14:44:53.212852 139700910706688 ddar.py:60] Depth 6/1000 time = 4.5394065380096436
I0123 14:44:57.888262 139700910706688 ddar.py:60] Depth 7/1000 time = 4.675189733505249
I0123 14:45:02.566797 139700910706688 ddar.py:60] Depth 8/1000 time = 4.6782941818237305
I0123 14:45:07.267023 139700910706688 ddar.py:60] Depth 9/1000 time = 4.6999523639678955
I0123 14:45:11.905284 139700910706688 ddar.py:60] Depth 10/1000 time = 4.637559652328491
I0123 14:45:11.962960 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:45:11.963049 139700910706688 alphageometry.py:566] LM output (score=-2.888028): "n : T a e c n 18 ;"
I0123 14:45:11.963088 139700910706688 alphageometry.py:567] Translation: "n = on_tline n c a e"

I0123 14:45:11.963127 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n c a e ? cong l h l j"
I0123 14:45:11.963300 139700910706688 graph.py:498] 
I0123 14:45:11.963352 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n c a e ? cong l h l j
I0123 14:45:14.157357 139700910706688 ddar.py:60] Depth 1/1000 time = 2.1593587398529053
I0123 14:45:16.853521 139700910706688 ddar.py:60] Depth 2/1000 time = 2.6959476470947266
I0123 14:45:19.754386 139700910706688 ddar.py:60] Depth 3/1000 time = 2.90063738822937
I0123 14:45:23.051366 139700910706688 ddar.py:60] Depth 4/1000 time = 3.29675555229187
I0123 14:45:27.167967 139700910706688 ddar.py:60] Depth 5/1000 time = 4.116369724273682
I0123 14:45:32.478237 139700910706688 ddar.py:60] Depth 6/1000 time = 5.310004234313965
I0123 14:45:37.003702 139700910706688 ddar.py:60] Depth 7/1000 time = 4.525208473205566
I0123 14:45:41.592793 139700910706688 ddar.py:60] Depth 8/1000 time = 4.58885383605957
I0123 14:45:46.182370 139700910706688 ddar.py:60] Depth 9/1000 time = 4.589310169219971
I0123 14:45:50.737032 139700910706688 ddar.py:60] Depth 10/1000 time = 4.554028749465942
I0123 14:45:50.790602 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:45:50.790673 139700910706688 alphageometry.py:566] LM output (score=-3.063639): "n : T k j m n 18 ;"
I0123 14:45:50.790708 139700910706688 alphageometry.py:567] Translation: "n = on_tline n m k j"

I0123 14:45:50.790744 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n m k j ? cong l h l j"
I0123 14:45:50.790908 139700910706688 graph.py:498] 
I0123 14:45:50.790978 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n m k j ? cong l h l j
I0123 14:45:52.987967 139700910706688 ddar.py:60] Depth 1/1000 time = 2.1628217697143555
I0123 14:45:55.718882 139700910706688 ddar.py:60] Depth 2/1000 time = 2.7307074069976807
I0123 14:45:58.695134 139700910706688 ddar.py:60] Depth 3/1000 time = 2.976027727127075
I0123 14:46:02.078467 139700910706688 ddar.py:60] Depth 4/1000 time = 3.383101224899292
I0123 14:46:06.307918 139700910706688 ddar.py:60] Depth 5/1000 time = 4.229212045669556
I0123 14:46:10.838627 139700910706688 ddar.py:60] Depth 6/1000 time = 4.530442953109741
I0123 14:46:16.554742 139700910706688 ddar.py:60] Depth 7/1000 time = 5.715888738632202
I0123 14:46:21.295560 139700910706688 ddar.py:60] Depth 8/1000 time = 4.740586519241333
I0123 14:46:26.054882 139700910706688 ddar.py:60] Depth 9/1000 time = 4.7590625286102295
I0123 14:46:30.762602 139700910706688 ddar.py:60] Depth 10/1000 time = 4.70707893371582
I0123 14:46:30.822407 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:46:30.822482 139700910706688 alphageometry.py:566] LM output (score=-3.067157): "n : T a c g n 18 ;"
I0123 14:46:30.822518 139700910706688 alphageometry.py:567] Translation: "n = on_tline n g a c"

I0123 14:46:30.822556 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n g a c ? cong l h l j"
I0123 14:46:30.822724 139700910706688 graph.py:498] 
I0123 14:46:30.822774 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n g a c ? cong l h l j
I0123 14:46:33.038575 139700910706688 ddar.py:60] Depth 1/1000 time = 2.180338144302368
I0123 14:46:35.679279 139700910706688 ddar.py:60] Depth 2/1000 time = 2.6404740810394287
I0123 14:46:38.531480 139700910706688 ddar.py:60] Depth 3/1000 time = 2.8519399166107178
I0123 14:46:41.598025 139700910706688 ddar.py:60] Depth 4/1000 time = 3.066310405731201
I0123 14:46:45.601243 139700910706688 ddar.py:60] Depth 5/1000 time = 4.002988815307617
I0123 14:46:49.991931 139700910706688 ddar.py:60] Depth 6/1000 time = 4.390406847000122
I0123 14:46:54.625742 139700910706688 ddar.py:60] Depth 7/1000 time = 4.633530855178833
I0123 14:46:59.259772 139700910706688 ddar.py:60] Depth 8/1000 time = 4.6337831020355225
I0123 14:47:04.945112 139700910706688 ddar.py:60] Depth 9/1000 time = 5.68507194519043
I0123 14:47:09.557042 139700910706688 ddar.py:60] Depth 10/1000 time = 4.611233234405518
I0123 14:47:09.613576 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:47:09.613672 139700910706688 alphageometry.py:566] LM output (score=-3.074602): "n : T i j j n 18 ;"
I0123 14:47:09.613710 139700910706688 alphageometry.py:567] Translation: "n = on_tline n j i j"

I0123 14:47:09.613749 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n j i j ? cong l h l j"
I0123 14:47:09.613939 139700910706688 graph.py:498] 
I0123 14:47:09.613990 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n j i j ? cong l h l j
I0123 14:47:10.805682 139700910706688 ddar.py:60] Depth 1/1000 time = 1.157250165939331
I0123 14:47:13.467961 139700910706688 ddar.py:60] Depth 2/1000 time = 2.662065029144287
I0123 14:47:16.379032 139700910706688 ddar.py:60] Depth 3/1000 time = 2.9108612537384033
I0123 14:47:19.725659 139700910706688 ddar.py:60] Depth 4/1000 time = 3.3461837768554688
I0123 14:47:24.999359 139700910706688 ddar.py:60] Depth 5/1000 time = 5.273398399353027
I0123 14:47:29.538849 139700910706688 ddar.py:60] Depth 6/1000 time = 4.539122104644775
I0123 14:47:34.241482 139700910706688 ddar.py:60] Depth 7/1000 time = 4.702395439147949
I0123 14:47:38.926856 139700910706688 ddar.py:60] Depth 8/1000 time = 4.685127258300781
I0123 14:47:43.644993 139700910706688 ddar.py:60] Depth 9/1000 time = 4.717864274978638
I0123 14:47:48.328651 139700910706688 ddar.py:60] Depth 10/1000 time = 4.682944297790527
I0123 14:47:48.385728 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:47:48.385810 139700910706688 alphageometry.py:566] LM output (score=-3.088990): "n : T c i m n 18 ;"
I0123 14:47:48.385845 139700910706688 alphageometry.py:567] Translation: "n = on_tline n m c i"

I0123 14:47:48.385881 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n m c i ? cong l h l j"
I0123 14:47:48.386060 139700910706688 graph.py:498] 
I0123 14:47:48.386115 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n m c i ? cong l h l j
I0123 14:47:50.591350 139700910706688 ddar.py:60] Depth 1/1000 time = 2.167482376098633
I0123 14:47:52.219716 139700910706688 ddar.py:60] Depth 2/1000 time = 1.6281235218048096
I0123 14:47:55.090137 139700910706688 ddar.py:60] Depth 3/1000 time = 2.870147943496704
I0123 14:47:58.174714 139700910706688 ddar.py:60] Depth 4/1000 time = 3.0843286514282227
I0123 14:48:03.348883 139700910706688 ddar.py:60] Depth 5/1000 time = 5.173935174942017
I0123 14:48:07.835170 139700910706688 ddar.py:60] Depth 6/1000 time = 4.4860265254974365
I0123 14:48:12.545065 139700910706688 ddar.py:60] Depth 7/1000 time = 4.709632873535156
I0123 14:48:17.279727 139700910706688 ddar.py:60] Depth 8/1000 time = 4.734430551528931
I0123 14:48:21.981630 139700910706688 ddar.py:60] Depth 9/1000 time = 4.701627254486084
I0123 14:48:26.670490 139700910706688 ddar.py:60] Depth 10/1000 time = 4.688138961791992
I0123 14:48:26.730200 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:48:26.730267 139700910706688 alphageometry.py:566] LM output (score=-3.114954): "n : T i k k n 18 ;"
I0123 14:48:26.730304 139700910706688 alphageometry.py:567] Translation: "n = on_tline n k i k"

I0123 14:48:26.730345 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n k i k ? cong l h l j"
I0123 14:48:26.730518 139700910706688 graph.py:498] 
I0123 14:48:26.730570 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n k i k ? cong l h l j
I0123 14:48:27.915464 139700910706688 ddar.py:60] Depth 1/1000 time = 1.1501154899597168
I0123 14:48:30.636002 139700910706688 ddar.py:60] Depth 2/1000 time = 2.7203152179718018
I0123 14:48:33.582847 139700910706688 ddar.py:60] Depth 3/1000 time = 2.9466116428375244
I0123 14:48:36.908734 139700910706688 ddar.py:60] Depth 4/1000 time = 3.325658082962036
I0123 14:48:42.183697 139700910706688 ddar.py:60] Depth 5/1000 time = 5.274723291397095
I0123 14:48:46.737428 139700910706688 ddar.py:60] Depth 6/1000 time = 4.553470849990845
I0123 14:48:51.419061 139700910706688 ddar.py:60] Depth 7/1000 time = 4.681396484375
I0123 14:48:56.099498 139700910706688 ddar.py:60] Depth 8/1000 time = 4.680189609527588
I0123 14:49:00.791792 139700910706688 ddar.py:60] Depth 9/1000 time = 4.692029714584351
I0123 14:49:05.483081 139700910706688 ddar.py:60] Depth 10/1000 time = 4.690615892410278
I0123 14:49:05.539529 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:49:05.539616 139700910706688 alphageometry.py:566] LM output (score=-3.123519): "n : T g j j n 18 ;"
I0123 14:49:05.539655 139700910706688 alphageometry.py:567] Translation: "n = on_tline n j g j"

I0123 14:49:05.539696 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n j g j ? cong l h l j"
I0123 14:49:05.539867 139700910706688 graph.py:498] 
I0123 14:49:05.539918 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n j g j ? cong l h l j
I0123 14:49:07.804337 139700910706688 ddar.py:60] Depth 1/1000 time = 2.2294344902038574
I0123 14:49:09.544807 139700910706688 ddar.py:60] Depth 2/1000 time = 1.7402451038360596
I0123 14:49:12.590346 139700910706688 ddar.py:60] Depth 3/1000 time = 3.045309543609619
I0123 14:49:17.371433 139700910706688 ddar.py:60] Depth 4/1000 time = 4.780849933624268
I0123 14:49:21.842168 139700910706688 ddar.py:60] Depth 5/1000 time = 4.47049355506897
I0123 14:49:26.573716 139700910706688 ddar.py:60] Depth 6/1000 time = 4.731281995773315
I0123 14:49:31.409347 139700910706688 ddar.py:60] Depth 7/1000 time = 4.835397958755493
I0123 14:49:36.203683 139700910706688 ddar.py:60] Depth 8/1000 time = 4.794077634811401
I0123 14:49:40.980147 139700910706688 ddar.py:60] Depth 9/1000 time = 4.775831460952759
I0123 14:49:41.039777 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:49:41.039838 139700910706688 alphageometry.py:566] LM output (score=-3.124288): "n : T f k k n 18 ;"
I0123 14:49:41.039874 139700910706688 alphageometry.py:567] Translation: "n = on_tline n k f k"

I0123 14:49:41.039912 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n k f k ? cong l h l j"
I0123 14:49:41.040078 139700910706688 graph.py:498] 
I0123 14:49:41.040128 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n k f k ? cong l h l j
I0123 14:49:43.253797 139700910706688 ddar.py:60] Depth 1/1000 time = 2.179299831390381
I0123 14:49:46.015947 139700910706688 ddar.py:60] Depth 2/1000 time = 2.761932134628296
I0123 14:49:49.044029 139700910706688 ddar.py:60] Depth 3/1000 time = 3.0278661251068115
I0123 14:49:52.441300 139700910706688 ddar.py:60] Depth 4/1000 time = 3.397040843963623
I0123 14:49:56.744323 139700910706688 ddar.py:60] Depth 5/1000 time = 4.302797079086304
I0123 14:50:01.332602 139700910706688 ddar.py:60] Depth 6/1000 time = 4.588043928146362
I0123 14:50:06.055165 139700910706688 ddar.py:60] Depth 7/1000 time = 4.722310781478882
I0123 14:50:10.766204 139700910706688 ddar.py:60] Depth 8/1000 time = 4.710803747177124
I0123 14:50:16.561788 139700910706688 ddar.py:60] Depth 9/1000 time = 5.795324802398682
I0123 14:50:21.311261 139700910706688 ddar.py:60] Depth 10/1000 time = 4.7488226890563965
I0123 14:50:21.367618 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:50:21.367702 139700910706688 alphageometry.py:566] LM output (score=-3.134031): "n : T k j k n 18 ;"
I0123 14:50:21.367738 139700910706688 alphageometry.py:567] Translation: "n = on_tline n k k j"

I0123 14:50:21.367776 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n k k j ? cong l h l j"
I0123 14:50:21.367942 139700910706688 graph.py:498] 
I0123 14:50:21.367993 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n k k j ? cong l h l j
I0123 14:50:22.555973 139700910706688 ddar.py:60] Depth 1/1000 time = 1.1490023136138916
I0123 14:50:25.324155 139700910706688 ddar.py:60] Depth 2/1000 time = 2.7679595947265625
I0123 14:50:28.315690 139700910706688 ddar.py:60] Depth 3/1000 time = 2.991304874420166
I0123 14:50:32.716431 139700910706688 ddar.py:60] Depth 4/1000 time = 4.400509595870972
I0123 14:50:37.036573 139700910706688 ddar.py:60] Depth 5/1000 time = 4.319882154464722
I0123 14:50:41.680041 139700910706688 ddar.py:60] Depth 6/1000 time = 4.643213272094727
I0123 14:50:46.460848 139700910706688 ddar.py:60] Depth 7/1000 time = 4.780569553375244
I0123 14:50:51.268305 139700910706688 ddar.py:60] Depth 8/1000 time = 4.807210922241211
I0123 14:50:56.067508 139700910706688 ddar.py:60] Depth 9/1000 time = 4.798929452896118
I0123 14:51:00.825936 139700910706688 ddar.py:60] Depth 10/1000 time = 4.757748603820801
I0123 14:51:00.886371 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:51:00.886434 139700910706688 alphageometry.py:566] LM output (score=-3.171697): "n : T b i j n 18 ;"
I0123 14:51:00.886468 139700910706688 alphageometry.py:567] Translation: "n = on_tline n j b i"

I0123 14:51:00.886506 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n j b i ? cong l h l j"
I0123 14:51:00.886677 139700910706688 graph.py:498] 
I0123 14:51:00.886730 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n j b i ? cong l h l j
I0123 14:51:03.115232 139700910706688 ddar.py:60] Depth 1/1000 time = 2.193378448486328
I0123 14:51:05.864388 139700910706688 ddar.py:60] Depth 2/1000 time = 2.7489242553710938
I0123 14:51:08.936097 139700910706688 ddar.py:60] Depth 3/1000 time = 3.0714943408966064
I0123 14:51:12.599757 139700910706688 ddar.py:60] Depth 4/1000 time = 3.6634249687194824
I0123 14:51:17.008809 139700910706688 ddar.py:60] Depth 5/1000 time = 4.408813953399658
I0123 14:51:22.734883 139700910706688 ddar.py:60] Depth 6/1000 time = 5.725803852081299
I0123 14:51:27.545979 139700910706688 ddar.py:60] Depth 7/1000 time = 4.810857534408569
I0123 14:51:32.393508 139700910706688 ddar.py:60] Depth 8/1000 time = 4.847253084182739
I0123 14:51:37.211579 139700910706688 ddar.py:60] Depth 9/1000 time = 4.817400693893433
I0123 14:51:37.271090 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:51:37.271152 139700910706688 alphageometry.py:566] LM output (score=-3.171761): "n : T c i c n 18 ;"
I0123 14:51:37.271188 139700910706688 alphageometry.py:567] Translation: "n = on_tline n c c i"

I0123 14:51:37.271224 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n c c i ? cong l h l j"
I0123 14:51:37.271391 139700910706688 graph.py:498] 
I0123 14:51:37.271456 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n c c i ? cong l h l j
I0123 14:51:39.546467 139700910706688 ddar.py:60] Depth 1/1000 time = 2.240830659866333
I0123 14:51:42.294782 139700910706688 ddar.py:60] Depth 2/1000 time = 2.7480952739715576
I0123 14:51:44.170103 139700910706688 ddar.py:60] Depth 3/1000 time = 1.875098705291748
I0123 14:51:47.559046 139700910706688 ddar.py:60] Depth 4/1000 time = 3.3887269496917725
I0123 14:51:52.987609 139700910706688 ddar.py:60] Depth 5/1000 time = 5.428319931030273
I0123 14:51:57.591041 139700910706688 ddar.py:60] Depth 6/1000 time = 4.603166818618774
I0123 14:52:02.268308 139700910706688 ddar.py:60] Depth 7/1000 time = 4.677049398422241
I0123 14:52:07.003809 139700910706688 ddar.py:60] Depth 8/1000 time = 4.735267162322998
I0123 14:52:11.785772 139700910706688 ddar.py:60] Depth 9/1000 time = 4.781687259674072
I0123 14:52:16.533073 139700910706688 ddar.py:60] Depth 10/1000 time = 4.746627569198608
I0123 14:52:16.590506 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:52:16.590595 139700910706688 alphageometry.py:566] LM output (score=-3.185603): "n : T g i j n 18 ;"
I0123 14:52:16.590631 139700910706688 alphageometry.py:567] Translation: "n = on_tline n j g i"

I0123 14:52:16.590672 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n j g i ? cong l h l j"
I0123 14:52:16.590842 139700910706688 graph.py:498] 
I0123 14:52:16.590894 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n j g i ? cong l h l j
I0123 14:52:17.773680 139700910706688 ddar.py:60] Depth 1/1000 time = 1.147768259048462
I0123 14:52:20.555674 139700910706688 ddar.py:60] Depth 2/1000 time = 2.7817680835723877
I0123 14:52:23.567392 139700910706688 ddar.py:60] Depth 3/1000 time = 3.011498212814331
I0123 14:52:26.976328 139700910706688 ddar.py:60] Depth 4/1000 time = 3.4086971282958984
I0123 14:52:32.380705 139700910706688 ddar.py:60] Depth 5/1000 time = 5.4041337966918945
I0123 14:52:37.035209 139700910706688 ddar.py:60] Depth 6/1000 time = 4.654246091842651
I0123 14:52:41.801547 139700910706688 ddar.py:60] Depth 7/1000 time = 4.766097784042358
I0123 14:52:46.613981 139700910706688 ddar.py:60] Depth 8/1000 time = 4.812181234359741
I0123 14:52:51.444124 139700910706688 ddar.py:60] Depth 9/1000 time = 4.829877614974976
I0123 14:52:56.262066 139700910706688 ddar.py:60] Depth 10/1000 time = 4.817303419113159
I0123 14:52:56.320913 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:52:56.320977 139700910706688 alphageometry.py:566] LM output (score=-3.192823): "n : T i m m n 18 ;"
I0123 14:52:56.321013 139700910706688 alphageometry.py:567] Translation: "n = on_tline n m i m"

I0123 14:52:56.321051 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n m i m ? cong l h l j"
I0123 14:52:56.321221 139700910706688 graph.py:498] 
I0123 14:52:56.321273 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n m i m ? cong l h l j
I0123 14:52:58.728374 139700910706688 ddar.py:60] Depth 1/1000 time = 2.3724913597106934
I0123 14:53:01.474926 139700910706688 ddar.py:60] Depth 2/1000 time = 2.7463245391845703
I0123 14:53:04.443367 139700910706688 ddar.py:60] Depth 3/1000 time = 2.9682040214538574
I0123 14:53:07.877403 139700910706688 ddar.py:60] Depth 4/1000 time = 3.433799982070923
I0123 14:53:12.141543 139700910706688 ddar.py:60] Depth 5/1000 time = 4.2639055252075195
I0123 14:53:16.672919 139700910706688 ddar.py:60] Depth 6/1000 time = 4.531113624572754
I0123 14:53:21.323815 139700910706688 ddar.py:60] Depth 7/1000 time = 4.650655269622803
I0123 14:53:26.006478 139700910706688 ddar.py:60] Depth 8/1000 time = 4.682419538497925
I0123 14:53:30.805996 139700910706688 ddar.py:60] Depth 9/1000 time = 4.799231290817261
I0123 14:53:35.472331 139700910706688 ddar.py:60] Depth 10/1000 time = 4.66551947593689
I0123 14:53:35.526291 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:53:35.526384 139700910706688 alphageometry.py:566] LM output (score=-3.206495): "n : T c e g n 18 ;"
I0123 14:53:35.526423 139700910706688 alphageometry.py:567] Translation: "n = on_tline n g c e"

I0123 14:53:35.526470 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n g c e ? cong l h l j"
I0123 14:53:35.526656 139700910706688 graph.py:498] 
I0123 14:53:35.526710 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n g c e ? cong l h l j
I0123 14:53:37.829538 139700910706688 ddar.py:60] Depth 1/1000 time = 2.267700433731079
I0123 14:53:40.666261 139700910706688 ddar.py:60] Depth 2/1000 time = 2.8364884853363037
I0123 14:53:43.740823 139700910706688 ddar.py:60] Depth 3/1000 time = 3.0743274688720703
I0123 14:53:47.457219 139700910706688 ddar.py:60] Depth 4/1000 time = 3.7161643505096436
I0123 14:53:52.001919 139700910706688 ddar.py:60] Depth 5/1000 time = 4.5444495677948
I0123 14:53:56.562016 139700910706688 ddar.py:60] Depth 6/1000 time = 4.559821605682373
I0123 14:54:01.186355 139700910706688 ddar.py:60] Depth 7/1000 time = 4.624082088470459
I0123 14:54:05.918782 139700910706688 ddar.py:60] Depth 8/1000 time = 4.732083082199097
I0123 14:54:10.605783 139700910706688 ddar.py:60] Depth 9/1000 time = 4.686284303665161
I0123 14:54:10.660390 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:54:10.660477 139700910706688 alphageometry.py:566] LM output (score=-3.398972): "n : T f n g i 18 ;"
I0123 14:54:10.660514 139700910706688 alphageometry.py:567] Translation: "n = on_tline n f g i"

I0123 14:54:10.660555 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n f g i ? cong l h l j"
I0123 14:54:10.660732 139700910706688 graph.py:498] 
I0123 14:54:10.660783 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_pline m i f g; n = on_tline n f g i ? cong l h l j
I0123 14:54:11.865789 139700910706688 ddar.py:60] Depth 1/1000 time = 1.1696126461029053
I0123 14:54:14.705168 139700910706688 ddar.py:60] Depth 2/1000 time = 2.839144468307495
I0123 14:54:17.795100 139700910706688 ddar.py:60] Depth 3/1000 time = 3.0897016525268555
I0123 14:54:21.299925 139700910706688 ddar.py:60] Depth 4/1000 time = 3.504591464996338
I0123 14:54:25.649040 139700910706688 ddar.py:60] Depth 5/1000 time = 4.348875284194946
I0123 14:54:30.277267 139700910706688 ddar.py:60] Depth 6/1000 time = 4.627955198287964
I0123 14:54:36.196363 139700910706688 ddar.py:60] Depth 7/1000 time = 5.918858289718628
I0123 14:54:41.062872 139700910706688 ddar.py:60] Depth 8/1000 time = 4.866268634796143
I0123 14:54:45.971476 139700910706688 ddar.py:60] Depth 9/1000 time = 4.908312082290649
I0123 14:54:50.865148 139700910706688 ddar.py:60] Depth 10/1000 time = 4.893023252487183
I0123 14:54:50.926081 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:54:50.926152 139700910706688 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b d e 02 D b d d e 03 ; f : C b e f 04 T b e c f 05 ; g : C c f g 06 ; h : C b g h 07 D c e e h 08 ; i : C b g i 09 D c e e i 10 ; j : C e g j 11 D b c b j 12 ; k : C e g k 13 D b c b k 14 ; l : C b j l 15 C e h l 16 ? D l h l j {F1} x00 m : C c i m 17 D c m i m 18 ; x00
I0123 14:54:56.174789 139700910706688 alphageometry.py:566] LM output (score=-1.680438): "n : T j k k n 19 ;"
I0123 14:54:56.175005 139700910706688 alphageometry.py:567] Translation: "n = on_tline n k j k"

I0123 14:54:56.175047 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_line m c i, on_bline m i c; n = on_tline n k j k ? cong l h l j"
I0123 14:54:56.175217 139700910706688 graph.py:498] 
I0123 14:54:56.175269 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_line m c i, on_bline m i c; n = on_tline n k j k ? cong l h l j
I0123 14:54:58.619147 139700910706688 ddar.py:60] Depth 1/1000 time = 2.3977315425872803
I0123 14:55:00.598140 139700910706688 ddar.py:60] Depth 2/1000 time = 1.9787611961364746
I0123 14:55:03.991540 139700910706688 ddar.py:60] Depth 3/1000 time = 3.3931727409362793
I0123 14:55:09.164784 139700910706688 ddar.py:60] Depth 4/1000 time = 5.173001050949097
I0123 14:55:14.400216 139700910706688 ddar.py:60] Depth 5/1000 time = 5.235174894332886
I0123 14:55:19.928824 139700910706688 ddar.py:60] Depth 6/1000 time = 5.5283238887786865
I0123 14:55:25.632881 139700910706688 ddar.py:60] Depth 7/1000 time = 5.70380711555481
I0123 14:55:31.401834 139700910706688 ddar.py:60] Depth 8/1000 time = 5.768694639205933
I0123 14:55:37.169338 139700910706688 ddar.py:60] Depth 9/1000 time = 5.767218351364136
I0123 14:55:42.919617 139700910706688 ddar.py:60] Depth 10/1000 time = 5.749753713607788
I0123 14:55:42.990523 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:55:42.990587 139700910706688 alphageometry.py:566] LM output (score=-1.898154): "n : C c k n 19 D c n k n 20 ;"
I0123 14:55:42.990623 139700910706688 alphageometry.py:567] Translation: "n = on_line n c k, on_bline n k c"

I0123 14:55:42.990661 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_line m c i, on_bline m i c; n = on_line n c k, on_bline n k c ? cong l h l j"
I0123 14:55:42.990836 139700910706688 graph.py:498] 
I0123 14:55:42.990887 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_line m c i, on_bline m i c; n = on_line n c k, on_bline n k c ? cong l h l j
I0123 14:55:45.511790 139700910706688 ddar.py:60] Depth 1/1000 time = 2.4663515090942383
I0123 14:55:48.900566 139700910706688 ddar.py:60] Depth 2/1000 time = 3.388550281524658
I0123 14:55:53.893701 139700910706688 ddar.py:60] Depth 3/1000 time = 4.992899417877197
I0123 14:55:58.688640 139700910706688 ddar.py:60] Depth 4/1000 time = 4.794695854187012
I0123 14:56:04.770164 139700910706688 ddar.py:60] Depth 5/1000 time = 6.081063747406006
I0123 14:56:11.195596 139700910706688 ddar.py:60] Depth 6/1000 time = 6.42514705657959
I0123 14:56:17.747490 139700910706688 ddar.py:60] Depth 7/1000 time = 6.5516438484191895
I0123 14:56:25.475277 139700910706688 ddar.py:60] Depth 8/1000 time = 7.727527379989624
I0123 14:56:32.125862 139700910706688 ddar.py:60] Depth 9/1000 time = 6.650289535522461
I0123 14:56:38.801260 139700910706688 ddar.py:60] Depth 10/1000 time = 6.674834489822388
I0123 14:56:38.887850 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:56:38.887915 139700910706688 alphageometry.py:566] LM output (score=-2.060398): "n : C i j n 19 D i n j n 20 ;"
I0123 14:56:38.887953 139700910706688 alphageometry.py:567] Translation: "n = on_line n i j, on_bline n j i"

I0123 14:56:38.887991 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_line m c i, on_bline m i c; n = on_line n i j, on_bline n j i ? cong l h l j"
I0123 14:56:38.888164 139700910706688 graph.py:498] 
I0123 14:56:38.888216 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_line m c i, on_bline m i c; n = on_line n i j, on_bline n j i ? cong l h l j
I0123 14:56:41.408019 139700910706688 ddar.py:60] Depth 1/1000 time = 2.4656612873077393
I0123 14:56:44.579867 139700910706688 ddar.py:60] Depth 2/1000 time = 3.1716148853302
I0123 14:56:48.032736 139700910706688 ddar.py:60] Depth 3/1000 time = 3.4526307582855225
I0123 14:56:51.792361 139700910706688 ddar.py:60] Depth 4/1000 time = 3.7593958377838135
I0123 14:56:57.880984 139700910706688 ddar.py:60] Depth 5/1000 time = 6.088366746902466
I0123 14:57:03.296057 139700910706688 ddar.py:60] Depth 6/1000 time = 5.414783477783203
I0123 14:57:08.935662 139700910706688 ddar.py:60] Depth 7/1000 time = 5.639329671859741
I0123 14:57:14.589573 139700910706688 ddar.py:60] Depth 8/1000 time = 5.653668642044067
I0123 14:57:20.277154 139700910706688 ddar.py:60] Depth 9/1000 time = 5.687283992767334
I0123 14:57:27.106897 139700910706688 ddar.py:60] Depth 10/1000 time = 6.829201698303223
I0123 14:57:27.177489 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:57:27.177551 139700910706688 alphageometry.py:566] LM output (score=-2.118682): "n : T d e e n 19 ;"
I0123 14:57:27.177588 139700910706688 alphageometry.py:567] Translation: "n = on_tline n e d e"

I0123 14:57:27.177625 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_line m c i, on_bline m i c; n = on_tline n e d e ? cong l h l j"
I0123 14:57:27.177805 139700910706688 graph.py:498] 
I0123 14:57:27.177859 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_line m c i, on_bline m i c; n = on_tline n e d e ? cong l h l j
I0123 14:57:28.513797 139700910706688 ddar.py:60] Depth 1/1000 time = 1.291426420211792
I0123 14:57:31.596598 139700910706688 ddar.py:60] Depth 2/1000 time = 3.082571029663086
I0123 14:57:34.974378 139700910706688 ddar.py:60] Depth 3/1000 time = 3.3775227069854736
I0123 14:57:39.170300 139700910706688 ddar.py:60] Depth 4/1000 time = 4.195685863494873
I0123 14:57:45.447009 139700910706688 ddar.py:60] Depth 5/1000 time = 6.276463270187378
I0123 14:57:50.798382 139700910706688 ddar.py:60] Depth 6/1000 time = 5.351093530654907
I0123 14:57:56.322036 139700910706688 ddar.py:60] Depth 7/1000 time = 5.523404598236084
I0123 14:58:01.819406 139700910706688 ddar.py:60] Depth 8/1000 time = 5.4970808029174805
I0123 14:58:07.340299 139700910706688 ddar.py:60] Depth 9/1000 time = 5.5203423500061035
I0123 14:58:07.405929 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:58:07.405993 139700910706688 alphageometry.py:566] LM output (score=-2.183632): "n : T i m i n 19 ;"
I0123 14:58:07.406028 139700910706688 alphageometry.py:567] Translation: "n = on_tline n i i m"

I0123 14:58:07.406066 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_line m c i, on_bline m i c; n = on_tline n i i m ? cong l h l j"
I0123 14:58:07.406242 139700910706688 graph.py:498] 
I0123 14:58:07.406294 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_line m c i, on_bline m i c; n = on_tline n i i m ? cong l h l j
I0123 14:58:09.884322 139700910706688 ddar.py:60] Depth 1/1000 time = 2.43527889251709
I0123 14:58:13.048536 139700910706688 ddar.py:60] Depth 2/1000 time = 3.1639797687530518
I0123 14:58:16.514084 139700910706688 ddar.py:60] Depth 3/1000 time = 3.4652984142303467
I0123 14:58:20.796795 139700910706688 ddar.py:60] Depth 4/1000 time = 4.282477140426636
I0123 14:58:26.048156 139700910706688 ddar.py:60] Depth 5/1000 time = 5.251115083694458
I0123 14:58:31.399829 139700910706688 ddar.py:60] Depth 6/1000 time = 5.351399898529053
I0123 14:58:36.873683 139700910706688 ddar.py:60] Depth 7/1000 time = 5.473597764968872
I0123 14:58:42.375971 139700910706688 ddar.py:60] Depth 8/1000 time = 5.501994371414185
I0123 14:58:47.898635 139700910706688 ddar.py:60] Depth 9/1000 time = 5.522155046463013
I0123 14:58:47.960449 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:58:47.960510 139700910706688 alphageometry.py:566] LM output (score=-2.242025): "n : C c j n 19 D c n j n 20 ;"
I0123 14:58:47.960545 139700910706688 alphageometry.py:567] Translation: "n = on_line n c j, on_bline n j c"

I0123 14:58:47.960582 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_line m c i, on_bline m i c; n = on_line n c j, on_bline n j c ? cong l h l j"
I0123 14:58:47.960758 139700910706688 graph.py:498] 
I0123 14:58:47.960809 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_line m c i, on_bline m i c; n = on_line n c j, on_bline n j c ? cong l h l j
I0123 14:58:50.577883 139700910706688 ddar.py:60] Depth 1/1000 time = 2.5590596199035645
I0123 14:58:54.023952 139700910706688 ddar.py:60] Depth 2/1000 time = 3.445843458175659
I0123 14:58:57.927009 139700910706688 ddar.py:60] Depth 3/1000 time = 3.902792453765869
I0123 14:59:02.735572 139700910706688 ddar.py:60] Depth 4/1000 time = 4.80832576751709
I0123 14:59:08.821400 139700910706688 ddar.py:60] Depth 5/1000 time = 6.0855796337127686
I0123 14:59:16.462906 139700910706688 ddar.py:60] Depth 6/1000 time = 7.641226768493652
I0123 14:59:23.150235 139700910706688 ddar.py:60] Depth 7/1000 time = 6.6870856285095215
I0123 14:59:29.856195 139700910706688 ddar.py:60] Depth 8/1000 time = 6.705706357955933
I0123 14:59:36.529686 139700910706688 ddar.py:60] Depth 9/1000 time = 6.6731953620910645
I0123 14:59:43.185519 139700910706688 ddar.py:60] Depth 10/1000 time = 6.655287504196167
I0123 14:59:43.270460 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:59:43.270535 139700910706688 alphageometry.py:566] LM output (score=-2.295568): "n : C i k n 19 D i n k n 20 ;"
I0123 14:59:43.270572 139700910706688 alphageometry.py:567] Translation: "n = on_line n i k, on_bline n k i"

I0123 14:59:43.270612 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_line m c i, on_bline m i c; n = on_line n i k, on_bline n k i ? cong l h l j"
I0123 14:59:43.270786 139700910706688 graph.py:498] 
I0123 14:59:43.270835 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_line m c i, on_bline m i c; n = on_line n i k, on_bline n k i ? cong l h l j
I0123 14:59:45.781974 139700910706688 ddar.py:60] Depth 1/1000 time = 2.4545326232910156
I0123 14:59:49.009232 139700910706688 ddar.py:60] Depth 2/1000 time = 3.2270267009735107
I0123 14:59:52.557827 139700910706688 ddar.py:60] Depth 3/1000 time = 3.5483615398406982
I0123 14:59:58.169259 139700910706688 ddar.py:60] Depth 4/1000 time = 5.611201047897339
I0123 15:00:03.504709 139700910706688 ddar.py:60] Depth 5/1000 time = 5.335204839706421
I0123 15:00:09.025607 139700910706688 ddar.py:60] Depth 6/1000 time = 5.520629644393921
I0123 15:00:14.727981 139700910706688 ddar.py:60] Depth 7/1000 time = 5.702114105224609
I0123 15:00:20.374694 139700910706688 ddar.py:60] Depth 8/1000 time = 5.646424293518066
I0123 15:00:26.048237 139700910706688 ddar.py:60] Depth 9/1000 time = 5.6729958057403564
I0123 15:00:26.116639 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:00:26.116701 139700910706688 alphageometry.py:566] LM output (score=-2.300184): "n : T d f d n 19 ;"
I0123 15:00:26.116737 139700910706688 alphageometry.py:567] Translation: "n = on_tline n d d f"

I0123 15:00:26.116775 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_line m c i, on_bline m i c; n = on_tline n d d f ? cong l h l j"
I0123 15:00:26.116948 139700910706688 graph.py:498] 
I0123 15:00:26.116999 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_line m c i, on_bline m i c; n = on_tline n d d f ? cong l h l j
I0123 15:00:28.654278 139700910706688 ddar.py:60] Depth 1/1000 time = 2.4934873580932617
I0123 15:00:31.935624 139700910706688 ddar.py:60] Depth 2/1000 time = 3.2810986042022705
I0123 15:00:35.540811 139700910706688 ddar.py:60] Depth 3/1000 time = 3.6048872470855713
I0123 15:00:39.490354 139700910706688 ddar.py:60] Depth 4/1000 time = 3.949307680130005
I0123 15:00:44.665159 139700910706688 ddar.py:60] Depth 5/1000 time = 5.174553632736206
I0123 15:00:50.231139 139700910706688 ddar.py:60] Depth 6/1000 time = 5.56570029258728
I0123 15:00:56.094323 139700910706688 ddar.py:60] Depth 7/1000 time = 5.8629114627838135
I0123 15:01:01.956279 139700910706688 ddar.py:60] Depth 8/1000 time = 5.861703395843506
I0123 15:01:07.790950 139700910706688 ddar.py:60] Depth 9/1000 time = 5.834376335144043
I0123 15:01:14.787845 139700910706688 ddar.py:60] Depth 10/1000 time = 6.996336221694946
I0123 15:01:20.798644 139700910706688 ddar.py:60] Depth 11/1000 time = 5.941020250320435
I0123 15:01:20.802344 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:01:20.802407 139700910706688 alphageometry.py:566] LM output (score=-2.389514): "n : C a c n 19 D a n c n 20 ;"
I0123 15:01:20.802442 139700910706688 alphageometry.py:567] Translation: "n = on_line n a c, on_bline n c a"

I0123 15:01:20.802482 139700910706688 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_line m c i, on_bline m i c; n = on_line n a c, on_bline n c a ? cong l h l j"
I0123 15:01:20.802658 139700910706688 graph.py:498] 
I0123 15:01:20.802712 139700910706688 graph.py:499] a b c = triangle a b c; d = circle d a b c; e = on_circle e d b, on_line e d b; f = foot f c b e; g = on_line g c f; h = on_circle h e c, on_line h b g; i = on_circle i e c, on_line i b g; j = on_circle j b c, on_line j e g; k = on_circle k b c, on_line k e g; l = on_line l b j, on_line l e h; m = on_line m c i, on_bline m i c; n = on_line n a c, on_bline n c a ? cong l h l j
I0123 15:01:22.232632 139700910706688 ddar.py:60] Depth 1/1000 time = 1.3757002353668213
I0123 15:01:26.913834 139700910706688 ddar.py:60] Depth 2/1000 time = 4.680975914001465
I0123 15:01:29.635577 139700910706688 ddar.py:60] Depth 3/1000 time = 2.721513271331787
I0123 15:01:35.535533 139700910706688 ddar.py:60] Depth 4/1000 time = 5.8997321128845215
I0123 15:01:41.574802 139700910706688 ddar.py:60] Depth 5/1000 time = 6.039033889770508
I0123 15:01:48.008417 139700910706688 ddar.py:60] Depth 6/1000 time = 6.433343410491943
I0123 15:01:54.545852 139700910706688 ddar.py:60] Depth 7/1000 time = 6.537186861038208
I0123 15:02:02.324048 139700910706688 ddar.py:60] Depth 8/1000 time = 7.777941942214966
I0123 15:02:08.964133 139700910706688 ddar.py:60] Depth 9/1000 time = 6.639797687530518
I0123 15:02:08.964754 139700910706688 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:02:08.964798 139700910706688 alphageometry.py:585] Timeout.
