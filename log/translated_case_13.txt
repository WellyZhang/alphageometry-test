I0123 14:34:14.502321 140581834321920 inference_utils.py:69] Parsing gin configuration.
I0123 14:34:14.502417 140581834321920 inference_utils.py:71] Added Gin search path meliad_lib/meliad/transformer/configs
I0123 14:34:14.502615 140581834321920 inference_utils.py:74] Loading Gin config file base_htrans.gin
I0123 14:34:14.502648 140581834321920 inference_utils.py:74] Loading Gin config file size/medium_150M.gin
I0123 14:34:14.502677 140581834321920 inference_utils.py:74] Loading Gin config file options/positions_t5.gin
I0123 14:34:14.502707 140581834321920 inference_utils.py:74] Loading Gin config file options/lr_cosine_decay.gin
I0123 14:34:14.502734 140581834321920 inference_utils.py:74] Loading Gin config file options/seq_1024_nocache.gin
I0123 14:34:14.502759 140581834321920 inference_utils.py:74] Loading Gin config file geometry_150M_generate.gin
I0123 14:34:14.502784 140581834321920 inference_utils.py:76] Overriding Gin param DecoderOnlyLanguageModelGenerate.output_token_losses=True
I0123 14:34:14.502809 140581834321920 inference_utils.py:76] Overriding Gin param TransformerTaskConfig.batch_size=32
I0123 14:34:14.502835 140581834321920 inference_utils.py:76] Overriding Gin param TransformerTaskConfig.sequence_length=128
I0123 14:34:14.502860 140581834321920 inference_utils.py:76] Overriding Gin param Trainer.restore_state_variables=False
I0123 14:34:14.502904 140581834321920 resource_reader.py:50] system_path_file_exists:base_htrans.gin
E0123 14:34:14.503039 140581834321920 resource_reader.py:55] Path not found: base_htrans.gin
I0123 14:34:14.503243 140581834321920 resource_reader.py:50] system_path_file_exists:trainer_configuration.gin
E0123 14:34:14.503341 140581834321920 resource_reader.py:55] Path not found: trainer_configuration.gin
I0123 14:34:14.509632 140581834321920 resource_reader.py:50] system_path_file_exists:size/medium_150M.gin
E0123 14:34:14.509762 140581834321920 resource_reader.py:55] Path not found: size/medium_150M.gin
I0123 14:34:14.510081 140581834321920 resource_reader.py:50] system_path_file_exists:options/positions_t5.gin
E0123 14:34:14.510184 140581834321920 resource_reader.py:55] Path not found: options/positions_t5.gin
I0123 14:34:14.510461 140581834321920 resource_reader.py:50] system_path_file_exists:options/lr_cosine_decay.gin
E0123 14:34:14.510561 140581834321920 resource_reader.py:55] Path not found: options/lr_cosine_decay.gin
I0123 14:34:14.510970 140581834321920 resource_reader.py:50] system_path_file_exists:options/seq_1024_nocache.gin
E0123 14:34:14.511070 140581834321920 resource_reader.py:55] Path not found: options/seq_1024_nocache.gin
I0123 14:34:14.514604 140581834321920 training_loop.py:334] ==== Training loop: initializing model ====
I0123 14:34:14.614042 140581834321920 xla_bridge.py:660] Unable to initialize backend 'rocm': NOT_FOUND: Could not find registered platform with name: "rocm". Available platform names are: CUDA
I0123 14:34:14.614809 140581834321920 xla_bridge.py:660] Unable to initialize backend 'tpu': INTERNAL: Failed to open libtpu.so: libtpu.so: cannot open shared object file: No such file or directory
I0123 14:34:14.621603 140581834321920 training_loop.py:335] Process 0 of 1
I0123 14:34:14.621663 140581834321920 training_loop.py:336] Local device count = 1
I0123 14:34:14.621703 140581834321920 training_loop.py:337] Number of replicas = 1
I0123 14:34:14.621734 140581834321920 training_loop.py:339] Using random number seed 42
I0123 14:34:15.117131 140581834321920 training_loop.py:359] Initializing the model.
I0123 14:34:15.541917 140581834321920 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.542190 140581834321920 decoder_stack.py:316] dstack: scanning over 1 windows.
I0123 14:34:15.542299 140581834321920 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:34:15.542379 140581834321920 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:34:15.542458 140581834321920 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:34:15.542542 140581834321920 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:34:15.542617 140581834321920 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:34:15.542689 140581834321920 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:34:15.542760 140581834321920 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:34:15.542831 140581834321920 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:34:15.542902 140581834321920 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:34:15.542973 140581834321920 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:34:15.543043 140581834321920 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:34:15.543112 140581834321920 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:34:15.543151 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:15.543198 140581834321920 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 14:34:15.543314 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:15.543354 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:15.543386 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:15.545404 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.550780 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:15.561509 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.561799 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:15.566204 140581834321920 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:34:15.576922 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:15.576979 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:15.577016 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:15.577049 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.577114 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.578309 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.578389 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.579246 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.581706 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.587459 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.589178 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.589261 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:15.589297 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:15.589359 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.589488 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:15.589823 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:15.589870 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:15.591798 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.591902 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:15.594781 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.594861 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:15.595361 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:15.605485 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:15.615072 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.615231 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:15.615533 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.615618 140581834321920 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 14:34:15.615728 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:15.615767 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:15.615797 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:15.617677 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.620177 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:15.625837 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.626103 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:15.628762 140581834321920 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:34:15.632629 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:15.632686 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:15.632721 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:15.632751 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.632814 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.633398 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.633474 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.633842 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.634613 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.637106 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.637731 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.637808 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:15.637841 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:15.637900 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.638027 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:15.638349 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:15.638391 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:15.640333 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.640429 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:15.642939 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.643021 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:15.643455 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:15.645781 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:15.647686 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.647782 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:15.648073 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.648153 140581834321920 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 14:34:15.648262 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:15.648301 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:15.648331 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:15.650229 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.652596 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:15.658554 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.658814 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:15.661466 140581834321920 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:34:15.665292 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:15.665347 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:15.665386 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:15.665418 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.665481 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.666047 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.666124 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.666482 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.667246 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.669770 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.670435 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.670512 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:15.670547 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:15.670604 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.670735 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:15.671053 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:15.671095 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:15.673007 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.673107 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:15.675649 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.675734 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:15.676222 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:15.678694 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:15.680632 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.680727 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:15.681023 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.681104 140581834321920 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 14:34:15.681214 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:15.681253 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:15.681284 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:15.683197 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.685624 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:15.691308 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.691575 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:15.694257 140581834321920 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:34:15.698065 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:15.698119 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:15.698154 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:15.698184 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.698246 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.698808 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.698884 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.699241 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.700014 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.702589 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.703205 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.703281 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:15.703316 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:15.703381 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.703510 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:15.703830 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:15.703873 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:15.705775 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.705868 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:15.708455 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.708540 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:15.708978 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:15.711255 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:15.713171 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.713268 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:15.713561 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.713646 140581834321920 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 14:34:15.713758 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:15.713798 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:15.713828 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:15.715741 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.718150 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:15.723746 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.724010 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:15.726721 140581834321920 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:34:15.730458 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:15.730512 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:15.730547 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:15.730577 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.730639 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.731200 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.731280 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.731646 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.732419 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.735317 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.735934 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.736011 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:15.736047 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:15.736109 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.736243 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:15.736563 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:15.736606 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:15.738535 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.738630 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:15.741194 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.741276 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:15.741716 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:15.743980 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:15.745949 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.746044 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:15.746337 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.746418 140581834321920 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 14:34:15.746528 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:15.746567 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:15.746597 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:15.748418 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.750832 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:15.756461 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.756716 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:15.759431 140581834321920 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:34:15.763158 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:15.763213 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:15.763247 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:15.763277 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.763339 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.763934 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.764010 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.764369 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.765149 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.767636 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.768263 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.768342 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:15.768378 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:15.768438 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.768565 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:15.768884 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:15.768932 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:15.770819 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.770913 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:15.773467 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.773547 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:15.773982 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:15.776298 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:15.778221 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.778317 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:15.778615 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.778696 140581834321920 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 14:34:15.778804 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:15.778844 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:15.778875 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:15.780714 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.783164 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:15.788775 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.789036 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:15.791822 140581834321920 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:34:15.795594 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:15.795650 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:15.795685 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:15.795715 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.795778 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.796340 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.796416 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.796777 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.797539 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.800071 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.800687 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.800763 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:15.800797 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:15.800855 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.800979 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:15.801302 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:15.801345 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:15.803320 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.803413 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:15.805930 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.806010 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:15.806428 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:15.809074 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:15.811000 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.811102 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:15.811397 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.811478 140581834321920 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 14:34:15.811587 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:15.811625 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:15.811655 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:15.948925 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.952018 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:15.957928 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.958229 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:15.960970 140581834321920 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:34:15.964882 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:15.964940 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:15.964976 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:15.965008 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.965073 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.965696 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.965774 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.966170 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.966967 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.969593 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.970243 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.970322 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:15.970358 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:15.970419 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.970555 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:15.970899 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:15.970944 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:15.972867 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.972961 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:15.975583 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.975669 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:15.976109 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:15.978451 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:15.980386 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.980493 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:15.980792 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.980875 140581834321920 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 14:34:15.980986 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:15.981025 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:15.981055 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:15.982995 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.985427 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:15.991266 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.991533 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:15.994453 140581834321920 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:34:15.998253 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:15.998308 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:15.998344 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:15.998375 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.998438 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.999016 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.999093 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:15.999453 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.000236 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.002826 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.003452 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.003529 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:16.003563 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:16.003622 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.003750 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:16.004070 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:16.004113 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.006035 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.006129 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.008723 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.008804 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:16.009234 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:16.011518 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.013491 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.013585 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.013883 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.013970 140581834321920 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 14:34:16.014082 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:16.014121 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:16.014153 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:16.015973 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.018455 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:16.024041 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.024313 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:16.027393 140581834321920 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:34:16.031148 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:16.031203 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:16.031238 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:16.031269 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.031332 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.031946 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.032025 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.032395 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.033175 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.035706 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.036329 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.036405 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:16.036440 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:16.036497 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.036624 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:16.036942 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:16.036985 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.038922 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.039016 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.041587 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.041675 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:16.042105 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:16.044439 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.046375 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.046473 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.046769 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.046857 140581834321920 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 14:34:16.046968 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:16.047008 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:16.047039 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:16.048874 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.051365 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:16.056986 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.057255 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:16.059905 140581834321920 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:34:16.063657 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:16.063712 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:16.063748 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:16.063779 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.063842 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.064408 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.064483 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.064843 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.065615 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.068107 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.068723 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.068800 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:16.068835 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:16.068893 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.069024 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:16.069341 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:16.069384 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.071362 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.071456 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.074261 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.074347 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:16.074771 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:16.077117 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.079030 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.079126 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.079420 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.079502 140581834321920 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 14:34:16.079617 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:16.079656 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:16.079686 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:16.081560 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.083970 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:16.089588 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.089856 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:16.092614 140581834321920 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:34:16.096406 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:16.096461 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:16.096496 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:16.096526 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.096589 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.097153 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.097229 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.097588 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.098378 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.101004 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.101988 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.102068 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:16.102103 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:16.102163 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.102298 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:16.102618 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:16.102661 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.104555 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.104650 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.107176 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.107257 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:16.107741 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:16.110005 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.111910 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.112005 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.112297 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.112583 140581834321920 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:34:16.112653 140581834321920 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:34:16.112717 140581834321920 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:34:16.112774 140581834321920 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:34:16.112830 140581834321920 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:34:16.112884 140581834321920 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:34:16.112937 140581834321920 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:34:16.112990 140581834321920 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:34:16.113042 140581834321920 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:34:16.113094 140581834321920 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:34:16.113146 140581834321920 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:34:16.113198 140581834321920 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:34:16.113235 140581834321920 decoder_stack.py:344] dstack: Final layernorm.
I0123 14:34:16.116760 140581834321920 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:16.164582 140581834321920 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.164669 140581834321920 decoder_stack.py:333] dstack: autoregressive generator.
I0123 14:34:16.164722 140581834321920 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 14:34:16.164827 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:16.164865 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:16.164895 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:16.164958 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.167407 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:16.172944 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.173211 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:16.175876 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:16.192432 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:16.192488 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:16.192524 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:16.192556 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.192621 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.193771 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.193852 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.194581 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.196616 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.201539 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.202875 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.202962 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:16.202998 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:16.203058 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.203192 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:16.203302 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:16.203341 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.205379 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.205475 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.207950 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.208032 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:16.208140 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:16.210408 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.212367 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.212464 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.212760 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.212842 140581834321920 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 14:34:16.212953 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:16.212992 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:16.213023 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:16.213088 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.215381 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:16.220919 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.221181 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:16.223898 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:16.236963 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:16.237018 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:16.237054 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:16.237085 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.237148 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.237716 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.237797 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.238155 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.238844 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.241345 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.241964 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.242041 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:16.242080 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:16.242139 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.242269 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:16.242378 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:16.242416 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.244329 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.244422 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.246860 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.246946 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:16.247055 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:16.249305 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.251266 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.251363 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.251653 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.251734 140581834321920 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 14:34:16.251843 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:16.251883 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:16.251914 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:16.251977 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.254276 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:16.259764 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.260025 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:16.262709 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:16.279536 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:16.279619 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:16.279659 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:16.279690 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.279767 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.280384 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.280464 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.280839 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.281549 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.284125 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.284751 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.284827 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:16.284861 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:16.284931 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.285064 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:16.285180 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:16.285219 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.287244 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.287338 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.289848 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.289927 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:16.290036 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:16.292323 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.294299 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.294395 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.294687 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.294771 140581834321920 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 14:34:16.294885 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:16.294927 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:16.294958 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:16.295025 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.297304 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:16.302807 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.303072 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:16.305990 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:16.318826 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:16.318882 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:16.318917 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:16.318947 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.319009 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.319567 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.319643 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.320010 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.320721 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.323255 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.323887 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.323965 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:16.324000 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:16.324060 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.324205 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:16.324315 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:16.324353 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.326297 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.326396 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.328819 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.328899 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:16.329007 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:16.331260 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.333163 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.333259 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.333548 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.333630 140581834321920 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 14:34:16.333750 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:16.333790 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:16.333820 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:16.333884 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.336508 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:16.342035 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.342298 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:16.344925 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:16.357647 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:16.357702 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:16.357737 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:16.357767 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.357830 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.358387 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.358463 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.358826 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.359521 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.362098 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.362725 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.362802 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:16.362837 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:16.362895 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.363029 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:16.363138 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:16.363176 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.365060 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.365154 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.367582 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.367662 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:16.367768 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:16.370082 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.371972 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.372069 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.372356 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.372437 140581834321920 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 14:34:16.372547 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:16.372586 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:16.372617 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:16.372680 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.374974 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:16.380451 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.380713 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:16.383439 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:16.396214 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:16.396269 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:16.396304 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:16.396334 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.396396 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.396958 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.397035 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.397398 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.398110 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.400637 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.401262 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.401340 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:16.401374 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:16.401432 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.401563 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:16.401684 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:16.401725 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.403690 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.403784 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.406195 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.406279 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:16.406387 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:16.408640 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.410547 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.410645 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.410938 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.411019 140581834321920 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 14:34:16.411128 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:16.411166 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:16.411197 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:16.411262 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.413543 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:16.419140 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.419399 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:16.422029 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:16.434684 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:16.434739 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:16.434777 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:16.434807 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.434870 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.435425 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.435505 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.435870 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.436566 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.439070 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.440049 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.440127 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:16.440162 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:16.440220 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.440349 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:16.440459 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:16.440504 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.442421 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.442517 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.444960 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.445040 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:16.445151 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:16.447382 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.449325 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.449419 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.449714 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.449796 140581834321920 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 14:34:16.449904 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:16.449943 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:16.449973 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:16.450035 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.452341 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:16.457870 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.458143 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:16.460829 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:16.473441 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:16.473497 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:16.473531 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:16.473562 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.473629 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.474247 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.474324 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.474688 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.475387 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.477912 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.478544 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.478622 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:16.478657 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:16.478715 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.478848 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:16.478960 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:16.479004 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.480884 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.480978 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.483457 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.483539 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:16.483647 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:16.485872 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.487841 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.487936 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.488224 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.488306 140581834321920 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 14:34:16.488414 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:16.488453 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:16.488484 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:16.488546 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.490797 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:16.496324 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.496586 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:16.499242 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:16.511874 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:16.511929 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:16.511964 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:16.511993 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.512056 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.512618 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.512695 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.513059 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.513769 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.516283 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.516950 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.517027 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:16.517064 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:16.517127 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.517257 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:16.517368 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:16.517406 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.519315 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.519409 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.521816 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.521897 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:16.522003 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:16.524230 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.526190 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.526286 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.526576 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.526658 140581834321920 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 14:34:16.526769 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:16.526808 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:16.526840 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:16.526903 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.529168 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:16.534631 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.534890 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:16.537568 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:16.550445 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:16.550500 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:16.550535 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:16.550565 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.550628 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.551233 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.551311 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.551674 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.552373 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.554896 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.555529 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.555609 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:16.555644 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:16.555703 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.555833 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:16.555943 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:16.555981 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.557874 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.557974 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.560445 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.560525 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:16.560633 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:16.562909 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.564830 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.564925 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.565216 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.565297 140581834321920 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 14:34:16.565407 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:16.565446 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:16.565477 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:16.565539 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.567873 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:16.573414 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.573684 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:16.576364 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:16.589369 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:16.589423 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:16.589459 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:16.589490 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.589553 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.590114 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.590191 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.590553 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.591247 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.593755 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.594424 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.594503 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:16.594538 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:16.594596 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.594727 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:16.594835 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:16.594874 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.596774 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.596874 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.599313 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.599393 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:16.599501 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:16.601740 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.603693 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.603789 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.604081 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.604162 140581834321920 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 14:34:16.604273 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:16.604312 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:16.604344 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:16.604407 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.606688 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:16.612168 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.612430 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:16.615170 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:16.627883 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:16.627940 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:16.627977 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:16.628008 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.628073 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.628634 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.628711 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.629073 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.629817 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.632318 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.632941 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.633019 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:16.633054 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:16.633112 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.633243 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:16.633351 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:16.633389 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.635275 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.635371 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.637808 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.637893 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:16.638001 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:16.640286 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.642188 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.642286 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.642576 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.642668 140581834321920 decoder_stack.py:344] dstack: Final layernorm.
I0123 14:34:16.645580 140581834321920 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:16.701607 140581834321920 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.701699 140581834321920 decoder_stack.py:333] dstack: autoregressive generator.
I0123 14:34:16.701753 140581834321920 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 14:34:16.701858 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:16.701896 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:16.701927 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:16.701990 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.704701 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:16.710150 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.710412 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:16.713039 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:16.725421 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:16.725477 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:16.725512 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:16.725541 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.725603 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.726161 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.726238 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.726597 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.727281 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.729798 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.730410 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.730486 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:16.730521 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:16.730580 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.730707 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:16.730821 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:16.730860 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.732704 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.732797 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.735212 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.735293 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:16.735403 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:16.737674 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.739544 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.739639 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.739931 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.740014 140581834321920 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 14:34:16.740123 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:16.740162 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:16.740193 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:16.740257 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.742524 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:16.747889 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.748150 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:16.750829 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:16.763086 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:16.763141 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:16.763176 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:16.763206 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.763269 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.763827 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.763903 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.764264 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.764949 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.767493 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.768115 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.768193 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:16.768228 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:16.768288 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.768418 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:16.768525 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:16.768569 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.770426 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.770521 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.772910 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.772990 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:16.773098 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:16.775348 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.777195 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.777292 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.777580 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.777667 140581834321920 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 14:34:16.777778 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:16.777818 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:16.777850 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:16.777914 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.780150 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:16.785544 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.785815 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:16.788507 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:16.800938 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:16.800994 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:16.801028 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:16.801059 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.801120 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.801679 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.801757 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.802113 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.802786 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.805299 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.805916 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.805994 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:16.806029 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:16.806088 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.806215 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:16.806324 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:16.806362 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.808199 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.808294 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.810871 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.810951 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:16.811061 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:16.813779 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.815637 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.815734 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.816025 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.816108 140581834321920 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 14:34:16.816218 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:16.816258 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:16.816288 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:16.816350 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.818604 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:16.824060 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.824320 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:16.827020 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:16.839534 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:16.839589 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:16.839626 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:16.839663 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.839728 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.840285 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.840361 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.840719 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.841404 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.843950 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.844577 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.844654 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:16.844688 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:16.844747 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.844873 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:16.844981 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:16.845020 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.846910 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.847005 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.849408 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.849487 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:16.849594 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:16.851882 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.853753 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.853848 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.854135 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.854216 140581834321920 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 14:34:16.854323 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:16.854361 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:16.854390 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:16.854452 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.856680 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:16.862172 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.862441 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:16.865372 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:16.878319 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:16.878374 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:16.878408 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:16.878439 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.878502 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.879070 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.879147 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.879515 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.880230 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.882881 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.883538 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.883617 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:16.883652 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:16.883712 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.883844 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:16.883956 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:16.883996 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.885972 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.886075 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.888601 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.888682 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:16.888795 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:16.891113 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.892984 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.893079 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.893368 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.893449 140581834321920 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 14:34:16.893557 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:16.893595 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:16.893625 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:16.893698 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.896023 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:16.901436 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.901708 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:16.904412 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:16.916938 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:16.916990 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:16.917024 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:16.917053 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.917115 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.917677 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.917753 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.918115 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.918806 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.921383 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.922004 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.922080 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:16.922113 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:16.922169 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.922295 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:16.922402 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:16.922439 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.924318 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.924417 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.926847 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.926926 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:16.927034 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:16.929732 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.931607 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.931702 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.931993 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.932075 140581834321920 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 14:34:16.932182 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:16.932220 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:16.932249 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:16.932311 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.934593 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:16.940033 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.940294 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:16.943001 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:16.955533 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:16.955585 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:16.955618 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:16.955646 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.955708 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.956272 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.956347 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.956703 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.957392 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.959946 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.960570 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.960647 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:16.960681 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:16.960739 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.960866 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:16.960978 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:16.961015 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.963092 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.963185 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.965808 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.965887 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:16.965993 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:16.968260 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:16.970127 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.970221 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:16.970506 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.970586 140581834321920 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 14:34:16.970693 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:16.970731 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:16.970760 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:16.970821 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.973076 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:16.978535 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.978796 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:16.981493 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:16.993965 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:16.994018 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:16.994051 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:16.994080 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.994141 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.994698 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.994772 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.995133 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.995824 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.998373 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.998996 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.999073 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:16.999107 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:16.999167 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:16.999295 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:16.999403 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:16.999440 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:17.001301 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.001394 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:17.003802 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.003885 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:17.003993 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:17.006289 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:17.008161 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.008255 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:17.008539 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.008619 140581834321920 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 14:34:17.008727 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:17.008765 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:17.008794 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:17.008855 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.011123 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:17.016550 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.016809 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:17.019510 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:17.032007 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:17.032061 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:17.032095 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:17.032124 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.032187 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.032746 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.032820 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.033175 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.033865 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.036429 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.037052 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.037128 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:17.037162 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:17.037219 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.037346 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:17.037451 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:17.037489 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:17.039361 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.039454 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:17.041885 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.041972 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:17.042081 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:17.044726 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:17.046588 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.046683 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:17.046969 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.047051 140581834321920 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 14:34:17.047158 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:17.047196 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:17.047225 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:17.047287 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.049541 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:17.054966 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.055227 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:17.057912 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:17.070600 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:17.070653 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:17.070687 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:17.070717 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.070779 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.071338 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.071413 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.071768 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.072454 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.074996 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.075609 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.075685 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:17.075719 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:17.075774 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.075899 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:17.076004 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:17.076042 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:17.078391 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.078487 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:17.080873 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.080950 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:17.081067 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:17.083329 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:17.085160 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.085254 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:17.085541 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.085622 140581834321920 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 14:34:17.085737 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:17.085775 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:17.085805 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:17.085867 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.088123 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:17.093531 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.093801 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:17.096489 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:17.108898 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:17.108952 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:17.108986 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:17.109015 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.109076 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.109634 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.109716 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.110077 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.110768 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.113331 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.113952 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.114029 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:17.114063 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:17.114119 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.114248 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:17.114355 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:17.114392 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:17.116258 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.116351 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:17.118755 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.118834 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:17.118940 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:17.121207 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:17.123064 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.123159 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:17.123442 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.123522 140581834321920 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 14:34:17.123627 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:17.123664 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:17.123693 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:17.123754 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.125991 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:17.131399 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.131658 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:17.134343 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:17.146832 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:17.146886 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:17.146919 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:17.146948 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.147009 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.147571 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.147648 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.148004 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.148703 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.151271 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.151890 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.151968 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:17.152002 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:17.152058 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.152184 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:17.152295 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:17.152336 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:17.154201 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.154294 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:17.156696 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.156775 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:17.156883 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:17.159531 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:17.161390 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.161483 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:17.161776 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:17.161861 140581834321920 decoder_stack.py:344] dstack: Final layernorm.
I0123 14:34:17.164687 140581834321920 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:21.586161 140581834321920 optimizer_config.py:74] Using Flax Adafactor Optimizer. lr=1.000000, b1=0.900000
I0123 14:34:22.140653 140581834321920 training_loop.py:409] No working directory specified.
I0123 14:34:22.140765 140581834321920 training_loop.py:431] Loading pre-trained model from ag_ckpt_vocab:
I0123 14:34:22.141516 140581834321920 checkpoints.py:1062] Restoring legacy Flax checkpoint from ag_ckpt_vocab/checkpoint_10999999
I0123 14:34:25.230414 140581834321920 training_loop.py:447] Only restoring trainable parameters.
I0123 14:34:25.231153 140581834321920 training_loop.py:724] parameter: decoder/embed/embedding, shape (1024, 1024), size 1048576
I0123 14:34:25.231210 140581834321920 training_loop.py:724] parameter: decoder/final_layernorm/scale, shape (1024,), size 1024
I0123 14:34:25.231255 140581834321920 training_loop.py:724] parameter: decoder/transformer0/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:34:25.231296 140581834321920 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:34:25.231335 140581834321920 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.231373 140581834321920 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:34:25.231411 140581834321920 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.231448 140581834321920 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.231484 140581834321920 training_loop.py:724] parameter: decoder/transformer0/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:34:25.231520 140581834321920 training_loop.py:724] parameter: decoder/transformer0/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:34:25.231556 140581834321920 training_loop.py:724] parameter: decoder/transformer0/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.231592 140581834321920 training_loop.py:724] parameter: decoder/transformer0/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:34:25.231628 140581834321920 training_loop.py:724] parameter: decoder/transformer1/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:34:25.231665 140581834321920 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:34:25.231701 140581834321920 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.231737 140581834321920 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:34:25.231773 140581834321920 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.231809 140581834321920 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.231845 140581834321920 training_loop.py:724] parameter: decoder/transformer1/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:34:25.231880 140581834321920 training_loop.py:724] parameter: decoder/transformer1/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:34:25.231931 140581834321920 training_loop.py:724] parameter: decoder/transformer1/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.231968 140581834321920 training_loop.py:724] parameter: decoder/transformer1/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:34:25.232004 140581834321920 training_loop.py:724] parameter: decoder/transformer10/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:34:25.232042 140581834321920 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:34:25.232078 140581834321920 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.232114 140581834321920 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:34:25.232149 140581834321920 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.232183 140581834321920 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.232217 140581834321920 training_loop.py:724] parameter: decoder/transformer10/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:34:25.232251 140581834321920 training_loop.py:724] parameter: decoder/transformer10/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:34:25.232285 140581834321920 training_loop.py:724] parameter: decoder/transformer10/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.232319 140581834321920 training_loop.py:724] parameter: decoder/transformer10/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:34:25.232353 140581834321920 training_loop.py:724] parameter: decoder/transformer11/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:34:25.232388 140581834321920 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:34:25.232422 140581834321920 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.232457 140581834321920 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:34:25.232491 140581834321920 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.232526 140581834321920 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.232559 140581834321920 training_loop.py:724] parameter: decoder/transformer11/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:34:25.232594 140581834321920 training_loop.py:724] parameter: decoder/transformer11/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:34:25.232628 140581834321920 training_loop.py:724] parameter: decoder/transformer11/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.232662 140581834321920 training_loop.py:724] parameter: decoder/transformer11/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:34:25.232696 140581834321920 training_loop.py:724] parameter: decoder/transformer2/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:34:25.232730 140581834321920 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:34:25.232764 140581834321920 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.232799 140581834321920 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:34:25.232838 140581834321920 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.232874 140581834321920 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.232909 140581834321920 training_loop.py:724] parameter: decoder/transformer2/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:34:25.232944 140581834321920 training_loop.py:724] parameter: decoder/transformer2/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:34:25.232979 140581834321920 training_loop.py:724] parameter: decoder/transformer2/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.233014 140581834321920 training_loop.py:724] parameter: decoder/transformer2/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:34:25.233048 140581834321920 training_loop.py:724] parameter: decoder/transformer3/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:34:25.233083 140581834321920 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:34:25.233117 140581834321920 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.233152 140581834321920 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:34:25.233186 140581834321920 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.233221 140581834321920 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.233256 140581834321920 training_loop.py:724] parameter: decoder/transformer3/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:34:25.233292 140581834321920 training_loop.py:724] parameter: decoder/transformer3/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:34:25.233326 140581834321920 training_loop.py:724] parameter: decoder/transformer3/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.233361 140581834321920 training_loop.py:724] parameter: decoder/transformer3/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:34:25.233395 140581834321920 training_loop.py:724] parameter: decoder/transformer4/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:34:25.233429 140581834321920 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:34:25.233463 140581834321920 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.233498 140581834321920 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:34:25.233532 140581834321920 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.233567 140581834321920 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.233601 140581834321920 training_loop.py:724] parameter: decoder/transformer4/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:34:25.233634 140581834321920 training_loop.py:724] parameter: decoder/transformer4/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:34:25.233677 140581834321920 training_loop.py:724] parameter: decoder/transformer4/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.233712 140581834321920 training_loop.py:724] parameter: decoder/transformer4/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:34:25.233747 140581834321920 training_loop.py:724] parameter: decoder/transformer5/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:34:25.233789 140581834321920 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:34:25.233826 140581834321920 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.233861 140581834321920 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:34:25.233897 140581834321920 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.233932 140581834321920 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.233966 140581834321920 training_loop.py:724] parameter: decoder/transformer5/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:34:25.234002 140581834321920 training_loop.py:724] parameter: decoder/transformer5/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:34:25.234036 140581834321920 training_loop.py:724] parameter: decoder/transformer5/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.234071 140581834321920 training_loop.py:724] parameter: decoder/transformer5/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:34:25.234106 140581834321920 training_loop.py:724] parameter: decoder/transformer6/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:34:25.234141 140581834321920 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:34:25.234175 140581834321920 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.234209 140581834321920 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:34:25.234243 140581834321920 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.234278 140581834321920 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.234312 140581834321920 training_loop.py:724] parameter: decoder/transformer6/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:34:25.234346 140581834321920 training_loop.py:724] parameter: decoder/transformer6/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:34:25.234381 140581834321920 training_loop.py:724] parameter: decoder/transformer6/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.234416 140581834321920 training_loop.py:724] parameter: decoder/transformer6/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:34:25.234450 140581834321920 training_loop.py:724] parameter: decoder/transformer7/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:34:25.234484 140581834321920 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:34:25.234518 140581834321920 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.234552 140581834321920 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:34:25.234587 140581834321920 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.234622 140581834321920 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.234656 140581834321920 training_loop.py:724] parameter: decoder/transformer7/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:34:25.234691 140581834321920 training_loop.py:724] parameter: decoder/transformer7/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:34:25.234730 140581834321920 training_loop.py:724] parameter: decoder/transformer7/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.234766 140581834321920 training_loop.py:724] parameter: decoder/transformer7/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:34:25.234801 140581834321920 training_loop.py:724] parameter: decoder/transformer8/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:34:25.234836 140581834321920 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:34:25.234871 140581834321920 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.234905 140581834321920 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:34:25.234939 140581834321920 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.234975 140581834321920 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.235010 140581834321920 training_loop.py:724] parameter: decoder/transformer8/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:34:25.235043 140581834321920 training_loop.py:724] parameter: decoder/transformer8/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:34:25.235077 140581834321920 training_loop.py:724] parameter: decoder/transformer8/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.235111 140581834321920 training_loop.py:724] parameter: decoder/transformer8/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:34:25.235144 140581834321920 training_loop.py:724] parameter: decoder/transformer9/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:34:25.235179 140581834321920 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:34:25.235213 140581834321920 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.235246 140581834321920 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:34:25.235280 140581834321920 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.235314 140581834321920 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.235348 140581834321920 training_loop.py:724] parameter: decoder/transformer9/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:34:25.235381 140581834321920 training_loop.py:724] parameter: decoder/transformer9/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:34:25.235415 140581834321920 training_loop.py:724] parameter: decoder/transformer9/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:34:25.235449 140581834321920 training_loop.py:724] parameter: decoder/transformer9/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:34:25.235476 140581834321920 training_loop.py:725] Total parameters: 152072288
I0123 14:34:25.235702 140581834321920 training_loop.py:739] Total state size: 0
I0123 14:34:25.258530 140581834321920 training_loop.py:492] Training loop: creating task for mode beam_search
I0123 14:34:25.258810 140581834321920 training_loop.py:685] Creating logging writer (train) for mode beam_search
I0123 14:34:25.259197 140581834321920 training_loop.py:652] Compiling mode beam_search with jit.
I0123 14:34:25.259530 140581834321920 training_loop.py:89] registering functions: dict_keys([])
I0123 14:34:25.276427 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f ? eqratio k j j l b f f a
I0123 14:34:26.752016 140581834321920 ddar.py:60] Depth 1/1000 time = 1.4267773628234863
I0123 14:34:29.207285 140581834321920 ddar.py:60] Depth 2/1000 time = 2.4551026821136475
I0123 14:34:31.498592 140581834321920 ddar.py:60] Depth 3/1000 time = 2.2911486625671387
I0123 14:34:33.763736 140581834321920 ddar.py:60] Depth 4/1000 time = 2.254542827606201
I0123 14:34:36.328982 140581834321920 ddar.py:60] Depth 5/1000 time = 2.565035820007324
I0123 14:34:36.332561 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:34:36.332646 140581834321920 alphageometry.py:540] Depth 0. There are 1 nodes to expand:
I0123 14:34:36.332681 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00
I0123 14:34:36.332711 140581834321920 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00
I0123 14:34:36.457398 140581834321920 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.457565 140581834321920 decoder_stack.py:316] dstack: scanning over 1 windows.
I0123 14:34:36.457669 140581834321920 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:34:36.457746 140581834321920 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:34:36.457817 140581834321920 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:34:36.457883 140581834321920 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:34:36.457949 140581834321920 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:34:36.458014 140581834321920 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:34:36.458080 140581834321920 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:34:36.458145 140581834321920 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:34:36.458211 140581834321920 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:34:36.458276 140581834321920 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:34:36.458341 140581834321920 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:34:36.458404 140581834321920 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:34:36.458440 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:36.458483 140581834321920 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 14:34:36.458586 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:36.458623 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:36.458652 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:36.460465 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.463000 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:36.468607 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.468883 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:36.471487 140581834321920 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:34:36.475328 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:36.475383 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:36.475417 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:36.475450 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.475514 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.476115 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.476191 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.476552 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.477311 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.479796 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.480464 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.480540 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:36.480572 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:36.480628 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.480754 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:36.481072 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:36.481114 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:36.483008 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.483101 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:36.485522 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.485600 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:36.486027 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:36.488370 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:36.490285 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.490379 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:36.490668 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.490747 140581834321920 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 14:34:36.490854 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:36.490891 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:36.490920 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:36.492668 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.494942 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:36.500841 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.501105 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:36.503669 140581834321920 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:34:36.507268 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:36.507320 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:36.507353 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:36.507381 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.507442 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.508039 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.508114 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.508466 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.509225 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.511670 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.512284 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.512360 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:36.512393 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:36.512449 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.512576 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:36.512885 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:36.512925 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:36.514870 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.514963 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:36.517396 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.517475 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:36.517901 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:36.520138 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:36.522016 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.522109 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:36.522394 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.522472 140581834321920 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 14:34:36.522575 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:36.522612 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:36.522641 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:36.524828 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.527160 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:36.532657 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.532909 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:36.535450 140581834321920 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:34:36.539098 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:36.539151 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:36.539184 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:36.539212 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.539274 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.539822 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.539896 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.540251 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.541006 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.543436 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.544045 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.544121 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:36.544154 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:36.544210 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.544336 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:36.544696 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:36.544738 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:36.546624 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.546715 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:36.549144 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.549222 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:36.549633 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:36.551844 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:36.553786 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.553879 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:36.554165 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.554245 140581834321920 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 14:34:36.554349 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:36.554386 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:36.554415 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:36.556170 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.558467 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:36.564119 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.564374 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:36.567017 140581834321920 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:34:36.570616 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:36.570670 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:36.570704 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:36.570733 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.570796 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.571397 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.571473 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.571825 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.572571 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.574992 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.575601 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.575677 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:36.575710 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:36.575767 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.575893 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:36.576204 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:36.576244 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:36.578185 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.578277 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:36.580728 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.580807 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:36.581226 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:36.583459 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:36.585335 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.585427 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:36.585720 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.585800 140581834321920 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 14:34:36.585904 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:36.585941 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:36.585970 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:36.587793 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.590102 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:36.595635 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.595889 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:36.598652 140581834321920 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:34:36.602450 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:36.602504 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:36.602542 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:36.602572 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.602634 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.603188 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.603262 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.603613 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.604362 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.606814 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.607483 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.607559 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:36.607592 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:36.607647 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.607774 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:36.608090 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:36.608132 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:36.610012 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.610104 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:36.612520 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.612598 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:36.613011 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:36.615293 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:36.617177 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.617269 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:36.617553 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.617632 140581834321920 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 14:34:36.617747 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:36.617784 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:36.617812 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:36.619570 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.621870 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:36.627470 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.627731 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:36.630299 140581834321920 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:34:36.633957 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:36.634010 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:36.634042 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:36.634076 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.634521 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.635079 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.635156 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.635513 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.636270 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.638732 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.639351 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.639428 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:36.639462 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:36.639518 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.639661 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:36.639974 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:36.640015 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:36.641974 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.642066 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:36.644520 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.644600 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:36.645019 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:36.647275 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:36.649164 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.649258 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:36.649547 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.649626 140581834321920 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 14:34:36.649739 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:36.649776 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:36.649805 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:36.651660 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.653991 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:36.659498 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.659750 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:36.662341 140581834321920 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:34:36.665946 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:36.665999 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:36.666032 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:36.666061 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.666128 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.666684 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.666758 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.667109 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.667864 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.670301 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.670958 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.671033 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:36.671066 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:36.671121 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.671247 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:36.671561 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:36.671602 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:36.673497 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.673590 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:36.676026 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.676105 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:36.676519 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:36.678799 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:36.680678 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.680771 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:36.681059 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.681139 140581834321920 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 14:34:36.681244 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:36.681281 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:36.681310 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:36.683058 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.685336 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:36.690891 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.691144 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:36.693661 140581834321920 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:34:36.697245 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:36.697298 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:36.697332 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:36.697361 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.697476 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.698037 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.698112 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.698465 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.699217 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.701846 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.702462 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.702538 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:36.702572 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:36.702629 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.702756 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:36.703070 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:36.703111 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:36.705058 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.705150 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:36.707605 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.707684 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:36.708097 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:36.710331 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:36.712225 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.712317 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:36.712602 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.712681 140581834321920 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 14:34:36.712786 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:36.712823 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:36.712852 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:36.714690 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.716993 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:36.722523 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.722780 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:36.725374 140581834321920 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:34:36.728937 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:36.728990 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:36.729023 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:36.729053 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.729114 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.729680 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.729756 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.730108 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.730863 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.733285 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.733892 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.733968 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:36.734000 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:36.734056 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.734181 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:36.734541 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:36.734583 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:36.736469 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.736562 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:36.738999 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.739078 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:36.739497 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:36.741723 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:36.744027 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.744121 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:36.744417 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.744498 140581834321920 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 14:34:36.744604 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:36.744641 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:36.744669 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:36.746441 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.748756 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:36.754389 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.754642 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:36.757211 140581834321920 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:34:36.760818 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:36.760871 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:36.760903 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:36.760933 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.760996 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.761611 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.761701 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.762063 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.762828 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.765277 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.765898 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.765975 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:36.766008 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:36.766065 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.766192 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:36.766503 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:36.766543 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:36.768428 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.768520 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:36.771038 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.771116 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:36.771538 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:36.773789 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:36.775691 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.775784 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:36.776075 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.776154 140581834321920 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 14:34:36.776260 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:36.776296 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:36.776326 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:36.778106 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.780508 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:36.786034 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.786289 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:36.788837 140581834321920 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:34:36.792440 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:36.792493 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:36.792527 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:36.792556 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.792669 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.793225 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.793306 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.793672 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.794431 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.796883 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.797498 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.797574 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:36.797608 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:36.797672 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.797803 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:36.798113 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:36.798154 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:36.800141 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.800234 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:36.802713 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.802793 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:36.803208 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:36.805436 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:36.807324 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.807418 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:36.807706 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.807787 140581834321920 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 14:34:36.807892 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:36.807929 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:36.807958 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:36.809801 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.812091 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:36.817598 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.817860 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:36.820422 140581834321920 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:34:36.824084 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:36.824138 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:36.824172 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:36.824201 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.824264 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.824812 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.824887 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.825247 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.826002 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.828435 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.829043 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.829119 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:36.829153 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:36.829210 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.829337 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:36.829653 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:36.829695 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:36.831649 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.831739 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:36.834194 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.834272 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:36.834695 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:36.836917 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:36.838813 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.838907 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:36.839193 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.839437 140581834321920 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:34:36.839502 140581834321920 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:34:36.839557 140581834321920 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:34:36.839609 140581834321920 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:34:36.839660 140581834321920 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:34:36.839711 140581834321920 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:34:36.839761 140581834321920 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:34:36.839812 140581834321920 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:34:36.839861 140581834321920 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:34:36.839911 140581834321920 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:34:36.839960 140581834321920 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:34:36.840009 140581834321920 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:34:36.840044 140581834321920 decoder_stack.py:344] dstack: Final layernorm.
I0123 14:34:36.842890 140581834321920 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:34:36.887210 140581834321920 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.887295 140581834321920 decoder_stack.py:333] dstack: autoregressive generator.
I0123 14:34:36.887352 140581834321920 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 14:34:36.887456 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:36.887492 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:36.887521 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:36.887582 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.889934 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:36.895318 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.895577 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:36.898149 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:36.910723 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:36.910777 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:36.910810 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:36.910839 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.910901 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.911452 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.911525 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.911880 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.912565 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.915362 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.915976 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.916051 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:36.916084 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:36.916140 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.916267 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:36.916373 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:36.916411 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:36.918276 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.918370 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:36.920749 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.920827 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:36.920932 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:36.923180 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:36.925007 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.925101 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:36.925389 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.925475 140581834321920 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 14:34:36.925581 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:36.925618 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:36.925653 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:36.925716 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.927936 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:36.933276 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.933533 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:36.936170 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:36.948376 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:36.948430 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:36.948464 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:36.948493 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.948555 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.949156 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.949231 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.949582 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.950258 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.952691 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.953296 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.953372 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:36.953406 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:36.953463 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.953590 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:36.953705 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:36.953743 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:36.955572 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.955663 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:36.958097 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.958176 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:36.958279 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:36.960451 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:36.962294 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.962387 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:36.962672 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.962751 140581834321920 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 14:34:36.962863 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:36.962900 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:36.962930 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:36.962992 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.965211 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:36.970692 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.970950 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:36.973538 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:36.985870 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:36.985923 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:36.985957 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:36.985986 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.986048 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.986594 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.986670 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.987022 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.987703 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.990168 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.990837 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.990914 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:36.990947 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:36.991002 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.991129 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:36.991237 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:36.991274 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:36.993125 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.993218 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:36.995645 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:36.995724 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:36.995831 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:36.998026 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:36.999935 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.000030 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.000322 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.000402 140581834321920 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 14:34:37.000508 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:37.000551 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:37.000581 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:37.000643 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.002876 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:37.008250 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.008508 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:37.011111 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:37.023815 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:37.023868 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:37.023901 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:37.023930 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.023992 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.024546 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.024621 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.024978 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.025658 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.028191 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.028805 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.028882 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:37.028916 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:37.028975 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.029104 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:37.029210 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:37.029246 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.031109 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.031201 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.033601 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.033686 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:37.033793 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:37.036028 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.037883 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.037978 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.038269 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.038349 140581834321920 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 14:34:37.038455 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:37.038491 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:37.038526 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:37.038588 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.040797 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:37.046165 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.046424 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:37.049065 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:37.061355 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:37.061408 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:37.061442 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:37.061470 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.061531 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.062151 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.062227 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.062584 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.063273 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.065741 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.066358 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.066434 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:37.066467 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:37.066523 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.066651 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:37.066757 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:37.066794 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.068623 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.068716 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.071175 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.071254 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:37.071360 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:37.073534 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.075392 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.075485 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.075772 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.075852 140581834321920 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 14:34:37.075958 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:37.075995 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:37.076025 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:37.076091 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.078343 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:37.083786 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.084046 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:37.086645 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:37.098990 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:37.099044 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:37.099077 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:37.099105 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.099168 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.099719 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.099794 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.100148 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.100824 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.103284 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.103953 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.104029 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:37.104063 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:37.104120 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.104250 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:37.104355 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:37.104393 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.106237 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.106330 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.108715 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.108794 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:37.108898 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:37.111066 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.112956 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.113049 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.113341 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.113422 140581834321920 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 14:34:37.113529 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:37.113567 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:37.113596 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:37.113670 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.115900 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:37.121293 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.121549 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:37.124134 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:37.136720 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:37.136773 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:37.136806 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:37.136835 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.136897 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.137442 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.137518 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.137876 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.138542 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.141018 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.141625 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.141709 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:37.141742 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:37.141798 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.141927 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:37.142033 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:37.142070 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.143895 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.143985 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.146371 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.146451 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:37.146555 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:37.148790 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.150630 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.150723 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.151010 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.151091 140581834321920 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 14:34:37.151197 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:37.151234 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:37.151263 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:37.151324 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.153524 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:37.158820 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.159085 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:37.161704 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:37.173773 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:37.173827 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:37.173860 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:37.173889 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.173950 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.174556 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.174632 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.174987 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.175657 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.178087 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.178691 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.178766 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:37.178799 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:37.178855 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.178982 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:37.179086 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:37.179122 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.180959 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.181051 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.183492 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.183570 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:37.183677 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:37.185844 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.187668 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.187762 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.188053 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.188133 140581834321920 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 14:34:37.188237 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:37.188275 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:37.188304 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:37.188366 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.190583 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:37.196004 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.196267 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:37.198835 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:37.211019 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:37.211072 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:37.211106 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:37.211135 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.211198 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.211747 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.211822 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.212175 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.212845 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.215278 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.215886 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.215961 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:37.215995 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:37.216052 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.216180 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:37.216285 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:37.216323 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.218240 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.218333 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.220744 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.220823 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:37.220928 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:37.223104 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.224936 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.225030 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.225320 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.225401 140581834321920 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 14:34:37.225507 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:37.225544 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:37.225573 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:37.225634 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.227855 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:37.233692 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.233951 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:37.236542 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:37.248825 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:37.248878 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:37.248911 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:37.248940 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.249002 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.249558 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.249633 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.250000 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.250684 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.253111 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.253726 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.253803 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:37.253836 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:37.253893 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.254020 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:37.254124 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:37.254160 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.256070 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.256163 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.258662 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.258743 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:37.258851 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:37.261019 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.262848 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.262940 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.263229 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.263310 140581834321920 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 14:34:37.263418 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:37.263456 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:37.263485 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:37.263546 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.265773 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:37.271209 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.271476 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:37.274046 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:37.286248 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:37.286302 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:37.286335 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:37.286364 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.286425 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.286967 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.287041 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.287392 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.288064 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.290493 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.291099 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.291176 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:37.291209 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:37.291266 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.291393 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:37.291499 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:37.291536 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.293428 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.293520 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.295917 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.295997 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:37.296104 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:37.298269 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.300106 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.300198 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.300487 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.300567 140581834321920 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 14:34:37.300673 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:37.300709 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:37.300738 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:37.300798 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.303006 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:37.308434 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.308700 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:37.311283 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:37.323574 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:37.323628 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:37.323662 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:37.323690 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.323751 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.324299 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.324373 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.324723 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.325397 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.327826 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.328432 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.328508 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:37.328541 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:37.328597 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.328722 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:37.328827 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:37.328863 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.330758 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.330851 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.333227 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.333306 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:37.333411 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:37.335575 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.337400 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.337492 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.337789 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.337873 140581834321920 decoder_stack.py:344] dstack: Final layernorm.
I0123 14:34:37.340678 140581834321920 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:34:37.390220 140581834321920 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.390304 140581834321920 decoder_stack.py:333] dstack: autoregressive generator.
I0123 14:34:37.390356 140581834321920 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 14:34:37.390455 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:37.390492 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:37.390521 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:37.390587 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.392921 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:37.398240 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.398495 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:37.401039 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:37.413552 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:37.413605 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:37.413638 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:37.413677 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.413740 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.414292 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.414367 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.414721 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.415397 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.417880 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.418486 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.418562 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:37.418595 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:37.418651 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.418779 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:37.418886 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:37.418923 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.420738 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.420830 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.423229 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.423307 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:37.423411 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:37.425628 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.427448 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.427542 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.427834 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.427915 140581834321920 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 14:34:37.428020 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:37.428058 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:37.428087 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:37.428154 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.430362 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:37.435684 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.435940 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:37.438576 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:37.450644 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:37.450697 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:37.450729 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:37.450758 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.450819 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.451361 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.451436 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.451786 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.452453 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.454955 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.455564 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.455640 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:37.455673 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:37.455729 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.455854 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:37.455958 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:37.455994 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.457812 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.457904 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.460262 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.460342 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:37.460448 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:37.462667 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.464483 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.464576 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.464862 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.464942 140581834321920 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 14:34:37.465046 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:37.465082 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:37.465111 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:37.465172 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.467377 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:37.472709 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.472967 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:37.475595 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:37.487645 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:37.487697 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:37.487730 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:37.487759 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.487821 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.488367 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.488442 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.488793 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.489464 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.491939 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.492538 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.492614 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:37.492648 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:37.492705 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.492831 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:37.492938 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:37.492975 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.494803 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.494897 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.497273 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.497353 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:37.497461 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:37.499692 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.501509 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.501602 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.501899 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.501979 140581834321920 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 14:34:37.502083 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:37.502120 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:37.502149 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:37.502209 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.504414 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:37.509750 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.510008 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:37.512641 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:37.525213 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:37.525266 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:37.525299 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:37.525328 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.525390 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.525945 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.526021 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.526373 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.527045 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.529549 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.530169 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.530246 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:37.530280 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:37.530337 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.530463 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:37.530568 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:37.530606 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.532417 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.532508 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.534881 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.534960 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:37.535067 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:37.537309 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.539135 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.539228 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.539517 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.539597 140581834321920 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 14:34:37.539703 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:37.539741 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:37.539770 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:37.539830 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.542047 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:37.547409 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.547664 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:37.550313 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:37.562406 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:37.562460 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:37.562493 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:37.562521 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.562584 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.563134 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.563208 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.563559 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.564221 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.566706 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.567315 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.567391 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:37.567424 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:37.567479 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.567604 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:37.567710 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:37.567747 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.569557 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.569654 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.572028 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.572106 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:37.572213 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:37.574443 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.576281 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.576374 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.576663 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.576744 140581834321920 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 14:34:37.576850 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:37.576887 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:37.576916 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:37.576978 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.579212 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:37.584548 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.584812 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:37.587440 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:37.599492 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:37.599546 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:37.599580 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:37.599608 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.599671 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.600221 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.600295 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.600644 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.601315 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.603817 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.604426 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.604501 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:37.604534 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:37.604591 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.604717 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:37.604821 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:37.604858 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.606681 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.606774 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.609123 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.609203 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:37.609309 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:37.611538 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.613376 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.613469 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.613767 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.613848 140581834321920 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 14:34:37.613953 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:37.613990 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:37.614019 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:37.614078 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.616268 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:37.621537 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.621809 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:37.624415 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:37.636902 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:37.636956 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:37.636990 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:37.637019 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.637082 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.637631 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.637713 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.638069 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.638744 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.641246 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.641859 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.641936 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:37.641969 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:37.642027 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.642153 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:37.642258 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:37.642295 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.644119 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.644212 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.646781 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.646860 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:37.646965 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:37.649189 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.651024 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.651119 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.651411 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.651491 140581834321920 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 14:34:37.651597 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:37.651634 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:37.651663 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:37.651723 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.653944 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:37.659275 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.659532 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:37.662351 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:37.674370 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:37.674422 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:37.674454 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:37.674483 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.674545 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.675088 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.675162 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.675514 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.676183 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.678678 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.679288 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.679363 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:37.679397 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:37.679453 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.679578 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:37.679684 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:37.679720 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.681528 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.681618 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.683988 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.684066 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:37.684171 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:37.686402 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.688226 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.688318 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.688604 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.688683 140581834321920 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 14:34:37.688788 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:37.688826 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:37.688855 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:37.688915 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.691130 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:37.696401 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.696658 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:37.699298 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:37.711363 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:37.711416 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:37.711449 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:37.711478 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.711539 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.712092 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.712166 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.712519 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.713193 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.715690 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.716297 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.716371 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:37.716403 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:37.716460 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.716585 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:37.716691 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:37.716727 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.718557 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.718647 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.721008 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.721084 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:37.721188 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:37.723415 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.725243 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.725335 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.725626 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.725712 140581834321920 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 14:34:37.725818 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:37.725856 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:37.725885 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:37.725944 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.728150 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:37.733464 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.733731 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:37.736365 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:37.748883 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:37.748936 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:37.748970 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:37.748998 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.749060 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.749608 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.749689 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.750042 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.750723 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.753214 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.753831 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.753906 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:37.753939 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:37.753995 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.754119 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:37.754223 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:37.754258 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.756077 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.756168 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.758542 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.758619 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:37.758724 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:37.760940 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.763086 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.763179 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.763472 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.763551 140581834321920 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 14:34:37.763658 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:37.763695 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:37.763725 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:37.763785 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.766003 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:37.771318 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.771578 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:37.774216 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:37.786268 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:37.786327 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:37.786360 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:37.786390 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.786452 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.786996 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.787069 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.787423 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.788097 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.790576 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.791179 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.791254 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:37.791287 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:37.791343 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.791469 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:37.791574 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:37.791611 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.793428 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.793519 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.795912 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.795991 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:37.796099 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:37.798318 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.800128 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.800222 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.800512 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.800590 140581834321920 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 14:34:37.800697 140581834321920 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:34:37.800734 140581834321920 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:34:37.800763 140581834321920 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:34:37.800824 140581834321920 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.803037 140581834321920 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:34:37.808342 140581834321920 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.808601 140581834321920 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:34:37.811243 140581834321920 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:34:37.823343 140581834321920 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:34:37.823396 140581834321920 attention.py:418] Single window, no scan.
I0123 14:34:37.823438 140581834321920 transformer_layer.py:389] tlayer: self-attention.
I0123 14:34:37.823469 140581834321920 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.823530 140581834321920 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.824078 140581834321920 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.824153 140581834321920 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.824511 140581834321920 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.825192 140581834321920 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.827691 140581834321920 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.828305 140581834321920 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.828379 140581834321920 transformer_layer.py:468] tlayer: End windows.
I0123 14:34:37.828413 140581834321920 transformer_layer.py:472] tlayer: final FFN.
I0123 14:34:37.828470 140581834321920 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.828597 140581834321920 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:34:37.828702 140581834321920 nn_components.py:325] mlp: activation = None
I0123 14:34:37.828740 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.830565 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.830657 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.833038 140581834321920 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.833115 140581834321920 transformer_base.py:443] tbase: final FFN
I0123 14:34:37.833221 140581834321920 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:34:37.835447 140581834321920 nn_components.py:329] mlp: final activation = None
I0123 14:34:37.837267 140581834321920 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.837359 140581834321920 nn_components.py:261] mlp: residual
I0123 14:34:37.837652 140581834321920 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:37.837736 140581834321920 decoder_stack.py:344] dstack: Final layernorm.
I0123 14:34:37.840538 140581834321920 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:34:48.934227 140581834321920 alphageometry.py:566] LM output (score=-1.236431): "m : D e g g m 15 ;"
I0123 14:34:48.934398 140581834321920 alphageometry.py:567] Translation: "m = on_circle m g e"

I0123 14:34:48.934442 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e ? eqratio k j j l b f f a"
I0123 14:34:48.934581 140581834321920 graph.py:498] 
I0123 14:34:48.934632 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e ? eqratio k j j l b f f a
I0123 14:34:51.185037 140581834321920 ddar.py:60] Depth 1/1000 time = 2.2036328315734863
I0123 14:34:54.946260 140581834321920 ddar.py:60] Depth 2/1000 time = 3.7609660625457764
I0123 14:34:58.350778 140581834321920 ddar.py:60] Depth 3/1000 time = 3.4043424129486084
I0123 14:35:01.963499 140581834321920 ddar.py:60] Depth 4/1000 time = 3.5981483459472656
I0123 14:35:05.565052 140581834321920 ddar.py:60] Depth 5/1000 time = 3.601364850997925
I0123 14:35:05.569280 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:35:05.569381 140581834321920 alphageometry.py:566] LM output (score=-1.655374): "m : D c g g m 15 ;"
I0123 14:35:05.569418 140581834321920 alphageometry.py:567] Translation: "m = on_circle m g c"

I0123 14:35:05.569458 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c ? eqratio k j j l b f f a"
I0123 14:35:05.569612 140581834321920 graph.py:498] 
I0123 14:35:05.569678 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c ? eqratio k j j l b f f a
I0123 14:35:07.799013 140581834321920 ddar.py:60] Depth 1/1000 time = 2.180685043334961
I0123 14:35:11.565713 140581834321920 ddar.py:60] Depth 2/1000 time = 3.766540050506592
I0123 14:35:14.937485 140581834321920 ddar.py:60] Depth 3/1000 time = 3.3715875148773193
I0123 14:35:18.511560 140581834321920 ddar.py:60] Depth 4/1000 time = 3.5597004890441895
I0123 14:35:22.095979 140581834321920 ddar.py:60] Depth 5/1000 time = 3.584141254425049
I0123 14:35:22.099977 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:35:22.100062 140581834321920 alphageometry.py:566] LM output (score=-1.816915): "m : D f h h m 15 ;"
I0123 14:35:22.100099 140581834321920 alphageometry.py:567] Translation: "m = on_circle m h f"

I0123 14:35:22.100135 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f ? eqratio k j j l b f f a"
I0123 14:35:22.100282 140581834321920 graph.py:498] 
I0123 14:35:22.100342 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f ? eqratio k j j l b f f a
I0123 14:35:24.493567 140581834321920 ddar.py:60] Depth 1/1000 time = 2.343350410461426
I0123 14:35:28.247352 140581834321920 ddar.py:60] Depth 2/1000 time = 3.753614902496338
I0123 14:35:31.624522 140581834321920 ddar.py:60] Depth 3/1000 time = 3.3769407272338867
I0123 14:35:35.222833 140581834321920 ddar.py:60] Depth 4/1000 time = 3.5835955142974854
I0123 14:35:38.769975 140581834321920 ddar.py:60] Depth 5/1000 time = 3.5469627380371094
I0123 14:35:38.773940 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:35:38.774021 140581834321920 alphageometry.py:566] LM output (score=-1.975233): "m : D e i i m 15 ;"
I0123 14:35:38.774066 140581834321920 alphageometry.py:567] Translation: "m = on_circle m i e"

I0123 14:35:38.774103 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e ? eqratio k j j l b f f a"
I0123 14:35:38.774260 140581834321920 graph.py:498] 
I0123 14:35:38.774319 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e ? eqratio k j j l b f f a
I0123 14:35:40.911602 140581834321920 ddar.py:60] Depth 1/1000 time = 2.087460517883301
I0123 14:35:44.887591 140581834321920 ddar.py:60] Depth 2/1000 time = 3.975827217102051
I0123 14:35:48.129061 140581834321920 ddar.py:60] Depth 3/1000 time = 3.2412428855895996
I0123 14:35:51.781638 140581834321920 ddar.py:60] Depth 4/1000 time = 3.637969493865967
I0123 14:35:55.399705 140581834321920 ddar.py:60] Depth 5/1000 time = 3.617882251739502
I0123 14:35:55.403661 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:35:55.403753 140581834321920 alphageometry.py:566] LM output (score=-1.999669): "m : C e f m 15 D e m f m 16 ;"
I0123 14:35:55.403790 140581834321920 alphageometry.py:567] Translation: "m = on_line m e f, on_bline m f e"

I0123 14:35:55.403827 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e ? eqratio k j j l b f f a"
I0123 14:35:55.403980 140581834321920 graph.py:498] 
I0123 14:35:55.404041 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e ? eqratio k j j l b f f a
I0123 14:35:57.247498 140581834321920 ddar.py:60] Depth 1/1000 time = 1.7884862422943115
I0123 14:36:00.523783 140581834321920 ddar.py:60] Depth 2/1000 time = 3.276122808456421
I0123 14:36:03.597094 140581834321920 ddar.py:60] Depth 3/1000 time = 3.0731422901153564
I0123 14:36:06.499695 140581834321920 ddar.py:60] Depth 4/1000 time = 2.9022369384765625
I0123 14:36:09.369744 140581834321920 ddar.py:60] Depth 5/1000 time = 2.8557920455932617
I0123 14:36:12.439058 140581834321920 ddar.py:60] Depth 6/1000 time = 3.069045066833496
I0123 14:36:12.442878 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:36:12.442969 140581834321920 alphageometry.py:566] LM output (score=-2.277791): "m : D c m e m 15 ;"
I0123 14:36:12.443006 140581834321920 alphageometry.py:567] Translation: "m = on_bline m e c"

I0123 14:36:12.443043 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c ? eqratio k j j l b f f a"
I0123 14:36:12.443198 140581834321920 graph.py:498] 
I0123 14:36:12.443259 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c ? eqratio k j j l b f f a
I0123 14:36:14.241355 140581834321920 ddar.py:60] Depth 1/1000 time = 1.7442991733551025
I0123 14:36:17.092146 140581834321920 ddar.py:60] Depth 2/1000 time = 2.8506276607513428
I0123 14:36:19.704648 140581834321920 ddar.py:60] Depth 3/1000 time = 2.612337589263916
I0123 14:36:22.808219 140581834321920 ddar.py:60] Depth 4/1000 time = 3.0837109088897705
I0123 14:36:25.676352 140581834321920 ddar.py:60] Depth 5/1000 time = 2.8679420948028564
I0123 14:36:25.680202 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:36:25.680299 140581834321920 alphageometry.py:566] LM output (score=-2.307835): "m : D d g g m 15 ;"
I0123 14:36:25.680334 140581834321920 alphageometry.py:567] Translation: "m = on_circle m g d"

I0123 14:36:25.680370 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g d ? eqratio k j j l b f f a"
I0123 14:36:25.680513 140581834321920 graph.py:498] 
I0123 14:36:25.680564 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g d ? eqratio k j j l b f f a
I0123 14:36:27.712942 140581834321920 ddar.py:60] Depth 1/1000 time = 1.983893871307373
I0123 14:36:31.755091 140581834321920 ddar.py:60] Depth 2/1000 time = 4.041934967041016
I0123 14:36:35.299201 140581834321920 ddar.py:60] Depth 3/1000 time = 3.543825626373291
I0123 14:36:38.759711 140581834321920 ddar.py:60] Depth 4/1000 time = 3.446260690689087
I0123 14:36:42.433922 140581834321920 ddar.py:60] Depth 5/1000 time = 3.674043893814087
I0123 14:36:42.437840 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:36:42.437923 140581834321920 alphageometry.py:566] LM output (score=-2.375011): "m : C d f m 15 D d m f m 16 ;"
I0123 14:36:42.437961 140581834321920 alphageometry.py:567] Translation: "m = on_line m d f, on_bline m f d"

I0123 14:36:42.437998 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m d f, on_bline m f d ? eqratio k j j l b f f a"
I0123 14:36:42.438151 140581834321920 graph.py:498] 
I0123 14:36:42.438212 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m d f, on_bline m f d ? eqratio k j j l b f f a
I0123 14:36:44.323136 140581834321920 ddar.py:60] Depth 1/1000 time = 1.8292441368103027
I0123 14:36:47.467383 140581834321920 ddar.py:60] Depth 2/1000 time = 3.1440720558166504
I0123 14:36:50.408742 140581834321920 ddar.py:60] Depth 3/1000 time = 2.941175699234009
I0123 14:36:53.385068 140581834321920 ddar.py:60] Depth 4/1000 time = 2.975963592529297
I0123 14:36:56.274210 140581834321920 ddar.py:60] Depth 5/1000 time = 2.875404119491577
I0123 14:36:59.352832 140581834321920 ddar.py:60] Depth 6/1000 time = 3.0784475803375244
I0123 14:36:59.356638 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:36:59.356726 140581834321920 alphageometry.py:566] LM output (score=-2.528096): "m : C c d m 15 D c m d m 16 ;"
I0123 14:36:59.356762 140581834321920 alphageometry.py:567] Translation: "m = on_line m c d, on_bline m d c"

I0123 14:36:59.356797 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m c d, on_bline m d c ? eqratio k j j l b f f a"
I0123 14:36:59.356963 140581834321920 graph.py:498] 
I0123 14:36:59.357025 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m c d, on_bline m d c ? eqratio k j j l b f f a
I0123 14:37:01.627918 140581834321920 ddar.py:60] Depth 1/1000 time = 2.2155983448028564
I0123 14:37:05.025810 140581834321920 ddar.py:60] Depth 2/1000 time = 3.3977179527282715
I0123 14:37:08.422516 140581834321920 ddar.py:60] Depth 3/1000 time = 3.3965280055999756
I0123 14:37:11.966311 140581834321920 ddar.py:60] Depth 4/1000 time = 3.543417453765869
I0123 14:37:15.808412 140581834321920 ddar.py:60] Depth 5/1000 time = 3.824253797531128
I0123 14:37:19.297386 140581834321920 ddar.py:60] Depth 6/1000 time = 3.488762378692627
I0123 14:37:19.301383 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:37:19.301478 140581834321920 alphageometry.py:566] LM output (score=-2.531899): "m : D c m f m 15 ;"
I0123 14:37:19.301515 140581834321920 alphageometry.py:567] Translation: "m = on_bline m f c"

I0123 14:37:19.301550 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m f c ? eqratio k j j l b f f a"
I0123 14:37:19.301711 140581834321920 graph.py:498] 
I0123 14:37:19.301773 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m f c ? eqratio k j j l b f f a
I0123 14:37:21.165366 140581834321920 ddar.py:60] Depth 1/1000 time = 1.8062400817871094
I0123 14:37:23.709046 140581834321920 ddar.py:60] Depth 2/1000 time = 2.543510675430298
I0123 14:37:26.507065 140581834321920 ddar.py:60] Depth 3/1000 time = 2.7978320121765137
I0123 14:37:29.203557 140581834321920 ddar.py:60] Depth 4/1000 time = 2.681317090988159
I0123 14:37:31.901900 140581834321920 ddar.py:60] Depth 5/1000 time = 2.698153495788574
I0123 14:37:31.905761 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:37:31.905844 140581834321920 alphageometry.py:566] LM output (score=-2.603177): "m : D f g f m 15 D g k k m 16 ;"
I0123 14:37:31.905881 140581834321920 alphageometry.py:567] Translation: "m = on_circle m f g, on_circle m k g"

I0123 14:37:31.905915 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m f g, on_circle m k g ? eqratio k j j l b f f a"
I0123 14:37:31.906059 140581834321920 graph.py:498] 
I0123 14:37:31.906108 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m f g, on_circle m k g ? eqratio k j j l b f f a
I0123 14:37:33.930387 140581834321920 ddar.py:60] Depth 1/1000 time = 1.9553260803222656
I0123 14:37:37.472642 140581834321920 ddar.py:60] Depth 2/1000 time = 3.542065382003784
I0123 14:37:42.980718 140581834321920 ddar.py:60] Depth 3/1000 time = 5.507865905761719
I0123 14:37:48.822536 140581834321920 ddar.py:60] Depth 4/1000 time = 5.841611623764038
I0123 14:37:54.951731 140581834321920 ddar.py:60] Depth 5/1000 time = 6.094781398773193
I0123 14:38:01.080248 140581834321920 ddar.py:60] Depth 6/1000 time = 6.128286361694336
I0123 14:38:06.991286 140581834321920 ddar.py:60] Depth 7/1000 time = 5.881161212921143
I0123 14:38:06.991830 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:38:06.991934 140581834321920 alphageometry.py:566] LM output (score=-2.603561): "m : D c m d m 15 ;"
I0123 14:38:06.991986 140581834321920 alphageometry.py:567] Translation: "m = on_bline m d c"

I0123 14:38:06.992023 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m d c ? eqratio k j j l b f f a"
I0123 14:38:06.992181 140581834321920 graph.py:498] 
I0123 14:38:06.992240 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m d c ? eqratio k j j l b f f a
I0123 14:38:08.853138 140581834321920 ddar.py:60] Depth 1/1000 time = 1.8057751655578613
I0123 14:38:11.970609 140581834321920 ddar.py:60] Depth 2/1000 time = 3.1172943115234375
I0123 14:38:14.685730 140581834321920 ddar.py:60] Depth 3/1000 time = 2.714937686920166
I0123 14:38:17.648724 140581834321920 ddar.py:60] Depth 4/1000 time = 2.943610668182373
I0123 14:38:20.893648 140581834321920 ddar.py:60] Depth 5/1000 time = 3.2446494102478027
I0123 14:38:20.897460 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:38:20.897547 140581834321920 alphageometry.py:566] LM output (score=-2.606324): "m : D d h h m 15 ;"
I0123 14:38:20.897582 140581834321920 alphageometry.py:567] Translation: "m = on_circle m h d"

I0123 14:38:20.897617 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h d ? eqratio k j j l b f f a"
I0123 14:38:20.897780 140581834321920 graph.py:498] 
I0123 14:38:20.897843 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h d ? eqratio k j j l b f f a
I0123 14:38:22.765847 140581834321920 ddar.py:60] Depth 1/1000 time = 1.8174593448638916
I0123 14:38:26.344443 140581834321920 ddar.py:60] Depth 2/1000 time = 3.578439235687256
I0123 14:38:29.672159 140581834321920 ddar.py:60] Depth 3/1000 time = 3.3275372982025146
I0123 14:38:33.153609 140581834321920 ddar.py:60] Depth 4/1000 time = 3.466679573059082
I0123 14:38:36.605742 140581834321920 ddar.py:60] Depth 5/1000 time = 3.451930046081543
I0123 14:38:36.609638 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:38:36.609722 140581834321920 alphageometry.py:566] LM output (score=-2.643628): "m : D c g e m 15 D c m e g 16 ;"
I0123 14:38:36.609757 140581834321920 alphageometry.py:567] Translation: "m = eqdistance m e c g, eqdistance m c e g"

I0123 14:38:36.609794 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = eqdistance m e c g, eqdistance m c e g ? eqratio k j j l b f f a"
I0123 14:38:36.609943 140581834321920 graph.py:498] 
I0123 14:38:36.609993 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = eqdistance m e c g, eqdistance m c e g ? eqratio k j j l b f f a
I0123 14:38:39.877153 140581834321920 ddar.py:60] Depth 1/1000 time = 3.209620237350464
I0123 14:38:44.244704 140581834321920 ddar.py:60] Depth 2/1000 time = 4.367339849472046
I0123 14:38:48.478308 140581834321920 ddar.py:60] Depth 3/1000 time = 4.233422517776489
I0123 14:38:52.440552 140581834321920 ddar.py:60] Depth 4/1000 time = 3.9620563983917236
I0123 14:38:56.980367 140581834321920 ddar.py:60] Depth 5/1000 time = 4.511742830276489
I0123 14:39:01.626989 140581834321920 ddar.py:60] Depth 6/1000 time = 4.646424055099487
I0123 14:39:06.014114 140581834321920 ddar.py:60] Depth 7/1000 time = 4.377547025680542
I0123 14:39:06.014628 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:39:06.014743 140581834321920 alphageometry.py:566] LM output (score=-2.734010): "m : D e g g m 15 T e g g m 16 ;"
I0123 14:39:06.014782 140581834321920 alphageometry.py:567] Translation: "m = on_circle m g e, on_tline m g e g"

I0123 14:39:06.014821 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e, on_tline m g e g ? eqratio k j j l b f f a"
I0123 14:39:06.014986 140581834321920 graph.py:498] 
I0123 14:39:06.015048 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e, on_tline m g e g ? eqratio k j j l b f f a
I0123 14:39:08.086156 140581834321920 ddar.py:60] Depth 1/1000 time = 2.0200536251068115
I0123 14:39:12.272938 140581834321920 ddar.py:60] Depth 2/1000 time = 4.186352491378784
I0123 14:39:15.683814 140581834321920 ddar.py:60] Depth 3/1000 time = 3.4106898307800293
I0123 14:39:19.453997 140581834321920 ddar.py:60] Depth 4/1000 time = 3.7693259716033936
I0123 14:39:23.033990 140581834321920 ddar.py:60] Depth 5/1000 time = 3.579716205596924
I0123 14:39:26.811254 140581834321920 ddar.py:60] Depth 6/1000 time = 3.7600908279418945
I0123 14:39:30.539638 140581834321920 ddar.py:60] Depth 7/1000 time = 3.728191614151001
I0123 14:39:30.543586 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:39:30.543675 140581834321920 alphageometry.py:566] LM output (score=-2.802904): "m : P a b c m 15 ;"
I0123 14:39:30.543712 140581834321920 alphageometry.py:567] Translation: "m = on_pline m c a b"

I0123 14:39:30.543749 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_pline m c a b ? eqratio k j j l b f f a"
I0123 14:39:30.543904 140581834321920 graph.py:498] 
I0123 14:39:30.543967 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_pline m c a b ? eqratio k j j l b f f a
I0123 14:39:32.398654 140581834321920 ddar.py:60] Depth 1/1000 time = 1.8113372325897217
I0123 14:39:35.222337 140581834321920 ddar.py:60] Depth 2/1000 time = 2.823521375656128
I0123 14:39:37.784309 140581834321920 ddar.py:60] Depth 3/1000 time = 2.5617971420288086
I0123 14:39:40.474352 140581834321920 ddar.py:60] Depth 4/1000 time = 2.676165819168091
I0123 14:39:43.171324 140581834321920 ddar.py:60] Depth 5/1000 time = 2.696751356124878
I0123 14:39:43.174836 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:39:43.175146 140581834321920 alphageometry.py:566] LM output (score=-2.855515): "m : D c g c m 15 D f g f m 16 ;"
I0123 14:39:43.175186 140581834321920 alphageometry.py:567] Translation: "m = on_circle m c g, on_circle m f g"

I0123 14:39:43.175250 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m c g, on_circle m f g ? eqratio k j j l b f f a"
I0123 14:39:43.175424 140581834321920 graph.py:498] 
I0123 14:39:43.175483 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m c g, on_circle m f g ? eqratio k j j l b f f a
I0123 14:39:45.587631 140581834321920 ddar.py:60] Depth 1/1000 time = 2.349827527999878
I0123 14:39:49.136613 140581834321920 ddar.py:60] Depth 2/1000 time = 3.5487823486328125
I0123 14:39:55.307006 140581834321920 ddar.py:60] Depth 3/1000 time = 6.1701977252960205
I0123 14:40:00.625048 140581834321920 ddar.py:60] Depth 4/1000 time = 5.317836761474609
I0123 14:40:06.633027 140581834321920 ddar.py:60] Depth 5/1000 time = 5.9769299030303955
I0123 14:40:12.671748 140581834321920 ddar.py:60] Depth 6/1000 time = 6.038399934768677
I0123 14:40:18.791400 140581834321920 ddar.py:60] Depth 7/1000 time = 6.088874578475952
I0123 14:40:18.791966 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:40:18.792049 140581834321920 alphageometry.py:566] LM output (score=-2.887698): "m : T e g e m 15 ;"
I0123 14:40:18.792085 140581834321920 alphageometry.py:567] Translation: "m = on_tline m e e g"

I0123 14:40:18.792122 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_tline m e e g ? eqratio k j j l b f f a"
I0123 14:40:18.792283 140581834321920 graph.py:498] 
I0123 14:40:18.792346 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_tline m e e g ? eqratio k j j l b f f a
I0123 14:40:20.312926 140581834321920 ddar.py:60] Depth 1/1000 time = 1.4774625301361084
I0123 14:40:23.199591 140581834321920 ddar.py:60] Depth 2/1000 time = 2.886489152908325
I0123 14:40:25.751956 140581834321920 ddar.py:60] Depth 3/1000 time = 2.552124261856079
I0123 14:40:28.455418 140581834321920 ddar.py:60] Depth 4/1000 time = 2.691676378250122
I0123 14:40:31.394900 140581834321920 ddar.py:60] Depth 5/1000 time = 2.939272880554199
I0123 14:40:31.398388 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:40:31.398474 140581834321920 alphageometry.py:566] LM output (score=-2.901494): "m : D c g c m 15 D e g e m 16 ;"
I0123 14:40:31.398510 140581834321920 alphageometry.py:567] Translation: "m = on_circle m c g, on_circle m e g"

I0123 14:40:31.398545 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m c g, on_circle m e g ? eqratio k j j l b f f a"
I0123 14:40:31.398708 140581834321920 graph.py:498] 
I0123 14:40:31.398770 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m c g, on_circle m e g ? eqratio k j j l b f f a
I0123 14:40:34.178483 140581834321920 ddar.py:60] Depth 1/1000 time = 2.7217605113983154
I0123 14:40:38.347113 140581834321920 ddar.py:60] Depth 2/1000 time = 4.168452024459839
I0123 14:40:42.332853 140581834321920 ddar.py:60] Depth 3/1000 time = 3.9855520725250244
I0123 14:40:46.671247 140581834321920 ddar.py:60] Depth 4/1000 time = 4.338195323944092
I0123 14:40:51.083838 140581834321920 ddar.py:60] Depth 5/1000 time = 4.38755464553833
I0123 14:40:55.436949 140581834321920 ddar.py:60] Depth 6/1000 time = 4.352896213531494
I0123 14:40:59.783706 140581834321920 ddar.py:60] Depth 7/1000 time = 4.3382439613342285
I0123 14:40:59.784195 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:40:59.784277 140581834321920 alphageometry.py:566] LM output (score=-2.951203): "m : D f l f m 15 D f l l m 16 ;"
I0123 14:40:59.784313 140581834321920 alphageometry.py:567] Translation: "m = on_circle m f l, on_circle m l f"

I0123 14:40:59.784348 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m f l, on_circle m l f ? eqratio k j j l b f f a"
I0123 14:40:59.784507 140581834321920 graph.py:498] 
I0123 14:40:59.784568 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m f l, on_circle m l f ? eqratio k j j l b f f a
I0123 14:41:01.836534 140581834321920 ddar.py:60] Depth 1/1000 time = 1.9873936176300049
I0123 14:41:04.794783 140581834321920 ddar.py:60] Depth 2/1000 time = 2.958080768585205
I0123 14:41:08.077003 140581834321920 ddar.py:60] Depth 3/1000 time = 3.2820346355438232
I0123 14:41:11.126130 140581834321920 ddar.py:60] Depth 4/1000 time = 3.0479323863983154
I0123 14:41:14.083901 140581834321920 ddar.py:60] Depth 5/1000 time = 2.935081958770752
I0123 14:41:17.623779 140581834321920 ddar.py:60] Depth 6/1000 time = 3.539689302444458
I0123 14:41:17.627984 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:41:17.628072 140581834321920 alphageometry.py:566] LM output (score=-2.986945): "m : D e g g m 15 ^ e g e m m e m g 16 ;"
I0123 14:41:17.628107 140581834321920 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ e g e m m e m g"

I0123 14:41:17.628139 140581834321920 alphageometry.py:566] LM output (score=-2.996853): "m : P a b c m 15 T a b a m 16 ;"
I0123 14:41:17.628166 140581834321920 alphageometry.py:567] Translation: "m = on_pline m c a b, on_tline m a a b"

I0123 14:41:17.628195 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_pline m c a b, on_tline m a a b ? eqratio k j j l b f f a"
I0123 14:41:17.628357 140581834321920 graph.py:498] 
I0123 14:41:17.628418 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_pline m c a b, on_tline m a a b ? eqratio k j j l b f f a
I0123 14:41:19.277397 140581834321920 ddar.py:60] Depth 1/1000 time = 1.6047677993774414
I0123 14:41:22.135989 140581834321920 ddar.py:60] Depth 2/1000 time = 2.8584189414978027
I0123 14:41:25.134866 140581834321920 ddar.py:60] Depth 3/1000 time = 2.9986977577209473
I0123 14:41:28.057446 140581834321920 ddar.py:60] Depth 4/1000 time = 2.90149188041687
I0123 14:41:30.984762 140581834321920 ddar.py:60] Depth 5/1000 time = 2.9270803928375244
I0123 14:41:30.988263 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:41:30.988388 140581834321920 alphageometry.py:566] LM output (score=-3.025711): "m : D e m f m 15 ;"
I0123 14:41:30.988429 140581834321920 alphageometry.py:567] Translation: "m = on_bline m f e"

I0123 14:41:30.988476 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m f e ? eqratio k j j l b f f a"
I0123 14:41:30.988641 140581834321920 graph.py:498] 
I0123 14:41:30.988698 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m f e ? eqratio k j j l b f f a
I0123 14:41:32.698683 140581834321920 ddar.py:60] Depth 1/1000 time = 1.6559996604919434
I0123 14:41:35.667454 140581834321920 ddar.py:60] Depth 2/1000 time = 2.968571186065674
I0123 14:41:38.441593 140581834321920 ddar.py:60] Depth 3/1000 time = 2.773953914642334
I0123 14:41:41.455035 140581834321920 ddar.py:60] Depth 4/1000 time = 2.9976274967193604
I0123 14:41:44.441653 140581834321920 ddar.py:60] Depth 5/1000 time = 2.9864182472229004
I0123 14:41:44.445430 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:41:44.445507 140581834321920 alphageometry.py:566] LM output (score=-3.056059): "m : T a f a m 15 ;"
I0123 14:41:44.445542 140581834321920 alphageometry.py:567] Translation: "m = on_tline m a a f"

I0123 14:41:44.445578 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_tline m a a f ? eqratio k j j l b f f a"
I0123 14:41:44.445724 140581834321920 graph.py:498] 
I0123 14:41:44.445780 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_tline m a a f ? eqratio k j j l b f f a
I0123 14:41:46.006299 140581834321920 ddar.py:60] Depth 1/1000 time = 1.5178298950195312
I0123 14:41:48.734767 140581834321920 ddar.py:60] Depth 2/1000 time = 2.7282960414886475
I0123 14:41:51.299313 140581834321920 ddar.py:60] Depth 3/1000 time = 2.5643703937530518
I0123 14:41:54.120455 140581834321920 ddar.py:60] Depth 4/1000 time = 2.8034424781799316
I0123 14:41:57.180386 140581834321920 ddar.py:60] Depth 5/1000 time = 3.059718608856201
I0123 14:41:57.183952 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:41:57.184055 140581834321920 alphageometry.py:566] LM output (score=-3.076180): "m : D c m g m 15 D e m g m 16 ;"
I0123 14:41:57.184093 140581834321920 alphageometry.py:567] Translation: "m = on_bline m g c, on_bline m g e"

I0123 14:41:57.184131 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m g c, on_bline m g e ? eqratio k j j l b f f a"
I0123 14:41:57.184295 140581834321920 graph.py:498] 
I0123 14:41:57.184357 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m g c, on_bline m g e ? eqratio k j j l b f f a
I0123 14:41:59.070811 140581834321920 ddar.py:60] Depth 1/1000 time = 1.822232961654663
I0123 14:42:02.324453 140581834321920 ddar.py:60] Depth 2/1000 time = 3.253462314605713
I0123 14:42:05.266045 140581834321920 ddar.py:60] Depth 3/1000 time = 2.941405773162842
I0123 14:42:08.554662 140581834321920 ddar.py:60] Depth 4/1000 time = 3.265005350112915
I0123 14:42:12.175249 140581834321920 ddar.py:60] Depth 5/1000 time = 3.620394706726074
I0123 14:42:12.179479 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:42:12.179562 140581834321920 alphageometry.py:566] LM output (score=-3.101784): "m : D f g g m 15 D f h h m 16 ;"
I0123 14:42:12.179598 140581834321920 alphageometry.py:567] Translation: "m = on_circle m g f, on_circle m h f"

I0123 14:42:12.179635 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g f, on_circle m h f ? eqratio k j j l b f f a"
I0123 14:42:12.179788 140581834321920 graph.py:498] 
I0123 14:42:12.179839 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g f, on_circle m h f ? eqratio k j j l b f f a
I0123 14:42:14.538114 140581834321920 ddar.py:60] Depth 1/1000 time = 2.2950408458709717
I0123 14:42:18.516255 140581834321920 ddar.py:60] Depth 2/1000 time = 3.977851390838623
I0123 14:42:22.440300 140581834321920 ddar.py:60] Depth 3/1000 time = 3.923861503601074
I0123 14:42:27.008879 140581834321920 ddar.py:60] Depth 4/1000 time = 4.548152208328247
I0123 14:42:31.258539 140581834321920 ddar.py:60] Depth 5/1000 time = 4.24946928024292
I0123 14:42:31.262876 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:42:31.262965 140581834321920 alphageometry.py:566] LM output (score=-3.113564): "m : D f l l m 15 ;"
I0123 14:42:31.263001 140581834321920 alphageometry.py:567] Translation: "m = on_circle m l f"

I0123 14:42:31.263036 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m l f ? eqratio k j j l b f f a"
I0123 14:42:31.263188 140581834321920 graph.py:498] 
I0123 14:42:31.263252 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m l f ? eqratio k j j l b f f a
I0123 14:42:32.925259 140581834321920 ddar.py:60] Depth 1/1000 time = 1.6070551872253418
I0123 14:42:35.845590 140581834321920 ddar.py:60] Depth 2/1000 time = 2.920133113861084
I0123 14:42:38.221622 140581834321920 ddar.py:60] Depth 3/1000 time = 2.375781774520874
I0123 14:42:41.011052 140581834321920 ddar.py:60] Depth 4/1000 time = 2.777900218963623
I0123 14:42:43.794202 140581834321920 ddar.py:60] Depth 5/1000 time = 2.782956838607788
I0123 14:42:43.797917 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:42:43.798009 140581834321920 alphageometry.py:566] LM output (score=-3.156697): "m : D f g g m 15 D f i i m 16 ;"
I0123 14:42:43.798044 140581834321920 alphageometry.py:567] Translation: "m = on_circle m g f, on_circle m i f"

I0123 14:42:43.798082 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g f, on_circle m i f ? eqratio k j j l b f f a"
I0123 14:42:43.798252 140581834321920 graph.py:498] 
I0123 14:42:43.798314 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g f, on_circle m i f ? eqratio k j j l b f f a
I0123 14:42:46.120692 140581834321920 ddar.py:60] Depth 1/1000 time = 2.2566351890563965
I0123 14:42:50.077911 140581834321920 ddar.py:60] Depth 2/1000 time = 3.957042932510376
I0123 14:42:54.016340 140581834321920 ddar.py:60] Depth 3/1000 time = 3.938237190246582
I0123 14:42:58.590663 140581834321920 ddar.py:60] Depth 4/1000 time = 4.5534584522247314
I0123 14:43:02.847787 140581834321920 ddar.py:60] Depth 5/1000 time = 4.25692343711853
I0123 14:43:02.852052 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:43:02.852139 140581834321920 alphageometry.py:566] LM output (score=-3.186893): "m : D c g c m 15 D c g g m 16 ;"
I0123 14:43:02.852176 140581834321920 alphageometry.py:567] Translation: "m = on_circle m c g, on_circle m g c"

I0123 14:43:02.852211 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m c g, on_circle m g c ? eqratio k j j l b f f a"
I0123 14:43:02.852366 140581834321920 graph.py:498] 
I0123 14:43:02.852429 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m c g, on_circle m g c ? eqratio k j j l b f f a
I0123 14:43:05.828893 140581834321920 ddar.py:60] Depth 1/1000 time = 2.9173028469085693
I0123 14:43:10.357383 140581834321920 ddar.py:60] Depth 2/1000 time = 4.528315305709839
I0123 14:43:14.554677 140581834321920 ddar.py:60] Depth 3/1000 time = 4.197115182876587
I0123 14:43:18.088760 140581834321920 ddar.py:60] Depth 4/1000 time = 3.533064365386963
I0123 14:43:22.551211 140581834321920 ddar.py:60] Depth 5/1000 time = 4.447920083999634
I0123 14:43:26.650007 140581834321920 ddar.py:60] Depth 6/1000 time = 4.098615407943726
I0123 14:43:26.654484 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:43:26.654570 140581834321920 alphageometry.py:566] LM output (score=-3.189598): "m : T c f f m 15 ;"
I0123 14:43:26.654605 140581834321920 alphageometry.py:567] Translation: "m = on_tline m f c f"

I0123 14:43:26.654640 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_tline m f c f ? eqratio k j j l b f f a"
I0123 14:43:26.654787 140581834321920 graph.py:498] 
I0123 14:43:26.654846 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_tline m f c f ? eqratio k j j l b f f a
I0123 14:43:28.276518 140581834321920 ddar.py:60] Depth 1/1000 time = 1.575535774230957
I0123 14:43:30.753610 140581834321920 ddar.py:60] Depth 2/1000 time = 2.4769198894500732
I0123 14:43:33.393303 140581834321920 ddar.py:60] Depth 3/1000 time = 2.6395044326782227
I0123 14:43:36.303445 140581834321920 ddar.py:60] Depth 4/1000 time = 2.8915905952453613
I0123 14:43:39.224425 140581834321920 ddar.py:60] Depth 5/1000 time = 2.9207639694213867
I0123 14:43:39.227904 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:43:39.227999 140581834321920 alphageometry.py:566] LM output (score=-3.189613): "m : D f g g m 15 D f j j m 16 ;"
I0123 14:43:39.228036 140581834321920 alphageometry.py:567] Translation: "m = on_circle m g f, on_circle m j f"

I0123 14:43:39.228071 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g f, on_circle m j f ? eqratio k j j l b f f a"
I0123 14:43:39.228228 140581834321920 graph.py:498] 
I0123 14:43:39.228289 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g f, on_circle m j f ? eqratio k j j l b f f a
I0123 14:43:41.062543 140581834321920 ddar.py:60] Depth 1/1000 time = 1.7647576332092285
I0123 14:43:44.539725 140581834321920 ddar.py:60] Depth 2/1000 time = 3.4769880771636963
I0123 14:43:47.612791 140581834321920 ddar.py:60] Depth 3/1000 time = 3.072889804840088
I0123 14:43:50.934488 140581834321920 ddar.py:60] Depth 4/1000 time = 3.3052597045898438
I0123 14:43:53.898295 140581834321920 ddar.py:60] Depth 5/1000 time = 2.963618755340576
I0123 14:43:53.902549 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:43:53.902631 140581834321920 alphageometry.py:566] LM output (score=-3.244295): "m : T f k f m 15 ;"
I0123 14:43:53.902667 140581834321920 alphageometry.py:567] Translation: "m = on_tline m f f k"

I0123 14:43:53.902703 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_tline m f f k ? eqratio k j j l b f f a"
I0123 14:43:53.902849 140581834321920 graph.py:498] 
I0123 14:43:53.902899 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_tline m f f k ? eqratio k j j l b f f a
I0123 14:43:55.518011 140581834321920 ddar.py:60] Depth 1/1000 time = 1.5727503299713135
I0123 14:43:58.342116 140581834321920 ddar.py:60] Depth 2/1000 time = 2.823930501937866
I0123 14:44:01.000363 140581834321920 ddar.py:60] Depth 3/1000 time = 2.658015727996826
I0123 14:44:03.956661 140581834321920 ddar.py:60] Depth 4/1000 time = 2.9378132820129395
I0123 14:44:06.463255 140581834321920 ddar.py:60] Depth 5/1000 time = 2.5064187049865723
I0123 14:44:06.466693 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:44:06.466791 140581834321920 alphageometry.py:540] Depth 1. There are 31 nodes to expand:
I0123 14:44:06.466829 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : D e g g m 15 ; x00
I0123 14:44:06.466857 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : D c g g m 15 ; x00
I0123 14:44:06.466898 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : D f h h m 15 ; x00
I0123 14:44:06.466925 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : D e i i m 15 ; x00
I0123 14:44:06.466950 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : C e f m 15 D e m f m 16 ; x00
I0123 14:44:06.466974 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : D c m e m 15 ; x00
I0123 14:44:06.466998 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : D d g g m 15 ; x00
I0123 14:44:06.467022 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : C d f m 15 D d m f m 16 ; x00
I0123 14:44:06.467045 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : C c d m 15 D c m d m 16 ; x00
I0123 14:44:06.467068 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : D c m f m 15 ; x00
I0123 14:44:06.467090 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : D f g f m 15 D g k k m 16 ; x00
I0123 14:44:06.467113 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : D c m d m 15 ; x00
I0123 14:44:06.467136 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : D d h h m 15 ; x00
I0123 14:44:06.467163 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : D c g e m 15 D c m e g 16 ; x00
I0123 14:44:06.467188 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : D e g g m 15 T e g g m 16 ; x00
I0123 14:44:06.467211 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : P a b c m 15 ; x00
I0123 14:44:06.467234 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : D c g c m 15 D f g f m 16 ; x00
I0123 14:44:06.467256 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : T e g e m 15 ; x00
I0123 14:44:06.467279 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : D c g c m 15 D e g e m 16 ; x00
I0123 14:44:06.467301 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : D f l f m 15 D f l l m 16 ; x00
I0123 14:44:06.467323 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : P a b c m 15 T a b a m 16 ; x00
I0123 14:44:06.467346 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : D e m f m 15 ; x00
I0123 14:44:06.467368 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : T a f a m 15 ; x00
I0123 14:44:06.467390 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : D c m g m 15 D e m g m 16 ; x00
I0123 14:44:06.467416 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : D f g g m 15 D f h h m 16 ; x00
I0123 14:44:06.467440 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : D f l l m 15 ; x00
I0123 14:44:06.467462 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : D f g g m 15 D f i i m 16 ; x00
I0123 14:44:06.467484 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : D c g c m 15 D c g g m 16 ; x00
I0123 14:44:06.467507 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : T c f f m 15 ; x00
I0123 14:44:06.467529 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : D f g g m 15 D f j j m 16 ; x00
I0123 14:44:06.467551 140581834321920 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : T f k f m 15 ; x00
I0123 14:44:06.467577 140581834321920 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : D e g g m 15 ; x00
I0123 14:44:11.775526 140581834321920 alphageometry.py:566] LM output (score=-1.039138): "n : C e f n 16 D e n f n 17 ;"
I0123 14:44:11.775671 140581834321920 alphageometry.py:567] Translation: "n = on_line n e f, on_bline n f e"

I0123 14:44:11.775725 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n e f, on_bline n f e ? eqratio k j j l b f f a"
I0123 14:44:11.775893 140581834321920 graph.py:498] 
I0123 14:44:11.775960 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n e f, on_bline n f e ? eqratio k j j l b f f a
I0123 14:44:14.342217 140581834321920 ddar.py:60] Depth 1/1000 time = 2.5013482570648193
I0123 14:44:19.466401 140581834321920 ddar.py:60] Depth 2/1000 time = 5.124013900756836
I0123 14:44:23.592298 140581834321920 ddar.py:60] Depth 3/1000 time = 4.125704526901245
I0123 14:44:27.705304 140581834321920 ddar.py:60] Depth 4/1000 time = 4.112608432769775
I0123 14:44:32.437948 140581834321920 ddar.py:60] Depth 5/1000 time = 4.714290380477905
I0123 14:44:36.831590 140581834321920 ddar.py:60] Depth 6/1000 time = 4.393440246582031
I0123 14:44:36.836359 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:44:36.836423 140581834321920 alphageometry.py:566] LM output (score=-1.325366): "n : D e g g n 16 ;"
I0123 14:44:36.836458 140581834321920 alphageometry.py:567] Translation: "n = on_circle n g e"

I0123 14:44:36.836500 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_circle n g e ? eqratio k j j l b f f a"
I0123 14:44:36.836662 140581834321920 graph.py:498] 
I0123 14:44:36.836720 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_circle n g e ? eqratio k j j l b f f a
I0123 14:44:40.406644 140581834321920 ddar.py:60] Depth 1/1000 time = 3.5104379653930664
I0123 14:44:46.298914 140581834321920 ddar.py:60] Depth 2/1000 time = 5.892056465148926
I0123 14:44:52.609740 140581834321920 ddar.py:60] Depth 3/1000 time = 6.31062912940979
I0123 14:44:58.916628 140581834321920 ddar.py:60] Depth 4/1000 time = 6.2846360206604
I0123 14:45:05.175873 140581834321920 ddar.py:60] Depth 5/1000 time = 6.259052753448486
I0123 14:45:05.180386 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:45:05.180446 140581834321920 alphageometry.py:566] LM output (score=-1.527060): "n : C e j n 16 D e n j n 17 ;"
I0123 14:45:05.180479 140581834321920 alphageometry.py:567] Translation: "n = on_line n e j, on_bline n j e"

I0123 14:45:05.180516 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n e j, on_bline n j e ? eqratio k j j l b f f a"
I0123 14:45:05.180670 140581834321920 graph.py:498] 
I0123 14:45:05.180721 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n e j, on_bline n j e ? eqratio k j j l b f f a
I0123 14:45:07.738353 140581834321920 ddar.py:60] Depth 1/1000 time = 2.493114471435547
I0123 14:45:12.945733 140581834321920 ddar.py:60] Depth 2/1000 time = 5.207198143005371
I0123 14:45:17.167996 140581834321920 ddar.py:60] Depth 3/1000 time = 4.221974611282349
I0123 14:45:21.347079 140581834321920 ddar.py:60] Depth 4/1000 time = 4.178595781326294
I0123 14:45:26.207395 140581834321920 ddar.py:60] Depth 5/1000 time = 4.840554714202881
I0123 14:45:30.673449 140581834321920 ddar.py:60] Depth 6/1000 time = 4.4658637046813965
I0123 14:45:30.677897 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:45:30.677951 140581834321920 alphageometry.py:566] LM output (score=-1.695404): "n : C m j n 16 D m n j n 17 ;"
I0123 14:45:30.678000 140581834321920 alphageometry.py:567] Translation: "n = on_line n m j, on_bline n j m"

I0123 14:45:30.678038 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n m j, on_bline n j m ? eqratio k j j l b f f a"
I0123 14:45:30.678194 140581834321920 graph.py:498] 
I0123 14:45:30.678257 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n m j, on_bline n j m ? eqratio k j j l b f f a
I0123 14:45:33.271910 140581834321920 ddar.py:60] Depth 1/1000 time = 2.527979850769043
I0123 14:45:37.894742 140581834321920 ddar.py:60] Depth 2/1000 time = 4.622640371322632
I0123 14:45:42.435513 140581834321920 ddar.py:60] Depth 3/1000 time = 4.540543079376221
I0123 14:45:46.623587 140581834321920 ddar.py:60] Depth 4/1000 time = 4.187688112258911
I0123 14:45:50.998897 140581834321920 ddar.py:60] Depth 5/1000 time = 4.358518123626709
I0123 14:45:55.425059 140581834321920 ddar.py:60] Depth 6/1000 time = 4.425943374633789
I0123 14:45:55.429431 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:45:55.429491 140581834321920 alphageometry.py:566] LM output (score=-1.700494): "n : C c m n 16 D c n m n 17 ;"
I0123 14:45:55.429525 140581834321920 alphageometry.py:567] Translation: "n = on_line n c m, on_bline n m c"

I0123 14:45:55.429564 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n c m, on_bline n m c ? eqratio k j j l b f f a"
I0123 14:45:55.429731 140581834321920 graph.py:498] 
I0123 14:45:55.429793 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n c m, on_bline n m c ? eqratio k j j l b f f a
I0123 14:45:58.415660 140581834321920 ddar.py:60] Depth 1/1000 time = 2.921025037765503
I0123 14:46:02.827666 140581834321920 ddar.py:60] Depth 2/1000 time = 4.411836624145508
I0123 14:46:07.057857 140581834321920 ddar.py:60] Depth 3/1000 time = 4.230006456375122
I0123 14:46:11.268460 140581834321920 ddar.py:60] Depth 4/1000 time = 4.210192680358887
I0123 14:46:15.723502 140581834321920 ddar.py:60] Depth 5/1000 time = 4.438093900680542
I0123 14:46:20.081019 140581834321920 ddar.py:60] Depth 6/1000 time = 4.357316255569458
I0123 14:46:20.085401 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:46:20.085457 140581834321920 alphageometry.py:566] LM output (score=-2.005017): "n : C d m n 16 D d n m n 17 ;"
I0123 14:46:20.085491 140581834321920 alphageometry.py:567] Translation: "n = on_line n d m, on_bline n m d"

I0123 14:46:20.085528 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n d m, on_bline n m d ? eqratio k j j l b f f a"
I0123 14:46:20.085697 140581834321920 graph.py:498] 
I0123 14:46:20.085765 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n d m, on_bline n m d ? eqratio k j j l b f f a
I0123 14:46:23.058222 140581834321920 ddar.py:60] Depth 1/1000 time = 2.907106399536133
I0123 14:46:27.449101 140581834321920 ddar.py:60] Depth 2/1000 time = 4.390710115432739
I0123 14:46:32.061971 140581834321920 ddar.py:60] Depth 3/1000 time = 4.612620115280151
I0123 14:46:36.303103 140581834321920 ddar.py:60] Depth 4/1000 time = 4.24060320854187
I0123 14:46:40.735850 140581834321920 ddar.py:60] Depth 5/1000 time = 4.415646553039551
I0123 14:46:45.158482 140581834321920 ddar.py:60] Depth 6/1000 time = 4.422445774078369
I0123 14:46:45.162866 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:46:45.162920 140581834321920 alphageometry.py:566] LM output (score=-2.021294): "n : C e m n 16 D e n m n 17 ;"
I0123 14:46:45.162954 140581834321920 alphageometry.py:567] Translation: "n = on_line n e m, on_bline n m e"

I0123 14:46:45.162990 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n e m, on_bline n m e ? eqratio k j j l b f f a"
I0123 14:46:45.163153 140581834321920 graph.py:498] 
I0123 14:46:45.163218 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n e m, on_bline n m e ? eqratio k j j l b f f a
I0123 14:46:47.714678 140581834321920 ddar.py:60] Depth 1/1000 time = 2.48688006401062
I0123 14:46:52.329775 140581834321920 ddar.py:60] Depth 2/1000 time = 4.614860534667969
I0123 14:46:56.547984 140581834321920 ddar.py:60] Depth 3/1000 time = 4.217905282974243
I0123 14:47:01.110363 140581834321920 ddar.py:60] Depth 4/1000 time = 4.561963319778442
I0123 14:47:05.540773 140581834321920 ddar.py:60] Depth 5/1000 time = 4.413702964782715
I0123 14:47:09.988200 140581834321920 ddar.py:60] Depth 6/1000 time = 4.447197437286377
I0123 14:47:09.992752 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:47:09.992827 140581834321920 alphageometry.py:566] LM output (score=-2.105432): "n : D c g g n 16 ;"
I0123 14:47:09.992860 140581834321920 alphageometry.py:567] Translation: "n = on_circle n g c"

I0123 14:47:09.992905 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_circle n g c ? eqratio k j j l b f f a"
I0123 14:47:09.993077 140581834321920 graph.py:498] 
I0123 14:47:09.993133 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_circle n g c ? eqratio k j j l b f f a
I0123 14:47:13.581476 140581834321920 ddar.py:60] Depth 1/1000 time = 3.5284953117370605
I0123 14:47:20.531279 140581834321920 ddar.py:60] Depth 2/1000 time = 6.949620723724365
I0123 14:47:26.506849 140581834321920 ddar.py:60] Depth 3/1000 time = 5.9753711223602295
I0123 14:47:32.900975 140581834321920 ddar.py:60] Depth 4/1000 time = 6.372141599655151
I0123 14:47:39.172596 140581834321920 ddar.py:60] Depth 5/1000 time = 6.271412134170532
I0123 14:47:39.177429 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:47:39.177505 140581834321920 alphageometry.py:566] LM output (score=-2.105950): "n : C c d n 16 D c n d n 17 ;"
I0123 14:47:39.177540 140581834321920 alphageometry.py:567] Translation: "n = on_line n c d, on_bline n d c"

I0123 14:47:39.177587 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n c d, on_bline n d c ? eqratio k j j l b f f a"
I0123 14:47:39.177758 140581834321920 graph.py:498] 
I0123 14:47:39.177822 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n c d, on_bline n d c ? eqratio k j j l b f f a
I0123 14:47:42.350836 140581834321920 ddar.py:60] Depth 1/1000 time = 3.107426166534424
I0123 14:47:47.242977 140581834321920 ddar.py:60] Depth 2/1000 time = 4.891908884048462
I0123 14:47:51.730371 140581834321920 ddar.py:60] Depth 3/1000 time = 4.487097263336182
I0123 14:47:56.623655 140581834321920 ddar.py:60] Depth 4/1000 time = 4.892866373062134
I0123 14:48:01.780807 140581834321920 ddar.py:60] Depth 5/1000 time = 5.13564133644104
I0123 14:48:06.514349 140581834321920 ddar.py:60] Depth 6/1000 time = 4.733292579650879
I0123 14:48:06.518860 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:48:06.518945 140581834321920 alphageometry.py:566] LM output (score=-2.123334): "n : C d k n 16 D d n k n 17 ;"
I0123 14:48:06.518979 140581834321920 alphageometry.py:567] Translation: "n = on_line n d k, on_bline n k d"

I0123 14:48:06.519026 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n d k, on_bline n k d ? eqratio k j j l b f f a"
I0123 14:48:06.519201 140581834321920 graph.py:498] 
I0123 14:48:06.519258 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n d k, on_bline n k d ? eqratio k j j l b f f a
I0123 14:48:09.644121 140581834321920 ddar.py:60] Depth 1/1000 time = 3.05955171585083
I0123 14:48:13.870787 140581834321920 ddar.py:60] Depth 2/1000 time = 4.226491451263428
I0123 14:48:18.063129 140581834321920 ddar.py:60] Depth 3/1000 time = 4.192167282104492
I0123 14:48:22.716857 140581834321920 ddar.py:60] Depth 4/1000 time = 4.653339385986328
I0123 14:48:27.309481 140581834321920 ddar.py:60] Depth 5/1000 time = 4.571690559387207
I0123 14:48:31.843626 140581834321920 ddar.py:60] Depth 6/1000 time = 4.533921480178833
I0123 14:48:31.847973 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:48:31.848027 140581834321920 alphageometry.py:566] LM output (score=-2.161900): "n : C b f n 16 D b n f n 17 ;"
I0123 14:48:31.848062 140581834321920 alphageometry.py:567] Translation: "n = on_line n b f, on_bline n f b"

I0123 14:48:31.848099 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n b f, on_bline n f b ? eqratio k j j l b f f a"
I0123 14:48:31.848255 140581834321920 graph.py:498] 
I0123 14:48:31.848317 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n b f, on_bline n f b ? eqratio k j j l b f f a
I0123 14:48:35.029888 140581834321920 ddar.py:60] Depth 1/1000 time = 3.1159937381744385
I0123 14:48:40.098028 140581834321920 ddar.py:60] Depth 2/1000 time = 5.067975044250488
I0123 14:48:44.570308 140581834321920 ddar.py:60] Depth 3/1000 time = 4.472042083740234
I0123 14:48:49.460571 140581834321920 ddar.py:60] Depth 4/1000 time = 4.889730453491211
I0123 14:48:54.612711 140581834321920 ddar.py:60] Depth 5/1000 time = 5.130861282348633
I0123 14:48:59.774156 140581834321920 ddar.py:60] Depth 6/1000 time = 5.161256790161133
I0123 14:48:59.778554 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:48:59.778608 140581834321920 alphageometry.py:566] LM output (score=-2.166517): "n : C d f n 16 D d n f n 17 ;"
I0123 14:48:59.778642 140581834321920 alphageometry.py:567] Translation: "n = on_line n d f, on_bline n f d"

I0123 14:48:59.778679 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n d f, on_bline n f d ? eqratio k j j l b f f a"
I0123 14:48:59.778838 140581834321920 graph.py:498] 
I0123 14:48:59.778901 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n d f, on_bline n f d ? eqratio k j j l b f f a
I0123 14:49:02.411633 140581834321920 ddar.py:60] Depth 1/1000 time = 2.5678892135620117
I0123 14:49:07.756074 140581834321920 ddar.py:60] Depth 2/1000 time = 5.344241142272949
I0123 14:49:11.565300 140581834321920 ddar.py:60] Depth 3/1000 time = 3.809030771255493
I0123 14:49:16.232090 140581834321920 ddar.py:60] Depth 4/1000 time = 4.666356801986694
I0123 14:49:20.291260 140581834321920 ddar.py:60] Depth 5/1000 time = 4.04119348526001
I0123 14:49:24.791750 140581834321920 ddar.py:60] Depth 6/1000 time = 4.50027322769165
I0123 14:49:24.797247 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:49:24.797316 140581834321920 alphageometry.py:566] LM output (score=-2.215599): "n : C f i n 16 D f i i n 17 ;"
I0123 14:49:24.797353 140581834321920 alphageometry.py:567] Translation: "n = on_line n f i, on_circle n i f"

I0123 14:49:24.797393 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n f i, on_circle n i f ? eqratio k j j l b f f a"
I0123 14:49:24.797560 140581834321920 graph.py:498] 
I0123 14:49:24.797624 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n f i, on_circle n i f ? eqratio k j j l b f f a
I0123 14:49:28.013786 140581834321920 ddar.py:60] Depth 1/1000 time = 3.153040885925293
I0123 14:49:34.154716 140581834321920 ddar.py:60] Depth 2/1000 time = 6.140751361846924
I0123 14:49:40.125202 140581834321920 ddar.py:60] Depth 3/1000 time = 5.970294952392578
I0123 14:49:45.696853 140581834321920 ddar.py:60] Depth 4/1000 time = 5.571200847625732
I0123 14:49:51.809847 140581834321920 ddar.py:60] Depth 5/1000 time = 6.074690341949463
I0123 14:49:57.923364 140581834321920 ddar.py:60] Depth 6/1000 time = 6.113316059112549
I0123 14:49:57.927890 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:49:57.927951 140581834321920 alphageometry.py:566] LM output (score=-2.217997): "n : C c e n 16 D c n e n 17 ;"
I0123 14:49:57.927985 140581834321920 alphageometry.py:567] Translation: "n = on_line n c e, on_bline n e c"

I0123 14:49:57.928022 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n c e, on_bline n e c ? eqratio k j j l b f f a"
I0123 14:49:57.928184 140581834321920 graph.py:498] 
I0123 14:49:57.928245 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n c e, on_bline n e c ? eqratio k j j l b f f a
I0123 14:50:01.210270 140581834321920 ddar.py:60] Depth 1/1000 time = 3.21573543548584
I0123 14:50:06.222863 140581834321920 ddar.py:60] Depth 2/1000 time = 5.012291669845581
I0123 14:50:11.217509 140581834321920 ddar.py:60] Depth 3/1000 time = 4.994473934173584
I0123 14:50:16.235321 140581834321920 ddar.py:60] Depth 4/1000 time = 5.017411947250366
I0123 14:50:21.122700 140581834321920 ddar.py:60] Depth 5/1000 time = 4.8650290966033936
I0123 14:50:26.417602 140581834321920 ddar.py:60] Depth 6/1000 time = 5.29458475112915
I0123 14:50:26.422121 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:50:26.422175 140581834321920 alphageometry.py:566] LM output (score=-2.230467): "n : C d j n 16 D d n j n 17 ;"
I0123 14:50:26.422210 140581834321920 alphageometry.py:567] Translation: "n = on_line n d j, on_bline n j d"

I0123 14:50:26.422246 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n d j, on_bline n j d ? eqratio k j j l b f f a"
I0123 14:50:26.422406 140581834321920 graph.py:498] 
I0123 14:50:26.422467 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n d j, on_bline n j d ? eqratio k j j l b f f a
I0123 14:50:29.067012 140581834321920 ddar.py:60] Depth 1/1000 time = 2.5789732933044434
I0123 14:50:33.833423 140581834321920 ddar.py:60] Depth 2/1000 time = 4.766234636306763
I0123 14:50:37.758863 140581834321920 ddar.py:60] Depth 3/1000 time = 3.9251925945281982
I0123 14:50:42.208226 140581834321920 ddar.py:60] Depth 4/1000 time = 4.4486963748931885
I0123 14:50:47.199069 140581834321920 ddar.py:60] Depth 5/1000 time = 4.971097469329834
I0123 14:50:51.809578 140581834321920 ddar.py:60] Depth 6/1000 time = 4.610330104827881
I0123 14:50:51.814016 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:50:51.814070 140581834321920 alphageometry.py:566] LM output (score=-2.238988): "n : C f m n 16 D f n m n 17 ;"
I0123 14:50:51.814104 140581834321920 alphageometry.py:567] Translation: "n = on_line n f m, on_bline n m f"

I0123 14:50:51.814139 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n f m, on_bline n m f ? eqratio k j j l b f f a"
I0123 14:50:51.814308 140581834321920 graph.py:498] 
I0123 14:50:51.814370 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n f m, on_bline n m f ? eqratio k j j l b f f a
I0123 14:50:54.451762 140581834321920 ddar.py:60] Depth 1/1000 time = 2.5713136196136475
I0123 14:50:58.588925 140581834321920 ddar.py:60] Depth 2/1000 time = 4.136979103088379
I0123 14:51:02.179397 140581834321920 ddar.py:60] Depth 3/1000 time = 3.590261697769165
I0123 14:51:06.209980 140581834321920 ddar.py:60] Depth 4/1000 time = 4.030165910720825
I0123 14:51:10.450304 140581834321920 ddar.py:60] Depth 5/1000 time = 4.225152969360352
I0123 14:51:14.705521 140581834321920 ddar.py:60] Depth 6/1000 time = 4.255025625228882
I0123 14:51:14.710102 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:51:14.710170 140581834321920 alphageometry.py:566] LM output (score=-2.285733): "n : C d e n 16 D d n e n 17 ;"
I0123 14:51:14.710204 140581834321920 alphageometry.py:567] Translation: "n = on_line n d e, on_bline n e d"

I0123 14:51:14.710242 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n d e, on_bline n e d ? eqratio k j j l b f f a"
I0123 14:51:14.710407 140581834321920 graph.py:498] 
I0123 14:51:14.710470 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n d e, on_bline n e d ? eqratio k j j l b f f a
I0123 14:51:17.405997 140581834321920 ddar.py:60] Depth 1/1000 time = 2.6281661987304688
I0123 14:51:21.995563 140581834321920 ddar.py:60] Depth 2/1000 time = 4.589258909225464
I0123 14:51:26.310584 140581834321920 ddar.py:60] Depth 3/1000 time = 4.314828634262085
I0123 14:51:30.656413 140581834321920 ddar.py:60] Depth 4/1000 time = 4.345399379730225
I0123 14:51:35.238420 140581834321920 ddar.py:60] Depth 5/1000 time = 4.563075065612793
I0123 14:51:39.831300 140581834321920 ddar.py:60] Depth 6/1000 time = 4.5925610065460205
I0123 14:51:39.835699 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:51:39.835755 140581834321920 alphageometry.py:566] LM output (score=-2.292978): "n : C l m n 16 D l n m n 17 ;"
I0123 14:51:39.835790 140581834321920 alphageometry.py:567] Translation: "n = on_line n l m, on_bline n m l"

I0123 14:51:39.835827 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n l m, on_bline n m l ? eqratio k j j l b f f a"
I0123 14:51:39.835991 140581834321920 graph.py:498] 
I0123 14:51:39.836054 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n l m, on_bline n m l ? eqratio k j j l b f f a
I0123 14:51:42.898098 140581834321920 ddar.py:60] Depth 1/1000 time = 2.9949862957000732
I0123 14:51:47.171151 140581834321920 ddar.py:60] Depth 2/1000 time = 4.272870063781738
I0123 14:51:50.764398 140581834321920 ddar.py:60] Depth 3/1000 time = 3.5930445194244385
I0123 14:51:54.840322 140581834321920 ddar.py:60] Depth 4/1000 time = 4.075474739074707
I0123 14:51:59.126883 140581834321920 ddar.py:60] Depth 5/1000 time = 4.271204233169556
I0123 14:52:03.362649 140581834321920 ddar.py:60] Depth 6/1000 time = 4.235572576522827
I0123 14:52:03.367001 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:52:03.367059 140581834321920 alphageometry.py:566] LM output (score=-2.293952): "n : D g m g n 16 ;"
I0123 14:52:03.367093 140581834321920 alphageometry.py:567] Translation: "n = on_circle n g m"

I0123 14:52:03.367129 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_circle n g m ? eqratio k j j l b f f a"
I0123 14:52:03.367285 140581834321920 graph.py:498] 
I0123 14:52:03.367350 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_circle n g m ? eqratio k j j l b f f a
I0123 14:52:06.637077 140581834321920 ddar.py:60] Depth 1/1000 time = 3.2047247886657715
I0123 14:52:13.707134 140581834321920 ddar.py:60] Depth 2/1000 time = 7.069819211959839
I0123 14:52:19.824647 140581834321920 ddar.py:60] Depth 3/1000 time = 6.117192983627319
I0123 14:52:26.274626 140581834321920 ddar.py:60] Depth 4/1000 time = 6.427873373031616
I0123 14:52:32.733132 140581834321920 ddar.py:60] Depth 5/1000 time = 6.458258628845215
I0123 14:52:32.737784 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:52:32.737868 140581834321920 alphageometry.py:566] LM output (score=-2.322242): "n : C d g n 16 D d g g n 17 ;"
I0123 14:52:32.737902 140581834321920 alphageometry.py:567] Translation: "n = on_line n d g, on_circle n g d"

I0123 14:52:32.737947 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n d g, on_circle n g d ? eqratio k j j l b f f a"
I0123 14:52:32.738119 140581834321920 graph.py:498] 
I0123 14:52:32.738175 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n d g, on_circle n g d ? eqratio k j j l b f f a
I0123 14:52:36.125976 140581834321920 ddar.py:60] Depth 1/1000 time = 3.323870897293091
I0123 14:52:43.638611 140581834321920 ddar.py:60] Depth 2/1000 time = 7.512454986572266
I0123 14:52:50.537238 140581834321920 ddar.py:60] Depth 3/1000 time = 6.8984503746032715
I0123 14:52:57.581244 140581834321920 ddar.py:60] Depth 4/1000 time = 7.043803691864014
I0123 14:53:05.010361 140581834321920 ddar.py:60] Depth 5/1000 time = 7.428677082061768
I0123 14:53:12.130557 140581834321920 ddar.py:60] Depth 6/1000 time = 7.079679489135742
I0123 14:53:20.047868 140581834321920 ddar.py:60] Depth 7/1000 time = 7.91698145866394
I0123 14:53:20.052818 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:53:20.052876 140581834321920 alphageometry.py:566] LM output (score=-2.324714): "n : C e g n 16 D e g g n 17 ;"
I0123 14:53:20.052909 140581834321920 alphageometry.py:567] Translation: "n = on_line n e g, on_circle n g e"

I0123 14:53:20.052944 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n e g, on_circle n g e ? eqratio k j j l b f f a"
I0123 14:53:20.053117 140581834321920 graph.py:498] 
I0123 14:53:20.053180 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n e g, on_circle n g e ? eqratio k j j l b f f a
I0123 14:53:23.768245 140581834321920 ddar.py:60] Depth 1/1000 time = 3.6524791717529297
I0123 14:53:31.854395 140581834321920 ddar.py:60] Depth 2/1000 time = 8.085490703582764
I0123 14:53:39.260565 140581834321920 ddar.py:60] Depth 3/1000 time = 7.4048826694488525
I0123 14:53:46.299533 140581834321920 ddar.py:60] Depth 4/1000 time = 7.03840446472168
I0123 14:53:53.305133 140581834321920 ddar.py:60] Depth 5/1000 time = 7.00471305847168
I0123 14:54:00.927186 140581834321920 ddar.py:60] Depth 6/1000 time = 7.580722332000732
I0123 14:54:08.457762 140581834321920 ddar.py:60] Depth 7/1000 time = 7.53015661239624
I0123 14:54:08.462573 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:54:08.462667 140581834321920 alphageometry.py:566] LM output (score=-2.423110): "n : D f h h n 16 ;"
I0123 14:54:08.462705 140581834321920 alphageometry.py:567] Translation: "n = on_circle n h f"

I0123 14:54:08.462743 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_circle n h f ? eqratio k j j l b f f a"
I0123 14:54:08.462930 140581834321920 graph.py:498] 
I0123 14:54:08.463039 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_circle n h f ? eqratio k j j l b f f a
I0123 14:54:12.168426 140581834321920 ddar.py:60] Depth 1/1000 time = 3.6434762477874756
I0123 14:54:17.241741 140581834321920 ddar.py:60] Depth 2/1000 time = 5.072943687438965
I0123 14:54:22.328836 140581834321920 ddar.py:60] Depth 3/1000 time = 5.086828947067261
I0123 14:54:27.760397 140581834321920 ddar.py:60] Depth 4/1000 time = 5.412213087081909
I0123 14:54:33.147412 140581834321920 ddar.py:60] Depth 5/1000 time = 5.386726379394531
I0123 14:54:33.152044 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:54:33.152104 140581834321920 alphageometry.py:566] LM output (score=-2.446175): "n : C e l n 16 D e n l n 17 ;"
I0123 14:54:33.152139 140581834321920 alphageometry.py:567] Translation: "n = on_line n e l, on_bline n l e"

I0123 14:54:33.152176 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n e l, on_bline n l e ? eqratio k j j l b f f a"
I0123 14:54:33.152347 140581834321920 graph.py:498] 
I0123 14:54:33.152412 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n e l, on_bline n l e ? eqratio k j j l b f f a
I0123 14:54:35.848610 140581834321920 ddar.py:60] Depth 1/1000 time = 2.6283857822418213
I0123 14:54:40.702881 140581834321920 ddar.py:60] Depth 2/1000 time = 4.854010581970215
I0123 14:54:44.597538 140581834321920 ddar.py:60] Depth 3/1000 time = 3.8943676948547363
I0123 14:54:48.922912 140581834321920 ddar.py:60] Depth 4/1000 time = 4.324867248535156
I0123 14:54:53.599832 140581834321920 ddar.py:60] Depth 5/1000 time = 4.654922246932983
I0123 14:54:58.250207 140581834321920 ddar.py:60] Depth 6/1000 time = 4.650032043457031
I0123 14:54:58.254883 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:54:58.254975 140581834321920 alphageometry.py:566] LM output (score=-2.495331): "n : C a f n 16 D a n f n 17 ;"
I0123 14:54:58.255011 140581834321920 alphageometry.py:567] Translation: "n = on_line n a f, on_bline n f a"

I0123 14:54:58.255067 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n a f, on_bline n f a ? eqratio k j j l b f f a"
I0123 14:54:58.255259 140581834321920 graph.py:498] 
I0123 14:54:58.255319 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n a f, on_bline n f a ? eqratio k j j l b f f a
I0123 14:55:01.596464 140581834321920 ddar.py:60] Depth 1/1000 time = 3.2733101844787598
I0123 14:55:06.906688 140581834321920 ddar.py:60] Depth 2/1000 time = 5.309988975524902
I0123 14:55:11.505303 140581834321920 ddar.py:60] Depth 3/1000 time = 4.598352670669556
I0123 14:55:16.077653 140581834321920 ddar.py:60] Depth 4/1000 time = 4.571772575378418
I0123 14:55:21.441772 140581834321920 ddar.py:60] Depth 5/1000 time = 5.342477083206177
I0123 14:55:26.268348 140581834321920 ddar.py:60] Depth 6/1000 time = 4.826298952102661
I0123 14:55:26.272799 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:55:26.272860 140581834321920 alphageometry.py:566] LM output (score=-2.543363): "n : C e i n 16 D e i i n 17 ;"
I0123 14:55:26.272893 140581834321920 alphageometry.py:567] Translation: "n = on_line n e i, on_circle n i e"

I0123 14:55:26.272928 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n e i, on_circle n i e ? eqratio k j j l b f f a"
I0123 14:55:26.273102 140581834321920 graph.py:498] 
I0123 14:55:26.273174 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n e i, on_circle n i e ? eqratio k j j l b f f a
I0123 14:55:29.373730 140581834321920 ddar.py:60] Depth 1/1000 time = 3.0404090881347656
I0123 14:55:35.522239 140581834321920 ddar.py:60] Depth 2/1000 time = 6.1482155323028564
I0123 14:55:41.173112 140581834321920 ddar.py:60] Depth 3/1000 time = 5.650473356246948
I0123 14:55:46.707162 140581834321920 ddar.py:60] Depth 4/1000 time = 5.533511161804199
I0123 14:55:52.860094 140581834321920 ddar.py:60] Depth 5/1000 time = 6.117923974990845
I0123 14:55:59.052964 140581834321920 ddar.py:60] Depth 6/1000 time = 6.1925578117370605
I0123 14:55:59.057497 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:55:59.057566 140581834321920 alphageometry.py:566] LM output (score=-2.728870): "n : D e g g n 16 ^ e g e n n e n g 17 ;"
I0123 14:55:59.057627 140581834321920 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ e g e n n e n g"

I0123 14:55:59.057674 140581834321920 alphageometry.py:566] LM output (score=-2.737043): "n : D f i i n 16 ;"
I0123 14:55:59.057702 140581834321920 alphageometry.py:567] Translation: "n = on_circle n i f"

I0123 14:55:59.057730 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_circle n i f ? eqratio k j j l b f f a"
I0123 14:55:59.057901 140581834321920 graph.py:498] 
I0123 14:55:59.057961 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_circle n i f ? eqratio k j j l b f f a
I0123 14:56:02.314837 140581834321920 ddar.py:60] Depth 1/1000 time = 3.1979665756225586
I0123 14:56:07.540596 140581834321920 ddar.py:60] Depth 2/1000 time = 5.225499391555786
I0123 14:56:12.646038 140581834321920 ddar.py:60] Depth 3/1000 time = 5.105108261108398
I0123 14:56:18.119764 140581834321920 ddar.py:60] Depth 4/1000 time = 5.454490423202515
I0123 14:56:23.001069 140581834321920 ddar.py:60] Depth 5/1000 time = 4.881045579910278
I0123 14:56:23.005578 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:56:23.005655 140581834321920 alphageometry.py:566] LM output (score=-2.869025): "n : C a e n 16 D a n e n 17 ;"
I0123 14:56:23.005691 140581834321920 alphageometry.py:567] Translation: "n = on_line n a e, on_bline n e a"

I0123 14:56:23.005730 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n a e, on_bline n e a ? eqratio k j j l b f f a"
I0123 14:56:23.005901 140581834321920 graph.py:498] 
I0123 14:56:23.005965 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n a e, on_bline n e a ? eqratio k j j l b f f a
I0123 14:56:26.374219 140581834321920 ddar.py:60] Depth 1/1000 time = 3.3004863262176514
I0123 14:56:31.420514 140581834321920 ddar.py:60] Depth 2/1000 time = 5.046053171157837
I0123 14:56:36.110484 140581834321920 ddar.py:60] Depth 3/1000 time = 4.6896843910217285
I0123 14:56:41.284242 140581834321920 ddar.py:60] Depth 4/1000 time = 5.1732330322265625
I0123 14:56:46.237263 140581834321920 ddar.py:60] Depth 5/1000 time = 4.930046558380127
I0123 14:56:51.176033 140581834321920 ddar.py:60] Depth 6/1000 time = 4.938450336456299
I0123 14:56:51.180663 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:56:51.180759 140581834321920 alphageometry.py:566] LM output (score=-2.979451): "n : C a e n 16 D a e a n 17 ;"
I0123 14:56:51.180795 140581834321920 alphageometry.py:567] Translation: "n = on_line n a e, on_circle n a e"

I0123 14:56:51.180847 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n a e, on_circle n a e ? eqratio k j j l b f f a"
I0123 14:56:51.181057 140581834321920 graph.py:498] 
I0123 14:56:51.181115 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_line n a e, on_circle n a e ? eqratio k j j l b f f a
I0123 14:56:54.584553 140581834321920 ddar.py:60] Depth 1/1000 time = 3.3365776538848877
I0123 14:56:59.386242 140581834321920 ddar.py:60] Depth 2/1000 time = 4.801448822021484
I0123 14:57:03.794829 140581834321920 ddar.py:60] Depth 3/1000 time = 4.408335447311401
I0123 14:57:08.161515 140581834321920 ddar.py:60] Depth 4/1000 time = 4.366187810897827
I0123 14:57:13.320642 140581834321920 ddar.py:60] Depth 5/1000 time = 5.1436567306518555
I0123 14:57:17.927252 140581834321920 ddar.py:60] Depth 6/1000 time = 4.6063072681427
I0123 14:57:17.931763 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:57:17.931821 140581834321920 alphageometry.py:566] LM output (score=-3.047132): "n : T c f g n 16 ;"
I0123 14:57:17.931856 140581834321920 alphageometry.py:567] Translation: "n = on_tline n g c f"

I0123 14:57:17.931893 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_tline n g c f ? eqratio k j j l b f f a"
I0123 14:57:17.932071 140581834321920 graph.py:498] 
I0123 14:57:17.932137 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_tline n g c f ? eqratio k j j l b f f a
I0123 14:57:20.455968 140581834321920 ddar.py:60] Depth 1/1000 time = 2.4729371070861816
I0123 14:57:24.386826 140581834321920 ddar.py:60] Depth 2/1000 time = 3.930629253387451
I0123 14:57:28.453951 140581834321920 ddar.py:60] Depth 3/1000 time = 4.066864728927612
I0123 14:57:32.490853 140581834321920 ddar.py:60] Depth 4/1000 time = 4.011502027511597
I0123 14:57:37.224812 140581834321920 ddar.py:60] Depth 5/1000 time = 4.733673334121704
I0123 14:57:41.470973 140581834321920 ddar.py:60] Depth 6/1000 time = 4.245858192443848
I0123 14:57:46.283723 140581834321920 ddar.py:60] Depth 7/1000 time = 4.803157091140747
I0123 14:57:46.284036 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:57:46.284088 140581834321920 alphageometry.py:566] LM output (score=-3.145368): "n : T c f f n 16 ;"
I0123 14:57:46.284122 140581834321920 alphageometry.py:567] Translation: "n = on_tline n f c f"

I0123 14:57:46.284160 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_tline n f c f ? eqratio k j j l b f f a"
I0123 14:57:46.284331 140581834321920 graph.py:498] 
I0123 14:57:46.284399 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_tline n f c f ? eqratio k j j l b f f a
I0123 14:57:48.858503 140581834321920 ddar.py:60] Depth 1/1000 time = 2.5232954025268555
I0123 14:57:52.924364 140581834321920 ddar.py:60] Depth 2/1000 time = 4.065432548522949
I0123 14:57:56.976473 140581834321920 ddar.py:60] Depth 3/1000 time = 4.05182409286499
I0123 14:58:00.900703 140581834321920 ddar.py:60] Depth 4/1000 time = 3.8987467288970947
I0123 14:58:05.318552 140581834321920 ddar.py:60] Depth 5/1000 time = 4.41757869720459
I0123 14:58:05.322541 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:58:05.322602 140581834321920 alphageometry.py:566] LM output (score=-3.250740): "n : T e f e n 16 ;"
I0123 14:58:05.322636 140581834321920 alphageometry.py:567] Translation: "n = on_tline n e e f"

I0123 14:58:05.322671 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_tline n e e f ? eqratio k j j l b f f a"
I0123 14:58:05.322839 140581834321920 graph.py:498] 
I0123 14:58:05.322908 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g e; n = on_tline n e e f ? eqratio k j j l b f f a
I0123 14:58:07.907332 140581834321920 ddar.py:60] Depth 1/1000 time = 2.5339813232421875
I0123 14:58:11.491218 140581834321920 ddar.py:60] Depth 2/1000 time = 3.583528518676758
I0123 14:58:15.080183 140581834321920 ddar.py:60] Depth 3/1000 time = 3.588696002960205
I0123 14:58:19.475260 140581834321920 ddar.py:60] Depth 4/1000 time = 4.375880479812622
I0123 14:58:23.370943 140581834321920 ddar.py:60] Depth 5/1000 time = 3.895425319671631
I0123 14:58:23.375076 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:58:23.375146 140581834321920 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : D c g g m 15 ; x00
I0123 14:58:29.549664 140581834321920 alphageometry.py:566] LM output (score=-1.232807): "n : C e f n 16 D e n f n 17 ;"
I0123 14:58:29.550010 140581834321920 alphageometry.py:567] Translation: "n = on_line n e f, on_bline n f e"

I0123 14:58:29.550080 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n e f, on_bline n f e ? eqratio k j j l b f f a"
I0123 14:58:29.550254 140581834321920 graph.py:498] 
I0123 14:58:29.550312 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n e f, on_bline n f e ? eqratio k j j l b f f a
I0123 14:58:32.368265 140581834321920 ddar.py:60] Depth 1/1000 time = 2.752518653869629
I0123 14:58:36.774476 140581834321920 ddar.py:60] Depth 2/1000 time = 4.405975818634033
I0123 14:58:41.276043 140581834321920 ddar.py:60] Depth 3/1000 time = 4.501313209533691
I0123 14:58:45.212847 140581834321920 ddar.py:60] Depth 4/1000 time = 3.9363081455230713
I0123 14:58:49.955406 140581834321920 ddar.py:60] Depth 5/1000 time = 4.724473714828491
I0123 14:58:54.121296 140581834321920 ddar.py:60] Depth 6/1000 time = 4.165621757507324
I0123 14:58:54.131090 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:58:54.131191 140581834321920 alphageometry.py:566] LM output (score=-1.340186): "n : C c m n 16 D c n m n 17 ;"
I0123 14:58:54.131227 140581834321920 alphageometry.py:567] Translation: "n = on_line n c m, on_bline n m c"

I0123 14:58:54.131292 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n c m, on_bline n m c ? eqratio k j j l b f f a"
I0123 14:58:54.131458 140581834321920 graph.py:498] 
I0123 14:58:54.131508 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n c m, on_bline n m c ? eqratio k j j l b f f a
I0123 14:58:57.365468 140581834321920 ddar.py:60] Depth 1/1000 time = 3.1701393127441406
I0123 14:59:01.933821 140581834321920 ddar.py:60] Depth 2/1000 time = 4.568109750747681
I0123 14:59:06.414745 140581834321920 ddar.py:60] Depth 3/1000 time = 4.480654239654541
I0123 14:59:10.346454 140581834321920 ddar.py:60] Depth 4/1000 time = 3.9312078952789307
I0123 14:59:15.011614 140581834321920 ddar.py:60] Depth 5/1000 time = 4.6479949951171875
I0123 14:59:19.753523 140581834321920 ddar.py:60] Depth 6/1000 time = 4.741610288619995
I0123 14:59:19.757948 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:59:19.758013 140581834321920 alphageometry.py:566] LM output (score=-1.526393): "n : C m j n 16 D m n j n 17 ;"
I0123 14:59:19.758048 140581834321920 alphageometry.py:567] Translation: "n = on_line n m j, on_bline n j m"

I0123 14:59:19.758087 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n m j, on_bline n j m ? eqratio k j j l b f f a"
I0123 14:59:19.758264 140581834321920 graph.py:498] 
I0123 14:59:19.758324 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n m j, on_bline n j m ? eqratio k j j l b f f a
I0123 14:59:22.501051 140581834321920 ddar.py:60] Depth 1/1000 time = 2.6766345500946045
I0123 14:59:26.679767 140581834321920 ddar.py:60] Depth 2/1000 time = 4.178478717803955
I0123 14:59:31.143073 140581834321920 ddar.py:60] Depth 3/1000 time = 4.46303915977478
I0123 14:59:35.637984 140581834321920 ddar.py:60] Depth 4/1000 time = 4.494424104690552
I0123 14:59:39.836251 140581834321920 ddar.py:60] Depth 5/1000 time = 4.181423902511597
I0123 14:59:44.608328 140581834321920 ddar.py:60] Depth 6/1000 time = 4.771691799163818
I0123 14:59:44.613003 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:59:44.613066 140581834321920 alphageometry.py:566] LM output (score=-1.689632): "n : C d m n 16 D d n m n 17 ;"
I0123 14:59:44.613102 140581834321920 alphageometry.py:567] Translation: "n = on_line n d m, on_bline n m d"

I0123 14:59:44.613142 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n d m, on_bline n m d ? eqratio k j j l b f f a"
I0123 14:59:44.613318 140581834321920 graph.py:498] 
I0123 14:59:44.613383 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n d m, on_bline n m d ? eqratio k j j l b f f a
I0123 14:59:47.382004 140581834321920 ddar.py:60] Depth 1/1000 time = 2.702972650527954
I0123 14:59:52.121775 140581834321920 ddar.py:60] Depth 2/1000 time = 4.739534139633179
I0123 14:59:56.044728 140581834321920 ddar.py:60] Depth 3/1000 time = 3.9227006435394287
I0123 15:00:00.467309 140581834321920 ddar.py:60] Depth 4/1000 time = 4.4220991134643555
I0123 15:00:05.183137 140581834321920 ddar.py:60] Depth 5/1000 time = 4.698760271072388
I0123 15:00:09.319386 140581834321920 ddar.py:60] Depth 6/1000 time = 4.135923147201538
I0123 15:00:09.323950 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:00:09.324037 140581834321920 alphageometry.py:566] LM output (score=-1.715656): "n : C e j n 16 D e n j n 17 ;"
I0123 15:00:09.324071 140581834321920 alphageometry.py:567] Translation: "n = on_line n e j, on_bline n j e"

I0123 15:00:09.324125 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n e j, on_bline n j e ? eqratio k j j l b f f a"
I0123 15:00:09.324309 140581834321920 graph.py:498] 
I0123 15:00:09.324367 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n e j, on_bline n j e ? eqratio k j j l b f f a
I0123 15:00:12.098688 140581834321920 ddar.py:60] Depth 1/1000 time = 2.7094173431396484
I0123 15:00:16.857033 140581834321920 ddar.py:60] Depth 2/1000 time = 4.758084058761597
I0123 15:00:21.413369 140581834321920 ddar.py:60] Depth 3/1000 time = 4.556072235107422
I0123 15:00:25.366652 140581834321920 ddar.py:60] Depth 4/1000 time = 3.952756404876709
I0123 15:00:30.167777 140581834321920 ddar.py:60] Depth 5/1000 time = 4.781731367111206
I0123 15:00:34.414055 140581834321920 ddar.py:60] Depth 6/1000 time = 4.246013879776001
I0123 15:00:34.418476 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:00:34.418550 140581834321920 alphageometry.py:566] LM output (score=-1.780510): "n : C c d n 16 D c n d n 17 ;"
I0123 15:00:34.418584 140581834321920 alphageometry.py:567] Translation: "n = on_line n c d, on_bline n d c"

I0123 15:00:34.418621 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n c d, on_bline n d c ? eqratio k j j l b f f a"
I0123 15:00:34.418784 140581834321920 graph.py:498] 
I0123 15:00:34.418834 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n c d, on_bline n d c ? eqratio k j j l b f f a
I0123 15:00:37.871015 140581834321920 ddar.py:60] Depth 1/1000 time = 3.386777877807617
I0123 15:00:43.063317 140581834321920 ddar.py:60] Depth 2/1000 time = 5.19200873374939
I0123 15:00:47.852997 140581834321920 ddar.py:60] Depth 3/1000 time = 4.789302110671997
I0123 15:00:52.562428 140581834321920 ddar.py:60] Depth 4/1000 time = 4.708904027938843
I0123 15:00:58.145463 140581834321920 ddar.py:60] Depth 5/1000 time = 5.560888051986694
I0123 15:01:03.196814 140581834321920 ddar.py:60] Depth 6/1000 time = 5.051065444946289
I0123 15:01:03.201246 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:01:03.201328 140581834321920 alphageometry.py:566] LM output (score=-1.790124): "n : C f m n 16 D f n m n 17 ;"
I0123 15:01:03.201364 140581834321920 alphageometry.py:567] Translation: "n = on_line n f m, on_bline n m f"

I0123 15:01:03.201402 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n f m, on_bline n m f ? eqratio k j j l b f f a"
I0123 15:01:03.201578 140581834321920 graph.py:498] 
I0123 15:01:03.201659 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n f m, on_bline n m f ? eqratio k j j l b f f a
I0123 15:01:05.954652 140581834321920 ddar.py:60] Depth 1/1000 time = 2.6861586570739746
I0123 15:01:10.306728 140581834321920 ddar.py:60] Depth 2/1000 time = 4.351846933364868
I0123 15:01:14.642280 140581834321920 ddar.py:60] Depth 3/1000 time = 4.335289001464844
I0123 15:01:18.476059 140581834321920 ddar.py:60] Depth 4/1000 time = 3.8332228660583496
I0123 15:01:22.429564 140581834321920 ddar.py:60] Depth 5/1000 time = 3.937926769256592
I0123 15:01:26.907179 140581834321920 ddar.py:60] Depth 6/1000 time = 4.477313995361328
I0123 15:01:26.911690 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:01:26.911776 140581834321920 alphageometry.py:566] LM output (score=-1.790528): "n : C d k n 16 D d n k n 17 ;"
I0123 15:01:26.911812 140581834321920 alphageometry.py:567] Translation: "n = on_line n d k, on_bline n k d"

I0123 15:01:26.911850 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n d k, on_bline n k d ? eqratio k j j l b f f a"
I0123 15:01:26.912017 140581834321920 graph.py:498] 
I0123 15:01:26.912082 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n d k, on_bline n k d ? eqratio k j j l b f f a
I0123 15:01:29.680612 140581834321920 ddar.py:60] Depth 1/1000 time = 2.6976311206817627
I0123 15:01:34.302652 140581834321920 ddar.py:60] Depth 2/1000 time = 4.6218039989471436
I0123 15:01:38.312774 140581834321920 ddar.py:60] Depth 3/1000 time = 4.009864330291748
I0123 15:01:42.842278 140581834321920 ddar.py:60] Depth 4/1000 time = 4.528991937637329
I0123 15:01:47.722993 140581834321920 ddar.py:60] Depth 5/1000 time = 4.8600311279296875
I0123 15:01:52.001342 140581834321920 ddar.py:60] Depth 6/1000 time = 4.278065919876099
I0123 15:01:52.005818 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:01:52.005874 140581834321920 alphageometry.py:566] LM output (score=-1.797001): "n : C d j n 16 D d n j n 17 ;"
I0123 15:01:52.005909 140581834321920 alphageometry.py:567] Translation: "n = on_line n d j, on_bline n j d"

I0123 15:01:52.005945 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n d j, on_bline n j d ? eqratio k j j l b f f a"
I0123 15:01:52.006108 140581834321920 graph.py:498] 
I0123 15:01:52.006190 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n d j, on_bline n j d ? eqratio k j j l b f f a
I0123 15:01:54.810241 140581834321920 ddar.py:60] Depth 1/1000 time = 2.7394402027130127
I0123 15:02:00.063920 140581834321920 ddar.py:60] Depth 2/1000 time = 5.253419876098633
I0123 15:02:04.096546 140581834321920 ddar.py:60] Depth 3/1000 time = 4.0323333740234375
I0123 15:02:08.683861 140581834321920 ddar.py:60] Depth 4/1000 time = 4.586780548095703
I0123 15:02:13.586801 140581834321920 ddar.py:60] Depth 5/1000 time = 4.883171796798706
I0123 15:02:17.824501 140581834321920 ddar.py:60] Depth 6/1000 time = 4.23743200302124
I0123 15:02:17.829070 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:02:17.829133 140581834321920 alphageometry.py:566] LM output (score=-1.838021): "n : C d f n 16 D d n f n 17 ;"
I0123 15:02:17.829167 140581834321920 alphageometry.py:567] Translation: "n = on_line n d f, on_bline n f d"

I0123 15:02:17.829204 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n d f, on_bline n f d ? eqratio k j j l b f f a"
I0123 15:02:17.829381 140581834321920 graph.py:498] 
I0123 15:02:17.829450 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n d f, on_bline n f d ? eqratio k j j l b f f a
I0123 15:02:20.601680 140581834321920 ddar.py:60] Depth 1/1000 time = 2.707127094268799
I0123 15:02:25.809951 140581834321920 ddar.py:60] Depth 2/1000 time = 5.208031892776489
I0123 15:02:29.775843 140581834321920 ddar.py:60] Depth 3/1000 time = 3.9656362533569336
I0123 15:02:34.399910 140581834321920 ddar.py:60] Depth 4/1000 time = 4.623509645462036
I0123 15:02:38.627073 140581834321920 ddar.py:60] Depth 5/1000 time = 4.209164142608643
I0123 15:02:42.811426 140581834321920 ddar.py:60] Depth 6/1000 time = 4.184056997299194
I0123 15:02:42.815815 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:02:42.815875 140581834321920 alphageometry.py:566] LM output (score=-1.850125): "n : C d g n 16 D d g g n 17 ;"
I0123 15:02:42.815909 140581834321920 alphageometry.py:567] Translation: "n = on_line n d g, on_circle n g d"

I0123 15:02:42.815946 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n d g, on_circle n g d ? eqratio k j j l b f f a"
I0123 15:02:42.816122 140581834321920 graph.py:498] 
I0123 15:02:42.816190 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n d g, on_circle n g d ? eqratio k j j l b f f a
I0123 15:02:46.752508 140581834321920 ddar.py:60] Depth 1/1000 time = 3.8742783069610596
I0123 15:02:54.101398 140581834321920 ddar.py:60] Depth 2/1000 time = 7.348653316497803
I0123 15:03:01.227936 140581834321920 ddar.py:60] Depth 3/1000 time = 7.126278638839722
I0123 15:03:08.405313 140581834321920 ddar.py:60] Depth 4/1000 time = 7.177072286605835
I0123 15:03:14.967175 140581834321920 ddar.py:60] Depth 5/1000 time = 6.56119441986084
I0123 15:03:22.724618 140581834321920 ddar.py:60] Depth 6/1000 time = 7.7154860496521
I0123 15:03:30.385844 140581834321920 ddar.py:60] Depth 7/1000 time = 7.6609578132629395
I0123 15:03:30.390470 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:03:30.390531 140581834321920 alphageometry.py:566] LM output (score=-1.980732): "n : D e g g n 16 ;"
I0123 15:03:30.390564 140581834321920 alphageometry.py:567] Translation: "n = on_circle n g e"

I0123 15:03:30.390600 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_circle n g e ? eqratio k j j l b f f a"
I0123 15:03:30.390774 140581834321920 graph.py:498] 
I0123 15:03:30.390844 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_circle n g e ? eqratio k j j l b f f a
I0123 15:03:34.166228 140581834321920 ddar.py:60] Depth 1/1000 time = 3.710247039794922
I0123 15:03:39.902482 140581834321920 ddar.py:60] Depth 2/1000 time = 5.736019134521484
I0123 15:03:46.226763 140581834321920 ddar.py:60] Depth 3/1000 time = 6.324009418487549
I0123 15:03:52.386945 140581834321920 ddar.py:60] Depth 4/1000 time = 6.137766122817993
I0123 15:03:59.110209 140581834321920 ddar.py:60] Depth 5/1000 time = 6.722842216491699
I0123 15:03:59.114750 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:03:59.114809 140581834321920 alphageometry.py:566] LM output (score=-2.064622): "n : C e g n 16 D e g g n 17 ;"
I0123 15:03:59.114843 140581834321920 alphageometry.py:567] Translation: "n = on_line n e g, on_circle n g e"

I0123 15:03:59.114879 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n e g, on_circle n g e ? eqratio k j j l b f f a"
I0123 15:03:59.115056 140581834321920 graph.py:498] 
I0123 15:03:59.115123 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n e g, on_circle n g e ? eqratio k j j l b f f a
I0123 15:04:02.977393 140581834321920 ddar.py:60] Depth 1/1000 time = 3.7985589504241943
I0123 15:04:10.750631 140581834321920 ddar.py:60] Depth 2/1000 time = 7.772994756698608
I0123 15:04:17.329811 140581834321920 ddar.py:60] Depth 3/1000 time = 6.5789289474487305
I0123 15:04:24.534257 140581834321920 ddar.py:60] Depth 4/1000 time = 7.204141139984131
I0123 15:04:31.803992 140581834321920 ddar.py:60] Depth 5/1000 time = 7.2691473960876465
I0123 15:04:39.149845 140581834321920 ddar.py:60] Depth 6/1000 time = 7.302955627441406
I0123 15:04:46.928447 140581834321920 ddar.py:60] Depth 7/1000 time = 7.7783424854278564
I0123 15:04:46.933130 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:04:46.933193 140581834321920 alphageometry.py:566] LM output (score=-2.071869): "n : D g m g n 16 ;"
I0123 15:04:46.933229 140581834321920 alphageometry.py:567] Translation: "n = on_circle n g m"

I0123 15:04:46.933267 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_circle n g m ? eqratio k j j l b f f a"
I0123 15:04:46.933467 140581834321920 graph.py:498] 
I0123 15:04:46.933530 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_circle n g m ? eqratio k j j l b f f a
I0123 15:04:50.328556 140581834321920 ddar.py:60] Depth 1/1000 time = 3.330685615539551
I0123 15:04:56.041991 140581834321920 ddar.py:60] Depth 2/1000 time = 5.713201999664307
I0123 15:05:01.817376 140581834321920 ddar.py:60] Depth 3/1000 time = 5.77512264251709
I0123 15:05:08.607445 140581834321920 ddar.py:60] Depth 4/1000 time = 6.768141508102417
I0123 15:05:14.784667 140581834321920 ddar.py:60] Depth 5/1000 time = 6.1768128871917725
I0123 15:05:14.789425 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:05:14.789489 140581834321920 alphageometry.py:566] LM output (score=-2.120472): "n : C c e n 16 D c n e n 17 ;"
I0123 15:05:14.789525 140581834321920 alphageometry.py:567] Translation: "n = on_line n c e, on_bline n e c"

I0123 15:05:14.789566 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n c e, on_bline n e c ? eqratio k j j l b f f a"
I0123 15:05:14.789757 140581834321920 graph.py:498] 
I0123 15:05:14.789823 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n c e, on_bline n e c ? eqratio k j j l b f f a
I0123 15:05:18.422385 140581834321920 ddar.py:60] Depth 1/1000 time = 3.565675973892212
I0123 15:05:23.552208 140581834321920 ddar.py:60] Depth 2/1000 time = 5.129595518112183
I0123 15:05:28.481089 140581834321920 ddar.py:60] Depth 3/1000 time = 4.928631782531738
I0123 15:05:32.726027 140581834321920 ddar.py:60] Depth 4/1000 time = 4.244460344314575
I0123 15:05:37.894456 140581834321920 ddar.py:60] Depth 5/1000 time = 5.14643120765686
I0123 15:05:43.048075 140581834321920 ddar.py:60] Depth 6/1000 time = 5.153346300125122
I0123 15:05:43.052614 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:05:43.052686 140581834321920 alphageometry.py:566] LM output (score=-2.122447): "n : C d e n 16 D d n e n 17 ;"
I0123 15:05:43.052721 140581834321920 alphageometry.py:567] Translation: "n = on_line n d e, on_bline n e d"

I0123 15:05:43.052759 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n d e, on_bline n e d ? eqratio k j j l b f f a"
I0123 15:05:43.052938 140581834321920 graph.py:498] 
I0123 15:05:43.052992 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n d e, on_bline n e d ? eqratio k j j l b f f a
I0123 15:05:46.506082 140581834321920 ddar.py:60] Depth 1/1000 time = 3.3871383666992188
I0123 15:05:50.752270 140581834321920 ddar.py:60] Depth 2/1000 time = 4.245923757553101
I0123 15:05:55.532974 140581834321920 ddar.py:60] Depth 3/1000 time = 4.7804036140441895
I0123 15:05:59.591225 140581834321920 ddar.py:60] Depth 4/1000 time = 4.0577473640441895
I0123 15:06:03.909149 140581834321920 ddar.py:60] Depth 5/1000 time = 4.299243927001953
I0123 15:06:08.810244 140581834321920 ddar.py:60] Depth 6/1000 time = 4.900824308395386
I0123 15:06:08.814574 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:06:08.814636 140581834321920 alphageometry.py:566] LM output (score=-2.145854): "n : C e m n 16 D e n m n 17 ;"
I0123 15:06:08.814670 140581834321920 alphageometry.py:567] Translation: "n = on_line n e m, on_bline n m e"

I0123 15:06:08.814706 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n e m, on_bline n m e ? eqratio k j j l b f f a"
I0123 15:06:08.814882 140581834321920 graph.py:498] 
I0123 15:06:08.814951 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n e m, on_bline n m e ? eqratio k j j l b f f a
I0123 15:06:11.659913 140581834321920 ddar.py:60] Depth 1/1000 time = 2.778714895248413
I0123 15:06:16.348439 140581834321920 ddar.py:60] Depth 2/1000 time = 4.6882851123809814
I0123 15:06:21.004920 140581834321920 ddar.py:60] Depth 3/1000 time = 4.6562206745147705
I0123 15:06:25.070990 140581834321920 ddar.py:60] Depth 4/1000 time = 4.065431356430054
I0123 15:06:29.328467 140581834321920 ddar.py:60] Depth 5/1000 time = 4.240389585494995
I0123 15:06:34.172272 140581834321920 ddar.py:60] Depth 6/1000 time = 4.84354305267334
I0123 15:06:34.176607 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:06:34.176667 140581834321920 alphageometry.py:566] LM output (score=-2.177334): "n : C f i n 16 D f i i n 17 ;"
I0123 15:06:34.176702 140581834321920 alphageometry.py:567] Translation: "n = on_line n f i, on_circle n i f"

I0123 15:06:34.176737 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n f i, on_circle n i f ? eqratio k j j l b f f a"
I0123 15:06:34.176913 140581834321920 graph.py:498] 
I0123 15:06:34.176977 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n f i, on_circle n i f ? eqratio k j j l b f f a
I0123 15:06:37.151371 140581834321920 ddar.py:60] Depth 1/1000 time = 2.9160044193267822
I0123 15:06:43.034783 140581834321920 ddar.py:60] Depth 2/1000 time = 5.883182525634766
I0123 15:06:48.915529 140581834321920 ddar.py:60] Depth 3/1000 time = 5.880488872528076
I0123 15:06:54.829031 140581834321920 ddar.py:60] Depth 4/1000 time = 5.912981033325195
I0123 15:07:00.718517 140581834321920 ddar.py:60] Depth 5/1000 time = 5.852728843688965
I0123 15:07:07.346659 140581834321920 ddar.py:60] Depth 6/1000 time = 6.627727270126343
I0123 15:07:07.351192 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:07:07.351256 140581834321920 alphageometry.py:566] LM output (score=-2.215809): "n : C b f n 16 D b n f n 17 ;"
I0123 15:07:07.351292 140581834321920 alphageometry.py:567] Translation: "n = on_line n b f, on_bline n f b"

I0123 15:07:07.351332 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n b f, on_bline n f b ? eqratio k j j l b f f a"
I0123 15:07:07.351531 140581834321920 graph.py:498] 
I0123 15:07:07.351597 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n b f, on_bline n f b ? eqratio k j j l b f f a
I0123 15:07:10.350408 140581834321920 ddar.py:60] Depth 1/1000 time = 2.9275989532470703
I0123 15:07:15.445974 140581834321920 ddar.py:60] Depth 2/1000 time = 5.095360517501831
I0123 15:07:20.328084 140581834321920 ddar.py:60] Depth 3/1000 time = 4.881860256195068
I0123 15:07:25.199437 140581834321920 ddar.py:60] Depth 4/1000 time = 4.870867729187012
I0123 15:07:30.424069 140581834321920 ddar.py:60] Depth 5/1000 time = 5.2031145095825195
I0123 15:07:35.627479 140581834321920 ddar.py:60] Depth 6/1000 time = 5.203076601028442
I0123 15:07:35.632043 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:07:35.632128 140581834321920 alphageometry.py:566] LM output (score=-2.350918): "n : C l m n 16 D l n m n 17 ;"
I0123 15:07:35.632162 140581834321920 alphageometry.py:567] Translation: "n = on_line n l m, on_bline n m l"

I0123 15:07:35.632215 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n l m, on_bline n m l ? eqratio k j j l b f f a"
I0123 15:07:35.632398 140581834321920 graph.py:498] 
I0123 15:07:35.632456 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n l m, on_bline n m l ? eqratio k j j l b f f a
I0123 15:07:38.480827 140581834321920 ddar.py:60] Depth 1/1000 time = 2.7834911346435547
I0123 15:07:42.935668 140581834321920 ddar.py:60] Depth 2/1000 time = 4.454576015472412
I0123 15:07:47.384821 140581834321920 ddar.py:60] Depth 3/1000 time = 4.4488914012908936
I0123 15:07:51.194391 140581834321920 ddar.py:60] Depth 4/1000 time = 3.8090503215789795
I0123 15:07:55.178672 140581834321920 ddar.py:60] Depth 5/1000 time = 3.969343900680542
I0123 15:07:59.791809 140581834321920 ddar.py:60] Depth 6/1000 time = 4.61286473274231
I0123 15:07:59.796284 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:07:59.796344 140581834321920 alphageometry.py:566] LM output (score=-2.404252): "n : C f k n 16 D f n k n 17 ;"
I0123 15:07:59.796380 140581834321920 alphageometry.py:567] Translation: "n = on_line n f k, on_bline n k f"

I0123 15:07:59.796417 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n f k, on_bline n k f ? eqratio k j j l b f f a"
I0123 15:07:59.796581 140581834321920 graph.py:498] 
I0123 15:07:59.796631 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n f k, on_bline n k f ? eqratio k j j l b f f a
I0123 15:08:03.613688 140581834321920 ddar.py:60] Depth 1/1000 time = 3.7500767707824707
I0123 15:08:08.886008 140581834321920 ddar.py:60] Depth 2/1000 time = 5.272077798843384
I0123 15:08:14.154511 140581834321920 ddar.py:60] Depth 3/1000 time = 5.268214225769043
I0123 15:08:20.078491 140581834321920 ddar.py:60] Depth 4/1000 time = 5.9234254360198975
I0123 15:08:25.689281 140581834321920 ddar.py:60] Depth 5/1000 time = 5.587345361709595
I0123 15:08:31.231129 140581834321920 ddar.py:60] Depth 6/1000 time = 5.541576147079468
I0123 15:08:31.235576 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:08:31.235636 140581834321920 alphageometry.py:566] LM output (score=-2.467808): "n : C f j n 16 D f n j n 17 ;"
I0123 15:08:31.235672 140581834321920 alphageometry.py:567] Translation: "n = on_line n f j, on_bline n j f"

I0123 15:08:31.235709 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n f j, on_bline n j f ? eqratio k j j l b f f a"
I0123 15:08:31.235884 140581834321920 graph.py:498] 
I0123 15:08:31.235953 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n f j, on_bline n j f ? eqratio k j j l b f f a
I0123 15:08:35.018177 140581834321920 ddar.py:60] Depth 1/1000 time = 3.714698314666748
I0123 15:08:40.661130 140581834321920 ddar.py:60] Depth 2/1000 time = 5.642714977264404
I0123 15:08:45.633477 140581834321920 ddar.py:60] Depth 3/1000 time = 4.972026348114014
I0123 15:08:51.368523 140581834321920 ddar.py:60] Depth 4/1000 time = 5.734350204467773
I0123 15:08:56.589530 140581834321920 ddar.py:60] Depth 5/1000 time = 5.206128120422363
I0123 15:09:01.732001 140581834321920 ddar.py:60] Depth 6/1000 time = 5.142186880111694
I0123 15:09:01.736422 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:09:01.736481 140581834321920 alphageometry.py:566] LM output (score=-2.494287): "n : C e l n 16 D e n l n 17 ;"
I0123 15:09:01.736516 140581834321920 alphageometry.py:567] Translation: "n = on_line n e l, on_bline n l e"

I0123 15:09:01.736554 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n e l, on_bline n l e ? eqratio k j j l b f f a"
I0123 15:09:01.736722 140581834321920 graph.py:498] 
I0123 15:09:01.736787 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n e l, on_bline n l e ? eqratio k j j l b f f a
I0123 15:09:04.555998 140581834321920 ddar.py:60] Depth 1/1000 time = 2.7529826164245605
I0123 15:09:09.908591 140581834321920 ddar.py:60] Depth 2/1000 time = 5.352341175079346
I0123 15:09:14.014874 140581834321920 ddar.py:60] Depth 3/1000 time = 4.106020450592041
I0123 15:09:18.856312 140581834321920 ddar.py:60] Depth 4/1000 time = 4.840929746627808
I0123 15:09:23.323553 140581834321920 ddar.py:60] Depth 5/1000 time = 4.444752931594849
I0123 15:09:27.752688 140581834321920 ddar.py:60] Depth 6/1000 time = 4.428724050521851
I0123 15:09:27.757192 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:09:27.757279 140581834321920 alphageometry.py:566] LM output (score=-2.495898): "n : D f h h n 16 ;"
I0123 15:09:27.757315 140581834321920 alphageometry.py:567] Translation: "n = on_circle n h f"

I0123 15:09:27.757353 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_circle n h f ? eqratio k j j l b f f a"
I0123 15:09:27.757523 140581834321920 graph.py:498] 
I0123 15:09:27.757589 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_circle n h f ? eqratio k j j l b f f a
I0123 15:09:31.114453 140581834321920 ddar.py:60] Depth 1/1000 time = 3.2978978157043457
I0123 15:09:36.980970 140581834321920 ddar.py:60] Depth 2/1000 time = 5.866272926330566
I0123 15:09:41.761372 140581834321920 ddar.py:60] Depth 3/1000 time = 4.780141353607178
I0123 15:09:46.792368 140581834321920 ddar.py:60] Depth 4/1000 time = 5.012508869171143
I0123 15:09:52.473286 140581834321920 ddar.py:60] Depth 5/1000 time = 5.680645704269409
I0123 15:09:52.477962 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:09:52.478026 140581834321920 alphageometry.py:566] LM output (score=-2.521250): "n : C b k n 16 D b n k n 17 ;"
I0123 15:09:52.478061 140581834321920 alphageometry.py:567] Translation: "n = on_line n b k, on_bline n k b"

I0123 15:09:52.478098 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n b k, on_bline n k b ? eqratio k j j l b f f a"
I0123 15:09:52.478265 140581834321920 graph.py:498] 
I0123 15:09:52.478317 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n b k, on_bline n k b ? eqratio k j j l b f f a
I0123 15:09:55.417133 140581834321920 ddar.py:60] Depth 1/1000 time = 2.874906301498413
I0123 15:09:59.541168 140581834321920 ddar.py:60] Depth 2/1000 time = 4.123800992965698
I0123 15:10:03.671300 140581834321920 ddar.py:60] Depth 3/1000 time = 4.12985634803772
I0123 15:10:08.504526 140581834321920 ddar.py:60] Depth 4/1000 time = 4.832687854766846
I0123 15:10:12.867709 140581834321920 ddar.py:60] Depth 5/1000 time = 4.343545913696289
I0123 15:10:17.193633 140581834321920 ddar.py:60] Depth 6/1000 time = 4.325650453567505
I0123 15:10:17.198085 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:10:17.198145 140581834321920 alphageometry.py:566] LM output (score=-2.526429): "n : C a f n 16 D a n f n 17 ;"
I0123 15:10:17.198180 140581834321920 alphageometry.py:567] Translation: "n = on_line n a f, on_bline n f a"

I0123 15:10:17.198217 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n a f, on_bline n f a ? eqratio k j j l b f f a"
I0123 15:10:17.198393 140581834321920 graph.py:498] 
I0123 15:10:17.198461 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n a f, on_bline n f a ? eqratio k j j l b f f a
I0123 15:10:20.229702 140581834321920 ddar.py:60] Depth 1/1000 time = 2.9653983116149902
I0123 15:10:25.825558 140581834321920 ddar.py:60] Depth 2/1000 time = 5.595616102218628
I0123 15:10:30.797356 140581834321920 ddar.py:60] Depth 3/1000 time = 4.971532583236694
I0123 15:10:35.837637 140581834321920 ddar.py:60] Depth 4/1000 time = 5.039750814437866
I0123 15:10:41.153674 140581834321920 ddar.py:60] Depth 5/1000 time = 5.294337272644043
I0123 15:10:46.401660 140581834321920 ddar.py:60] Depth 6/1000 time = 5.247687101364136
I0123 15:10:46.406137 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:10:46.406204 140581834321920 alphageometry.py:566] LM output (score=-2.591495): "n : D c g g n 16 ;"
I0123 15:10:46.406239 140581834321920 alphageometry.py:567] Translation: "n = on_circle n g c"

I0123 15:10:46.406276 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_circle n g c ? eqratio k j j l b f f a"
I0123 15:10:46.406449 140581834321920 graph.py:498] 
I0123 15:10:46.406516 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_circle n g c ? eqratio k j j l b f f a
I0123 15:10:49.602602 140581834321920 ddar.py:60] Depth 1/1000 time = 3.1363842487335205
I0123 15:10:57.079319 140581834321920 ddar.py:60] Depth 2/1000 time = 7.476475477218628
I0123 15:11:02.966503 140581834321920 ddar.py:60] Depth 3/1000 time = 5.886925458908081
I0123 15:11:09.243668 140581834321920 ddar.py:60] Depth 4/1000 time = 6.254879474639893
I0123 15:11:16.165736 140581834321920 ddar.py:60] Depth 5/1000 time = 6.921665668487549
I0123 15:11:16.170377 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:11:16.170435 140581834321920 alphageometry.py:566] LM output (score=-2.615133): "n : C d h n 16 D d h h n 17 ;"
I0123 15:11:16.170472 140581834321920 alphageometry.py:567] Translation: "n = on_line n d h, on_circle n h d"

I0123 15:11:16.170511 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n d h, on_circle n h d ? eqratio k j j l b f f a"
I0123 15:11:16.170683 140581834321920 graph.py:498] 
I0123 15:11:16.170748 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_line n d h, on_circle n h d ? eqratio k j j l b f f a
I0123 15:11:19.374782 140581834321920 ddar.py:60] Depth 1/1000 time = 3.1444849967956543
I0123 15:11:25.010154 140581834321920 ddar.py:60] Depth 2/1000 time = 5.635138988494873
I0123 15:11:30.266745 140581834321920 ddar.py:60] Depth 3/1000 time = 5.256330966949463
I0123 15:11:36.194076 140581834321920 ddar.py:60] Depth 4/1000 time = 5.926805257797241
I0123 15:11:42.025287 140581834321920 ddar.py:60] Depth 5/1000 time = 5.795353651046753
I0123 15:11:48.675858 140581834321920 ddar.py:60] Depth 6/1000 time = 6.650262355804443
I0123 15:11:48.680414 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:11:48.680507 140581834321920 alphageometry.py:566] LM output (score=-2.678096): "n : D f i i n 16 ;"
I0123 15:11:48.680543 140581834321920 alphageometry.py:567] Translation: "n = on_circle n i f"

I0123 15:11:48.680586 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_circle n i f ? eqratio k j j l b f f a"
I0123 15:11:48.680759 140581834321920 graph.py:498] 
I0123 15:11:48.680819 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_circle n i f ? eqratio k j j l b f f a
I0123 15:11:51.030939 140581834321920 ddar.py:60] Depth 1/1000 time = 2.2916224002838135
I0123 15:11:55.802365 140581834321920 ddar.py:60] Depth 2/1000 time = 4.771187782287598
I0123 15:12:01.333189 140581834321920 ddar.py:60] Depth 3/1000 time = 5.530566692352295
I0123 15:12:06.411749 140581834321920 ddar.py:60] Depth 4/1000 time = 5.05897331237793
I0123 15:12:11.490343 140581834321920 ddar.py:60] Depth 5/1000 time = 5.0783233642578125
I0123 15:12:11.494727 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:12:11.494785 140581834321920 alphageometry.py:566] LM output (score=-2.733865): "n : D e i i n 16 ;"
I0123 15:12:11.494820 140581834321920 alphageometry.py:567] Translation: "n = on_circle n i e"

I0123 15:12:11.494858 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_circle n i e ? eqratio k j j l b f f a"
I0123 15:12:11.495021 140581834321920 graph.py:498] 
I0123 15:12:11.495074 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g c; n = on_circle n i e ? eqratio k j j l b f f a
I0123 15:12:14.773107 140581834321920 ddar.py:60] Depth 1/1000 time = 3.2208046913146973
I0123 15:12:20.524369 140581834321920 ddar.py:60] Depth 2/1000 time = 5.750957250595093
I0123 15:12:25.352747 140581834321920 ddar.py:60] Depth 3/1000 time = 4.827982664108276
I0123 15:12:31.081901 140581834321920 ddar.py:60] Depth 4/1000 time = 5.710218667984009
I0123 15:12:36.137948 140581834321920 ddar.py:60] Depth 5/1000 time = 5.0557849407196045
I0123 15:12:36.142385 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:12:36.142443 140581834321920 alphageometry.py:566] LM output (score=-2.882446): "n : C n j n 16 D n j j n 17 ;"
I0123 15:12:36.142477 140581834321920 alphageometry.py:567] Translation: "ERROR: Invalid predicate C n j n"

I0123 15:12:36.142510 140581834321920 alphageometry.py:566] LM output (score=-3.146147): "n : D e g g n 16 ^ e g e n n e n g 17 ;"
I0123 15:12:36.142535 140581834321920 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ e g e n n e n g"

I0123 15:12:36.142569 140581834321920 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : D f h h m 15 ; x00
I0123 15:12:41.280471 140581834321920 alphageometry.py:566] LM output (score=-1.184440): "n : C e f n 16 D e n f n 17 ;"
I0123 15:12:41.280706 140581834321920 alphageometry.py:567] Translation: "n = on_line n e f, on_bline n f e"

I0123 15:12:41.280752 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n e f, on_bline n f e ? eqratio k j j l b f f a"
I0123 15:12:41.280909 140581834321920 graph.py:498] 
I0123 15:12:41.280973 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n e f, on_bline n f e ? eqratio k j j l b f f a
I0123 15:12:44.228572 140581834321920 ddar.py:60] Depth 1/1000 time = 2.88356876373291
I0123 15:12:48.749243 140581834321920 ddar.py:60] Depth 2/1000 time = 4.520411729812622
I0123 15:12:52.828547 140581834321920 ddar.py:60] Depth 3/1000 time = 4.079027891159058
I0123 15:12:57.645436 140581834321920 ddar.py:60] Depth 4/1000 time = 4.816383361816406
I0123 15:13:02.005825 140581834321920 ddar.py:60] Depth 5/1000 time = 4.341759920120239
I0123 15:13:06.372025 140581834321920 ddar.py:60] Depth 6/1000 time = 4.3659093379974365
I0123 15:13:06.376524 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:13:06.376591 140581834321920 alphageometry.py:566] LM output (score=-1.510583): "n : C f m n 16 D f n m n 17 ;"
I0123 15:13:06.376627 140581834321920 alphageometry.py:567] Translation: "n = on_line n f m, on_bline n m f"

I0123 15:13:06.376667 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n f m, on_bline n m f ? eqratio k j j l b f f a"
I0123 15:13:06.376832 140581834321920 graph.py:498] 
I0123 15:13:06.376888 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n f m, on_bline n m f ? eqratio k j j l b f f a
I0123 15:13:09.332936 140581834321920 ddar.py:60] Depth 1/1000 time = 2.8927972316741943
I0123 15:13:13.918139 140581834321920 ddar.py:60] Depth 2/1000 time = 4.5849363803863525
I0123 15:13:18.832208 140581834321920 ddar.py:60] Depth 3/1000 time = 4.9137938022613525
I0123 15:13:23.001649 140581834321920 ddar.py:60] Depth 4/1000 time = 4.168928861618042
I0123 15:13:27.334297 140581834321920 ddar.py:60] Depth 5/1000 time = 4.314476490020752
I0123 15:13:31.711395 140581834321920 ddar.py:60] Depth 6/1000 time = 4.376804351806641
I0123 15:13:31.715726 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:13:31.715793 140581834321920 alphageometry.py:566] LM output (score=-1.568754): "n : C d k n 16 D d n k n 17 ;"
I0123 15:13:31.715832 140581834321920 alphageometry.py:567] Translation: "n = on_line n d k, on_bline n k d"

I0123 15:13:31.715873 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n d k, on_bline n k d ? eqratio k j j l b f f a"
I0123 15:13:31.716040 140581834321920 graph.py:498] 
I0123 15:13:31.716097 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n d k, on_bline n k d ? eqratio k j j l b f f a
I0123 15:13:34.658383 140581834321920 ddar.py:60] Depth 1/1000 time = 2.877535104751587
I0123 15:13:39.231425 140581834321920 ddar.py:60] Depth 2/1000 time = 4.572774171829224
I0123 15:13:44.196029 140581834321920 ddar.py:60] Depth 3/1000 time = 4.96430230140686
I0123 15:13:48.372547 140581834321920 ddar.py:60] Depth 4/1000 time = 4.175989389419556
I0123 15:13:53.643705 140581834321920 ddar.py:60] Depth 5/1000 time = 5.248700141906738
I0123 15:13:58.138406 140581834321920 ddar.py:60] Depth 6/1000 time = 4.494363307952881
I0123 15:13:58.142912 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:13:58.142988 140581834321920 alphageometry.py:566] LM output (score=-1.770202): "n : C b f n 16 D b n f n 17 ;"
I0123 15:13:58.143026 140581834321920 alphageometry.py:567] Translation: "n = on_line n b f, on_bline n f b"

I0123 15:13:58.143069 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n b f, on_bline n f b ? eqratio k j j l b f f a"
I0123 15:13:58.143249 140581834321920 graph.py:498] 
I0123 15:13:58.143317 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n b f, on_bline n f b ? eqratio k j j l b f f a
I0123 15:14:01.279177 140581834321920 ddar.py:60] Depth 1/1000 time = 3.0710670948028564
I0123 15:14:06.515315 140581834321920 ddar.py:60] Depth 2/1000 time = 5.235897064208984
I0123 15:14:10.972479 140581834321920 ddar.py:60] Depth 3/1000 time = 4.456940412521362
I0123 15:14:16.114779 140581834321920 ddar.py:60] Depth 4/1000 time = 5.14178729057312
I0123 15:14:21.532372 140581834321920 ddar.py:60] Depth 5/1000 time = 5.394174814224243
I0123 15:14:26.193055 140581834321920 ddar.py:60] Depth 6/1000 time = 4.66039252281189
I0123 15:14:26.197604 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:14:26.197677 140581834321920 alphageometry.py:566] LM output (score=-1.827689): "n : C d f n 16 D d n f n 17 ;"
I0123 15:14:26.197717 140581834321920 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 15:14:26.197758 140581834321920 alphageometry.py:566] LM output (score=-1.919233): "n : C e j n 16 D e n j n 17 ;"
I0123 15:14:26.197788 140581834321920 alphageometry.py:567] Translation: "n = on_line n e j, on_bline n j e"

I0123 15:14:26.197820 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n e j, on_bline n j e ? eqratio k j j l b f f a"
I0123 15:14:26.197984 140581834321920 graph.py:498] 
I0123 15:14:26.198043 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n e j, on_bline n j e ? eqratio k j j l b f f a
I0123 15:14:29.099398 140581834321920 ddar.py:60] Depth 1/1000 time = 2.8356287479400635
I0123 15:14:34.370972 140581834321920 ddar.py:60] Depth 2/1000 time = 5.271328926086426
I0123 15:14:38.558612 140581834321920 ddar.py:60] Depth 3/1000 time = 4.187328815460205
I0123 15:14:42.711008 140581834321920 ddar.py:60] Depth 4/1000 time = 4.151752948760986
I0123 15:14:47.121958 140581834321920 ddar.py:60] Depth 5/1000 time = 4.390933990478516
I0123 15:14:51.463381 140581834321920 ddar.py:60] Depth 6/1000 time = 4.341142416000366
I0123 15:14:51.467908 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:14:51.467978 140581834321920 alphageometry.py:566] LM output (score=-1.967311): "n : C f i n 16 D f i i n 17 ;"
I0123 15:14:51.468016 140581834321920 alphageometry.py:567] Translation: "n = on_line n f i, on_circle n i f"

I0123 15:14:51.468055 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n f i, on_circle n i f ? eqratio k j j l b f f a"
I0123 15:14:51.468232 140581834321920 graph.py:498] 
I0123 15:14:51.468302 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n f i, on_circle n i f ? eqratio k j j l b f f a
I0123 15:14:54.555878 140581834321920 ddar.py:60] Depth 1/1000 time = 3.028867721557617
I0123 15:15:00.842217 140581834321920 ddar.py:60] Depth 2/1000 time = 6.286089181900024
I0123 15:15:06.239607 140581834321920 ddar.py:60] Depth 3/1000 time = 5.3971099853515625
I0123 15:15:11.589805 140581834321920 ddar.py:60] Depth 4/1000 time = 5.349648714065552
I0123 15:15:18.300676 140581834321920 ddar.py:60] Depth 5/1000 time = 6.67218279838562
I0123 15:15:24.346793 140581834321920 ddar.py:60] Depth 6/1000 time = 6.045825719833374
I0123 15:15:24.351333 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:15:24.351408 140581834321920 alphageometry.py:566] LM output (score=-2.007311): "n : C d m n 16 D d n m n 17 ;"
I0123 15:15:24.351447 140581834321920 alphageometry.py:567] Translation: "n = on_line n d m, on_bline n m d"

I0123 15:15:24.351488 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n d m, on_bline n m d ? eqratio k j j l b f f a"
I0123 15:15:24.351671 140581834321920 graph.py:498] 
I0123 15:15:24.351738 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n d m, on_bline n m d ? eqratio k j j l b f f a
I0123 15:15:27.347446 140581834321920 ddar.py:60] Depth 1/1000 time = 2.9309866428375244
I0123 15:15:32.204996 140581834321920 ddar.py:60] Depth 2/1000 time = 4.857170581817627
I0123 15:15:36.363132 140581834321920 ddar.py:60] Depth 3/1000 time = 4.1578369140625
I0123 15:15:40.514845 140581834321920 ddar.py:60] Depth 4/1000 time = 4.151177883148193
I0123 15:15:44.864009 140581834321920 ddar.py:60] Depth 5/1000 time = 4.3312788009643555
I0123 15:15:49.133795 140581834321920 ddar.py:60] Depth 6/1000 time = 4.269500255584717
I0123 15:15:49.138232 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:15:49.138299 140581834321920 alphageometry.py:566] LM output (score=-2.033459): "n : C f k n 16 D f n k n 17 ;"
I0123 15:15:49.138379 140581834321920 alphageometry.py:567] Translation: "n = on_line n f k, on_bline n k f"

I0123 15:15:49.138420 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n f k, on_bline n k f ? eqratio k j j l b f f a"
I0123 15:15:49.138597 140581834321920 graph.py:498] 
I0123 15:15:49.138673 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n f k, on_bline n k f ? eqratio k j j l b f f a
I0123 15:15:53.127305 140581834321920 ddar.py:60] Depth 1/1000 time = 3.9218382835388184
I0123 15:15:59.261846 140581834321920 ddar.py:60] Depth 2/1000 time = 6.134284973144531
I0123 15:16:04.695986 140581834321920 ddar.py:60] Depth 3/1000 time = 5.433872938156128
I0123 15:16:10.166169 140581834321920 ddar.py:60] Depth 4/1000 time = 5.469667196273804
I0123 15:16:15.923182 140581834321920 ddar.py:60] Depth 5/1000 time = 5.733407974243164
I0123 15:16:22.465878 140581834321920 ddar.py:60] Depth 6/1000 time = 6.542410373687744
I0123 15:16:22.470259 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:16:22.470340 140581834321920 alphageometry.py:566] LM output (score=-2.106082): "n : C c d n 16 D c n d n 17 ;"
I0123 15:16:22.470377 140581834321920 alphageometry.py:567] Translation: "n = on_line n c d, on_bline n d c"

I0123 15:16:22.470416 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n c d, on_bline n d c ? eqratio k j j l b f f a"
I0123 15:16:22.470591 140581834321920 graph.py:498] 
I0123 15:16:22.470650 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n c d, on_bline n d c ? eqratio k j j l b f f a
I0123 15:16:25.641170 140581834321920 ddar.py:60] Depth 1/1000 time = 3.1057043075561523
I0123 15:16:30.503141 140581834321920 ddar.py:60] Depth 2/1000 time = 4.861708879470825
I0123 15:16:35.599504 140581834321920 ddar.py:60] Depth 3/1000 time = 5.096060514450073
I0123 15:16:39.971730 140581834321920 ddar.py:60] Depth 4/1000 time = 4.371674537658691
I0123 15:16:45.350964 140581834321920 ddar.py:60] Depth 5/1000 time = 5.356389760971069
I0123 15:16:50.762258 140581834321920 ddar.py:60] Depth 6/1000 time = 5.411026477813721
I0123 15:16:50.766653 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:16:50.766713 140581834321920 alphageometry.py:566] LM output (score=-2.157221): "n : C m k n 16 D m n k n 17 ;"
I0123 15:16:50.766747 140581834321920 alphageometry.py:567] Translation: "n = on_line n m k, on_bline n k m"

I0123 15:16:50.766783 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n m k, on_bline n k m ? eqratio k j j l b f f a"
I0123 15:16:50.766959 140581834321920 graph.py:498] 
I0123 15:16:50.767029 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n m k, on_bline n k m ? eqratio k j j l b f f a
I0123 15:16:53.746359 140581834321920 ddar.py:60] Depth 1/1000 time = 2.914402961730957
I0123 15:16:58.367457 140581834321920 ddar.py:60] Depth 2/1000 time = 4.620857238769531
I0123 15:17:02.538128 140581834321920 ddar.py:60] Depth 3/1000 time = 4.170423269271851
I0123 15:17:06.717013 140581834321920 ddar.py:60] Depth 4/1000 time = 4.178375720977783
I0123 15:17:11.107481 140581834321920 ddar.py:60] Depth 5/1000 time = 4.371252059936523
I0123 15:17:16.257195 140581834321920 ddar.py:60] Depth 6/1000 time = 5.1494457721710205
I0123 15:17:16.261571 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:17:16.261628 140581834321920 alphageometry.py:566] LM output (score=-2.199994): "n : C d g n 16 D d g g n 17 ;"
I0123 15:17:16.261670 140581834321920 alphageometry.py:567] Translation: "n = on_line n d g, on_circle n g d"

I0123 15:17:16.261707 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n d g, on_circle n g d ? eqratio k j j l b f f a"
I0123 15:17:16.261868 140581834321920 graph.py:498] 
I0123 15:17:16.261918 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n d g, on_circle n g d ? eqratio k j j l b f f a
I0123 15:17:18.733579 140581834321920 ddar.py:60] Depth 1/1000 time = 2.413177490234375
I0123 15:17:25.646427 140581834321920 ddar.py:60] Depth 2/1000 time = 6.912595272064209
I0123 15:17:30.992730 140581834321920 ddar.py:60] Depth 3/1000 time = 5.346044540405273
I0123 15:17:36.370069 140581834321920 ddar.py:60] Depth 4/1000 time = 5.377040386199951
I0123 15:17:41.683212 140581834321920 ddar.py:60] Depth 5/1000 time = 5.3125669956207275
I0123 15:17:48.337033 140581834321920 ddar.py:60] Depth 6/1000 time = 6.619114875793457
I0123 15:17:54.159657 140581834321920 ddar.py:60] Depth 7/1000 time = 5.822326898574829
I0123 15:17:54.164141 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:17:54.164219 140581834321920 alphageometry.py:566] LM output (score=-2.242030): "n : C b k n 16 D b n k n 17 ;"
I0123 15:17:54.164257 140581834321920 alphageometry.py:567] Translation: "n = on_line n b k, on_bline n k b"

I0123 15:17:54.164295 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n b k, on_bline n k b ? eqratio k j j l b f f a"
I0123 15:17:54.164481 140581834321920 graph.py:498] 
I0123 15:17:54.164552 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n b k, on_bline n k b ? eqratio k j j l b f f a
I0123 15:17:57.150750 140581834321920 ddar.py:60] Depth 1/1000 time = 2.921029806137085
I0123 15:18:01.818654 140581834321920 ddar.py:60] Depth 2/1000 time = 4.667672872543335
I0123 15:18:06.087725 140581834321920 ddar.py:60] Depth 3/1000 time = 4.268821954727173
I0123 15:18:10.334285 140581834321920 ddar.py:60] Depth 4/1000 time = 4.246049404144287
I0123 15:18:14.797835 140581834321920 ddar.py:60] Depth 5/1000 time = 4.444510221481323
I0123 15:18:20.031350 140581834321920 ddar.py:60] Depth 6/1000 time = 5.233247756958008
I0123 15:18:20.035723 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:18:20.035780 140581834321920 alphageometry.py:566] LM output (score=-2.285438): "n : C a f n 16 D a n f n 17 ;"
I0123 15:18:20.035816 140581834321920 alphageometry.py:567] Translation: "n = on_line n a f, on_bline n f a"

I0123 15:18:20.035853 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n a f, on_bline n f a ? eqratio k j j l b f f a"
I0123 15:18:20.036018 140581834321920 graph.py:498] 
I0123 15:18:20.036069 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n a f, on_bline n f a ? eqratio k j j l b f f a
I0123 15:18:23.202616 140581834321920 ddar.py:60] Depth 1/1000 time = 3.1011033058166504
I0123 15:18:28.056027 140581834321920 ddar.py:60] Depth 2/1000 time = 4.853176116943359
I0123 15:18:33.229526 140581834321920 ddar.py:60] Depth 3/1000 time = 5.173242568969727
I0123 15:18:38.417654 140581834321920 ddar.py:60] Depth 4/1000 time = 5.187602281570435
I0123 15:18:43.117069 140581834321920 ddar.py:60] Depth 5/1000 time = 4.6756579875946045
I0123 15:18:48.568091 140581834321920 ddar.py:60] Depth 6/1000 time = 5.450747966766357
I0123 15:18:48.572660 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:18:48.572719 140581834321920 alphageometry.py:566] LM output (score=-2.295166): "n : C m j n 16 D m n j n 17 ;"
I0123 15:18:48.572756 140581834321920 alphageometry.py:567] Translation: "n = on_line n m j, on_bline n j m"

I0123 15:18:48.572794 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n m j, on_bline n j m ? eqratio k j j l b f f a"
I0123 15:18:48.572957 140581834321920 graph.py:498] 
I0123 15:18:48.573007 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n m j, on_bline n j m ? eqratio k j j l b f f a
I0123 15:18:50.765969 140581834321920 ddar.py:60] Depth 1/1000 time = 2.128638744354248
I0123 15:18:55.696138 140581834321920 ddar.py:60] Depth 2/1000 time = 4.929919004440308
I0123 15:18:59.701855 140581834321920 ddar.py:60] Depth 3/1000 time = 4.0054590702056885
I0123 15:19:03.666308 140581834321920 ddar.py:60] Depth 4/1000 time = 3.96392822265625
I0123 15:19:07.873571 140581834321920 ddar.py:60] Depth 5/1000 time = 4.1914637088775635
I0123 15:19:12.017056 140581834321920 ddar.py:60] Depth 6/1000 time = 4.1431965827941895
I0123 15:19:12.021581 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:19:12.021646 140581834321920 alphageometry.py:566] LM output (score=-2.332892): "n : C k m n 16 D k n m n 17 ;"
I0123 15:19:12.021683 140581834321920 alphageometry.py:567] Translation: "n = on_line n k m, on_bline n m k"

I0123 15:19:12.021722 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n k m, on_bline n m k ? eqratio k j j l b f f a"
I0123 15:19:12.021923 140581834321920 graph.py:498] 
I0123 15:19:12.021991 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n k m, on_bline n m k ? eqratio k j j l b f f a
I0123 15:19:15.037734 140581834321920 ddar.py:60] Depth 1/1000 time = 2.951958179473877
I0123 15:19:19.497993 140581834321920 ddar.py:60] Depth 2/1000 time = 4.45999550819397
I0123 15:19:23.730812 140581834321920 ddar.py:60] Depth 3/1000 time = 4.2325615882873535
I0123 15:19:27.925142 140581834321920 ddar.py:60] Depth 4/1000 time = 4.193826675415039
I0123 15:19:32.379713 140581834321920 ddar.py:60] Depth 5/1000 time = 4.436168193817139
I0123 15:19:37.574705 140581834321920 ddar.py:60] Depth 6/1000 time = 5.194749593734741
I0123 15:19:37.579080 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:19:37.579141 140581834321920 alphageometry.py:566] LM output (score=-2.334947): "n : C f h n 16 D f h h n 17 ;"
I0123 15:19:37.579178 140581834321920 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 15:19:37.579215 140581834321920 alphageometry.py:566] LM output (score=-2.429288): "n : C b m n 16 D b n m n 17 ;"
I0123 15:19:37.579243 140581834321920 alphageometry.py:567] Translation: "n = on_line n b m, on_bline n m b"

I0123 15:19:37.579272 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n b m, on_bline n m b ? eqratio k j j l b f f a"
I0123 15:19:37.579436 140581834321920 graph.py:498] 
I0123 15:19:37.579490 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n b m, on_bline n m b ? eqratio k j j l b f f a
I0123 15:19:39.829946 140581834321920 ddar.py:60] Depth 1/1000 time = 2.185248374938965
I0123 15:19:45.253179 140581834321920 ddar.py:60] Depth 2/1000 time = 5.422991991043091
I0123 15:19:49.453952 140581834321920 ddar.py:60] Depth 3/1000 time = 4.200558185577393
I0123 15:19:53.633284 140581834321920 ddar.py:60] Depth 4/1000 time = 4.178867340087891
I0123 15:19:58.078721 140581834321920 ddar.py:60] Depth 5/1000 time = 4.426533222198486
I0123 15:20:02.471407 140581834321920 ddar.py:60] Depth 6/1000 time = 4.392406225204468
I0123 15:20:02.475852 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:20:02.475910 140581834321920 alphageometry.py:566] LM output (score=-2.474393): "n : C c e n 16 D c n e n 17 ;"
I0123 15:20:02.475945 140581834321920 alphageometry.py:567] Translation: "n = on_line n c e, on_bline n e c"

I0123 15:20:02.475983 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n c e, on_bline n e c ? eqratio k j j l b f f a"
I0123 15:20:02.476175 140581834321920 graph.py:498] 
I0123 15:20:02.476227 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_line n c e, on_bline n e c ? eqratio k j j l b f f a
I0123 15:20:05.670739 140581834321920 ddar.py:60] Depth 1/1000 time = 3.12990140914917
I0123 15:20:11.600739 140581834321920 ddar.py:60] Depth 2/1000 time = 5.929759979248047
I0123 15:20:16.060619 140581834321920 ddar.py:60] Depth 3/1000 time = 4.4596216678619385
I0123 15:20:21.288699 140581834321920 ddar.py:60] Depth 4/1000 time = 5.227581977844238
I0123 15:20:25.984583 140581834321920 ddar.py:60] Depth 5/1000 time = 4.674398183822632
I0123 15:20:31.488843 140581834321920 ddar.py:60] Depth 6/1000 time = 5.503999710083008
I0123 15:20:31.493417 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:20:31.493476 140581834321920 alphageometry.py:566] LM output (score=-2.510396): "n : D c g g n 16 ;"
I0123 15:20:31.493510 140581834321920 alphageometry.py:567] Translation: "n = on_circle n g c"

I0123 15:20:31.493547 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_circle n g c ? eqratio k j j l b f f a"
I0123 15:20:31.493720 140581834321920 graph.py:498] 
I0123 15:20:31.493773 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_circle n g c ? eqratio k j j l b f f a
I0123 15:20:34.193404 140581834321920 ddar.py:60] Depth 1/1000 time = 2.642254114151001
I0123 15:20:39.519390 140581834321920 ddar.py:60] Depth 2/1000 time = 5.32574200630188
I0123 15:20:45.250863 140581834321920 ddar.py:60] Depth 3/1000 time = 5.731144189834595
I0123 15:20:50.455568 140581834321920 ddar.py:60] Depth 4/1000 time = 5.185734510421753
I0123 15:20:55.667554 140581834321920 ddar.py:60] Depth 5/1000 time = 5.211706876754761
I0123 15:20:55.672153 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:20:55.672209 140581834321920 alphageometry.py:566] LM output (score=-2.575587): "n : D e g g n 16 ;"
I0123 15:20:55.672245 140581834321920 alphageometry.py:567] Translation: "n = on_circle n g e"

I0123 15:20:55.672284 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_circle n g e ? eqratio k j j l b f f a"
I0123 15:20:55.672464 140581834321920 graph.py:498] 
I0123 15:20:55.672531 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_circle n g e ? eqratio k j j l b f f a
I0123 15:20:58.387973 140581834321920 ddar.py:60] Depth 1/1000 time = 2.6567153930664062
I0123 15:21:03.254165 140581834321920 ddar.py:60] Depth 2/1000 time = 4.865924835205078
I0123 15:21:08.155390 140581834321920 ddar.py:60] Depth 3/1000 time = 4.900949478149414
I0123 15:21:14.153016 140581834321920 ddar.py:60] Depth 4/1000 time = 5.9795241355896
I0123 15:21:19.403398 140581834321920 ddar.py:60] Depth 5/1000 time = 5.250118970870972
I0123 15:21:19.407961 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:21:19.408020 140581834321920 alphageometry.py:566] LM output (score=-2.581509): "n : T c f f n 16 ;"
I0123 15:21:19.408056 140581834321920 alphageometry.py:567] Translation: "n = on_tline n f c f"

I0123 15:21:19.408094 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_tline n f c f ? eqratio k j j l b f f a"
I0123 15:21:19.408258 140581834321920 graph.py:498] 
I0123 15:21:19.408309 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_tline n f c f ? eqratio k j j l b f f a
I0123 15:21:21.429093 140581834321920 ddar.py:60] Depth 1/1000 time = 1.969855546951294
I0123 15:21:25.678477 140581834321920 ddar.py:60] Depth 2/1000 time = 4.249152660369873
I0123 15:21:29.559014 140581834321920 ddar.py:60] Depth 3/1000 time = 3.880279541015625
I0123 15:21:33.821910 140581834321920 ddar.py:60] Depth 4/1000 time = 4.237457513809204
I0123 15:21:38.087393 140581834321920 ddar.py:60] Depth 5/1000 time = 4.265211820602417
I0123 15:21:38.091482 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:21:38.091542 140581834321920 alphageometry.py:566] LM output (score=-2.669124): "n : T e g e n 16 ;"
I0123 15:21:38.091577 140581834321920 alphageometry.py:567] Translation: "n = on_tline n e e g"

I0123 15:21:38.091614 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_tline n e e g ? eqratio k j j l b f f a"
I0123 15:21:38.091776 140581834321920 graph.py:498] 
I0123 15:21:38.091827 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_tline n e e g ? eqratio k j j l b f f a
I0123 15:21:40.097929 140581834321920 ddar.py:60] Depth 1/1000 time = 1.9566843509674072
I0123 15:21:44.359474 140581834321920 ddar.py:60] Depth 2/1000 time = 4.261309862136841
I0123 15:21:48.230483 140581834321920 ddar.py:60] Depth 3/1000 time = 3.8707525730133057
I0123 15:21:52.298555 140581834321920 ddar.py:60] Depth 4/1000 time = 4.052740097045898
I0123 15:21:56.390981 140581834321920 ddar.py:60] Depth 5/1000 time = 4.092160701751709
I0123 15:21:56.395033 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:21:56.395088 140581834321920 alphageometry.py:566] LM output (score=-2.793364): "n : D f h h n 16 ;"
I0123 15:21:56.395122 140581834321920 alphageometry.py:567] Translation: "n = on_circle n h f"

I0123 15:21:56.395158 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_circle n h f ? eqratio k j j l b f f a"
I0123 15:21:56.395321 140581834321920 graph.py:498] 
I0123 15:21:56.395371 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_circle n h f ? eqratio k j j l b f f a
I0123 15:22:00.413464 140581834321920 ddar.py:60] Depth 1/1000 time = 3.956103563308716
I0123 15:22:06.596755 140581834321920 ddar.py:60] Depth 2/1000 time = 6.1830384731292725
I0123 15:22:13.461010 140581834321920 ddar.py:60] Depth 3/1000 time = 6.863994598388672
I0123 15:22:19.909917 140581834321920 ddar.py:60] Depth 4/1000 time = 6.4276275634765625
I0123 15:22:25.494235 140581834321920 ddar.py:60] Depth 5/1000 time = 5.584045171737671
I0123 15:22:25.498824 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:22:25.498907 140581834321920 alphageometry.py:566] LM output (score=-2.854712): "n : T e f f n 16 ;"
I0123 15:22:25.498941 140581834321920 alphageometry.py:567] Translation: "n = on_tline n f e f"

I0123 15:22:25.498978 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_tline n f e f ? eqratio k j j l b f f a"
I0123 15:22:25.499165 140581834321920 graph.py:498] 
I0123 15:22:25.499223 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_tline n f e f ? eqratio k j j l b f f a
I0123 15:22:28.357164 140581834321920 ddar.py:60] Depth 1/1000 time = 2.8078501224517822
I0123 15:22:32.651951 140581834321920 ddar.py:60] Depth 2/1000 time = 4.29454231262207
I0123 15:22:36.540353 140581834321920 ddar.py:60] Depth 3/1000 time = 3.8881404399871826
I0123 15:22:40.726252 140581834321920 ddar.py:60] Depth 4/1000 time = 4.166288137435913
I0123 15:22:44.903457 140581834321920 ddar.py:60] Depth 5/1000 time = 4.176928758621216
I0123 15:22:44.907536 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:22:44.907606 140581834321920 alphageometry.py:566] LM output (score=-2.864285): "n : T l k l n 16 ;"
I0123 15:22:44.907642 140581834321920 alphageometry.py:567] Translation: "n = on_tline n l l k"

I0123 15:22:44.907678 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_tline n l l k ? eqratio k j j l b f f a"
I0123 15:22:44.907853 140581834321920 graph.py:498] 
I0123 15:22:44.907922 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_tline n l l k ? eqratio k j j l b f f a
I0123 15:22:47.709960 140581834321920 ddar.py:60] Depth 1/1000 time = 2.752110481262207
I0123 15:22:50.756167 140581834321920 ddar.py:60] Depth 2/1000 time = 3.045952558517456
I0123 15:22:54.588496 140581834321920 ddar.py:60] Depth 3/1000 time = 3.832077741622925
I0123 15:22:58.788886 140581834321920 ddar.py:60] Depth 4/1000 time = 4.1758201122283936
I0123 15:23:03.008558 140581834321920 ddar.py:60] Depth 5/1000 time = 4.219399452209473
I0123 15:23:03.012595 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:23:03.012654 140581834321920 alphageometry.py:566] LM output (score=-2.886186): "n : T f k f n 16 ;"
I0123 15:23:03.012690 140581834321920 alphageometry.py:567] Translation: "n = on_tline n f f k"

I0123 15:23:03.012727 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_tline n f f k ? eqratio k j j l b f f a"
I0123 15:23:03.012923 140581834321920 graph.py:498] 
I0123 15:23:03.012974 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_tline n f f k ? eqratio k j j l b f f a
I0123 15:23:05.821872 140581834321920 ddar.py:60] Depth 1/1000 time = 2.7596523761749268
I0123 15:23:10.075270 140581834321920 ddar.py:60] Depth 2/1000 time = 4.2531657218933105
I0123 15:23:13.958252 140581834321920 ddar.py:60] Depth 3/1000 time = 3.8827271461486816
I0123 15:23:18.234053 140581834321920 ddar.py:60] Depth 4/1000 time = 4.250370502471924
I0123 15:23:22.508168 140581834321920 ddar.py:60] Depth 5/1000 time = 4.2738542556762695
I0123 15:23:22.512165 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:23:22.512223 140581834321920 alphageometry.py:566] LM output (score=-2.907913): "n : T c f g n 16 ;"
I0123 15:23:22.512257 140581834321920 alphageometry.py:567] Translation: "n = on_tline n g c f"

I0123 15:23:22.512294 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_tline n g c f ? eqratio k j j l b f f a"
I0123 15:23:22.512459 140581834321920 graph.py:498] 
I0123 15:23:22.512510 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_tline n g c f ? eqratio k j j l b f f a
I0123 15:23:24.548594 140581834321920 ddar.py:60] Depth 1/1000 time = 1.9862802028656006
I0123 15:23:29.005805 140581834321920 ddar.py:60] Depth 2/1000 time = 4.4569785594940186
I0123 15:23:32.832900 140581834321920 ddar.py:60] Depth 3/1000 time = 3.8268344402313232
I0123 15:23:37.052719 140581834321920 ddar.py:60] Depth 4/1000 time = 4.194472074508667
I0123 15:23:41.510545 140581834321920 ddar.py:60] Depth 5/1000 time = 4.4575700759887695
I0123 15:23:46.002365 140581834321920 ddar.py:60] Depth 6/1000 time = 4.491516590118408
I0123 15:23:50.579319 140581834321920 ddar.py:60] Depth 7/1000 time = 4.5673158168792725
I0123 15:23:50.579637 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:23:50.579716 140581834321920 alphageometry.py:566] LM output (score=-3.049226): "n : T c f i n 16 ;"
I0123 15:23:50.579753 140581834321920 alphageometry.py:567] Translation: "n = on_tline n i c f"

I0123 15:23:50.579792 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_tline n i c f ? eqratio k j j l b f f a"
I0123 15:23:50.579966 140581834321920 graph.py:498] 
I0123 15:23:50.580022 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_tline n i c f ? eqratio k j j l b f f a
I0123 15:23:53.415021 140581834321920 ddar.py:60] Depth 1/1000 time = 2.7850897312164307
I0123 15:23:57.931783 140581834321920 ddar.py:60] Depth 2/1000 time = 4.516531705856323
I0123 15:24:01.881356 140581834321920 ddar.py:60] Depth 3/1000 time = 3.949294090270996
I0123 15:24:06.235599 140581834321920 ddar.py:60] Depth 4/1000 time = 4.327881574630737
I0123 15:24:10.886241 140581834321920 ddar.py:60] Depth 5/1000 time = 4.650282382965088
I0123 15:24:15.551157 140581834321920 ddar.py:60] Depth 6/1000 time = 4.664608001708984
I0123 15:24:19.384644 140581834321920 ddar.py:60] Depth 7/1000 time = 3.8237271308898926
I0123 15:24:19.384949 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:24:19.385007 140581834321920 alphageometry.py:566] LM output (score=-3.074818): "n : T c f c n 16 ;"
I0123 15:24:19.385043 140581834321920 alphageometry.py:567] Translation: "n = on_tline n c c f"

I0123 15:24:19.385081 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_tline n c c f ? eqratio k j j l b f f a"
I0123 15:24:19.385263 140581834321920 graph.py:498] 
I0123 15:24:19.385336 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_tline n c c f ? eqratio k j j l b f f a
I0123 15:24:22.222289 140581834321920 ddar.py:60] Depth 1/1000 time = 2.7851786613464355
I0123 15:24:26.520509 140581834321920 ddar.py:60] Depth 2/1000 time = 4.297976016998291
I0123 15:24:30.431814 140581834321920 ddar.py:60] Depth 3/1000 time = 3.91105580329895
I0123 15:24:34.747035 140581834321920 ddar.py:60] Depth 4/1000 time = 4.289456367492676
I0123 15:24:39.080538 140581834321920 ddar.py:60] Depth 5/1000 time = 4.33323860168457
I0123 15:24:39.084507 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:24:39.084563 140581834321920 alphageometry.py:566] LM output (score=-3.081235): "n : T c f h n 16 ;"
I0123 15:24:39.084597 140581834321920 alphageometry.py:567] Translation: "n = on_tline n h c f"

I0123 15:24:39.084634 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_tline n h c f ? eqratio k j j l b f f a"
I0123 15:24:39.084793 140581834321920 graph.py:498] 
I0123 15:24:39.084845 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_tline n h c f ? eqratio k j j l b f f a
I0123 15:24:41.108264 140581834321920 ddar.py:60] Depth 1/1000 time = 1.9742283821105957
I0123 15:24:45.398171 140581834321920 ddar.py:60] Depth 2/1000 time = 4.289669513702393
I0123 15:24:49.303342 140581834321920 ddar.py:60] Depth 3/1000 time = 3.904918670654297
I0123 15:24:53.615100 140581834321920 ddar.py:60] Depth 4/1000 time = 4.28668737411499
I0123 15:24:58.241077 140581834321920 ddar.py:60] Depth 5/1000 time = 4.62571907043457
I0123 15:25:02.841078 140581834321920 ddar.py:60] Depth 6/1000 time = 4.599708318710327
I0123 15:25:07.516413 140581834321920 ddar.py:60] Depth 7/1000 time = 4.665547847747803
I0123 15:25:07.516721 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:25:07.516772 140581834321920 alphageometry.py:566] LM output (score=-3.139197): "n : P a b c n 16 ;"
I0123 15:25:07.516807 140581834321920 alphageometry.py:567] Translation: "n = on_pline n c a b"

I0123 15:25:07.516846 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_pline n c a b ? eqratio k j j l b f f a"
I0123 15:25:07.517032 140581834321920 graph.py:498] 
I0123 15:25:07.517084 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m h f; n = on_pline n c a b ? eqratio k j j l b f f a
I0123 15:25:09.632357 140581834321920 ddar.py:60] Depth 1/1000 time = 2.0650439262390137
I0123 15:25:13.958316 140581834321920 ddar.py:60] Depth 2/1000 time = 4.325721025466919
I0123 15:25:17.901811 140581834321920 ddar.py:60] Depth 3/1000 time = 3.943218231201172
I0123 15:25:21.995520 140581834321920 ddar.py:60] Depth 4/1000 time = 4.0738630294799805
I0123 15:25:26.122415 140581834321920 ddar.py:60] Depth 5/1000 time = 4.12662672996521
I0123 15:25:26.126526 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:25:26.126623 140581834321920 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : D e i i m 15 ; x00
I0123 15:25:30.880514 140581834321920 alphageometry.py:566] LM output (score=-0.850402): "n : D e i i n 16 ;"
I0123 15:25:30.880893 140581834321920 alphageometry.py:567] Translation: "n = on_circle n i e"

I0123 15:25:30.880963 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_circle n i e ? eqratio k j j l b f f a"
I0123 15:25:30.881145 140581834321920 graph.py:498] 
I0123 15:25:30.881213 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_circle n i e ? eqratio k j j l b f f a
I0123 15:25:34.864846 140581834321920 ddar.py:60] Depth 1/1000 time = 3.9185333251953125
I0123 15:25:40.965420 140581834321920 ddar.py:60] Depth 2/1000 time = 6.100320339202881
I0123 15:25:47.124633 140581834321920 ddar.py:60] Depth 3/1000 time = 6.15894627571106
I0123 15:25:53.592434 140581834321920 ddar.py:60] Depth 4/1000 time = 6.443589687347412
I0123 15:26:00.098937 140581834321920 ddar.py:60] Depth 5/1000 time = 6.506220579147339
I0123 15:26:00.103499 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:26:00.103558 140581834321920 alphageometry.py:566] LM output (score=-1.142879): "n : C e f n 16 D e n f n 17 ;"
I0123 15:26:00.103595 140581834321920 alphageometry.py:567] Translation: "n = on_line n e f, on_bline n f e"

I0123 15:26:00.103632 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_line n e f, on_bline n f e ? eqratio k j j l b f f a"
I0123 15:26:00.103799 140581834321920 graph.py:498] 
I0123 15:26:00.103851 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_line n e f, on_bline n f e ? eqratio k j j l b f f a
I0123 15:26:02.255949 140581834321920 ddar.py:60] Depth 1/1000 time = 2.0863170623779297
I0123 15:26:06.611622 140581834321920 ddar.py:60] Depth 2/1000 time = 4.355435371398926
I0123 15:26:10.932461 140581834321920 ddar.py:60] Depth 3/1000 time = 4.3205790519714355
I0123 15:26:16.174189 140581834321920 ddar.py:60] Depth 4/1000 time = 5.241236209869385
I0123 15:26:19.894644 140581834321920 ddar.py:60] Depth 5/1000 time = 3.700199604034424
I0123 15:26:25.345661 140581834321920 ddar.py:60] Depth 6/1000 time = 5.450749635696411
I0123 15:26:25.350459 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:26:25.350517 140581834321920 alphageometry.py:566] LM output (score=-1.662858): "n : D c g g n 16 ;"
I0123 15:26:25.350552 140581834321920 alphageometry.py:567] Translation: "n = on_circle n g c"

I0123 15:26:25.350588 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_circle n g c ? eqratio k j j l b f f a"
I0123 15:26:25.350750 140581834321920 graph.py:498] 
I0123 15:26:25.350802 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_circle n g c ? eqratio k j j l b f f a
I0123 15:26:27.956180 140581834321920 ddar.py:60] Depth 1/1000 time = 2.5478761196136475
I0123 15:26:32.934102 140581834321920 ddar.py:60] Depth 2/1000 time = 4.977676868438721
I0123 15:26:37.911296 140581834321920 ddar.py:60] Depth 3/1000 time = 4.976921081542969
I0123 15:26:43.151277 140581834321920 ddar.py:60] Depth 4/1000 time = 5.221020936965942
I0123 15:26:48.371534 140581834321920 ddar.py:60] Depth 5/1000 time = 5.21998929977417
I0123 15:26:48.376074 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:26:48.376149 140581834321920 alphageometry.py:566] LM output (score=-1.964618): "n : C e j n 16 D e n j n 17 ;"
I0123 15:26:48.376187 140581834321920 alphageometry.py:567] Translation: "n = on_line n e j, on_bline n j e"

I0123 15:26:48.376227 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_line n e j, on_bline n j e ? eqratio k j j l b f f a"
I0123 15:26:48.376391 140581834321920 graph.py:498] 
I0123 15:26:48.376444 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_line n e j, on_bline n j e ? eqratio k j j l b f f a
I0123 15:26:51.367411 140581834321920 ddar.py:60] Depth 1/1000 time = 2.9267778396606445
I0123 15:26:56.560144 140581834321920 ddar.py:60] Depth 2/1000 time = 5.1925048828125
I0123 15:27:00.863749 140581834321920 ddar.py:60] Depth 3/1000 time = 4.3033576011657715
I0123 15:27:05.173372 140581834321920 ddar.py:60] Depth 4/1000 time = 4.309147596359253
I0123 15:27:09.728829 140581834321920 ddar.py:60] Depth 5/1000 time = 4.535759449005127
I0123 15:27:14.306172 140581834321920 ddar.py:60] Depth 6/1000 time = 4.577082395553589
I0123 15:27:14.310620 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:27:14.310675 140581834321920 alphageometry.py:566] LM output (score=-2.029376): "n : C l m n 16 D l n m n 17 ;"
I0123 15:27:14.310734 140581834321920 alphageometry.py:567] Translation: "n = on_line n l m, on_bline n m l"

I0123 15:27:14.310772 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_line n l m, on_bline n m l ? eqratio k j j l b f f a"
I0123 15:27:14.310934 140581834321920 graph.py:498] 
I0123 15:27:14.310983 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_line n l m, on_bline n m l ? eqratio k j j l b f f a
I0123 15:27:17.284769 140581834321920 ddar.py:60] Depth 1/1000 time = 2.9098215103149414
I0123 15:27:22.255432 140581834321920 ddar.py:60] Depth 2/1000 time = 4.9704248905181885
I0123 15:27:26.577849 140581834321920 ddar.py:60] Depth 3/1000 time = 4.322168350219727
I0123 15:27:30.924211 140581834321920 ddar.py:60] Depth 4/1000 time = 4.3458778858184814
I0123 15:27:35.480794 140581834321920 ddar.py:60] Depth 5/1000 time = 4.536372184753418
I0123 15:27:40.019329 140581834321920 ddar.py:60] Depth 6/1000 time = 4.5382726192474365
I0123 15:27:40.023696 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:27:40.023752 140581834321920 alphageometry.py:566] LM output (score=-2.139302): "n : C e m n 16 D e n m n 17 ;"
I0123 15:27:40.023786 140581834321920 alphageometry.py:567] Translation: "n = on_line n e m, on_bline n m e"

I0123 15:27:40.023822 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_line n e m, on_bline n m e ? eqratio k j j l b f f a"
I0123 15:27:40.023982 140581834321920 graph.py:498] 
I0123 15:27:40.024033 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_line n e m, on_bline n m e ? eqratio k j j l b f f a
I0123 15:27:43.032738 140581834321920 ddar.py:60] Depth 1/1000 time = 2.944765567779541
I0123 15:27:47.808690 140581834321920 ddar.py:60] Depth 2/1000 time = 4.775717258453369
I0123 15:27:52.126952 140581834321920 ddar.py:60] Depth 3/1000 time = 4.318008184432983
I0123 15:27:55.544364 140581834321920 ddar.py:60] Depth 4/1000 time = 3.4169254302978516
I0123 15:28:00.946218 140581834321920 ddar.py:60] Depth 5/1000 time = 5.383214473724365
I0123 15:28:04.548956 140581834321920 ddar.py:60] Depth 6/1000 time = 3.602475881576538
I0123 15:28:04.553371 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:28:04.553429 140581834321920 alphageometry.py:566] LM output (score=-2.185815): "n : C e l n 16 D e n l n 17 ;"
I0123 15:28:04.553465 140581834321920 alphageometry.py:567] Translation: "n = on_line n e l, on_bline n l e"

I0123 15:28:04.553503 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_line n e l, on_bline n l e ? eqratio k j j l b f f a"
I0123 15:28:04.553677 140581834321920 graph.py:498] 
I0123 15:28:04.553731 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_line n e l, on_bline n l e ? eqratio k j j l b f f a
I0123 15:28:07.518121 140581834321920 ddar.py:60] Depth 1/1000 time = 2.899080991744995
I0123 15:28:12.090442 140581834321920 ddar.py:60] Depth 2/1000 time = 4.572085857391357
I0123 15:28:16.400168 140581834321920 ddar.py:60] Depth 3/1000 time = 4.309474229812622
I0123 15:28:21.672741 140581834321920 ddar.py:60] Depth 4/1000 time = 5.272065877914429
I0123 15:28:26.388814 140581834321920 ddar.py:60] Depth 5/1000 time = 4.692462921142578
I0123 15:28:31.050833 140581834321920 ddar.py:60] Depth 6/1000 time = 4.661754369735718
I0123 15:28:31.055213 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:28:31.055270 140581834321920 alphageometry.py:566] LM output (score=-2.231426): "n : D f i i n 16 ;"
I0123 15:28:31.055305 140581834321920 alphageometry.py:567] Translation: "n = on_circle n i f"

I0123 15:28:31.055343 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_circle n i f ? eqratio k j j l b f f a"
I0123 15:28:31.055504 140581834321920 graph.py:498] 
I0123 15:28:31.055556 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_circle n i f ? eqratio k j j l b f f a
I0123 15:28:33.607345 140581834321920 ddar.py:60] Depth 1/1000 time = 2.492995262145996
I0123 15:28:39.951918 140581834321920 ddar.py:60] Depth 2/1000 time = 6.344327926635742
I0123 15:28:46.055856 140581834321920 ddar.py:60] Depth 3/1000 time = 6.1036741733551025
I0123 15:28:52.500308 140581834321920 ddar.py:60] Depth 4/1000 time = 6.421234369277954
I0123 15:28:58.944666 140581834321920 ddar.py:60] Depth 5/1000 time = 6.444076776504517
I0123 15:28:58.949214 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:28:58.949279 140581834321920 alphageometry.py:566] LM output (score=-2.243115): "n : C f m n 16 D f n m n 17 ;"
I0123 15:28:58.949316 140581834321920 alphageometry.py:567] Translation: "n = on_line n f m, on_bline n m f"

I0123 15:28:58.949354 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_line n f m, on_bline n m f ? eqratio k j j l b f f a"
I0123 15:28:58.949524 140581834321920 graph.py:498] 
I0123 15:28:58.949577 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_line n f m, on_bline n m f ? eqratio k j j l b f f a
I0123 15:29:01.970079 140581834321920 ddar.py:60] Depth 1/1000 time = 2.956444501876831
I0123 15:29:06.307111 140581834321920 ddar.py:60] Depth 2/1000 time = 4.3367919921875
I0123 15:29:10.633707 140581834321920 ddar.py:60] Depth 3/1000 time = 4.326333045959473
I0123 15:29:14.985925 140581834321920 ddar.py:60] Depth 4/1000 time = 4.351726293563843
I0123 15:29:19.551966 140581834321920 ddar.py:60] Depth 5/1000 time = 4.547769069671631
I0123 15:29:24.041766 140581834321920 ddar.py:60] Depth 6/1000 time = 4.489529848098755
I0123 15:29:24.046240 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:29:24.046297 140581834321920 alphageometry.py:566] LM output (score=-2.255407): "n : D f h h n 16 ;"
I0123 15:29:24.046333 140581834321920 alphageometry.py:567] Translation: "n = on_circle n h f"

I0123 15:29:24.046369 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_circle n h f ? eqratio k j j l b f f a"
I0123 15:29:24.046528 140581834321920 graph.py:498] 
I0123 15:29:24.046579 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_circle n h f ? eqratio k j j l b f f a
I0123 15:29:27.631278 140581834321920 ddar.py:60] Depth 1/1000 time = 3.5275044441223145
I0123 15:29:31.981961 140581834321920 ddar.py:60] Depth 2/1000 time = 4.350444793701172
I0123 15:29:36.982703 140581834321920 ddar.py:60] Depth 3/1000 time = 5.00048041343689
I0123 15:29:42.215591 140581834321920 ddar.py:60] Depth 4/1000 time = 5.212666034698486
I0123 15:29:47.440891 140581834321920 ddar.py:60] Depth 5/1000 time = 5.22502875328064
I0123 15:29:47.445403 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:29:47.445461 140581834321920 alphageometry.py:566] LM output (score=-2.292896): "n : C e i n 16 D e i i n 17 ;"
I0123 15:29:47.445497 140581834321920 alphageometry.py:567] Translation: "n = on_line n e i, on_circle n i e"

I0123 15:29:47.445533 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_line n e i, on_circle n i e ? eqratio k j j l b f f a"
I0123 15:29:47.445720 140581834321920 graph.py:498] 
I0123 15:29:47.445784 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_line n e i, on_circle n i e ? eqratio k j j l b f f a
I0123 15:29:51.326050 140581834321920 ddar.py:60] Depth 1/1000 time = 3.8159146308898926
I0123 15:29:59.183438 140581834321920 ddar.py:60] Depth 2/1000 time = 7.85714316368103
I0123 15:30:07.038549 140581834321920 ddar.py:60] Depth 3/1000 time = 7.854851961135864
I0123 15:30:14.026452 140581834321920 ddar.py:60] Depth 4/1000 time = 6.987349987030029
I0123 15:30:21.704018 140581834321920 ddar.py:60] Depth 5/1000 time = 7.6328020095825195
I0123 15:30:29.388393 140581834321920 ddar.py:60] Depth 6/1000 time = 7.68408989906311
I0123 15:30:29.393028 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:30:29.393088 140581834321920 alphageometry.py:566] LM output (score=-2.393163): "n : C f i n 16 D f i i n 17 ;"
I0123 15:30:29.393122 140581834321920 alphageometry.py:567] Translation: "n = on_line n f i, on_circle n i f"

I0123 15:30:29.393161 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_line n f i, on_circle n i f ? eqratio k j j l b f f a"
I0123 15:30:29.393338 140581834321920 graph.py:498] 
I0123 15:30:29.393409 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_line n f i, on_circle n i f ? eqratio k j j l b f f a
I0123 15:30:32.036160 140581834321920 ddar.py:60] Depth 1/1000 time = 2.5763747692108154
I0123 15:30:41.131480 140581834321920 ddar.py:60] Depth 2/1000 time = 9.095091342926025
I0123 15:30:48.235316 140581834321920 ddar.py:60] Depth 3/1000 time = 7.103579044342041
I0123 15:30:55.312454 140581834321920 ddar.py:60] Depth 4/1000 time = 7.076634407043457
I0123 15:31:03.163903 140581834321920 ddar.py:60] Depth 5/1000 time = 7.804708957672119
I0123 15:31:11.062584 140581834321920 ddar.py:60] Depth 6/1000 time = 7.898411273956299
I0123 15:31:11.067199 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:31:11.067255 140581834321920 alphageometry.py:566] LM output (score=-2.448474): "n : C b f n 16 D b n f n 17 ;"
I0123 15:31:11.067290 140581834321920 alphageometry.py:567] Translation: "n = on_line n b f, on_bline n f b"

I0123 15:31:11.067329 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_line n b f, on_bline n f b ? eqratio k j j l b f f a"
I0123 15:31:11.067493 140581834321920 graph.py:498] 
I0123 15:31:11.067544 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_line n b f, on_bline n f b ? eqratio k j j l b f f a
I0123 15:31:14.267688 140581834321920 ddar.py:60] Depth 1/1000 time = 3.1342387199401855
I0123 15:31:19.528371 140581834321920 ddar.py:60] Depth 2/1000 time = 5.260443925857544
I0123 15:31:25.053878 140581834321920 ddar.py:60] Depth 3/1000 time = 5.5252485275268555
I0123 15:31:29.652592 140581834321920 ddar.py:60] Depth 4/1000 time = 4.598226308822632
I0123 15:31:34.589377 140581834321920 ddar.py:60] Depth 5/1000 time = 4.913893461227417
I0123 15:31:40.444988 140581834321920 ddar.py:60] Depth 6/1000 time = 5.855352163314819
I0123 15:31:40.449433 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:31:40.449492 140581834321920 alphageometry.py:566] LM output (score=-2.466812): "n : D e i i n 16 ^ e i e n n e n i 17 ;"
I0123 15:31:40.449526 140581834321920 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ e i e n n e n i"

I0123 15:31:40.449561 140581834321920 alphageometry.py:566] LM output (score=-2.484340): "n : D e g g n 16 ;"
I0123 15:31:40.449588 140581834321920 alphageometry.py:567] Translation: "n = on_circle n g e"

I0123 15:31:40.449617 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_circle n g e ? eqratio k j j l b f f a"
I0123 15:31:40.449792 140581834321920 graph.py:498] 
I0123 15:31:40.449852 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_circle n g e ? eqratio k j j l b f f a
I0123 15:31:43.051228 140581834321920 ddar.py:60] Depth 1/1000 time = 2.5437397956848145
I0123 15:31:48.090416 140581834321920 ddar.py:60] Depth 2/1000 time = 5.038945913314819
I0123 15:31:53.188375 140581834321920 ddar.py:60] Depth 3/1000 time = 5.097665071487427
I0123 15:31:58.584027 140581834321920 ddar.py:60] Depth 4/1000 time = 5.376408576965332
I0123 15:32:04.088274 140581834321920 ddar.py:60] Depth 5/1000 time = 5.503976583480835
I0123 15:32:04.092879 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:32:04.092938 140581834321920 alphageometry.py:566] LM output (score=-2.492030): "n : C d k n 16 D d n k n 17 ;"
I0123 15:32:04.092974 140581834321920 alphageometry.py:567] Translation: "n = on_line n d k, on_bline n k d"

I0123 15:32:04.093013 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_line n d k, on_bline n k d ? eqratio k j j l b f f a"
I0123 15:32:04.093205 140581834321920 graph.py:498] 
I0123 15:32:04.093257 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_line n d k, on_bline n k d ? eqratio k j j l b f f a
I0123 15:32:06.235474 140581834321920 ddar.py:60] Depth 1/1000 time = 2.0777711868286133
I0123 15:32:11.233350 140581834321920 ddar.py:60] Depth 2/1000 time = 4.997636556625366
I0123 15:32:15.582234 140581834321920 ddar.py:60] Depth 3/1000 time = 4.348626375198364
I0123 15:32:21.001290 140581834321920 ddar.py:60] Depth 4/1000 time = 5.418581962585449
I0123 15:32:24.729491 140581834321920 ddar.py:60] Depth 5/1000 time = 3.705944061279297
I0123 15:32:30.362597 140581834321920 ddar.py:60] Depth 6/1000 time = 5.632795572280884
I0123 15:32:30.367048 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:32:30.367114 140581834321920 alphageometry.py:566] LM output (score=-2.597849): "n : C e g n 16 D e g g n 17 ;"
I0123 15:32:30.367149 140581834321920 alphageometry.py:567] Translation: "n = on_line n e g, on_circle n g e"

I0123 15:32:30.367185 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_line n e g, on_circle n g e ? eqratio k j j l b f f a"
I0123 15:32:30.367362 140581834321920 graph.py:498] 
I0123 15:32:30.367423 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_line n e g, on_circle n g e ? eqratio k j j l b f f a
I0123 15:32:33.016871 140581834321920 ddar.py:60] Depth 1/1000 time = 2.5902318954467773
I0123 15:32:38.498885 140581834321920 ddar.py:60] Depth 2/1000 time = 5.481773138046265
I0123 15:32:44.032597 140581834321920 ddar.py:60] Depth 3/1000 time = 5.5334367752075195
I0123 15:32:49.584730 140581834321920 ddar.py:60] Depth 4/1000 time = 5.551804065704346
I0123 15:32:56.081353 140581834321920 ddar.py:60] Depth 5/1000 time = 6.4960973262786865
I0123 15:33:02.118992 140581834321920 ddar.py:60] Depth 6/1000 time = 6.004615783691406
I0123 15:33:08.159494 140581834321920 ddar.py:60] Depth 7/1000 time = 6.040221452713013
I0123 15:33:08.163873 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:33:08.163939 140581834321920 alphageometry.py:566] LM output (score=-2.902669): "n : D i m i n 16 ;"
I0123 15:33:08.163974 140581834321920 alphageometry.py:567] Translation: "n = on_circle n i m"

I0123 15:33:08.164011 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_circle n i m ? eqratio k j j l b f f a"
I0123 15:33:08.164193 140581834321920 graph.py:498] 
I0123 15:33:08.164245 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_circle n i m ? eqratio k j j l b f f a
I0123 15:33:10.751489 140581834321920 ddar.py:60] Depth 1/1000 time = 2.5250637531280518
I0123 15:33:16.968031 140581834321920 ddar.py:60] Depth 2/1000 time = 6.216329336166382
I0123 15:33:23.138486 140581834321920 ddar.py:60] Depth 3/1000 time = 6.17018723487854
I0123 15:33:29.627526 140581834321920 ddar.py:60] Depth 4/1000 time = 6.465472459793091
I0123 15:33:36.142378 140581834321920 ddar.py:60] Depth 5/1000 time = 6.5145933628082275
I0123 15:33:36.146884 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:33:36.146941 140581834321920 alphageometry.py:566] LM output (score=-2.936537): "n : D d g g n 16 ;"
I0123 15:33:36.146975 140581834321920 alphageometry.py:567] Translation: "n = on_circle n g d"

I0123 15:33:36.147014 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_circle n g d ? eqratio k j j l b f f a"
I0123 15:33:36.147179 140581834321920 graph.py:498] 
I0123 15:33:36.147230 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_circle n g d ? eqratio k j j l b f f a
I0123 15:33:38.462435 140581834321920 ddar.py:60] Depth 1/1000 time = 2.2571322917938232
I0123 15:33:43.441896 140581834321920 ddar.py:60] Depth 2/1000 time = 4.979218482971191
I0123 15:33:48.486033 140581834321920 ddar.py:60] Depth 3/1000 time = 5.043875217437744
I0123 15:33:53.790259 140581834321920 ddar.py:60] Depth 4/1000 time = 5.286473751068115
I0123 15:33:59.087435 140581834321920 ddar.py:60] Depth 5/1000 time = 5.296895503997803
I0123 15:33:59.091915 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:33:59.091974 140581834321920 alphageometry.py:566] LM output (score=-2.978875): "n : D g j g n 16 ;"
I0123 15:33:59.092009 140581834321920 alphageometry.py:567] Translation: "n = on_circle n g j"

I0123 15:33:59.092047 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_circle n g j ? eqratio k j j l b f f a"
I0123 15:33:59.092210 140581834321920 graph.py:498] 
I0123 15:33:59.092261 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_circle n g j ? eqratio k j j l b f f a
I0123 15:34:02.412947 140581834321920 ddar.py:60] Depth 1/1000 time = 3.2635107040405273
I0123 15:34:07.390606 140581834321920 ddar.py:60] Depth 2/1000 time = 4.977412939071655
I0123 15:34:12.428735 140581834321920 ddar.py:60] Depth 3/1000 time = 5.037869215011597
I0123 15:34:17.700115 140581834321920 ddar.py:60] Depth 4/1000 time = 5.252503395080566
I0123 15:34:22.967375 140581834321920 ddar.py:60] Depth 5/1000 time = 5.266982793807983
I0123 15:34:22.971916 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:34:22.971995 140581834321920 alphageometry.py:566] LM output (score=-3.137312): "n : T c f i n 16 ;"
I0123 15:34:22.972030 140581834321920 alphageometry.py:567] Translation: "n = on_tline n i c f"

I0123 15:34:22.972068 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_tline n i c f ? eqratio k j j l b f f a"
I0123 15:34:22.972233 140581834321920 graph.py:498] 
I0123 15:34:22.972284 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_tline n i c f ? eqratio k j j l b f f a
I0123 15:34:25.856456 140581834321920 ddar.py:60] Depth 1/1000 time = 2.8349103927612305
I0123 15:34:30.164992 140581834321920 ddar.py:60] Depth 2/1000 time = 4.308303594589233
I0123 15:34:33.218375 140581834321920 ddar.py:60] Depth 3/1000 time = 3.0531318187713623
I0123 15:34:37.665178 140581834321920 ddar.py:60] Depth 4/1000 time = 4.420670747756958
I0123 15:34:42.375300 140581834321920 ddar.py:60] Depth 5/1000 time = 4.709862232208252
I0123 15:34:47.161719 140581834321920 ddar.py:60] Depth 6/1000 time = 4.786118984222412
I0123 15:34:52.041601 140581834321920 ddar.py:60] Depth 7/1000 time = 4.870237588882446
I0123 15:34:52.041913 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:34:52.042163 140581834321920 alphageometry.py:566] LM output (score=-3.149875): "n : D c g g n 16 ^ c g c n n c n g 17 ;"
I0123 15:34:52.042199 140581834321920 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ c g c n n c n g"

I0123 15:34:52.042234 140581834321920 alphageometry.py:566] LM output (score=-3.158782): "n : D i l i n 16 ;"
I0123 15:34:52.042262 140581834321920 alphageometry.py:567] Translation: "n = on_circle n i l"

I0123 15:34:52.042292 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_circle n i l ? eqratio k j j l b f f a"
I0123 15:34:52.042453 140581834321920 graph.py:498] 
I0123 15:34:52.042504 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_circle n i l ? eqratio k j j l b f f a
I0123 15:34:55.046242 140581834321920 ddar.py:60] Depth 1/1000 time = 2.938229560852051
I0123 15:35:02.265076 140581834321920 ddar.py:60] Depth 2/1000 time = 7.218583345413208
I0123 15:35:08.512873 140581834321920 ddar.py:60] Depth 3/1000 time = 6.247535705566406
I0123 15:35:15.053252 140581834321920 ddar.py:60] Depth 4/1000 time = 6.516161680221558
I0123 15:35:21.546325 140581834321920 ddar.py:60] Depth 5/1000 time = 6.492767333984375
I0123 15:35:21.550830 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:35:21.550888 140581834321920 alphageometry.py:566] LM output (score=-3.223999): "n : D i l i n 16 ^ l i l n i n i l 17 ;"
I0123 15:35:21.550924 140581834321920 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ l i l n i n i l"

I0123 15:35:21.550961 140581834321920 alphageometry.py:566] LM output (score=-3.308746): "n : T e f e n 16 ;"
I0123 15:35:21.551014 140581834321920 alphageometry.py:567] Translation: "n = on_tline n e e f"

I0123 15:35:21.551046 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_tline n e e f ? eqratio k j j l b f f a"
I0123 15:35:21.551214 140581834321920 graph.py:498] 
I0123 15:35:21.551279 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_tline n e e f ? eqratio k j j l b f f a
I0123 15:35:24.432883 140581834321920 ddar.py:60] Depth 1/1000 time = 2.832583427429199
I0123 15:35:28.903980 140581834321920 ddar.py:60] Depth 2/1000 time = 4.470841884613037
I0123 15:35:31.978692 140581834321920 ddar.py:60] Depth 3/1000 time = 3.074432849884033
I0123 15:35:36.349122 140581834321920 ddar.py:60] Depth 4/1000 time = 4.349051237106323
I0123 15:35:40.703326 140581834321920 ddar.py:60] Depth 5/1000 time = 4.353931665420532
I0123 15:35:40.707429 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:35:40.707504 140581834321920 alphageometry.py:566] LM output (score=-3.365694): "n : P e i f n 16 ;"
I0123 15:35:40.707540 140581834321920 alphageometry.py:567] Translation: "n = on_pline n f e i"

I0123 15:35:40.707576 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_pline n f e i ? eqratio k j j l b f f a"
I0123 15:35:40.707736 140581834321920 graph.py:498] 
I0123 15:35:40.707786 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_pline n f e i ? eqratio k j j l b f f a
I0123 15:35:43.691614 140581834321920 ddar.py:60] Depth 1/1000 time = 2.933277130126953
I0123 15:35:46.900702 140581834321920 ddar.py:60] Depth 2/1000 time = 3.208850622177124
I0123 15:35:50.847861 140581834321920 ddar.py:60] Depth 3/1000 time = 3.946904420852661
I0123 15:35:54.995075 140581834321920 ddar.py:60] Depth 4/1000 time = 4.129788637161255
I0123 15:35:59.166408 140581834321920 ddar.py:60] Depth 5/1000 time = 4.171066045761108
I0123 15:35:59.170432 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:35:59.170489 140581834321920 alphageometry.py:566] LM output (score=-3.365798): "n : T e f f n 16 ;"
I0123 15:35:59.170523 140581834321920 alphageometry.py:567] Translation: "n = on_tline n f e f"

I0123 15:35:59.170561 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_tline n f e f ? eqratio k j j l b f f a"
I0123 15:35:59.170725 140581834321920 graph.py:498] 
I0123 15:35:59.170778 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_tline n f e f ? eqratio k j j l b f f a
I0123 15:36:01.106760 140581834321920 ddar.py:60] Depth 1/1000 time = 1.8864390850067139
I0123 15:36:05.568679 140581834321920 ddar.py:60] Depth 2/1000 time = 4.461662769317627
I0123 15:36:09.666104 140581834321920 ddar.py:60] Depth 3/1000 time = 4.097192287445068
I0123 15:36:13.046184 140581834321920 ddar.py:60] Depth 4/1000 time = 3.358267307281494
I0123 15:36:17.322053 140581834321920 ddar.py:60] Depth 5/1000 time = 4.275596857070923
I0123 15:36:17.325973 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:36:17.326030 140581834321920 alphageometry.py:566] LM output (score=-3.437470): "n : T c f f n 16 ;"
I0123 15:36:17.326067 140581834321920 alphageometry.py:567] Translation: "n = on_tline n f c f"

I0123 15:36:17.326104 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_tline n f c f ? eqratio k j j l b f f a"
I0123 15:36:17.326270 140581834321920 graph.py:498] 
I0123 15:36:17.326322 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_tline n f c f ? eqratio k j j l b f f a
I0123 15:36:20.183869 140581834321920 ddar.py:60] Depth 1/1000 time = 2.8079938888549805
I0123 15:36:24.463462 140581834321920 ddar.py:60] Depth 2/1000 time = 4.27934718132019
I0123 15:36:27.521692 140581834321920 ddar.py:60] Depth 3/1000 time = 3.057941436767578
I0123 15:36:31.919946 140581834321920 ddar.py:60] Depth 4/1000 time = 4.372377395629883
I0123 15:36:36.336238 140581834321920 ddar.py:60] Depth 5/1000 time = 4.416032552719116
I0123 15:36:36.340327 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:36:36.340384 140581834321920 alphageometry.py:566] LM output (score=-3.452711): "n : T c k i n 16 ;"
I0123 15:36:36.340420 140581834321920 alphageometry.py:567] Translation: "n = on_tline n i c k"

I0123 15:36:36.340457 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_tline n i c k ? eqratio k j j l b f f a"
I0123 15:36:36.340623 140581834321920 graph.py:498] 
I0123 15:36:36.340676 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_tline n i c k ? eqratio k j j l b f f a
I0123 15:36:38.285042 140581834321920 ddar.py:60] Depth 1/1000 time = 1.8943088054656982
I0123 15:36:42.761917 140581834321920 ddar.py:60] Depth 2/1000 time = 4.47662878036499
I0123 15:36:46.834106 140581834321920 ddar.py:60] Depth 3/1000 time = 4.071937561035156
I0123 15:36:51.324718 140581834321920 ddar.py:60] Depth 4/1000 time = 4.464323997497559
I0123 15:36:55.082938 140581834321920 ddar.py:60] Depth 5/1000 time = 3.7579689025878906
I0123 15:36:59.779620 140581834321920 ddar.py:60] Depth 6/1000 time = 4.6963725090026855
I0123 15:37:04.567673 140581834321920 ddar.py:60] Depth 7/1000 time = 4.778342962265015
I0123 15:37:04.567991 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:37:04.568043 140581834321920 alphageometry.py:566] LM output (score=-3.455340): "n : D e i i n 16 D e m m n 17 ;"
I0123 15:37:04.568080 140581834321920 alphageometry.py:567] Translation: "n = on_circle n i e, on_circle n m e"

I0123 15:37:04.568122 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_circle n i e, on_circle n m e ? eqratio k j j l b f f a"
I0123 15:37:04.568325 140581834321920 graph.py:498] 
I0123 15:37:04.568380 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_circle n i e, on_circle n m e ? eqratio k j j l b f f a
I0123 15:37:08.772062 140581834321920 ddar.py:60] Depth 1/1000 time = 4.126450538635254
I0123 15:37:15.484113 140581834321920 ddar.py:60] Depth 2/1000 time = 6.711789608001709
I0123 15:37:22.323704 140581834321920 ddar.py:60] Depth 3/1000 time = 6.839299440383911
I0123 15:37:28.562909 140581834321920 ddar.py:60] Depth 4/1000 time = 6.201272964477539
I0123 15:37:35.758283 140581834321920 ddar.py:60] Depth 5/1000 time = 7.195087671279907
I0123 15:37:35.763327 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:37:35.763397 140581834321920 alphageometry.py:566] LM output (score=-3.489315): "n : P a b c n 16 ;"
I0123 15:37:35.763434 140581834321920 alphageometry.py:567] Translation: "n = on_pline n c a b"

I0123 15:37:35.763473 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_pline n c a b ? eqratio k j j l b f f a"
I0123 15:37:35.763636 140581834321920 graph.py:498] 
I0123 15:37:35.763689 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_pline n c a b ? eqratio k j j l b f f a
I0123 15:37:38.741178 140581834321920 ddar.py:60] Depth 1/1000 time = 2.927474021911621
I0123 15:37:43.659149 140581834321920 ddar.py:60] Depth 2/1000 time = 4.917715072631836
I0123 15:37:47.787294 140581834321920 ddar.py:60] Depth 3/1000 time = 4.127872943878174
I0123 15:37:51.038776 140581834321920 ddar.py:60] Depth 4/1000 time = 3.2323203086853027
I0123 15:37:55.250794 140581834321920 ddar.py:60] Depth 5/1000 time = 4.211724042892456
I0123 15:37:55.254865 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:37:55.254953 140581834321920 alphageometry.py:566] LM output (score=-3.520744): "n : T e f i n 16 ;"
I0123 15:37:55.254991 140581834321920 alphageometry.py:567] Translation: "n = on_tline n i e f"

I0123 15:37:55.255032 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_tline n i e f ? eqratio k j j l b f f a"
I0123 15:37:55.255204 140581834321920 graph.py:498] 
I0123 15:37:55.255265 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m i e; n = on_tline n i e f ? eqratio k j j l b f f a
I0123 15:37:58.198014 140581834321920 ddar.py:60] Depth 1/1000 time = 2.893726348876953
I0123 15:38:02.932580 140581834321920 ddar.py:60] Depth 2/1000 time = 4.734312295913696
I0123 15:38:06.021029 140581834321920 ddar.py:60] Depth 3/1000 time = 3.0881705284118652
I0123 15:38:10.411372 140581834321920 ddar.py:60] Depth 4/1000 time = 4.369596004486084
I0123 15:38:15.148467 140581834321920 ddar.py:60] Depth 5/1000 time = 4.736812114715576
I0123 15:38:19.893690 140581834321920 ddar.py:60] Depth 6/1000 time = 4.744896411895752
I0123 15:38:19.900178 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:38:19.900247 140581834321920 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : C e f m 15 D e m f m 16 ; x00
I0123 15:38:24.717536 140581834321920 alphageometry.py:566] LM output (score=-1.140940): "n : C e j n 17 D e n j n 18 ;"
I0123 15:38:24.718107 140581834321920 alphageometry.py:567] Translation: "n = on_line n e j, on_bline n j e"

I0123 15:38:24.718170 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n e j, on_bline n j e ? eqratio k j j l b f f a"
I0123 15:38:24.718353 140581834321920 graph.py:498] 
I0123 15:38:24.718417 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n e j, on_bline n j e ? eqratio k j j l b f f a
I0123 15:38:26.494862 140581834321920 ddar.py:60] Depth 1/1000 time = 1.7054240703582764
I0123 15:38:31.998974 140581834321920 ddar.py:60] Depth 2/1000 time = 5.503857135772705
I0123 15:38:35.032090 140581834321920 ddar.py:60] Depth 3/1000 time = 3.0328259468078613
I0123 15:38:40.111139 140581834321920 ddar.py:60] Depth 4/1000 time = 5.0784971714019775
I0123 15:38:44.429523 140581834321920 ddar.py:60] Depth 5/1000 time = 4.293369293212891
I0123 15:38:47.658373 140581834321920 ddar.py:60] Depth 6/1000 time = 3.2285654544830322
I0123 15:38:47.664076 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:38:47.664157 140581834321920 alphageometry.py:566] LM output (score=-1.302071): "n : C e i n 17 D e n i n 18 ;"
I0123 15:38:47.664195 140581834321920 alphageometry.py:567] Translation: "n = on_line n e i, on_bline n i e"

I0123 15:38:47.664238 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n e i, on_bline n i e ? eqratio k j j l b f f a"
I0123 15:38:47.664412 140581834321920 graph.py:498] 
I0123 15:38:47.664469 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n e i, on_bline n i e ? eqratio k j j l b f f a
I0123 15:38:50.338714 140581834321920 ddar.py:60] Depth 1/1000 time = 2.603510618209839
I0123 15:38:54.426497 140581834321920 ddar.py:60] Depth 2/1000 time = 4.087510347366333
I0123 15:38:58.268190 140581834321920 ddar.py:60] Depth 3/1000 time = 3.8414227962493896
I0123 15:39:02.111274 140581834321920 ddar.py:60] Depth 4/1000 time = 3.842620372772217
I0123 15:39:06.150514 140581834321920 ddar.py:60] Depth 5/1000 time = 4.021971702575684
I0123 15:39:10.178665 140581834321920 ddar.py:60] Depth 6/1000 time = 4.027867794036865
I0123 15:39:10.184413 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:39:10.184476 140581834321920 alphageometry.py:566] LM output (score=-1.315789): "n : C e g n 17 D e g g n 18 ;"
I0123 15:39:10.184514 140581834321920 alphageometry.py:567] Translation: "n = on_line n e g, on_circle n g e"

I0123 15:39:10.184556 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n e g, on_circle n g e ? eqratio k j j l b f f a"
I0123 15:39:10.184728 140581834321920 graph.py:498] 
I0123 15:39:10.184785 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n e g, on_circle n g e ? eqratio k j j l b f f a
I0123 15:39:13.527867 140581834321920 ddar.py:60] Depth 1/1000 time = 3.278057336807251
I0123 15:39:18.888176 140581834321920 ddar.py:60] Depth 2/1000 time = 5.360062122344971
I0123 15:39:24.039129 140581834321920 ddar.py:60] Depth 3/1000 time = 5.15069580078125
I0123 15:39:29.256528 140581834321920 ddar.py:60] Depth 4/1000 time = 5.217082262039185
I0123 15:39:34.446851 140581834321920 ddar.py:60] Depth 5/1000 time = 5.189788103103638
I0123 15:39:39.999933 140581834321920 ddar.py:60] Depth 6/1000 time = 5.51717734336853
I0123 15:39:45.451901 140581834321920 ddar.py:60] Depth 7/1000 time = 5.451691627502441
I0123 15:39:45.457970 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:39:45.458030 140581834321920 alphageometry.py:566] LM output (score=-1.485730): "n : C f g n 17 D f n g n 18 ;"
I0123 15:39:45.458070 140581834321920 alphageometry.py:567] Translation: "n = on_line n f g, on_bline n g f"

I0123 15:39:45.458108 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n f g, on_bline n g f ? eqratio k j j l b f f a"
I0123 15:39:45.458279 140581834321920 graph.py:498] 
I0123 15:39:45.458335 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n f g, on_bline n g f ? eqratio k j j l b f f a
I0123 15:39:48.261738 140581834321920 ddar.py:60] Depth 1/1000 time = 2.731870174407959
I0123 15:39:52.425562 140581834321920 ddar.py:60] Depth 2/1000 time = 4.163572549819946
I0123 15:39:55.084576 140581834321920 ddar.py:60] Depth 3/1000 time = 2.6587300300598145
I0123 15:39:58.712332 140581834321920 ddar.py:60] Depth 4/1000 time = 3.6272528171539307
I0123 15:40:02.521622 140581834321920 ddar.py:60] Depth 5/1000 time = 3.792468309402466
I0123 15:40:06.275448 140581834321920 ddar.py:60] Depth 6/1000 time = 3.753500461578369
I0123 15:40:06.281135 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:40:06.281201 140581834321920 alphageometry.py:566] LM output (score=-1.630056): "n : C e i n 17 D e i i n 18 ;"
I0123 15:40:06.281239 140581834321920 alphageometry.py:567] Translation: "n = on_line n e i, on_circle n i e"

I0123 15:40:06.281283 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n e i, on_circle n i e ? eqratio k j j l b f f a"
I0123 15:40:06.281496 140581834321920 graph.py:498] 
I0123 15:40:06.281557 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n e i, on_circle n i e ? eqratio k j j l b f f a
I0123 15:40:09.497375 140581834321920 ddar.py:60] Depth 1/1000 time = 3.1512467861175537
I0123 15:40:14.968511 140581834321920 ddar.py:60] Depth 2/1000 time = 5.470881462097168
I0123 15:40:19.780314 140581834321920 ddar.py:60] Depth 3/1000 time = 4.8115234375
I0123 15:40:24.561999 140581834321920 ddar.py:60] Depth 4/1000 time = 4.781163930892944
I0123 15:40:29.721507 140581834321920 ddar.py:60] Depth 5/1000 time = 5.128680229187012
I0123 15:40:34.842025 140581834321920 ddar.py:60] Depth 6/1000 time = 5.120213270187378
I0123 15:40:34.848062 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:40:34.848125 140581834321920 alphageometry.py:566] LM output (score=-1.652588): "n : C f i n 17 D f n i n 18 ;"
I0123 15:40:34.848163 140581834321920 alphageometry.py:567] Translation: "n = on_line n f i, on_bline n i f"

I0123 15:40:34.848204 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n f i, on_bline n i f ? eqratio k j j l b f f a"
I0123 15:40:34.848375 140581834321920 graph.py:498] 
I0123 15:40:34.848433 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n f i, on_bline n i f ? eqratio k j j l b f f a
I0123 15:40:37.570805 140581834321920 ddar.py:60] Depth 1/1000 time = 2.6526572704315186
I0123 15:40:41.491726 140581834321920 ddar.py:60] Depth 2/1000 time = 3.920673370361328
I0123 15:40:45.355484 140581834321920 ddar.py:60] Depth 3/1000 time = 3.863492488861084
I0123 15:40:49.232620 140581834321920 ddar.py:60] Depth 4/1000 time = 3.8766603469848633
I0123 15:40:53.279704 140581834321920 ddar.py:60] Depth 5/1000 time = 4.030095815658569
I0123 15:40:57.322928 140581834321920 ddar.py:60] Depth 6/1000 time = 4.042941331863403
I0123 15:40:57.328645 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:40:57.328707 140581834321920 alphageometry.py:566] LM output (score=-1.760781): "n : C e l n 17 D e n l n 18 ;"
I0123 15:40:57.328744 140581834321920 alphageometry.py:567] Translation: "n = on_line n e l, on_bline n l e"

I0123 15:40:57.328784 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n e l, on_bline n l e ? eqratio k j j l b f f a"
I0123 15:40:57.328953 140581834321920 graph.py:498] 
I0123 15:40:57.329009 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n e l, on_bline n l e ? eqratio k j j l b f f a
I0123 15:41:00.158103 140581834321920 ddar.py:60] Depth 1/1000 time = 2.7596850395202637
I0123 15:41:04.563467 140581834321920 ddar.py:60] Depth 2/1000 time = 4.405111789703369
I0123 15:41:08.770890 140581834321920 ddar.py:60] Depth 3/1000 time = 4.2071497440338135
I0123 15:41:12.953721 140581834321920 ddar.py:60] Depth 4/1000 time = 4.182285785675049
I0123 15:41:17.429009 140581834321920 ddar.py:60] Depth 5/1000 time = 4.44874906539917
I0123 15:41:21.831758 140581834321920 ddar.py:60] Depth 6/1000 time = 4.402462720870972
I0123 15:41:21.837100 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:41:21.837166 140581834321920 alphageometry.py:566] LM output (score=-1.938706): "n : D e g g n 17 ;"
I0123 15:41:21.837207 140581834321920 alphageometry.py:567] Translation: "n = on_circle n g e"

I0123 15:41:21.837248 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_circle n g e ? eqratio k j j l b f f a"
I0123 15:41:21.837419 140581834321920 graph.py:498] 
I0123 15:41:21.837475 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_circle n g e ? eqratio k j j l b f f a
I0123 15:41:24.059360 140581834321920 ddar.py:60] Depth 1/1000 time = 2.1572604179382324
I0123 15:41:28.495865 140581834321920 ddar.py:60] Depth 2/1000 time = 4.43625283241272
I0123 15:41:32.959738 140581834321920 ddar.py:60] Depth 3/1000 time = 4.463602304458618
I0123 15:41:37.379823 140581834321920 ddar.py:60] Depth 4/1000 time = 4.419572353363037
I0123 15:41:42.061207 140581834321920 ddar.py:60] Depth 5/1000 time = 4.663345813751221
I0123 15:41:46.752965 140581834321920 ddar.py:60] Depth 6/1000 time = 4.691461801528931
I0123 15:41:46.757452 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:41:46.757517 140581834321920 alphageometry.py:566] LM output (score=-1.952180): "n : C e k n 17 D e n k n 18 ;"
I0123 15:41:46.757555 140581834321920 alphageometry.py:567] Translation: "n = on_line n e k, on_bline n k e"

I0123 15:41:46.757596 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n e k, on_bline n k e ? eqratio k j j l b f f a"
I0123 15:41:46.757782 140581834321920 graph.py:498] 
I0123 15:41:46.757841 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n e k, on_bline n k e ? eqratio k j j l b f f a
I0123 15:41:48.516561 140581834321920 ddar.py:60] Depth 1/1000 time = 1.6888763904571533
I0123 15:41:52.587208 140581834321920 ddar.py:60] Depth 2/1000 time = 4.070389747619629
I0123 15:41:56.404917 140581834321920 ddar.py:60] Depth 3/1000 time = 3.817436933517456
I0123 15:42:00.226194 140581834321920 ddar.py:60] Depth 4/1000 time = 3.8207569122314453
I0123 15:42:04.243277 140581834321920 ddar.py:60] Depth 5/1000 time = 3.9972968101501465
I0123 15:42:08.240423 140581834321920 ddar.py:60] Depth 6/1000 time = 3.9968626499176025
I0123 15:42:08.246000 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:42:08.246084 140581834321920 alphageometry.py:566] LM output (score=-2.033079): "n : C e h n 17 D e n h n 18 ;"
I0123 15:42:08.246168 140581834321920 alphageometry.py:567] Translation: "n = on_line n e h, on_bline n h e"

I0123 15:42:08.246212 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n e h, on_bline n h e ? eqratio k j j l b f f a"
I0123 15:42:08.246385 140581834321920 graph.py:498] 
I0123 15:42:08.246442 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n e h, on_bline n h e ? eqratio k j j l b f f a
I0123 15:42:11.045277 140581834321920 ddar.py:60] Depth 1/1000 time = 2.7287955284118652
I0123 15:42:15.195045 140581834321920 ddar.py:60] Depth 2/1000 time = 4.149510145187378
I0123 15:42:18.930233 140581834321920 ddar.py:60] Depth 3/1000 time = 3.73490834236145
I0123 15:42:22.649675 140581834321920 ddar.py:60] Depth 4/1000 time = 3.7189126014709473
I0123 15:42:26.584970 140581834321920 ddar.py:60] Depth 5/1000 time = 3.9187278747558594
I0123 15:42:30.486512 140581834321920 ddar.py:60] Depth 6/1000 time = 3.9012482166290283
I0123 15:42:30.492036 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:42:30.492102 140581834321920 alphageometry.py:566] LM output (score=-2.036212): "n : C d e n 17 D d n e n 18 ;"
I0123 15:42:30.492139 140581834321920 alphageometry.py:567] Translation: "n = on_line n d e, on_bline n e d"

I0123 15:42:30.492180 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n d e, on_bline n e d ? eqratio k j j l b f f a"
I0123 15:42:30.492350 140581834321920 graph.py:498] 
I0123 15:42:30.492407 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n d e, on_bline n e d ? eqratio k j j l b f f a
I0123 15:42:32.289099 140581834321920 ddar.py:60] Depth 1/1000 time = 1.7266037464141846
I0123 15:42:36.432027 140581834321920 ddar.py:60] Depth 2/1000 time = 4.142676591873169
I0123 15:42:40.375329 140581834321920 ddar.py:60] Depth 3/1000 time = 3.9430272579193115
I0123 15:42:44.302325 140581834321920 ddar.py:60] Depth 4/1000 time = 3.9264779090881348
I0123 15:42:48.439490 140581834321920 ddar.py:60] Depth 5/1000 time = 4.116339445114136
I0123 15:42:52.542488 140581834321920 ddar.py:60] Depth 6/1000 time = 4.10270619392395
I0123 15:42:52.547827 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:42:52.547890 140581834321920 alphageometry.py:566] LM output (score=-2.080575): "n : C d f n 17 D d n f n 18 ;"
I0123 15:42:52.547928 140581834321920 alphageometry.py:567] Translation: "n = on_line n d f, on_bline n f d"

I0123 15:42:52.547969 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n d f, on_bline n f d ? eqratio k j j l b f f a"
I0123 15:42:52.548142 140581834321920 graph.py:498] 
I0123 15:42:52.548200 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n d f, on_bline n f d ? eqratio k j j l b f f a
I0123 15:42:55.399373 140581834321920 ddar.py:60] Depth 1/1000 time = 2.78059720993042
I0123 15:42:59.593551 140581834321920 ddar.py:60] Depth 2/1000 time = 4.193922758102417
I0123 15:43:02.448579 140581834321920 ddar.py:60] Depth 3/1000 time = 2.854721784591675
I0123 15:43:06.323995 140581834321920 ddar.py:60] Depth 4/1000 time = 3.8748931884765625
I0123 15:43:10.398051 140581834321920 ddar.py:60] Depth 5/1000 time = 4.053283452987671
I0123 15:43:14.463937 140581834321920 ddar.py:60] Depth 6/1000 time = 4.065608263015747
I0123 15:43:14.468976 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:43:14.469040 140581834321920 alphageometry.py:566] LM output (score=-2.117147): "n : C f j n 17 D f n j n 18 ;"
I0123 15:43:14.469077 140581834321920 alphageometry.py:567] Translation: "n = on_line n f j, on_bline n j f"

I0123 15:43:14.469117 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n f j, on_bline n j f ? eqratio k j j l b f f a"
I0123 15:43:14.469288 140581834321920 graph.py:498] 
I0123 15:43:14.469344 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n f j, on_bline n j f ? eqratio k j j l b f f a
I0123 15:43:18.701860 140581834321920 ddar.py:60] Depth 1/1000 time = 4.161074638366699
I0123 15:43:23.023617 140581834321920 ddar.py:60] Depth 2/1000 time = 4.321493148803711
I0123 15:43:28.462118 140581834321920 ddar.py:60] Depth 3/1000 time = 5.438226938247681
I0123 15:43:32.808293 140581834321920 ddar.py:60] Depth 4/1000 time = 4.345638036727905
I0123 15:43:38.362575 140581834321920 ddar.py:60] Depth 5/1000 time = 5.5368382930755615
I0123 15:43:42.833041 140581834321920 ddar.py:60] Depth 6/1000 time = 4.470194339752197
I0123 15:43:42.838521 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:43:42.838585 140581834321920 alphageometry.py:566] LM output (score=-2.171222): "n : C c e n 17 D c n e n 18 ;"
I0123 15:43:42.838623 140581834321920 alphageometry.py:567] Translation: "n = on_line n c e, on_bline n e c"

I0123 15:43:42.838665 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n c e, on_bline n e c ? eqratio k j j l b f f a"
I0123 15:43:42.838837 140581834321920 graph.py:498] 
I0123 15:43:42.838895 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n c e, on_bline n e c ? eqratio k j j l b f f a
I0123 15:43:45.835625 140581834321920 ddar.py:60] Depth 1/1000 time = 2.92592716217041
I0123 15:43:51.514483 140581834321920 ddar.py:60] Depth 2/1000 time = 5.6786041259765625
I0123 15:43:55.969946 140581834321920 ddar.py:60] Depth 3/1000 time = 4.455188512802124
I0123 15:44:01.543562 140581834321920 ddar.py:60] Depth 4/1000 time = 5.573304653167725
I0123 15:44:06.028473 140581834321920 ddar.py:60] Depth 5/1000 time = 4.4843621253967285
I0123 15:44:10.688417 140581834321920 ddar.py:60] Depth 6/1000 time = 4.634050607681274
I0123 15:44:15.266543 140581834321920 ddar.py:60] Depth 7/1000 time = 4.577850103378296
I0123 15:44:15.272387 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:44:15.272465 140581834321920 alphageometry.py:566] LM output (score=-2.203961): "n : C f g n 17 D f g g n 18 ;"
I0123 15:44:15.272506 140581834321920 alphageometry.py:567] Translation: "n = on_line n f g, on_circle n g f"

I0123 15:44:15.272546 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n f g, on_circle n g f ? eqratio k j j l b f f a"
I0123 15:44:15.272714 140581834321920 graph.py:498] 
I0123 15:44:15.272771 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n f g, on_circle n g f ? eqratio k j j l b f f a
I0123 15:44:18.101264 140581834321920 ddar.py:60] Depth 1/1000 time = 2.757716655731201
I0123 15:44:22.152321 140581834321920 ddar.py:60] Depth 2/1000 time = 4.050797462463379
I0123 15:44:26.053750 140581834321920 ddar.py:60] Depth 3/1000 time = 3.9011335372924805
I0123 15:44:29.958522 140581834321920 ddar.py:60] Depth 4/1000 time = 3.9042797088623047
I0123 15:44:34.052696 140581834321920 ddar.py:60] Depth 5/1000 time = 4.078435897827148
I0123 15:44:38.145020 140581834321920 ddar.py:60] Depth 6/1000 time = 4.092037916183472
I0123 15:44:38.150528 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:44:38.150593 140581834321920 alphageometry.py:566] LM output (score=-2.246337): "n : D c g g n 17 ;"
I0123 15:44:38.150630 140581834321920 alphageometry.py:567] Translation: "n = on_circle n g c"

I0123 15:44:38.150670 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_circle n g c ? eqratio k j j l b f f a"
I0123 15:44:38.150833 140581834321920 graph.py:498] 
I0123 15:44:38.150893 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_circle n g c ? eqratio k j j l b f f a
I0123 15:44:40.362802 140581834321920 ddar.py:60] Depth 1/1000 time = 2.1472578048706055
I0123 15:44:44.883014 140581834321920 ddar.py:60] Depth 2/1000 time = 4.519953727722168
I0123 15:44:49.409321 140581834321920 ddar.py:60] Depth 3/1000 time = 4.526034355163574
I0123 15:44:52.816238 140581834321920 ddar.py:60] Depth 4/1000 time = 3.4064056873321533
I0123 15:44:57.550416 140581834321920 ddar.py:60] Depth 5/1000 time = 4.71636700630188
I0123 15:45:02.220414 140581834321920 ddar.py:60] Depth 6/1000 time = 4.669712543487549
I0123 15:45:02.224727 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:45:02.224788 140581834321920 alphageometry.py:566] LM output (score=-2.257059): "n : C e g n 17 D e n g n 18 ;"
I0123 15:45:02.224827 140581834321920 alphageometry.py:567] Translation: "n = on_line n e g, on_bline n g e"

I0123 15:45:02.224867 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n e g, on_bline n g e ? eqratio k j j l b f f a"
I0123 15:45:02.225071 140581834321920 graph.py:498] 
I0123 15:45:02.225131 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n e g, on_bline n g e ? eqratio k j j l b f f a
I0123 15:45:05.059850 140581834321920 ddar.py:60] Depth 1/1000 time = 2.764413833618164
I0123 15:45:08.912514 140581834321920 ddar.py:60] Depth 2/1000 time = 3.8523919582366943
I0123 15:45:12.743287 140581834321920 ddar.py:60] Depth 3/1000 time = 3.830519676208496
I0123 15:45:16.613224 140581834321920 ddar.py:60] Depth 4/1000 time = 3.8694615364074707
I0123 15:45:19.486794 140581834321920 ddar.py:60] Depth 5/1000 time = 2.8578813076019287
I0123 15:45:23.395492 140581834321920 ddar.py:60] Depth 6/1000 time = 3.908421516418457
I0123 15:45:23.400934 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:45:23.400991 140581834321920 alphageometry.py:566] LM output (score=-2.258316): "n : D f h h n 17 ;"
I0123 15:45:23.401026 140581834321920 alphageometry.py:567] Translation: "n = on_circle n h f"

I0123 15:45:23.401064 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_circle n h f ? eqratio k j j l b f f a"
I0123 15:45:23.401231 140581834321920 graph.py:498] 
I0123 15:45:23.401283 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_circle n h f ? eqratio k j j l b f f a
I0123 15:45:26.721793 140581834321920 ddar.py:60] Depth 1/1000 time = 3.256141185760498
I0123 15:45:31.909373 140581834321920 ddar.py:60] Depth 2/1000 time = 5.18735146522522
I0123 15:45:35.308710 140581834321920 ddar.py:60] Depth 3/1000 time = 3.399074077606201
I0123 15:45:39.752812 140581834321920 ddar.py:60] Depth 4/1000 time = 4.443593502044678
I0123 15:45:44.468961 140581834321920 ddar.py:60] Depth 5/1000 time = 4.697625637054443
I0123 15:45:49.214584 140581834321920 ddar.py:60] Depth 6/1000 time = 4.745346546173096
I0123 15:45:49.218896 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:45:49.218952 140581834321920 alphageometry.py:566] LM output (score=-2.276536): "n : C b f n 17 D b n f n 18 ;"
I0123 15:45:49.218987 140581834321920 alphageometry.py:567] Translation: "n = on_line n b f, on_bline n f b"

I0123 15:45:49.219027 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n b f, on_bline n f b ? eqratio k j j l b f f a"
I0123 15:45:49.219199 140581834321920 graph.py:498] 
I0123 15:45:49.219252 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n b f, on_bline n f b ? eqratio k j j l b f f a
I0123 15:45:52.304905 140581834321920 ddar.py:60] Depth 1/1000 time = 3.0148115158081055
I0123 15:45:56.895622 140581834321920 ddar.py:60] Depth 2/1000 time = 4.5904717445373535
I0123 15:46:01.274738 140581834321920 ddar.py:60] Depth 3/1000 time = 4.37885856628418
I0123 15:46:06.815306 140581834321920 ddar.py:60] Depth 4/1000 time = 5.540262699127197
I0123 15:46:11.265377 140581834321920 ddar.py:60] Depth 5/1000 time = 4.449806451797485
I0123 15:46:15.748137 140581834321920 ddar.py:60] Depth 6/1000 time = 4.482265949249268
I0123 15:46:20.339547 140581834321920 ddar.py:60] Depth 7/1000 time = 4.568687200546265
I0123 15:46:20.344666 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:46:20.344722 140581834321920 alphageometry.py:566] LM output (score=-2.321170): "n : D e i i n 17 ;"
I0123 15:46:20.344756 140581834321920 alphageometry.py:567] Translation: "n = on_circle n i e"

I0123 15:46:20.344793 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_circle n i e ? eqratio k j j l b f f a"
I0123 15:46:20.344957 140581834321920 graph.py:498] 
I0123 15:46:20.345008 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_circle n i e ? eqratio k j j l b f f a
I0123 15:46:23.595700 140581834321920 ddar.py:60] Depth 1/1000 time = 3.1860313415527344
I0123 15:46:29.119905 140581834321920 ddar.py:60] Depth 2/1000 time = 5.52397084236145
I0123 15:46:32.573729 140581834321920 ddar.py:60] Depth 3/1000 time = 3.453618288040161
I0123 15:46:37.071716 140581834321920 ddar.py:60] Depth 4/1000 time = 4.497495651245117
I0123 15:46:41.841801 140581834321920 ddar.py:60] Depth 5/1000 time = 4.750461101531982
I0123 15:46:46.646785 140581834321920 ddar.py:60] Depth 6/1000 time = 4.804699182510376
I0123 15:46:46.651299 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:46:46.651357 140581834321920 alphageometry.py:566] LM output (score=-2.378739): "n : C f i n 17 D f i i n 18 ;"
I0123 15:46:46.651393 140581834321920 alphageometry.py:567] Translation: "n = on_line n f i, on_circle n i f"

I0123 15:46:46.651432 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n f i, on_circle n i f ? eqratio k j j l b f f a"
I0123 15:46:46.651601 140581834321920 graph.py:498] 
I0123 15:46:46.651654 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n f i, on_circle n i f ? eqratio k j j l b f f a
I0123 15:46:49.747235 140581834321920 ddar.py:60] Depth 1/1000 time = 3.0302693843841553
I0123 15:46:54.770151 140581834321920 ddar.py:60] Depth 2/1000 time = 5.022677898406982
I0123 15:46:58.584383 140581834321920 ddar.py:60] Depth 3/1000 time = 3.8139660358428955
I0123 15:47:04.674812 140581834321920 ddar.py:60] Depth 4/1000 time = 6.089926481246948
I0123 15:47:10.126216 140581834321920 ddar.py:60] Depth 5/1000 time = 5.418078422546387
I0123 15:47:14.351381 140581834321920 ddar.py:60] Depth 6/1000 time = 4.224895000457764
I0123 15:47:14.357199 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:47:14.357256 140581834321920 alphageometry.py:566] LM output (score=-2.396941): "n : D e n f n 17 ;"
I0123 15:47:14.357290 140581834321920 alphageometry.py:567] Translation: "n = on_bline n f e"

I0123 15:47:14.357327 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_bline n f e ? eqratio k j j l b f f a"
I0123 15:47:14.357490 140581834321920 graph.py:498] 
I0123 15:47:14.357542 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_bline n f e ? eqratio k j j l b f f a
I0123 15:47:17.194997 140581834321920 ddar.py:60] Depth 1/1000 time = 2.767117500305176
I0123 15:47:21.325499 140581834321920 ddar.py:60] Depth 2/1000 time = 4.130263090133667
I0123 15:47:25.261076 140581834321920 ddar.py:60] Depth 3/1000 time = 3.9353156089782715
I0123 15:47:29.234710 140581834321920 ddar.py:60] Depth 4/1000 time = 3.973162889480591
I0123 15:47:32.195569 140581834321920 ddar.py:60] Depth 5/1000 time = 2.943173885345459
I0123 15:47:36.219408 140581834321920 ddar.py:60] Depth 6/1000 time = 4.023571252822876
I0123 15:47:36.223645 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:47:36.223701 140581834321920 alphageometry.py:566] LM output (score=-2.402977): "n : C a f n 17 D a n f n 18 ;"
I0123 15:47:36.223736 140581834321920 alphageometry.py:567] Translation: "n = on_line n a f, on_bline n f a"

I0123 15:47:36.223774 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n a f, on_bline n f a ? eqratio k j j l b f f a"
I0123 15:47:36.223943 140581834321920 graph.py:498] 
I0123 15:47:36.223996 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n a f, on_bline n f a ? eqratio k j j l b f f a
I0123 15:47:39.262860 140581834321920 ddar.py:60] Depth 1/1000 time = 2.967791795730591
I0123 15:47:44.798885 140581834321920 ddar.py:60] Depth 2/1000 time = 5.535783767700195
I0123 15:47:49.258346 140581834321920 ddar.py:60] Depth 3/1000 time = 4.459192276000977
I0123 15:47:53.658853 140581834321920 ddar.py:60] Depth 4/1000 time = 4.399997711181641
I0123 15:47:58.344072 140581834321920 ddar.py:60] Depth 5/1000 time = 4.659032583236694
I0123 15:48:04.163212 140581834321920 ddar.py:60] Depth 6/1000 time = 5.818881273269653
I0123 15:48:04.168303 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:48:04.168358 140581834321920 alphageometry.py:566] LM output (score=-2.498007): "n : C c d n 17 D c n d n 18 ;"
I0123 15:48:04.168392 140581834321920 alphageometry.py:567] Translation: "n = on_line n c d, on_bline n d c"

I0123 15:48:04.168430 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n c d, on_bline n d c ? eqratio k j j l b f f a"
I0123 15:48:04.168618 140581834321920 graph.py:498] 
I0123 15:48:04.168670 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n c d, on_bline n d c ? eqratio k j j l b f f a
I0123 15:48:06.112835 140581834321920 ddar.py:60] Depth 1/1000 time = 1.8731935024261475
I0123 15:48:11.679278 140581834321920 ddar.py:60] Depth 2/1000 time = 5.5662102699279785
I0123 15:48:15.895003 140581834321920 ddar.py:60] Depth 3/1000 time = 4.215461254119873
I0123 15:48:20.075608 140581834321920 ddar.py:60] Depth 4/1000 time = 4.180118799209595
I0123 15:48:24.549615 140581834321920 ddar.py:60] Depth 5/1000 time = 4.451844692230225
I0123 15:48:28.962337 140581834321920 ddar.py:60] Depth 6/1000 time = 4.412426948547363
I0123 15:48:28.966346 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:48:28.966404 140581834321920 alphageometry.py:566] LM output (score=-2.588077): "n : C a e n 17 D a n e n 18 ;"
I0123 15:48:28.966440 140581834321920 alphageometry.py:567] Translation: "n = on_line n a e, on_bline n e a"

I0123 15:48:28.966479 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n a e, on_bline n e a ? eqratio k j j l b f f a"
I0123 15:48:28.966652 140581834321920 graph.py:498] 
I0123 15:48:28.966705 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n a e, on_bline n e a ? eqratio k j j l b f f a
I0123 15:48:32.013894 140581834321920 ddar.py:60] Depth 1/1000 time = 2.9765312671661377
I0123 15:48:36.561218 140581834321920 ddar.py:60] Depth 2/1000 time = 4.547089576721191
I0123 15:48:42.126838 140581834321920 ddar.py:60] Depth 3/1000 time = 5.565364360809326
I0123 15:48:46.609905 140581834321920 ddar.py:60] Depth 4/1000 time = 4.48259162902832
I0123 15:48:51.313439 140581834321920 ddar.py:60] Depth 5/1000 time = 4.678072690963745
I0123 15:48:55.936209 140581834321920 ddar.py:60] Depth 6/1000 time = 4.622490406036377
I0123 15:48:55.941499 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:48:55.941557 140581834321920 alphageometry.py:566] LM output (score=-2.624856): "n : C b e n 17 D b n e n 18 ;"
I0123 15:48:55.941593 140581834321920 alphageometry.py:567] Translation: "n = on_line n b e, on_bline n e b"

I0123 15:48:55.941632 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n b e, on_bline n e b ? eqratio k j j l b f f a"
I0123 15:48:55.941837 140581834321920 graph.py:498] 
I0123 15:48:55.941890 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n b e, on_bline n e b ? eqratio k j j l b f f a
I0123 15:48:58.802683 140581834321920 ddar.py:60] Depth 1/1000 time = 2.7909109592437744
I0123 15:49:03.135407 140581834321920 ddar.py:60] Depth 2/1000 time = 4.332422971725464
I0123 15:49:07.089442 140581834321920 ddar.py:60] Depth 3/1000 time = 3.95363187789917
I0123 15:49:11.016660 140581834321920 ddar.py:60] Depth 4/1000 time = 3.926680564880371
I0123 15:49:15.150814 140581834321920 ddar.py:60] Depth 5/1000 time = 4.115597248077393
I0123 15:49:18.048301 140581834321920 ddar.py:60] Depth 6/1000 time = 2.897216558456421
I0123 15:49:18.053624 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:49:18.053715 140581834321920 alphageometry.py:566] LM output (score=-2.642573): "n : C f k n 17 D f n k n 18 ;"
I0123 15:49:18.053754 140581834321920 alphageometry.py:567] Translation: "n = on_line n f k, on_bline n k f"

I0123 15:49:18.053792 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n f k, on_bline n k f ? eqratio k j j l b f f a"
I0123 15:49:18.053982 140581834321920 graph.py:498] 
I0123 15:49:18.054056 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n f k, on_bline n k f ? eqratio k j j l b f f a
I0123 15:49:22.522425 140581834321920 ddar.py:60] Depth 1/1000 time = 4.3962721824646
I0123 15:49:27.693344 140581834321920 ddar.py:60] Depth 2/1000 time = 5.170683860778809
I0123 15:49:33.670891 140581834321920 ddar.py:60] Depth 3/1000 time = 5.977269411087036
I0123 15:49:38.454511 140581834321920 ddar.py:60] Depth 4/1000 time = 4.783323526382446
I0123 15:49:44.423890 140581834321920 ddar.py:60] Depth 5/1000 time = 5.969097137451172
I0123 15:49:49.218976 140581834321920 ddar.py:60] Depth 6/1000 time = 4.794586658477783
I0123 15:49:55.355297 140581834321920 ddar.py:60] Depth 7/1000 time = 6.1130595207214355
I0123 15:49:55.360835 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:49:55.360900 140581834321920 alphageometry.py:566] LM output (score=-2.698455): "n : C f h n 17 D f h h n 18 ;"
I0123 15:49:55.360935 140581834321920 alphageometry.py:567] Translation: "n = on_line n f h, on_circle n h f"

I0123 15:49:55.360974 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n f h, on_circle n h f ? eqratio k j j l b f f a"
I0123 15:49:55.361140 140581834321920 graph.py:498] 
I0123 15:49:55.361193 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_line n f h, on_circle n h f ? eqratio k j j l b f f a
I0123 15:49:58.888038 140581834321920 ddar.py:60] Depth 1/1000 time = 3.460545063018799
I0123 15:50:03.483700 140581834321920 ddar.py:60] Depth 2/1000 time = 4.595422267913818
I0123 15:50:09.984503 140581834321920 ddar.py:60] Depth 3/1000 time = 6.5005388259887695
I0123 15:50:14.208685 140581834321920 ddar.py:60] Depth 4/1000 time = 4.223876476287842
I0123 15:50:19.614922 140581834321920 ddar.py:60] Depth 5/1000 time = 5.405968189239502
I0123 15:50:26.263263 140581834321920 ddar.py:60] Depth 6/1000 time = 6.6478190422058105
I0123 15:50:30.857672 140581834321920 ddar.py:60] Depth 7/1000 time = 4.556383848190308
I0123 15:50:30.863535 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:50:30.863593 140581834321920 alphageometry.py:566] LM output (score=-2.850720): "n : D e h e n 17 D f h f n 18 ;"
I0123 15:50:30.863666 140581834321920 alphageometry.py:567] Translation: "n = on_circle n e h, on_circle n f h"

I0123 15:50:30.863704 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_circle n e h, on_circle n f h ? eqratio k j j l b f f a"
I0123 15:50:30.863871 140581834321920 graph.py:498] 
I0123 15:50:30.863924 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_circle n e h, on_circle n f h ? eqratio k j j l b f f a
I0123 15:50:34.257387 140581834321920 ddar.py:60] Depth 1/1000 time = 3.3142268657684326
I0123 15:50:38.864585 140581834321920 ddar.py:60] Depth 2/1000 time = 4.60696005821228
I0123 15:50:43.783411 140581834321920 ddar.py:60] Depth 3/1000 time = 4.918562889099121
I0123 15:50:47.507910 140581834321920 ddar.py:60] Depth 4/1000 time = 3.7242090702056885
I0123 15:50:52.374339 140581834321920 ddar.py:60] Depth 5/1000 time = 4.865927219390869
I0123 15:50:57.120392 140581834321920 ddar.py:60] Depth 6/1000 time = 4.719771385192871
I0123 15:51:01.879687 140581834321920 ddar.py:60] Depth 7/1000 time = 4.759036540985107
I0123 15:51:06.624136 140581834321920 ddar.py:60] Depth 8/1000 time = 4.734940528869629
I0123 15:51:06.624752 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:51:06.624829 140581834321920 alphageometry.py:566] LM output (score=-2.926883): "n : D f i i n 17 ;"
I0123 15:51:06.624866 140581834321920 alphageometry.py:567] Translation: "n = on_circle n i f"

I0123 15:51:06.624904 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_circle n i f ? eqratio k j j l b f f a"
I0123 15:51:06.625070 140581834321920 graph.py:498] 
I0123 15:51:06.625123 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_circle n i f ? eqratio k j j l b f f a
I0123 15:51:08.497956 140581834321920 ddar.py:60] Depth 1/1000 time = 1.8083319664001465
I0123 15:51:13.286639 140581834321920 ddar.py:60] Depth 2/1000 time = 4.788438558578491
I0123 15:51:17.890299 140581834321920 ddar.py:60] Depth 3/1000 time = 4.603403568267822
I0123 15:51:22.524690 140581834321920 ddar.py:60] Depth 4/1000 time = 4.633886814117432
I0123 15:51:27.393336 140581834321920 ddar.py:60] Depth 5/1000 time = 4.849218130111694
I0123 15:51:31.043882 140581834321920 ddar.py:60] Depth 6/1000 time = 3.650272846221924
I0123 15:51:31.048330 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:51:31.048385 140581834321920 alphageometry.py:566] LM output (score=-2.998144): "n : D e l e n 17 D f l f n 18 ;"
I0123 15:51:31.048421 140581834321920 alphageometry.py:567] Translation: "n = on_circle n e l, on_circle n f l"

I0123 15:51:31.048457 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_circle n e l, on_circle n f l ? eqratio k j j l b f f a"
I0123 15:51:31.048656 140581834321920 graph.py:498] 
I0123 15:51:31.048708 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_circle n e l, on_circle n f l ? eqratio k j j l b f f a
I0123 15:51:34.086148 140581834321920 ddar.py:60] Depth 1/1000 time = 2.951144218444824
I0123 15:51:38.472743 140581834321920 ddar.py:60] Depth 2/1000 time = 4.386342525482178
I0123 15:51:41.780046 140581834321920 ddar.py:60] Depth 3/1000 time = 3.3070619106292725
I0123 15:51:46.200764 140581834321920 ddar.py:60] Depth 4/1000 time = 4.42050313949585
I0123 15:51:50.623609 140581834321920 ddar.py:60] Depth 5/1000 time = 4.422333478927612
I0123 15:51:55.296032 140581834321920 ddar.py:60] Depth 6/1000 time = 4.644633769989014
I0123 15:51:59.979054 140581834321920 ddar.py:60] Depth 7/1000 time = 4.682751417160034
I0123 15:52:04.714001 140581834321920 ddar.py:60] Depth 8/1000 time = 4.725353479385376
I0123 15:52:04.715455 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:52:04.715512 140581834321920 alphageometry.py:566] LM output (score=-3.033540): "n : D e m e n 17 ;"
I0123 15:52:04.715547 140581834321920 alphageometry.py:567] Translation: "n = on_circle n e m"

I0123 15:52:04.715585 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_circle n e m ? eqratio k j j l b f f a"
I0123 15:52:04.715751 140581834321920 graph.py:498] 
I0123 15:52:04.715804 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_line m e f, on_bline m f e; n = on_circle n e m ? eqratio k j j l b f f a
I0123 15:52:06.402863 140581834321920 ddar.py:60] Depth 1/1000 time = 1.6223831176757812
I0123 15:52:10.709339 140581834321920 ddar.py:60] Depth 2/1000 time = 4.306231260299683
I0123 15:52:13.437257 140581834321920 ddar.py:60] Depth 3/1000 time = 2.7276060581207275
I0123 15:52:17.178591 140581834321920 ddar.py:60] Depth 4/1000 time = 3.7408227920532227
I0123 15:52:21.132993 140581834321920 ddar.py:60] Depth 5/1000 time = 3.939629554748535
I0123 15:52:25.073476 140581834321920 ddar.py:60] Depth 6/1000 time = 3.9402432441711426
I0123 15:52:25.077926 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:52:25.077995 140581834321920 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : D c m e m 15 ; x00
I0123 15:52:29.820989 140581834321920 alphageometry.py:566] LM output (score=-0.783976): "n : C e f n 16 D e n f n 17 ;"
I0123 15:52:29.821191 140581834321920 alphageometry.py:567] Translation: "n = on_line n e f, on_bline n f e"

I0123 15:52:29.821237 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_line n e f, on_bline n f e ? eqratio k j j l b f f a"
I0123 15:52:29.821397 140581834321920 graph.py:498] 
I0123 15:52:29.821469 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_line n e f, on_bline n f e ? eqratio k j j l b f f a
I0123 15:52:31.563165 140581834321920 ddar.py:60] Depth 1/1000 time = 1.669837236404419
I0123 15:52:35.953493 140581834321920 ddar.py:60] Depth 2/1000 time = 4.390109300613403
I0123 15:52:39.943878 140581834321920 ddar.py:60] Depth 3/1000 time = 3.9901442527770996
I0123 15:52:42.722604 140581834321920 ddar.py:60] Depth 4/1000 time = 2.778474807739258
I0123 15:52:46.623552 140581834321920 ddar.py:60] Depth 5/1000 time = 3.9004907608032227
I0123 15:52:50.839842 140581834321920 ddar.py:60] Depth 6/1000 time = 4.191891193389893
I0123 15:52:55.189240 140581834321920 ddar.py:60] Depth 7/1000 time = 4.3491480350494385
I0123 15:52:55.193823 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:52:55.193883 140581834321920 alphageometry.py:566] LM output (score=-1.472023): "n : C e g n 16 D e g g n 17 ;"
I0123 15:52:55.193919 140581834321920 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 15:52:55.193957 140581834321920 alphageometry.py:566] LM output (score=-1.668251): "n : D e g g n 16 ;"
I0123 15:52:55.193987 140581834321920 alphageometry.py:567] Translation: "n = on_circle n g e"

I0123 15:52:55.194018 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_circle n g e ? eqratio k j j l b f f a"
I0123 15:52:55.194179 140581834321920 graph.py:498] 
I0123 15:52:55.194242 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_circle n g e ? eqratio k j j l b f f a
I0123 15:52:57.449158 140581834321920 ddar.py:60] Depth 1/1000 time = 2.1881120204925537
I0123 15:53:02.535961 140581834321920 ddar.py:60] Depth 2/1000 time = 5.086546182632446
I0123 15:53:05.909736 140581834321920 ddar.py:60] Depth 3/1000 time = 3.373453378677368
I0123 15:53:10.863224 140581834321920 ddar.py:60] Depth 4/1000 time = 4.9270994663238525
I0123 15:53:15.812750 140581834321920 ddar.py:60] Depth 5/1000 time = 4.949254512786865
I0123 15:53:15.817246 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:53:15.817306 140581834321920 alphageometry.py:566] LM output (score=-1.813465): "n : D e i i n 16 ;"
I0123 15:53:15.817343 140581834321920 alphageometry.py:567] Translation: "n = on_circle n i e"

I0123 15:53:15.817381 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_circle n i e ? eqratio k j j l b f f a"
I0123 15:53:15.817558 140581834321920 graph.py:498] 
I0123 15:53:15.817627 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_circle n i e ? eqratio k j j l b f f a
I0123 15:53:17.880887 140581834321920 ddar.py:60] Depth 1/1000 time = 1.9979310035705566
I0123 15:53:23.116492 140581834321920 ddar.py:60] Depth 2/1000 time = 5.2353575229644775
I0123 15:53:27.666958 140581834321920 ddar.py:60] Depth 3/1000 time = 4.550173759460449
I0123 15:53:31.430300 140581834321920 ddar.py:60] Depth 4/1000 time = 3.7369492053985596
I0123 15:53:36.322924 140581834321920 ddar.py:60] Depth 5/1000 time = 4.892348289489746
I0123 15:53:36.327274 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:53:36.327330 140581834321920 alphageometry.py:566] LM output (score=-1.836544): "n : C e j n 16 D e n j n 17 ;"
I0123 15:53:36.327365 140581834321920 alphageometry.py:567] Translation: "n = on_line n e j, on_bline n j e"

I0123 15:53:36.327404 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_line n e j, on_bline n j e ? eqratio k j j l b f f a"
I0123 15:53:36.327570 140581834321920 graph.py:498] 
I0123 15:53:36.327622 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_line n e j, on_bline n j e ? eqratio k j j l b f f a
I0123 15:53:38.039062 140581834321920 ddar.py:60] Depth 1/1000 time = 1.6323339939117432
I0123 15:53:42.117919 140581834321920 ddar.py:60] Depth 2/1000 time = 4.078619003295898
I0123 15:53:46.094166 140581834321920 ddar.py:60] Depth 3/1000 time = 3.9759879112243652
I0123 15:53:50.160300 140581834321920 ddar.py:60] Depth 4/1000 time = 4.065839052200317
I0123 15:53:52.987192 140581834321920 ddar.py:60] Depth 5/1000 time = 2.8264083862304688
I0123 15:53:57.237467 140581834321920 ddar.py:60] Depth 6/1000 time = 4.2244956493377686
I0123 15:54:01.506285 140581834321920 ddar.py:60] Depth 7/1000 time = 4.268549919128418
I0123 15:54:01.510659 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:54:01.510735 140581834321920 alphageometry.py:566] LM output (score=-2.200151): "n : D f h h n 16 ;"
I0123 15:54:01.510774 140581834321920 alphageometry.py:567] Translation: "n = on_circle n h f"

I0123 15:54:01.510815 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_circle n h f ? eqratio k j j l b f f a"
I0123 15:54:01.510980 140581834321920 graph.py:498] 
I0123 15:54:01.511034 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_circle n h f ? eqratio k j j l b f f a
I0123 15:54:03.686738 140581834321920 ddar.py:60] Depth 1/1000 time = 2.1118111610412598
I0123 15:54:08.498257 140581834321920 ddar.py:60] Depth 2/1000 time = 4.811281442642212
I0123 15:54:13.115112 140581834321920 ddar.py:60] Depth 3/1000 time = 4.616599082946777
I0123 15:54:16.842706 140581834321920 ddar.py:60] Depth 4/1000 time = 3.7024765014648438
I0123 15:54:21.780396 140581834321920 ddar.py:60] Depth 5/1000 time = 4.937364339828491
I0123 15:54:21.784848 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:54:21.784927 140581834321920 alphageometry.py:566] LM output (score=-2.254361): "n : C e i n 16 D e i i n 17 ;"
I0123 15:54:21.784962 140581834321920 alphageometry.py:567] Translation: "n = on_line n e i, on_circle n i e"

I0123 15:54:21.785032 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_line n e i, on_circle n i e ? eqratio k j j l b f f a"
I0123 15:54:21.785225 140581834321920 graph.py:498] 
I0123 15:54:21.785294 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_line n e i, on_circle n i e ? eqratio k j j l b f f a
I0123 15:54:25.133541 140581834321920 ddar.py:60] Depth 1/1000 time = 3.283630847930908
I0123 15:54:29.422711 140581834321920 ddar.py:60] Depth 2/1000 time = 4.287148475646973
I0123 15:54:34.279813 140581834321920 ddar.py:60] Depth 3/1000 time = 4.856829643249512
I0123 15:54:39.143805 140581834321920 ddar.py:60] Depth 4/1000 time = 4.8634936809539795
I0123 15:54:44.546103 140581834321920 ddar.py:60] Depth 5/1000 time = 5.367910623550415
I0123 15:54:48.690632 140581834321920 ddar.py:60] Depth 6/1000 time = 4.144250154495239
I0123 15:54:48.695001 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:54:48.695060 140581834321920 alphageometry.py:566] LM output (score=-2.273892): "n : C c d n 16 D c n d n 17 ;"
I0123 15:54:48.695095 140581834321920 alphageometry.py:567] Translation: "n = on_line n c d, on_bline n d c"

I0123 15:54:48.695131 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_line n c d, on_bline n d c ? eqratio k j j l b f f a"
I0123 15:54:48.695293 140581834321920 graph.py:498] 
I0123 15:54:48.695345 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_line n c d, on_bline n d c ? eqratio k j j l b f f a
I0123 15:54:51.730037 140581834321920 ddar.py:60] Depth 1/1000 time = 2.9639298915863037
I0123 15:54:56.078037 140581834321920 ddar.py:60] Depth 2/1000 time = 4.347761392593384
I0123 15:55:00.230449 140581834321920 ddar.py:60] Depth 3/1000 time = 4.152151823043823
I0123 15:55:04.432662 140581834321920 ddar.py:60] Depth 4/1000 time = 4.20192551612854
I0123 15:55:08.629858 140581834321920 ddar.py:60] Depth 5/1000 time = 4.196689128875732
I0123 15:55:13.131741 140581834321920 ddar.py:60] Depth 6/1000 time = 4.474566698074341
I0123 15:55:17.557940 140581834321920 ddar.py:60] Depth 7/1000 time = 4.425919532775879
I0123 15:55:17.562223 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:55:17.562301 140581834321920 alphageometry.py:566] LM output (score=-2.400879): "n : C c e n 16 D c n e n 17 ;"
I0123 15:55:17.562336 140581834321920 alphageometry.py:567] Translation: "n = on_line n c e, on_bline n e c"

I0123 15:55:17.562372 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_line n c e, on_bline n e c ? eqratio k j j l b f f a"
I0123 15:55:17.562558 140581834321920 graph.py:498] 
I0123 15:55:17.562625 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_line n c e, on_bline n e c ? eqratio k j j l b f f a
I0123 15:55:20.647552 140581834321920 ddar.py:60] Depth 1/1000 time = 3.014312267303467
I0123 15:55:24.914689 140581834321920 ddar.py:60] Depth 2/1000 time = 4.266899108886719
I0123 15:55:29.114586 140581834321920 ddar.py:60] Depth 3/1000 time = 4.19963812828064
I0123 15:55:33.280292 140581834321920 ddar.py:60] Depth 4/1000 time = 4.165237665176392
I0123 15:55:38.947051 140581834321920 ddar.py:60] Depth 5/1000 time = 5.642100095748901
I0123 15:55:43.459139 140581834321920 ddar.py:60] Depth 6/1000 time = 4.511814117431641
I0123 15:55:43.463467 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:55:43.463523 140581834321920 alphageometry.py:566] LM output (score=-2.532948): "n : C d e n 16 D d n e n 17 ;"
I0123 15:55:43.463560 140581834321920 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 15:55:43.463597 140581834321920 alphageometry.py:566] LM output (score=-2.646641): "n : D e f e n 16 D e f f n 17 ;"
I0123 15:55:43.463624 140581834321920 alphageometry.py:567] Translation: "n = on_circle n e f, on_circle n f e"

I0123 15:55:43.463655 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_circle n e f, on_circle n f e ? eqratio k j j l b f f a"
I0123 15:55:43.463820 140581834321920 graph.py:498] 
I0123 15:55:43.463871 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_circle n e f, on_circle n f e ? eqratio k j j l b f f a
I0123 15:55:45.273946 140581834321920 ddar.py:60] Depth 1/1000 time = 1.7292149066925049
I0123 15:55:48.610882 140581834321920 ddar.py:60] Depth 2/1000 time = 3.3366966247558594
I0123 15:55:52.671624 140581834321920 ddar.py:60] Depth 3/1000 time = 4.06048583984375
I0123 15:55:56.804495 140581834321920 ddar.py:60] Depth 4/1000 time = 4.131347894668579
I0123 15:56:00.145241 140581834321920 ddar.py:60] Depth 5/1000 time = 3.3132004737854004
I0123 15:56:04.631297 140581834321920 ddar.py:60] Depth 6/1000 time = 4.48577618598938
I0123 15:56:04.636220 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:56:04.636299 140581834321920 alphageometry.py:566] LM output (score=-2.716452): "n : T c f f n 16 ;"
I0123 15:56:04.636336 140581834321920 alphageometry.py:567] Translation: "n = on_tline n f c f"

I0123 15:56:04.636383 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_tline n f c f ? eqratio k j j l b f f a"
I0123 15:56:04.636559 140581834321920 graph.py:498] 
I0123 15:56:04.636617 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_tline n f c f ? eqratio k j j l b f f a
I0123 15:56:06.159281 140581834321920 ddar.py:60] Depth 1/1000 time = 1.4677391052246094
I0123 15:56:09.970846 140581834321920 ddar.py:60] Depth 2/1000 time = 3.811295747756958
I0123 15:56:13.630071 140581834321920 ddar.py:60] Depth 3/1000 time = 3.658891201019287
I0123 15:56:16.493617 140581834321920 ddar.py:60] Depth 4/1000 time = 2.833101749420166
I0123 15:56:20.526421 140581834321920 ddar.py:60] Depth 5/1000 time = 4.032524108886719
I0123 15:56:20.530216 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:56:20.530276 140581834321920 alphageometry.py:566] LM output (score=-2.732736): "n : T e f f n 16 ;"
I0123 15:56:20.530310 140581834321920 alphageometry.py:567] Translation: "n = on_tline n f e f"

I0123 15:56:20.530346 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_tline n f e f ? eqratio k j j l b f f a"
I0123 15:56:20.530509 140581834321920 graph.py:498] 
I0123 15:56:20.530560 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_tline n f e f ? eqratio k j j l b f f a
I0123 15:56:22.071439 140581834321920 ddar.py:60] Depth 1/1000 time = 1.485483169555664
I0123 15:56:26.092703 140581834321920 ddar.py:60] Depth 2/1000 time = 4.021030902862549
I0123 15:56:28.514605 140581834321920 ddar.py:60] Depth 3/1000 time = 2.4216487407684326
I0123 15:56:32.500673 140581834321920 ddar.py:60] Depth 4/1000 time = 3.9604625701904297
I0123 15:56:36.527064 140581834321920 ddar.py:60] Depth 5/1000 time = 4.026114463806152
I0123 15:56:36.531151 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:56:36.531217 140581834321920 alphageometry.py:566] LM output (score=-2.847855): "n : D f i i n 16 ;"
I0123 15:56:36.531254 140581834321920 alphageometry.py:567] Translation: "n = on_circle n i f"

I0123 15:56:36.531291 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_circle n i f ? eqratio k j j l b f f a"
I0123 15:56:36.531459 140581834321920 graph.py:498] 
I0123 15:56:36.531514 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_circle n i f ? eqratio k j j l b f f a
I0123 15:56:38.347516 140581834321920 ddar.py:60] Depth 1/1000 time = 1.7507045269012451
I0123 15:56:43.205429 140581834321920 ddar.py:60] Depth 2/1000 time = 4.857679605484009
I0123 15:56:46.586907 140581834321920 ddar.py:60] Depth 3/1000 time = 3.3812153339385986
I0123 15:56:51.640705 140581834321920 ddar.py:60] Depth 4/1000 time = 5.026681900024414
I0123 15:56:56.693343 140581834321920 ddar.py:60] Depth 5/1000 time = 5.05236029624939
I0123 15:56:56.697745 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:56:56.697819 140581834321920 alphageometry.py:566] LM output (score=-2.850505): "n : D e l e n 16 D e l l n 17 ;"
I0123 15:56:56.697855 140581834321920 alphageometry.py:567] Translation: "n = on_circle n e l, on_circle n l e"

I0123 15:56:56.697893 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_circle n e l, on_circle n l e ? eqratio k j j l b f f a"
I0123 15:56:56.698282 140581834321920 graph.py:498] 
I0123 15:56:56.698335 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_circle n e l, on_circle n l e ? eqratio k j j l b f f a
I0123 15:56:58.500657 140581834321920 ddar.py:60] Depth 1/1000 time = 1.723806619644165
I0123 15:57:02.885234 140581834321920 ddar.py:60] Depth 2/1000 time = 4.3843419551849365
I0123 15:57:05.777821 140581834321920 ddar.py:60] Depth 3/1000 time = 2.8923308849334717
I0123 15:57:09.969783 140581834321920 ddar.py:60] Depth 4/1000 time = 4.191676139831543
I0123 15:57:12.883034 140581834321920 ddar.py:60] Depth 5/1000 time = 2.9118785858154297
I0123 15:57:17.525306 140581834321920 ddar.py:60] Depth 6/1000 time = 4.611643314361572
I0123 15:57:22.140502 140581834321920 ddar.py:60] Depth 7/1000 time = 4.614868879318237
I0123 15:57:22.145369 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:57:22.145427 140581834321920 alphageometry.py:566] LM output (score=-2.878501): "n : T e g e n 16 ;"
I0123 15:57:22.145461 140581834321920 alphageometry.py:567] Translation: "n = on_tline n e e g"

I0123 15:57:22.145500 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_tline n e e g ? eqratio k j j l b f f a"
I0123 15:57:22.145707 140581834321920 graph.py:498] 
I0123 15:57:22.145783 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_tline n e e g ? eqratio k j j l b f f a
I0123 15:57:23.657112 140581834321920 ddar.py:60] Depth 1/1000 time = 1.4568707942962646
I0123 15:57:26.112791 140581834321920 ddar.py:60] Depth 2/1000 time = 2.4554269313812256
I0123 15:57:29.799016 140581834321920 ddar.py:60] Depth 3/1000 time = 3.685940980911255
I0123 15:57:33.530273 140581834321920 ddar.py:60] Depth 4/1000 time = 3.730957508087158
I0123 15:57:36.279160 140581834321920 ddar.py:60] Depth 5/1000 time = 2.7258036136627197
I0123 15:57:40.236334 140581834321920 ddar.py:60] Depth 6/1000 time = 3.956897020339966
I0123 15:57:40.240296 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:57:40.240358 140581834321920 alphageometry.py:566] LM output (score=-2.929524): "n : T f k h n 16 ;"
I0123 15:57:40.240395 140581834321920 alphageometry.py:567] Translation: "n = on_tline n h f k"

I0123 15:57:40.240433 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_tline n h f k ? eqratio k j j l b f f a"
I0123 15:57:40.240597 140581834321920 graph.py:498] 
I0123 15:57:40.240649 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_tline n h f k ? eqratio k j j l b f f a
I0123 15:57:41.766700 140581834321920 ddar.py:60] Depth 1/1000 time = 1.4705986976623535
I0123 15:57:45.613535 140581834321920 ddar.py:60] Depth 2/1000 time = 3.846571207046509
I0123 15:57:48.035051 140581834321920 ddar.py:60] Depth 3/1000 time = 2.4212586879730225
I0123 15:57:52.134382 140581834321920 ddar.py:60] Depth 4/1000 time = 4.068990707397461
I0123 15:57:56.545047 140581834321920 ddar.py:60] Depth 5/1000 time = 4.410412788391113
I0123 15:57:59.697377 140581834321920 ddar.py:60] Depth 6/1000 time = 3.1520352363586426
I0123 15:58:04.141355 140581834321920 ddar.py:60] Depth 7/1000 time = 4.434569835662842
I0123 15:58:04.141666 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:58:04.141718 140581834321920 alphageometry.py:566] LM output (score=-2.963220): "n : T c e e n 16 ;"
I0123 15:58:04.141753 140581834321920 alphageometry.py:567] Translation: "n = on_tline n e c e"

I0123 15:58:04.141792 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_tline n e c e ? eqratio k j j l b f f a"
I0123 15:58:04.141956 140581834321920 graph.py:498] 
I0123 15:58:04.142008 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_tline n e c e ? eqratio k j j l b f f a
I0123 15:58:05.672679 140581834321920 ddar.py:60] Depth 1/1000 time = 1.4753427505493164
I0123 15:58:09.467981 140581834321920 ddar.py:60] Depth 2/1000 time = 3.795072555541992
I0123 15:58:11.800867 140581834321920 ddar.py:60] Depth 3/1000 time = 2.3326268196105957
I0123 15:58:15.732723 140581834321920 ddar.py:60] Depth 4/1000 time = 3.9060425758361816
I0123 15:58:18.370913 140581834321920 ddar.py:60] Depth 5/1000 time = 2.637921094894409
I0123 15:58:18.374896 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:58:18.374952 140581834321920 alphageometry.py:566] LM output (score=-3.016003): "n : T e f e n 16 ;"
I0123 15:58:18.374986 140581834321920 alphageometry.py:567] Translation: "n = on_tline n e e f"

I0123 15:58:18.375024 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_tline n e e f ? eqratio k j j l b f f a"
I0123 15:58:18.375186 140581834321920 graph.py:498] 
I0123 15:58:18.375240 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_tline n e e f ? eqratio k j j l b f f a
I0123 15:58:21.186393 140581834321920 ddar.py:60] Depth 1/1000 time = 2.7533018589019775
I0123 15:58:23.825437 140581834321920 ddar.py:60] Depth 2/1000 time = 2.6388068199157715
I0123 15:58:27.493804 140581834321920 ddar.py:60] Depth 3/1000 time = 3.6681008338928223
I0123 15:58:31.717748 140581834321920 ddar.py:60] Depth 4/1000 time = 4.197991847991943
I0123 15:58:34.518596 140581834321920 ddar.py:60] Depth 5/1000 time = 2.800572633743286
I0123 15:58:34.522599 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:58:34.522677 140581834321920 alphageometry.py:566] LM output (score=-3.049039): "n : T c e f n 16 ;"
I0123 15:58:34.522713 140581834321920 alphageometry.py:567] Translation: "n = on_tline n f c e"

I0123 15:58:34.522760 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_tline n f c e ? eqratio k j j l b f f a"
I0123 15:58:34.522963 140581834321920 graph.py:498] 
I0123 15:58:34.523024 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_tline n f c e ? eqratio k j j l b f f a
I0123 15:58:37.354184 140581834321920 ddar.py:60] Depth 1/1000 time = 2.775995969772339
I0123 15:58:39.716480 140581834321920 ddar.py:60] Depth 2/1000 time = 2.3620760440826416
I0123 15:58:43.301737 140581834321920 ddar.py:60] Depth 3/1000 time = 3.5850298404693604
I0123 15:58:45.927642 140581834321920 ddar.py:60] Depth 4/1000 time = 2.6002578735351562
I0123 15:58:49.777994 140581834321920 ddar.py:60] Depth 5/1000 time = 3.8501336574554443
I0123 15:58:49.781846 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:58:49.781907 140581834321920 alphageometry.py:566] LM output (score=-3.060789): "n : T l k l n 16 ;"
I0123 15:58:49.781943 140581834321920 alphageometry.py:567] Translation: "n = on_tline n l l k"

I0123 15:58:49.781982 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_tline n l l k ? eqratio k j j l b f f a"
I0123 15:58:49.782148 140581834321920 graph.py:498] 
I0123 15:58:49.782201 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_tline n l l k ? eqratio k j j l b f f a
I0123 15:58:51.301892 140581834321920 ddar.py:60] Depth 1/1000 time = 1.4649345874786377
I0123 15:58:55.389766 140581834321920 ddar.py:60] Depth 2/1000 time = 4.0876383781433105
I0123 15:58:57.804988 140581834321920 ddar.py:60] Depth 3/1000 time = 2.414978265762329
I0123 15:59:01.869889 140581834321920 ddar.py:60] Depth 4/1000 time = 4.034284353256226
I0123 15:59:06.006136 140581834321920 ddar.py:60] Depth 5/1000 time = 4.136006593704224
I0123 15:59:06.010002 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:59:06.010056 140581834321920 alphageometry.py:566] LM output (score=-3.068406): "n : T f k i n 16 ;"
I0123 15:59:06.010091 140581834321920 alphageometry.py:567] Translation: "n = on_tline n i f k"

I0123 15:59:06.010128 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_tline n i f k ? eqratio k j j l b f f a"
I0123 15:59:06.010285 140581834321920 graph.py:498] 
I0123 15:59:06.010337 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_tline n i f k ? eqratio k j j l b f f a
I0123 15:59:07.542383 140581834321920 ddar.py:60] Depth 1/1000 time = 1.4778096675872803
I0123 15:59:10.381582 140581834321920 ddar.py:60] Depth 2/1000 time = 2.838956594467163
I0123 15:59:14.034466 140581834321920 ddar.py:60] Depth 3/1000 time = 3.6526410579681396
I0123 15:59:18.214127 140581834321920 ddar.py:60] Depth 4/1000 time = 4.15007472038269
I0123 15:59:21.323789 140581834321920 ddar.py:60] Depth 5/1000 time = 3.1094071865081787
I0123 15:59:25.786668 140581834321920 ddar.py:60] Depth 6/1000 time = 4.462616205215454
I0123 15:59:28.973234 140581834321920 ddar.py:60] Depth 7/1000 time = 3.177238941192627
I0123 15:59:28.973492 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:59:28.973544 140581834321920 alphageometry.py:566] LM output (score=-3.072943): "n : T c f c n 16 ;"
I0123 15:59:28.973578 140581834321920 alphageometry.py:567] Translation: "n = on_tline n c c f"

I0123 15:59:28.973616 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_tline n c c f ? eqratio k j j l b f f a"
I0123 15:59:28.973793 140581834321920 graph.py:498] 
I0123 15:59:28.973850 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_tline n c c f ? eqratio k j j l b f f a
I0123 15:59:31.775684 140581834321920 ddar.py:60] Depth 1/1000 time = 2.747537851333618
I0123 15:59:34.399188 140581834321920 ddar.py:60] Depth 2/1000 time = 2.6231822967529297
I0123 15:59:38.087826 140581834321920 ddar.py:60] Depth 3/1000 time = 3.688333749771118
I0123 15:59:42.258784 140581834321920 ddar.py:60] Depth 4/1000 time = 4.140725612640381
I0123 15:59:45.058084 140581834321920 ddar.py:60] Depth 5/1000 time = 2.7990670204162598
I0123 15:59:45.062002 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 15:59:45.062066 140581834321920 alphageometry.py:566] LM output (score=-3.140764): "n : D c g g n 16 ;"
I0123 15:59:45.062101 140581834321920 alphageometry.py:567] Translation: "n = on_circle n g c"

I0123 15:59:45.062137 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_circle n g c ? eqratio k j j l b f f a"
I0123 15:59:45.062301 140581834321920 graph.py:498] 
I0123 15:59:45.062370 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_circle n g c ? eqratio k j j l b f f a
I0123 15:59:48.537204 140581834321920 ddar.py:60] Depth 1/1000 time = 3.4102141857147217
I0123 15:59:52.315407 140581834321920 ddar.py:60] Depth 2/1000 time = 3.7779877185821533
I0123 15:59:56.960212 140581834321920 ddar.py:60] Depth 3/1000 time = 4.644551515579224
I0123 16:00:00.756732 140581834321920 ddar.py:60] Depth 4/1000 time = 3.77016019821167
I0123 16:00:05.743187 140581834321920 ddar.py:60] Depth 5/1000 time = 4.986176252365112
I0123 16:00:05.747654 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:00:05.747716 140581834321920 alphageometry.py:566] LM output (score=-3.160567): "n : D e l e n 16 D i l i n 17 ;"
I0123 16:00:05.747753 140581834321920 alphageometry.py:567] Translation: "n = on_circle n e l, on_circle n i l"

I0123 16:00:05.747791 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_circle n e l, on_circle n i l ? eqratio k j j l b f f a"
I0123 16:00:05.747978 140581834321920 graph.py:498] 
I0123 16:00:05.748031 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_circle n e l, on_circle n i l ? eqratio k j j l b f f a
I0123 16:00:09.346755 140581834321920 ddar.py:60] Depth 1/1000 time = 3.519735336303711
I0123 16:00:13.580621 140581834321920 ddar.py:60] Depth 2/1000 time = 4.233532428741455
I0123 16:00:18.758418 140581834321920 ddar.py:60] Depth 3/1000 time = 5.177462816238403
I0123 16:00:23.982930 140581834321920 ddar.py:60] Depth 4/1000 time = 5.224194049835205
I0123 16:00:28.347849 140581834321920 ddar.py:60] Depth 5/1000 time = 4.320967435836792
I0123 16:00:33.945013 140581834321920 ddar.py:60] Depth 6/1000 time = 5.596902847290039
I0123 16:00:33.950037 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:00:33.950106 140581834321920 alphageometry.py:566] LM output (score=-3.194852): "n : T e i e n 16 ;"
I0123 16:00:33.950142 140581834321920 alphageometry.py:567] Translation: "n = on_tline n e e i"

I0123 16:00:33.950180 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_tline n e e i ? eqratio k j j l b f f a"
I0123 16:00:33.950353 140581834321920 graph.py:498] 
I0123 16:00:33.950422 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_tline n e e i ? eqratio k j j l b f f a
I0123 16:00:35.474243 140581834321920 ddar.py:60] Depth 1/1000 time = 1.4682385921478271
I0123 16:00:39.184941 140581834321920 ddar.py:60] Depth 2/1000 time = 3.7104671001434326
I0123 16:00:41.653585 140581834321920 ddar.py:60] Depth 3/1000 time = 2.468390941619873
I0123 16:00:45.416527 140581834321920 ddar.py:60] Depth 4/1000 time = 3.762653112411499
I0123 16:00:48.176682 140581834321920 ddar.py:60] Depth 5/1000 time = 2.7376675605773926
I0123 16:00:52.217314 140581834321920 ddar.py:60] Depth 6/1000 time = 4.040375232696533
I0123 16:00:52.221263 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:00:52.221330 140581834321920 alphageometry.py:566] LM output (score=-3.209188): "n : T f k f n 16 ;"
I0123 16:00:52.221368 140581834321920 alphageometry.py:567] Translation: "n = on_tline n f f k"

I0123 16:00:52.221406 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_tline n f f k ? eqratio k j j l b f f a"
I0123 16:00:52.221584 140581834321920 graph.py:498] 
I0123 16:00:52.221646 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_tline n f f k ? eqratio k j j l b f f a
I0123 16:00:53.781052 140581834321920 ddar.py:60] Depth 1/1000 time = 1.5049996376037598
I0123 16:00:57.919314 140581834321920 ddar.py:60] Depth 2/1000 time = 4.138004541397095
I0123 16:01:00.346306 140581834321920 ddar.py:60] Depth 3/1000 time = 2.4266300201416016
I0123 16:01:04.466900 140581834321920 ddar.py:60] Depth 4/1000 time = 4.089905500411987
I0123 16:01:08.615170 140581834321920 ddar.py:60] Depth 5/1000 time = 4.147955894470215
I0123 16:01:08.619115 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:01:08.619175 140581834321920 alphageometry.py:566] LM output (score=-3.230992): "n : T c k i n 16 ;"
I0123 16:01:08.619210 140581834321920 alphageometry.py:567] Translation: "n = on_tline n i c k"

I0123 16:01:08.619247 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_tline n i c k ? eqratio k j j l b f f a"
I0123 16:01:08.619422 140581834321920 graph.py:498] 
I0123 16:01:08.619490 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_tline n i c k ? eqratio k j j l b f f a
I0123 16:01:10.142419 140581834321920 ddar.py:60] Depth 1/1000 time = 1.467581033706665
I0123 16:01:14.334837 140581834321920 ddar.py:60] Depth 2/1000 time = 4.192190408706665
I0123 16:01:16.781713 140581834321920 ddar.py:60] Depth 3/1000 time = 2.4466185569763184
I0123 16:01:20.982108 140581834321920 ddar.py:60] Depth 4/1000 time = 4.169806480407715
I0123 16:01:24.096992 140581834321920 ddar.py:60] Depth 5/1000 time = 3.1146316528320312
I0123 16:01:28.544849 140581834321920 ddar.py:60] Depth 6/1000 time = 4.447550535202026
I0123 16:01:31.736946 140581834321920 ddar.py:60] Depth 7/1000 time = 3.1822757720947266
I0123 16:01:31.737236 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:01:31.737287 140581834321920 alphageometry.py:566] LM output (score=-3.242669): "n : C g m n 16 P a f d n 17 ;"
I0123 16:01:31.737323 140581834321920 alphageometry.py:567] Translation: "n = on_line n g m, on_pline n d a f"

I0123 16:01:31.737360 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_line n g m, on_pline n d a f ? eqratio k j j l b f f a"
I0123 16:01:31.737524 140581834321920 graph.py:498] 
I0123 16:01:31.737576 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_line n g m, on_pline n d a f ? eqratio k j j l b f f a
I0123 16:01:34.685812 140581834321920 ddar.py:60] Depth 1/1000 time = 2.8856749534606934
I0123 16:01:38.838743 140581834321920 ddar.py:60] Depth 2/1000 time = 4.152686834335327
I0123 16:01:41.629215 140581834321920 ddar.py:60] Depth 3/1000 time = 2.7902159690856934
I0123 16:01:45.744106 140581834321920 ddar.py:60] Depth 4/1000 time = 4.114605188369751
I0123 16:01:50.266340 140581834321920 ddar.py:60] Depth 5/1000 time = 4.497969388961792
I0123 16:01:53.391037 140581834321920 ddar.py:60] Depth 6/1000 time = 3.1244099140167236
I0123 16:01:57.833744 140581834321920 ddar.py:60] Depth 7/1000 time = 4.435223579406738
I0123 16:01:57.834403 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:01:57.834484 140581834321920 alphageometry.py:566] LM output (score=-3.262421): "n : D e l e n 16 D f l f n 17 ;"
I0123 16:01:57.834520 140581834321920 alphageometry.py:567] Translation: "n = on_circle n e l, on_circle n f l"

I0123 16:01:57.834566 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_circle n e l, on_circle n f l ? eqratio k j j l b f f a"
I0123 16:01:57.834776 140581834321920 graph.py:498] 
I0123 16:01:57.834843 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_circle n e l, on_circle n f l ? eqratio k j j l b f f a
I0123 16:02:00.910814 140581834321920 ddar.py:60] Depth 1/1000 time = 2.990027904510498
I0123 16:02:04.154040 140581834321920 ddar.py:60] Depth 2/1000 time = 3.242973566055298
I0123 16:02:08.312580 140581834321920 ddar.py:60] Depth 3/1000 time = 4.158249855041504
I0123 16:02:11.133199 140581834321920 ddar.py:60] Depth 4/1000 time = 2.8203184604644775
I0123 16:02:15.769387 140581834321920 ddar.py:60] Depth 5/1000 time = 4.599674701690674
I0123 16:02:19.085899 140581834321920 ddar.py:60] Depth 6/1000 time = 3.316249370574951
I0123 16:02:19.091562 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:02:19.091622 140581834321920 alphageometry.py:566] LM output (score=-3.316951): "n : T a f a n 16 ;"
I0123 16:02:19.091657 140581834321920 alphageometry.py:567] Translation: "n = on_tline n a a f"

I0123 16:02:19.091696 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_tline n a a f ? eqratio k j j l b f f a"
I0123 16:02:19.091858 140581834321920 graph.py:498] 
I0123 16:02:19.091909 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_tline n a a f ? eqratio k j j l b f f a
I0123 16:02:21.865092 140581834321920 ddar.py:60] Depth 1/1000 time = 2.7176907062530518
I0123 16:02:24.688460 140581834321920 ddar.py:60] Depth 2/1000 time = 2.823140859603882
I0123 16:02:28.476444 140581834321920 ddar.py:60] Depth 3/1000 time = 3.7877399921417236
I0123 16:02:31.324778 140581834321920 ddar.py:60] Depth 4/1000 time = 2.819146156311035
I0123 16:02:35.468165 140581834321920 ddar.py:60] Depth 5/1000 time = 4.143078804016113
I0123 16:02:35.472251 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:02:35.472334 140581834321920 alphageometry.py:566] LM output (score=-3.327438): "n : T c f i n 16 ;"
I0123 16:02:35.472370 140581834321920 alphageometry.py:567] Translation: "n = on_tline n i c f"

I0123 16:02:35.472417 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_tline n i c f ? eqratio k j j l b f f a"
I0123 16:02:35.472604 140581834321920 graph.py:498] 
I0123 16:02:35.472666 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_bline m e c; n = on_tline n i c f ? eqratio k j j l b f f a
I0123 16:02:36.999284 140581834321920 ddar.py:60] Depth 1/1000 time = 1.4714245796203613
I0123 16:02:40.976606 140581834321920 ddar.py:60] Depth 2/1000 time = 3.977083206176758
I0123 16:02:44.808079 140581834321920 ddar.py:60] Depth 3/1000 time = 3.831207275390625
I0123 16:02:47.714129 140581834321920 ddar.py:60] Depth 4/1000 time = 2.876051664352417
I0123 16:02:52.171055 140581834321920 ddar.py:60] Depth 5/1000 time = 4.456677436828613
I0123 16:02:55.342175 140581834321920 ddar.py:60] Depth 6/1000 time = 3.1708483695983887
I0123 16:02:59.873021 140581834321920 ddar.py:60] Depth 7/1000 time = 4.521255016326904
I0123 16:02:59.873317 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:02:59.873426 140581834321920 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C b c d 00 ; e : C a c e 01 ; f : C a b f 02 ; g : D c g d g 03 D d g e g 04 ; h : D b h d h 05 D d h f h 06 ; i : D a i f i 07 D e i f i 08 ; j : C c f j 09 D c g g j 10 ; k : C c f k 11 D f h h k 12 ; l : C c f l 13 D f i i l 14 ? / j k j l f b f a {F1} x00 m : D d g g m 15 ; x00
I0123 16:03:05.553762 140581834321920 alphageometry.py:566] LM output (score=-1.001739): "n : C e f n 16 D e n f n 17 ;"
I0123 16:03:05.553970 140581834321920 alphageometry.py:567] Translation: "n = on_line n e f, on_bline n f e"

I0123 16:03:05.554016 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g d; n = on_line n e f, on_bline n f e ? eqratio k j j l b f f a"
I0123 16:03:05.554230 140581834321920 graph.py:498] 
I0123 16:03:05.554285 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g d; n = on_line n e f, on_bline n f e ? eqratio k j j l b f f a
I0123 16:03:07.544348 140581834321920 ddar.py:60] Depth 1/1000 time = 1.9250977039337158
I0123 16:03:13.022217 140581834321920 ddar.py:60] Depth 2/1000 time = 5.477644205093384
I0123 16:03:17.863686 140581834321920 ddar.py:60] Depth 3/1000 time = 4.84121561050415
I0123 16:03:21.309118 140581834321920 ddar.py:60] Depth 4/1000 time = 3.444953441619873
I0123 16:03:26.322913 140581834321920 ddar.py:60] Depth 5/1000 time = 4.995948553085327
I0123 16:03:31.345262 140581834321920 ddar.py:60] Depth 6/1000 time = 5.022104024887085
I0123 16:03:31.349707 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:03:31.349762 140581834321920 alphageometry.py:566] LM output (score=-1.351466): "n : C c m n 16 D c n m n 17 ;"
I0123 16:03:31.349797 140581834321920 alphageometry.py:567] Translation: "n = on_line n c m, on_bline n m c"

I0123 16:03:31.349834 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g d; n = on_line n c m, on_bline n m c ? eqratio k j j l b f f a"
I0123 16:03:31.349996 140581834321920 graph.py:498] 
I0123 16:03:31.350053 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g d; n = on_line n c m, on_bline n m c ? eqratio k j j l b f f a
I0123 16:03:33.331146 140581834321920 ddar.py:60] Depth 1/1000 time = 1.9174761772155762
I0123 16:03:38.532317 140581834321920 ddar.py:60] Depth 2/1000 time = 5.200923204421997
I0123 16:03:43.394706 140581834321920 ddar.py:60] Depth 3/1000 time = 4.862106800079346
I0123 16:03:46.812590 140581834321920 ddar.py:60] Depth 4/1000 time = 3.4173569679260254
I0123 16:03:51.849702 140581834321920 ddar.py:60] Depth 5/1000 time = 5.019845485687256
I0123 16:03:56.869668 140581834321920 ddar.py:60] Depth 6/1000 time = 5.019675970077515
I0123 16:03:56.874181 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:03:56.874241 140581834321920 alphageometry.py:566] LM output (score=-1.658641): "n : C m j n 16 D m n j n 17 ;"
I0123 16:03:56.874275 140581834321920 alphageometry.py:567] Translation: "n = on_line n m j, on_bline n j m"

I0123 16:03:56.874312 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g d; n = on_line n m j, on_bline n j m ? eqratio k j j l b f f a"
I0123 16:03:56.874487 140581834321920 graph.py:498] 
I0123 16:03:56.874555 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g d; n = on_line n m j, on_bline n j m ? eqratio k j j l b f f a
I0123 16:03:58.846968 140581834321920 ddar.py:60] Depth 1/1000 time = 1.9065372943878174
I0123 16:04:03.883716 140581834321920 ddar.py:60] Depth 2/1000 time = 5.036507606506348
I0123 16:04:08.745737 140581834321920 ddar.py:60] Depth 3/1000 time = 4.861778259277344
I0123 16:04:12.206682 140581834321920 ddar.py:60] Depth 4/1000 time = 3.4604578018188477
I0123 16:04:17.232992 140581834321920 ddar.py:60] Depth 5/1000 time = 5.009408712387085
I0123 16:04:22.296514 140581834321920 ddar.py:60] Depth 6/1000 time = 5.063257455825806
I0123 16:04:22.300884 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:04:22.300940 140581834321920 alphageometry.py:566] LM output (score=-1.659005): "n : C e j n 16 D e n j n 17 ;"
I0123 16:04:22.300974 140581834321920 alphageometry.py:567] Translation: "n = on_line n e j, on_bline n j e"

I0123 16:04:22.301009 140581834321920 alphageometry.py:576] Solving: "a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g d; n = on_line n e j, on_bline n j e ? eqratio k j j l b f f a"
I0123 16:04:22.301172 140581834321920 graph.py:498] 
I0123 16:04:22.301223 140581834321920 graph.py:499] a b c = triangle a b c; d = on_line d c b; e = on_line e c a; f = on_line f b a; g = circle g c d e; h = circle h b d f; i = circle i a f e; j = on_circle j g c, on_line j f c; k = on_circle k h f, on_line k c f; l = on_circle l i f, on_line l c f; m = on_circle m g d; n = on_line n e j, on_bline n j e ? eqratio k j j l b f f a
I0123 16:04:24.269032 140581834321920 ddar.py:60] Depth 1/1000 time = 1.9037353992462158
I0123 16:04:29.784235 140581834321920 ddar.py:60] Depth 2/1000 time = 5.514963626861572
I0123 16:04:33.269767 140581834321920 ddar.py:60] Depth 3/1000 time = 3.485281467437744
I0123 16:04:33.270257 140581834321920 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:04:33.270298 140581834321920 alphageometry.py:585] Timeout.
