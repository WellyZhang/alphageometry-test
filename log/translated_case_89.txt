I0123 11:01:46.519410 140455392419840 inference_utils.py:69] Parsing gin configuration.
I0123 11:01:46.519556 140455392419840 inference_utils.py:71] Added Gin search path meliad_lib/meliad/transformer/configs
I0123 11:01:46.519852 140455392419840 inference_utils.py:74] Loading Gin config file base_htrans.gin
I0123 11:01:46.519889 140455392419840 inference_utils.py:74] Loading Gin config file size/medium_150M.gin
I0123 11:01:46.519921 140455392419840 inference_utils.py:74] Loading Gin config file options/positions_t5.gin
I0123 11:01:46.519953 140455392419840 inference_utils.py:74] Loading Gin config file options/lr_cosine_decay.gin
I0123 11:01:46.519982 140455392419840 inference_utils.py:74] Loading Gin config file options/seq_1024_nocache.gin
I0123 11:01:46.520014 140455392419840 inference_utils.py:74] Loading Gin config file geometry_150M_generate.gin
I0123 11:01:46.520046 140455392419840 inference_utils.py:76] Overriding Gin param DecoderOnlyLanguageModelGenerate.output_token_losses=True
I0123 11:01:46.520077 140455392419840 inference_utils.py:76] Overriding Gin param TransformerTaskConfig.batch_size=32
I0123 11:01:46.520106 140455392419840 inference_utils.py:76] Overriding Gin param TransformerTaskConfig.sequence_length=128
I0123 11:01:46.520134 140455392419840 inference_utils.py:76] Overriding Gin param Trainer.restore_state_variables=False
I0123 11:01:46.520191 140455392419840 resource_reader.py:50] system_path_file_exists:base_htrans.gin
E0123 11:01:46.520359 140455392419840 resource_reader.py:55] Path not found: base_htrans.gin
I0123 11:01:46.520616 140455392419840 resource_reader.py:50] system_path_file_exists:trainer_configuration.gin
E0123 11:01:46.520730 140455392419840 resource_reader.py:55] Path not found: trainer_configuration.gin
I0123 11:01:46.527369 140455392419840 resource_reader.py:50] system_path_file_exists:size/medium_150M.gin
E0123 11:01:46.527503 140455392419840 resource_reader.py:55] Path not found: size/medium_150M.gin
I0123 11:01:46.527839 140455392419840 resource_reader.py:50] system_path_file_exists:options/positions_t5.gin
E0123 11:01:46.527954 140455392419840 resource_reader.py:55] Path not found: options/positions_t5.gin
I0123 11:01:46.528241 140455392419840 resource_reader.py:50] system_path_file_exists:options/lr_cosine_decay.gin
E0123 11:01:46.528347 140455392419840 resource_reader.py:55] Path not found: options/lr_cosine_decay.gin
I0123 11:01:46.528763 140455392419840 resource_reader.py:50] system_path_file_exists:options/seq_1024_nocache.gin
E0123 11:01:46.528870 140455392419840 resource_reader.py:55] Path not found: options/seq_1024_nocache.gin
I0123 11:01:46.532760 140455392419840 training_loop.py:334] ==== Training loop: initializing model ====
I0123 11:01:46.631384 140455392419840 xla_bridge.py:660] Unable to initialize backend 'rocm': NOT_FOUND: Could not find registered platform with name: "rocm". Available platform names are: CUDA
I0123 11:01:46.632430 140455392419840 xla_bridge.py:660] Unable to initialize backend 'tpu': INTERNAL: Failed to open libtpu.so: libtpu.so: cannot open shared object file: No such file or directory
I0123 11:01:46.639234 140455392419840 training_loop.py:335] Process 0 of 1
I0123 11:01:46.639301 140455392419840 training_loop.py:336] Local device count = 1
I0123 11:01:46.639344 140455392419840 training_loop.py:337] Number of replicas = 1
I0123 11:01:46.639379 140455392419840 training_loop.py:339] Using random number seed 42
I0123 11:01:47.142195 140455392419840 training_loop.py:359] Initializing the model.
I0123 11:01:47.530737 140455392419840 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.531067 140455392419840 decoder_stack.py:316] dstack: scanning over 1 windows.
I0123 11:01:47.531173 140455392419840 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 11:01:47.531255 140455392419840 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 11:01:47.531335 140455392419840 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 11:01:47.531421 140455392419840 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 11:01:47.531497 140455392419840 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 11:01:47.531569 140455392419840 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 11:01:47.531641 140455392419840 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 11:01:47.531712 140455392419840 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 11:01:47.531782 140455392419840 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 11:01:47.531854 140455392419840 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 11:01:47.531926 140455392419840 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 11:01:47.531996 140455392419840 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 11:01:47.532040 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:47.532088 140455392419840 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 11:01:47.532204 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:47.532245 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:47.532278 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:47.534331 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.539704 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:47.550490 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.550786 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:47.555245 140455392419840 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:01:47.566076 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:47.566139 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:47.566180 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:47.566216 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.566283 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.567510 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.567595 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.568339 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.570889 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.577239 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.578593 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.578679 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:47.578718 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:47.578784 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.578923 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:47.579276 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:47.579329 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:47.581303 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.582541 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:47.585545 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.585652 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:47.586233 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:47.596788 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:47.605975 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.606082 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:47.606394 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.606482 140455392419840 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 11:01:47.606599 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:47.606642 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:47.606678 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:47.608602 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.611207 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:47.617388 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.617679 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:47.620407 140455392419840 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:01:47.624361 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:47.624421 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:47.624460 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:47.624494 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.624560 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.625143 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.625226 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.625601 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.626416 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.628995 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.629635 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.629729 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:47.629768 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:47.629832 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.629969 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:47.630308 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:47.630357 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:47.632352 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.632455 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:47.635049 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.635136 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:47.635581 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:47.637989 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:47.639950 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.640051 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:47.640348 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.640434 140455392419840 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 11:01:47.640548 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:47.640590 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:47.640625 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:47.642951 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.645411 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:47.651173 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.651449 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:47.654197 140455392419840 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:01:47.658128 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:47.658187 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:47.658224 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:47.658257 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.658323 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.658893 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.658973 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.659334 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.660118 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.662638 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.663313 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.663395 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:47.663433 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:47.663495 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.663626 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:47.663962 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:47.664011 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:47.665938 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.666037 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:47.668571 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.668662 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:47.669156 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:47.671446 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:47.673383 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.673483 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:47.673789 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.673875 140455392419840 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 11:01:47.673988 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:47.674032 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:47.674065 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:47.675991 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.678428 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:47.684092 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.684369 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:47.687064 140455392419840 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:01:47.690912 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:47.690971 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:47.691008 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:47.691041 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.691107 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.691682 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.691766 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.692132 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.692921 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.695519 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.696164 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.696247 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:47.696286 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:47.696349 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.696489 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:47.696824 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:47.696873 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:47.698810 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.698913 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:47.701555 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.701653 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:47.702100 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:47.704406 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:47.706342 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.706446 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:47.706745 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.706830 140455392419840 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 11:01:47.706943 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:47.706987 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:47.707020 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:47.708958 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.711398 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:47.717262 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.717530 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:47.720744 140455392419840 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:01:47.724500 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:47.724559 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:47.724600 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:47.724633 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.724697 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.725264 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.725345 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.725718 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.726502 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.729068 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.729715 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.729798 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:47.729836 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:47.729897 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.730037 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:47.730370 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:47.730417 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:47.732318 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.732418 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:47.734985 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.735071 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:47.735509 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:47.737788 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:47.739740 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.739840 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:47.740137 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.740391 140455392419840 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 11:01:47.740503 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:47.740547 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:47.740580 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:47.742455 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.744964 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:47.750787 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.751052 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:47.753749 140455392419840 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:01:47.757599 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:47.757663 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:47.757703 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:47.757736 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.757801 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.758411 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.758493 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.758865 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.759663 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.762250 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.763042 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.763122 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:47.763159 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:47.763224 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.763357 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:47.763682 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:47.763729 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:47.765645 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.765743 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:47.768309 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.768393 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:47.768827 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:47.771150 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:47.773064 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.773164 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:47.773465 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.773552 140455392419840 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 11:01:47.773673 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:47.773718 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:47.773751 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:47.775615 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.778079 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:47.783722 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.783993 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:47.786663 140455392419840 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:01:47.790445 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:47.790504 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:47.790542 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:47.790574 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.790639 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.791209 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.791291 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.791662 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.792445 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.794957 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.795586 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.795671 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:47.795709 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:47.795771 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.795907 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:47.796239 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:47.796287 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:47.798564 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.798664 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:47.801164 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:47.801250 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:47.801693 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:48.008574 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.011082 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.011306 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.011648 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.011757 140455392419840 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 11:01:48.011884 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:48.011930 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:48.011968 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:48.014202 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.016817 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:48.022756 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.023063 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:48.025817 140455392419840 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:01:48.029859 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:48.029920 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:48.029960 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:48.029994 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.030060 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.030733 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.030816 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.031185 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.031989 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.034602 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.035260 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.035343 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:48.035381 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:48.035443 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.035574 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:48.035911 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:48.035959 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.037860 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.037958 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.040486 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.040569 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:48.041066 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:48.043404 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.045330 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.045438 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.045746 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.045833 140455392419840 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 11:01:48.045948 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:48.045991 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:48.046025 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:48.047966 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.050382 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:48.056079 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.056353 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:48.059108 140455392419840 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:01:48.062945 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:48.063005 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:48.063043 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:48.063076 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.063142 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.063734 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.063814 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.064180 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.064967 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.067549 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.068186 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.068267 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:48.068303 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:48.068365 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.068496 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:48.068832 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:48.068880 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.070801 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.070902 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.073486 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.073570 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:48.074021 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:48.076331 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.078274 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.078374 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.078672 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.078764 140455392419840 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 11:01:48.078879 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:48.078922 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:48.078956 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:48.080883 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.083471 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:48.089459 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.089750 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:48.092482 140455392419840 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:01:48.096272 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:48.096332 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:48.096371 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:48.096404 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.096468 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.097042 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.097123 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.097482 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.098328 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.100825 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.101460 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.101544 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:48.101581 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:48.101650 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.101787 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:48.102126 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:48.102174 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.104083 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.104181 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.106756 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.106846 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:48.107292 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:48.109572 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.111531 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.111637 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.111935 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.112030 140455392419840 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 11:01:48.112143 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:48.112188 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:48.112221 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:48.114261 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.116733 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:48.122276 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.122545 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:48.125259 140455392419840 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:01:48.129044 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:48.129104 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:48.129142 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:48.129176 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.129285 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.129870 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.129952 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.130318 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.131118 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.133924 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.134563 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.134645 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:48.134683 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:48.134744 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.134882 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:48.135214 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:48.135263 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.137225 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.137324 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.140248 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.140335 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:48.140776 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:48.143120 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.145038 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.145137 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.145436 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.145521 140455392419840 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 11:01:48.145652 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:48.145698 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:48.145732 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:48.147600 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.150084 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:48.155693 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.155962 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:48.158622 140455392419840 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:01:48.162771 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:48.162832 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:48.162870 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:48.162902 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.162967 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.163545 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.163626 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.163990 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.164776 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.167284 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.167924 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.168006 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:48.168043 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:48.168106 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.168242 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:48.168571 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:48.168618 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.170573 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.170675 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.173194 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.173278 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:48.173725 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:48.176046 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.177965 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.178068 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.178362 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.178663 140455392419840 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 11:01:48.178738 140455392419840 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 11:01:48.178808 140455392419840 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 11:01:48.178869 140455392419840 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 11:01:48.178927 140455392419840 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 11:01:48.178983 140455392419840 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 11:01:48.179038 140455392419840 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 11:01:48.179092 140455392419840 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 11:01:48.179147 140455392419840 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 11:01:48.179201 140455392419840 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 11:01:48.179255 140455392419840 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 11:01:48.179310 140455392419840 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 11:01:48.179350 140455392419840 decoder_stack.py:344] dstack: Final layernorm.
I0123 11:01:48.182957 140455392419840 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:01:48.230781 140455392419840 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.230873 140455392419840 decoder_stack.py:333] dstack: autoregressive generator.
I0123 11:01:48.230930 140455392419840 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 11:01:48.231038 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:48.231081 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:48.231112 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:48.231177 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.234025 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:48.239589 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.239857 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:48.242524 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:01:48.259153 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:48.259214 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:48.259252 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:48.259285 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.259350 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.260504 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.260589 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.261312 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.263342 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.268157 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.269469 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.269562 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:48.269600 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:48.269670 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.269810 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:48.269929 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:48.269972 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.275156 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.275580 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.278797 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.278899 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:48.279031 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:48.281681 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.283784 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.283890 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.284192 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.284327 140455392419840 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 11:01:48.284455 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:48.284505 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:48.284540 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:48.284631 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.287003 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:48.292529 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.292831 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:48.295699 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:01:48.310337 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:48.310409 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:48.310454 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:48.310490 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.310559 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.311265 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.311349 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.311727 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.312447 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.315163 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.315804 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.315888 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:48.315943 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:48.316007 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.316143 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:48.316262 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:48.316307 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.318252 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.318352 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.320776 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.320860 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:48.320973 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:48.323227 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.325171 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.325274 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.325567 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.325669 140455392419840 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 11:01:48.325791 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:48.325835 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:48.325869 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:48.325940 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.328204 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:48.333914 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.334179 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:48.337078 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:01:48.349594 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:48.349662 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:48.349701 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:48.349733 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.349802 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.350358 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.350442 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.350805 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.351502 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.353987 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.354616 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.354701 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:48.354737 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:48.354806 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.354940 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:48.355058 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:48.355102 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.357021 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.357125 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.359581 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.359669 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:48.359780 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:48.362026 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.363971 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.364074 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.364369 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.364458 140455392419840 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 11:01:48.364572 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:48.364617 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:48.364650 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:48.364720 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.367002 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:48.372474 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.372741 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:48.375438 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:01:48.388030 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:48.388092 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:48.388130 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:48.388162 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.388230 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.388796 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.388879 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.389244 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.389963 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.392464 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.393097 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.393184 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:48.393222 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:48.393284 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.393432 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:48.393551 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:48.393596 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.395883 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.395987 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.398447 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.398537 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:48.398653 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:48.400884 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.402794 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.402897 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.403188 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.403276 140455392419840 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 11:01:48.403390 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:48.403434 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:48.403467 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:48.403538 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.405870 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:48.411377 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.411653 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:48.414302 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:01:48.426899 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:48.426960 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:48.427002 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:48.427035 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.427101 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.427662 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.427748 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.428118 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.428821 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.431390 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.432025 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.432111 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:48.432149 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:48.432211 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.432357 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:48.432477 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:48.432523 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.434602 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.434702 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.437308 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.437396 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:48.437509 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:48.439827 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.441734 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.441838 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.442131 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.442219 140455392419840 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 11:01:48.442331 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:48.442372 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:48.442407 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:48.442479 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.444771 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:48.450297 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.450558 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:48.453279 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:01:48.465924 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:48.465986 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:48.466025 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:48.466058 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.466129 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.466692 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.466776 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.467143 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.467842 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.470349 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.470982 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.471065 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:48.471102 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:48.471163 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.471302 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:48.471427 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:48.471473 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.473443 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.473543 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.475989 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.476078 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:48.476191 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:48.478462 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.480339 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.480443 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.480735 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.480823 140455392419840 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 11:01:48.480937 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:48.480983 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:48.481016 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:48.481085 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.483349 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:48.488896 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.489161 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:48.491761 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:01:48.504754 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:48.504814 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:48.504852 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:48.504884 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.504947 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.505504 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.505584 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.505960 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.506649 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.509116 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.509790 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.509873 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:48.509910 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:48.509972 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.510107 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:48.510222 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:48.510272 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.512155 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.512253 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.514674 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.514759 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:48.514872 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:48.517089 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.519032 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.519133 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.519427 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.519513 140455392419840 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 11:01:48.519627 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:48.519670 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:48.519703 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:48.519772 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.522032 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:48.527462 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.527737 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:48.530415 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:01:48.542897 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:48.542958 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:48.542996 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:48.543029 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.543095 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.543701 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.543781 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.544146 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.544840 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.547330 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.547967 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.548049 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:48.548087 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:48.548151 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.548287 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:48.548404 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:48.548455 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.550374 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.550475 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.552951 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.553040 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:48.553152 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:48.555389 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.557267 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.557374 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.557670 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.557759 140455392419840 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 11:01:48.557870 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:48.557913 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:48.557945 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:48.558013 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.560262 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:48.565773 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.566038 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:48.568655 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:01:48.581230 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:48.581290 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:48.581328 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:48.581361 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.581432 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.582001 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.582084 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.582614 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.583306 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.585808 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.586493 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.586576 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:48.586614 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:48.586677 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.586812 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:48.586929 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:48.586972 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.588872 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.588972 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.591400 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.591486 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:48.591599 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:48.593828 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.595769 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.595870 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.596160 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.596246 140455392419840 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 11:01:48.596358 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:48.596402 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:48.596435 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:48.596502 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.598750 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:48.604176 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.604443 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:48.607450 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:01:48.619874 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:48.619935 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:48.619973 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:48.620005 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.620070 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.620676 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.620756 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.621113 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.621814 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.624278 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.624894 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.624975 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:48.625010 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:48.625070 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.625201 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:48.625318 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:48.625362 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.627242 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.627348 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.629829 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.629915 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:48.630028 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:48.632231 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.634100 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.634201 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.634491 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.634576 140455392419840 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 11:01:48.634686 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:48.634730 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:48.634762 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:48.634829 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.637077 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:48.642620 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.642882 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:48.645524 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:01:48.658000 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:48.658061 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:48.658101 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:48.658133 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.658198 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.658754 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.658835 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.659199 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.659894 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.662380 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.663040 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.663121 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:48.663157 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:48.663217 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.663357 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:48.663473 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:48.663517 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.665412 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.665517 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.667953 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.668038 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:48.668149 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:48.670351 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.672279 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.672380 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.672672 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.672757 140455392419840 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 11:01:48.672869 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:48.672913 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:48.672947 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:48.673015 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.675267 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:48.680711 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.680979 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:48.683870 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:01:48.696608 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:48.696672 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:48.696710 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:48.696743 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.696813 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.697379 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.697462 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.697836 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.698542 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.701088 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.701721 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.701805 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:48.701843 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:48.701903 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.702040 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:48.702160 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:48.702205 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.704079 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.704179 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.706619 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.706707 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:48.706820 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:48.709437 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.711308 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.711413 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.711707 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.711814 140455392419840 decoder_stack.py:344] dstack: Final layernorm.
I0123 11:01:48.714768 140455392419840 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:01:48.772093 140455392419840 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.772192 140455392419840 decoder_stack.py:333] dstack: autoregressive generator.
I0123 11:01:48.772255 140455392419840 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 11:01:48.772365 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:48.772410 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:48.772444 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:48.772512 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.774883 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:48.780287 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.780553 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:48.783127 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:01:48.795700 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:48.795761 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:48.795800 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:48.795832 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.795898 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.796462 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.796545 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.796903 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.797585 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.800123 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.800737 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.800821 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:48.800858 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:48.800919 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.801053 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:48.801179 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:48.801225 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.803077 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.803177 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.805564 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.805655 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:48.805776 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:48.808019 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.809880 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.809982 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.810273 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.810361 140455392419840 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 11:01:48.810473 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:48.810515 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:48.810549 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:48.810616 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.812854 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:48.818187 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.818449 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:48.821099 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:01:48.833546 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:48.833609 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:48.833654 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:48.833690 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.833757 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.834322 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.834404 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.834765 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.835446 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.837970 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.838586 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.838671 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:48.838708 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:48.838770 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.838904 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:48.839022 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:48.839076 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.840916 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.841016 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.843425 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.843513 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:48.843625 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:48.845885 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.847731 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.847833 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.848123 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.848210 140455392419840 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 11:01:48.848320 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:48.848362 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:48.848396 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:48.848461 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.850718 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:48.856062 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.856326 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:48.859270 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:01:48.871844 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:48.871908 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:48.871947 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:48.871981 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.872048 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.872611 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.872693 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.873054 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.873751 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.876703 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.877327 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.877411 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:48.877449 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:48.877510 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.877648 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:48.877772 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:48.877816 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.879662 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.879764 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.882164 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.882251 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:48.882362 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:48.884603 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.886616 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.886718 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.887008 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.887095 140455392419840 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 11:01:48.887205 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:48.887247 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:48.887282 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:48.887348 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.889572 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:48.894898 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.895164 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:48.897830 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:01:48.910124 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:48.910187 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:48.910227 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:48.910272 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.910338 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.910898 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.910980 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.911340 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.912031 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.914579 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.915200 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.915282 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:48.915318 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:48.915380 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.915515 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:48.915631 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:48.915676 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.917548 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.917653 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.920079 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.920162 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:48.920279 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:48.922570 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.924423 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.924521 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.924812 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.924898 140455392419840 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 11:01:48.925007 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:48.925050 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:48.925082 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:48.925148 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.927380 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:48.932748 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.933011 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:48.935696 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:01:48.948098 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:48.948157 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:48.948194 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:48.948226 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.948290 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.948853 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.948932 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.949288 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.949988 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.952533 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.953149 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.953228 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:48.953264 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:48.953323 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.953456 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:48.953570 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:48.953612 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.955473 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.955577 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.957990 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.958073 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:48.958184 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:48.960458 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.962322 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.962421 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.962707 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.962791 140455392419840 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 11:01:48.962899 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:48.962940 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:48.962972 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:48.963037 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.965269 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:48.970629 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.970893 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:48.973571 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:01:48.986117 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:48.986179 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:48.986217 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:48.986248 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.986313 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.986877 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.986959 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.987318 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.988011 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.990991 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.991612 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.991693 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:48.991730 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:48.991790 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.991919 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:48.992035 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:48.992079 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:48.993943 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.994050 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:48.996462 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:48.996546 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:48.996657 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:48.998937 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:49.000797 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.000898 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:49.001188 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.001275 140455392419840 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 11:01:49.001384 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:49.001424 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:49.001457 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:49.001521 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.003752 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:49.009160 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.009423 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:49.012136 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:01:49.024500 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:49.024561 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:49.024599 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:49.024631 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.024696 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.025263 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.025344 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.025723 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.026425 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.028982 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.029614 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.029703 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:49.029739 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:49.029799 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.029932 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:49.030047 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:49.030091 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:49.031959 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.032057 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:49.034486 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.034572 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:49.034684 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:49.036951 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:49.038807 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.038909 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:49.039199 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.039287 140455392419840 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 11:01:49.039397 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:49.039439 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:49.039472 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:49.039537 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.041796 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:49.047193 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.047457 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:49.050308 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:01:49.062601 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:49.062659 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:49.062695 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:49.062726 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.062788 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.063353 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.063433 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.063791 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.064486 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.067044 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.067675 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.067756 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:49.067792 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:49.067853 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.067983 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:49.068095 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:49.068137 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:49.069987 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.070086 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:49.072474 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.072563 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:49.072677 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:49.074947 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:49.076782 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.076880 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:49.077169 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.077254 140455392419840 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 11:01:49.077364 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:49.077405 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:49.077437 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:49.077501 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.079720 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:49.085079 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.085340 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:49.088008 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:01:49.100342 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:49.100400 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:49.100436 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:49.100469 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.100534 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.101083 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.101162 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.101520 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.102209 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.105130 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.105755 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.105835 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:49.105871 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:49.105931 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.106061 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:49.106174 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:49.106216 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:49.108067 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.108165 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:49.110562 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.110653 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:49.110767 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:49.113048 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:49.114898 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.114996 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:49.115283 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.115370 140455392419840 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 11:01:49.115480 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:49.115522 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:49.115554 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:49.115619 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.117851 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:49.123238 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.123501 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:49.126178 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:01:49.144208 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:49.144386 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:49.144430 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:49.144468 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.144596 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.145403 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.145486 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.145916 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.146656 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.149860 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.150539 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.150637 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:49.150674 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:49.150752 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.150890 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:49.151043 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:49.151095 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:49.162316 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.162423 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:49.164947 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.165033 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:49.165163 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:49.167506 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:49.169366 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.169465 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:49.169761 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.169869 140455392419840 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 11:01:49.169981 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:49.170035 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:49.170069 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:49.170153 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.172404 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:49.177819 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.178102 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:49.180803 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:01:49.193248 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:49.193307 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:49.193345 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:49.193377 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.193443 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.194019 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.194102 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.194463 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.195154 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.197733 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.198358 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.198440 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:49.198475 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:49.198535 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.198665 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:49.198781 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:49.198823 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:49.200689 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.200785 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:49.203170 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.203253 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:49.203365 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:49.205615 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:49.207476 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.207573 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:49.207856 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.207944 140455392419840 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 11:01:49.208052 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:01:49.208094 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:01:49.208127 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:01:49.208192 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.210410 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:01:49.215829 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.216099 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:01:49.218844 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:01:49.231386 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:01:49.231446 140455392419840 attention.py:418] Single window, no scan.
I0123 11:01:49.231483 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:01:49.231515 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.231581 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.232139 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.232223 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.232581 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.233265 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.236202 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.236828 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.236913 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:01:49.236951 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:01:49.237012 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.237146 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:01:49.237262 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:01:49.237306 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:49.239206 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.239305 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:49.241726 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.241812 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:01:49.241926 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:01:49.244220 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:01:49.246117 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.246218 140455392419840 nn_components.py:261] mlp: residual
I0123 11:01:49.246509 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:49.246632 140455392419840 decoder_stack.py:344] dstack: Final layernorm.
I0123 11:01:49.249563 140455392419840 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:01:54.032318 140455392419840 optimizer_config.py:74] Using Flax Adafactor Optimizer. lr=1.000000, b1=0.900000
I0123 11:01:54.597218 140455392419840 training_loop.py:409] No working directory specified.
I0123 11:01:54.597438 140455392419840 training_loop.py:431] Loading pre-trained model from ag_ckpt_vocab:
I0123 11:01:54.598369 140455392419840 checkpoints.py:1062] Restoring legacy Flax checkpoint from ag_ckpt_vocab/checkpoint_10999999
I0123 11:01:57.684221 140455392419840 training_loop.py:447] Only restoring trainable parameters.
I0123 11:01:57.685605 140455392419840 training_loop.py:724] parameter: decoder/embed/embedding, shape (1024, 1024), size 1048576
I0123 11:01:57.685770 140455392419840 training_loop.py:724] parameter: decoder/final_layernorm/scale, shape (1024,), size 1024
I0123 11:01:57.685865 140455392419840 training_loop.py:724] parameter: decoder/transformer0/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 11:01:57.685960 140455392419840 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 11:01:57.686054 140455392419840 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.686146 140455392419840 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 11:01:57.686237 140455392419840 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.686321 140455392419840 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.686424 140455392419840 training_loop.py:724] parameter: decoder/transformer0/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 11:01:57.686517 140455392419840 training_loop.py:724] parameter: decoder/transformer0/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 11:01:57.686595 140455392419840 training_loop.py:724] parameter: decoder/transformer0/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.686682 140455392419840 training_loop.py:724] parameter: decoder/transformer0/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 11:01:57.686774 140455392419840 training_loop.py:724] parameter: decoder/transformer1/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 11:01:57.686871 140455392419840 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 11:01:57.686960 140455392419840 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.687046 140455392419840 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 11:01:57.687132 140455392419840 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.687214 140455392419840 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.687309 140455392419840 training_loop.py:724] parameter: decoder/transformer1/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 11:01:57.687418 140455392419840 training_loop.py:724] parameter: decoder/transformer1/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 11:01:57.687552 140455392419840 training_loop.py:724] parameter: decoder/transformer1/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.687638 140455392419840 training_loop.py:724] parameter: decoder/transformer1/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 11:01:57.687723 140455392419840 training_loop.py:724] parameter: decoder/transformer10/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 11:01:57.687803 140455392419840 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 11:01:57.687884 140455392419840 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.687966 140455392419840 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 11:01:57.688058 140455392419840 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.688167 140455392419840 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.688261 140455392419840 training_loop.py:724] parameter: decoder/transformer10/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 11:01:57.688373 140455392419840 training_loop.py:724] parameter: decoder/transformer10/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 11:01:57.688460 140455392419840 training_loop.py:724] parameter: decoder/transformer10/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.688559 140455392419840 training_loop.py:724] parameter: decoder/transformer10/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 11:01:57.688657 140455392419840 training_loop.py:724] parameter: decoder/transformer11/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 11:01:57.688738 140455392419840 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 11:01:57.688817 140455392419840 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.688901 140455392419840 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 11:01:57.689002 140455392419840 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.689091 140455392419840 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.689174 140455392419840 training_loop.py:724] parameter: decoder/transformer11/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 11:01:57.689262 140455392419840 training_loop.py:724] parameter: decoder/transformer11/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 11:01:57.689339 140455392419840 training_loop.py:724] parameter: decoder/transformer11/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.689419 140455392419840 training_loop.py:724] parameter: decoder/transformer11/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 11:01:57.689494 140455392419840 training_loop.py:724] parameter: decoder/transformer2/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 11:01:57.689577 140455392419840 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 11:01:57.689672 140455392419840 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.689770 140455392419840 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 11:01:57.689875 140455392419840 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.689981 140455392419840 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.690072 140455392419840 training_loop.py:724] parameter: decoder/transformer2/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 11:01:57.690165 140455392419840 training_loop.py:724] parameter: decoder/transformer2/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 11:01:57.690258 140455392419840 training_loop.py:724] parameter: decoder/transformer2/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.690338 140455392419840 training_loop.py:724] parameter: decoder/transformer2/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 11:01:57.690408 140455392419840 training_loop.py:724] parameter: decoder/transformer3/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 11:01:57.690502 140455392419840 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 11:01:57.690596 140455392419840 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.690694 140455392419840 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 11:01:57.690788 140455392419840 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.690868 140455392419840 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.690938 140455392419840 training_loop.py:724] parameter: decoder/transformer3/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 11:01:57.691007 140455392419840 training_loop.py:724] parameter: decoder/transformer3/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 11:01:57.691074 140455392419840 training_loop.py:724] parameter: decoder/transformer3/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.691141 140455392419840 training_loop.py:724] parameter: decoder/transformer3/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 11:01:57.691206 140455392419840 training_loop.py:724] parameter: decoder/transformer4/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 11:01:57.691272 140455392419840 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 11:01:57.691347 140455392419840 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.691419 140455392419840 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 11:01:57.691492 140455392419840 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.691567 140455392419840 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.691640 140455392419840 training_loop.py:724] parameter: decoder/transformer4/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 11:01:57.691723 140455392419840 training_loop.py:724] parameter: decoder/transformer4/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 11:01:57.691797 140455392419840 training_loop.py:724] parameter: decoder/transformer4/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.691884 140455392419840 training_loop.py:724] parameter: decoder/transformer4/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 11:01:57.691962 140455392419840 training_loop.py:724] parameter: decoder/transformer5/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 11:01:57.692051 140455392419840 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 11:01:57.692123 140455392419840 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.692193 140455392419840 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 11:01:57.692269 140455392419840 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.692348 140455392419840 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.692426 140455392419840 training_loop.py:724] parameter: decoder/transformer5/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 11:01:57.692504 140455392419840 training_loop.py:724] parameter: decoder/transformer5/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 11:01:57.692592 140455392419840 training_loop.py:724] parameter: decoder/transformer5/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.692682 140455392419840 training_loop.py:724] parameter: decoder/transformer5/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 11:01:57.692769 140455392419840 training_loop.py:724] parameter: decoder/transformer6/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 11:01:57.692860 140455392419840 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 11:01:57.692947 140455392419840 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.693036 140455392419840 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 11:01:57.693122 140455392419840 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.693203 140455392419840 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.693289 140455392419840 training_loop.py:724] parameter: decoder/transformer6/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 11:01:57.693367 140455392419840 training_loop.py:724] parameter: decoder/transformer6/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 11:01:57.693449 140455392419840 training_loop.py:724] parameter: decoder/transformer6/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.693533 140455392419840 training_loop.py:724] parameter: decoder/transformer6/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 11:01:57.693616 140455392419840 training_loop.py:724] parameter: decoder/transformer7/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 11:01:57.693728 140455392419840 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 11:01:57.693812 140455392419840 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.693897 140455392419840 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 11:01:57.693980 140455392419840 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.694064 140455392419840 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.694150 140455392419840 training_loop.py:724] parameter: decoder/transformer7/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 11:01:57.694238 140455392419840 training_loop.py:724] parameter: decoder/transformer7/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 11:01:57.694334 140455392419840 training_loop.py:724] parameter: decoder/transformer7/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.694417 140455392419840 training_loop.py:724] parameter: decoder/transformer7/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 11:01:57.694499 140455392419840 training_loop.py:724] parameter: decoder/transformer8/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 11:01:57.694577 140455392419840 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 11:01:57.694651 140455392419840 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.694721 140455392419840 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 11:01:57.694786 140455392419840 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.694870 140455392419840 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.694943 140455392419840 training_loop.py:724] parameter: decoder/transformer8/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 11:01:57.695020 140455392419840 training_loop.py:724] parameter: decoder/transformer8/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 11:01:57.695086 140455392419840 training_loop.py:724] parameter: decoder/transformer8/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.695152 140455392419840 training_loop.py:724] parameter: decoder/transformer8/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 11:01:57.695226 140455392419840 training_loop.py:724] parameter: decoder/transformer9/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 11:01:57.695302 140455392419840 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 11:01:57.695380 140455392419840 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.695455 140455392419840 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 11:01:57.695524 140455392419840 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.695598 140455392419840 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.695673 140455392419840 training_loop.py:724] parameter: decoder/transformer9/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 11:01:57.695751 140455392419840 training_loop.py:724] parameter: decoder/transformer9/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 11:01:57.695829 140455392419840 training_loop.py:724] parameter: decoder/transformer9/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 11:01:57.695929 140455392419840 training_loop.py:724] parameter: decoder/transformer9/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 11:01:57.696003 140455392419840 training_loop.py:725] Total parameters: 152072288
I0123 11:01:57.696466 140455392419840 training_loop.py:739] Total state size: 0
I0123 11:01:57.734502 140455392419840 training_loop.py:492] Training loop: creating task for mode beam_search
I0123 11:01:57.734904 140455392419840 training_loop.py:685] Creating logging writer (train) for mode beam_search
I0123 11:01:57.735452 140455392419840 training_loop.py:652] Compiling mode beam_search with jit.
I0123 11:01:57.735868 140455392419840 training_loop.py:89] registering functions: dict_keys([])
I0123 11:01:57.754987 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i ? perp c m m a
I0123 11:01:59.157134 140455392419840 ddar.py:60] Depth 1/1000 time = 1.3555481433868408
I0123 11:02:01.161585 140455392419840 ddar.py:60] Depth 2/1000 time = 2.0040571689605713
I0123 11:02:03.486419 140455392419840 ddar.py:60] Depth 3/1000 time = 2.3243489265441895
I0123 11:02:05.693273 140455392419840 ddar.py:60] Depth 4/1000 time = 2.2065863609313965
I0123 11:02:08.231062 140455392419840 ddar.py:60] Depth 5/1000 time = 2.537447690963745
I0123 11:02:10.343827 140455392419840 ddar.py:60] Depth 6/1000 time = 2.1123242378234863
I0123 11:02:12.916979 140455392419840 ddar.py:60] Depth 7/1000 time = 2.5645554065704346
I0123 11:02:15.546298 140455392419840 ddar.py:60] Depth 8/1000 time = 2.6290321350097656
I0123 11:02:18.127975 140455392419840 ddar.py:60] Depth 9/1000 time = 2.58144211769104
I0123 11:02:18.143751 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:02:18.143904 140455392419840 alphageometry.py:540] Depth 0. There are 1 nodes to expand:
I0123 11:02:18.143948 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00
I0123 11:02:18.143983 140455392419840 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00
I0123 11:02:18.295936 140455392419840 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.296134 140455392419840 decoder_stack.py:316] dstack: scanning over 1 windows.
I0123 11:02:18.296235 140455392419840 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 11:02:18.296311 140455392419840 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 11:02:18.296383 140455392419840 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 11:02:18.296451 140455392419840 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 11:02:18.296518 140455392419840 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 11:02:18.296587 140455392419840 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 11:02:18.296653 140455392419840 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 11:02:18.296721 140455392419840 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 11:02:18.296786 140455392419840 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 11:02:18.296853 140455392419840 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 11:02:18.296919 140455392419840 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 11:02:18.296987 140455392419840 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 11:02:18.297026 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:18.297071 140455392419840 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 11:02:18.297188 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:18.297243 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:18.297464 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:18.299363 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.302142 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:18.307829 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.308132 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:18.310724 140455392419840 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:18.314686 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:18.314748 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:18.314787 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:18.314822 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.314888 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.315499 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.315578 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.315950 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.316729 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.319260 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.319953 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.320035 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:18.320072 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:18.320133 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.320262 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:18.320588 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:18.320634 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.322533 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.322631 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.325062 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.325144 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:18.325576 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:18.327990 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.329923 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.330021 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.330316 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.330401 140455392419840 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 11:02:18.330510 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:18.330550 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:18.330590 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:18.332388 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.334712 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:18.340380 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.340646 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:18.343208 140455392419840 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:18.346827 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:18.346884 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:18.346921 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:18.346953 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.347016 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.347623 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.347702 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.348058 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.348842 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.351305 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.351929 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.352009 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:18.352045 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:18.352103 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.352233 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:18.352555 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:18.352604 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.354619 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.354716 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.357203 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.357286 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:18.357787 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:18.360106 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.362012 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.362110 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.362403 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.362488 140455392419840 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 11:02:18.362596 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:18.362636 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:18.362668 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:18.364553 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.366888 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:18.372454 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.372717 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:18.375332 140455392419840 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:18.379037 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:18.379096 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:18.379133 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:18.379164 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.379227 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.379786 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.379866 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.380219 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.380980 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.383446 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.384064 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.384145 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:18.384182 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:18.384240 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.384370 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:18.385073 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:18.385123 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.387063 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.387161 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.389729 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.389816 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:18.390276 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:18.392634 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.394689 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.394793 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.395095 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.395179 140455392419840 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 11:02:18.395289 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:18.395330 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:18.395361 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:18.397199 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.399670 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:18.405409 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.405689 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:18.408249 140455392419840 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:18.411952 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:18.412012 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:18.412050 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:18.412083 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.412148 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.412781 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.412864 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.413225 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.414005 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.416482 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.417104 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.417185 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:18.417221 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:18.417279 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.417410 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:18.417742 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:18.417790 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.419752 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.419849 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.422286 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.422370 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:18.422798 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:18.425060 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.426987 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.427085 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.427372 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.427456 140455392419840 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 11:02:18.427564 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:18.427603 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:18.427633 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:18.429488 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.431823 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:18.437425 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.437695 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:18.440320 140455392419840 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:18.443967 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:18.444028 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:18.444065 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:18.444096 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.444159 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.444719 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.444800 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.445180 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.445959 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.448423 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.449093 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.449175 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:18.449211 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:18.449270 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.449403 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:18.449729 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:18.449778 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.451680 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.451777 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.454223 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.454307 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:18.454741 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:18.457140 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.459145 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.459251 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.459553 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.459642 140455392419840 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 11:02:18.459756 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:18.459799 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:18.459831 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:18.461676 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.463994 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:18.469680 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.469952 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:18.472547 140455392419840 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:18.476224 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:18.476282 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:18.476319 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:18.476350 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.476463 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.477016 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.477097 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.477455 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.478254 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.480696 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.481315 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.481396 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:18.481431 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:18.481490 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.481655 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:18.481985 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:18.482031 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.483981 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.484079 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.486533 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.486617 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:18.487054 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:18.489316 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.491226 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.491327 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.491618 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.491703 140455392419840 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 11:02:18.491811 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:18.491852 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:18.491883 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:18.494086 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.496389 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:18.501969 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.502239 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:18.505196 140455392419840 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:18.508862 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:18.508920 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:18.508956 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:18.508988 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.509051 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.509605 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.509692 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.510048 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.510808 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.513244 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.513919 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.514002 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:18.514037 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:18.514095 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.514226 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:18.514544 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:18.514590 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.516461 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.516558 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.518996 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.519081 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:18.519519 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:18.521822 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.523743 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.523841 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.524130 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.524214 140455392419840 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 11:02:18.524322 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:18.524363 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:18.524394 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:18.526206 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.528495 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:18.534142 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.534408 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:18.536947 140455392419840 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:18.540540 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:18.540599 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:18.540634 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:18.540665 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.540777 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.541335 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.541415 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.541779 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.542540 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.545009 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.545627 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.545714 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:18.545750 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:18.545809 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.545939 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:18.546260 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:18.546306 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.548313 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.548410 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.550885 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.550971 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:18.551419 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:18.553687 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.555563 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.555662 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.555955 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.556039 140455392419840 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 11:02:18.556148 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:18.556188 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:18.556220 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:18.558093 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.560403 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:18.566000 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.566263 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:18.568897 140455392419840 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:18.572559 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:18.572618 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:18.572655 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:18.572685 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.572754 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.573318 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.573400 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.573783 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.574607 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.577179 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.577829 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.577915 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:18.577952 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:18.578013 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.578158 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:18.578547 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:18.578597 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.580576 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.580673 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.583264 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.583348 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:18.583801 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:18.586045 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.588021 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.588120 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.588418 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.588503 140455392419840 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 11:02:18.588613 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:18.588654 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:18.588685 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:18.590515 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.592849 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:18.598814 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.599077 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:18.601700 140455392419840 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:18.605647 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:18.605712 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:18.605749 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:18.605780 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.605842 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.606804 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.606886 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.607255 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.608032 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.610506 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.611145 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.611229 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:18.611267 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:18.611328 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.611463 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:18.611795 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:18.611842 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.613782 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.613879 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.616458 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.616541 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:18.616972 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:18.619282 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.621199 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.621297 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.621588 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.621679 140455392419840 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 11:02:18.621796 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:18.621836 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:18.621868 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:18.623647 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.626071 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:18.631685 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.631957 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:18.634645 140455392419840 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:18.638304 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:18.638364 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:18.638400 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:18.638441 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.638558 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.639119 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.639202 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.639573 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.640367 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.642855 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.643492 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.643575 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:18.643611 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:18.643671 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.643803 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:18.644128 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:18.644174 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.646126 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.646224 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.648673 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.648756 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:18.649187 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:18.651451 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.653360 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.653460 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.653765 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.653851 140455392419840 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 11:02:18.653960 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:18.654000 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:18.654031 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:18.655908 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.658279 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:18.663885 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.664146 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:18.666766 140455392419840 transformer_layer.py:213] tlayer: windowed attention.
I0123 11:02:18.670440 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:18.670499 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:18.670536 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:18.670567 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.670638 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.671197 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.671277 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.671632 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.672395 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.674973 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.675615 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.675700 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:18.675737 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:18.675798 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.675934 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:18.676256 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:18.676302 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.678241 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.678338 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.680782 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.680865 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:18.681295 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:18.683594 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.685520 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.685618 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.685920 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.686171 140455392419840 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 11:02:18.686242 140455392419840 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 11:02:18.686301 140455392419840 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 11:02:18.686356 140455392419840 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 11:02:18.686412 140455392419840 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 11:02:18.686465 140455392419840 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 11:02:18.686518 140455392419840 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 11:02:18.686572 140455392419840 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 11:02:18.686624 140455392419840 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 11:02:18.686676 140455392419840 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 11:02:18.686729 140455392419840 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 11:02:18.686780 140455392419840 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 11:02:18.686828 140455392419840 decoder_stack.py:344] dstack: Final layernorm.
I0123 11:02:18.689755 140455392419840 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 11:02:18.735357 140455392419840 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.735444 140455392419840 decoder_stack.py:333] dstack: autoregressive generator.
I0123 11:02:18.735497 140455392419840 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 11:02:18.735601 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:18.735640 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:18.735671 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:18.735733 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.738155 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:18.743724 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.743996 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:18.746640 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:18.759755 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:18.759814 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:18.759850 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:18.759880 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.759943 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.760507 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.760599 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.760970 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.761697 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.764302 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.764925 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.765006 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:18.765042 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:18.765102 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.765237 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:18.765347 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:18.765387 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.767258 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.767356 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.769757 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.769840 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:18.769950 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:18.772203 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.774057 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.774156 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.774453 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.774540 140455392419840 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 11:02:18.774650 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:18.774691 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:18.774721 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:18.774784 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.777031 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:18.782585 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.782860 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:18.785912 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:18.798533 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:18.798592 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:18.798627 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:18.798658 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.798720 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.799338 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.799419 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.799794 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.800508 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.803072 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.803711 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.803794 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:18.803831 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:18.803892 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.804027 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:18.804136 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:18.804176 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.806044 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.806140 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.808957 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.809039 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:18.809150 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:18.811362 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.813203 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.813312 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.813603 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.813694 140455392419840 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 11:02:18.813804 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:18.813845 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:18.813876 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:18.813940 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.816162 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:18.821715 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.821978 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:18.824616 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:18.837209 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:18.837267 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:18.837303 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:18.837333 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.837394 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.837949 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.838028 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.838381 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.839082 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.841578 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.842274 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.842356 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:18.842393 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:18.842451 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.842581 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:18.842691 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:18.842732 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.844580 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.844677 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.847114 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.847197 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:18.847307 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:18.849502 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.851411 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.851518 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.851811 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.851896 140455392419840 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 11:02:18.852005 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:18.852045 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:18.852076 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:18.852137 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.854364 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:18.859768 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.860029 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:18.862749 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:18.875469 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:18.875527 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:18.875563 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:18.875596 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.875662 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.876230 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.876310 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.876680 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.877389 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.880039 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.880658 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.880738 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:18.880774 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:18.880834 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.880968 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:18.881080 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:18.881122 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.883040 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.883140 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.885660 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.885746 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:18.885859 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:18.888564 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.890496 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.890607 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.890912 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.891006 140455392419840 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 11:02:18.891117 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:18.891158 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:18.891189 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:18.891252 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.893589 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:18.899215 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.899484 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:18.902202 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:18.915188 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:18.915247 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:18.915283 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:18.915317 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.915383 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.916012 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.916090 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.916445 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.917130 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.919653 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.920284 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.920363 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:18.920399 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:18.920457 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.920587 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:18.920696 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:18.920737 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.922625 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.922724 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.925279 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.925364 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:18.925478 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:18.927785 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.929685 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.929784 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.930095 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.930189 140455392419840 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 11:02:18.930308 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:18.930349 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:18.930382 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:18.930449 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.932762 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:18.938362 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.938634 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:18.941405 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:18.954369 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:18.954430 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:18.954468 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:18.954501 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.954568 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.955159 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.955242 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.955613 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.956328 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.958845 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.959544 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.959627 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:18.959665 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:18.959727 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.959862 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:18.959979 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:18.960021 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.961894 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.961992 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.964447 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.964533 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:18.964645 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:18.966966 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:18.968867 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.968966 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:18.969264 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.969358 140455392419840 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 11:02:18.969470 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:18.969510 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:18.969542 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:18.969605 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.971826 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:18.977218 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.977479 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:18.980070 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:18.992366 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:18.992429 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:18.992465 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:18.992496 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.992559 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.993114 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.993193 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.993549 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.994243 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.997113 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.997737 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.997817 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:18.997853 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:18.997910 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:18.998037 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:18.998147 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:18.998187 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.000019 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.000116 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.002514 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.002599 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:19.002708 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:19.004974 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.006832 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.006931 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.007222 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.007314 140455392419840 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 11:02:19.007426 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:19.007467 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:19.007498 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:19.007560 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.009982 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:19.015518 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.015782 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:19.018792 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:19.031206 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:19.031265 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:19.031301 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:19.031331 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.031393 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.031998 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.032080 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.032442 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.033136 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.035591 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.036207 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.036288 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:19.036323 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:19.036382 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.036511 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:19.036620 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:19.036660 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.038497 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.038594 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.041032 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.041115 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:19.041223 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:19.043451 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.045317 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.045415 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.045717 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.045811 140455392419840 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 11:02:19.045925 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:19.045966 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:19.045997 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:19.046060 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.048277 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:19.053816 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.054077 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:19.056667 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:19.069099 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:19.069159 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:19.069195 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:19.069225 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.069288 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.069847 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.069928 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.070288 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.070996 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.073487 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.074111 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.074193 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:19.074228 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:19.074286 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.074419 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:19.074530 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:19.074570 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.076479 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.076575 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.078992 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.079075 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:19.079185 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:19.081385 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.083248 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.083348 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.083642 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.083726 140455392419840 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 11:02:19.083846 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:19.083887 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:19.083919 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:19.083981 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.086211 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:19.091676 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.091937 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:19.094537 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:19.107360 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:19.107421 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:19.107458 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:19.107489 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.107555 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.108122 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.108201 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.108555 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.109256 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.111743 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.112380 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.112462 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:19.112498 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:19.112560 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.112692 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:19.112806 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:19.112849 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.114769 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.114866 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.117243 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.117325 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:19.117434 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:19.120031 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.121970 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.122073 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.122375 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.122463 140455392419840 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 11:02:19.122576 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:19.122626 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:19.122660 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:19.122725 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.124965 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:19.130552 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.130823 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:19.133467 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:19.146043 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:19.146102 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:19.146138 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:19.146169 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.146231 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.146782 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.146861 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.147218 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.147904 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.150398 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.151017 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.151099 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:19.151135 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:19.151193 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.151333 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:19.151443 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:19.151484 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.153402 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.153498 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.155918 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.156001 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:19.156110 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:19.158316 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.160154 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.160252 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.160541 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.160626 140455392419840 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 11:02:19.160734 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:19.160774 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:19.160814 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:19.160880 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.163150 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:19.168551 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.168814 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:19.171413 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:19.183967 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:19.184026 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:19.184061 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:19.184092 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.184154 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.184709 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.184789 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.185156 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.185859 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.188349 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.188966 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.189047 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:19.189083 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:19.189142 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.189275 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:19.189387 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:19.189427 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.191365 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.191461 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.193867 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.193949 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:19.194058 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:19.196224 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.198071 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.198169 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.198462 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.198550 140455392419840 decoder_stack.py:344] dstack: Final layernorm.
I0123 11:02:19.201385 140455392419840 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 11:02:19.251184 140455392419840 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.251282 140455392419840 decoder_stack.py:333] dstack: autoregressive generator.
I0123 11:02:19.251337 140455392419840 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 11:02:19.251443 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:19.251482 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:19.251514 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:19.251577 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.253916 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:19.259271 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.259531 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:19.262102 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:19.274414 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:19.274472 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:19.274509 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:19.274539 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.274602 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.275172 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.275253 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.275610 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.276294 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.278828 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.279445 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.279526 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:19.279563 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:19.279622 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.279753 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:19.279864 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:19.279905 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.281759 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.281856 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.284276 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.284358 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:19.284470 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:19.287106 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.289039 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.289141 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.289451 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.289547 140455392419840 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 11:02:19.289670 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:19.289713 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:19.289746 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:19.289812 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.292095 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:19.297496 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.298950 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:19.301647 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:19.314059 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:19.314121 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:19.314159 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:19.314192 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.314259 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.314833 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.314916 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.315285 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.315986 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.318530 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.319170 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.319255 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:19.319293 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:19.319355 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.319491 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:19.319606 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:19.319649 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.321555 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.321660 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.324131 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.324215 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:19.324325 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:19.326581 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.328455 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.328568 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.328882 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.328979 140455392419840 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 11:02:19.329094 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:19.329136 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:19.329169 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:19.329233 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.331552 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:19.337060 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.337334 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:19.340100 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:19.352461 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:19.352521 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:19.352558 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:19.352589 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.352653 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.353204 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.353283 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.353637 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.354343 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.356848 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.357459 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.357540 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:19.357576 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:19.357636 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.357772 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:19.357882 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:19.357922 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.359750 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.359847 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.362222 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.362304 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:19.362413 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:19.364662 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.366521 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.366620 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.366915 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.367000 140455392419840 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 11:02:19.367118 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:19.367159 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:19.367191 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:19.367252 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.369463 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:19.374797 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.375060 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:19.377715 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:19.390007 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:19.390065 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:19.390101 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:19.390132 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.390195 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.390746 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.390825 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.391180 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.391868 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.394449 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.395066 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.395147 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:19.395183 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:19.395242 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.395374 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:19.395483 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:19.395524 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.397355 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.397452 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.399818 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.399900 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:19.400010 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:19.402809 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.404788 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.404886 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.405176 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.405261 140455392419840 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 11:02:19.405379 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:19.405420 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:19.405452 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:19.405514 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.407736 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:19.413043 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.413303 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:19.415968 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:19.428247 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:19.428306 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:19.428342 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:19.428373 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.428436 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.428987 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.429068 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.429423 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.430102 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.432599 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.433212 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.433293 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:19.433329 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:19.433387 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.433517 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:19.433625 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:19.433671 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.435499 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.435595 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.438014 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.438098 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:19.438208 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:19.440469 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.442310 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.442409 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.442702 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.442787 140455392419840 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 11:02:19.442895 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:19.442945 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:19.442978 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:19.443042 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.445255 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:19.450603 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.450865 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:19.453519 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:19.466205 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:19.466264 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:19.466300 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:19.466331 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.466393 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.466945 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.467024 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.467375 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.468055 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.470616 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.471235 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.471314 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:19.471351 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:19.471410 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.471538 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:19.471647 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:19.471688 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.473521 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.473617 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.476029 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.476112 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:19.476221 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:19.478534 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.480387 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.480485 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.480777 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.480861 140455392419840 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 11:02:19.480970 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:19.481009 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:19.481048 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:19.481111 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.483337 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:19.488840 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.489112 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:19.491824 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:19.504541 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:19.504599 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:19.504635 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:19.504666 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.504728 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.505286 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.505366 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.505732 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.506415 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.509025 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.509834 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.509917 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:19.509953 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:19.510012 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.510143 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:19.510252 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:19.510292 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.512341 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.512438 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.514870 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.514953 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:19.515064 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:19.517736 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.519614 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.519712 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.520002 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.520087 140455392419840 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 11:02:19.520197 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:19.520238 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:19.520269 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:19.520342 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.522598 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:19.527943 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.528205 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:19.530966 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:19.543187 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:19.543247 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:19.543283 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:19.543314 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.543377 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.543932 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.544013 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.544372 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.545061 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.547630 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.548245 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.548324 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:19.548360 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:19.548419 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.548547 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:19.548655 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:19.548695 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.550557 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.550653 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.553049 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.553132 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:19.553241 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:19.555507 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.557373 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.557471 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.557768 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.557853 140455392419840 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 11:02:19.557960 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:19.558000 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:19.558031 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:19.558103 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.560312 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:19.565665 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.565927 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:19.568600 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:19.580916 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:19.580974 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:19.581010 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:19.581041 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.581103 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.581666 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.581745 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.582101 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.582778 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.585305 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.585922 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.586002 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:19.586038 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:19.586096 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.586223 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:19.586332 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:19.586372 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.588255 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.588349 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.590741 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.590823 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:19.590933 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:19.593195 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.595043 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.595141 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.595433 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.595518 140455392419840 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 11:02:19.595627 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:19.595668 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:19.595700 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:19.595763 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.598011 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:19.603371 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.603633 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:19.606298 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:19.618944 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:19.619003 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:19.619039 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:19.619069 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.619131 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.619682 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.619762 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.620121 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.620807 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.623337 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.623945 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.624025 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:19.624061 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:19.624119 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.624245 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:19.624355 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:19.624395 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.626230 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.626325 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.628699 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.628782 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:19.628895 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:19.631682 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.633559 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.633663 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.633962 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.634047 140455392419840 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 11:02:19.634155 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:19.634196 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:19.634228 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:19.634290 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.636626 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:19.642118 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.642388 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:19.645139 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:19.657970 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:19.658031 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:19.658068 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:19.658101 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.658165 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.658737 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.658818 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.659178 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.659879 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.662464 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.663101 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.663183 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:19.663220 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:19.663281 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.663414 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:19.663527 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:19.663568 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.665401 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.665495 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.667884 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.667966 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:19.668075 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:19.670349 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.672195 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.672291 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.672581 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.672664 140455392419840 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 11:02:19.672773 140455392419840 transformer_layer.py:154] tlayer: recurrent = False
I0123 11:02:19.672814 140455392419840 transformer_layer.py:155] tlayer: compute_importance = False
I0123 11:02:19.672845 140455392419840 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 11:02:19.672907 140455392419840 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.675115 140455392419840 transformer_base.py:161] kvq: pre_attn dropout.
I0123 11:02:19.680505 140455392419840 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.680766 140455392419840 transformer_base.py:194] kvq: normalize keys, queries.
I0123 11:02:19.683407 140455392419840 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 11:02:19.695758 140455392419840 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 11:02:19.695817 140455392419840 attention.py:418] Single window, no scan.
I0123 11:02:19.695854 140455392419840 transformer_layer.py:389] tlayer: self-attention.
I0123 11:02:19.695886 140455392419840 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.695947 140455392419840 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.696499 140455392419840 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.696578 140455392419840 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.696932 140455392419840 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.697614 140455392419840 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.700142 140455392419840 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.700754 140455392419840 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.700833 140455392419840 transformer_layer.py:468] tlayer: End windows.
I0123 11:02:19.700869 140455392419840 transformer_layer.py:472] tlayer: final FFN.
I0123 11:02:19.700927 140455392419840 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.701056 140455392419840 transformer_base.py:410] tbase: post-attention MLP.
I0123 11:02:19.701164 140455392419840 nn_components.py:325] mlp: activation = None
I0123 11:02:19.701204 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.703050 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.703145 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.705536 140455392419840 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.705618 140455392419840 transformer_base.py:443] tbase: final FFN
I0123 11:02:19.705736 140455392419840 nn_components.py:320] mlp: hidden 4096, relu
I0123 11:02:19.707976 140455392419840 nn_components.py:329] mlp: final activation = None
I0123 11:02:19.709829 140455392419840 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.709928 140455392419840 nn_components.py:261] mlp: residual
I0123 11:02:19.710220 140455392419840 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:19.710309 140455392419840 decoder_stack.py:344] dstack: Final layernorm.
I0123 11:02:19.713231 140455392419840 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 11:02:32.575252 140455392419840 alphageometry.py:566] LM output (score=-1.190294): "n : C a c n 19 D a n c n 20 ;"
I0123 11:02:32.575493 140455392419840 alphageometry.py:567] Translation: "n = on_line n a c, on_bline n c a"

I0123 11:02:32.575544 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a ? perp c m m a"
I0123 11:02:32.575726 140455392419840 graph.py:498] 
I0123 11:02:32.575790 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a ? perp c m m a
I0123 11:02:34.113439 140455392419840 ddar.py:60] Depth 1/1000 time = 1.4972307682037354
I0123 11:02:36.693470 140455392419840 ddar.py:60] Depth 2/1000 time = 2.5797927379608154
I0123 11:02:39.591844 140455392419840 ddar.py:60] Depth 3/1000 time = 2.898150682449341
I0123 11:02:42.601883 140455392419840 ddar.py:60] Depth 4/1000 time = 3.0098583698272705
I0123 11:02:45.608285 140455392419840 ddar.py:60] Depth 5/1000 time = 3.0062220096588135
I0123 11:02:48.879069 140455392419840 ddar.py:60] Depth 6/1000 time = 3.2705979347229004
I0123 11:02:51.712119 140455392419840 ddar.py:60] Depth 7/1000 time = 2.8325438499450684
I0123 11:02:55.313361 140455392419840 ddar.py:60] Depth 8/1000 time = 3.5891964435577393
I0123 11:02:58.966101 140455392419840 ddar.py:60] Depth 9/1000 time = 3.6525533199310303
I0123 11:03:02.433121 140455392419840 ddar.py:60] Depth 10/1000 time = 3.4667739868164062
I0123 11:03:02.454178 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:03:02.454311 140455392419840 alphageometry.py:566] LM output (score=-1.205349): "n : C d k n 19 D d n k n 20 ;"
I0123 11:03:02.454352 140455392419840 alphageometry.py:567] Translation: "n = on_line n d k, on_bline n k d"

I0123 11:03:02.454406 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d ? perp c m m a"
I0123 11:03:02.454585 140455392419840 graph.py:498] 
I0123 11:03:02.454654 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d ? perp c m m a
I0123 11:03:03.911550 140455392419840 ddar.py:60] Depth 1/1000 time = 1.4143314361572266
I0123 11:03:06.302113 140455392419840 ddar.py:60] Depth 2/1000 time = 2.3903918266296387
I0123 11:03:09.022616 140455392419840 ddar.py:60] Depth 3/1000 time = 2.720322847366333
I0123 11:03:11.622945 140455392419840 ddar.py:60] Depth 4/1000 time = 2.6001474857330322
I0123 11:03:14.633558 140455392419840 ddar.py:60] Depth 5/1000 time = 3.010366439819336
I0123 11:03:17.253598 140455392419840 ddar.py:60] Depth 6/1000 time = 2.6194283962249756
I0123 11:03:20.558757 140455392419840 ddar.py:60] Depth 7/1000 time = 3.2938919067382812
I0123 11:03:23.799669 140455392419840 ddar.py:60] Depth 8/1000 time = 3.2407257556915283
I0123 11:03:27.044584 140455392419840 ddar.py:60] Depth 9/1000 time = 3.2447333335876465
I0123 11:03:27.062917 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:03:27.063026 140455392419840 alphageometry.py:566] LM output (score=-1.446043): "n : C k m n 19 D k n m n 20 ;"
I0123 11:03:27.063066 140455392419840 alphageometry.py:567] Translation: "n = on_line n k m, on_bline n m k"

I0123 11:03:27.063110 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k ? perp c m m a"
I0123 11:03:27.063297 140455392419840 graph.py:498] 
I0123 11:03:27.063370 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k ? perp c m m a
I0123 11:03:28.319550 140455392419840 ddar.py:60] Depth 1/1000 time = 1.213632583618164
I0123 11:03:30.753694 140455392419840 ddar.py:60] Depth 2/1000 time = 2.4339118003845215
I0123 11:03:33.456454 140455392419840 ddar.py:60] Depth 3/1000 time = 2.702476978302002
I0123 11:03:35.983639 140455392419840 ddar.py:60] Depth 4/1000 time = 2.5269603729248047
I0123 11:03:38.681647 140455392419840 ddar.py:60] Depth 5/1000 time = 2.697793960571289
I0123 11:03:41.373812 140455392419840 ddar.py:60] Depth 6/1000 time = 2.691666603088379
I0123 11:03:44.616297 140455392419840 ddar.py:60] Depth 7/1000 time = 3.2329294681549072
I0123 11:03:47.501952 140455392419840 ddar.py:60] Depth 8/1000 time = 2.885470390319824
I0123 11:03:50.834600 140455392419840 ddar.py:60] Depth 9/1000 time = 3.3324053287506104
I0123 11:03:50.852208 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:03:50.852328 140455392419840 alphageometry.py:566] LM output (score=-1.633726): "n : C c d n 19 D c n d n 20 ;"
I0123 11:03:50.852368 140455392419840 alphageometry.py:567] Translation: "n = on_line n c d, on_bline n d c"

I0123 11:03:50.852422 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c d, on_bline n d c ? perp c m m a"
I0123 11:03:50.852625 140455392419840 graph.py:498] 
I0123 11:03:50.852694 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c d, on_bline n d c ? perp c m m a
I0123 11:03:52.912736 140455392419840 ddar.py:60] Depth 1/1000 time = 2.013669013977051
I0123 11:03:56.445058 140455392419840 ddar.py:60] Depth 2/1000 time = 3.5321402549743652
I0123 11:04:00.138803 140455392419840 ddar.py:60] Depth 3/1000 time = 3.6935625076293945
I0123 11:04:03.648885 140455392419840 ddar.py:60] Depth 4/1000 time = 3.5098884105682373
I0123 11:04:07.656212 140455392419840 ddar.py:60] Depth 5/1000 time = 4.007131099700928
I0123 11:04:11.440056 140455392419840 ddar.py:60] Depth 6/1000 time = 3.782667875289917
I0123 11:04:15.849263 140455392419840 ddar.py:60] Depth 7/1000 time = 4.3993449211120605
I0123 11:04:20.180439 140455392419840 ddar.py:60] Depth 8/1000 time = 4.330988168716431
I0123 11:04:24.432196 140455392419840 ddar.py:60] Depth 9/1000 time = 4.251548528671265
I0123 11:04:24.450530 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:04:24.450621 140455392419840 alphageometry.py:566] LM output (score=-1.744111): "n : C d g n 19 D d n g n 20 ;"
I0123 11:04:24.450661 140455392419840 alphageometry.py:567] Translation: "n = on_line n d g, on_bline n g d"

I0123 11:04:24.450702 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d g, on_bline n g d ? perp c m m a"
I0123 11:04:24.450890 140455392419840 graph.py:498] 
I0123 11:04:24.450963 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d g, on_bline n g d ? perp c m m a
I0123 11:04:25.914113 140455392419840 ddar.py:60] Depth 1/1000 time = 1.4208431243896484
I0123 11:04:28.266467 140455392419840 ddar.py:60] Depth 2/1000 time = 2.352167844772339
I0123 11:04:30.913055 140455392419840 ddar.py:60] Depth 3/1000 time = 2.6463959217071533
I0123 11:04:33.361183 140455392419840 ddar.py:60] Depth 4/1000 time = 2.4478917121887207
I0123 11:04:36.074465 140455392419840 ddar.py:60] Depth 5/1000 time = 2.7129833698272705
I0123 11:04:38.514443 140455392419840 ddar.py:60] Depth 6/1000 time = 2.4395270347595215
I0123 11:04:41.428992 140455392419840 ddar.py:60] Depth 7/1000 time = 2.9051315784454346
I0123 11:04:44.535148 140455392419840 ddar.py:60] Depth 8/1000 time = 3.105969190597534
I0123 11:04:47.360983 140455392419840 ddar.py:60] Depth 9/1000 time = 2.825645685195923
I0123 11:04:47.377158 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:04:47.377274 140455392419840 alphageometry.py:566] LM output (score=-1.754460): "n : C c h n 19 D c n h n 20 ;"
I0123 11:04:47.377317 140455392419840 alphageometry.py:567] Translation: "n = on_line n c h, on_bline n h c"

I0123 11:04:47.377358 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c h, on_bline n h c ? perp c m m a"
I0123 11:04:47.377529 140455392419840 graph.py:498] 
I0123 11:04:47.377602 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c h, on_bline n h c ? perp c m m a
I0123 11:04:49.655457 140455392419840 ddar.py:60] Depth 1/1000 time = 2.2329447269439697
I0123 11:04:53.105685 140455392419840 ddar.py:60] Depth 2/1000 time = 3.450042963027954
I0123 11:04:57.173880 140455392419840 ddar.py:60] Depth 3/1000 time = 4.06797981262207
I0123 11:05:00.786425 140455392419840 ddar.py:60] Depth 4/1000 time = 3.612332344055176
I0123 11:05:04.874765 140455392419840 ddar.py:60] Depth 5/1000 time = 4.088121652603149
I0123 11:05:08.488262 140455392419840 ddar.py:60] Depth 6/1000 time = 3.6129255294799805
I0123 11:05:13.032448 140455392419840 ddar.py:60] Depth 7/1000 time = 4.533675909042358
I0123 11:05:17.774542 140455392419840 ddar.py:60] Depth 8/1000 time = 4.7418787479400635
I0123 11:05:21.899040 140455392419840 ddar.py:60] Depth 9/1000 time = 4.124260187149048
I0123 11:05:21.922659 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:05:21.922793 140455392419840 alphageometry.py:566] LM output (score=-1.800514): "n : C i k n 19 D i n k n 20 ;"
I0123 11:05:21.922839 140455392419840 alphageometry.py:567] Translation: "n = on_line n i k, on_bline n k i"

I0123 11:05:21.922885 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n i k, on_bline n k i ? perp c m m a"
I0123 11:05:21.923088 140455392419840 graph.py:498] 
I0123 11:05:21.923165 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n i k, on_bline n k i ? perp c m m a
I0123 11:05:23.469326 140455392419840 ddar.py:60] Depth 1/1000 time = 1.5021421909332275
I0123 11:05:26.044734 140455392419840 ddar.py:60] Depth 2/1000 time = 2.5752155780792236
I0123 11:05:28.592103 140455392419840 ddar.py:60] Depth 3/1000 time = 2.5471839904785156
I0123 11:05:31.182748 140455392419840 ddar.py:60] Depth 4/1000 time = 2.5904712677001953
I0123 11:05:34.029170 140455392419840 ddar.py:60] Depth 5/1000 time = 2.846224784851074
I0123 11:05:36.647622 140455392419840 ddar.py:60] Depth 6/1000 time = 2.617945671081543
I0123 11:05:39.864036 140455392419840 ddar.py:60] Depth 7/1000 time = 3.2054760456085205
I0123 11:05:43.336585 140455392419840 ddar.py:60] Depth 8/1000 time = 3.472346067428589
I0123 11:05:46.561478 140455392419840 ddar.py:60] Depth 9/1000 time = 3.2247154712677
I0123 11:05:46.579814 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:05:46.579920 140455392419840 alphageometry.py:566] LM output (score=-1.802360): "n : C h k n 19 D h n k n 20 ;"
I0123 11:05:46.579961 140455392419840 alphageometry.py:567] Translation: "n = on_line n h k, on_bline n k h"

I0123 11:05:46.580002 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n h k, on_bline n k h ? perp c m m a"
I0123 11:05:46.580176 140455392419840 graph.py:498] 
I0123 11:05:46.580253 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n h k, on_bline n k h ? perp c m m a
I0123 11:05:48.284506 140455392419840 ddar.py:60] Depth 1/1000 time = 1.65610671043396
I0123 11:05:51.393472 140455392419840 ddar.py:60] Depth 2/1000 time = 3.1087939739227295
I0123 11:05:54.742811 140455392419840 ddar.py:60] Depth 3/1000 time = 3.3491666316986084
I0123 11:05:58.172998 140455392419840 ddar.py:60] Depth 4/1000 time = 3.429950475692749
I0123 11:06:01.655791 140455392419840 ddar.py:60] Depth 5/1000 time = 3.4824628829956055
I0123 11:06:04.955430 140455392419840 ddar.py:60] Depth 6/1000 time = 3.2991209030151367
I0123 11:06:08.690008 140455392419840 ddar.py:60] Depth 7/1000 time = 3.7219903469085693
I0123 11:06:12.584873 140455392419840 ddar.py:60] Depth 8/1000 time = 3.894679307937622
I0123 11:06:16.740426 140455392419840 ddar.py:60] Depth 9/1000 time = 4.155362844467163
I0123 11:06:16.761623 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:06:16.761727 140455392419840 alphageometry.py:566] LM output (score=-1.805764): "n : C k l n 19 D k n l n 20 ;"
I0123 11:06:16.761767 140455392419840 alphageometry.py:567] Translation: "n = on_line n k l, on_bline n l k"

I0123 11:06:16.761807 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k l, on_bline n l k ? perp c m m a"
I0123 11:06:16.761999 140455392419840 graph.py:498] 
I0123 11:06:16.762075 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k l, on_bline n l k ? perp c m m a
I0123 11:06:18.476557 140455392419840 ddar.py:60] Depth 1/1000 time = 1.6693408489227295
I0123 11:06:21.103027 140455392419840 ddar.py:60] Depth 2/1000 time = 2.6262800693511963
I0123 11:06:23.905344 140455392419840 ddar.py:60] Depth 3/1000 time = 2.8021090030670166
I0123 11:06:26.748938 140455392419840 ddar.py:60] Depth 4/1000 time = 2.84340763092041
I0123 11:06:29.882020 140455392419840 ddar.py:60] Depth 5/1000 time = 3.13289475440979
I0123 11:06:32.792670 140455392419840 ddar.py:60] Depth 6/1000 time = 2.909569263458252
I0123 11:06:35.924736 140455392419840 ddar.py:60] Depth 7/1000 time = 3.122575521469116
I0123 11:06:39.454452 140455392419840 ddar.py:60] Depth 8/1000 time = 3.529528856277466
I0123 11:06:42.762330 140455392419840 ddar.py:60] Depth 9/1000 time = 3.3076536655426025
I0123 11:06:42.777946 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:06:42.778057 140455392419840 alphageometry.py:566] LM output (score=-1.917399): "n : C b g n 19 D b n g n 20 ;"
I0123 11:06:42.778097 140455392419840 alphageometry.py:567] Translation: "n = on_line n b g, on_bline n g b"

I0123 11:06:42.778143 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n b g, on_bline n g b ? perp c m m a"
I0123 11:06:42.778319 140455392419840 graph.py:498] 
I0123 11:06:42.778388 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n b g, on_bline n g b ? perp c m m a
I0123 11:06:44.559074 140455392419840 ddar.py:60] Depth 1/1000 time = 1.737203598022461
I0123 11:06:47.715773 140455392419840 ddar.py:60] Depth 2/1000 time = 3.1565136909484863
I0123 11:06:52.298905 140455392419840 ddar.py:60] Depth 3/1000 time = 4.582955360412598
I0123 11:06:57.036796 140455392419840 ddar.py:60] Depth 4/1000 time = 4.737714529037476
I0123 11:07:01.607120 140455392419840 ddar.py:60] Depth 5/1000 time = 4.57012414932251
I0123 11:07:06.718908 140455392419840 ddar.py:60] Depth 6/1000 time = 5.111560344696045
I0123 11:07:11.502896 140455392419840 ddar.py:60] Depth 7/1000 time = 4.783430337905884
I0123 11:07:16.370683 140455392419840 ddar.py:60] Depth 8/1000 time = 4.832036972045898
I0123 11:07:21.272758 140455392419840 ddar.py:60] Depth 9/1000 time = 4.893754720687866
I0123 11:07:21.272989 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:07:21.273113 140455392419840 alphageometry.py:566] LM output (score=-1.945470): "n : C c g n 19 D c n g n 20 ;"
I0123 11:07:21.273155 140455392419840 alphageometry.py:567] Translation: "n = on_line n c g, on_bline n g c"

I0123 11:07:21.273199 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c g, on_bline n g c ? perp c m m a"
I0123 11:07:21.273391 140455392419840 graph.py:498] 
I0123 11:07:21.273467 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c g, on_bline n g c ? perp c m m a
I0123 11:07:22.997295 140455392419840 ddar.py:60] Depth 1/1000 time = 1.6802945137023926
I0123 11:07:26.264496 140455392419840 ddar.py:60] Depth 2/1000 time = 3.2670154571533203
I0123 11:07:30.338509 140455392419840 ddar.py:60] Depth 3/1000 time = 4.073811292648315
I0123 11:07:34.755247 140455392419840 ddar.py:60] Depth 4/1000 time = 4.4165568351745605
I0123 11:07:38.959959 140455392419840 ddar.py:60] Depth 5/1000 time = 4.204523086547852
I0123 11:07:43.721367 140455392419840 ddar.py:60] Depth 6/1000 time = 4.761204719543457
I0123 11:07:48.487367 140455392419840 ddar.py:60] Depth 7/1000 time = 4.7657787799835205
I0123 11:07:53.173176 140455392419840 ddar.py:60] Depth 8/1000 time = 4.685302495956421
I0123 11:07:58.360433 140455392419840 ddar.py:60] Depth 9/1000 time = 5.173982620239258
I0123 11:08:03.691182 140455392419840 ddar.py:60] Depth 10/1000 time = 5.33055853843689
I0123 11:08:09.059718 140455392419840 ddar.py:60] Depth 11/1000 time = 5.3683013916015625
I0123 11:08:14.386169 140455392419840 ddar.py:60] Depth 12/1000 time = 5.29305624961853
I0123 11:08:20.067470 140455392419840 ddar.py:60] Depth 13/1000 time = 5.66949462890625
I0123 11:08:20.071894 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:08:20.072003 140455392419840 alphageometry.py:566] LM output (score=-2.082851): "n : C g k n 19 D g n k n 20 ;"
I0123 11:08:20.072040 140455392419840 alphageometry.py:567] Translation: "n = on_line n g k, on_bline n k g"

I0123 11:08:20.072078 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n g k, on_bline n k g ? perp c m m a"
I0123 11:08:20.072251 140455392419840 graph.py:498] 
I0123 11:08:20.072319 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n g k, on_bline n k g ? perp c m m a
I0123 11:08:21.819641 140455392419840 ddar.py:60] Depth 1/1000 time = 1.7032861709594727
I0123 11:08:24.661398 140455392419840 ddar.py:60] Depth 2/1000 time = 2.8415870666503906
I0123 11:08:27.820059 140455392419840 ddar.py:60] Depth 3/1000 time = 3.158444881439209
I0123 11:08:31.566076 140455392419840 ddar.py:60] Depth 4/1000 time = 3.74573016166687
I0123 11:08:35.025079 140455392419840 ddar.py:60] Depth 5/1000 time = 3.458803415298462
I0123 11:08:38.472575 140455392419840 ddar.py:60] Depth 6/1000 time = 3.4470603466033936
I0123 11:08:42.562303 140455392419840 ddar.py:60] Depth 7/1000 time = 4.078422784805298
I0123 11:08:46.495806 140455392419840 ddar.py:60] Depth 8/1000 time = 3.9333291053771973
I0123 11:08:50.684446 140455392419840 ddar.py:60] Depth 9/1000 time = 4.188416481018066
I0123 11:08:55.038155 140455392419840 ddar.py:60] Depth 10/1000 time = 4.33440637588501
I0123 11:08:55.041773 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:08:55.041875 140455392419840 alphageometry.py:566] LM output (score=-2.103373): "n : C c j n 19 D c n j n 20 ;"
I0123 11:08:55.041929 140455392419840 alphageometry.py:567] Translation: "n = on_line n c j, on_bline n j c"

I0123 11:08:55.041972 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c j, on_bline n j c ? perp c m m a"
I0123 11:08:55.042154 140455392419840 graph.py:498] 
I0123 11:08:55.042224 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c j, on_bline n j c ? perp c m m a
I0123 11:08:57.072925 140455392419840 ddar.py:60] Depth 1/1000 time = 1.9857542514801025
I0123 11:09:00.442213 140455392419840 ddar.py:60] Depth 2/1000 time = 3.369126081466675
I0123 11:09:03.905058 140455392419840 ddar.py:60] Depth 3/1000 time = 3.462672233581543
I0123 11:09:07.957427 140455392419840 ddar.py:60] Depth 4/1000 time = 4.0522027015686035
I0123 11:09:12.344290 140455392419840 ddar.py:60] Depth 5/1000 time = 4.386653661727905
I0123 11:09:16.466065 140455392419840 ddar.py:60] Depth 6/1000 time = 4.121196508407593
I0123 11:09:20.945276 140455392419840 ddar.py:60] Depth 7/1000 time = 4.467785835266113
I0123 11:09:25.655113 140455392419840 ddar.py:60] Depth 8/1000 time = 4.7096593379974365
I0123 11:09:30.418560 140455392419840 ddar.py:60] Depth 9/1000 time = 4.763242483139038
I0123 11:09:34.840032 140455392419840 ddar.py:60] Depth 10/1000 time = 4.395942687988281
I0123 11:09:34.845156 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:09:34.845268 140455392419840 alphageometry.py:566] LM output (score=-2.113380): "n : C c e n 19 D c n e n 20 ;"
I0123 11:09:34.845309 140455392419840 alphageometry.py:567] Translation: "n = on_line n c e, on_bline n e c"

I0123 11:09:34.845352 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c e, on_bline n e c ? perp c m m a"
I0123 11:09:34.845525 140455392419840 graph.py:498] 
I0123 11:09:34.845590 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c e, on_bline n e c ? perp c m m a
I0123 11:09:36.889570 140455392419840 ddar.py:60] Depth 1/1000 time = 2.000216484069824
I0123 11:09:39.877158 140455392419840 ddar.py:60] Depth 2/1000 time = 2.9873671531677246
I0123 11:09:43.901541 140455392419840 ddar.py:60] Depth 3/1000 time = 4.023934364318848
I0123 11:09:47.280916 140455392419840 ddar.py:60] Depth 4/1000 time = 3.3787529468536377
I0123 11:09:51.010775 140455392419840 ddar.py:60] Depth 5/1000 time = 3.729384660720825
I0123 11:09:54.424609 140455392419840 ddar.py:60] Depth 6/1000 time = 3.4132583141326904
I0123 11:09:58.189993 140455392419840 ddar.py:60] Depth 7/1000 time = 3.754251718521118
I0123 11:10:02.070944 140455392419840 ddar.py:60] Depth 8/1000 time = 3.8806235790252686
I0123 11:10:05.916100 140455392419840 ddar.py:60] Depth 9/1000 time = 3.844768762588501
I0123 11:10:05.936310 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:10:05.936468 140455392419840 alphageometry.py:566] LM output (score=-2.157342): "n : C b e n 19 D b n e n 20 ;"
I0123 11:10:05.936528 140455392419840 alphageometry.py:567] Translation: "n = on_line n b e, on_bline n e b"

I0123 11:10:05.936566 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n b e, on_bline n e b ? perp c m m a"
I0123 11:10:05.936760 140455392419840 graph.py:498] 
I0123 11:10:05.936855 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n b e, on_bline n e b ? perp c m m a
I0123 11:10:07.579477 140455392419840 ddar.py:60] Depth 1/1000 time = 1.595728874206543
I0123 11:10:10.002800 140455392419840 ddar.py:60] Depth 2/1000 time = 2.4230782985687256
I0123 11:10:12.674357 140455392419840 ddar.py:60] Depth 3/1000 time = 2.67132306098938
I0123 11:10:15.408485 140455392419840 ddar.py:60] Depth 4/1000 time = 2.7337048053741455
I0123 11:10:18.184984 140455392419840 ddar.py:60] Depth 5/1000 time = 2.776214838027954
I0123 11:10:21.218019 140455392419840 ddar.py:60] Depth 6/1000 time = 3.032498598098755
I0123 11:10:24.272403 140455392419840 ddar.py:60] Depth 7/1000 time = 3.0436995029449463
I0123 11:10:27.448014 140455392419840 ddar.py:60] Depth 8/1000 time = 3.1753745079040527
I0123 11:10:30.895927 140455392419840 ddar.py:60] Depth 9/1000 time = 3.447622537612915
I0123 11:10:30.913591 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:10:30.913762 140455392419840 alphageometry.py:566] LM output (score=-2.244037): "n : C c i n 19 D c n i n 20 ;"
I0123 11:10:30.913803 140455392419840 alphageometry.py:567] Translation: "n = on_line n c i, on_bline n i c"

I0123 11:10:30.913841 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c i, on_bline n i c ? perp c m m a"
I0123 11:10:30.914031 140455392419840 graph.py:498] 
I0123 11:10:30.914126 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c i, on_bline n i c ? perp c m m a
I0123 11:10:32.707053 140455392419840 ddar.py:60] Depth 1/1000 time = 1.7490530014038086
I0123 11:10:35.606274 140455392419840 ddar.py:60] Depth 2/1000 time = 2.8990066051483154
I0123 11:10:38.854062 140455392419840 ddar.py:60] Depth 3/1000 time = 3.247551679611206
I0123 11:10:42.116191 140455392419840 ddar.py:60] Depth 4/1000 time = 3.2618491649627686
I0123 11:10:45.073017 140455392419840 ddar.py:60] Depth 5/1000 time = 2.956554412841797
I0123 11:10:48.321205 140455392419840 ddar.py:60] Depth 6/1000 time = 3.2476603984832764
I0123 11:10:51.914234 140455392419840 ddar.py:60] Depth 7/1000 time = 3.5810937881469727
I0123 11:10:55.994968 140455392419840 ddar.py:60] Depth 8/1000 time = 4.080426454544067
I0123 11:10:59.726344 140455392419840 ddar.py:60] Depth 9/1000 time = 3.731126070022583
I0123 11:10:59.746541 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:10:59.746670 140455392419840 alphageometry.py:566] LM output (score=-2.272796): "n : C b k n 19 D b n k n 20 ;"
I0123 11:10:59.746731 140455392419840 alphageometry.py:567] Translation: "n = on_line n b k, on_bline n k b"

I0123 11:10:59.746773 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n b k, on_bline n k b ? perp c m m a"
I0123 11:10:59.746959 140455392419840 graph.py:498] 
I0123 11:10:59.747028 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n b k, on_bline n k b ? perp c m m a
I0123 11:11:01.548670 140455392419840 ddar.py:60] Depth 1/1000 time = 1.756035566329956
I0123 11:11:04.722773 140455392419840 ddar.py:60] Depth 2/1000 time = 3.1738805770874023
I0123 11:11:09.004601 140455392419840 ddar.py:60] Depth 3/1000 time = 4.281543254852295
I0123 11:11:13.438649 140455392419840 ddar.py:60] Depth 4/1000 time = 4.433724641799927
I0123 11:11:17.532753 140455392419840 ddar.py:60] Depth 5/1000 time = 4.093841314315796
I0123 11:11:21.600454 140455392419840 ddar.py:60] Depth 6/1000 time = 4.067124605178833
I0123 11:11:26.333034 140455392419840 ddar.py:60] Depth 7/1000 time = 4.720459222793579
I0123 11:11:30.945244 140455392419840 ddar.py:60] Depth 8/1000 time = 4.61191201210022
I0123 11:11:35.845716 140455392419840 ddar.py:60] Depth 9/1000 time = 4.900099039077759
I0123 11:11:35.866687 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:11:35.866895 140455392419840 alphageometry.py:566] LM output (score=-2.404699): "n : C j k n 19 D j n k n 20 ;"
I0123 11:11:35.866942 140455392419840 alphageometry.py:567] Translation: "n = on_line n j k, on_bline n k j"

I0123 11:11:35.866983 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n j k, on_bline n k j ? perp c m m a"
I0123 11:11:35.867202 140455392419840 graph.py:498] 
I0123 11:11:35.867275 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n j k, on_bline n k j ? perp c m m a
I0123 11:11:37.976662 140455392419840 ddar.py:60] Depth 1/1000 time = 2.065439224243164
I0123 11:11:40.949901 140455392419840 ddar.py:60] Depth 2/1000 time = 2.973024606704712
I0123 11:11:44.233951 140455392419840 ddar.py:60] Depth 3/1000 time = 3.2838375568389893
I0123 11:11:47.602821 140455392419840 ddar.py:60] Depth 4/1000 time = 3.368637800216675
I0123 11:11:51.004699 140455392419840 ddar.py:60] Depth 5/1000 time = 3.4015581607818604
I0123 11:11:54.410515 140455392419840 ddar.py:60] Depth 6/1000 time = 3.4051318168640137
I0123 11:11:58.094024 140455392419840 ddar.py:60] Depth 7/1000 time = 3.6726272106170654
I0123 11:12:01.914191 140455392419840 ddar.py:60] Depth 8/1000 time = 3.8199408054351807
I0123 11:12:06.143835 140455392419840 ddar.py:60] Depth 9/1000 time = 4.229382753372192
I0123 11:12:06.163955 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:12:06.164080 140455392419840 alphageometry.py:566] LM output (score=-2.444606): "n : C c f n 19 D c n f n 20 ;"
I0123 11:12:06.164117 140455392419840 alphageometry.py:567] Translation: "n = on_line n c f, on_bline n f c"

I0123 11:12:06.164176 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c f, on_bline n f c ? perp c m m a"
I0123 11:12:06.164363 140455392419840 graph.py:498] 
I0123 11:12:06.164434 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c f, on_bline n f c ? perp c m m a
I0123 11:12:07.687999 140455392419840 ddar.py:60] Depth 1/1000 time = 1.4787075519561768
I0123 11:12:10.854396 140455392419840 ddar.py:60] Depth 2/1000 time = 3.166188955307007
I0123 11:12:14.271951 140455392419840 ddar.py:60] Depth 3/1000 time = 3.417332649230957
I0123 11:12:18.102865 140455392419840 ddar.py:60] Depth 4/1000 time = 3.830665349960327
I0123 11:12:21.252932 140455392419840 ddar.py:60] Depth 5/1000 time = 3.1498072147369385
I0123 11:12:25.013109 140455392419840 ddar.py:60] Depth 6/1000 time = 3.759678363800049
I0123 11:12:28.868369 140455392419840 ddar.py:60] Depth 7/1000 time = 3.8440797328948975
I0123 11:12:32.950446 140455392419840 ddar.py:60] Depth 8/1000 time = 4.081841230392456
I0123 11:12:37.035410 140455392419840 ddar.py:60] Depth 9/1000 time = 4.084698915481567
I0123 11:12:37.055447 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:12:37.055590 140455392419840 alphageometry.py:566] LM output (score=-2.677712): "n : C c k n 19 D c k k n 20 ;"
I0123 11:12:37.055629 140455392419840 alphageometry.py:567] Translation: "n = on_line n c k, on_circle n k c"

I0123 11:12:37.055670 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c k, on_circle n k c ? perp c m m a"
I0123 11:12:37.055849 140455392419840 graph.py:498] 
I0123 11:12:37.055913 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c k, on_circle n k c ? perp c m m a
I0123 11:12:38.865155 140455392419840 ddar.py:60] Depth 1/1000 time = 1.7635271549224854
I0123 11:12:41.758433 140455392419840 ddar.py:60] Depth 2/1000 time = 2.893054962158203
I0123 11:12:44.921251 140455392419840 ddar.py:60] Depth 3/1000 time = 3.162599802017212
I0123 11:12:48.177828 140455392419840 ddar.py:60] Depth 4/1000 time = 3.2563531398773193
I0123 11:12:51.099987 140455392419840 ddar.py:60] Depth 5/1000 time = 2.9218995571136475
I0123 11:12:54.367534 140455392419840 ddar.py:60] Depth 6/1000 time = 3.266430377960205
I0123 11:12:57.952296 140455392419840 ddar.py:60] Depth 7/1000 time = 3.5751330852508545
I0123 11:13:01.650385 140455392419840 ddar.py:60] Depth 8/1000 time = 3.697843551635742
I0123 11:13:04.975767 140455392419840 ddar.py:60] Depth 9/1000 time = 3.3251307010650635
I0123 11:13:04.992763 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:13:04.992918 140455392419840 alphageometry.py:566] LM output (score=-2.850661): "n : C d e n 19 D d n e n 20 ;"
I0123 11:13:04.992958 140455392419840 alphageometry.py:567] Translation: "n = on_line n d e, on_bline n e d"

I0123 11:13:04.993021 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d e, on_bline n e d ? perp c m m a"
I0123 11:13:04.993201 140455392419840 graph.py:498] 
I0123 11:13:04.993272 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d e, on_bline n e d ? perp c m m a
I0123 11:13:06.811639 140455392419840 ddar.py:60] Depth 1/1000 time = 1.7755560874938965
I0123 11:13:09.669336 140455392419840 ddar.py:60] Depth 2/1000 time = 2.8574726581573486
I0123 11:13:12.801222 140455392419840 ddar.py:60] Depth 3/1000 time = 3.1316702365875244
I0123 11:13:15.628190 140455392419840 ddar.py:60] Depth 4/1000 time = 2.826725721359253
I0123 11:13:18.864190 140455392419840 ddar.py:60] Depth 5/1000 time = 3.2357118129730225
I0123 11:13:21.710676 140455392419840 ddar.py:60] Depth 6/1000 time = 2.8459372520446777
I0123 11:13:25.210200 140455392419840 ddar.py:60] Depth 7/1000 time = 3.489428997039795
I0123 11:13:28.415586 140455392419840 ddar.py:60] Depth 8/1000 time = 3.205167770385742
I0123 11:13:31.977507 140455392419840 ddar.py:60] Depth 9/1000 time = 3.5616493225097656
I0123 11:13:31.993585 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:13:31.993727 140455392419840 alphageometry.py:566] LM output (score=-3.093562): "n : C d k n 19 D d k d n 20 ;"
I0123 11:13:31.993767 140455392419840 alphageometry.py:567] Translation: "n = on_line n d k, on_circle n d k"

I0123 11:13:31.993806 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_circle n d k ? perp c m m a"
I0123 11:13:31.993989 140455392419840 graph.py:498] 
I0123 11:13:31.994060 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_circle n d k ? perp c m m a
I0123 11:13:33.432620 140455392419840 ddar.py:60] Depth 1/1000 time = 1.395676612854004
I0123 11:13:36.216788 140455392419840 ddar.py:60] Depth 2/1000 time = 2.783949136734009
I0123 11:13:39.265707 140455392419840 ddar.py:60] Depth 3/1000 time = 3.0486350059509277
I0123 11:13:42.423109 140455392419840 ddar.py:60] Depth 4/1000 time = 3.157036542892456
I0123 11:13:45.916332 140455392419840 ddar.py:60] Depth 5/1000 time = 3.492964029312134
I0123 11:13:48.993130 140455392419840 ddar.py:60] Depth 6/1000 time = 3.076298236846924
I0123 11:13:52.427341 140455392419840 ddar.py:60] Depth 7/1000 time = 3.4218249320983887
I0123 11:13:55.963066 140455392419840 ddar.py:60] Depth 8/1000 time = 3.5354936122894287
I0123 11:13:59.898734 140455392419840 ddar.py:60] Depth 9/1000 time = 3.935357093811035
I0123 11:13:59.916122 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:13:59.916275 140455392419840 alphageometry.py:566] LM output (score=-3.162186): "n : C k l n 19 D k l k n 20 ;"
I0123 11:13:59.916313 140455392419840 alphageometry.py:567] Translation: "n = on_line n k l, on_circle n k l"

I0123 11:13:59.916390 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k l, on_circle n k l ? perp c m m a"
I0123 11:13:59.916584 140455392419840 graph.py:498] 
I0123 11:13:59.916650 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k l, on_circle n k l ? perp c m m a
I0123 11:14:01.871254 140455392419840 ddar.py:60] Depth 1/1000 time = 1.914759874343872
I0123 11:14:04.458933 140455392419840 ddar.py:60] Depth 2/1000 time = 2.5874340534210205
I0123 11:14:07.621209 140455392419840 ddar.py:60] Depth 3/1000 time = 3.1619110107421875
I0123 11:14:10.511526 140455392419840 ddar.py:60] Depth 4/1000 time = 2.8900814056396484
I0123 11:14:13.387264 140455392419840 ddar.py:60] Depth 5/1000 time = 2.8755218982696533
I0123 11:14:16.630575 140455392419840 ddar.py:60] Depth 6/1000 time = 3.2424895763397217
I0123 11:14:20.190291 140455392419840 ddar.py:60] Depth 7/1000 time = 3.5501534938812256
I0123 11:14:23.451720 140455392419840 ddar.py:60] Depth 8/1000 time = 3.26117205619812
I0123 11:14:27.063699 140455392419840 ddar.py:60] Depth 9/1000 time = 3.6116960048675537
I0123 11:14:27.079502 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:14:27.079662 140455392419840 alphageometry.py:566] LM output (score=-3.230938): "n : C d h n 19 D d h d n 20 ;"
I0123 11:14:27.079703 140455392419840 alphageometry.py:567] Translation: "n = on_line n d h, on_circle n d h"

I0123 11:14:27.079741 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d h, on_circle n d h ? perp c m m a"
I0123 11:14:27.079918 140455392419840 graph.py:498] 
I0123 11:14:27.079988 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d h, on_circle n d h ? perp c m m a
I0123 11:14:29.570136 140455392419840 ddar.py:60] Depth 1/1000 time = 2.4439141750335693
I0123 11:14:33.095890 140455392419840 ddar.py:60] Depth 2/1000 time = 3.525545835494995
I0123 11:14:37.361797 140455392419840 ddar.py:60] Depth 3/1000 time = 4.265700578689575
I0123 11:14:41.723240 140455392419840 ddar.py:60] Depth 4/1000 time = 4.361197233200073
I0123 11:14:46.148218 140455392419840 ddar.py:60] Depth 5/1000 time = 4.424682378768921
I0123 11:14:50.554165 140455392419840 ddar.py:60] Depth 6/1000 time = 4.405320644378662
I0123 11:14:54.920014 140455392419840 ddar.py:60] Depth 7/1000 time = 4.353850603103638
I0123 11:14:59.753828 140455392419840 ddar.py:60] Depth 8/1000 time = 4.833583116531372
I0123 11:15:04.573115 140455392419840 ddar.py:60] Depth 9/1000 time = 4.818962812423706
I0123 11:15:04.593955 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:15:04.594120 140455392419840 alphageometry.py:566] LM output (score=-3.235057): "n : C d e n 19 D d e d n 20 ;"
I0123 11:15:04.594158 140455392419840 alphageometry.py:567] Translation: "n = on_line n d e, on_circle n d e"

I0123 11:15:04.594228 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d e, on_circle n d e ? perp c m m a"
I0123 11:15:04.594419 140455392419840 graph.py:498] 
I0123 11:15:04.594486 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d e, on_circle n d e ? perp c m m a
I0123 11:15:06.580173 140455392419840 ddar.py:60] Depth 1/1000 time = 1.9426383972167969
I0123 11:15:09.844352 140455392419840 ddar.py:60] Depth 2/1000 time = 3.2639288902282715
I0123 11:15:13.437335 140455392419840 ddar.py:60] Depth 3/1000 time = 3.5927581787109375
I0123 11:15:16.754093 140455392419840 ddar.py:60] Depth 4/1000 time = 3.316526412963867
I0123 11:15:20.458546 140455392419840 ddar.py:60] Depth 5/1000 time = 3.704197406768799
I0123 11:15:24.199889 140455392419840 ddar.py:60] Depth 6/1000 time = 3.7408065795898438
I0123 11:15:27.907249 140455392419840 ddar.py:60] Depth 7/1000 time = 3.6937191486358643
I0123 11:15:32.105908 140455392419840 ddar.py:60] Depth 8/1000 time = 4.19837212562561
I0123 11:15:36.316246 140455392419840 ddar.py:60] Depth 9/1000 time = 4.210053205490112
I0123 11:15:36.333440 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:15:36.333565 140455392419840 alphageometry.py:566] LM output (score=-3.271397): "n : C d g n 19 D d g d n 20 ;"
I0123 11:15:36.333602 140455392419840 alphageometry.py:567] Translation: "n = on_line n d g, on_circle n d g"

I0123 11:15:36.333647 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d g, on_circle n d g ? perp c m m a"
I0123 11:15:36.333833 140455392419840 graph.py:498] 
I0123 11:15:36.333902 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d g, on_circle n d g ? perp c m m a
I0123 11:15:37.840806 140455392419840 ddar.py:60] Depth 1/1000 time = 1.4591503143310547
I0123 11:15:40.224566 140455392419840 ddar.py:60] Depth 2/1000 time = 2.3835670948028564
I0123 11:15:43.713534 140455392419840 ddar.py:60] Depth 3/1000 time = 3.4887442588806152
I0123 11:15:47.008253 140455392419840 ddar.py:60] Depth 4/1000 time = 3.294522762298584
I0123 11:15:49.896458 140455392419840 ddar.py:60] Depth 5/1000 time = 2.887924909591675
I0123 11:15:53.509021 140455392419840 ddar.py:60] Depth 6/1000 time = 3.6119725704193115
I0123 11:15:57.050233 140455392419840 ddar.py:60] Depth 7/1000 time = 3.5267910957336426
I0123 11:16:00.658772 140455392419840 ddar.py:60] Depth 8/1000 time = 3.608311891555786
I0123 11:16:04.726673 140455392419840 ddar.py:60] Depth 9/1000 time = 4.067624568939209
I0123 11:16:04.744365 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:16:04.744522 140455392419840 alphageometry.py:566] LM output (score=-3.302054): "n : D c d d n 19 D c e e n 20 ;"
I0123 11:16:04.744568 140455392419840 alphageometry.py:567] Translation: "n = on_circle n d c, on_circle n e c"

I0123 11:16:04.744609 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_circle n d c, on_circle n e c ? perp c m m a"
I0123 11:16:04.744826 140455392419840 graph.py:498] 
I0123 11:16:04.744901 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_circle n d c, on_circle n e c ? perp c m m a
I0123 11:16:06.326456 140455392419840 ddar.py:60] Depth 1/1000 time = 1.5309014320373535
I0123 11:16:08.777762 140455392419840 ddar.py:60] Depth 2/1000 time = 2.451033115386963
I0123 11:16:12.339588 140455392419840 ddar.py:60] Depth 3/1000 time = 3.5614867210388184
I0123 11:16:16.380373 140455392419840 ddar.py:60] Depth 4/1000 time = 4.040524959564209
I0123 11:16:19.728919 140455392419840 ddar.py:60] Depth 5/1000 time = 3.3483164310455322
I0123 11:16:23.492089 140455392419840 ddar.py:60] Depth 6/1000 time = 3.7629523277282715
I0123 11:16:27.651487 140455392419840 ddar.py:60] Depth 7/1000 time = 4.158914566040039
I0123 11:16:31.830306 140455392419840 ddar.py:60] Depth 8/1000 time = 4.161986351013184
I0123 11:16:36.114772 140455392419840 ddar.py:60] Depth 9/1000 time = 4.284132719039917
I0123 11:16:40.299639 140455392419840 ddar.py:60] Depth 10/1000 time = 4.184606075286865
I0123 11:16:40.330804 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:16:40.330933 140455392419840 alphageometry.py:566] LM output (score=-3.320049): "n : C d h n 19 D h k k n 20 ;"
I0123 11:16:40.330971 140455392419840 alphageometry.py:567] Translation: "n = on_line n d h, on_circle n k h"

I0123 11:16:40.331012 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d h, on_circle n k h ? perp c m m a"
I0123 11:16:40.331191 140455392419840 graph.py:498] 
I0123 11:16:40.331261 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d h, on_circle n k h ? perp c m m a
I0123 11:16:42.516281 140455392419840 ddar.py:60] Depth 1/1000 time = 2.141223907470703
I0123 11:16:46.327167 140455392419840 ddar.py:60] Depth 2/1000 time = 3.810673236846924
I0123 11:16:50.556804 140455392419840 ddar.py:60] Depth 3/1000 time = 4.229420900344849
I0123 11:16:54.626647 140455392419840 ddar.py:60] Depth 4/1000 time = 4.0696094036102295
I0123 11:16:59.072069 140455392419840 ddar.py:60] Depth 5/1000 time = 4.445131778717041
I0123 11:17:03.536020 140455392419840 ddar.py:60] Depth 6/1000 time = 4.4632954597473145
I0123 11:17:08.060678 140455392419840 ddar.py:60] Depth 7/1000 time = 4.511083126068115
I0123 11:17:13.534883 140455392419840 ddar.py:60] Depth 8/1000 time = 5.473912477493286
I0123 11:17:18.185055 140455392419840 ddar.py:60] Depth 9/1000 time = 4.649776935577393
I0123 11:17:23.664932 140455392419840 ddar.py:60] Depth 10/1000 time = 5.459754228591919
I0123 11:17:23.669196 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:17:23.669339 140455392419840 alphageometry.py:566] LM output (score=-3.375712): "n : T d e e n 19 ;"
I0123 11:17:23.669401 140455392419840 alphageometry.py:567] Translation: "n = on_tline n e d e"

I0123 11:17:23.669443 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_tline n e d e ? perp c m m a"
I0123 11:17:23.669626 140455392419840 graph.py:498] 
I0123 11:17:23.669703 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_tline n e d e ? perp c m m a
I0123 11:17:24.610250 140455392419840 ddar.py:60] Depth 1/1000 time = 0.9048879146575928
I0123 11:17:26.997576 140455392419840 ddar.py:60] Depth 2/1000 time = 2.387122631072998
I0123 11:17:29.246104 140455392419840 ddar.py:60] Depth 3/1000 time = 2.2483279705047607
I0123 11:17:31.942955 140455392419840 ddar.py:60] Depth 4/1000 time = 2.696617364883423
I0123 11:17:34.274670 140455392419840 ddar.py:60] Depth 5/1000 time = 2.3314642906188965
I0123 11:17:36.998648 140455392419840 ddar.py:60] Depth 6/1000 time = 2.723506212234497
I0123 11:17:40.047157 140455392419840 ddar.py:60] Depth 7/1000 time = 3.0373387336730957
I0123 11:17:43.138426 140455392419840 ddar.py:60] Depth 8/1000 time = 3.0910229682922363
I0123 11:17:45.813065 140455392419840 ddar.py:60] Depth 9/1000 time = 2.674384355545044
I0123 11:17:45.828174 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:17:45.828314 140455392419840 alphageometry.py:566] LM output (score=-3.414869): "n : C i k n 19 D i k i n 20 ;"
I0123 11:17:45.828357 140455392419840 alphageometry.py:567] Translation: "n = on_line n i k, on_circle n i k"

I0123 11:17:45.828399 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n i k, on_circle n i k ? perp c m m a"
I0123 11:17:45.828579 140455392419840 graph.py:498] 
I0123 11:17:45.828647 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n i k, on_circle n i k ? perp c m m a
I0123 11:17:47.716427 140455392419840 ddar.py:60] Depth 1/1000 time = 1.837475299835205
I0123 11:17:49.878603 140455392419840 ddar.py:60] Depth 2/1000 time = 2.1619644165039062
I0123 11:17:52.700592 140455392419840 ddar.py:60] Depth 3/1000 time = 2.8217689990997314
I0123 11:17:55.648674 140455392419840 ddar.py:60] Depth 4/1000 time = 2.947842597961426
I0123 11:17:58.578725 140455392419840 ddar.py:60] Depth 5/1000 time = 2.9297401905059814
I0123 11:18:01.077080 140455392419840 ddar.py:60] Depth 6/1000 time = 2.497741460800171
I0123 11:18:04.659226 140455392419840 ddar.py:60] Depth 7/1000 time = 3.5720810890197754
I0123 11:18:07.960485 140455392419840 ddar.py:60] Depth 8/1000 time = 3.3010640144348145
I0123 11:18:10.811795 140455392419840 ddar.py:60] Depth 9/1000 time = 2.8510518074035645
I0123 11:18:10.830359 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:18:10.830483 140455392419840 alphageometry.py:566] LM output (score=-3.461200): "n : T c e c n 19 ;"
I0123 11:18:10.830521 140455392419840 alphageometry.py:567] Translation: "n = on_tline n c c e"

I0123 11:18:10.830592 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_tline n c c e ? perp c m m a"
I0123 11:18:10.830772 140455392419840 graph.py:498] 
I0123 11:18:10.830842 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_tline n c c e ? perp c m m a
I0123 11:18:12.622882 140455392419840 ddar.py:60] Depth 1/1000 time = 1.7594683170318604
I0123 11:18:14.602820 140455392419840 ddar.py:60] Depth 2/1000 time = 1.979729175567627
I0123 11:18:17.254225 140455392419840 ddar.py:60] Depth 3/1000 time = 2.6511852741241455
I0123 11:18:20.059186 140455392419840 ddar.py:60] Depth 4/1000 time = 2.8047173023223877
I0123 11:18:22.839921 140455392419840 ddar.py:60] Depth 5/1000 time = 2.7804319858551025
I0123 11:18:25.630584 140455392419840 ddar.py:60] Depth 6/1000 time = 2.790222644805908
I0123 11:18:28.300543 140455392419840 ddar.py:60] Depth 7/1000 time = 2.6616270542144775
I0123 11:18:31.824365 140455392419840 ddar.py:60] Depth 8/1000 time = 3.523599863052368
I0123 11:18:34.963780 140455392419840 ddar.py:60] Depth 9/1000 time = 3.139153480529785
I0123 11:18:34.979062 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:18:34.979190 140455392419840 alphageometry.py:566] LM output (score=-3.466181): "n : T d e d n 19 ;"
I0123 11:18:34.979227 140455392419840 alphageometry.py:567] Translation: "n = on_tline n d d e"

I0123 11:18:34.979267 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_tline n d d e ? perp c m m a"
I0123 11:18:34.979440 140455392419840 graph.py:498] 
I0123 11:18:34.979509 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_tline n d d e ? perp c m m a
I0123 11:18:35.916468 140455392419840 ddar.py:60] Depth 1/1000 time = 0.9019598960876465
I0123 11:18:38.326129 140455392419840 ddar.py:60] Depth 2/1000 time = 2.4094464778900146
I0123 11:18:40.596999 140455392419840 ddar.py:60] Depth 3/1000 time = 2.2706446647644043
I0123 11:18:43.299291 140455392419840 ddar.py:60] Depth 4/1000 time = 2.702040433883667
I0123 11:18:46.010859 140455392419840 ddar.py:60] Depth 5/1000 time = 2.7113304138183594
I0123 11:18:48.370498 140455392419840 ddar.py:60] Depth 6/1000 time = 2.3591713905334473
I0123 11:18:51.379678 140455392419840 ddar.py:60] Depth 7/1000 time = 2.9991469383239746
I0123 11:18:54.501921 140455392419840 ddar.py:60] Depth 8/1000 time = 3.12202787399292
I0123 11:18:57.163683 140455392419840 ddar.py:60] Depth 9/1000 time = 2.6615099906921387
I0123 11:18:57.179982 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:18:57.180126 140455392419840 alphageometry.py:540] Depth 1. There are 32 nodes to expand:
I0123 11:18:57.180168 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C a c n 19 D a n c n 20 ; x00
I0123 11:18:57.180225 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C d k n 19 D d n k n 20 ; x00
I0123 11:18:57.180254 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C k m n 19 D k n m n 20 ; x00
I0123 11:18:57.180282 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C c d n 19 D c n d n 20 ; x00
I0123 11:18:57.180309 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C d g n 19 D d n g n 20 ; x00
I0123 11:18:57.180334 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C c h n 19 D c n h n 20 ; x00
I0123 11:18:57.180359 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C i k n 19 D i n k n 20 ; x00
I0123 11:18:57.180385 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C h k n 19 D h n k n 20 ; x00
I0123 11:18:57.180410 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C k l n 19 D k n l n 20 ; x00
I0123 11:18:57.180435 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C b g n 19 D b n g n 20 ; x00
I0123 11:18:57.180460 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C c g n 19 D c n g n 20 ; x00
I0123 11:18:57.180489 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C g k n 19 D g n k n 20 ; x00
I0123 11:18:57.180516 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C c j n 19 D c n j n 20 ; x00
I0123 11:18:57.180541 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C c e n 19 D c n e n 20 ; x00
I0123 11:18:57.180566 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C b e n 19 D b n e n 20 ; x00
I0123 11:18:57.180591 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C c i n 19 D c n i n 20 ; x00
I0123 11:18:57.180615 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C b k n 19 D b n k n 20 ; x00
I0123 11:18:57.180640 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C j k n 19 D j n k n 20 ; x00
I0123 11:18:57.180665 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C c f n 19 D c n f n 20 ; x00
I0123 11:18:57.180689 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C c k n 19 D c k k n 20 ; x00
I0123 11:18:57.180714 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C d e n 19 D d n e n 20 ; x00
I0123 11:18:57.180741 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C d k n 19 D d k d n 20 ; x00
I0123 11:18:57.180766 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C k l n 19 D k l k n 20 ; x00
I0123 11:18:57.180791 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C d h n 19 D d h d n 20 ; x00
I0123 11:18:57.180816 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C d e n 19 D d e d n 20 ; x00
I0123 11:18:57.180839 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C d g n 19 D d g d n 20 ; x00
I0123 11:18:57.180864 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : D c d d n 19 D c e e n 20 ; x00
I0123 11:18:57.180888 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C d h n 19 D h k k n 20 ; x00
I0123 11:18:57.180912 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : T d e e n 19 ; x00
I0123 11:18:57.180937 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C i k n 19 D i k i n 20 ; x00
I0123 11:18:57.180963 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : T c e c n 19 ; x00
I0123 11:18:57.180988 140455392419840 alphageometry.py:544] {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : T d e d n 19 ; x00
I0123 11:18:57.181014 140455392419840 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C a c n 19 D a n c n 20 ; x00
I0123 11:19:04.277359 140455392419840 alphageometry.py:566] LM output (score=-0.365332): "o : C a k o 21 D a o k o 22 ;"
I0123 11:19:04.277688 140455392419840 alphageometry.py:567] Translation: "o = on_line o a k, on_bline o k a"

I0123 11:19:04.277751 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o a k, on_bline o k a ? perp c m m a"
I0123 11:19:04.277944 140455392419840 graph.py:498] 
I0123 11:19:04.278012 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o a k, on_bline o k a ? perp c m m a
I0123 11:19:06.493985 140455392419840 ddar.py:60] Depth 1/1000 time = 2.161435127258301
I0123 11:19:09.827148 140455392419840 ddar.py:60] Depth 2/1000 time = 3.3329367637634277
I0123 11:19:14.074696 140455392419840 ddar.py:60] Depth 3/1000 time = 4.2473320960998535
I0123 11:19:18.904403 140455392419840 ddar.py:60] Depth 4/1000 time = 4.8294782638549805
I0123 11:19:23.761687 140455392419840 ddar.py:60] Depth 5/1000 time = 4.8570332527160645
I0123 11:19:28.610162 140455392419840 ddar.py:60] Depth 6/1000 time = 4.848206520080566
I0123 11:19:33.017428 140455392419840 ddar.py:60] Depth 7/1000 time = 4.40649676322937
I0123 11:19:38.162661 140455392419840 ddar.py:60] Depth 8/1000 time = 5.130412817001343
I0123 11:19:43.494403 140455392419840 ddar.py:60] Depth 9/1000 time = 5.33147406578064
I0123 11:19:48.309061 140455392419840 ddar.py:60] Depth 10/1000 time = 4.814373254776001
I0123 11:19:48.338124 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:19:48.338196 140455392419840 alphageometry.py:566] LM output (score=-1.016436): "o : C k m o 21 D k o m o 22 ;"
I0123 11:19:48.338234 140455392419840 alphageometry.py:567] Translation: "o = on_line o k m, on_bline o m k"

I0123 11:19:48.338270 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o k m, on_bline o m k ? perp c m m a"
I0123 11:19:48.338494 140455392419840 graph.py:498] 
I0123 11:19:48.338566 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o k m, on_bline o m k ? perp c m m a
I0123 11:19:50.449692 140455392419840 ddar.py:60] Depth 1/1000 time = 2.0564284324645996
I0123 11:19:53.591892 140455392419840 ddar.py:60] Depth 2/1000 time = 3.1419734954833984
I0123 11:19:57.148803 140455392419840 ddar.py:60] Depth 3/1000 time = 3.556687355041504
I0123 11:20:00.858827 140455392419840 ddar.py:60] Depth 4/1000 time = 3.7097713947296143
I0123 11:20:04.589483 140455392419840 ddar.py:60] Depth 5/1000 time = 3.730341911315918
I0123 11:20:08.796916 140455392419840 ddar.py:60] Depth 6/1000 time = 4.207121133804321
I0123 11:20:12.545016 140455392419840 ddar.py:60] Depth 7/1000 time = 3.747413396835327
I0123 11:20:16.609622 140455392419840 ddar.py:60] Depth 8/1000 time = 4.049362421035767
I0123 11:20:21.196158 140455392419840 ddar.py:60] Depth 9/1000 time = 4.586081266403198
I0123 11:20:25.359775 140455392419840 ddar.py:60] Depth 10/1000 time = 4.163341760635376
I0123 11:20:25.388651 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:20:25.388721 140455392419840 alphageometry.py:566] LM output (score=-1.182804): "o : C d k o 21 D d o k o 22 ;"
I0123 11:20:25.388759 140455392419840 alphageometry.py:567] Translation: "o = on_line o d k, on_bline o k d"

I0123 11:20:25.388798 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o d k, on_bline o k d ? perp c m m a"
I0123 11:20:25.388993 140455392419840 graph.py:498] 
I0123 11:20:25.389066 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o d k, on_bline o k d ? perp c m m a
I0123 11:20:27.106786 140455392419840 ddar.py:60] Depth 1/1000 time = 1.6630196571350098
I0123 11:20:30.384458 140455392419840 ddar.py:60] Depth 2/1000 time = 3.2773995399475098
I0123 11:20:34.185019 140455392419840 ddar.py:60] Depth 3/1000 time = 3.800217390060425
I0123 11:20:38.047730 140455392419840 ddar.py:60] Depth 4/1000 time = 3.862459897994995
I0123 11:20:41.898795 140455392419840 ddar.py:60] Depth 5/1000 time = 3.850799322128296
I0123 11:20:46.202670 140455392419840 ddar.py:60] Depth 6/1000 time = 4.30360221862793
I0123 11:20:50.124548 140455392419840 ddar.py:60] Depth 7/1000 time = 3.921262741088867
I0123 11:20:54.320450 140455392419840 ddar.py:60] Depth 8/1000 time = 4.179265260696411
I0123 11:20:58.627284 140455392419840 ddar.py:60] Depth 9/1000 time = 4.3065571784973145
I0123 11:21:03.447335 140455392419840 ddar.py:60] Depth 10/1000 time = 4.81972074508667
I0123 11:21:03.475778 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:21:03.475854 140455392419840 alphageometry.py:566] LM output (score=-1.431342): "o : C k l o 21 D k o l o 22 ;"
I0123 11:21:03.475892 140455392419840 alphageometry.py:567] Translation: "o = on_line o k l, on_bline o l k"

I0123 11:21:03.475935 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o k l, on_bline o l k ? perp c m m a"
I0123 11:21:03.476163 140455392419840 graph.py:498] 
I0123 11:21:03.476238 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o k l, on_bline o l k ? perp c m m a
I0123 11:21:05.329290 140455392419840 ddar.py:60] Depth 1/1000 time = 1.794947624206543
I0123 11:21:08.994974 140455392419840 ddar.py:60] Depth 2/1000 time = 3.6654584407806396
I0123 11:21:12.545813 140455392419840 ddar.py:60] Depth 3/1000 time = 3.5506088733673096
I0123 11:21:16.682980 140455392419840 ddar.py:60] Depth 4/1000 time = 4.136934041976929
I0123 11:21:20.951714 140455392419840 ddar.py:60] Depth 5/1000 time = 4.268461227416992
I0123 11:21:24.714033 140455392419840 ddar.py:60] Depth 6/1000 time = 3.76202654838562
I0123 11:21:28.895063 140455392419840 ddar.py:60] Depth 7/1000 time = 4.179638385772705
I0123 11:21:33.426448 140455392419840 ddar.py:60] Depth 8/1000 time = 4.517466306686401
I0123 11:21:37.565653 140455392419840 ddar.py:60] Depth 9/1000 time = 4.138959884643555
I0123 11:21:42.093914 140455392419840 ddar.py:60] Depth 10/1000 time = 4.527983903884888
I0123 11:21:42.117277 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:21:42.117343 140455392419840 alphageometry.py:566] LM output (score=-1.886929): "o : C j k o 21 D j o k o 22 ;"
I0123 11:21:42.117381 140455392419840 alphageometry.py:567] Translation: "o = on_line o j k, on_bline o k j"

I0123 11:21:42.117423 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o j k, on_bline o k j ? perp c m m a"
I0123 11:21:42.117619 140455392419840 graph.py:498] 
I0123 11:21:42.117701 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o j k, on_bline o k j ? perp c m m a
I0123 11:21:44.432134 140455392419840 ddar.py:60] Depth 1/1000 time = 2.2588884830474854
I0123 11:21:48.349986 140455392419840 ddar.py:60] Depth 2/1000 time = 3.9176506996154785
I0123 11:21:52.760281 140455392419840 ddar.py:60] Depth 3/1000 time = 4.410067796707153
I0123 11:21:57.358932 140455392419840 ddar.py:60] Depth 4/1000 time = 4.598403692245483
I0123 11:22:01.950877 140455392419840 ddar.py:60] Depth 5/1000 time = 4.591654539108276
I0123 11:22:06.506232 140455392419840 ddar.py:60] Depth 6/1000 time = 4.55507493019104
I0123 11:22:11.592520 140455392419840 ddar.py:60] Depth 7/1000 time = 5.085592269897461
I0123 11:22:16.656574 140455392419840 ddar.py:60] Depth 8/1000 time = 5.048280477523804
I0123 11:22:21.866922 140455392419840 ddar.py:60] Depth 9/1000 time = 5.210081577301025
I0123 11:22:27.066572 140455392419840 ddar.py:60] Depth 10/1000 time = 5.199324369430542
I0123 11:22:27.097730 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:22:27.097806 140455392419840 alphageometry.py:566] LM output (score=-1.921591): "o : C g k o 21 D g o k o 22 ;"
I0123 11:22:27.097865 140455392419840 alphageometry.py:567] Translation: "o = on_line o g k, on_bline o k g"

I0123 11:22:27.097903 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o g k, on_bline o k g ? perp c m m a"
I0123 11:22:27.098093 140455392419840 graph.py:498] 
I0123 11:22:27.098165 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o g k, on_bline o k g ? perp c m m a
I0123 11:22:29.429597 140455392419840 ddar.py:60] Depth 1/1000 time = 2.2760815620422363
I0123 11:22:32.853060 140455392419840 ddar.py:60] Depth 2/1000 time = 3.4232261180877686
I0123 11:22:37.223515 140455392419840 ddar.py:60] Depth 3/1000 time = 4.3702263832092285
I0123 11:22:42.011221 140455392419840 ddar.py:60] Depth 4/1000 time = 4.78746223449707
I0123 11:22:47.255705 140455392419840 ddar.py:60] Depth 5/1000 time = 5.244169473648071
I0123 11:22:52.116447 140455392419840 ddar.py:60] Depth 6/1000 time = 4.859975337982178
I0123 11:22:57.304772 140455392419840 ddar.py:60] Depth 7/1000 time = 5.173140048980713
I0123 11:23:02.653520 140455392419840 ddar.py:60] Depth 8/1000 time = 5.348529577255249
I0123 11:23:07.534719 140455392419840 ddar.py:60] Depth 9/1000 time = 4.880914926528931
I0123 11:23:13.448551 140455392419840 ddar.py:60] Depth 10/1000 time = 5.882393836975098
I0123 11:23:13.453099 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:23:13.453162 140455392419840 alphageometry.py:566] LM output (score=-1.979323): "o : C h k o 21 D h o k o 22 ;"
I0123 11:23:13.453197 140455392419840 alphageometry.py:567] Translation: "o = on_line o h k, on_bline o k h"

I0123 11:23:13.453234 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o h k, on_bline o k h ? perp c m m a"
I0123 11:23:13.453419 140455392419840 graph.py:498] 
I0123 11:23:13.453483 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o h k, on_bline o k h ? perp c m m a
I0123 11:23:15.333448 140455392419840 ddar.py:60] Depth 1/1000 time = 1.8248443603515625
I0123 11:23:19.331461 140455392419840 ddar.py:60] Depth 2/1000 time = 3.9977941513061523
I0123 11:23:23.790194 140455392419840 ddar.py:60] Depth 3/1000 time = 4.458518028259277
I0123 11:23:27.969258 140455392419840 ddar.py:60] Depth 4/1000 time = 4.178827285766602
I0123 11:23:32.594568 140455392419840 ddar.py:60] Depth 5/1000 time = 4.625048398971558
I0123 11:23:37.694619 140455392419840 ddar.py:60] Depth 6/1000 time = 5.099746465682983
I0123 11:23:42.372804 140455392419840 ddar.py:60] Depth 7/1000 time = 4.677435874938965
I0123 11:23:47.449348 140455392419840 ddar.py:60] Depth 8/1000 time = 5.059839248657227
I0123 11:23:52.576015 140455392419840 ddar.py:60] Depth 9/1000 time = 5.126450061798096
I0123 11:23:57.782120 140455392419840 ddar.py:60] Depth 10/1000 time = 5.205865144729614
I0123 11:23:57.814471 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:23:57.814545 140455392419840 alphageometry.py:566] LM output (score=-2.073649): "o : C b k o 21 D b o k o 22 ;"
I0123 11:23:57.814580 140455392419840 alphageometry.py:567] Translation: "o = on_line o b k, on_bline o k b"

I0123 11:23:57.814615 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o b k, on_bline o k b ? perp c m m a"
I0123 11:23:57.814803 140455392419840 graph.py:498] 
I0123 11:23:57.814872 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o b k, on_bline o k b ? perp c m m a
I0123 11:23:59.728493 140455392419840 ddar.py:60] Depth 1/1000 time = 1.8583674430847168
I0123 11:24:03.973260 140455392419840 ddar.py:60] Depth 2/1000 time = 4.244426012039185
I0123 11:24:09.706068 140455392419840 ddar.py:60] Depth 3/1000 time = 5.732572793960571
I0123 11:24:14.678338 140455392419840 ddar.py:60] Depth 4/1000 time = 4.972047567367554
I0123 11:24:20.605717 140455392419840 ddar.py:60] Depth 5/1000 time = 5.927123546600342
I0123 11:24:26.153844 140455392419840 ddar.py:60] Depth 6/1000 time = 5.547836780548096
I0123 11:24:31.686809 140455392419840 ddar.py:60] Depth 7/1000 time = 5.532285690307617
I0123 11:24:37.526598 140455392419840 ddar.py:60] Depth 8/1000 time = 5.822653770446777
I0123 11:24:43.575814 140455392419840 ddar.py:60] Depth 9/1000 time = 6.048962831497192
I0123 11:24:49.634490 140455392419840 ddar.py:60] Depth 10/1000 time = 6.058356046676636
I0123 11:24:49.665325 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:24:49.665424 140455392419840 alphageometry.py:566] LM output (score=-2.109638): "o : C i k o 21 D i o k o 22 ;"
I0123 11:24:49.665461 140455392419840 alphageometry.py:567] Translation: "o = on_line o i k, on_bline o k i"

I0123 11:24:49.665512 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o i k, on_bline o k i ? perp c m m a"
I0123 11:24:49.665915 140455392419840 graph.py:498] 
I0123 11:24:49.665984 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o i k, on_bline o k i ? perp c m m a
I0123 11:24:51.941134 140455392419840 ddar.py:60] Depth 1/1000 time = 2.219607353210449
I0123 11:24:54.733606 140455392419840 ddar.py:60] Depth 2/1000 time = 2.7922534942626953
I0123 11:24:58.396342 140455392419840 ddar.py:60] Depth 3/1000 time = 3.662490129470825
I0123 11:25:02.751848 140455392419840 ddar.py:60] Depth 4/1000 time = 4.355260372161865
I0123 11:25:06.123164 140455392419840 ddar.py:60] Depth 5/1000 time = 3.3710474967956543
I0123 11:25:10.547254 140455392419840 ddar.py:60] Depth 6/1000 time = 4.423800230026245
I0123 11:25:14.458058 140455392419840 ddar.py:60] Depth 7/1000 time = 3.9102165699005127
I0123 11:25:18.687834 140455392419840 ddar.py:60] Depth 8/1000 time = 4.214803457260132
I0123 11:25:22.960674 140455392419840 ddar.py:60] Depth 9/1000 time = 4.272589921951294
I0123 11:25:27.210592 140455392419840 ddar.py:60] Depth 10/1000 time = 4.249639272689819
I0123 11:25:27.238631 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:25:27.238703 140455392419840 alphageometry.py:566] LM output (score=-2.264733): "o : C e k o 21 D e o k o 22 ;"
I0123 11:25:27.238740 140455392419840 alphageometry.py:567] Translation: "o = on_line o e k, on_bline o k e"

I0123 11:25:27.238779 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o e k, on_bline o k e ? perp c m m a"
I0123 11:25:27.238977 140455392419840 graph.py:498] 
I0123 11:25:27.239050 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o e k, on_bline o k e ? perp c m m a
I0123 11:25:28.991943 140455392419840 ddar.py:60] Depth 1/1000 time = 1.6977336406707764
I0123 11:25:32.235171 140455392419840 ddar.py:60] Depth 2/1000 time = 3.243020534515381
I0123 11:25:35.940430 140455392419840 ddar.py:60] Depth 3/1000 time = 3.7050487995147705
I0123 11:25:39.861733 140455392419840 ddar.py:60] Depth 4/1000 time = 3.9210476875305176
I0123 11:25:43.762600 140455392419840 ddar.py:60] Depth 5/1000 time = 3.9005630016326904
I0123 11:25:47.667558 140455392419840 ddar.py:60] Depth 6/1000 time = 3.9046895503997803
I0123 11:25:51.571298 140455392419840 ddar.py:60] Depth 7/1000 time = 3.903141498565674
I0123 11:25:55.689154 140455392419840 ddar.py:60] Depth 8/1000 time = 4.102773189544678
I0123 11:25:59.998452 140455392419840 ddar.py:60] Depth 9/1000 time = 4.309051036834717
I0123 11:26:04.351966 140455392419840 ddar.py:60] Depth 10/1000 time = 4.353176832199097
I0123 11:26:04.378650 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:26:04.378746 140455392419840 alphageometry.py:566] LM output (score=-2.301027): "o : C b g o 21 D b o g o 22 ;"
I0123 11:26:04.378782 140455392419840 alphageometry.py:567] Translation: "o = on_line o b g, on_bline o g b"

I0123 11:26:04.378831 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o b g, on_bline o g b ? perp c m m a"
I0123 11:26:04.379038 140455392419840 graph.py:498] 
I0123 11:26:04.379104 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o b g, on_bline o g b ? perp c m m a
I0123 11:26:06.864625 140455392419840 ddar.py:60] Depth 1/1000 time = 2.4295976161956787
I0123 11:26:10.824456 140455392419840 ddar.py:60] Depth 2/1000 time = 3.959592580795288
I0123 11:26:16.876984 140455392419840 ddar.py:60] Depth 3/1000 time = 6.052277565002441
I0123 11:26:23.627240 140455392419840 ddar.py:60] Depth 4/1000 time = 6.750033617019653
I0123 11:26:30.075172 140455392419840 ddar.py:60] Depth 5/1000 time = 6.4476330280303955
I0123 11:26:36.496834 140455392419840 ddar.py:60] Depth 6/1000 time = 6.421252727508545
I0123 11:26:42.882338 140455392419840 ddar.py:60] Depth 7/1000 time = 6.384844064712524
I0123 11:26:49.870508 140455392419840 ddar.py:60] Depth 8/1000 time = 6.936346769332886
I0123 11:26:56.466064 140455392419840 ddar.py:60] Depth 9/1000 time = 6.583293914794922
I0123 11:26:56.466377 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:26:56.466439 140455392419840 alphageometry.py:566] LM output (score=-2.458240): "o : C l k o 21 D l o k o 22 ;"
I0123 11:26:56.466473 140455392419840 alphageometry.py:567] Translation: "o = on_line o l k, on_bline o k l"

I0123 11:26:56.466515 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o l k, on_bline o k l ? perp c m m a"
I0123 11:26:56.466707 140455392419840 graph.py:498] 
I0123 11:26:56.466774 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o l k, on_bline o k l ? perp c m m a
I0123 11:26:58.392625 140455392419840 ddar.py:60] Depth 1/1000 time = 1.8671674728393555
I0123 11:27:01.778536 140455392419840 ddar.py:60] Depth 2/1000 time = 3.3857030868530273
I0123 11:27:05.445196 140455392419840 ddar.py:60] Depth 3/1000 time = 3.666445255279541
I0123 11:27:09.786409 140455392419840 ddar.py:60] Depth 4/1000 time = 4.340991973876953
I0123 11:27:13.650622 140455392419840 ddar.py:60] Depth 5/1000 time = 3.8639321327209473
I0123 11:27:18.078355 140455392419840 ddar.py:60] Depth 6/1000 time = 4.427443265914917
I0123 11:27:21.953577 140455392419840 ddar.py:60] Depth 7/1000 time = 3.8738222122192383
I0123 11:27:26.661290 140455392419840 ddar.py:60] Depth 8/1000 time = 4.693395137786865
I0123 11:27:30.938299 140455392419840 ddar.py:60] Depth 9/1000 time = 4.276773691177368
I0123 11:27:35.725219 140455392419840 ddar.py:60] Depth 10/1000 time = 4.786667823791504
I0123 11:27:35.748504 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:27:35.748579 140455392419840 alphageometry.py:566] LM output (score=-2.473799): "o : C l m o 21 D l m l o 22 ;"
I0123 11:27:35.748616 140455392419840 alphageometry.py:567] Translation: "o = on_line o l m, on_circle o l m"

I0123 11:27:35.748656 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o l m, on_circle o l m ? perp c m m a"
I0123 11:27:35.748846 140455392419840 graph.py:498] 
I0123 11:27:35.748917 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o l m, on_circle o l m ? perp c m m a
I0123 11:27:37.765799 140455392419840 ddar.py:60] Depth 1/1000 time = 1.9612796306610107
I0123 11:27:41.521668 140455392419840 ddar.py:60] Depth 2/1000 time = 3.755618095397949
I0123 11:27:46.254637 140455392419840 ddar.py:60] Depth 3/1000 time = 4.732658624649048
I0123 11:27:50.587562 140455392419840 ddar.py:60] Depth 4/1000 time = 4.332645654678345
I0123 11:27:55.486521 140455392419840 ddar.py:60] Depth 5/1000 time = 4.898642063140869
I0123 11:28:00.422497 140455392419840 ddar.py:60] Depth 6/1000 time = 4.935669660568237
I0123 11:28:04.842614 140455392419840 ddar.py:60] Depth 7/1000 time = 4.419349908828735
I0123 11:28:10.147531 140455392419840 ddar.py:60] Depth 8/1000 time = 5.288171768188477
I0123 11:28:14.946431 140455392419840 ddar.py:60] Depth 9/1000 time = 4.798598289489746
I0123 11:28:19.730851 140455392419840 ddar.py:60] Depth 10/1000 time = 4.78409218788147
I0123 11:28:19.755813 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:28:19.755882 140455392419840 alphageometry.py:566] LM output (score=-2.575404): "o : C a e o 21 D a o e o 22 ;"
I0123 11:28:19.755917 140455392419840 alphageometry.py:567] Translation: "o = on_line o a e, on_bline o e a"

I0123 11:28:19.755957 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o a e, on_bline o e a ? perp c m m a"
I0123 11:28:19.756152 140455392419840 graph.py:498] 
I0123 11:28:19.756223 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o a e, on_bline o e a ? perp c m m a
I0123 11:28:22.209173 140455392419840 ddar.py:60] Depth 1/1000 time = 2.3978569507598877
I0123 11:28:26.016390 140455392419840 ddar.py:60] Depth 2/1000 time = 3.8069846630096436
I0123 11:28:30.965901 140455392419840 ddar.py:60] Depth 3/1000 time = 4.949265480041504
I0123 11:28:35.387315 140455392419840 ddar.py:60] Depth 4/1000 time = 4.421123743057251
I0123 11:28:40.344355 140455392419840 ddar.py:60] Depth 5/1000 time = 4.956773042678833
I0123 11:28:44.801866 140455392419840 ddar.py:60] Depth 6/1000 time = 4.457249402999878
I0123 11:28:49.863731 140455392419840 ddar.py:60] Depth 7/1000 time = 5.061269283294678
I0123 11:28:54.711452 140455392419840 ddar.py:60] Depth 8/1000 time = 4.831096410751343
I0123 11:29:00.213334 140455392419840 ddar.py:60] Depth 9/1000 time = 5.501619815826416
I0123 11:29:05.144331 140455392419840 ddar.py:60] Depth 10/1000 time = 4.930732488632202
I0123 11:29:10.669106 140455392419840 ddar.py:60] Depth 11/1000 time = 5.503722667694092
I0123 11:29:10.678456 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:29:10.678523 140455392419840 alphageometry.py:566] LM output (score=-2.626395): "o : C k n o 21 D k o n o 22 ;"
I0123 11:29:10.678558 140455392419840 alphageometry.py:567] Translation: "o = on_line o k n, on_bline o n k"

I0123 11:29:10.678595 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o k n, on_bline o n k ? perp c m m a"
I0123 11:29:10.678783 140455392419840 graph.py:498] 
I0123 11:29:10.678853 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o k n, on_bline o n k ? perp c m m a
I0123 11:29:11.959759 140455392419840 ddar.py:60] Depth 1/1000 time = 1.2261848449707031
I0123 11:29:15.293521 140455392419840 ddar.py:60] Depth 2/1000 time = 3.333528757095337
I0123 11:29:19.073324 140455392419840 ddar.py:60] Depth 3/1000 time = 3.7795212268829346
I0123 11:29:23.154439 140455392419840 ddar.py:60] Depth 4/1000 time = 4.080888986587524
I0123 11:29:27.193306 140455392419840 ddar.py:60] Depth 5/1000 time = 4.038617134094238
I0123 11:29:31.251782 140455392419840 ddar.py:60] Depth 6/1000 time = 4.0581955909729
I0123 11:29:34.769345 140455392419840 ddar.py:60] Depth 7/1000 time = 3.5169200897216797
I0123 11:29:39.718301 140455392419840 ddar.py:60] Depth 8/1000 time = 4.933148622512817
I0123 11:29:44.217165 140455392419840 ddar.py:60] Depth 9/1000 time = 4.49858832359314
I0123 11:29:48.114773 140455392419840 ddar.py:60] Depth 10/1000 time = 3.897352933883667
I0123 11:29:48.142299 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:29:48.142379 140455392419840 alphageometry.py:566] LM output (score=-2.872156): "o : C l n o 21 D l n n o 22 ;"
I0123 11:29:48.142415 140455392419840 alphageometry.py:567] Translation: "o = on_line o l n, on_circle o n l"

I0123 11:29:48.142452 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o l n, on_circle o n l ? perp c m m a"
I0123 11:29:48.142643 140455392419840 graph.py:498] 
I0123 11:29:48.142715 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o l n, on_circle o n l ? perp c m m a
I0123 11:29:50.529570 140455392419840 ddar.py:60] Depth 1/1000 time = 2.331322193145752
I0123 11:29:53.832653 140455392419840 ddar.py:60] Depth 2/1000 time = 3.302844285964966
I0123 11:29:57.965011 140455392419840 ddar.py:60] Depth 3/1000 time = 4.1321282386779785
I0123 11:30:02.927976 140455392419840 ddar.py:60] Depth 4/1000 time = 4.962714910507202
I0123 11:30:06.743510 140455392419840 ddar.py:60] Depth 5/1000 time = 3.815225124359131
I0123 11:30:11.633028 140455392419840 ddar.py:60] Depth 6/1000 time = 4.889225721359253
I0123 11:30:15.436007 140455392419840 ddar.py:60] Depth 7/1000 time = 3.802370309829712
I0123 11:30:20.701712 140455392419840 ddar.py:60] Depth 8/1000 time = 5.249720096588135
I0123 11:30:25.494728 140455392419840 ddar.py:60] Depth 9/1000 time = 4.792734622955322
I0123 11:30:30.289947 140455392419840 ddar.py:60] Depth 10/1000 time = 4.794783592224121
I0123 11:30:30.315539 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:30:30.315611 140455392419840 alphageometry.py:566] LM output (score=-2.901172): "o : C a d o 21 D a o d o 22 ;"
I0123 11:30:30.315647 140455392419840 alphageometry.py:567] Translation: "o = on_line o a d, on_bline o d a"

I0123 11:30:30.315686 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o a d, on_bline o d a ? perp c m m a"
I0123 11:30:30.315903 140455392419840 graph.py:498] 
I0123 11:30:30.315975 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o a d, on_bline o d a ? perp c m m a
I0123 11:30:32.262666 140455392419840 ddar.py:60] Depth 1/1000 time = 1.891005277633667
I0123 11:30:36.437222 140455392419840 ddar.py:60] Depth 2/1000 time = 4.174333810806274
I0123 11:30:40.534145 140455392419840 ddar.py:60] Depth 3/1000 time = 4.096696138381958
I0123 11:30:45.402157 140455392419840 ddar.py:60] Depth 4/1000 time = 4.867773532867432
I0123 11:30:49.764414 140455392419840 ddar.py:60] Depth 5/1000 time = 4.361954212188721
I0123 11:30:54.055779 140455392419840 ddar.py:60] Depth 6/1000 time = 4.291036128997803
I0123 11:30:58.870779 140455392419840 ddar.py:60] Depth 7/1000 time = 4.814375400543213
I0123 11:31:03.476069 140455392419840 ddar.py:60] Depth 8/1000 time = 4.589085817337036
I0123 11:31:08.713332 140455392419840 ddar.py:60] Depth 9/1000 time = 5.237025260925293
I0123 11:31:14.069604 140455392419840 ddar.py:60] Depth 10/1000 time = 5.355978488922119
I0123 11:31:14.096925 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:31:14.096998 140455392419840 alphageometry.py:566] LM output (score=-2.917355): "o : C k l o 21 T a o k l 22 ;"
I0123 11:31:14.097034 140455392419840 alphageometry.py:567] Translation: "o = on_line o k l, on_tline o a k l"

I0123 11:31:14.097077 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o k l, on_tline o a k l ? perp c m m a"
I0123 11:31:14.097273 140455392419840 graph.py:498] 
I0123 11:31:14.097342 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o k l, on_tline o a k l ? perp c m m a
I0123 11:31:16.093344 140455392419840 ddar.py:60] Depth 1/1000 time = 1.9497261047363281
I0123 11:31:19.749433 140455392419840 ddar.py:60] Depth 2/1000 time = 3.655876398086548
I0123 11:31:23.854607 140455392419840 ddar.py:60] Depth 3/1000 time = 4.104947566986084
I0123 11:31:28.710500 140455392419840 ddar.py:60] Depth 4/1000 time = 4.855658054351807
I0123 11:31:33.041162 140455392419840 ddar.py:60] Depth 5/1000 time = 4.330387830734253
I0123 11:31:37.378212 140455392419840 ddar.py:60] Depth 6/1000 time = 4.336752414703369
I0123 11:31:42.268931 140455392419840 ddar.py:60] Depth 7/1000 time = 4.89014458656311
I0123 11:31:46.912970 140455392419840 ddar.py:60] Depth 8/1000 time = 4.629194974899292
I0123 11:31:52.171920 140455392419840 ddar.py:60] Depth 9/1000 time = 5.258728265762329
I0123 11:31:56.856563 140455392419840 ddar.py:60] Depth 10/1000 time = 4.684363842010498
I0123 11:31:56.881396 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:31:56.881496 140455392419840 alphageometry.py:566] LM output (score=-3.046422): "o : C l m o 21 D l m m o 22 ;"
I0123 11:31:56.881536 140455392419840 alphageometry.py:567] Translation: "o = on_line o l m, on_circle o m l"

I0123 11:31:56.881575 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o l m, on_circle o m l ? perp c m m a"
I0123 11:31:56.881795 140455392419840 graph.py:498] 
I0123 11:31:56.881869 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o l m, on_circle o m l ? perp c m m a
I0123 11:31:58.853612 140455392419840 ddar.py:60] Depth 1/1000 time = 1.9166362285614014
I0123 11:32:02.255712 140455392419840 ddar.py:60] Depth 2/1000 time = 3.4017937183380127
I0123 11:32:06.614595 140455392419840 ddar.py:60] Depth 3/1000 time = 4.3586585521698
I0123 11:32:10.584602 140455392419840 ddar.py:60] Depth 4/1000 time = 3.969782829284668
I0123 11:32:14.560031 140455392419840 ddar.py:60] Depth 5/1000 time = 3.975160598754883
I0123 11:32:18.542762 140455392419840 ddar.py:60] Depth 6/1000 time = 3.982450008392334
I0123 11:32:22.599971 140455392419840 ddar.py:60] Depth 7/1000 time = 4.056556701660156
I0123 11:32:26.967107 140455392419840 ddar.py:60] Depth 8/1000 time = 4.353366136550903
I0123 11:32:31.303475 140455392419840 ddar.py:60] Depth 9/1000 time = 4.336127996444702
I0123 11:32:35.600081 140455392419840 ddar.py:60] Depth 10/1000 time = 4.296337604522705
I0123 11:32:35.624338 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:32:35.624426 140455392419840 alphageometry.py:566] LM output (score=-3.067043): "o : C a c o 21 D a c a o 22 ;"
I0123 11:32:35.624463 140455392419840 alphageometry.py:567] Translation: "o = on_line o a c, on_circle o a c"

I0123 11:32:35.624501 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o a c, on_circle o a c ? perp c m m a"
I0123 11:32:35.624690 140455392419840 graph.py:498] 
I0123 11:32:35.624762 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o a c, on_circle o a c ? perp c m m a
I0123 11:32:38.171029 140455392419840 ddar.py:60] Depth 1/1000 time = 2.487776279449463
I0123 11:32:41.922619 140455392419840 ddar.py:60] Depth 2/1000 time = 3.7513651847839355
I0123 11:32:46.921277 140455392419840 ddar.py:60] Depth 3/1000 time = 4.998418569564819
I0123 11:32:52.252445 140455392419840 ddar.py:60] Depth 4/1000 time = 5.330902576446533
I0123 11:32:57.079232 140455392419840 ddar.py:60] Depth 5/1000 time = 4.826562166213989
I0123 11:33:02.516590 140455392419840 ddar.py:60] Depth 6/1000 time = 5.437098979949951
I0123 11:33:08.013409 140455392419840 ddar.py:60] Depth 7/1000 time = 5.495062351226807
I0123 11:33:13.869721 140455392419840 ddar.py:60] Depth 8/1000 time = 5.840313196182251
I0123 11:33:19.803983 140455392419840 ddar.py:60] Depth 9/1000 time = 5.9340174198150635
I0123 11:33:25.766103 140455392419840 ddar.py:60] Depth 10/1000 time = 5.9618446826934814
I0123 11:33:31.880727 140455392419840 ddar.py:60] Depth 11/1000 time = 6.0764100551605225
I0123 11:33:31.886450 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:33:31.886552 140455392419840 alphageometry.py:566] LM output (score=-3.082056): "o : C c k o 21 D c k k o 22 ;"
I0123 11:33:31.886590 140455392419840 alphageometry.py:567] Translation: "o = on_line o c k, on_circle o k c"

I0123 11:33:31.886641 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o c k, on_circle o k c ? perp c m m a"
I0123 11:33:31.886857 140455392419840 graph.py:498] 
I0123 11:33:31.886926 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o c k, on_circle o k c ? perp c m m a
I0123 11:33:33.935576 140455392419840 ddar.py:60] Depth 1/1000 time = 1.988295078277588
I0123 11:33:37.647883 140455392419840 ddar.py:60] Depth 2/1000 time = 3.712062358856201
I0123 11:33:41.865140 140455392419840 ddar.py:60] Depth 3/1000 time = 4.217023134231567
I0123 11:33:46.242558 140455392419840 ddar.py:60] Depth 4/1000 time = 4.3771867752075195
I0123 11:33:51.259352 140455392419840 ddar.py:60] Depth 5/1000 time = 5.0165770053863525
I0123 11:33:55.767865 140455392419840 ddar.py:60] Depth 6/1000 time = 4.508232355117798
I0123 11:34:00.211297 140455392419840 ddar.py:60] Depth 7/1000 time = 4.441781282424927
I0123 11:34:05.628603 140455392419840 ddar.py:60] Depth 8/1000 time = 5.402451276779175
I0123 11:34:10.540192 140455392419840 ddar.py:60] Depth 9/1000 time = 4.911323308944702
I0123 11:34:15.437840 140455392419840 ddar.py:60] Depth 10/1000 time = 4.8973708152771
I0123 11:34:15.467397 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:34:15.467473 140455392419840 alphageometry.py:566] LM output (score=-3.086350): "o : C c h o 21 D c o h o 22 ;"
I0123 11:34:15.467510 140455392419840 alphageometry.py:567] Translation: "o = on_line o c h, on_bline o h c"

I0123 11:34:15.467550 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o c h, on_bline o h c ? perp c m m a"
I0123 11:34:15.467745 140455392419840 graph.py:498] 
I0123 11:34:15.467815 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o c h, on_bline o h c ? perp c m m a
I0123 11:34:18.343574 140455392419840 ddar.py:60] Depth 1/1000 time = 2.8175301551818848
I0123 11:34:23.166005 140455392419840 ddar.py:60] Depth 2/1000 time = 4.822170734405518
I0123 11:34:29.186290 140455392419840 ddar.py:60] Depth 3/1000 time = 6.020064115524292
I0123 11:34:34.893778 140455392419840 ddar.py:60] Depth 4/1000 time = 5.707238674163818
I0123 11:34:40.646097 140455392419840 ddar.py:60] Depth 5/1000 time = 5.752001523971558
I0123 11:34:46.371264 140455392419840 ddar.py:60] Depth 6/1000 time = 5.7247490882873535
I0123 11:34:52.020054 140455392419840 ddar.py:60] Depth 7/1000 time = 5.6479880809783936
I0123 11:34:58.585267 140455392419840 ddar.py:60] Depth 8/1000 time = 6.548961400985718
I0123 11:35:05.411455 140455392419840 ddar.py:60] Depth 9/1000 time = 6.825877904891968
I0123 11:35:11.654256 140455392419840 ddar.py:60] Depth 10/1000 time = 6.242382287979126
I0123 11:35:11.695363 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:35:11.695440 140455392419840 alphageometry.py:566] LM output (score=-3.100146): "o : C a g o 21 D a o g o 22 ;"
I0123 11:35:11.695474 140455392419840 alphageometry.py:567] Translation: "o = on_line o a g, on_bline o g a"

I0123 11:35:11.695512 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o a g, on_bline o g a ? perp c m m a"
I0123 11:35:11.695700 140455392419840 graph.py:498] 
I0123 11:35:11.695768 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o a g, on_bline o g a ? perp c m m a
I0123 11:35:14.302105 140455392419840 ddar.py:60] Depth 1/1000 time = 2.551241636276245
I0123 11:35:18.007095 140455392419840 ddar.py:60] Depth 2/1000 time = 3.704785108566284
I0123 11:35:22.327869 140455392419840 ddar.py:60] Depth 3/1000 time = 4.320549726486206
I0123 11:35:27.633173 140455392419840 ddar.py:60] Depth 4/1000 time = 5.3050525188446045
I0123 11:35:32.543543 140455392419840 ddar.py:60] Depth 5/1000 time = 4.910094499588013
I0123 11:35:38.079731 140455392419840 ddar.py:60] Depth 6/1000 time = 5.5359392166137695
I0123 11:35:42.994888 140455392419840 ddar.py:60] Depth 7/1000 time = 4.91458535194397
I0123 11:35:48.895934 140455392419840 ddar.py:60] Depth 8/1000 time = 5.881901502609253
I0123 11:35:54.266585 140455392419840 ddar.py:60] Depth 9/1000 time = 5.370294570922852
I0123 11:36:00.193957 140455392419840 ddar.py:60] Depth 10/1000 time = 5.9270899295806885
I0123 11:36:06.267876 140455392419840 ddar.py:60] Depth 11/1000 time = 6.037994146347046
I0123 11:36:06.272956 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:36:06.273028 140455392419840 alphageometry.py:566] LM output (score=-3.139746): "o : C b e o 21 D b o e o 22 ;"
I0123 11:36:06.273065 140455392419840 alphageometry.py:567] Translation: "o = on_line o b e, on_bline o e b"

I0123 11:36:06.273102 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o b e, on_bline o e b ? perp c m m a"
I0123 11:36:06.273298 140455392419840 graph.py:498] 
I0123 11:36:06.273371 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o b e, on_bline o e b ? perp c m m a
I0123 11:36:07.569935 140455392419840 ddar.py:60] Depth 1/1000 time = 1.2399587631225586
I0123 11:36:11.125951 140455392419840 ddar.py:60] Depth 2/1000 time = 3.5557777881622314
I0123 11:36:14.473688 140455392419840 ddar.py:60] Depth 3/1000 time = 3.3474574089050293
I0123 11:36:18.560488 140455392419840 ddar.py:60] Depth 4/1000 time = 4.086538553237915
I0123 11:36:22.695366 140455392419840 ddar.py:60] Depth 5/1000 time = 4.134624242782593
I0123 11:36:26.204136 140455392419840 ddar.py:60] Depth 6/1000 time = 3.5085067749023438
I0123 11:36:30.289111 140455392419840 ddar.py:60] Depth 7/1000 time = 4.084366798400879
I0123 11:36:34.764376 140455392419840 ddar.py:60] Depth 8/1000 time = 4.459449052810669
I0123 11:36:39.349263 140455392419840 ddar.py:60] Depth 9/1000 time = 4.584610462188721
I0123 11:36:43.876418 140455392419840 ddar.py:60] Depth 10/1000 time = 4.526864528656006
I0123 11:36:43.904074 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:36:43.904149 140455392419840 alphageometry.py:566] LM output (score=-3.156150): "o : C c g o 21 D c o g o 22 ;"
I0123 11:36:43.904184 140455392419840 alphageometry.py:567] Translation: "o = on_line o c g, on_bline o g c"

I0123 11:36:43.904220 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o c g, on_bline o g c ? perp c m m a"
I0123 11:36:43.904407 140455392419840 graph.py:498] 
I0123 11:36:43.904478 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o c g, on_bline o g c ? perp c m m a
I0123 11:36:46.541276 140455392419840 ddar.py:60] Depth 1/1000 time = 2.581976890563965
I0123 11:36:50.715201 140455392419840 ddar.py:60] Depth 2/1000 time = 4.173696517944336
I0123 11:36:56.714066 140455392419840 ddar.py:60] Depth 3/1000 time = 5.998558759689331
I0123 11:37:03.869590 140455392419840 ddar.py:60] Depth 4/1000 time = 7.155149936676025
I0123 11:37:10.845719 140455392419840 ddar.py:60] Depth 5/1000 time = 6.975836277008057
I0123 11:37:17.917155 140455392419840 ddar.py:60] Depth 6/1000 time = 7.071152687072754
I0123 11:37:25.013716 140455392419840 ddar.py:60] Depth 7/1000 time = 7.095795392990112
I0123 11:37:33.223513 140455392419840 ddar.py:60] Depth 8/1000 time = 8.189404249191284
I0123 11:37:41.052025 140455392419840 ddar.py:60] Depth 9/1000 time = 7.828257083892822
I0123 11:37:48.803920 140455392419840 ddar.py:60] Depth 10/1000 time = 7.7515881061553955
I0123 11:37:56.533730 140455392419840 ddar.py:60] Depth 11/1000 time = 7.67436146736145
I0123 11:38:04.957838 140455392419840 ddar.py:60] Depth 12/1000 time = 8.406449317932129
I0123 11:38:04.965201 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:38:04.965309 140455392419840 alphageometry.py:566] LM output (score=-3.195419): "o : C c e o 21 D c o e o 22 ;"
I0123 11:38:04.965347 140455392419840 alphageometry.py:567] Translation: "o = on_line o c e, on_bline o e c"

I0123 11:38:04.965400 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o c e, on_bline o e c ? perp c m m a"
I0123 11:38:04.965624 140455392419840 graph.py:498] 
I0123 11:38:04.965702 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o c e, on_bline o e c ? perp c m m a
I0123 11:38:07.105599 140455392419840 ddar.py:60] Depth 1/1000 time = 2.0819547176361084
I0123 11:38:11.171548 140455392419840 ddar.py:60] Depth 2/1000 time = 4.0657031536102295
I0123 11:38:15.751368 140455392419840 ddar.py:60] Depth 3/1000 time = 4.57960319519043
I0123 11:38:21.226098 140455392419840 ddar.py:60] Depth 4/1000 time = 5.4744791984558105
I0123 11:38:26.154833 140455392419840 ddar.py:60] Depth 5/1000 time = 4.928396701812744
I0123 11:38:31.665912 140455392419840 ddar.py:60] Depth 6/1000 time = 5.5106589794158936
I0123 11:38:36.568979 140455392419840 ddar.py:60] Depth 7/1000 time = 4.902360677719116
I0123 11:38:42.486447 140455392419840 ddar.py:60] Depth 8/1000 time = 5.90163516998291
I0123 11:38:48.044678 140455392419840 ddar.py:60] Depth 9/1000 time = 5.557957649230957
I0123 11:38:53.394181 140455392419840 ddar.py:60] Depth 10/1000 time = 5.349184274673462
I0123 11:38:53.431727 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:38:53.431814 140455392419840 alphageometry.py:566] LM output (score=-3.203099): "o : C f k o 21 D f o k o 22 ;"
I0123 11:38:53.431853 140455392419840 alphageometry.py:567] Translation: "o = on_line o f k, on_bline o k f"

I0123 11:38:53.431890 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o f k, on_bline o k f ? perp c m m a"
I0123 11:38:53.432088 140455392419840 graph.py:498] 
I0123 11:38:53.432159 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o f k, on_bline o k f ? perp c m m a
I0123 11:38:55.300366 140455392419840 ddar.py:60] Depth 1/1000 time = 1.8123891353607178
I0123 11:38:58.787166 140455392419840 ddar.py:60] Depth 2/1000 time = 3.4865753650665283
I0123 11:39:02.746085 140455392419840 ddar.py:60] Depth 3/1000 time = 3.9586844444274902
I0123 11:39:06.256525 140455392419840 ddar.py:60] Depth 4/1000 time = 3.5101191997528076
I0123 11:39:10.393981 140455392419840 ddar.py:60] Depth 5/1000 time = 4.137006044387817
I0123 11:39:14.528371 140455392419840 ddar.py:60] Depth 6/1000 time = 4.134094715118408
I0123 11:39:18.026561 140455392419840 ddar.py:60] Depth 7/1000 time = 3.4975545406341553
I0123 11:39:22.483887 140455392419840 ddar.py:60] Depth 8/1000 time = 4.442049980163574
I0123 11:39:27.087386 140455392419840 ddar.py:60] Depth 9/1000 time = 4.6032562255859375
I0123 11:39:31.779325 140455392419840 ddar.py:60] Depth 10/1000 time = 4.691633939743042
I0123 11:39:31.807768 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:39:31.807837 140455392419840 alphageometry.py:566] LM output (score=-3.238337): "o : C i k o 21 D i k i o 22 ;"
I0123 11:39:31.807874 140455392419840 alphageometry.py:567] Translation: "o = on_line o i k, on_circle o i k"

I0123 11:39:31.807921 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o i k, on_circle o i k ? perp c m m a"
I0123 11:39:31.808142 140455392419840 graph.py:498] 
I0123 11:39:31.808209 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o i k, on_circle o i k ? perp c m m a
I0123 11:39:33.748721 140455392419840 ddar.py:60] Depth 1/1000 time = 1.883803367614746
I0123 11:39:36.649582 140455392419840 ddar.py:60] Depth 2/1000 time = 2.9006383419036865
I0123 11:39:40.654929 140455392419840 ddar.py:60] Depth 3/1000 time = 4.005112886428833
I0123 11:39:44.136554 140455392419840 ddar.py:60] Depth 4/1000 time = 3.481377601623535
I0123 11:39:48.309871 140455392419840 ddar.py:60] Depth 5/1000 time = 4.1730358600616455
I0123 11:39:51.858648 140455392419840 ddar.py:60] Depth 6/1000 time = 3.5484201908111572
I0123 11:39:56.024565 140455392419840 ddar.py:60] Depth 7/1000 time = 4.165105819702148
I0123 11:39:59.837524 140455392419840 ddar.py:60] Depth 8/1000 time = 3.7980127334594727
I0123 11:40:04.299589 140455392419840 ddar.py:60] Depth 9/1000 time = 4.461817502975464
I0123 11:40:08.805038 140455392419840 ddar.py:60] Depth 10/1000 time = 4.505157470703125
I0123 11:40:08.833822 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:40:08.833895 140455392419840 alphageometry.py:566] LM output (score=-3.238457): "o : C a j o 21 D a o j o 22 ;"
I0123 11:40:08.833932 140455392419840 alphageometry.py:567] Translation: "o = on_line o a j, on_bline o j a"

I0123 11:40:08.833970 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o a j, on_bline o j a ? perp c m m a"
I0123 11:40:08.834176 140455392419840 graph.py:498] 
I0123 11:40:08.834243 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o a j, on_bline o j a ? perp c m m a
I0123 11:40:10.739403 140455392419840 ddar.py:60] Depth 1/1000 time = 1.8495979309082031
I0123 11:40:13.686957 140455392419840 ddar.py:60] Depth 2/1000 time = 2.9473319053649902
I0123 11:40:17.733737 140455392419840 ddar.py:60] Depth 3/1000 time = 4.04653263092041
I0123 11:40:21.950700 140455392419840 ddar.py:60] Depth 4/1000 time = 4.216678142547607
I0123 11:40:26.166967 140455392419840 ddar.py:60] Depth 5/1000 time = 4.2159810066223145
I0123 11:40:29.958730 140455392419840 ddar.py:60] Depth 6/1000 time = 3.7915072441101074
I0123 11:40:34.373361 140455392419840 ddar.py:60] Depth 7/1000 time = 4.414330959320068
I0123 11:40:38.883210 140455392419840 ddar.py:60] Depth 8/1000 time = 4.509153127670288
I0123 11:40:43.711994 140455392419840 ddar.py:60] Depth 9/1000 time = 4.813028335571289
I0123 11:40:48.609542 140455392419840 ddar.py:60] Depth 10/1000 time = 4.897305250167847
I0123 11:40:52.867469 140455392419840 ddar.py:60] Depth 11/1000 time = 4.257627725601196
I0123 11:40:57.796707 140455392419840 ddar.py:60] Depth 12/1000 time = 4.896172046661377
I0123 11:40:57.802303 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:40:57.802381 140455392419840 alphageometry.py:566] LM output (score=-3.264124): "o : C l n o 21 D l n l o 22 ;"
I0123 11:40:57.802420 140455392419840 alphageometry.py:567] Translation: "o = on_line o l n, on_circle o l n"

I0123 11:40:57.802492 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o l n, on_circle o l n ? perp c m m a"
I0123 11:40:57.802693 140455392419840 graph.py:498] 
I0123 11:40:57.802765 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o l n, on_circle o l n ? perp c m m a
I0123 11:40:59.774780 140455392419840 ddar.py:60] Depth 1/1000 time = 1.916672945022583
I0123 11:41:03.761220 140455392419840 ddar.py:60] Depth 2/1000 time = 3.9860870838165283
I0123 11:41:07.509937 140455392419840 ddar.py:60] Depth 3/1000 time = 3.7484683990478516
I0123 11:41:12.150624 140455392419840 ddar.py:60] Depth 4/1000 time = 4.64044976234436
I0123 11:41:16.858273 140455392419840 ddar.py:60] Depth 5/1000 time = 4.7073705196380615
I0123 11:41:20.895873 140455392419840 ddar.py:60] Depth 6/1000 time = 4.037283182144165
I0123 11:41:25.592677 140455392419840 ddar.py:60] Depth 7/1000 time = 4.696111679077148
I0123 11:41:30.575193 140455392419840 ddar.py:60] Depth 8/1000 time = 4.965445518493652
I0123 11:41:35.696707 140455392419840 ddar.py:60] Depth 9/1000 time = 5.121273994445801
I0123 11:41:40.797852 140455392419840 ddar.py:60] Depth 10/1000 time = 5.10086464881897
I0123 11:41:40.822733 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:41:40.822811 140455392419840 alphageometry.py:566] LM output (score=-3.266898): "o : C c j o 21 D c o j o 22 ;"
I0123 11:41:40.822849 140455392419840 alphageometry.py:567] Translation: "o = on_line o c j, on_bline o j c"

I0123 11:41:40.822886 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o c j, on_bline o j c ? perp c m m a"
I0123 11:41:40.823089 140455392419840 graph.py:498] 
I0123 11:41:40.823159 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o c j, on_bline o j c ? perp c m m a
I0123 11:41:42.975906 140455392419840 ddar.py:60] Depth 1/1000 time = 2.097322940826416
I0123 11:41:47.936408 140455392419840 ddar.py:60] Depth 2/1000 time = 4.960137605667114
I0123 11:41:52.893167 140455392419840 ddar.py:60] Depth 3/1000 time = 4.956520318984985
I0123 11:41:58.983429 140455392419840 ddar.py:60] Depth 4/1000 time = 6.090026378631592
I0123 11:42:05.217132 140455392419840 ddar.py:60] Depth 5/1000 time = 6.233353853225708
I0123 11:42:11.495991 140455392419840 ddar.py:60] Depth 6/1000 time = 6.278424024581909
I0123 11:42:17.074841 140455392419840 ddar.py:60] Depth 7/1000 time = 5.578102111816406
I0123 11:42:23.777821 140455392419840 ddar.py:60] Depth 8/1000 time = 6.6859681606292725
I0123 11:42:30.756924 140455392419840 ddar.py:60] Depth 9/1000 time = 6.978819370269775
I0123 11:42:36.879376 140455392419840 ddar.py:60] Depth 10/1000 time = 6.122133016586304
I0123 11:42:43.654335 140455392419840 ddar.py:60] Depth 11/1000 time = 6.73049259185791
I0123 11:42:43.662336 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:42:43.662416 140455392419840 alphageometry.py:566] LM output (score=-3.305365): "o : C k j o 21 D k o j o 22 ;"
I0123 11:42:43.662454 140455392419840 alphageometry.py:567] Translation: "o = on_line o k j, on_bline o j k"

I0123 11:42:43.662494 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o k j, on_bline o j k ? perp c m m a"
I0123 11:42:43.662692 140455392419840 graph.py:498] 
I0123 11:42:43.662760 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n a c, on_bline n c a; o = on_line o k j, on_bline o j k ? perp c m m a
I0123 11:42:46.464972 140455392419840 ddar.py:60] Depth 1/1000 time = 2.7460334300994873
I0123 11:42:49.741004 140455392419840 ddar.py:60] Depth 2/1000 time = 3.275747776031494
I0123 11:42:54.828003 140455392419840 ddar.py:60] Depth 3/1000 time = 5.086643695831299
I0123 11:42:59.446965 140455392419840 ddar.py:60] Depth 4/1000 time = 4.618713855743408
I0123 11:43:04.064978 140455392419840 ddar.py:60] Depth 5/1000 time = 4.6177144050598145
I0123 11:43:08.651286 140455392419840 ddar.py:60] Depth 6/1000 time = 4.586019992828369
I0123 11:43:14.007844 140455392419840 ddar.py:60] Depth 7/1000 time = 5.355871200561523
I0123 11:43:19.057398 140455392419840 ddar.py:60] Depth 8/1000 time = 5.033518314361572
I0123 11:43:24.221719 140455392419840 ddar.py:60] Depth 9/1000 time = 5.164071321487427
I0123 11:43:30.083688 140455392419840 ddar.py:60] Depth 10/1000 time = 5.861689329147339
I0123 11:43:30.114370 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:43:30.114475 140455392419840 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C d k n 19 D d n k n 20 ; x00
I0123 11:43:35.796405 140455392419840 alphageometry.py:566] LM output (score=-0.199657): "o : C c d o 21 D c o d o 22 ;"
I0123 11:43:35.796709 140455392419840 alphageometry.py:567] Translation: "o = on_line o c d, on_bline o d c"

I0123 11:43:35.796766 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o c d, on_bline o d c ? perp c m m a"
I0123 11:43:35.796957 140455392419840 graph.py:498] 
I0123 11:43:35.797027 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o c d, on_bline o d c ? perp c m m a
I0123 11:43:38.223165 140455392419840 ddar.py:60] Depth 1/1000 time = 2.3662445545196533
I0123 11:43:43.333778 140455392419840 ddar.py:60] Depth 2/1000 time = 5.110387563705444
I0123 11:43:49.361486 140455392419840 ddar.py:60] Depth 3/1000 time = 6.027449369430542
I0123 11:43:55.533626 140455392419840 ddar.py:60] Depth 4/1000 time = 6.171894550323486
I0123 11:44:00.934436 140455392419840 ddar.py:60] Depth 5/1000 time = 5.400514125823975
I0123 11:44:06.952465 140455392419840 ddar.py:60] Depth 6/1000 time = 6.016659259796143
I0123 11:44:13.326369 140455392419840 ddar.py:60] Depth 7/1000 time = 6.360037088394165
I0123 11:44:20.704784 140455392419840 ddar.py:60] Depth 8/1000 time = 7.378162860870361
I0123 11:44:27.409199 140455392419840 ddar.py:60] Depth 9/1000 time = 6.70410418510437
I0123 11:44:27.433939 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:44:27.434020 140455392419840 alphageometry.py:566] LM output (score=-1.353543): "o : C d g o 21 D d o g o 22 ;"
I0123 11:44:27.434057 140455392419840 alphageometry.py:567] Translation: "o = on_line o d g, on_bline o g d"

I0123 11:44:27.434094 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o d g, on_bline o g d ? perp c m m a"
I0123 11:44:27.434291 140455392419840 graph.py:498] 
I0123 11:44:27.434363 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o d g, on_bline o g d ? perp c m m a
I0123 11:44:28.722546 140455392419840 ddar.py:60] Depth 1/1000 time = 1.2319509983062744
I0123 11:44:31.654626 140455392419840 ddar.py:60] Depth 2/1000 time = 2.931856632232666
I0123 11:44:35.616802 140455392419840 ddar.py:60] Depth 3/1000 time = 3.9618797302246094
I0123 11:44:39.037942 140455392419840 ddar.py:60] Depth 4/1000 time = 3.4207820892333984
I0123 11:44:43.115883 140455392419840 ddar.py:60] Depth 5/1000 time = 4.0776190757751465
I0123 11:44:46.491296 140455392419840 ddar.py:60] Depth 6/1000 time = 3.3748199939727783
I0123 11:44:50.946120 140455392419840 ddar.py:60] Depth 7/1000 time = 4.440055847167969
I0123 11:44:54.835599 140455392419840 ddar.py:60] Depth 8/1000 time = 3.8891615867614746
I0123 11:44:58.683862 140455392419840 ddar.py:60] Depth 9/1000 time = 3.84785795211792
I0123 11:44:58.708343 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:44:58.708417 140455392419840 alphageometry.py:566] LM output (score=-1.537086): "o : C k l o 21 D k o l o 22 ;"
I0123 11:44:58.708455 140455392419840 alphageometry.py:567] Translation: "o = on_line o k l, on_bline o l k"

I0123 11:44:58.708496 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o k l, on_bline o l k ? perp c m m a"
I0123 11:44:58.708693 140455392419840 graph.py:498] 
I0123 11:44:58.708765 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o k l, on_bline o l k ? perp c m m a
I0123 11:45:01.478449 140455392419840 ddar.py:60] Depth 1/1000 time = 2.7113733291625977
I0123 11:45:05.416422 140455392419840 ddar.py:60] Depth 2/1000 time = 3.937718152999878
I0123 11:45:08.912588 140455392419840 ddar.py:60] Depth 3/1000 time = 3.4959332942962646
I0123 11:45:13.185391 140455392419840 ddar.py:60] Depth 4/1000 time = 4.272557258605957
I0123 11:45:17.503156 140455392419840 ddar.py:60] Depth 5/1000 time = 4.317460060119629
I0123 11:45:21.792865 140455392419840 ddar.py:60] Depth 6/1000 time = 4.288402318954468
I0123 11:45:26.410096 140455392419840 ddar.py:60] Depth 7/1000 time = 4.603646755218506
I0123 11:45:31.183941 140455392419840 ddar.py:60] Depth 8/1000 time = 4.7735865116119385
I0123 11:45:35.979643 140455392419840 ddar.py:60] Depth 9/1000 time = 4.79538106918335
I0123 11:45:36.002309 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:45:36.002407 140455392419840 alphageometry.py:566] LM output (score=-1.694118): "o : C l n o 21 D l o n o 22 ;"
I0123 11:45:36.002448 140455392419840 alphageometry.py:567] Translation: "o = on_line o l n, on_bline o n l"

I0123 11:45:36.002491 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o l n, on_bline o n l ? perp c m m a"
I0123 11:45:36.002686 140455392419840 graph.py:498] 
I0123 11:45:36.002755 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o l n, on_bline o n l ? perp c m m a
I0123 11:45:37.254437 140455392419840 ddar.py:60] Depth 1/1000 time = 1.1961188316345215
I0123 11:45:40.842521 140455392419840 ddar.py:60] Depth 2/1000 time = 3.58786678314209
I0123 11:45:44.099858 140455392419840 ddar.py:60] Depth 3/1000 time = 3.257108688354492
I0123 11:45:48.089431 140455392419840 ddar.py:60] Depth 4/1000 time = 3.989331007003784
I0123 11:45:52.206949 140455392419840 ddar.py:60] Depth 5/1000 time = 4.117168426513672
I0123 11:45:55.606984 140455392419840 ddar.py:60] Depth 6/1000 time = 3.3993277549743652
I0123 11:45:59.981039 140455392419840 ddar.py:60] Depth 7/1000 time = 4.361588478088379
I0123 11:46:03.730829 140455392419840 ddar.py:60] Depth 8/1000 time = 3.749544382095337
I0123 11:46:08.206829 140455392419840 ddar.py:60] Depth 9/1000 time = 4.475712299346924
I0123 11:46:08.226738 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:46:08.226810 140455392419840 alphageometry.py:566] LM output (score=-1.911924): "o : C k n o 21 D k o n o 22 ;"
I0123 11:46:08.226846 140455392419840 alphageometry.py:567] Translation: "o = on_line o k n, on_bline o n k"

I0123 11:46:08.226884 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o k n, on_bline o n k ? perp c m m a"
I0123 11:46:08.227082 140455392419840 graph.py:498] 
I0123 11:46:08.227151 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o k n, on_bline o n k ? perp c m m a
I0123 11:46:10.347934 140455392419840 ddar.py:60] Depth 1/1000 time = 2.063528299331665
I0123 11:46:14.162502 140455392419840 ddar.py:60] Depth 2/1000 time = 3.8142244815826416
I0123 11:46:17.604346 140455392419840 ddar.py:60] Depth 3/1000 time = 3.4416117668151855
I0123 11:46:21.727612 140455392419840 ddar.py:60] Depth 4/1000 time = 4.123026609420776
I0123 11:46:25.898955 140455392419840 ddar.py:60] Depth 5/1000 time = 4.171057939529419
I0123 11:46:30.150631 140455392419840 ddar.py:60] Depth 6/1000 time = 4.250216484069824
I0123 11:46:34.777014 140455392419840 ddar.py:60] Depth 7/1000 time = 4.612716197967529
I0123 11:46:39.435050 140455392419840 ddar.py:60] Depth 8/1000 time = 4.657790184020996
I0123 11:46:44.140240 140455392419840 ddar.py:60] Depth 9/1000 time = 4.704921007156372
I0123 11:46:44.164168 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:46:44.164240 140455392419840 alphageometry.py:566] LM output (score=-1.940286): "o : C k m o 21 D k o m o 22 ;"
I0123 11:46:44.164278 140455392419840 alphageometry.py:567] Translation: "o = on_line o k m, on_bline o m k"

I0123 11:46:44.164318 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o k m, on_bline o m k ? perp c m m a"
I0123 11:46:44.164510 140455392419840 graph.py:498] 
I0123 11:46:44.164574 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o k m, on_bline o m k ? perp c m m a
I0123 11:46:45.455676 140455392419840 ddar.py:60] Depth 1/1000 time = 1.2358131408691406
I0123 11:46:49.244603 140455392419840 ddar.py:60] Depth 2/1000 time = 3.788677453994751
I0123 11:46:52.638059 140455392419840 ddar.py:60] Depth 3/1000 time = 3.3931636810302734
I0123 11:46:56.864015 140455392419840 ddar.py:60] Depth 4/1000 time = 4.22571325302124
I0123 11:47:00.391526 140455392419840 ddar.py:60] Depth 5/1000 time = 3.5272326469421387
I0123 11:47:03.908709 140455392419840 ddar.py:60] Depth 6/1000 time = 3.5165672302246094
I0123 11:47:08.531735 140455392419840 ddar.py:60] Depth 7/1000 time = 4.608147859573364
I0123 11:47:12.556668 140455392419840 ddar.py:60] Depth 8/1000 time = 4.0246617794036865
I0123 11:47:17.225888 140455392419840 ddar.py:60] Depth 9/1000 time = 4.6689300537109375
I0123 11:47:17.251456 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:47:17.251533 140455392419840 alphageometry.py:566] LM output (score=-2.073557): "o : C i k o 21 D i o k o 22 ;"
I0123 11:47:17.251568 140455392419840 alphageometry.py:567] Translation: "o = on_line o i k, on_bline o k i"

I0123 11:47:17.251609 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o i k, on_bline o k i ? perp c m m a"
I0123 11:47:17.251802 140455392419840 graph.py:498] 
I0123 11:47:17.251873 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o i k, on_bline o k i ? perp c m m a
I0123 11:47:18.560834 140455392419840 ddar.py:60] Depth 1/1000 time = 1.2539582252502441
I0123 11:47:22.395526 140455392419840 ddar.py:60] Depth 2/1000 time = 3.8344693183898926
I0123 11:47:25.933782 140455392419840 ddar.py:60] Depth 3/1000 time = 3.5379765033721924
I0123 11:47:29.550486 140455392419840 ddar.py:60] Depth 4/1000 time = 3.616316080093384
I0123 11:47:33.138664 140455392419840 ddar.py:60] Depth 5/1000 time = 3.5878968238830566
I0123 11:47:37.396342 140455392419840 ddar.py:60] Depth 6/1000 time = 4.257089614868164
I0123 11:47:41.982113 140455392419840 ddar.py:60] Depth 7/1000 time = 4.571195363998413
I0123 11:47:46.062415 140455392419840 ddar.py:60] Depth 8/1000 time = 4.080038070678711
I0123 11:47:50.860981 140455392419840 ddar.py:60] Depth 9/1000 time = 4.798260688781738
I0123 11:47:50.887733 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:47:50.887822 140455392419840 alphageometry.py:566] LM output (score=-2.149731): "o : C d l o 21 D d o l o 22 ;"
I0123 11:47:50.887858 140455392419840 alphageometry.py:567] Translation: "o = on_line o d l, on_bline o l d"

I0123 11:47:50.887896 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o d l, on_bline o l d ? perp c m m a"
I0123 11:47:50.888094 140455392419840 graph.py:498] 
I0123 11:47:50.888165 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o d l, on_bline o l d ? perp c m m a
I0123 11:47:52.153688 140455392419840 ddar.py:60] Depth 1/1000 time = 1.2104356288909912
I0123 11:47:55.937825 140455392419840 ddar.py:60] Depth 2/1000 time = 3.783925771713257
I0123 11:47:59.291329 140455392419840 ddar.py:60] Depth 3/1000 time = 3.353280544281006
I0123 11:48:03.522064 140455392419840 ddar.py:60] Depth 4/1000 time = 4.230455636978149
I0123 11:48:06.991763 140455392419840 ddar.py:60] Depth 5/1000 time = 3.4693410396575928
I0123 11:48:11.143358 140455392419840 ddar.py:60] Depth 6/1000 time = 4.150986194610596
I0123 11:48:14.868386 140455392419840 ddar.py:60] Depth 7/1000 time = 3.712066411972046
I0123 11:48:19.540311 140455392419840 ddar.py:60] Depth 8/1000 time = 4.6716930866241455
I0123 11:48:24.289958 140455392419840 ddar.py:60] Depth 9/1000 time = 4.749358892440796
I0123 11:48:24.315542 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:48:24.315610 140455392419840 alphageometry.py:566] LM output (score=-2.264380): "o : C d j o 21 D d o j o 22 ;"
I0123 11:48:24.315648 140455392419840 alphageometry.py:567] Translation: "o = on_line o d j, on_bline o j d"

I0123 11:48:24.315688 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o d j, on_bline o j d ? perp c m m a"
I0123 11:48:24.315875 140455392419840 graph.py:498] 
I0123 11:48:24.315940 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o d j, on_bline o j d ? perp c m m a
I0123 11:48:26.323657 140455392419840 ddar.py:60] Depth 1/1000 time = 1.9496641159057617
I0123 11:48:29.332225 140455392419840 ddar.py:60] Depth 2/1000 time = 3.0083398818969727
I0123 11:48:32.624911 140455392419840 ddar.py:60] Depth 3/1000 time = 3.2924649715423584
I0123 11:48:36.013370 140455392419840 ddar.py:60] Depth 4/1000 time = 3.388228416442871
I0123 11:48:40.155054 140455392419840 ddar.py:60] Depth 5/1000 time = 4.141357421875
I0123 11:48:43.607608 140455392419840 ddar.py:60] Depth 6/1000 time = 3.4518022537231445
I0123 11:48:48.095089 140455392419840 ddar.py:60] Depth 7/1000 time = 4.473327398300171
I0123 11:48:51.973132 140455392419840 ddar.py:60] Depth 8/1000 time = 3.8778109550476074
I0123 11:48:56.596123 140455392419840 ddar.py:60] Depth 9/1000 time = 4.622708559036255
I0123 11:48:56.623565 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:48:56.623727 140455392419840 alphageometry.py:566] LM output (score=-2.488764): "o : C l n o 21 D l n n o 22 ;"
I0123 11:48:56.623776 140455392419840 alphageometry.py:567] Translation: "o = on_line o l n, on_circle o n l"

I0123 11:48:56.623823 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o l n, on_circle o n l ? perp c m m a"
I0123 11:48:56.624031 140455392419840 graph.py:498] 
I0123 11:48:56.624106 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o l n, on_circle o n l ? perp c m m a
I0123 11:48:57.948436 140455392419840 ddar.py:60] Depth 1/1000 time = 1.2686243057250977
I0123 11:49:02.359326 140455392419840 ddar.py:60] Depth 2/1000 time = 4.4106481075286865
I0123 11:49:08.045495 140455392419840 ddar.py:60] Depth 3/1000 time = 5.685909986495972
I0123 11:49:14.407309 140455392419840 ddar.py:60] Depth 4/1000 time = 6.361382007598877
I0123 11:49:20.770370 140455392419840 ddar.py:60] Depth 5/1000 time = 6.362767696380615
I0123 11:49:26.374825 140455392419840 ddar.py:60] Depth 6/1000 time = 5.603788375854492
I0123 11:49:32.792368 140455392419840 ddar.py:60] Depth 7/1000 time = 6.416931390762329
I0123 11:49:38.919005 140455392419840 ddar.py:60] Depth 8/1000 time = 6.110355854034424
I0123 11:49:46.086939 140455392419840 ddar.py:60] Depth 9/1000 time = 7.16757345199585
I0123 11:49:52.413633 140455392419840 ddar.py:60] Depth 10/1000 time = 6.326433420181274
I0123 11:49:52.436888 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:49:52.436974 140455392419840 alphageometry.py:566] LM output (score=-2.516880): "o : C j k o 21 D j o k o 22 ;"
I0123 11:49:52.437012 140455392419840 alphageometry.py:567] Translation: "o = on_line o j k, on_bline o k j"

I0123 11:49:52.437049 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o j k, on_bline o k j ? perp c m m a"
I0123 11:49:52.437235 140455392419840 graph.py:498] 
I0123 11:49:52.437319 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o j k, on_bline o k j ? perp c m m a
I0123 11:49:54.632367 140455392419840 ddar.py:60] Depth 1/1000 time = 2.139263391494751
I0123 11:49:58.877183 140455392419840 ddar.py:60] Depth 2/1000 time = 4.244546890258789
I0123 11:50:02.754419 140455392419840 ddar.py:60] Depth 3/1000 time = 3.876896619796753
I0123 11:50:08.227862 140455392419840 ddar.py:60] Depth 4/1000 time = 5.473198652267456
I0123 11:50:12.207487 140455392419840 ddar.py:60] Depth 5/1000 time = 3.9793498516082764
I0123 11:50:16.926185 140455392419840 ddar.py:60] Depth 6/1000 time = 4.718015193939209
I0123 11:50:22.802069 140455392419840 ddar.py:60] Depth 7/1000 time = 5.860046148300171
I0123 11:50:28.008424 140455392419840 ddar.py:60] Depth 8/1000 time = 5.206111907958984
I0123 11:50:33.342192 140455392419840 ddar.py:60] Depth 9/1000 time = 5.333502531051636
I0123 11:50:33.371427 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:50:33.371501 140455392419840 alphageometry.py:566] LM output (score=-2.595577): "o : C d i o 21 D d o i o 22 ;"
I0123 11:50:33.371538 140455392419840 alphageometry.py:567] Translation: "o = on_line o d i, on_bline o i d"

I0123 11:50:33.371576 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o d i, on_bline o i d ? perp c m m a"
I0123 11:50:33.371773 140455392419840 graph.py:498] 
I0123 11:50:33.371843 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o d i, on_bline o i d ? perp c m m a
I0123 11:50:35.494732 140455392419840 ddar.py:60] Depth 1/1000 time = 2.0667049884796143
I0123 11:50:38.516587 140455392419840 ddar.py:60] Depth 2/1000 time = 3.02162504196167
I0123 11:50:41.867380 140455392419840 ddar.py:60] Depth 3/1000 time = 3.3505799770355225
I0123 11:50:45.291284 140455392419840 ddar.py:60] Depth 4/1000 time = 3.4236741065979004
I0123 11:50:48.694119 140455392419840 ddar.py:60] Depth 5/1000 time = 3.402564525604248
I0123 11:50:52.898269 140455392419840 ddar.py:60] Depth 6/1000 time = 4.203465223312378
I0123 11:50:56.703739 140455392419840 ddar.py:60] Depth 7/1000 time = 3.7915236949920654
I0123 11:51:00.584674 140455392419840 ddar.py:60] Depth 8/1000 time = 3.8806746006011963
I0123 11:51:05.150974 140455392419840 ddar.py:60] Depth 9/1000 time = 4.5660316944122314
I0123 11:51:05.174738 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:51:05.174804 140455392419840 alphageometry.py:566] LM output (score=-2.618932): "o : C e k o 21 D e o k o 22 ;"
I0123 11:51:05.174839 140455392419840 alphageometry.py:567] Translation: "o = on_line o e k, on_bline o k e"

I0123 11:51:05.174876 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o e k, on_bline o k e ? perp c m m a"
I0123 11:51:05.175096 140455392419840 graph.py:498] 
I0123 11:51:05.175168 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o e k, on_bline o k e ? perp c m m a
I0123 11:51:07.244621 140455392419840 ddar.py:60] Depth 1/1000 time = 2.0130748748779297
I0123 11:51:10.394852 140455392419840 ddar.py:60] Depth 2/1000 time = 3.1500003337860107
I0123 11:51:13.955898 140455392419840 ddar.py:60] Depth 3/1000 time = 3.560790538787842
I0123 11:51:17.577600 140455392419840 ddar.py:60] Depth 4/1000 time = 3.6214334964752197
I0123 11:51:21.913557 140455392419840 ddar.py:60] Depth 5/1000 time = 4.335698366165161
I0123 11:51:25.538613 140455392419840 ddar.py:60] Depth 6/1000 time = 3.6244277954101562
I0123 11:51:30.332899 140455392419840 ddar.py:60] Depth 7/1000 time = 4.7782392501831055
I0123 11:51:34.555778 140455392419840 ddar.py:60] Depth 8/1000 time = 4.222534894943237
I0123 11:51:39.501391 140455392419840 ddar.py:60] Depth 9/1000 time = 4.945318698883057
I0123 11:51:39.526313 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:51:39.526389 140455392419840 alphageometry.py:566] LM output (score=-2.714916): "o : C l k o 21 D l o k o 22 ;"
I0123 11:51:39.526425 140455392419840 alphageometry.py:567] Translation: "o = on_line o l k, on_bline o k l"

I0123 11:51:39.526463 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o l k, on_bline o k l ? perp c m m a"
I0123 11:51:39.526660 140455392419840 graph.py:498] 
I0123 11:51:39.526732 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o l k, on_bline o k l ? perp c m m a
I0123 11:51:41.724964 140455392419840 ddar.py:60] Depth 1/1000 time = 2.136671304702759
I0123 11:51:45.021954 140455392419840 ddar.py:60] Depth 2/1000 time = 3.296766519546509
I0123 11:51:49.386286 140455392419840 ddar.py:60] Depth 3/1000 time = 4.36405611038208
I0123 11:51:53.903597 140455392419840 ddar.py:60] Depth 4/1000 time = 4.516939878463745
I0123 11:51:57.574872 140455392419840 ddar.py:60] Depth 5/1000 time = 3.6709980964660645
I0123 11:52:02.005974 140455392419840 ddar.py:60] Depth 6/1000 time = 4.42983603477478
I0123 11:52:06.773306 140455392419840 ddar.py:60] Depth 7/1000 time = 4.753268241882324
I0123 11:52:11.789434 140455392419840 ddar.py:60] Depth 8/1000 time = 5.015885829925537
I0123 11:52:16.732894 140455392419840 ddar.py:60] Depth 9/1000 time = 4.943148851394653
I0123 11:52:16.755380 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:52:16.755462 140455392419840 alphageometry.py:566] LM output (score=-2.764999): "o : C d h o 21 D d o h o 22 ;"
I0123 11:52:16.755498 140455392419840 alphageometry.py:567] Translation: "o = on_line o d h, on_bline o h d"

I0123 11:52:16.755542 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o d h, on_bline o h d ? perp c m m a"
I0123 11:52:16.755776 140455392419840 graph.py:498] 
I0123 11:52:16.755849 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o d h, on_bline o h d ? perp c m m a
I0123 11:52:19.165160 140455392419840 ddar.py:60] Depth 1/1000 time = 2.348594903945923
I0123 11:52:24.329693 140455392419840 ddar.py:60] Depth 2/1000 time = 5.164308071136475
I0123 11:52:29.204523 140455392419840 ddar.py:60] Depth 3/1000 time = 4.874589920043945
I0123 11:52:34.934571 140455392419840 ddar.py:60] Depth 4/1000 time = 5.729793548583984
I0123 11:52:39.843675 140455392419840 ddar.py:60] Depth 5/1000 time = 4.908855676651001
I0123 11:52:44.782387 140455392419840 ddar.py:60] Depth 6/1000 time = 4.938047409057617
I0123 11:52:50.933521 140455392419840 ddar.py:60] Depth 7/1000 time = 6.136381387710571
I0123 11:52:56.382314 140455392419840 ddar.py:60] Depth 8/1000 time = 5.448565721511841
I0123 11:53:02.640547 140455392419840 ddar.py:60] Depth 9/1000 time = 6.257977247238159
I0123 11:53:02.665893 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:53:02.665964 140455392419840 alphageometry.py:566] LM output (score=-2.842517): "o : C a c o 21 D a o c o 22 ;"
I0123 11:53:02.666001 140455392419840 alphageometry.py:567] Translation: "o = on_line o a c, on_bline o c a"

I0123 11:53:02.666043 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o a c, on_bline o c a ? perp c m m a"
I0123 11:53:02.666234 140455392419840 graph.py:498] 
I0123 11:53:02.666301 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o a c, on_bline o c a ? perp c m m a
I0123 11:53:03.970716 140455392419840 ddar.py:60] Depth 1/1000 time = 1.2469661235809326
I0123 11:53:07.153261 140455392419840 ddar.py:60] Depth 2/1000 time = 3.1822032928466797
I0123 11:53:11.544175 140455392419840 ddar.py:60] Depth 3/1000 time = 4.390676259994507
I0123 11:53:15.267362 140455392419840 ddar.py:60] Depth 4/1000 time = 3.722959041595459
I0123 11:53:19.742240 140455392419840 ddar.py:60] Depth 5/1000 time = 4.474596977233887
I0123 11:53:23.542229 140455392419840 ddar.py:60] Depth 6/1000 time = 3.799609422683716
I0123 11:53:28.156386 140455392419840 ddar.py:60] Depth 7/1000 time = 4.61335301399231
I0123 11:53:32.221807 140455392419840 ddar.py:60] Depth 8/1000 time = 4.049185514450073
I0123 11:53:36.372995 140455392419840 ddar.py:60] Depth 9/1000 time = 4.150947570800781
I0123 11:53:41.330188 140455392419840 ddar.py:60] Depth 10/1000 time = 4.95683479309082
I0123 11:53:41.358673 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:53:41.358772 140455392419840 alphageometry.py:566] LM output (score=-2.845073): "o : C h k o 21 D h o k o 22 ;"
I0123 11:53:41.358808 140455392419840 alphageometry.py:567] Translation: "o = on_line o h k, on_bline o k h"

I0123 11:53:41.358860 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o h k, on_bline o k h ? perp c m m a"
I0123 11:53:41.359100 140455392419840 graph.py:498] 
I0123 11:53:41.359169 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o h k, on_bline o k h ? perp c m m a
I0123 11:53:43.614739 140455392419840 ddar.py:60] Depth 1/1000 time = 2.2001092433929443
I0123 11:53:47.954617 140455392419840 ddar.py:60] Depth 2/1000 time = 4.3396453857421875
I0123 11:53:52.609270 140455392419840 ddar.py:60] Depth 3/1000 time = 4.6544342041015625
I0123 11:53:58.258076 140455392419840 ddar.py:60] Depth 4/1000 time = 5.648575305938721
I0123 11:54:03.222663 140455392419840 ddar.py:60] Depth 5/1000 time = 4.964284896850586
I0123 11:54:08.115657 140455392419840 ddar.py:60] Depth 6/1000 time = 4.892368316650391
I0123 11:54:13.396246 140455392419840 ddar.py:60] Depth 7/1000 time = 5.265621185302734
I0123 11:54:18.907694 140455392419840 ddar.py:60] Depth 8/1000 time = 5.511157035827637
I0123 11:54:24.397888 140455392419840 ddar.py:60] Depth 9/1000 time = 5.489796161651611
I0123 11:54:24.427294 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:54:24.427365 140455392419840 alphageometry.py:566] LM output (score=-2.912421): "o : C g k o 21 D g o k o 22 ;"
I0123 11:54:24.427401 140455392419840 alphageometry.py:567] Translation: "o = on_line o g k, on_bline o k g"

I0123 11:54:24.427438 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o g k, on_bline o k g ? perp c m m a"
I0123 11:54:24.427631 140455392419840 graph.py:498] 
I0123 11:54:24.427702 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o g k, on_bline o k g ? perp c m m a
I0123 11:54:26.646795 140455392419840 ddar.py:60] Depth 1/1000 time = 2.162454605102539
I0123 11:54:30.872382 140455392419840 ddar.py:60] Depth 2/1000 time = 4.225361108779907
I0123 11:54:34.731357 140455392419840 ddar.py:60] Depth 3/1000 time = 3.8587584495544434
I0123 11:54:39.762619 140455392419840 ddar.py:60] Depth 4/1000 time = 5.031018018722534
I0123 11:54:44.790616 140455392419840 ddar.py:60] Depth 5/1000 time = 5.027697563171387
I0123 11:54:49.858442 140455392419840 ddar.py:60] Depth 6/1000 time = 5.067217588424683
I0123 11:54:55.398083 140455392419840 ddar.py:60] Depth 7/1000 time = 5.523337364196777
I0123 11:55:00.239622 140455392419840 ddar.py:60] Depth 8/1000 time = 4.8411760330200195
I0123 11:55:06.641647 140455392419840 ddar.py:60] Depth 9/1000 time = 6.401745796203613
I0123 11:55:11.471876 140455392419840 ddar.py:60] Depth 10/1000 time = 4.799950361251831
I0123 11:55:11.476267 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:55:11.476342 140455392419840 alphageometry.py:566] LM output (score=-2.977344): "o : C l m o 21 D l m l o 22 ;"
I0123 11:55:11.476378 140455392419840 alphageometry.py:567] Translation: "o = on_line o l m, on_circle o l m"

I0123 11:55:11.476438 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o l m, on_circle o l m ? perp c m m a"
I0123 11:55:11.476643 140455392419840 graph.py:498] 
I0123 11:55:11.476714 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o l m, on_circle o l m ? perp c m m a
I0123 11:55:14.600405 140455392419840 ddar.py:60] Depth 1/1000 time = 3.0652925968170166
I0123 11:55:18.035673 140455392419840 ddar.py:60] Depth 2/1000 time = 3.435025930404663
I0123 11:55:22.682315 140455392419840 ddar.py:60] Depth 3/1000 time = 4.6463727951049805
I0123 11:55:26.570803 140455392419840 ddar.py:60] Depth 4/1000 time = 3.888211965560913
I0123 11:55:31.254055 140455392419840 ddar.py:60] Depth 5/1000 time = 4.682922840118408
I0123 11:55:36.021402 140455392419840 ddar.py:60] Depth 6/1000 time = 4.766661167144775
I0123 11:55:40.970073 140455392419840 ddar.py:60] Depth 7/1000 time = 4.931781530380249
I0123 11:55:45.286941 140455392419840 ddar.py:60] Depth 8/1000 time = 4.316532611846924
I0123 11:55:50.406756 140455392419840 ddar.py:60] Depth 9/1000 time = 5.119425535202026
I0123 11:55:50.427358 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:55:50.427456 140455392419840 alphageometry.py:566] LM output (score=-3.096212): "o : C d m o 21 D d o m o 22 ;"
I0123 11:55:50.427492 140455392419840 alphageometry.py:567] Translation: "o = on_line o d m, on_bline o m d"

I0123 11:55:50.427543 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o d m, on_bline o m d ? perp c m m a"
I0123 11:55:50.427752 140455392419840 graph.py:498] 
I0123 11:55:50.427821 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o d m, on_bline o m d ? perp c m m a
I0123 11:55:52.556347 140455392419840 ddar.py:60] Depth 1/1000 time = 2.067244291305542
I0123 11:55:55.563440 140455392419840 ddar.py:60] Depth 2/1000 time = 3.0068414211273193
I0123 11:55:58.868664 140455392419840 ddar.py:60] Depth 3/1000 time = 3.304995059967041
I0123 11:56:03.108263 140455392419840 ddar.py:60] Depth 4/1000 time = 4.2393670082092285
I0123 11:56:06.560811 140455392419840 ddar.py:60] Depth 5/1000 time = 3.45229172706604
I0123 11:56:10.056008 140455392419840 ddar.py:60] Depth 6/1000 time = 3.4945244789123535
I0123 11:56:13.844489 140455392419840 ddar.py:60] Depth 7/1000 time = 3.7742388248443604
I0123 11:56:18.510316 140455392419840 ddar.py:60] Depth 8/1000 time = 4.665583610534668
I0123 11:56:22.368281 140455392419840 ddar.py:60] Depth 9/1000 time = 3.857680320739746
I0123 11:56:22.390651 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:56:22.390725 140455392419840 alphageometry.py:566] LM output (score=-3.135214): "o : C l m o 21 D l m m o 22 ;"
I0123 11:56:22.390797 140455392419840 alphageometry.py:567] Translation: "o = on_line o l m, on_circle o m l"

I0123 11:56:22.390837 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o l m, on_circle o m l ? perp c m m a"
I0123 11:56:22.391033 140455392419840 graph.py:498] 
I0123 11:56:22.391101 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o l m, on_circle o m l ? perp c m m a
I0123 11:56:24.602037 140455392419840 ddar.py:60] Depth 1/1000 time = 2.155820608139038
I0123 11:56:27.674798 140455392419840 ddar.py:60] Depth 2/1000 time = 3.0724925994873047
I0123 11:56:31.832552 140455392419840 ddar.py:60] Depth 3/1000 time = 4.157410383224487
I0123 11:56:35.247397 140455392419840 ddar.py:60] Depth 4/1000 time = 3.4146218299865723
I0123 11:56:39.461327 140455392419840 ddar.py:60] Depth 5/1000 time = 4.213670253753662
I0123 11:56:42.875881 140455392419840 ddar.py:60] Depth 6/1000 time = 3.4139723777770996
I0123 11:56:47.446271 140455392419840 ddar.py:60] Depth 7/1000 time = 4.5561254024505615
I0123 11:56:52.137696 140455392419840 ddar.py:60] Depth 8/1000 time = 4.691069602966309
I0123 11:56:55.950790 140455392419840 ddar.py:60] Depth 9/1000 time = 3.8128199577331543
I0123 11:56:55.969925 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:56:55.970001 140455392419840 alphageometry.py:566] LM output (score=-3.150403): "o : C l n o 21 T l n m o 22 ;"
I0123 11:56:55.970037 140455392419840 alphageometry.py:567] Translation: "o = on_line o l n, on_tline o m l n"

I0123 11:56:55.970074 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o l n, on_tline o m l n ? perp c m m a"
I0123 11:56:55.970268 140455392419840 graph.py:498] 
I0123 11:56:55.970338 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o l n, on_tline o m l n ? perp c m m a
I0123 11:56:58.022236 140455392419840 ddar.py:60] Depth 1/1000 time = 2.006500005722046
I0123 11:57:01.095610 140455392419840 ddar.py:60] Depth 2/1000 time = 3.0731635093688965
I0123 11:57:05.442361 140455392419840 ddar.py:60] Depth 3/1000 time = 4.346479892730713
I0123 11:57:09.036241 140455392419840 ddar.py:60] Depth 4/1000 time = 3.593512535095215
I0123 11:57:12.580824 140455392419840 ddar.py:60] Depth 5/1000 time = 3.5443272590637207
I0123 11:57:16.973573 140455392419840 ddar.py:60] Depth 6/1000 time = 4.3922295570373535
I0123 11:57:20.889048 140455392419840 ddar.py:60] Depth 7/1000 time = 3.901373863220215
I0123 11:57:25.821352 140455392419840 ddar.py:60] Depth 8/1000 time = 4.932054281234741
I0123 11:57:29.847035 140455392419840 ddar.py:60] Depth 9/1000 time = 4.025365352630615
I0123 11:57:29.864802 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:57:29.864923 140455392419840 alphageometry.py:566] LM output (score=-3.224789): "o : C d e o 21 D d o e o 22 ;"
I0123 11:57:29.864963 140455392419840 alphageometry.py:567] Translation: "o = on_line o d e, on_bline o e d"

I0123 11:57:29.865004 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o d e, on_bline o e d ? perp c m m a"
I0123 11:57:29.865200 140455392419840 graph.py:498] 
I0123 11:57:29.865274 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o d e, on_bline o e d ? perp c m m a
I0123 11:57:32.114301 140455392419840 ddar.py:60] Depth 1/1000 time = 2.191633462905884
I0123 11:57:35.305799 140455392419840 ddar.py:60] Depth 2/1000 time = 3.191274881362915
I0123 11:57:39.642460 140455392419840 ddar.py:60] Depth 3/1000 time = 4.336435794830322
I0123 11:57:44.253839 140455392419840 ddar.py:60] Depth 4/1000 time = 4.6111063957214355
I0123 11:57:47.941953 140455392419840 ddar.py:60] Depth 5/1000 time = 3.6877899169921875
I0123 11:57:52.451824 140455392419840 ddar.py:60] Depth 6/1000 time = 4.5092692375183105
I0123 11:57:56.439479 140455392419840 ddar.py:60] Depth 7/1000 time = 3.974332809448242
I0123 11:58:01.326397 140455392419840 ddar.py:60] Depth 8/1000 time = 4.886612892150879
I0123 11:58:05.386621 140455392419840 ddar.py:60] Depth 9/1000 time = 4.059819459915161
I0123 11:58:05.409793 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:58:05.409884 140455392419840 alphageometry.py:566] LM output (score=-3.247829): "o : C l m o 21 D l o m o 22 ;"
I0123 11:58:05.409922 140455392419840 alphageometry.py:567] Translation: "o = on_line o l m, on_bline o m l"

I0123 11:58:05.409965 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o l m, on_bline o m l ? perp c m m a"
I0123 11:58:05.410159 140455392419840 graph.py:498] 
I0123 11:58:05.410230 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o l m, on_bline o m l ? perp c m m a
I0123 11:58:07.598652 140455392419840 ddar.py:60] Depth 1/1000 time = 2.1336021423339844
I0123 11:58:11.441365 140455392419840 ddar.py:60] Depth 2/1000 time = 3.842510461807251
I0123 11:58:14.788436 140455392419840 ddar.py:60] Depth 3/1000 time = 3.3468475341796875
I0123 11:58:19.080796 140455392419840 ddar.py:60] Depth 4/1000 time = 4.292070388793945
I0123 11:58:22.592284 140455392419840 ddar.py:60] Depth 5/1000 time = 3.5111026763916016
I0123 11:58:26.852307 140455392419840 ddar.py:60] Depth 6/1000 time = 4.259469270706177
I0123 11:58:30.561790 140455392419840 ddar.py:60] Depth 7/1000 time = 3.695500612258911
I0123 11:58:35.200246 140455392419840 ddar.py:60] Depth 8/1000 time = 4.638240814208984
I0123 11:58:40.036176 140455392419840 ddar.py:60] Depth 9/1000 time = 4.835631847381592
I0123 11:58:40.056543 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:58:40.056648 140455392419840 alphageometry.py:566] LM output (score=-3.331239): "o : C d f o 21 D d o f o 22 ;"
I0123 11:58:40.056690 140455392419840 alphageometry.py:567] Translation: "o = on_line o d f, on_bline o f d"

I0123 11:58:40.056739 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o d f, on_bline o f d ? perp c m m a"
I0123 11:58:40.056939 140455392419840 graph.py:498] 
I0123 11:58:40.057007 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o d f, on_bline o f d ? perp c m m a
I0123 11:58:41.376079 140455392419840 ddar.py:60] Depth 1/1000 time = 1.261209487915039
I0123 11:58:44.641612 140455392419840 ddar.py:60] Depth 2/1000 time = 3.2653071880340576
I0123 11:58:49.082438 140455392419840 ddar.py:60] Depth 3/1000 time = 4.440595626831055
I0123 11:58:52.903053 140455392419840 ddar.py:60] Depth 4/1000 time = 3.820375442504883
I0123 11:58:56.728559 140455392419840 ddar.py:60] Depth 5/1000 time = 3.825160026550293
I0123 11:59:01.437801 140455392419840 ddar.py:60] Depth 6/1000 time = 4.70846152305603
I0123 11:59:05.636477 140455392419840 ddar.py:60] Depth 7/1000 time = 4.180590391159058
I0123 11:59:09.868511 140455392419840 ddar.py:60] Depth 8/1000 time = 4.231797456741333
I0123 11:59:15.002115 140455392419840 ddar.py:60] Depth 9/1000 time = 5.13325309753418
I0123 11:59:15.025178 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:59:15.025272 140455392419840 alphageometry.py:566] LM output (score=-3.461354): "o : C m k o 21 D m o k o 22 ;"
I0123 11:59:15.025308 140455392419840 alphageometry.py:567] Translation: "o = on_line o m k, on_bline o k m"

I0123 11:59:15.025360 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o m k, on_bline o k m ? perp c m m a"
I0123 11:59:15.025565 140455392419840 graph.py:498] 
I0123 11:59:15.025633 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o m k, on_bline o k m ? perp c m m a
I0123 11:59:16.318875 140455392419840 ddar.py:60] Depth 1/1000 time = 1.2379705905914307
I0123 11:59:19.489612 140455392419840 ddar.py:60] Depth 2/1000 time = 3.170485496520996
I0123 11:59:23.827144 140455392419840 ddar.py:60] Depth 3/1000 time = 4.3372955322265625
I0123 11:59:27.444673 140455392419840 ddar.py:60] Depth 4/1000 time = 3.6172897815704346
I0123 11:59:31.175443 140455392419840 ddar.py:60] Depth 5/1000 time = 3.73048734664917
I0123 11:59:34.865931 140455392419840 ddar.py:60] Depth 6/1000 time = 3.6898374557495117
I0123 11:59:39.662699 140455392419840 ddar.py:60] Depth 7/1000 time = 4.782082557678223
I0123 11:59:43.796825 140455392419840 ddar.py:60] Depth 8/1000 time = 4.133920907974243
I0123 11:59:47.835974 140455392419840 ddar.py:60] Depth 9/1000 time = 4.038827419281006
I0123 11:59:47.861433 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 11:59:47.861510 140455392419840 alphageometry.py:566] LM output (score=-3.462416): "o : C b k o 21 D b o k o 22 ;"
I0123 11:59:47.861547 140455392419840 alphageometry.py:567] Translation: "o = on_line o b k, on_bline o k b"

I0123 11:59:47.861586 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o b k, on_bline o k b ? perp c m m a"
I0123 11:59:47.861795 140455392419840 graph.py:498] 
I0123 11:59:47.861864 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o b k, on_bline o k b ? perp c m m a
I0123 11:59:50.133265 140455392419840 ddar.py:60] Depth 1/1000 time = 2.214500665664673
I0123 11:59:55.002417 140455392419840 ddar.py:60] Depth 2/1000 time = 4.868909120559692
I0123 12:00:00.802450 140455392419840 ddar.py:60] Depth 3/1000 time = 5.799779891967773
I0123 12:00:06.600672 140455392419840 ddar.py:60] Depth 4/1000 time = 5.797983646392822
I0123 12:00:13.355311 140455392419840 ddar.py:60] Depth 5/1000 time = 6.754312992095947
I0123 12:00:19.249962 140455392419840 ddar.py:60] Depth 6/1000 time = 5.893922567367554
I0123 12:00:24.235492 140455392419840 ddar.py:60] Depth 7/1000 time = 4.98483943939209
I0123 12:00:31.354306 140455392419840 ddar.py:60] Depth 8/1000 time = 7.103607177734375
I0123 12:00:37.815250 140455392419840 ddar.py:60] Depth 9/1000 time = 6.460653305053711
I0123 12:00:45.107945 140455392419840 ddar.py:60] Depth 10/1000 time = 7.292482614517212
I0123 12:00:45.135904 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:00:45.135970 140455392419840 alphageometry.py:566] LM output (score=-3.476795): "o : C c e o 21 D c o e o 22 ;"
I0123 12:00:45.136007 140455392419840 alphageometry.py:567] Translation: "o = on_line o c e, on_bline o e c"

I0123 12:00:45.136043 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o c e, on_bline o e c ? perp c m m a"
I0123 12:00:45.136228 140455392419840 graph.py:498] 
I0123 12:00:45.136294 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o c e, on_bline o e c ? perp c m m a
I0123 12:00:47.441867 140455392419840 ddar.py:60] Depth 1/1000 time = 2.250312089920044
I0123 12:00:50.846689 140455392419840 ddar.py:60] Depth 2/1000 time = 3.404491662979126
I0123 12:00:55.462784 140455392419840 ddar.py:60] Depth 3/1000 time = 4.615907907485962
I0123 12:00:59.318333 140455392419840 ddar.py:60] Depth 4/1000 time = 3.8552985191345215
I0123 12:01:04.064155 140455392419840 ddar.py:60] Depth 5/1000 time = 4.7455315589904785
I0123 12:01:08.049442 140455392419840 ddar.py:60] Depth 6/1000 time = 3.984595775604248
I0123 12:01:13.115980 140455392419840 ddar.py:60] Depth 7/1000 time = 5.0513083934783936
I0123 12:01:17.521358 140455392419840 ddar.py:60] Depth 8/1000 time = 4.405151128768921
I0123 12:01:22.732372 140455392419840 ddar.py:60] Depth 9/1000 time = 5.21079158782959
I0123 12:01:22.757358 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:01:22.757438 140455392419840 alphageometry.py:566] LM output (score=-3.520146): "o : C k j o 21 D k o j o 22 ;"
I0123 12:01:22.757476 140455392419840 alphageometry.py:567] Translation: "o = on_line o k j, on_bline o j k"

I0123 12:01:22.757516 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o k j, on_bline o j k ? perp c m m a"
I0123 12:01:22.757728 140455392419840 graph.py:498] 
I0123 12:01:22.757799 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o k j, on_bline o j k ? perp c m m a
I0123 12:01:25.104985 140455392419840 ddar.py:60] Depth 1/1000 time = 2.2917191982269287
I0123 12:01:29.390438 140455392419840 ddar.py:60] Depth 2/1000 time = 4.285167217254639
I0123 12:01:34.123735 140455392419840 ddar.py:60] Depth 3/1000 time = 4.733070373535156
I0123 12:01:38.139857 140455392419840 ddar.py:60] Depth 4/1000 time = 4.015875339508057
I0123 12:01:43.057629 140455392419840 ddar.py:60] Depth 5/1000 time = 4.917425155639648
I0123 12:01:47.943581 140455392419840 ddar.py:60] Depth 6/1000 time = 4.885199546813965
I0123 12:01:53.218742 140455392419840 ddar.py:60] Depth 7/1000 time = 5.259631395339966
I0123 12:01:57.830953 140455392419840 ddar.py:60] Depth 8/1000 time = 4.612022161483765
I0123 12:02:03.292239 140455392419840 ddar.py:60] Depth 9/1000 time = 5.4609534740448
I0123 12:02:03.319749 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:02:03.319843 140455392419840 alphageometry.py:566] LM output (score=-3.644365): "o : C c g o 21 D c o g o 22 ;"
I0123 12:02:03.319879 140455392419840 alphageometry.py:567] Translation: "o = on_line o c g, on_bline o g c"

I0123 12:02:03.319923 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o c g, on_bline o g c ? perp c m m a"
I0123 12:02:03.320128 140455392419840 graph.py:498] 
I0123 12:02:03.320192 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o c g, on_bline o g c ? perp c m m a
I0123 12:02:06.474016 140455392419840 ddar.py:60] Depth 1/1000 time = 3.0981500148773193
I0123 12:02:09.998563 140455392419840 ddar.py:60] Depth 2/1000 time = 3.524324417114258
I0123 12:02:15.154224 140455392419840 ddar.py:60] Depth 3/1000 time = 5.15547776222229
I0123 12:02:20.873281 140455392419840 ddar.py:60] Depth 4/1000 time = 5.71875262260437
I0123 12:02:25.781850 140455392419840 ddar.py:60] Depth 5/1000 time = 4.908131837844849
I0123 12:02:31.678452 140455392419840 ddar.py:60] Depth 6/1000 time = 5.896340847015381
I0123 12:02:37.634438 140455392419840 ddar.py:60] Depth 7/1000 time = 5.955704927444458
I0123 12:02:44.440874 140455392419840 ddar.py:60] Depth 8/1000 time = 6.805721044540405
I0123 12:02:50.948926 140455392419840 ddar.py:60] Depth 9/1000 time = 6.489284992218018
I0123 12:02:57.719032 140455392419840 ddar.py:60] Depth 10/1000 time = 6.769813776016235
I0123 12:03:03.496973 140455392419840 ddar.py:60] Depth 11/1000 time = 5.777531623840332
I0123 12:03:11.092552 140455392419840 ddar.py:60] Depth 12/1000 time = 7.554484605789185
I0123 12:03:17.044035 140455392419840 ddar.py:60] Depth 13/1000 time = 5.936387777328491
I0123 12:03:17.049237 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:03:17.049326 140455392419840 alphageometry.py:566] LM output (score=-3.671572): "o : C l n o 21 T e o l n 22 ;"
I0123 12:03:17.049361 140455392419840 alphageometry.py:567] Translation: "o = on_line o l n, on_tline o e l n"

I0123 12:03:17.049418 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o l n, on_tline o e l n ? perp c m m a"
I0123 12:03:17.049629 140455392419840 graph.py:498] 
I0123 12:03:17.049702 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n d k, on_bline n k d; o = on_line o l n, on_tline o e l n ? perp c m m a
I0123 12:03:19.171847 140455392419840 ddar.py:60] Depth 1/1000 time = 2.0764670372009277
I0123 12:03:22.261036 140455392419840 ddar.py:60] Depth 2/1000 time = 3.0889644622802734
I0123 12:03:26.626024 140455392419840 ddar.py:60] Depth 3/1000 time = 4.36476469039917
I0123 12:03:30.261599 140455392419840 ddar.py:60] Depth 4/1000 time = 3.6353437900543213
I0123 12:03:33.925872 140455392419840 ddar.py:60] Depth 5/1000 time = 3.6639435291290283
I0123 12:03:38.503365 140455392419840 ddar.py:60] Depth 6/1000 time = 4.576778173446655
I0123 12:03:42.513318 140455392419840 ddar.py:60] Depth 7/1000 time = 3.9955978393554688
I0123 12:03:46.596987 140455392419840 ddar.py:60] Depth 8/1000 time = 4.0834338665008545
I0123 12:03:51.569348 140455392419840 ddar.py:60] Depth 9/1000 time = 4.972095012664795
I0123 12:03:51.588646 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:03:51.588746 140455392419840 alphageometry.py:566] LM output (score=-3.791363): "o : C d l o 21 C k o l 22 ;"
I0123 12:03:51.588788 140455392419840 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 12:03:51.588840 140455392419840 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C k m n 19 D k n m n 20 ; x00
I0123 12:03:59.793772 140455392419840 alphageometry.py:566] LM output (score=-0.768598): "o : C l m o 21 D l o m o 22 ;"
I0123 12:03:59.794106 140455392419840 alphageometry.py:567] Translation: "o = on_line o l m, on_bline o m l"

I0123 12:03:59.794186 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o l m, on_bline o m l ? perp c m m a"
I0123 12:03:59.794464 140455392419840 graph.py:498] 
I0123 12:03:59.794541 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o l m, on_bline o m l ? perp c m m a
I0123 12:04:02.194087 140455392419840 ddar.py:60] Depth 1/1000 time = 2.3432235717773438
I0123 12:04:05.433921 140455392419840 ddar.py:60] Depth 2/1000 time = 3.2395849227905273
I0123 12:04:08.960997 140455392419840 ddar.py:60] Depth 3/1000 time = 3.5268099308013916
I0123 12:04:13.466518 140455392419840 ddar.py:60] Depth 4/1000 time = 4.505251407623291
I0123 12:04:17.134399 140455392419840 ddar.py:60] Depth 5/1000 time = 3.66756534576416
I0123 12:04:20.736008 140455392419840 ddar.py:60] Depth 6/1000 time = 3.600942850112915
I0123 12:04:25.498425 140455392419840 ddar.py:60] Depth 7/1000 time = 4.749771595001221
I0123 12:04:29.472955 140455392419840 ddar.py:60] Depth 8/1000 time = 3.9742274284362793
I0123 12:04:34.331540 140455392419840 ddar.py:60] Depth 9/1000 time = 4.858254432678223
I0123 12:04:34.353614 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:04:34.353679 140455392419840 alphageometry.py:566] LM output (score=-0.824631): "o : C c m o 21 D c o m o 22 ;"
I0123 12:04:34.353714 140455392419840 alphageometry.py:567] Translation: "o = on_line o c m, on_bline o m c"

I0123 12:04:34.353753 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o c m, on_bline o m c ? perp c m m a"
I0123 12:04:34.353945 140455392419840 graph.py:498] 
I0123 12:04:34.354010 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o c m, on_bline o m c ? perp c m m a
I0123 12:04:36.724636 140455392419840 ddar.py:60] Depth 1/1000 time = 2.3173177242279053
I0123 12:04:40.347839 140455392419840 ddar.py:60] Depth 2/1000 time = 3.6229798793792725
I0123 12:04:45.852178 140455392419840 ddar.py:60] Depth 3/1000 time = 5.504068851470947
I0123 12:04:50.401835 140455392419840 ddar.py:60] Depth 4/1000 time = 4.5493597984313965
I0123 12:04:55.832743 140455392419840 ddar.py:60] Depth 5/1000 time = 5.430548429489136
I0123 12:05:00.312314 140455392419840 ddar.py:60] Depth 6/1000 time = 4.4788994789123535
I0123 12:05:06.037867 140455392419840 ddar.py:60] Depth 7/1000 time = 5.711958646774292
I0123 12:05:10.905030 140455392419840 ddar.py:60] Depth 8/1000 time = 4.8668718338012695
I0123 12:05:16.700187 140455392419840 ddar.py:60] Depth 9/1000 time = 5.794829368591309
I0123 12:05:16.727211 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:05:16.727285 140455392419840 alphageometry.py:566] LM output (score=-1.054800): "o : C i k o 21 D i o k o 22 ;"
I0123 12:05:16.727344 140455392419840 alphageometry.py:567] Translation: "o = on_line o i k, on_bline o k i"

I0123 12:05:16.727383 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o i k, on_bline o k i ? perp c m m a"
I0123 12:05:16.727570 140455392419840 graph.py:498] 
I0123 12:05:16.727636 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o i k, on_bline o k i ? perp c m m a
I0123 12:05:18.957144 140455392419840 ddar.py:60] Depth 1/1000 time = 2.1756410598754883
I0123 12:05:22.253132 140455392419840 ddar.py:60] Depth 2/1000 time = 3.2957725524902344
I0123 12:05:25.843897 140455392419840 ddar.py:60] Depth 3/1000 time = 3.5905237197875977
I0123 12:05:29.499308 140455392419840 ddar.py:60] Depth 4/1000 time = 3.6551692485809326
I0123 12:05:33.147731 140455392419840 ddar.py:60] Depth 5/1000 time = 3.648158550262451
I0123 12:05:37.698643 140455392419840 ddar.py:60] Depth 6/1000 time = 4.550294399261475
I0123 12:05:41.683254 140455392419840 ddar.py:60] Depth 7/1000 time = 3.972543716430664
I0123 12:05:45.696588 140455392419840 ddar.py:60] Depth 8/1000 time = 4.0130839347839355
I0123 12:05:49.765255 140455392419840 ddar.py:60] Depth 9/1000 time = 4.068397283554077
I0123 12:05:49.792181 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:05:49.792253 140455392419840 alphageometry.py:566] LM output (score=-1.112618): "o : C l n o 21 D l o n o 22 ;"
I0123 12:05:49.792288 140455392419840 alphageometry.py:567] Translation: "o = on_line o l n, on_bline o n l"

I0123 12:05:49.792327 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o l n, on_bline o n l ? perp c m m a"
I0123 12:05:49.792520 140455392419840 graph.py:498] 
I0123 12:05:49.792588 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o l n, on_bline o n l ? perp c m m a
I0123 12:05:51.982596 140455392419840 ddar.py:60] Depth 1/1000 time = 2.1354260444641113
I0123 12:05:55.025870 140455392419840 ddar.py:60] Depth 2/1000 time = 3.042992353439331
I0123 12:05:58.312416 140455392419840 ddar.py:60] Depth 3/1000 time = 3.286188840866089
I0123 12:06:01.638222 140455392419840 ddar.py:60] Depth 4/1000 time = 3.3255553245544434
I0123 12:06:04.961926 140455392419840 ddar.py:60] Depth 5/1000 time = 3.323441505432129
I0123 12:06:08.289261 140455392419840 ddar.py:60] Depth 6/1000 time = 3.3267736434936523
I0123 12:06:11.931643 140455392419840 ddar.py:60] Depth 7/1000 time = 3.6310007572174072
I0123 12:06:16.513698 140455392419840 ddar.py:60] Depth 8/1000 time = 4.581792831420898
I0123 12:06:20.208819 140455392419840 ddar.py:60] Depth 9/1000 time = 3.694849967956543
I0123 12:06:20.227652 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:06:20.227747 140455392419840 alphageometry.py:566] LM output (score=-1.146980): "o : C g k o 21 D g o k o 22 ;"
I0123 12:06:20.227783 140455392419840 alphageometry.py:567] Translation: "o = on_line o g k, on_bline o k g"

I0123 12:06:20.227819 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o g k, on_bline o k g ? perp c m m a"
I0123 12:06:20.228008 140455392419840 graph.py:498] 
I0123 12:06:20.228075 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o g k, on_bline o k g ? perp c m m a
I0123 12:06:22.582478 140455392419840 ddar.py:60] Depth 1/1000 time = 2.2996301651000977
I0123 12:06:26.016700 140455392419840 ddar.py:60] Depth 2/1000 time = 3.433993101119995
I0123 12:06:29.825977 140455392419840 ddar.py:60] Depth 3/1000 time = 3.809056520462036
I0123 12:06:34.881389 140455392419840 ddar.py:60] Depth 4/1000 time = 5.055172920227051
I0123 12:06:39.967807 140455392419840 ddar.py:60] Depth 5/1000 time = 5.086108922958374
I0123 12:06:44.110339 140455392419840 ddar.py:60] Depth 6/1000 time = 4.141897439956665
I0123 12:06:49.518563 140455392419840 ddar.py:60] Depth 7/1000 time = 5.392538785934448
I0123 12:06:55.104797 140455392419840 ddar.py:60] Depth 8/1000 time = 5.585997104644775
I0123 12:06:59.765168 140455392419840 ddar.py:60] Depth 9/1000 time = 4.660093069076538
I0123 12:07:05.379452 140455392419840 ddar.py:60] Depth 10/1000 time = 5.5856263637542725
I0123 12:07:05.383342 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:07:05.383408 140455392419840 alphageometry.py:566] LM output (score=-1.581922): "o : C m l o 21 D m o l o 22 ;"
I0123 12:07:05.383445 140455392419840 alphageometry.py:567] Translation: "o = on_line o m l, on_bline o l m"

I0123 12:07:05.383486 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o m l, on_bline o l m ? perp c m m a"
I0123 12:07:05.383677 140455392419840 graph.py:498] 
I0123 12:07:05.383744 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o m l, on_bline o l m ? perp c m m a
I0123 12:07:07.750402 140455392419840 ddar.py:60] Depth 1/1000 time = 2.3122470378875732
I0123 12:07:11.040586 140455392419840 ddar.py:60] Depth 2/1000 time = 3.2898828983306885
I0123 12:07:14.594380 140455392419840 ddar.py:60] Depth 3/1000 time = 3.553392171859741
I0123 12:07:19.088701 140455392419840 ddar.py:60] Depth 4/1000 time = 4.494010925292969
I0123 12:07:22.705973 140455392419840 ddar.py:60] Depth 5/1000 time = 3.616956949234009
I0123 12:07:27.290574 140455392419840 ddar.py:60] Depth 6/1000 time = 4.583920240402222
I0123 12:07:31.244661 140455392419840 ddar.py:60] Depth 7/1000 time = 3.9415481090545654
I0123 12:07:35.241840 140455392419840 ddar.py:60] Depth 8/1000 time = 3.9968841075897217
I0123 12:07:40.201544 140455392419840 ddar.py:60] Depth 9/1000 time = 4.959345579147339
I0123 12:07:40.222740 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:07:40.222815 140455392419840 alphageometry.py:566] LM output (score=-1.716455): "o : C j k o 21 D j o k o 22 ;"
I0123 12:07:40.222852 140455392419840 alphageometry.py:567] Translation: "o = on_line o j k, on_bline o k j"

I0123 12:07:40.222891 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o j k, on_bline o k j ? perp c m m a"
I0123 12:07:40.223086 140455392419840 graph.py:498] 
I0123 12:07:40.223159 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o j k, on_bline o k j ? perp c m m a
I0123 12:07:42.605374 140455392419840 ddar.py:60] Depth 1/1000 time = 2.327242374420166
I0123 12:07:46.128084 140455392419840 ddar.py:60] Depth 2/1000 time = 3.522490978240967
I0123 12:07:50.009501 140455392419840 ddar.py:60] Depth 3/1000 time = 3.881171941757202
I0123 12:07:54.841479 140455392419840 ddar.py:60] Depth 4/1000 time = 4.8317084312438965
I0123 12:07:59.796834 140455392419840 ddar.py:60] Depth 5/1000 time = 4.955073595046997
I0123 12:08:03.771940 140455392419840 ddar.py:60] Depth 6/1000 time = 3.9744932651519775
I0123 12:08:09.014947 140455392419840 ddar.py:60] Depth 7/1000 time = 5.228469610214233
I0123 12:08:14.472123 140455392419840 ddar.py:60] Depth 8/1000 time = 5.456937789916992
I0123 12:08:18.946646 140455392419840 ddar.py:60] Depth 9/1000 time = 4.474246978759766
I0123 12:08:18.974689 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:08:18.974759 140455392419840 alphageometry.py:566] LM output (score=-1.812525): "o : C h k o 21 D h o k o 22 ;"
I0123 12:08:18.974795 140455392419840 alphageometry.py:567] Translation: "o = on_line o h k, on_bline o k h"

I0123 12:08:18.974830 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o h k, on_bline o k h ? perp c m m a"
I0123 12:08:18.975023 140455392419840 graph.py:498] 
I0123 12:08:18.975092 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o h k, on_bline o k h ? perp c m m a
I0123 12:08:21.377607 140455392419840 ddar.py:60] Depth 1/1000 time = 2.34794282913208
I0123 12:08:24.891919 140455392419840 ddar.py:60] Depth 2/1000 time = 3.514029026031494
I0123 12:08:29.636377 140455392419840 ddar.py:60] Depth 3/1000 time = 4.744115591049194
I0123 12:08:34.535387 140455392419840 ddar.py:60] Depth 4/1000 time = 4.898780107498169
I0123 12:08:38.508189 140455392419840 ddar.py:60] Depth 5/1000 time = 3.9725260734558105
I0123 12:08:43.422920 140455392419840 ddar.py:60] Depth 6/1000 time = 4.914116621017456
I0123 12:08:47.707686 140455392419840 ddar.py:60] Depth 7/1000 time = 4.269379138946533
I0123 12:08:53.114937 140455392419840 ddar.py:60] Depth 8/1000 time = 5.407008647918701
I0123 12:08:57.605726 140455392419840 ddar.py:60] Depth 9/1000 time = 4.490527153015137
I0123 12:08:57.635144 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:08:57.635229 140455392419840 alphageometry.py:566] LM output (score=-1.865478): "o : C a c o 21 D a o c o 22 ;"
I0123 12:08:57.635265 140455392419840 alphageometry.py:567] Translation: "o = on_line o a c, on_bline o c a"

I0123 12:08:57.635303 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o a c, on_bline o c a ? perp c m m a"
I0123 12:08:57.635502 140455392419840 graph.py:498] 
I0123 12:08:57.635574 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o a c, on_bline o c a ? perp c m m a
I0123 12:08:59.869452 140455392419840 ddar.py:60] Depth 1/1000 time = 2.1798617839813232
I0123 12:09:03.156664 140455392419840 ddar.py:60] Depth 2/1000 time = 3.286975383758545
I0123 12:09:06.813673 140455392419840 ddar.py:60] Depth 3/1000 time = 3.6567463874816895
I0123 12:09:10.600255 140455392419840 ddar.py:60] Depth 4/1000 time = 3.7863335609436035
I0123 12:09:14.429392 140455392419840 ddar.py:60] Depth 5/1000 time = 3.8288698196411133
I0123 12:09:18.217079 140455392419840 ddar.py:60] Depth 6/1000 time = 3.7874226570129395
I0123 12:09:22.926230 140455392419840 ddar.py:60] Depth 7/1000 time = 4.708528280258179
I0123 12:09:27.061820 140455392419840 ddar.py:60] Depth 8/1000 time = 4.1206214427948
I0123 12:09:31.271789 140455392419840 ddar.py:60] Depth 9/1000 time = 4.20972752571106
I0123 12:09:35.523322 140455392419840 ddar.py:60] Depth 10/1000 time = 4.251275062561035
I0123 12:09:35.551535 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:09:35.551618 140455392419840 alphageometry.py:566] LM output (score=-1.899446): "o : C k l o 21 D k o l o 22 ;"
I0123 12:09:35.551653 140455392419840 alphageometry.py:567] Translation: "o = on_line o k l, on_bline o l k"

I0123 12:09:35.551698 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o k l, on_bline o l k ? perp c m m a"
I0123 12:09:35.551893 140455392419840 graph.py:498] 
I0123 12:09:35.551967 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o k l, on_bline o l k ? perp c m m a
I0123 12:09:37.931058 140455392419840 ddar.py:60] Depth 1/1000 time = 2.3224191665649414
I0123 12:09:41.267895 140455392419840 ddar.py:60] Depth 2/1000 time = 3.3364663124084473
I0123 12:09:45.773447 140455392419840 ddar.py:60] Depth 3/1000 time = 4.50527024269104
I0123 12:09:49.427650 140455392419840 ddar.py:60] Depth 4/1000 time = 3.6539254188537598
I0123 12:09:53.057701 140455392419840 ddar.py:60] Depth 5/1000 time = 3.62971568107605
I0123 12:09:57.653586 140455392419840 ddar.py:60] Depth 6/1000 time = 4.594481945037842
I0123 12:10:01.587084 140455392419840 ddar.py:60] Depth 7/1000 time = 3.9207303524017334
I0123 12:10:06.621175 140455392419840 ddar.py:60] Depth 8/1000 time = 5.033806085586548
I0123 12:10:10.740792 140455392419840 ddar.py:60] Depth 9/1000 time = 4.119305372238159
I0123 12:10:10.763243 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:10:10.763314 140455392419840 alphageometry.py:566] LM output (score=-1.920517): "o : C d k o 21 D d o k o 22 ;"
I0123 12:10:10.763350 140455392419840 alphageometry.py:567] Translation: "o = on_line o d k, on_bline o k d"

I0123 12:10:10.763394 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o d k, on_bline o k d ? perp c m m a"
I0123 12:10:10.763585 140455392419840 graph.py:498] 
I0123 12:10:10.763655 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o d k, on_bline o k d ? perp c m m a
I0123 12:10:13.046051 140455392419840 ddar.py:60] Depth 1/1000 time = 2.2281956672668457
I0123 12:10:16.392362 140455392419840 ddar.py:60] Depth 2/1000 time = 3.346085786819458
I0123 12:10:19.079835 140455392419840 ddar.py:60] Depth 3/1000 time = 2.6872313022613525
I0123 12:10:23.771794 140455392419840 ddar.py:60] Depth 4/1000 time = 4.69169807434082
I0123 12:10:27.596722 140455392419840 ddar.py:60] Depth 5/1000 time = 3.824660539627075
I0123 12:10:31.388427 140455392419840 ddar.py:60] Depth 6/1000 time = 3.7910938262939453
I0123 12:10:35.457331 140455392419840 ddar.py:60] Depth 7/1000 time = 4.054452657699585
I0123 12:10:39.617472 140455392419840 ddar.py:60] Depth 8/1000 time = 4.159903049468994
I0123 12:10:43.801548 140455392419840 ddar.py:60] Depth 9/1000 time = 4.183791875839233
I0123 12:10:43.827533 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:10:43.827605 140455392419840 alphageometry.py:566] LM output (score=-2.266887): "o : C n l o 21 D n l n o 22 ;"
I0123 12:10:43.827641 140455392419840 alphageometry.py:567] Translation: "o = on_line o n l, on_circle o n l"

I0123 12:10:43.827677 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o n l, on_circle o n l ? perp c m m a"
I0123 12:10:43.827870 140455392419840 graph.py:498] 
I0123 12:10:43.827939 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o n l, on_circle o n l ? perp c m m a
I0123 12:10:46.135633 140455392419840 ddar.py:60] Depth 1/1000 time = 2.253605604171753
I0123 12:10:49.766931 140455392419840 ddar.py:60] Depth 2/1000 time = 3.6310462951660156
I0123 12:10:53.738518 140455392419840 ddar.py:60] Depth 3/1000 time = 3.9713029861450195
I0123 12:10:57.762219 140455392419840 ddar.py:60] Depth 4/1000 time = 4.023381471633911
I0123 12:11:01.757687 140455392419840 ddar.py:60] Depth 5/1000 time = 3.9951486587524414
I0123 12:11:05.737718 140455392419840 ddar.py:60] Depth 6/1000 time = 3.9793574810028076
I0123 12:11:10.952119 140455392419840 ddar.py:60] Depth 7/1000 time = 5.2003254890441895
I0123 12:11:15.346185 140455392419840 ddar.py:60] Depth 8/1000 time = 4.393785715103149
I0123 12:11:19.721895 140455392419840 ddar.py:60] Depth 9/1000 time = 4.375386476516724
I0123 12:11:19.742399 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:11:19.742467 140455392419840 alphageometry.py:566] LM output (score=-2.434093): "o : C e k o 21 D e o k o 22 ;"
I0123 12:11:19.742504 140455392419840 alphageometry.py:567] Translation: "o = on_line o e k, on_bline o k e"

I0123 12:11:19.742541 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o e k, on_bline o k e ? perp c m m a"
I0123 12:11:19.742725 140455392419840 graph.py:498] 
I0123 12:11:19.742793 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o e k, on_bline o k e ? perp c m m a
I0123 12:11:22.038078 140455392419840 ddar.py:60] Depth 1/1000 time = 2.2384982109069824
I0123 12:11:24.290799 140455392419840 ddar.py:60] Depth 2/1000 time = 2.2525057792663574
I0123 12:11:28.850198 140455392419840 ddar.py:60] Depth 3/1000 time = 4.559174060821533
I0123 12:11:31.521707 140455392419840 ddar.py:60] Depth 4/1000 time = 2.671243667602539
I0123 12:11:36.153844 140455392419840 ddar.py:60] Depth 5/1000 time = 4.631840944290161
I0123 12:11:39.848638 140455392419840 ddar.py:60] Depth 6/1000 time = 3.69415283203125
I0123 12:11:43.898663 140455392419840 ddar.py:60] Depth 7/1000 time = 4.035423040390015
I0123 12:11:48.026743 140455392419840 ddar.py:60] Depth 8/1000 time = 4.127837419509888
I0123 12:11:52.128146 140455392419840 ddar.py:60] Depth 9/1000 time = 4.101139545440674
I0123 12:11:52.153811 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:11:52.153887 140455392419840 alphageometry.py:566] LM output (score=-2.481755): "o : C b k o 21 D b o k o 22 ;"
I0123 12:11:52.153925 140455392419840 alphageometry.py:567] Translation: "o = on_line o b k, on_bline o k b"

I0123 12:11:52.153962 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o b k, on_bline o k b ? perp c m m a"
I0123 12:11:52.154146 140455392419840 graph.py:498] 
I0123 12:11:52.154211 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o b k, on_bline o k b ? perp c m m a
I0123 12:11:53.603615 140455392419840 ddar.py:60] Depth 1/1000 time = 1.3941540718078613
I0123 12:11:58.401133 140455392419840 ddar.py:60] Depth 2/1000 time = 4.797302484512329
I0123 12:12:03.198644 140455392419840 ddar.py:60] Depth 3/1000 time = 4.797216415405273
I0123 12:12:08.964403 140455392419840 ddar.py:60] Depth 4/1000 time = 5.765406847000122
I0123 12:12:14.809224 140455392419840 ddar.py:60] Depth 5/1000 time = 5.844526529312134
I0123 12:12:19.635781 140455392419840 ddar.py:60] Depth 6/1000 time = 4.825934410095215
I0123 12:12:25.793612 140455392419840 ddar.py:60] Depth 7/1000 time = 6.142589569091797
I0123 12:12:32.123556 140455392419840 ddar.py:60] Depth 8/1000 time = 6.329699516296387
I0123 12:12:38.552958 140455392419840 ddar.py:60] Depth 9/1000 time = 6.429142475128174
I0123 12:12:38.581624 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:12:38.581709 140455392419840 alphageometry.py:566] LM output (score=-2.513580): "o : C n m o 21 D n o m o 22 ;"
I0123 12:12:38.581747 140455392419840 alphageometry.py:567] Translation: "o = on_line o n m, on_bline o m n"

I0123 12:12:38.581786 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o n m, on_bline o m n ? perp c m m a"
I0123 12:12:38.581985 140455392419840 graph.py:498] 
I0123 12:12:38.582060 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o n m, on_bline o m n ? perp c m m a
I0123 12:12:40.965052 140455392419840 ddar.py:60] Depth 1/1000 time = 2.3254752159118652
I0123 12:12:44.160112 140455392419840 ddar.py:60] Depth 2/1000 time = 3.1948060989379883
I0123 12:12:47.599269 140455392419840 ddar.py:60] Depth 3/1000 time = 3.4389004707336426
I0123 12:12:51.093493 140455392419840 ddar.py:60] Depth 4/1000 time = 3.4939770698547363
I0123 12:12:54.589471 140455392419840 ddar.py:60] Depth 5/1000 time = 3.495699167251587
I0123 12:12:59.076304 140455392419840 ddar.py:60] Depth 6/1000 time = 4.485497236251831
I0123 12:13:02.878019 140455392419840 ddar.py:60] Depth 7/1000 time = 3.789170503616333
I0123 12:13:06.768497 140455392419840 ddar.py:60] Depth 8/1000 time = 3.890242099761963
I0123 12:13:10.627678 140455392419840 ddar.py:60] Depth 9/1000 time = 3.8589274883270264
I0123 12:13:10.646078 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:13:10.646179 140455392419840 alphageometry.py:566] LM output (score=-2.568891): "o : C a k o 21 D a o k o 22 ;"
I0123 12:13:10.646219 140455392419840 alphageometry.py:567] Translation: "o = on_line o a k, on_bline o k a"

I0123 12:13:10.646259 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o a k, on_bline o k a ? perp c m m a"
I0123 12:13:10.646449 140455392419840 graph.py:498] 
I0123 12:13:10.646517 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o a k, on_bline o k a ? perp c m m a
I0123 12:13:12.878290 140455392419840 ddar.py:60] Depth 1/1000 time = 2.176786422729492
I0123 12:13:16.161227 140455392419840 ddar.py:60] Depth 2/1000 time = 3.2826714515686035
I0123 12:13:19.803492 140455392419840 ddar.py:60] Depth 3/1000 time = 3.6419339179992676
I0123 12:13:23.589480 140455392419840 ddar.py:60] Depth 4/1000 time = 3.785585641860962
I0123 12:13:27.421895 140455392419840 ddar.py:60] Depth 5/1000 time = 3.832073211669922
I0123 12:13:31.236157 140455392419840 ddar.py:60] Depth 6/1000 time = 3.813549518585205
I0123 12:13:35.325831 140455392419840 ddar.py:60] Depth 7/1000 time = 4.0753960609436035
I0123 12:13:39.494512 140455392419840 ddar.py:60] Depth 8/1000 time = 4.168392181396484
I0123 12:13:44.661972 140455392419840 ddar.py:60] Depth 9/1000 time = 5.1671302318573
I0123 12:13:44.688224 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:13:44.688299 140455392419840 alphageometry.py:566] LM output (score=-2.720444): "o : C j m o 21 D j o m o 22 ;"
I0123 12:13:44.688335 140455392419840 alphageometry.py:567] Translation: "o = on_line o j m, on_bline o m j"

I0123 12:13:44.688372 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o j m, on_bline o m j ? perp c m m a"
I0123 12:13:44.688557 140455392419840 graph.py:498] 
I0123 12:13:44.688621 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o j m, on_bline o m j ? perp c m m a
I0123 12:13:45.976302 140455392419840 ddar.py:60] Depth 1/1000 time = 1.2331881523132324
I0123 12:13:49.166026 140455392419840 ddar.py:60] Depth 2/1000 time = 3.1894991397857666
I0123 12:13:52.641358 140455392419840 ddar.py:60] Depth 3/1000 time = 3.4751060009002686
I0123 12:13:56.215960 140455392419840 ddar.py:60] Depth 4/1000 time = 3.5743629932403564
I0123 12:13:59.814968 140455392419840 ddar.py:60] Depth 5/1000 time = 3.5987281799316406
I0123 12:14:03.396072 140455392419840 ddar.py:60] Depth 6/1000 time = 3.5804765224456787
I0123 12:14:07.236562 140455392419840 ddar.py:60] Depth 7/1000 time = 3.82621431350708
I0123 12:14:11.188944 140455392419840 ddar.py:60] Depth 8/1000 time = 3.952150583267212
I0123 12:14:15.128589 140455392419840 ddar.py:60] Depth 9/1000 time = 3.9393699169158936
I0123 12:14:15.149892 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:14:15.149969 140455392419840 alphageometry.py:566] LM output (score=-2.963880): "o : C f k o 21 D f o k o 22 ;"
I0123 12:14:15.150004 140455392419840 alphageometry.py:567] Translation: "o = on_line o f k, on_bline o k f"

I0123 12:14:15.150041 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o f k, on_bline o k f ? perp c m m a"
I0123 12:14:15.150234 140455392419840 graph.py:498] 
I0123 12:14:15.150307 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o f k, on_bline o k f ? perp c m m a
I0123 12:14:16.446515 140455392419840 ddar.py:60] Depth 1/1000 time = 1.2418417930603027
I0123 12:14:19.649600 140455392419840 ddar.py:60] Depth 2/1000 time = 3.2028751373291016
I0123 12:14:23.176071 140455392419840 ddar.py:60] Depth 3/1000 time = 3.5262343883514404
I0123 12:14:27.918250 140455392419840 ddar.py:60] Depth 4/1000 time = 4.741954565048218
I0123 12:14:30.624902 140455392419840 ddar.py:60] Depth 5/1000 time = 2.706387996673584
I0123 12:14:35.392994 140455392419840 ddar.py:60] Depth 6/1000 time = 4.767454147338867
I0123 12:14:38.420406 140455392419840 ddar.py:60] Depth 7/1000 time = 3.0127713680267334
I0123 12:14:43.567944 140455392419840 ddar.py:60] Depth 8/1000 time = 5.147318363189697
I0123 12:14:47.748245 140455392419840 ddar.py:60] Depth 9/1000 time = 4.180027484893799
I0123 12:14:47.775508 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:14:47.775587 140455392419840 alphageometry.py:566] LM output (score=-3.033003): "o : C b g o 21 D b o g o 22 ;"
I0123 12:14:47.775623 140455392419840 alphageometry.py:567] Translation: "o = on_line o b g, on_bline o g b"

I0123 12:14:47.775669 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o b g, on_bline o g b ? perp c m m a"
I0123 12:14:47.775861 140455392419840 graph.py:498] 
I0123 12:14:47.775933 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o b g, on_bline o g b ? perp c m m a
I0123 12:14:50.289091 140455392419840 ddar.py:60] Depth 1/1000 time = 2.453171968460083
I0123 12:14:54.075655 140455392419840 ddar.py:60] Depth 2/1000 time = 3.7863428592681885
I0123 12:14:58.638942 140455392419840 ddar.py:60] Depth 3/1000 time = 4.563066005706787
I0123 12:15:04.662363 140455392419840 ddar.py:60] Depth 4/1000 time = 6.023198366165161
I0123 12:15:10.915688 140455392419840 ddar.py:60] Depth 5/1000 time = 6.253080129623413
I0123 12:15:17.183834 140455392419840 ddar.py:60] Depth 6/1000 time = 6.267843723297119
I0123 12:15:22.393949 140455392419840 ddar.py:60] Depth 7/1000 time = 5.209489107131958
I0123 12:15:28.628523 140455392419840 ddar.py:60] Depth 8/1000 time = 6.1902570724487305
I0123 12:15:34.962930 140455392419840 ddar.py:60] Depth 9/1000 time = 6.3242268562316895
I0123 12:15:34.963198 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:15:34.963264 140455392419840 alphageometry.py:566] LM output (score=-3.063079): "o : C l n o 21 D l n n o 22 ;"
I0123 12:15:34.963485 140455392419840 alphageometry.py:567] Translation: "o = on_line o l n, on_circle o n l"

I0123 12:15:34.963526 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o l n, on_circle o n l ? perp c m m a"
I0123 12:15:34.963715 140455392419840 graph.py:498] 
I0123 12:15:34.963781 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o l n, on_circle o n l ? perp c m m a
I0123 12:15:36.295338 140455392419840 ddar.py:60] Depth 1/1000 time = 1.2712993621826172
I0123 12:15:39.970304 140455392419840 ddar.py:60] Depth 2/1000 time = 3.674710512161255
I0123 12:15:43.976600 140455392419840 ddar.py:60] Depth 3/1000 time = 4.006024122238159
I0123 12:15:48.025472 140455392419840 ddar.py:60] Depth 4/1000 time = 4.048544883728027
I0123 12:15:52.017865 140455392419840 ddar.py:60] Depth 5/1000 time = 3.9920666217803955
I0123 12:15:57.045628 140455392419840 ddar.py:60] Depth 6/1000 time = 5.0271313190460205
I0123 12:16:01.375123 140455392419840 ddar.py:60] Depth 7/1000 time = 4.314691543579102
I0123 12:16:05.769601 140455392419840 ddar.py:60] Depth 8/1000 time = 4.394186973571777
I0123 12:16:10.230277 140455392419840 ddar.py:60] Depth 9/1000 time = 4.4603400230407715
I0123 12:16:10.251435 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:16:10.251515 140455392419840 alphageometry.py:566] LM output (score=-3.073355): "o : C l n o 21 T l n m o 22 ;"
I0123 12:16:10.251553 140455392419840 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 12:16:10.251592 140455392419840 alphageometry.py:566] LM output (score=-3.111831): "o : C k n o 21 D k o n o 22 ;"
I0123 12:16:10.251621 140455392419840 alphageometry.py:567] Translation: "o = on_line o k n, on_bline o n k"

I0123 12:16:10.251652 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o k n, on_bline o n k ? perp c m m a"
I0123 12:16:10.251838 140455392419840 graph.py:498] 
I0123 12:16:10.251906 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o k n, on_bline o n k ? perp c m m a
I0123 12:16:12.714270 140455392419840 ddar.py:60] Depth 1/1000 time = 2.4046590328216553
I0123 12:16:16.076601 140455392419840 ddar.py:60] Depth 2/1000 time = 3.3621103763580322
I0123 12:16:19.704927 140455392419840 ddar.py:60] Depth 3/1000 time = 3.6280481815338135
I0123 12:16:23.423451 140455392419840 ddar.py:60] Depth 4/1000 time = 3.718161106109619
I0123 12:16:28.135594 140455392419840 ddar.py:60] Depth 5/1000 time = 4.711832284927368
I0123 12:16:31.894651 140455392419840 ddar.py:60] Depth 6/1000 time = 3.7577154636383057
I0123 12:16:35.919592 140455392419840 ddar.py:60] Depth 7/1000 time = 4.012937784194946
I0123 12:16:40.042645 140455392419840 ddar.py:60] Depth 8/1000 time = 4.122824192047119
I0123 12:16:44.142235 140455392419840 ddar.py:60] Depth 9/1000 time = 4.099331617355347
I0123 12:16:44.164473 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:16:44.164552 140455392419840 alphageometry.py:566] LM output (score=-3.164181): "o : C n l o 21 D n o l o 22 ;"
I0123 12:16:44.164588 140455392419840 alphageometry.py:567] Translation: "o = on_line o n l, on_bline o l n"

I0123 12:16:44.164627 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o n l, on_bline o l n ? perp c m m a"
I0123 12:16:44.164839 140455392419840 graph.py:498] 
I0123 12:16:44.164905 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o n l, on_bline o l n ? perp c m m a
I0123 12:16:46.419825 140455392419840 ddar.py:60] Depth 1/1000 time = 2.19287371635437
I0123 12:16:49.537762 140455392419840 ddar.py:60] Depth 2/1000 time = 3.1177103519439697
I0123 12:16:52.961627 140455392419840 ddar.py:60] Depth 3/1000 time = 3.4236433506011963
I0123 12:16:56.446905 140455392419840 ddar.py:60] Depth 4/1000 time = 3.485039234161377
I0123 12:16:59.916221 140455392419840 ddar.py:60] Depth 5/1000 time = 3.4690513610839844
I0123 12:17:03.399660 140455392419840 ddar.py:60] Depth 6/1000 time = 3.48283052444458
I0123 12:17:07.227471 140455392419840 ddar.py:60] Depth 7/1000 time = 3.815580368041992
I0123 12:17:11.079080 140455392419840 ddar.py:60] Depth 8/1000 time = 3.8513646125793457
I0123 12:17:14.934606 140455392419840 ddar.py:60] Depth 9/1000 time = 3.8552632331848145
I0123 12:17:14.953231 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:17:14.953306 140455392419840 alphageometry.py:566] LM output (score=-3.271768): "o : C n k o 21 D n o k o 22 ;"
I0123 12:17:14.953341 140455392419840 alphageometry.py:567] Translation: "o = on_line o n k, on_bline o k n"

I0123 12:17:14.953379 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o n k, on_bline o k n ? perp c m m a"
I0123 12:17:14.953563 140455392419840 graph.py:498] 
I0123 12:17:14.953633 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o n k, on_bline o k n ? perp c m m a
I0123 12:17:17.431557 140455392419840 ddar.py:60] Depth 1/1000 time = 2.4201419353485107
I0123 12:17:20.780899 140455392419840 ddar.py:60] Depth 2/1000 time = 3.3491291999816895
I0123 12:17:24.439654 140455392419840 ddar.py:60] Depth 3/1000 time = 3.6585237979888916
I0123 12:17:28.207638 140455392419840 ddar.py:60] Depth 4/1000 time = 3.7675564289093018
I0123 12:17:31.949866 140455392419840 ddar.py:60] Depth 5/1000 time = 3.7419497966766357
I0123 12:17:36.714102 140455392419840 ddar.py:60] Depth 6/1000 time = 4.762758016586304
I0123 12:17:40.783751 140455392419840 ddar.py:60] Depth 7/1000 time = 4.057347059249878
I0123 12:17:44.880322 140455392419840 ddar.py:60] Depth 8/1000 time = 4.096336841583252
I0123 12:17:50.037785 140455392419840 ddar.py:60] Depth 9/1000 time = 5.1572041511535645
I0123 12:17:50.061366 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:17:50.061461 140455392419840 alphageometry.py:566] LM output (score=-3.277845): "o : C m k o 21 D m o k o 22 ;"
I0123 12:17:50.061498 140455392419840 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 12:17:50.061557 140455392419840 alphageometry.py:566] LM output (score=-3.284838): "o : C h m o 21 D h o m o 22 ;"
I0123 12:17:50.061586 140455392419840 alphageometry.py:567] Translation: "o = on_line o h m, on_bline o m h"

I0123 12:17:50.061618 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o h m, on_bline o m h ? perp c m m a"
I0123 12:17:50.061816 140455392419840 graph.py:498] 
I0123 12:17:50.061887 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o h m, on_bline o m h ? perp c m m a
I0123 12:17:51.353492 140455392419840 ddar.py:60] Depth 1/1000 time = 1.2362077236175537
I0123 12:17:54.588052 140455392419840 ddar.py:60] Depth 2/1000 time = 3.2343406677246094
I0123 12:17:58.064997 140455392419840 ddar.py:60] Depth 3/1000 time = 3.476714611053467
I0123 12:18:01.676145 140455392419840 ddar.py:60] Depth 4/1000 time = 3.610905170440674
I0123 12:18:05.332543 140455392419840 ddar.py:60] Depth 5/1000 time = 3.6561150550842285
I0123 12:18:07.885831 140455392419840 ddar.py:60] Depth 6/1000 time = 2.5525803565979004
I0123 12:18:12.894059 140455392419840 ddar.py:60] Depth 7/1000 time = 4.99298882484436
I0123 12:18:15.851293 140455392419840 ddar.py:60] Depth 8/1000 time = 2.9570088386535645
I0123 12:18:20.869926 140455392419840 ddar.py:60] Depth 9/1000 time = 5.018374681472778
I0123 12:18:20.894043 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:18:20.894124 140455392419840 alphageometry.py:566] LM output (score=-3.309244): "o : C g m o 21 D g o m o 22 ;"
I0123 12:18:20.894161 140455392419840 alphageometry.py:567] Translation: "o = on_line o g m, on_bline o m g"

I0123 12:18:20.894206 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o g m, on_bline o m g ? perp c m m a"
I0123 12:18:20.894394 140455392419840 graph.py:498] 
I0123 12:18:20.894467 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o g m, on_bline o m g ? perp c m m a
I0123 12:18:22.186477 140455392419840 ddar.py:60] Depth 1/1000 time = 1.2369358539581299
I0123 12:18:25.388508 140455392419840 ddar.py:60] Depth 2/1000 time = 3.2018089294433594
I0123 12:18:28.869107 140455392419840 ddar.py:60] Depth 3/1000 time = 3.4803826808929443
I0123 12:18:32.494163 140455392419840 ddar.py:60] Depth 4/1000 time = 3.6248183250427246
I0123 12:18:36.134603 140455392419840 ddar.py:60] Depth 5/1000 time = 3.640170097351074
I0123 12:18:38.685351 140455392419840 ddar.py:60] Depth 6/1000 time = 2.550154209136963
I0123 12:18:43.609781 140455392419840 ddar.py:60] Depth 7/1000 time = 4.910302400588989
I0123 12:18:46.551623 140455392419840 ddar.py:60] Depth 8/1000 time = 2.941450595855713
I0123 12:18:51.652729 140455392419840 ddar.py:60] Depth 9/1000 time = 5.1008055210113525
I0123 12:18:51.675544 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:18:51.675619 140455392419840 alphageometry.py:566] LM output (score=-3.426619): "o : C m n o 21 D m o n o 22 ;"
I0123 12:18:51.675657 140455392419840 alphageometry.py:567] Translation: "o = on_line o m n, on_bline o n m"

I0123 12:18:51.675696 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o m n, on_bline o n m ? perp c m m a"
I0123 12:18:51.675893 140455392419840 graph.py:498] 
I0123 12:18:51.675966 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o m n, on_bline o n m ? perp c m m a
I0123 12:18:53.084604 140455392419840 ddar.py:60] Depth 1/1000 time = 1.3508920669555664
I0123 12:18:56.284955 140455392419840 ddar.py:60] Depth 2/1000 time = 3.200139284133911
I0123 12:19:00.817560 140455392419840 ddar.py:60] Depth 3/1000 time = 4.5323827266693115
I0123 12:19:04.415249 140455392419840 ddar.py:60] Depth 4/1000 time = 3.597442626953125
I0123 12:19:07.999518 140455392419840 ddar.py:60] Depth 5/1000 time = 3.5840084552764893
I0123 12:19:11.620158 140455392419840 ddar.py:60] Depth 6/1000 time = 3.61934494972229
I0123 12:19:15.552411 140455392419840 ddar.py:60] Depth 7/1000 time = 3.9203343391418457
I0123 12:19:19.518971 140455392419840 ddar.py:60] Depth 8/1000 time = 3.9662768840789795
I0123 12:19:24.541479 140455392419840 ddar.py:60] Depth 9/1000 time = 5.022095680236816
I0123 12:19:24.560830 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:19:24.560904 140455392419840 alphageometry.py:566] LM output (score=-3.519208): "o : C l n o 21 D l p n p 22 ;"
I0123 12:19:24.560940 140455392419840 alphageometry.py:567] Translation: "ERROR: o not found in predicate args."

I0123 12:19:24.560974 140455392419840 alphageometry.py:566] LM output (score=-3.561211): "o : C i m o 21 D i o m o 22 ;"
I0123 12:19:24.561000 140455392419840 alphageometry.py:567] Translation: "o = on_line o i m, on_bline o m i"

I0123 12:19:24.561029 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o i m, on_bline o m i ? perp c m m a"
I0123 12:19:24.561221 140455392419840 graph.py:498] 
I0123 12:19:24.561290 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o i m, on_bline o m i ? perp c m m a
I0123 12:19:26.003378 140455392419840 ddar.py:60] Depth 1/1000 time = 1.3861446380615234
I0123 12:19:30.517528 140455392419840 ddar.py:60] Depth 2/1000 time = 4.513926267623901
I0123 12:19:34.229966 140455392419840 ddar.py:60] Depth 3/1000 time = 3.712212562561035
I0123 12:19:38.056954 140455392419840 ddar.py:60] Depth 4/1000 time = 3.8267338275909424
I0123 12:19:41.867847 140455392419840 ddar.py:60] Depth 5/1000 time = 3.8106229305267334
I0123 12:19:45.692427 140455392419840 ddar.py:60] Depth 6/1000 time = 3.823993682861328
I0123 12:19:50.875391 140455392419840 ddar.py:60] Depth 7/1000 time = 5.169376850128174
I0123 12:19:55.164413 140455392419840 ddar.py:60] Depth 8/1000 time = 4.288762331008911
I0123 12:19:59.397063 140455392419840 ddar.py:60] Depth 9/1000 time = 4.232330083847046
I0123 12:19:59.419025 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:19:59.419100 140455392419840 alphageometry.py:566] LM output (score=-3.661140): "o : C l m o 21 D l p m p 22 ;"
I0123 12:19:59.419137 140455392419840 alphageometry.py:567] Translation: "ERROR: o not found in predicate args."

I0123 12:19:59.419171 140455392419840 alphageometry.py:566] LM output (score=-3.727327): "o : C l n o 21 T k o l n 22 ;"
I0123 12:19:59.419199 140455392419840 alphageometry.py:567] Translation: "o = on_line o l n, on_tline o k l n"

I0123 12:19:59.419238 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o l n, on_tline o k l n ? perp c m m a"
I0123 12:19:59.419435 140455392419840 graph.py:498] 
I0123 12:19:59.419507 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n k m, on_bline n m k; o = on_line o l n, on_tline o k l n ? perp c m m a
I0123 12:20:01.721666 140455392419840 ddar.py:60] Depth 1/1000 time = 2.257077217102051
I0123 12:20:03.798587 140455392419840 ddar.py:60] Depth 2/1000 time = 2.076690435409546
I0123 12:20:07.170998 140455392419840 ddar.py:60] Depth 3/1000 time = 3.3721940517425537
I0123 12:20:10.658799 140455392419840 ddar.py:60] Depth 4/1000 time = 3.4875597953796387
I0123 12:20:14.156397 140455392419840 ddar.py:60] Depth 5/1000 time = 3.4973244667053223
I0123 12:20:17.625715 140455392419840 ddar.py:60] Depth 6/1000 time = 3.468794107437134
I0123 12:20:22.435560 140455392419840 ddar.py:60] Depth 7/1000 time = 4.797515153884888
I0123 12:20:26.424116 140455392419840 ddar.py:60] Depth 8/1000 time = 3.9882419109344482
I0123 12:20:30.388763 140455392419840 ddar.py:60] Depth 9/1000 time = 3.9642536640167236
I0123 12:20:30.407778 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:20:30.407867 140455392419840 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C b c d 00 D b d c d 01 ; e : C a d e 02 T a c c e 03 ; f : C c e f 04 T c d d f 05 ; g : C a b g 06 D b f f g 07 ; h : C c d h 08 ; i : D b i g i 09 D g i h i 10 ; j : C c g j 11 D g i i j 12 ; k : C b j k 13 C g h k 14 ; l : C c k l 15 D c l k l 16 ; m : C a l m 17 C c i m 18 ? T c m m a {F1} x00 n : C c d n 19 D c n d n 20 ; x00
I0123 12:20:38.895740 140455392419840 alphageometry.py:566] LM output (score=-0.076974): "o : C d k o 21 D d o k o 22 ;"
I0123 12:20:38.896078 140455392419840 alphageometry.py:567] Translation: "o = on_line o d k, on_bline o k d"

I0123 12:20:38.896140 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c d, on_bline n d c; o = on_line o d k, on_bline o k d ? perp c m m a"
I0123 12:20:38.896358 140455392419840 graph.py:498] 
I0123 12:20:38.896430 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c d, on_bline n d c; o = on_line o d k, on_bline o k d ? perp c m m a
I0123 12:20:41.788867 140455392419840 ddar.py:60] Depth 1/1000 time = 2.829119920730591
I0123 12:20:47.184257 140455392419840 ddar.py:60] Depth 2/1000 time = 5.395188093185425
I0123 12:20:52.274209 140455392419840 ddar.py:60] Depth 3/1000 time = 5.089728593826294
I0123 12:20:58.609534 140455392419840 ddar.py:60] Depth 4/1000 time = 6.335073947906494
I0123 12:21:04.893698 140455392419840 ddar.py:60] Depth 5/1000 time = 6.283859014511108
I0123 12:21:11.156006 140455392419840 ddar.py:60] Depth 6/1000 time = 6.260964393615723
I0123 12:21:17.748161 140455392419840 ddar.py:60] Depth 7/1000 time = 6.577867269515991
I0123 12:21:25.683102 140455392419840 ddar.py:60] Depth 8/1000 time = 7.9345316886901855
I0123 12:21:31.410634 140455392419840 ddar.py:60] Depth 9/1000 time = 5.727125883102417
I0123 12:21:31.433605 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:21:31.433686 140455392419840 alphageometry.py:566] LM output (score=-1.836577): "o : C k l o 21 D k o l o 22 ;"
I0123 12:21:31.433726 140455392419840 alphageometry.py:567] Translation: "o = on_line o k l, on_bline o l k"

I0123 12:21:31.433771 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c d, on_bline n d c; o = on_line o k l, on_bline o l k ? perp c m m a"
I0123 12:21:31.433967 140455392419840 graph.py:498] 
I0123 12:21:31.434037 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c d, on_bline n d c; o = on_line o k l, on_bline o l k ? perp c m m a
I0123 12:21:35.413439 140455392419840 ddar.py:60] Depth 1/1000 time = 3.9171457290649414
I0123 12:21:40.415956 140455392419840 ddar.py:60] Depth 2/1000 time = 5.002278566360474
I0123 12:21:45.676021 140455392419840 ddar.py:60] Depth 3/1000 time = 5.259825706481934
I0123 12:21:51.037636 140455392419840 ddar.py:60] Depth 4/1000 time = 5.361330270767212
I0123 12:21:56.464427 140455392419840 ddar.py:60] Depth 5/1000 time = 5.426386117935181
I0123 12:22:01.793066 140455392419840 ddar.py:60] Depth 6/1000 time = 5.326807737350464
I0123 12:22:07.493972 140455392419840 ddar.py:60] Depth 7/1000 time = 5.689032077789307
I0123 12:22:13.315922 140455392419840 ddar.py:60] Depth 8/1000 time = 5.8216023445129395
I0123 12:22:20.205621 140455392419840 ddar.py:60] Depth 9/1000 time = 6.889466285705566
I0123 12:22:20.224500 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:22:20.224627 140455392419840 alphageometry.py:566] LM output (score=-1.993891): "o : C k m o 21 D k o m o 22 ;"
I0123 12:22:20.224667 140455392419840 alphageometry.py:567] Translation: "o = on_line o k m, on_bline o m k"

I0123 12:22:20.224705 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c d, on_bline n d c; o = on_line o k m, on_bline o m k ? perp c m m a"
I0123 12:22:20.224920 140455392419840 graph.py:498] 
I0123 12:22:20.224993 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c d, on_bline n d c; o = on_line o k m, on_bline o m k ? perp c m m a
I0123 12:22:23.004013 140455392419840 ddar.py:60] Depth 1/1000 time = 2.717703104019165
I0123 12:22:26.818239 140455392419840 ddar.py:60] Depth 2/1000 time = 3.813955307006836
I0123 12:22:32.053815 140455392419840 ddar.py:60] Depth 3/1000 time = 5.235217094421387
I0123 12:22:37.386572 140455392419840 ddar.py:60] Depth 4/1000 time = 5.3324902057647705
I0123 12:22:41.605536 140455392419840 ddar.py:60] Depth 5/1000 time = 4.218669414520264
I0123 12:22:46.909627 140455392419840 ddar.py:60] Depth 6/1000 time = 5.302753686904907
I0123 12:22:52.639127 140455392419840 ddar.py:60] Depth 7/1000 time = 5.716739892959595
I0123 12:22:58.454428 140455392419840 ddar.py:60] Depth 8/1000 time = 5.814957857131958
I0123 12:23:04.265722 140455392419840 ddar.py:60] Depth 9/1000 time = 5.810977935791016
I0123 12:23:04.287731 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:23:04.287832 140455392419840 alphageometry.py:566] LM output (score=-2.108766): "o : C i k o 21 D i o k o 22 ;"
I0123 12:23:04.287872 140455392419840 alphageometry.py:567] Translation: "o = on_line o i k, on_bline o k i"

I0123 12:23:04.287910 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c d, on_bline n d c; o = on_line o i k, on_bline o k i ? perp c m m a"
I0123 12:23:04.288106 140455392419840 graph.py:498] 
I0123 12:23:04.288178 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c d, on_bline n d c; o = on_line o i k, on_bline o k i ? perp c m m a
I0123 12:23:07.050107 140455392419840 ddar.py:60] Depth 1/1000 time = 2.7035109996795654
I0123 12:23:10.851167 140455392419840 ddar.py:60] Depth 2/1000 time = 3.800853967666626
I0123 12:23:16.075054 140455392419840 ddar.py:60] Depth 3/1000 time = 5.223670244216919
I0123 12:23:21.378081 140455392419840 ddar.py:60] Depth 4/1000 time = 5.302779197692871
I0123 12:23:26.983176 140455392419840 ddar.py:60] Depth 5/1000 time = 5.604809045791626
I0123 12:23:31.283425 140455392419840 ddar.py:60] Depth 6/1000 time = 4.298871994018555
I0123 12:23:36.925498 140455392419840 ddar.py:60] Depth 7/1000 time = 5.630094051361084
I0123 12:23:42.732539 140455392419840 ddar.py:60] Depth 8/1000 time = 5.806794881820679
I0123 12:23:48.581300 140455392419840 ddar.py:60] Depth 9/1000 time = 5.848487138748169
I0123 12:23:48.603599 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:23:48.603665 140455392419840 alphageometry.py:566] LM output (score=-2.276561): "o : C d g o 21 D d o g o 22 ;"
I0123 12:23:48.603701 140455392419840 alphageometry.py:567] Translation: "o = on_line o d g, on_bline o g d"

I0123 12:23:48.603737 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c d, on_bline n d c; o = on_line o d g, on_bline o g d ? perp c m m a"
I0123 12:23:48.603950 140455392419840 graph.py:498] 
I0123 12:23:48.604022 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c d, on_bline n d c; o = on_line o d g, on_bline o g d ? perp c m m a
I0123 12:23:51.397316 140455392419840 ddar.py:60] Depth 1/1000 time = 2.733877420425415
I0123 12:23:55.168085 140455392419840 ddar.py:60] Depth 2/1000 time = 3.7705447673797607
I0123 12:24:00.453139 140455392419840 ddar.py:60] Depth 3/1000 time = 5.284781217575073
I0123 12:24:05.862534 140455392419840 ddar.py:60] Depth 4/1000 time = 5.40904426574707
I0123 12:24:11.383551 140455392419840 ddar.py:60] Depth 5/1000 time = 5.52068305015564
I0123 12:24:15.717905 140455392419840 ddar.py:60] Depth 6/1000 time = 4.33296012878418
I0123 12:24:21.448683 140455392419840 ddar.py:60] Depth 7/1000 time = 5.717292785644531
I0123 12:24:27.341909 140455392419840 ddar.py:60] Depth 8/1000 time = 5.892983675003052
I0123 12:24:33.292213 140455392419840 ddar.py:60] Depth 9/1000 time = 5.950030565261841
I0123 12:24:33.316659 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:24:33.316743 140455392419840 alphageometry.py:566] LM output (score=-2.277901): "o : C g k o 21 D g o k o 22 ;"
I0123 12:24:33.316779 140455392419840 alphageometry.py:567] Translation: "o = on_line o g k, on_bline o k g"

I0123 12:24:33.316821 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c d, on_bline n d c; o = on_line o g k, on_bline o k g ? perp c m m a"
I0123 12:24:33.317010 140455392419840 graph.py:498] 
I0123 12:24:33.317078 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c d, on_bline n d c; o = on_line o g k, on_bline o k g ? perp c m m a
I0123 12:24:37.367342 140455392419840 ddar.py:60] Depth 1/1000 time = 3.990051507949829
I0123 12:24:42.706751 140455392419840 ddar.py:60] Depth 2/1000 time = 5.339125156402588
I0123 12:24:48.455889 140455392419840 ddar.py:60] Depth 3/1000 time = 5.748797655105591
I0123 12:24:54.496894 140455392419840 ddar.py:60] Depth 4/1000 time = 6.040755987167358
I0123 12:25:00.452154 140455392419840 ddar.py:60] Depth 5/1000 time = 5.954983711242676
I0123 12:25:07.612233 140455392419840 ddar.py:60] Depth 6/1000 time = 7.158673286437988
I0123 12:25:14.121914 140455392419840 ddar.py:60] Depth 7/1000 time = 6.4959328174591064
I0123 12:25:20.792819 140455392419840 ddar.py:60] Depth 8/1000 time = 6.670711517333984
I0123 12:25:28.632756 140455392419840 ddar.py:60] Depth 9/1000 time = 7.839691162109375
I0123 12:25:35.427853 140455392419840 ddar.py:60] Depth 10/1000 time = 6.769227027893066
I0123 12:25:35.432050 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:25:35.432137 140455392419840 alphageometry.py:566] LM output (score=-2.364032): "o : C h k o 21 D h o k o 22 ;"
I0123 12:25:35.432172 140455392419840 alphageometry.py:567] Translation: "o = on_line o h k, on_bline o k h"

I0123 12:25:35.432214 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c d, on_bline n d c; o = on_line o h k, on_bline o k h ? perp c m m a"
I0123 12:25:35.432435 140455392419840 graph.py:498] 
I0123 12:25:35.432505 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c d, on_bline n d c; o = on_line o h k, on_bline o k h ? perp c m m a
I0123 12:25:39.544526 140455392419840 ddar.py:60] Depth 1/1000 time = 4.053575277328491
I0123 12:25:44.944343 140455392419840 ddar.py:60] Depth 2/1000 time = 5.39951229095459
I0123 12:25:50.692600 140455392419840 ddar.py:60] Depth 3/1000 time = 5.748009204864502
I0123 12:25:56.567446 140455392419840 ddar.py:60] Depth 4/1000 time = 5.874624252319336
I0123 12:26:02.420060 140455392419840 ddar.py:60] Depth 5/1000 time = 5.8523619174957275
I0123 12:26:09.449110 140455392419840 ddar.py:60] Depth 6/1000 time = 7.027693748474121
I0123 12:26:15.721352 140455392419840 ddar.py:60] Depth 7/1000 time = 6.258044004440308
I0123 12:26:22.247423 140455392419840 ddar.py:60] Depth 8/1000 time = 6.525824069976807
I0123 12:26:29.894647 140455392419840 ddar.py:60] Depth 9/1000 time = 7.646939992904663
I0123 12:26:29.920547 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:26:29.920614 140455392419840 alphageometry.py:566] LM output (score=-2.370852): "o : C e k o 21 D e o k o 22 ;"
I0123 12:26:29.920650 140455392419840 alphageometry.py:567] Translation: "o = on_line o e k, on_bline o k e"

I0123 12:26:29.920690 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c d, on_bline n d c; o = on_line o e k, on_bline o k e ? perp c m m a"
I0123 12:26:29.920872 140455392419840 graph.py:498] 
I0123 12:26:29.920935 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c d, on_bline n d c; o = on_line o e k, on_bline o k e ? perp c m m a
I0123 12:26:32.724500 140455392419840 ddar.py:60] Depth 1/1000 time = 2.7452809810638428
I0123 12:26:36.540164 140455392419840 ddar.py:60] Depth 2/1000 time = 3.815438985824585
I0123 12:26:41.867606 140455392419840 ddar.py:60] Depth 3/1000 time = 5.327203273773193
I0123 12:26:46.111327 140455392419840 ddar.py:60] Depth 4/1000 time = 4.243462562561035
I0123 12:26:51.425711 140455392419840 ddar.py:60] Depth 5/1000 time = 5.3140904903411865
I0123 12:26:56.788517 140455392419840 ddar.py:60] Depth 6/1000 time = 5.361473321914673
I0123 12:27:02.594489 140455392419840 ddar.py:60] Depth 7/1000 time = 5.792936325073242
I0123 12:27:07.435787 140455392419840 ddar.py:60] Depth 8/1000 time = 4.841068983078003
I0123 12:27:13.334504 140455392419840 ddar.py:60] Depth 9/1000 time = 5.898435115814209
I0123 12:27:13.357292 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:27:13.357368 140455392419840 alphageometry.py:566] LM output (score=-2.428546): "o : C j k o 21 D j o k o 22 ;"
I0123 12:27:13.357405 140455392419840 alphageometry.py:567] Translation: "o = on_line o j k, on_bline o k j"

I0123 12:27:13.357468 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c d, on_bline n d c; o = on_line o j k, on_bline o k j ? perp c m m a"
I0123 12:27:13.357661 140455392419840 graph.py:498] 
I0123 12:27:13.357727 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c d, on_bline n d c; o = on_line o j k, on_bline o k j ? perp c m m a
I0123 12:27:17.398897 140455392419840 ddar.py:60] Depth 1/1000 time = 3.982910633087158
I0123 12:27:22.721466 140455392419840 ddar.py:60] Depth 2/1000 time = 5.322344064712524
I0123 12:27:28.393201 140455392419840 ddar.py:60] Depth 3/1000 time = 5.671487808227539
I0123 12:27:34.171114 140455392419840 ddar.py:60] Depth 4/1000 time = 5.777681589126587
I0123 12:27:41.155985 140455392419840 ddar.py:60] Depth 5/1000 time = 6.9846038818359375
I0123 12:27:47.047236 140455392419840 ddar.py:60] Depth 6/1000 time = 5.889857530593872
I0123 12:27:53.349662 140455392419840 ddar.py:60] Depth 7/1000 time = 6.2900145053863525
I0123 12:28:00.994009 140455392419840 ddar.py:60] Depth 8/1000 time = 7.644051551818848
I0123 12:28:07.518051 140455392419840 ddar.py:60] Depth 9/1000 time = 6.523747682571411
I0123 12:28:07.544653 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:28:07.544730 140455392419840 alphageometry.py:566] LM output (score=-2.766981): "o : C a c o 21 D a o c o 22 ;"
I0123 12:28:07.544768 140455392419840 alphageometry.py:567] Translation: "o = on_line o a c, on_bline o c a"

I0123 12:28:07.544811 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c d, on_bline n d c; o = on_line o a c, on_bline o c a ? perp c m m a"
I0123 12:28:07.545008 140455392419840 graph.py:498] 
I0123 12:28:07.545078 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c d, on_bline n d c; o = on_line o a c, on_bline o c a ? perp c m m a
I0123 12:28:11.465912 140455392419840 ddar.py:60] Depth 1/1000 time = 3.8581318855285645
I0123 12:28:15.656411 140455392419840 ddar.py:60] Depth 2/1000 time = 4.190263509750366
I0123 12:28:21.516005 140455392419840 ddar.py:60] Depth 3/1000 time = 5.859363555908203
I0123 12:28:27.580866 140455392419840 ddar.py:60] Depth 4/1000 time = 6.064624309539795
I0123 12:28:33.668436 140455392419840 ddar.py:60] Depth 5/1000 time = 6.087341785430908
I0123 12:28:39.803536 140455392419840 ddar.py:60] Depth 6/1000 time = 6.13481068611145
I0123 12:28:45.932487 140455392419840 ddar.py:60] Depth 7/1000 time = 6.1273438930511475
I0123 12:28:51.222953 140455392419840 ddar.py:60] Depth 8/1000 time = 5.27573299407959
I0123 12:28:58.982198 140455392419840 ddar.py:60] Depth 9/1000 time = 7.759000301361084
I0123 12:29:04.452110 140455392419840 ddar.py:60] Depth 10/1000 time = 5.469599485397339
I0123 12:29:04.483558 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:29:04.483651 140455392419840 alphageometry.py:566] LM output (score=-3.116879): "o : C d e o 21 D d o e o 22 ;"
I0123 12:29:04.483689 140455392419840 alphageometry.py:567] Translation: "o = on_line o d e, on_bline o e d"

I0123 12:29:04.483729 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c d, on_bline n d c; o = on_line o d e, on_bline o e d ? perp c m m a"
I0123 12:29:04.483916 140455392419840 graph.py:498] 
I0123 12:29:04.483982 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c d, on_bline n d c; o = on_line o d e, on_bline o e d ? perp c m m a
I0123 12:29:08.582276 140455392419840 ddar.py:60] Depth 1/1000 time = 4.0404212474823
I0123 12:29:13.736234 140455392419840 ddar.py:60] Depth 2/1000 time = 5.153738260269165
I0123 12:29:19.380786 140455392419840 ddar.py:60] Depth 3/1000 time = 5.644324541091919
I0123 12:29:25.122839 140455392419840 ddar.py:60] Depth 4/1000 time = 5.741810083389282
I0123 12:29:30.799087 140455392419840 ddar.py:60] Depth 5/1000 time = 5.675920486450195
I0123 12:29:36.578824 140455392419840 ddar.py:60] Depth 6/1000 time = 5.778305768966675
I0123 12:29:42.706644 140455392419840 ddar.py:60] Depth 7/1000 time = 6.114234209060669
I0123 12:29:49.007574 140455392419840 ddar.py:60] Depth 8/1000 time = 6.3006813526153564
I0123 12:29:55.262475 140455392419840 ddar.py:60] Depth 9/1000 time = 6.254627227783203
I0123 12:29:55.284919 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:29:55.284988 140455392419840 alphageometry.py:566] LM output (score=-3.233676): "o : C f k o 21 D f o k o 22 ;"
I0123 12:29:55.285027 140455392419840 alphageometry.py:567] Translation: "o = on_line o f k, on_bline o k f"

I0123 12:29:55.285065 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c d, on_bline n d c; o = on_line o f k, on_bline o k f ? perp c m m a"
I0123 12:29:55.285253 140455392419840 graph.py:498] 
I0123 12:29:55.285317 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c d, on_bline n d c; o = on_line o f k, on_bline o k f ? perp c m m a
I0123 12:29:58.017409 140455392419840 ddar.py:60] Depth 1/1000 time = 2.6736860275268555
I0123 12:30:02.946865 140455392419840 ddar.py:60] Depth 2/1000 time = 4.9292378425598145
I0123 12:30:08.289863 140455392419840 ddar.py:60] Depth 3/1000 time = 5.342776536941528
I0123 12:30:12.567385 140455392419840 ddar.py:60] Depth 4/1000 time = 4.277281999588013
I0123 12:30:17.973081 140455392419840 ddar.py:60] Depth 5/1000 time = 5.4054176807403564
I0123 12:30:23.467542 140455392419840 ddar.py:60] Depth 6/1000 time = 5.493070363998413
I0123 12:30:28.128559 140455392419840 ddar.py:60] Depth 7/1000 time = 4.647471189498901
I0123 12:30:34.102760 140455392419840 ddar.py:60] Depth 8/1000 time = 5.973952293395996
I0123 12:30:40.187287 140455392419840 ddar.py:60] Depth 9/1000 time = 6.084246635437012
I0123 12:30:40.212051 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:30:40.212113 140455392419840 alphageometry.py:566] LM output (score=-3.473843): "o : C l m o 21 D l m l o 22 ;"
I0123 12:30:40.212150 140455392419840 alphageometry.py:567] Translation: "o = on_line o l m, on_circle o l m"

I0123 12:30:40.212188 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c d, on_bline n d c; o = on_line o l m, on_circle o l m ? perp c m m a"
I0123 12:30:40.212388 140455392419840 graph.py:498] 
I0123 12:30:40.212444 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c d, on_bline n d c; o = on_line o l m, on_circle o l m ? perp c m m a
I0123 12:30:43.255091 140455392419840 ddar.py:60] Depth 1/1000 time = 2.9838345050811768
I0123 12:30:48.772793 140455392419840 ddar.py:60] Depth 2/1000 time = 5.51747989654541
I0123 12:30:54.639499 140455392419840 ddar.py:60] Depth 3/1000 time = 5.866438150405884
I0123 12:31:00.668773 140455392419840 ddar.py:60] Depth 4/1000 time = 6.029029369354248
I0123 12:31:06.729402 140455392419840 ddar.py:60] Depth 5/1000 time = 6.060251951217651
I0123 12:31:12.713262 140455392419840 ddar.py:60] Depth 6/1000 time = 5.982179164886475
I0123 12:31:18.973005 140455392419840 ddar.py:60] Depth 7/1000 time = 6.244987964630127
I0123 12:31:25.454549 140455392419840 ddar.py:60] Depth 8/1000 time = 6.481253147125244
I0123 12:31:31.869769 140455392419840 ddar.py:60] Depth 9/1000 time = 6.41486668586731
I0123 12:31:31.891280 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:31:31.891374 140455392419840 alphageometry.py:566] LM output (score=-3.527218): "o : C k l o 21 D k n n o 22 ;"
I0123 12:31:31.891414 140455392419840 alphageometry.py:567] Translation: "o = on_line o k l, on_circle o n k"

I0123 12:31:31.891458 140455392419840 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c d, on_bline n d c; o = on_line o k l, on_circle o n k ? perp c m m a"
I0123 12:31:31.891650 140455392419840 graph.py:498] 
I0123 12:31:31.891718 140455392419840 graph.py:499] a b c = triangle a b c; d = midpoint d c b; e = lc_tangent e c a, on_line e d a; f = lc_tangent f d c, on_line f e c; g = on_circle g f b, on_line g a b; h = on_line h c d; i = circle i b g h; j = on_circle j i g, on_line j c g; k = on_line k b j, on_line k g h; l = midpoint l c k; m = on_line m a l, on_line m c i; n = on_line n c d, on_bline n d c; o = on_line o k l, on_circle o n k ? perp c m m a
I0123 12:31:34.941408 140455392419840 ddar.py:60] Depth 1/1000 time = 2.9920380115509033
I0123 12:31:40.183072 140455392419840 ddar.py:60] Depth 2/1000 time = 5.2414491176605225
I0123 12:31:45.661848 140455392419840 ddar.py:60] Depth 3/1000 time = 5.478550672531128
I0123 12:31:51.270239 140455392419840 ddar.py:60] Depth 4/1000 time = 5.608158111572266
I0123 12:31:55.716564 140455392419840 ddar.py:60] Depth 5/1000 time = 4.446057319641113
I0123 12:32:01.209717 140455392419840 ddar.py:60] Depth 6/1000 time = 5.491974353790283
I0123 12:32:01.220220 140455392419840 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 12:32:01.220269 140455392419840 alphageometry.py:585] Timeout.
