I0123 16:06:35.328602 139863414272000 inference_utils.py:69] Parsing gin configuration.
I0123 16:06:35.328702 139863414272000 inference_utils.py:71] Added Gin search path meliad_lib/meliad/transformer/configs
I0123 16:06:35.328896 139863414272000 inference_utils.py:74] Loading Gin config file base_htrans.gin
I0123 16:06:35.328928 139863414272000 inference_utils.py:74] Loading Gin config file size/medium_150M.gin
I0123 16:06:35.328956 139863414272000 inference_utils.py:74] Loading Gin config file options/positions_t5.gin
I0123 16:06:35.328983 139863414272000 inference_utils.py:74] Loading Gin config file options/lr_cosine_decay.gin
I0123 16:06:35.329009 139863414272000 inference_utils.py:74] Loading Gin config file options/seq_1024_nocache.gin
I0123 16:06:35.329035 139863414272000 inference_utils.py:74] Loading Gin config file geometry_150M_generate.gin
I0123 16:06:35.329060 139863414272000 inference_utils.py:76] Overriding Gin param DecoderOnlyLanguageModelGenerate.output_token_losses=True
I0123 16:06:35.329085 139863414272000 inference_utils.py:76] Overriding Gin param TransformerTaskConfig.batch_size=32
I0123 16:06:35.329109 139863414272000 inference_utils.py:76] Overriding Gin param TransformerTaskConfig.sequence_length=128
I0123 16:06:35.329134 139863414272000 inference_utils.py:76] Overriding Gin param Trainer.restore_state_variables=False
I0123 16:06:35.329176 139863414272000 resource_reader.py:50] system_path_file_exists:base_htrans.gin
E0123 16:06:35.329305 139863414272000 resource_reader.py:55] Path not found: base_htrans.gin
I0123 16:06:35.329498 139863414272000 resource_reader.py:50] system_path_file_exists:trainer_configuration.gin
E0123 16:06:35.329595 139863414272000 resource_reader.py:55] Path not found: trainer_configuration.gin
I0123 16:06:35.336181 139863414272000 resource_reader.py:50] system_path_file_exists:size/medium_150M.gin
E0123 16:06:35.336295 139863414272000 resource_reader.py:55] Path not found: size/medium_150M.gin
I0123 16:06:35.336609 139863414272000 resource_reader.py:50] system_path_file_exists:options/positions_t5.gin
E0123 16:06:35.336709 139863414272000 resource_reader.py:55] Path not found: options/positions_t5.gin
I0123 16:06:35.336980 139863414272000 resource_reader.py:50] system_path_file_exists:options/lr_cosine_decay.gin
E0123 16:06:35.337076 139863414272000 resource_reader.py:55] Path not found: options/lr_cosine_decay.gin
I0123 16:06:35.337470 139863414272000 resource_reader.py:50] system_path_file_exists:options/seq_1024_nocache.gin
E0123 16:06:35.337566 139863414272000 resource_reader.py:55] Path not found: options/seq_1024_nocache.gin
I0123 16:06:35.341161 139863414272000 training_loop.py:334] ==== Training loop: initializing model ====
I0123 16:06:35.454917 139863414272000 xla_bridge.py:660] Unable to initialize backend 'rocm': NOT_FOUND: Could not find registered platform with name: "rocm". Available platform names are: CUDA
I0123 16:06:35.455637 139863414272000 xla_bridge.py:660] Unable to initialize backend 'tpu': INTERNAL: Failed to open libtpu.so: libtpu.so: cannot open shared object file: No such file or directory
I0123 16:06:35.462241 139863414272000 training_loop.py:335] Process 0 of 1
I0123 16:06:35.462295 139863414272000 training_loop.py:336] Local device count = 1
I0123 16:06:35.462334 139863414272000 training_loop.py:337] Number of replicas = 1
I0123 16:06:35.462367 139863414272000 training_loop.py:339] Using random number seed 42
I0123 16:06:35.940779 139863414272000 training_loop.py:359] Initializing the model.
I0123 16:06:36.362434 139863414272000 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.362717 139863414272000 decoder_stack.py:316] dstack: scanning over 1 windows.
I0123 16:06:36.362818 139863414272000 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 16:06:36.362947 139863414272000 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 16:06:36.363027 139863414272000 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 16:06:36.363107 139863414272000 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 16:06:36.363178 139863414272000 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 16:06:36.363248 139863414272000 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 16:06:36.363316 139863414272000 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 16:06:36.363384 139863414272000 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 16:06:36.363451 139863414272000 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 16:06:36.363518 139863414272000 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 16:06:36.363585 139863414272000 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 16:06:36.363651 139863414272000 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 16:06:36.363690 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:36.363734 139863414272000 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 16:06:36.364027 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:36.364066 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:36.364097 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:36.366083 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.371321 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:36.381891 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.382166 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:36.386466 139863414272000 transformer_layer.py:213] tlayer: windowed attention.
I0123 16:06:36.396989 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:36.397046 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:36.397083 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:36.397115 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.397178 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.398344 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.398422 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.399131 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.401576 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.407732 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.408977 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.409060 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:36.409094 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:36.409154 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.409280 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:36.409606 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:36.409662 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:36.411550 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.411649 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:36.414546 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.414628 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:36.415053 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:36.425072 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:36.433854 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.433952 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:36.434245 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.434325 139863414272000 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 16:06:36.434433 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:36.434472 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:36.434502 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:36.436440 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.438824 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:36.444376 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.444638 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:36.447294 139863414272000 transformer_layer.py:213] tlayer: windowed attention.
I0123 16:06:36.451102 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:36.451160 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:36.451196 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:36.451227 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.451290 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.451854 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.451930 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.452296 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.453073 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.455587 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.456253 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.456330 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:36.456364 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:36.456421 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.456548 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:36.456871 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:36.456913 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:36.458805 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.458900 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:36.461367 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.461444 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:36.461930 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:36.464371 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:36.467155 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.467309 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:36.467604 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.467687 139863414272000 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 16:06:36.467799 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:36.467838 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:36.467868 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:36.469822 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.472192 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:36.478084 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.478352 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:36.480968 139863414272000 transformer_layer.py:213] tlayer: windowed attention.
I0123 16:06:36.484836 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:36.484892 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:36.484927 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:36.484956 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.485017 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.485588 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.485674 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.486036 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.486802 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.489341 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.490050 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.490127 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:36.490160 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:36.490217 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.490345 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:36.490664 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:36.490706 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:36.492586 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.492677 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:36.495512 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.495596 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:36.496027 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:36.498282 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:36.500177 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.500271 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:36.500562 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.500641 139863414272000 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 16:06:36.500748 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:36.500785 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:36.500815 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:36.502705 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.505056 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:36.510608 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.510866 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:36.513536 139863414272000 transformer_layer.py:213] tlayer: windowed attention.
I0123 16:06:36.517227 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:36.517283 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:36.517318 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:36.517348 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.517413 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.517979 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.518055 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.518409 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.519172 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.521695 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.522304 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.522380 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:36.522413 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:36.522473 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.522602 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:36.522915 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:36.522957 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:36.524857 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.524953 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:36.527498 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.527584 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:36.528013 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:36.530243 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:36.532190 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.532284 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:36.532575 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.532654 139863414272000 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 16:06:36.532760 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:36.532798 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:36.532827 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:36.534645 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.537016 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:36.542604 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.542864 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:36.545556 139863414272000 transformer_layer.py:213] tlayer: windowed attention.
I0123 16:06:36.549279 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:36.549334 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:36.549369 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:36.549400 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.549463 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.550380 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.550457 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.550821 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.551584 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.554052 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.554667 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.554745 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:36.554779 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:36.554836 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.554965 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:36.555278 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:36.555321 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:36.557210 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.557302 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:36.559834 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.559915 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:36.560332 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:36.562647 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:36.564581 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.564674 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:36.564961 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.565040 139863414272000 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 16:06:36.565147 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:36.565186 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:36.565217 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:36.567114 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.569576 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:36.575090 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.575348 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:36.577963 139863414272000 transformer_layer.py:213] tlayer: windowed attention.
I0123 16:06:36.581697 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:36.581751 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:36.581786 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:36.581815 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.581877 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.582435 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.582510 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.582869 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.583637 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.586083 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.586707 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.586783 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:36.586817 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:36.586873 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.586997 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:36.587310 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:36.587351 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:36.589272 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.589363 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:36.591853 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.591934 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:36.592355 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:36.594769 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:36.596676 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.596771 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:36.597061 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.597140 139863414272000 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 16:06:36.597249 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:36.597287 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:36.597318 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:36.599202 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.601573 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:36.607136 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.607393 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:36.610004 139863414272000 transformer_layer.py:213] tlayer: windowed attention.
I0123 16:06:36.613717 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:36.613771 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:36.613806 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:36.613836 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.613898 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.614460 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.614536 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.614891 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.615649 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.618104 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.618772 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.618847 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:36.618881 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:36.618937 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.619064 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:36.619375 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:36.619421 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:36.621284 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.621377 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:36.623841 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.623922 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:36.624696 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:36.627004 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:36.628932 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.629041 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:36.629333 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.629412 139863414272000 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 16:06:36.629519 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:36.629558 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:36.629587 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:36.768530 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.771358 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:36.777223 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.777517 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:36.780343 139863414272000 transformer_layer.py:213] tlayer: windowed attention.
I0123 16:06:36.784187 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:36.784245 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:36.784282 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:36.784315 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.784386 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.784997 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.785074 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.785440 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.786238 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.788860 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.789503 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.789582 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:36.789617 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:36.789684 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.789818 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:36.790143 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:36.790187 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:36.792074 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.792173 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:36.794763 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.794843 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:36.795286 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:36.797596 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:36.799589 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.799694 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:36.799992 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.800075 139863414272000 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 16:06:36.800186 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:36.800226 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:36.800258 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:36.802128 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.804584 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:36.810165 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.810430 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:36.813159 139863414272000 transformer_layer.py:213] tlayer: windowed attention.
I0123 16:06:36.816937 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:36.816992 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:36.817028 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:36.817060 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.817121 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.817755 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.817832 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.818194 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.818981 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.821484 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.822118 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.822196 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:36.822231 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:36.822294 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.822426 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:36.822745 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:36.822788 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:36.824685 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.824777 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:36.827381 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.827460 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:36.827889 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:36.830234 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:36.832141 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.832235 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:36.832525 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.832611 139863414272000 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 16:06:36.832722 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:36.832761 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:36.832792 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:36.834641 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.837100 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:36.843049 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.843318 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:36.846007 139863414272000 transformer_layer.py:213] tlayer: windowed attention.
I0123 16:06:36.850125 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:36.850181 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:36.850218 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:36.850250 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.850312 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.850877 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.850953 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.851311 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.852088 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.854603 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.855220 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.855300 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:36.855334 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:36.855397 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.855525 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:36.855837 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:36.855880 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:36.857840 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.857939 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:36.860450 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.860536 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:36.860974 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:36.863327 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:36.865250 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.865347 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:36.865650 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.865740 139863414272000 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 16:06:36.865854 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:36.865894 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:36.865925 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:36.867827 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.870267 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:36.875926 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.876189 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:36.878870 139863414272000 transformer_layer.py:213] tlayer: windowed attention.
I0123 16:06:36.882693 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:36.882751 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:36.882790 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:36.882823 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.882886 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.883449 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.883526 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.883882 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.884668 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.887174 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.887836 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.887913 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:36.887948 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:36.888010 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.888142 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:36.888459 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:36.888502 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:36.890420 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.890528 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:36.893293 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.893373 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:36.893869 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:36.896166 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:36.898072 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.898171 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:36.898468 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.898549 139863414272000 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 16:06:36.898666 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:36.898705 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:36.898737 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:36.900644 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.903294 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:36.908992 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.909253 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:36.911938 139863414272000 transformer_layer.py:213] tlayer: windowed attention.
I0123 16:06:36.915726 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:36.915783 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:36.915820 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:36.915852 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.915920 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.916484 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.916560 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.916917 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.917707 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.920578 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.921206 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.921284 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:36.921320 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:36.921381 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.921513 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:36.921846 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:36.921891 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:36.923808 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.923901 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:36.926506 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.926587 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:36.927019 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:36.929284 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:36.931200 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.931299 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:36.931599 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.931884 139863414272000 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 16:06:36.931954 139863414272000 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 16:06:36.932022 139863414272000 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 16:06:36.932079 139863414272000 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 16:06:36.932134 139863414272000 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 16:06:36.932186 139863414272000 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 16:06:36.932240 139863414272000 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 16:06:36.932293 139863414272000 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 16:06:36.932344 139863414272000 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 16:06:36.932395 139863414272000 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 16:06:36.932446 139863414272000 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 16:06:36.932499 139863414272000 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 16:06:36.932536 139863414272000 decoder_stack.py:344] dstack: Final layernorm.
I0123 16:06:36.936080 139863414272000 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:06:36.984267 139863414272000 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:36.984352 139863414272000 decoder_stack.py:333] dstack: autoregressive generator.
I0123 16:06:36.984405 139863414272000 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 16:06:36.984509 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:36.984547 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:36.984576 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:36.984639 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:36.987101 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:36.992582 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:36.992839 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:36.995507 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:06:37.012281 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:37.012337 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:37.012372 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:37.012402 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.012465 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.013593 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.013690 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.014392 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.016371 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.021116 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.022432 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.022519 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:37.022555 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:37.022615 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.022752 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:37.022860 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:37.022899 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.024772 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.024866 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.027303 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.027384 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:37.027490 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:37.029727 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.031655 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.031749 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.032035 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.032116 139863414272000 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 16:06:37.032222 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:37.032261 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:37.032290 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:37.032352 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.034615 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:37.040158 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.040416 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:37.043090 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:06:37.056061 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:37.056117 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:37.056152 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:37.056183 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.056248 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.056802 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.056877 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.057228 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.057930 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.060431 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.061054 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.061131 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:37.061171 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:37.061231 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.061361 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:37.061473 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:37.061512 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.063456 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.063551 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.065984 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.066065 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:37.066173 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:37.068461 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.070401 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.070498 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.070787 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.070869 139863414272000 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 16:06:37.070978 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:37.071017 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:37.071048 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:37.071113 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.073369 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:37.078956 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.079217 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:37.081913 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:06:37.094576 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:37.094632 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:37.094669 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:37.094700 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.094762 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.095319 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.095396 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.095759 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.096452 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.098940 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.099557 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.099636 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:37.099670 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:37.099735 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.099862 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:37.099969 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:37.100008 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.101959 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.102054 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.104470 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.104548 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:37.104654 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:37.106880 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.108794 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.108890 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.109180 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.109262 139863414272000 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 16:06:37.109372 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:37.109412 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:37.109443 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:37.109507 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.111765 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:37.117208 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.117470 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:37.120172 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:06:37.137168 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:37.137253 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:37.137291 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:37.137324 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.137401 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.138029 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.138108 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.138477 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.139187 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.141747 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.142372 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.142449 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:37.142484 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:37.142549 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.142684 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:37.142796 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:37.142834 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.144866 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.144961 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.147459 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.147542 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:37.147653 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:37.149919 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.151813 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.151909 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.152199 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.152283 139863414272000 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 16:06:37.152395 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:37.152437 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:37.152469 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:37.152538 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.155169 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:37.160665 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.160931 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:37.163609 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:06:37.176461 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:37.176517 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:37.176554 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:37.176586 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.176653 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.177213 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.177289 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.177653 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.178354 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.180905 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.181541 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.181618 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:37.181660 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:37.181721 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.181855 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:37.181962 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:37.182000 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.183912 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.184006 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.186462 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.186542 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:37.186650 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:37.188935 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.190820 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.190916 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.191205 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.191286 139863414272000 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 16:06:37.191393 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:37.191432 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:37.191464 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:37.191528 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.193792 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:37.199282 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.199542 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:37.202274 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:06:37.215101 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:37.215157 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:37.215192 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:37.215223 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.215284 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.215843 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.215921 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.216285 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.216983 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.219501 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.220125 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.220203 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:37.220237 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:37.220300 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.220433 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:37.220549 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:37.220589 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.222559 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.222654 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.225168 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.225246 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:37.225354 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:37.227641 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.229494 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.229588 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.229880 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.229961 139863414272000 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 16:06:37.230071 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:37.230111 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:37.230142 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:37.230207 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.232464 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:37.238020 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.238281 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:37.240889 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:06:37.253614 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:37.253677 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:37.253714 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:37.253746 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.253813 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.254376 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.254452 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.254812 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.255503 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.258021 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.259009 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.259088 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:37.259122 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:37.259183 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.259312 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:37.259420 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:37.259463 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.261360 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.261453 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.263861 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.263943 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:37.264050 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:37.266267 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.268196 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.268292 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.268582 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.268662 139863414272000 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 16:06:37.268771 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:37.268810 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:37.268841 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:37.268903 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.271178 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:37.276648 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.276920 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:37.279620 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:06:37.292312 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:37.292368 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:37.292404 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:37.292435 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.292500 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.293109 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.293186 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.293546 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.294236 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.296722 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.297341 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.297419 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:37.297453 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:37.297513 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.297651 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:37.297762 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:37.297806 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.299706 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.299800 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.302280 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.302360 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:37.302468 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:37.304687 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.306568 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.306663 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.306951 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.307031 139863414272000 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 16:06:37.307140 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:37.307179 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:37.307210 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:37.307274 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.309520 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:37.315037 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.315298 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:37.317941 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:06:37.330801 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:37.330857 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:37.330893 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:37.330924 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.330989 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.331548 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.331626 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.331987 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.332682 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.335190 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.335864 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.335941 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:37.335975 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:37.336034 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.336163 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:37.336271 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:37.336309 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.338196 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.338291 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.340700 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.340777 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:37.340883 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:37.343103 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.345041 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.345138 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.345429 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.345510 139863414272000 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 16:06:37.345618 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:37.345664 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:37.345696 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:37.345761 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.348029 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:37.353455 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.353721 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:37.356399 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:06:37.369406 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:37.369462 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:37.369498 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:37.369529 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.369597 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.370231 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.370307 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.370667 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.371359 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.373865 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.374492 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.374569 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:37.374603 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:37.374662 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.374789 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:37.374901 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:37.374939 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.376837 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.376938 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.379391 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.379471 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:37.379577 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:37.381788 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.383634 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.383729 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.384017 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.384098 139863414272000 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 16:06:37.384208 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:37.384248 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:37.384280 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:37.384344 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.386591 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:37.392088 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.392349 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:37.395049 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:06:37.407730 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:37.407786 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:37.407822 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:37.407854 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.407917 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.408475 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.408550 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.408909 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.409603 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.412128 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.412793 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.412870 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:37.412905 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:37.412965 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.413100 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:37.413210 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:37.413250 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.415159 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.415260 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.417684 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.417762 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:37.417868 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:37.420072 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.421993 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.422089 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.422378 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.422460 139863414272000 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 16:06:37.422568 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:37.422607 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:37.422640 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:37.422705 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.424965 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:37.430426 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.430688 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:37.433365 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:06:37.445935 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:37.445990 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:37.446027 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:37.446058 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.446120 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.446676 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.446753 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.447106 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.447883 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.450392 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.451007 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.451084 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:37.451118 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:37.451177 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.451304 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:37.451411 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:37.451449 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.453332 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.453426 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.455831 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.455910 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:37.456022 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:37.458286 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.460145 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.460240 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.460526 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.460614 139863414272000 decoder_stack.py:344] dstack: Final layernorm.
I0123 16:06:37.463482 139863414272000 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:06:37.519177 139863414272000 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.519264 139863414272000 decoder_stack.py:333] dstack: autoregressive generator.
I0123 16:06:37.519317 139863414272000 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 16:06:37.519420 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:37.519459 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:37.519490 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:37.519552 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.522399 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:37.527797 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.528057 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:37.530643 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:06:37.542952 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:37.543007 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:37.543043 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:37.543075 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.543138 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.543693 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.543769 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.544125 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.544800 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.547334 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.547988 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.548068 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:37.548104 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:37.548166 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.548300 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:37.548417 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:37.548457 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.550340 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.550435 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.552862 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.552941 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:37.553049 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:37.555313 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.557167 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.557262 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.557548 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.557630 139863414272000 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 16:06:37.557747 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:37.557786 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:37.557818 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:37.557882 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.560144 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:37.565484 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.565757 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:37.568475 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:06:37.580731 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:37.580786 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:37.580822 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:37.580853 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.580915 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.581474 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.581548 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.581908 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.582579 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.585060 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.585678 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.585757 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:37.585791 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:37.585852 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.585979 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:37.586085 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:37.586129 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.587972 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.588066 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.590464 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.590542 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:37.590647 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:37.592902 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.594767 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.594863 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.595148 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.595228 139863414272000 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 16:06:37.595336 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:37.595375 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:37.595406 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:37.595469 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.597687 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:37.603099 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.603355 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:37.605997 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:06:37.618196 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:37.618252 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:37.618288 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:37.618320 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.618384 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.618941 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.619018 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.619380 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.620059 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.622650 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.623367 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.623444 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:37.623478 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:37.623537 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.623663 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:37.623769 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:37.623807 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.625650 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.625746 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.628134 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.628212 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:37.628319 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:37.631000 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.632831 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.632926 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.633213 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.633294 139863414272000 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 16:06:37.633401 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:37.633440 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:37.633471 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:37.633534 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.635761 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:37.641120 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.641381 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:37.644057 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:06:37.656427 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:37.656484 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:37.656522 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:37.656567 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.656632 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.657190 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.657266 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.657620 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.658313 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.660835 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.661444 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.661520 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:37.661554 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:37.661612 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.661763 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:37.661871 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:37.661910 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.663794 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.663886 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.666268 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.666346 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:37.666452 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:37.668684 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.670523 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.670617 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.670898 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.670977 139863414272000 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 16:06:37.671081 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:37.671117 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:37.671147 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:37.671207 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.673390 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:37.678692 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.678948 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:37.681766 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:06:37.694076 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:37.694130 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:37.694163 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:37.694191 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.694251 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.694796 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.694870 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.695218 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.695887 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.698384 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.698995 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.699069 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:37.699101 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:37.699158 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.699281 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:37.699385 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:37.699422 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.701253 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.701349 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.703727 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.703804 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:37.703909 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:37.706136 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.707957 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.708050 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.708331 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.708409 139863414272000 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 16:06:37.708512 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:37.708548 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:37.708576 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:37.708636 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.710832 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:37.716141 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.716395 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:37.719059 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:06:37.731508 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:37.731562 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:37.731595 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:37.731623 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.731683 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.732230 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.732303 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.732650 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.733326 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.735843 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.736449 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.736523 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:37.736556 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:37.736612 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.736736 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:37.736841 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:37.736876 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.738725 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.738821 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.741158 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.741235 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:37.741337 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:37.743968 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.745792 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.745885 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.746163 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.746242 139863414272000 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 16:06:37.746345 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:37.746381 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:37.746410 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:37.746471 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.748660 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:37.753958 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.754211 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:37.756831 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:06:37.769039 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:37.769092 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:37.769126 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:37.769154 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.769214 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.769783 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.769859 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.770215 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.770885 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.773406 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.774033 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.774109 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:37.774142 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:37.774199 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.774329 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:37.774434 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:37.774470 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.776316 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.776408 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.778780 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.778857 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:37.778960 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:37.781182 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.783003 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.783096 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.783378 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.783458 139863414272000 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 16:06:37.783561 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:37.783598 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:37.783626 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:37.783686 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.785867 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:37.791142 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.791395 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:37.794039 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:06:37.806162 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:37.806215 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:37.806248 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:37.806277 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.806338 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.806890 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.806964 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.807310 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.807973 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.810463 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.811069 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.811143 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:37.811175 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:37.811232 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.811357 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:37.811461 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:37.811497 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.813326 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.813416 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.815762 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.815847 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:37.815953 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:37.818180 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.819995 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.820088 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.820369 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.820449 139863414272000 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 16:06:37.820552 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:37.820589 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:37.820618 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:37.820679 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.822866 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:37.828387 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.828639 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:37.831282 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:06:37.843448 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:37.843501 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:37.843534 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:37.843562 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.843621 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.844166 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.844240 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.844590 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.845261 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.847785 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.848394 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.848470 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:37.848503 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:37.848560 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.848684 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:37.848789 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:37.848826 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.850671 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.850763 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.853114 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.853197 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:37.853302 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:37.855922 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.857748 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.857841 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.858123 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.858201 139863414272000 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 16:06:37.858305 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:37.858342 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:37.858371 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:37.858431 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.860643 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:37.866022 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.866272 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:37.868896 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:06:37.881197 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:37.881256 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:37.881290 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:37.881318 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.881378 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.881939 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.882013 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.882362 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.883033 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.885514 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.886136 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.886211 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:37.886243 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:37.886298 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.886422 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:37.886526 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:37.886562 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.888899 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.888992 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.891334 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.891411 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:37.891520 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:37.893716 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.895509 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.895602 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.895879 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.895959 139863414272000 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 16:06:37.896062 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:37.896098 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:37.896126 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:37.896184 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.898377 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:37.903676 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.903929 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:37.906564 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:06:37.918772 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:37.918827 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:37.918861 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:37.918890 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.918950 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.919506 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.919579 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.919931 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.920599 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.923105 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.923722 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.923796 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:37.923828 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:37.923884 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.924006 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:37.924110 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:37.924146 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.925988 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.926078 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.928433 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.928509 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:37.928618 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:37.930870 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.932686 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.932779 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.933062 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.933141 139863414272000 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 16:06:37.933246 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:06:37.933283 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:06:37.933312 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:06:37.933372 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.935573 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:06:37.940875 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.941128 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:06:37.943766 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:06:37.955984 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:06:37.956037 139863414272000 attention.py:418] Single window, no scan.
I0123 16:06:37.956070 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:06:37.956099 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.956160 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.956715 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.956792 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.957148 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.957831 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.960319 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.960926 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.961003 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:06:37.961035 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:06:37.961091 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.961215 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:06:37.961321 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:06:37.961357 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.963194 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.963287 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.965607 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.965693 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:06:37.965801 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:06:37.968411 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:06:37.970251 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.970348 139863414272000 nn_components.py:261] mlp: residual
I0123 16:06:37.970630 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:37.970713 139863414272000 decoder_stack.py:344] dstack: Final layernorm.
I0123 16:06:37.973477 139863414272000 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:06:42.363137 139863414272000 optimizer_config.py:74] Using Flax Adafactor Optimizer. lr=1.000000, b1=0.900000
I0123 16:06:42.918133 139863414272000 training_loop.py:409] No working directory specified.
I0123 16:06:42.918244 139863414272000 training_loop.py:431] Loading pre-trained model from ag_ckpt_vocab:
I0123 16:06:42.919010 139863414272000 checkpoints.py:1062] Restoring legacy Flax checkpoint from ag_ckpt_vocab/checkpoint_10999999
I0123 16:06:46.214797 139863414272000 training_loop.py:447] Only restoring trainable parameters.
I0123 16:06:46.215398 139863414272000 training_loop.py:724] parameter: decoder/embed/embedding, shape (1024, 1024), size 1048576
I0123 16:06:46.215476 139863414272000 training_loop.py:724] parameter: decoder/final_layernorm/scale, shape (1024,), size 1024
I0123 16:06:46.215524 139863414272000 training_loop.py:724] parameter: decoder/transformer0/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 16:06:46.215569 139863414272000 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 16:06:46.215610 139863414272000 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.215650 139863414272000 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 16:06:46.215689 139863414272000 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.215727 139863414272000 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.215765 139863414272000 training_loop.py:724] parameter: decoder/transformer0/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 16:06:46.215803 139863414272000 training_loop.py:724] parameter: decoder/transformer0/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 16:06:46.215840 139863414272000 training_loop.py:724] parameter: decoder/transformer0/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.215877 139863414272000 training_loop.py:724] parameter: decoder/transformer0/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 16:06:46.215914 139863414272000 training_loop.py:724] parameter: decoder/transformer1/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 16:06:46.215950 139863414272000 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 16:06:46.215987 139863414272000 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.216024 139863414272000 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 16:06:46.216060 139863414272000 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.216095 139863414272000 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.216131 139863414272000 training_loop.py:724] parameter: decoder/transformer1/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 16:06:46.216167 139863414272000 training_loop.py:724] parameter: decoder/transformer1/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 16:06:46.216217 139863414272000 training_loop.py:724] parameter: decoder/transformer1/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.216255 139863414272000 training_loop.py:724] parameter: decoder/transformer1/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 16:06:46.216292 139863414272000 training_loop.py:724] parameter: decoder/transformer10/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 16:06:46.216328 139863414272000 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 16:06:46.216364 139863414272000 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.216399 139863414272000 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 16:06:46.216434 139863414272000 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.216469 139863414272000 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.216504 139863414272000 training_loop.py:724] parameter: decoder/transformer10/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 16:06:46.216538 139863414272000 training_loop.py:724] parameter: decoder/transformer10/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 16:06:46.216573 139863414272000 training_loop.py:724] parameter: decoder/transformer10/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.216609 139863414272000 training_loop.py:724] parameter: decoder/transformer10/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 16:06:46.216644 139863414272000 training_loop.py:724] parameter: decoder/transformer11/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 16:06:46.216680 139863414272000 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 16:06:46.216715 139863414272000 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.216751 139863414272000 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 16:06:46.216786 139863414272000 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.216822 139863414272000 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.216857 139863414272000 training_loop.py:724] parameter: decoder/transformer11/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 16:06:46.216892 139863414272000 training_loop.py:724] parameter: decoder/transformer11/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 16:06:46.216928 139863414272000 training_loop.py:724] parameter: decoder/transformer11/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.216966 139863414272000 training_loop.py:724] parameter: decoder/transformer11/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 16:06:46.217003 139863414272000 training_loop.py:724] parameter: decoder/transformer2/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 16:06:46.217038 139863414272000 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 16:06:46.217073 139863414272000 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.217108 139863414272000 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 16:06:46.217148 139863414272000 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.217186 139863414272000 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.217221 139863414272000 training_loop.py:724] parameter: decoder/transformer2/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 16:06:46.217257 139863414272000 training_loop.py:724] parameter: decoder/transformer2/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 16:06:46.217294 139863414272000 training_loop.py:724] parameter: decoder/transformer2/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.217329 139863414272000 training_loop.py:724] parameter: decoder/transformer2/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 16:06:46.217364 139863414272000 training_loop.py:724] parameter: decoder/transformer3/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 16:06:46.217400 139863414272000 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 16:06:46.217435 139863414272000 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.217469 139863414272000 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 16:06:46.217504 139863414272000 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.217539 139863414272000 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.217574 139863414272000 training_loop.py:724] parameter: decoder/transformer3/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 16:06:46.217608 139863414272000 training_loop.py:724] parameter: decoder/transformer3/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 16:06:46.217660 139863414272000 training_loop.py:724] parameter: decoder/transformer3/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.217702 139863414272000 training_loop.py:724] parameter: decoder/transformer3/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 16:06:46.217740 139863414272000 training_loop.py:724] parameter: decoder/transformer4/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 16:06:46.217777 139863414272000 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 16:06:46.217813 139863414272000 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.217848 139863414272000 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 16:06:46.217883 139863414272000 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.217918 139863414272000 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.217952 139863414272000 training_loop.py:724] parameter: decoder/transformer4/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 16:06:46.217988 139863414272000 training_loop.py:724] parameter: decoder/transformer4/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 16:06:46.218023 139863414272000 training_loop.py:724] parameter: decoder/transformer4/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.218058 139863414272000 training_loop.py:724] parameter: decoder/transformer4/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 16:06:46.218094 139863414272000 training_loop.py:724] parameter: decoder/transformer5/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 16:06:46.218135 139863414272000 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 16:06:46.218172 139863414272000 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.218206 139863414272000 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 16:06:46.218241 139863414272000 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.218275 139863414272000 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.218310 139863414272000 training_loop.py:724] parameter: decoder/transformer5/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 16:06:46.218344 139863414272000 training_loop.py:724] parameter: decoder/transformer5/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 16:06:46.218379 139863414272000 training_loop.py:724] parameter: decoder/transformer5/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.218415 139863414272000 training_loop.py:724] parameter: decoder/transformer5/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 16:06:46.218451 139863414272000 training_loop.py:724] parameter: decoder/transformer6/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 16:06:46.218488 139863414272000 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 16:06:46.218524 139863414272000 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.218560 139863414272000 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 16:06:46.218595 139863414272000 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.218631 139863414272000 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.218667 139863414272000 training_loop.py:724] parameter: decoder/transformer6/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 16:06:46.218702 139863414272000 training_loop.py:724] parameter: decoder/transformer6/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 16:06:46.218737 139863414272000 training_loop.py:724] parameter: decoder/transformer6/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.218772 139863414272000 training_loop.py:724] parameter: decoder/transformer6/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 16:06:46.218807 139863414272000 training_loop.py:724] parameter: decoder/transformer7/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 16:06:46.218843 139863414272000 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 16:06:46.218879 139863414272000 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.218914 139863414272000 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 16:06:46.218949 139863414272000 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.218984 139863414272000 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.219019 139863414272000 training_loop.py:724] parameter: decoder/transformer7/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 16:06:46.219055 139863414272000 training_loop.py:724] parameter: decoder/transformer7/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 16:06:46.219095 139863414272000 training_loop.py:724] parameter: decoder/transformer7/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.219133 139863414272000 training_loop.py:724] parameter: decoder/transformer7/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 16:06:46.219169 139863414272000 training_loop.py:724] parameter: decoder/transformer8/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 16:06:46.219204 139863414272000 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 16:06:46.219239 139863414272000 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.219274 139863414272000 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 16:06:46.219309 139863414272000 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.219344 139863414272000 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.219380 139863414272000 training_loop.py:724] parameter: decoder/transformer8/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 16:06:46.219414 139863414272000 training_loop.py:724] parameter: decoder/transformer8/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 16:06:46.219449 139863414272000 training_loop.py:724] parameter: decoder/transformer8/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.219483 139863414272000 training_loop.py:724] parameter: decoder/transformer8/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 16:06:46.219518 139863414272000 training_loop.py:724] parameter: decoder/transformer9/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 16:06:46.219552 139863414272000 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 16:06:46.219588 139863414272000 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.219623 139863414272000 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 16:06:46.219658 139863414272000 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.219692 139863414272000 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.219727 139863414272000 training_loop.py:724] parameter: decoder/transformer9/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 16:06:46.219762 139863414272000 training_loop.py:724] parameter: decoder/transformer9/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 16:06:46.219796 139863414272000 training_loop.py:724] parameter: decoder/transformer9/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 16:06:46.219831 139863414272000 training_loop.py:724] parameter: decoder/transformer9/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 16:06:46.219859 139863414272000 training_loop.py:725] Total parameters: 152072288
I0123 16:06:46.220070 139863414272000 training_loop.py:739] Total state size: 0
I0123 16:06:46.242725 139863414272000 training_loop.py:492] Training loop: creating task for mode beam_search
I0123 16:06:46.242941 139863414272000 training_loop.py:685] Creating logging writer (train) for mode beam_search
I0123 16:06:46.243452 139863414272000 training_loop.py:652] Compiling mode beam_search with jit.
I0123 16:06:46.243753 139863414272000 training_loop.py:89] registering functions: dict_keys([])
I0123 16:06:46.259941 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f ? coll i c j
I0123 16:06:47.508882 139863414272000 ddar.py:60] Depth 1/1000 time = 1.2341022491455078
I0123 16:06:49.512817 139863414272000 ddar.py:60] Depth 2/1000 time = 2.0037591457366943
I0123 16:06:51.975220 139863414272000 ddar.py:60] Depth 3/1000 time = 2.4622297286987305
I0123 16:06:54.741105 139863414272000 ddar.py:60] Depth 4/1000 time = 2.7657151222229004
I0123 16:06:57.693873 139863414272000 ddar.py:60] Depth 5/1000 time = 2.9525609016418457
I0123 16:07:00.491570 139863414272000 ddar.py:60] Depth 6/1000 time = 2.797039747238159
I0123 16:07:00.506839 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:07:00.506927 139863414272000 alphageometry.py:540] Depth 0. There are 1 nodes to expand:
I0123 16:07:00.506962 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00
I0123 16:07:00.506992 139863414272000 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00
I0123 16:07:00.631913 139863414272000 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.632108 139863414272000 decoder_stack.py:316] dstack: scanning over 1 windows.
I0123 16:07:00.632205 139863414272000 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 16:07:00.632281 139863414272000 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 16:07:00.632360 139863414272000 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 16:07:00.632442 139863414272000 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 16:07:00.632516 139863414272000 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 16:07:00.632584 139863414272000 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 16:07:00.632649 139863414272000 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 16:07:00.632714 139863414272000 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 16:07:00.632781 139863414272000 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 16:07:00.632846 139863414272000 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 16:07:00.632911 139863414272000 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 16:07:00.632977 139863414272000 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 16:07:00.633016 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:00.633060 139863414272000 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 16:07:00.633168 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:00.633206 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:00.633234 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:00.635076 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.637521 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:00.643116 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.643399 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:00.645960 139863414272000 transformer_layer.py:213] tlayer: windowed attention.
I0123 16:07:00.650209 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:00.650265 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:00.650301 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:00.650333 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.650395 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.651013 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.651092 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.651451 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.652207 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.654709 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.655336 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.655411 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:00.655444 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:00.655501 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.655623 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:00.655938 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:00.655978 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:00.657904 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.657997 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:00.660414 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.660491 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:00.660898 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:00.663177 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:00.665043 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.665135 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:00.665419 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.665500 139863414272000 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 16:07:00.665605 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:00.665648 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:00.665679 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:00.667495 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.669773 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:00.675245 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.675496 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:00.678101 139863414272000 transformer_layer.py:213] tlayer: windowed attention.
I0123 16:07:00.681687 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:00.681741 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:00.681776 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:00.681806 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.681867 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.682425 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.682499 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.682843 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.683590 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.685998 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.686658 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.686733 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:00.686766 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:00.686821 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.686944 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:00.687248 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:00.687288 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:00.689173 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.689263 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:00.691664 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.691742 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:00.692153 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:00.694456 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:00.696327 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.696419 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:00.696702 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.696780 139863414272000 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 16:07:00.696884 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:00.696922 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:00.696951 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:00.698696 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.700945 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:00.706476 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.706725 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:00.709221 139863414272000 transformer_layer.py:213] tlayer: windowed attention.
I0123 16:07:00.712770 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:00.712824 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:00.712856 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:00.712885 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.712945 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.713544 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.713618 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.713985 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.714740 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.717158 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.717774 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.717850 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:00.717883 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:00.717938 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.718063 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:00.718373 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:00.718413 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:00.720330 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.720420 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:00.722813 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.722891 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:00.723295 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:00.725508 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:00.727372 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.727464 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:00.727749 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.727828 139863414272000 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 16:07:00.727932 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:00.727968 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:00.727998 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:00.729829 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.732103 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:00.737573 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.737834 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:00.740364 139863414272000 transformer_layer.py:213] tlayer: windowed attention.
I0123 16:07:00.743984 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:00.744043 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:00.744078 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:00.744108 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.744170 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.744713 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.744787 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.745138 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.745893 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.748308 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.748905 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.748982 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:00.749015 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:00.749069 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.749192 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:00.749547 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:00.749588 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:00.751530 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.751624 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:00.754078 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.754157 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:00.754574 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:00.756832 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:00.759218 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.759314 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:00.759608 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.759688 139863414272000 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 16:07:00.759793 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:00.759831 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:00.759861 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:00.761652 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.763939 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:00.769510 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.769774 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:00.772315 139863414272000 transformer_layer.py:213] tlayer: windowed attention.
I0123 16:07:00.775925 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:00.775979 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:00.776019 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:00.776051 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.776114 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.776721 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.776796 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.777143 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.777904 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.780350 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.780957 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.781033 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:00.781065 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:00.781123 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.781249 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:00.781561 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:00.781602 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:00.783557 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.783650 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:00.786082 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.786160 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:00.786573 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:00.788823 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:00.790846 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.790940 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:00.791230 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.791310 139863414272000 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 16:07:00.791415 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:00.791452 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:00.791482 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:00.793317 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.795614 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:00.801134 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.801392 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:00.803941 139863414272000 transformer_layer.py:213] tlayer: windowed attention.
I0123 16:07:00.807589 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:00.807643 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:00.807677 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:00.807713 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.807777 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.808327 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.808403 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.808756 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.809505 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.811949 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.812560 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.812635 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:00.812669 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:00.812726 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.812865 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:00.813223 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:00.813264 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:00.815150 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.815241 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:00.817690 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.817769 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:00.818188 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:00.820428 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:00.822388 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.822481 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:00.822772 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.822851 139863414272000 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 16:07:00.822956 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:00.822994 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:00.823024 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:00.824776 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.827086 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:00.832665 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.832916 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:00.835465 139863414272000 transformer_layer.py:213] tlayer: windowed attention.
I0123 16:07:00.839045 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:00.839098 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:00.839133 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:00.839164 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.839231 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.839831 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.839906 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.840259 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.841011 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.843463 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.844075 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.844151 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:00.844185 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:00.844243 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.844373 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:00.844686 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:00.844727 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:00.846664 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.846755 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:00.849156 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.849232 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:00.849653 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:00.851875 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:00.853774 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.853867 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:00.854155 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.854234 139863414272000 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 16:07:00.854338 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:00.854375 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:00.854405 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:00.856239 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.858510 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:00.864387 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.864635 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:00.867570 139863414272000 transformer_layer.py:213] tlayer: windowed attention.
I0123 16:07:00.871176 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:00.871230 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:00.871264 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:00.871295 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.871356 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.871916 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.871990 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.872346 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.873097 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.875577 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.876249 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.876327 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:00.876361 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:00.876418 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.876544 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:00.876853 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:00.876894 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:00.878806 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.878900 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:00.881341 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.881419 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:00.881855 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:00.884167 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:00.886190 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.886290 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:00.886592 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.886677 139863414272000 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 16:07:00.886787 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:00.886826 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:00.886857 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:00.888628 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.890982 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:00.896623 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.896878 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:00.899422 139863414272000 transformer_layer.py:213] tlayer: windowed attention.
I0123 16:07:00.903022 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:00.903077 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:00.903112 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:00.903142 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.903203 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.903812 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.903888 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.904242 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.905003 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.907461 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.908074 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.908149 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:00.908182 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:00.908239 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.908364 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:00.908675 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:00.908716 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:00.910625 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.910718 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:00.913230 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.913308 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:00.913736 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:00.915994 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:00.917889 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.917983 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:00.918272 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.918351 139863414272000 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 16:07:00.918458 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:00.918495 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:00.918526 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:00.920281 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.922669 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:00.928319 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.928574 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:00.931159 139863414272000 transformer_layer.py:213] tlayer: windowed attention.
I0123 16:07:00.934780 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:00.934833 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:00.934867 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:00.934897 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.935013 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.935561 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.935644 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.936003 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.936768 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.939242 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.939853 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.939929 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:00.939963 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:00.940020 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.940144 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:00.940455 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:00.940495 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:00.942454 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.942548 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:00.944975 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.945053 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:00.945478 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:00.947718 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:00.949607 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.949707 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:00.949993 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.950072 139863414272000 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 16:07:00.950175 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:00.950213 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:00.950243 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:00.952081 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.954385 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:00.959978 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.960231 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:00.962812 139863414272000 transformer_layer.py:213] tlayer: windowed attention.
I0123 16:07:00.966481 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:00.966536 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:00.966570 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:00.966601 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.966664 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.967215 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.967289 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.967652 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.968401 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.970881 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.971498 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.971574 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:00.971609 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:00.971668 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.971799 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:00.972110 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:00.972151 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:00.974106 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.974198 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:00.976611 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.976688 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:00.977105 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:00.979347 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:00.981228 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.981319 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:00.981607 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.981694 139863414272000 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 16:07:00.981801 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:00.981838 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:00.981869 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:00.984038 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.986322 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:00.991832 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.992084 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:00.994651 139863414272000 transformer_layer.py:213] tlayer: windowed attention.
I0123 16:07:00.998305 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:00.998358 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:00.998393 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:00.998424 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.998486 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.999033 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.999108 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:00.999473 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:01.000226 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:01.002664 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:01.003270 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:01.003345 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:01.003377 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:01.003434 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:01.003564 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:01.003877 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:01.003918 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.005860 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:01.005953 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.008364 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:01.008441 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:01.008855 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:01.011083 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.012959 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:01.013051 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.013337 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:01.013580 139863414272000 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 16:07:01.013652 139863414272000 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 16:07:01.013711 139863414272000 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 16:07:01.013764 139863414272000 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 16:07:01.013816 139863414272000 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 16:07:01.013868 139863414272000 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 16:07:01.013919 139863414272000 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 16:07:01.013969 139863414272000 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 16:07:01.014019 139863414272000 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 16:07:01.014070 139863414272000 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 16:07:01.014120 139863414272000 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 16:07:01.014170 139863414272000 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 16:07:01.014205 139863414272000 decoder_stack.py:344] dstack: Final layernorm.
I0123 16:07:01.017084 139863414272000 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 16:07:01.061239 139863414272000 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.061322 139863414272000 decoder_stack.py:333] dstack: autoregressive generator.
I0123 16:07:01.061379 139863414272000 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 16:07:01.061481 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:01.061518 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:01.061549 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:01.061610 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.063976 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:01.069351 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.069609 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:01.072209 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:07:01.084856 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:01.084909 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:01.084944 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:01.084974 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.085035 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.085599 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.085680 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.086045 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.086736 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.089285 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.089909 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.089987 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:01.090021 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:01.090079 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.090205 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:01.090310 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:01.090348 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.092200 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.092292 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.094690 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.094768 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:01.094873 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:01.097121 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.098957 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.099050 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.099337 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.099416 139863414272000 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 16:07:01.099528 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:01.099566 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:01.099597 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:01.099657 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.101886 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:01.107250 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.107505 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:01.110159 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:07:01.122389 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:01.122443 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:01.122478 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:01.122508 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.122571 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.123122 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.123197 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.123554 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.124295 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.126744 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.127351 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.127433 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:01.127468 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:01.127526 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.127655 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:01.127762 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:01.127800 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.129631 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.129733 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.132119 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.132195 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:01.132301 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:01.134530 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.136357 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.136451 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.136739 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.136818 139863414272000 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 16:07:01.136925 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:01.136967 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:01.137000 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:01.137063 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.139297 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:01.144674 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.144930 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:01.147585 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:07:01.159965 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:01.160018 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:01.160053 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:01.160084 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.160144 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.160694 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.160769 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.161125 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.162261 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.164756 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.165380 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.165456 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:01.165490 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:01.165549 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.165684 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:01.165791 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:01.165829 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.167668 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.167759 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.170161 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.170239 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:01.170345 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:01.172588 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.174447 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.174542 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.174829 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.174909 139863414272000 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 16:07:01.175014 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:01.175058 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:01.175089 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:01.175151 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.177388 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:01.182764 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.183020 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:01.185706 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:07:01.198092 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:01.198146 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:01.198181 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:01.198212 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.198274 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.198830 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.198904 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.199259 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.199982 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.202445 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.203056 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.203132 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:01.203165 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:01.203224 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.203352 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:01.203457 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:01.203494 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.205331 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.205422 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.207812 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.207890 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:01.207995 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:01.210240 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.212078 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.212171 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.212457 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.212536 139863414272000 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 16:07:01.212641 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:01.212678 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:01.212713 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:01.212777 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.215011 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:01.220366 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.220622 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:01.223286 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:07:01.235585 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:01.235637 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:01.235671 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:01.235701 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.235763 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.236317 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.236392 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.236747 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.237484 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.239963 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.240582 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.240657 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:01.240690 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:01.240747 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.240877 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:01.240984 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:01.241021 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.242875 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.242967 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.245341 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.245419 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:01.245523 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:01.247786 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.249625 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.249726 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.250016 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.250095 139863414272000 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 16:07:01.250200 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:01.250238 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:01.250268 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:01.250337 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.252545 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:01.257936 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.258195 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:01.260880 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:07:01.273210 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:01.273263 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:01.273298 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:01.273328 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.273390 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.273947 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.274023 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.274375 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.275475 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.277957 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.278566 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.278642 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:01.278676 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:01.278735 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.278862 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:01.278967 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:01.279004 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.280844 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.280936 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.283329 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.283409 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:01.283515 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:01.285762 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.287594 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.287686 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.287975 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.288055 139863414272000 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 16:07:01.288161 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:01.288199 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:01.288229 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:01.288290 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.290540 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:01.295934 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.296190 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:01.298836 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:07:01.311190 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:01.311243 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:01.311277 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:01.311307 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.311369 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.311919 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.311994 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.312352 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.313093 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.315568 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.316179 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.316253 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:01.316287 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:01.316343 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.316468 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:01.316574 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:01.316611 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.318490 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.318583 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.320961 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.321037 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:01.321143 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:01.323394 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.325229 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.325323 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.325610 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.325696 139863414272000 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 16:07:01.325802 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:01.325840 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:01.325871 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:01.325934 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.328163 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:01.333526 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.333795 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:01.336410 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:07:01.348711 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:01.348764 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:01.348798 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:01.348829 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.348890 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.349439 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.349514 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.349879 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.350601 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.353057 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.353681 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.353758 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:01.353791 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:01.353850 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.353978 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:01.354084 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:01.354122 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.355950 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.356042 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.358421 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.358499 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:01.358604 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:01.360855 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.362720 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.362812 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.363101 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.363180 139863414272000 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 16:07:01.363285 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:01.363323 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:01.363353 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:01.363414 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.365634 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:01.371046 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.371302 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:01.373982 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:07:01.386267 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:01.386321 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:01.386356 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:01.386386 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.386448 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.387001 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.387076 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.387435 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.388128 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.391058 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.391671 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.391746 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:01.391779 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:01.391836 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.391964 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:01.392069 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:01.392106 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.394019 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.394111 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.396478 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.396555 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:01.396662 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:01.398936 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.400789 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.400882 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.401170 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.401251 139863414272000 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 16:07:01.401361 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:01.401399 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:01.401430 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:01.401491 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.403728 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:01.409117 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.409369 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:01.412052 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:07:01.424360 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:01.424414 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:01.424448 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:01.424478 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.424539 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.425087 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.425160 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.425508 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.426264 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.428883 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.429490 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.429565 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:01.429598 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:01.429663 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.429791 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:01.429896 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:01.429933 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.431763 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.431853 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.434222 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.434299 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:01.434404 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:01.436620 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.438472 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.438566 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.438857 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.438935 139863414272000 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 16:07:01.439040 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:01.439077 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:01.439108 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:01.439168 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.441383 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:01.446725 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.446989 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:01.449663 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:07:01.462070 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:01.462124 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:01.462158 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:01.462189 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.462250 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.462803 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.462877 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.463234 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.463911 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.466419 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.467033 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.467109 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:01.467143 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:01.467200 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.467326 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:01.467430 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:01.467467 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.469298 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.469390 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.471793 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.471870 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:01.471976 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:01.474243 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.476086 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.476179 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.476467 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.476546 139863414272000 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 16:07:01.476652 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:01.476690 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:01.476720 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:01.476782 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.479011 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:01.484388 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.484650 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:01.487341 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:07:01.499713 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:01.499767 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:01.499800 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:01.499830 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.499891 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.500437 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.500510 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.500863 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.501535 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.504404 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.505019 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.505094 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:01.505127 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:01.505185 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.505310 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:01.505416 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:01.505453 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.507321 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.507414 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.509826 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.509903 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:01.510009 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:01.512258 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.514105 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.514198 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.514489 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.514573 139863414272000 decoder_stack.py:344] dstack: Final layernorm.
I0123 16:07:01.517412 139863414272000 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 16:07:01.566983 139863414272000 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.567068 139863414272000 decoder_stack.py:333] dstack: autoregressive generator.
I0123 16:07:01.567119 139863414272000 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 16:07:01.567221 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:01.567258 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:01.567288 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:01.567358 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.569637 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:01.575270 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.575524 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:01.578086 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:07:01.590302 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:01.590356 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:01.590390 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:01.590420 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.590481 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.591030 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.591104 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.591460 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.592129 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.594576 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.595185 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.595260 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:01.595294 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:01.595352 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.595480 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:01.595586 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:01.595623 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.597504 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.597595 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.599966 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.600044 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:01.600148 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:01.602290 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.604110 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.604203 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.604493 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.604572 139863414272000 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 16:07:01.604679 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:01.604717 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:01.604748 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:01.604808 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.607058 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:01.612498 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.612753 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:01.615325 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:07:01.627614 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:01.627669 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:01.627704 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:01.627734 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.627796 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.628347 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.628422 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.628774 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.629439 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.631886 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.632507 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.632583 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:01.632616 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:01.632673 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.632800 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:01.632906 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:01.632944 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.634884 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.634979 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.637359 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.637437 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:01.637544 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:01.639726 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.641546 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.641646 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.641938 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.642017 139863414272000 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 16:07:01.642122 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:01.642160 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:01.642191 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:01.642254 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.644472 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:01.649853 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.650110 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:01.652652 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:07:01.664851 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:01.664906 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:01.664940 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:01.664970 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.665031 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.665575 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.665658 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.666014 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.666681 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.669094 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.669708 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.669784 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:01.669817 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:01.669875 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.670000 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:01.670106 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:01.670144 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.672040 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.672131 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.674506 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.674586 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:01.674691 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:01.676844 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.678687 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.678780 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.679066 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.679144 139863414272000 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 16:07:01.679248 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:01.679285 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:01.679314 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:01.679375 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.681584 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:01.687494 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.687752 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:01.690350 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:07:01.702633 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:01.702688 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:01.702722 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:01.702752 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.702814 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.703360 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.703434 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.703788 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.704464 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.706952 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.707562 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.707637 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:01.707671 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:01.707729 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.707854 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:01.707958 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:01.707995 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.709911 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.710003 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.712365 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.712441 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:01.712548 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:01.714730 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.716555 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.716648 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.716935 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.717014 139863414272000 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 16:07:01.717118 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:01.717156 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:01.717185 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:01.717246 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.719462 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:01.724908 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.725163 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:01.727730 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:07:01.740006 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:01.740060 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:01.740094 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:01.740124 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.740184 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.740735 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.740811 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.741164 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.741847 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.744281 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.744885 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.744961 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:01.744994 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:01.745051 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.745176 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:01.745283 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:01.745319 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.747222 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.747315 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.749698 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.749775 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:01.749882 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:01.752042 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.753877 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.753970 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.754254 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.754333 139863414272000 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 16:07:01.754437 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:01.754474 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:01.754503 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:01.754565 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.756773 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:01.762243 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.762506 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:01.765096 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:07:01.777368 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:01.777423 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:01.777457 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:01.777487 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.777549 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.778101 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.778176 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.778530 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.779202 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.781676 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.782283 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.782357 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:01.782390 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:01.782448 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.782575 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:01.782680 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:01.782717 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.784608 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.784698 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.787051 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.787129 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:01.787235 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:01.789394 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.791239 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.791332 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.791619 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.791698 139863414272000 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 16:07:01.791803 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:01.791841 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:01.791872 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:01.791934 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.794166 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:01.799983 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.800244 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:01.802804 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:07:01.815031 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:01.815085 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:01.815119 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:01.815149 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.815209 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.815757 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.815832 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.816183 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.816857 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.819308 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.819918 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.819992 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:01.820025 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:01.820082 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.820205 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:01.820312 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:01.820349 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.822276 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.822368 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.824723 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.824799 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:01.824905 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:01.827090 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.828908 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.828999 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.829282 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.829361 139863414272000 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 16:07:01.829465 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:01.829501 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:01.829530 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:01.829592 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.831785 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:01.837116 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.837369 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:01.839924 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:07:01.852156 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:01.852210 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:01.852243 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:01.852274 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.852337 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.852883 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.852958 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.853310 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.853990 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.856430 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.857038 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.857111 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:01.857144 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:01.857201 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.857325 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:01.857430 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:01.857467 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.859496 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.859591 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.862107 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.862187 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:01.862298 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:01.864535 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.866467 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.866563 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.866864 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.866946 139863414272000 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 16:07:01.867056 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:01.867095 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:01.867127 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:01.867191 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.869505 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:01.875199 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.875466 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:01.878165 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:07:01.891104 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:01.891159 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:01.891195 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:01.891227 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.891291 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.891864 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.891939 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.892310 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.893012 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.895570 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.896198 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.896275 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:01.896311 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:01.896370 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.896499 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:01.896610 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:01.896649 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.898616 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.898710 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.901172 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.901251 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:01.901362 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:01.903667 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.905565 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.905666 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.905968 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.906049 139863414272000 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 16:07:01.906160 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:01.906200 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:01.906232 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:01.906297 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.908594 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:01.914436 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.914692 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:01.917264 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:07:01.929577 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:01.929636 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:01.929682 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:01.929715 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.929776 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.930319 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.930392 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.930741 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.931411 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.933849 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.934446 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.934518 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:01.934551 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:01.934609 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.934731 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:01.934836 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:01.934872 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.936774 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.936864 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.939252 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.939328 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:01.939435 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:01.941612 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.943448 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.943540 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.943826 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.943904 139863414272000 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 16:07:01.944009 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:01.944046 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:01.944076 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:01.944137 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.946354 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:01.951751 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.952005 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:01.954560 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:07:01.966867 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:01.966928 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:01.966964 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:01.966994 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.967055 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.967609 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.967682 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.968034 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.968701 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.971165 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.971772 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.971845 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:01.971879 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:01.971936 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.972059 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:01.972164 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:01.972200 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.974088 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.974179 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.976541 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.976616 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:01.976722 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:01.978880 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:01.980697 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.980787 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:01.981073 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.981151 139863414272000 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 16:07:01.981256 139863414272000 transformer_layer.py:154] tlayer: recurrent = False
I0123 16:07:01.981294 139863414272000 transformer_layer.py:155] tlayer: compute_importance = False
I0123 16:07:01.981324 139863414272000 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 16:07:01.981386 139863414272000 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.983606 139863414272000 transformer_base.py:161] kvq: pre_attn dropout.
I0123 16:07:01.988992 139863414272000 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:01.989247 139863414272000 transformer_base.py:194] kvq: normalize keys, queries.
I0123 16:07:01.991817 139863414272000 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 16:07:02.004052 139863414272000 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 16:07:02.004105 139863414272000 attention.py:418] Single window, no scan.
I0123 16:07:02.004145 139863414272000 transformer_layer.py:389] tlayer: self-attention.
I0123 16:07:02.004176 139863414272000 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:02.004237 139863414272000 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:02.004785 139863414272000 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:02.004858 139863414272000 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:02.005209 139863414272000 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:02.005887 139863414272000 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:02.008327 139863414272000 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:02.008925 139863414272000 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:02.008998 139863414272000 transformer_layer.py:468] tlayer: End windows.
I0123 16:07:02.009030 139863414272000 transformer_layer.py:472] tlayer: final FFN.
I0123 16:07:02.009087 139863414272000 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:02.009209 139863414272000 transformer_base.py:410] tbase: post-attention MLP.
I0123 16:07:02.009314 139863414272000 nn_components.py:325] mlp: activation = None
I0123 16:07:02.009351 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:02.011253 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:02.011345 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:02.013695 139863414272000 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:02.013771 139863414272000 transformer_base.py:443] tbase: final FFN
I0123 16:07:02.013877 139863414272000 nn_components.py:320] mlp: hidden 4096, relu
I0123 16:07:02.016028 139863414272000 nn_components.py:329] mlp: final activation = None
I0123 16:07:02.017852 139863414272000 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:02.017945 139863414272000 nn_components.py:261] mlp: residual
I0123 16:07:02.018232 139863414272000 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:02.018316 139863414272000 decoder_stack.py:344] dstack: Final layernorm.
I0123 16:07:02.021090 139863414272000 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 16:07:14.006932 139863414272000 alphageometry.py:566] LM output (score=-1.462054): "k : C b e k 14 D b k e k 15 ;"
I0123 16:07:14.007258 139863414272000 alphageometry.py:567] Translation: "k = on_line k b e, on_bline k e b"

I0123 16:07:14.007324 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b ? coll i c j"
I0123 16:07:14.007474 139863414272000 graph.py:498] 
I0123 16:07:14.007531 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b ? coll i c j
I0123 16:07:16.337918 139863414272000 ddar.py:60] Depth 1/1000 time = 2.3128528594970703
I0123 16:07:19.599735 139863414272000 ddar.py:60] Depth 2/1000 time = 3.261643409729004
I0123 16:07:24.326261 139863414272000 ddar.py:60] Depth 3/1000 time = 4.7263500690460205
I0123 16:07:29.352226 139863414272000 ddar.py:60] Depth 4/1000 time = 5.025787591934204
I0123 16:07:34.770040 139863414272000 ddar.py:60] Depth 5/1000 time = 5.417619705200195
I0123 16:07:40.114607 139863414272000 ddar.py:60] Depth 6/1000 time = 5.34395432472229
I0123 16:07:40.137787 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:07:40.137939 139863414272000 alphageometry.py:566] LM output (score=-2.066018): "k : T a j a k 14 ;"
I0123 16:07:40.137983 139863414272000 alphageometry.py:567] Translation: "k = on_tline k a a j"

I0123 16:07:40.138035 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j ? coll i c j"
I0123 16:07:40.138193 139863414272000 graph.py:498] 
I0123 16:07:40.138255 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j ? coll i c j
I0123 16:07:41.636120 139863414272000 ddar.py:60] Depth 1/1000 time = 1.4773852825164795
I0123 16:07:43.964087 139863414272000 ddar.py:60] Depth 2/1000 time = 2.327788829803467
I0123 16:07:46.901047 139863414272000 ddar.py:60] Depth 3/1000 time = 2.936781167984009
I0123 16:07:50.247696 139863414272000 ddar.py:60] Depth 4/1000 time = 3.346471071243286
I0123 16:07:53.662330 139863414272000 ddar.py:60] Depth 5/1000 time = 3.4143729209899902
I0123 16:07:57.052077 139863414272000 ddar.py:60] Depth 6/1000 time = 3.389029026031494
I0123 16:07:57.067876 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:07:57.067976 139863414272000 alphageometry.py:566] LM output (score=-2.227770): "k : T a f f k 14 ;"
I0123 16:07:57.068015 139863414272000 alphageometry.py:567] Translation: "k = on_tline k f a f"

I0123 16:07:57.068055 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f ? coll i c j"
I0123 16:07:57.068199 139863414272000 graph.py:498] 
I0123 16:07:57.068257 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f ? coll i c j
I0123 16:07:58.349820 139863414272000 ddar.py:60] Depth 1/1000 time = 1.2672948837280273
I0123 16:08:01.494998 139863414272000 ddar.py:60] Depth 2/1000 time = 3.1450047492980957
I0123 16:08:05.022217 139863414272000 ddar.py:60] Depth 3/1000 time = 3.5270373821258545
I0123 16:08:08.878433 139863414272000 ddar.py:60] Depth 4/1000 time = 3.856036901473999
I0123 16:08:13.184470 139863414272000 ddar.py:60] Depth 5/1000 time = 4.305802822113037
I0123 16:08:17.016660 139863414272000 ddar.py:60] Depth 6/1000 time = 3.8315768241882324
I0123 16:08:17.032332 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:08:17.032457 139863414272000 alphageometry.py:566] LM output (score=-2.255148): "k : T b f c k 14 ;"
I0123 16:08:17.032500 139863414272000 alphageometry.py:567] Translation: "k = on_tline k c b f"

I0123 16:08:17.032541 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f ? coll i c j"
I0123 16:08:17.032701 139863414272000 graph.py:498] 
I0123 16:08:17.032761 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f ? coll i c j
I0123 16:08:18.496119 139863414272000 ddar.py:60] Depth 1/1000 time = 1.448648452758789
I0123 16:08:21.748358 139863414272000 ddar.py:60] Depth 2/1000 time = 3.2520527839660645
I0123 16:08:25.141919 139863414272000 ddar.py:60] Depth 3/1000 time = 3.39337158203125
I0123 16:08:29.285222 139863414272000 ddar.py:60] Depth 4/1000 time = 4.143089056015015
I0123 16:08:33.462541 139863414272000 ddar.py:60] Depth 5/1000 time = 4.17707085609436
I0123 16:08:37.620160 139863414272000 ddar.py:60] Depth 6/1000 time = 4.157000541687012
I0123 16:08:37.633861 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:08:37.633969 139863414272000 alphageometry.py:566] LM output (score=-2.327469): "k : C b j k 14 D b k j k 15 ;"
I0123 16:08:37.634008 139863414272000 alphageometry.py:567] Translation: "k = on_line k b j, on_bline k j b"

I0123 16:08:37.634049 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b ? coll i c j"
I0123 16:08:37.634193 139863414272000 graph.py:498] 
I0123 16:08:37.634253 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b ? coll i c j
I0123 16:08:39.581852 139863414272000 ddar.py:60] Depth 1/1000 time = 1.9309635162353516
I0123 16:08:42.926392 139863414272000 ddar.py:60] Depth 2/1000 time = 3.3443570137023926
I0123 16:08:47.083714 139863414272000 ddar.py:60] Depth 3/1000 time = 4.157143831253052
I0123 16:08:51.961298 139863414272000 ddar.py:60] Depth 4/1000 time = 4.877357721328735
I0123 16:08:56.858766 139863414272000 ddar.py:60] Depth 5/1000 time = 4.897158145904541
I0123 16:09:01.759438 139863414272000 ddar.py:60] Depth 6/1000 time = 4.9000725746154785
I0123 16:09:01.785473 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:09:01.785586 139863414272000 alphageometry.py:566] LM output (score=-2.363694): "k : T b e b k 14 ;"
I0123 16:09:01.785624 139863414272000 alphageometry.py:567] Translation: "k = on_tline k b b e"

I0123 16:09:01.785671 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k b b e ? coll i c j"
I0123 16:09:01.785817 139863414272000 graph.py:498] 
I0123 16:09:01.785876 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k b b e ? coll i c j
I0123 16:09:03.098498 139863414272000 ddar.py:60] Depth 1/1000 time = 1.2990574836730957
I0123 16:09:05.469580 139863414272000 ddar.py:60] Depth 2/1000 time = 2.3709089756011963
I0123 16:09:08.283023 139863414272000 ddar.py:60] Depth 3/1000 time = 2.8132619857788086
I0123 16:09:11.656569 139863414272000 ddar.py:60] Depth 4/1000 time = 3.373332977294922
I0123 16:09:15.031120 139863414272000 ddar.py:60] Depth 5/1000 time = 3.3743338584899902
I0123 16:09:18.376901 139863414272000 ddar.py:60] Depth 6/1000 time = 3.3452067375183105
I0123 16:09:18.392594 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:09:18.392713 139863414272000 alphageometry.py:566] LM output (score=-2.370402): "k : T a e e k 14 ;"
I0123 16:09:18.392753 139863414272000 alphageometry.py:567] Translation: "k = on_tline k e a e"

I0123 16:09:18.392791 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k e a e ? coll i c j"
I0123 16:09:18.392933 139863414272000 graph.py:498] 
I0123 16:09:18.392990 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k e a e ? coll i c j
I0123 16:09:19.696995 139863414272000 ddar.py:60] Depth 1/1000 time = 1.289423942565918
I0123 16:09:23.085123 139863414272000 ddar.py:60] Depth 2/1000 time = 3.3879387378692627
I0123 16:09:26.529186 139863414272000 ddar.py:60] Depth 3/1000 time = 3.4438836574554443
I0123 16:09:30.833927 139863414272000 ddar.py:60] Depth 4/1000 time = 4.304559946060181
I0123 16:09:35.114034 139863414272000 ddar.py:60] Depth 5/1000 time = 4.279865503311157
I0123 16:09:39.413266 139863414272000 ddar.py:60] Depth 6/1000 time = 4.298491477966309
I0123 16:09:39.428704 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:09:39.428806 139863414272000 alphageometry.py:566] LM output (score=-2.406330): "k : C b i k 14 D b k i k 15 ;"
I0123 16:09:39.428845 139863414272000 alphageometry.py:567] Translation: "k = on_line k b i, on_bline k i b"

I0123 16:09:39.428884 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b i, on_bline k i b ? coll i c j"
I0123 16:09:39.429029 139863414272000 graph.py:498] 
I0123 16:09:39.429086 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b i, on_bline k i b ? coll i c j
I0123 16:09:41.061426 139863414272000 ddar.py:60] Depth 1/1000 time = 1.6156425476074219
I0123 16:09:43.561653 139863414272000 ddar.py:60] Depth 2/1000 time = 2.5000340938568115
I0123 16:09:46.509230 139863414272000 ddar.py:60] Depth 3/1000 time = 2.94738507270813
I0123 16:09:49.755693 139863414272000 ddar.py:60] Depth 4/1000 time = 3.2462689876556396
I0123 16:09:53.111284 139863414272000 ddar.py:60] Depth 5/1000 time = 3.355394124984741
I0123 16:09:56.522300 139863414272000 ddar.py:60] Depth 6/1000 time = 3.4104397296905518
I0123 16:09:56.542965 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:09:56.543080 139863414272000 alphageometry.py:566] LM output (score=-2.445600): "k : P a b c k 14 T a b a k 15 ;"
I0123 16:09:56.543119 139863414272000 alphageometry.py:567] Translation: "k = on_pline k c a b, on_tline k a a b"

I0123 16:09:56.543171 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_pline k c a b, on_tline k a a b ? coll i c j"
I0123 16:09:56.543324 139863414272000 graph.py:498] 
I0123 16:09:56.543382 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_pline k c a b, on_tline k a a b ? coll i c j
I0123 16:09:58.129819 139863414272000 ddar.py:60] Depth 1/1000 time = 1.568434238433838
I0123 16:10:00.939653 139863414272000 ddar.py:60] Depth 2/1000 time = 2.809628963470459
I0123 16:10:04.121838 139863414272000 ddar.py:60] Depth 3/1000 time = 3.181983470916748
I0123 16:10:08.188153 139863414272000 ddar.py:60] Depth 4/1000 time = 4.066128253936768
I0123 16:10:12.364108 139863414272000 ddar.py:60] Depth 5/1000 time = 4.175763130187988
I0123 16:10:16.299386 139863414272000 ddar.py:60] Depth 6/1000 time = 3.935056686401367
I0123 16:10:20.652571 139863414272000 ddar.py:60] Depth 7/1000 time = 4.352302551269531
I0123 16:10:20.685670 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:10:20.685776 139863414272000 alphageometry.py:566] LM output (score=-2.565348): "k : T a c c k 14 ;"
I0123 16:10:20.685815 139863414272000 alphageometry.py:567] Translation: "k = on_tline k c a c"

I0123 16:10:20.685856 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c a c ? coll i c j"
I0123 16:10:20.685999 139863414272000 graph.py:498] 
I0123 16:10:20.686054 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c a c ? coll i c j
I0123 16:10:22.019122 139863414272000 ddar.py:60] Depth 1/1000 time = 1.3197612762451172
I0123 16:10:24.363676 139863414272000 ddar.py:60] Depth 2/1000 time = 2.344369411468506
I0123 16:10:27.193251 139863414272000 ddar.py:60] Depth 3/1000 time = 2.8293752670288086
I0123 16:10:30.574405 139863414272000 ddar.py:60] Depth 4/1000 time = 3.380952835083008
I0123 16:10:33.958053 139863414272000 ddar.py:60] Depth 5/1000 time = 3.3834407329559326
I0123 16:10:37.371005 139863414272000 ddar.py:60] Depth 6/1000 time = 3.412397861480713
I0123 16:10:37.386302 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:10:37.386405 139863414272000 alphageometry.py:566] LM output (score=-2.606256): "k : T a e c k 14 ;"
I0123 16:10:37.386445 139863414272000 alphageometry.py:567] Translation: "k = on_tline k c a e"

I0123 16:10:37.386485 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c a e ? coll i c j"
I0123 16:10:37.386624 139863414272000 graph.py:498] 
I0123 16:10:37.386681 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c a e ? coll i c j
I0123 16:10:38.726182 139863414272000 ddar.py:60] Depth 1/1000 time = 1.324171543121338
I0123 16:10:41.927557 139863414272000 ddar.py:60] Depth 2/1000 time = 3.201080322265625
I0123 16:10:45.413174 139863414272000 ddar.py:60] Depth 3/1000 time = 3.485438346862793
I0123 16:10:49.447819 139863414272000 ddar.py:60] Depth 4/1000 time = 4.034456491470337
I0123 16:10:53.743230 139863414272000 ddar.py:60] Depth 5/1000 time = 4.295209169387817
I0123 16:10:58.055974 139863414272000 ddar.py:60] Depth 6/1000 time = 4.312193870544434
I0123 16:10:58.071222 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:10:58.071327 139863414272000 alphageometry.py:566] LM output (score=-2.662633): "k : T b e e k 14 ;"
I0123 16:10:58.071367 139863414272000 alphageometry.py:567] Translation: "k = on_tline k e b e"

I0123 16:10:58.071405 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k e b e ? coll i c j"
I0123 16:10:58.071570 139863414272000 graph.py:498] 
I0123 16:10:58.071630 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k e b e ? coll i c j
I0123 16:10:59.446964 139863414272000 ddar.py:60] Depth 1/1000 time = 1.3594162464141846
I0123 16:11:02.657727 139863414272000 ddar.py:60] Depth 2/1000 time = 3.2105712890625
I0123 16:11:06.217679 139863414272000 ddar.py:60] Depth 3/1000 time = 3.5597431659698486
I0123 16:11:10.358820 139863414272000 ddar.py:60] Depth 4/1000 time = 4.140944957733154
I0123 16:11:14.470530 139863414272000 ddar.py:60] Depth 5/1000 time = 4.111507415771484
I0123 16:11:18.849628 139863414272000 ddar.py:60] Depth 6/1000 time = 4.3785400390625
I0123 16:11:18.865394 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:11:18.865513 139863414272000 alphageometry.py:566] LM output (score=-2.701917): "k : T b j j k 14 ;"
I0123 16:11:18.865554 139863414272000 alphageometry.py:567] Translation: "k = on_tline k j b j"

I0123 16:11:18.865592 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k j b j ? coll i c j"
I0123 16:11:18.865747 139863414272000 graph.py:498] 
I0123 16:11:18.865808 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k j b j ? coll i c j
I0123 16:11:19.964910 139863414272000 ddar.py:60] Depth 1/1000 time = 1.0854747295379639
I0123 16:11:22.583778 139863414272000 ddar.py:60] Depth 2/1000 time = 2.6186718940734863
I0123 16:11:25.259834 139863414272000 ddar.py:60] Depth 3/1000 time = 2.6758203506469727
I0123 16:11:28.760535 139863414272000 ddar.py:60] Depth 4/1000 time = 3.500513792037964
I0123 16:11:32.292062 139863414272000 ddar.py:60] Depth 5/1000 time = 3.531311511993408
I0123 16:11:35.525151 139863414272000 ddar.py:60] Depth 6/1000 time = 3.2325098514556885
I0123 16:11:35.539081 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:11:35.539171 139863414272000 alphageometry.py:566] LM output (score=-2.714798): "k : T a f e k 14 ;"
I0123 16:11:35.539210 139863414272000 alphageometry.py:567] Translation: "k = on_tline k e a f"

I0123 16:11:35.539248 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k e a f ? coll i c j"
I0123 16:11:35.539393 139863414272000 graph.py:498] 
I0123 16:11:35.539447 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k e a f ? coll i c j
I0123 16:11:37.130909 139863414272000 ddar.py:60] Depth 1/1000 time = 1.5769000053405762
I0123 16:11:39.547939 139863414272000 ddar.py:60] Depth 2/1000 time = 2.416851282119751
I0123 16:11:42.193945 139863414272000 ddar.py:60] Depth 3/1000 time = 2.645820379257202
I0123 16:11:45.662615 139863414272000 ddar.py:60] Depth 4/1000 time = 3.468451738357544
I0123 16:11:49.128055 139863414272000 ddar.py:60] Depth 5/1000 time = 3.465186595916748
I0123 16:11:52.574720 139863414272000 ddar.py:60] Depth 6/1000 time = 3.446065664291382
I0123 16:11:52.589801 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:11:52.589926 139863414272000 alphageometry.py:566] LM output (score=-2.725183): "k : T b f b k 14 ;"
I0123 16:11:52.589965 139863414272000 alphageometry.py:567] Translation: "k = on_tline k b b f"

I0123 16:11:52.590003 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k b b f ? coll i c j"
I0123 16:11:52.590148 139863414272000 graph.py:498] 
I0123 16:11:52.590205 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k b b f ? coll i c j
I0123 16:11:53.962678 139863414272000 ddar.py:60] Depth 1/1000 time = 1.355506181716919
I0123 16:11:56.402566 139863414272000 ddar.py:60] Depth 2/1000 time = 2.439715623855591
I0123 16:11:59.382419 139863414272000 ddar.py:60] Depth 3/1000 time = 2.9796741008758545
I0123 16:12:02.423024 139863414272000 ddar.py:60] Depth 4/1000 time = 3.0403988361358643
I0123 16:12:05.558295 139863414272000 ddar.py:60] Depth 5/1000 time = 3.1349992752075195
I0123 16:12:08.967478 139863414272000 ddar.py:60] Depth 6/1000 time = 3.408389091491699
I0123 16:12:08.984394 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:12:08.984497 139863414272000 alphageometry.py:566] LM output (score=-2.738769): "k : T g i g k 14 ;"
I0123 16:12:08.984536 139863414272000 alphageometry.py:567] Translation: "k = on_tline k g g i"

I0123 16:12:08.984573 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k g g i ? coll i c j"
I0123 16:12:08.984715 139863414272000 graph.py:498] 
I0123 16:12:08.984773 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k g g i ? coll i c j
I0123 16:12:10.620820 139863414272000 ddar.py:60] Depth 1/1000 time = 1.6227569580078125
I0123 16:12:12.668085 139863414272000 ddar.py:60] Depth 2/1000 time = 2.0470826625823975
I0123 16:12:15.312486 139863414272000 ddar.py:60] Depth 3/1000 time = 2.644212007522583
I0123 16:12:18.718022 139863414272000 ddar.py:60] Depth 4/1000 time = 3.405357837677002
I0123 16:12:22.098978 139863414272000 ddar.py:60] Depth 5/1000 time = 3.380756139755249
I0123 16:12:25.253446 139863414272000 ddar.py:60] Depth 6/1000 time = 3.153748035430908
I0123 16:12:25.269109 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:12:25.269219 139863414272000 alphageometry.py:566] LM output (score=-2.761155): "k : T a e a k 14 ;"
I0123 16:12:25.269260 139863414272000 alphageometry.py:567] Translation: "k = on_tline k a a e"

I0123 16:12:25.269299 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a e ? coll i c j"
I0123 16:12:25.269439 139863414272000 graph.py:498] 
I0123 16:12:25.269497 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a e ? coll i c j
I0123 16:12:26.677220 139863414272000 ddar.py:60] Depth 1/1000 time = 1.394777774810791
I0123 16:12:29.458236 139863414272000 ddar.py:60] Depth 2/1000 time = 2.7807979583740234
I0123 16:12:32.196608 139863414272000 ddar.py:60] Depth 3/1000 time = 2.7381951808929443
I0123 16:12:35.455853 139863414272000 ddar.py:60] Depth 4/1000 time = 3.2590651512145996
I0123 16:12:38.688545 139863414272000 ddar.py:60] Depth 5/1000 time = 3.2324881553649902
I0123 16:12:42.202786 139863414272000 ddar.py:60] Depth 6/1000 time = 3.5136911869049072
I0123 16:12:42.217483 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:12:42.217575 139863414272000 alphageometry.py:566] LM output (score=-2.811442): "k : T a e g k 14 ;"
I0123 16:12:42.217613 139863414272000 alphageometry.py:567] Translation: "k = on_tline k g a e"

I0123 16:12:42.217655 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k g a e ? coll i c j"
I0123 16:12:42.217796 139863414272000 graph.py:498] 
I0123 16:12:42.217851 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k g a e ? coll i c j
I0123 16:12:43.610886 139863414272000 ddar.py:60] Depth 1/1000 time = 1.3800878524780273
I0123 16:12:46.131809 139863414272000 ddar.py:60] Depth 2/1000 time = 2.5207300186157227
I0123 16:12:48.921977 139863414272000 ddar.py:60] Depth 3/1000 time = 2.7899720668792725
I0123 16:12:52.307773 139863414272000 ddar.py:60] Depth 4/1000 time = 3.3855974674224854
I0123 16:12:55.974113 139863414272000 ddar.py:60] Depth 5/1000 time = 3.666163206100464
I0123 16:12:59.365384 139863414272000 ddar.py:60] Depth 6/1000 time = 3.3906850814819336
I0123 16:12:59.378561 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:12:59.378670 139863414272000 alphageometry.py:566] LM output (score=-2.814112): "k : T f j j k 14 ;"
I0123 16:12:59.378712 139863414272000 alphageometry.py:567] Translation: "k = on_tline k j f j"

I0123 16:12:59.378751 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k j f j ? coll i c j"
I0123 16:12:59.378894 139863414272000 graph.py:498] 
I0123 16:12:59.378949 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k j f j ? coll i c j
I0123 16:13:00.818862 139863414272000 ddar.py:60] Depth 1/1000 time = 1.4214894771575928
I0123 16:13:03.265234 139863414272000 ddar.py:60] Depth 2/1000 time = 2.446202039718628
I0123 16:13:06.078656 139863414272000 ddar.py:60] Depth 3/1000 time = 2.813234806060791
I0123 16:13:09.446788 139863414272000 ddar.py:60] Depth 4/1000 time = 3.3679025173187256
I0123 16:13:12.820717 139863414272000 ddar.py:60] Depth 5/1000 time = 3.3736186027526855
I0123 16:13:16.087729 139863414272000 ddar.py:60] Depth 6/1000 time = 3.266423225402832
I0123 16:13:16.102702 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:13:16.102823 139863414272000 alphageometry.py:566] LM output (score=-2.856980): "k : T a j j k 14 ;"
I0123 16:13:16.102864 139863414272000 alphageometry.py:567] Translation: "k = on_tline k j a j"

I0123 16:13:16.102903 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k j a j ? coll i c j"
I0123 16:13:16.103061 139863414272000 graph.py:498] 
I0123 16:13:16.103119 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k j a j ? coll i c j
I0123 16:13:17.815733 139863414272000 ddar.py:60] Depth 1/1000 time = 1.6972646713256836
I0123 16:13:20.291177 139863414272000 ddar.py:60] Depth 2/1000 time = 2.4752554893493652
I0123 16:13:22.793670 139863414272000 ddar.py:60] Depth 3/1000 time = 2.5022854804992676
I0123 16:13:26.460949 139863414272000 ddar.py:60] Depth 4/1000 time = 3.6670889854431152
I0123 16:13:30.176375 139863414272000 ddar.py:60] Depth 5/1000 time = 3.7151846885681152
I0123 16:13:33.600990 139863414272000 ddar.py:60] Depth 6/1000 time = 3.4238834381103516
I0123 16:13:33.616236 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:13:33.616365 139863414272000 alphageometry.py:566] LM output (score=-2.871175): "k : T g j g k 14 ;"
I0123 16:13:33.616407 139863414272000 alphageometry.py:567] Translation: "k = on_tline k g g j"

I0123 16:13:33.616446 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k g g j ? coll i c j"
I0123 16:13:33.616592 139863414272000 graph.py:498] 
I0123 16:13:33.616651 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k g g j ? coll i c j
I0123 16:13:34.764280 139863414272000 ddar.py:60] Depth 1/1000 time = 1.1302988529205322
I0123 16:13:37.042707 139863414272000 ddar.py:60] Depth 2/1000 time = 2.278249740600586
I0123 16:13:39.737637 139863414272000 ddar.py:60] Depth 3/1000 time = 2.694749355316162
I0123 16:13:42.893213 139863414272000 ddar.py:60] Depth 4/1000 time = 3.155380964279175
I0123 16:13:46.395118 139863414272000 ddar.py:60] Depth 5/1000 time = 3.5017189979553223
I0123 16:13:49.260349 139863414272000 ddar.py:60] Depth 6/1000 time = 2.8646750450134277
I0123 16:13:49.277218 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:13:49.277316 139863414272000 alphageometry.py:566] LM output (score=-2.907408): "k : T f j g k 14 ;"
I0123 16:13:49.277358 139863414272000 alphageometry.py:567] Translation: "k = on_tline k g f j"

I0123 16:13:49.277399 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k g f j ? coll i c j"
I0123 16:13:49.277536 139863414272000 graph.py:498] 
I0123 16:13:49.277596 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k g f j ? coll i c j
I0123 16:13:51.024654 139863414272000 ddar.py:60] Depth 1/1000 time = 1.7310197353363037
I0123 16:13:53.515778 139863414272000 ddar.py:60] Depth 2/1000 time = 2.4909145832061768
I0123 16:13:56.344271 139863414272000 ddar.py:60] Depth 3/1000 time = 2.8282670974731445
I0123 16:13:59.694112 139863414272000 ddar.py:60] Depth 4/1000 time = 3.349660873413086
I0123 16:14:03.029497 139863414272000 ddar.py:60] Depth 5/1000 time = 3.3351798057556152
I0123 16:14:06.329281 139863414272000 ddar.py:60] Depth 6/1000 time = 3.2992124557495117
I0123 16:14:06.344498 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:14:06.344617 139863414272000 alphageometry.py:566] LM output (score=-2.925608): "k : T b c b k 14 ;"
I0123 16:14:06.344671 139863414272000 alphageometry.py:567] Translation: "k = on_tline k b b c"

I0123 16:14:06.344712 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k b b c ? coll i c j"
I0123 16:14:06.344861 139863414272000 graph.py:498] 
I0123 16:14:06.344918 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k b b c ? coll i c j
I0123 16:14:08.093590 139863414272000 ddar.py:60] Depth 1/1000 time = 1.735004186630249
I0123 16:14:10.276139 139863414272000 ddar.py:60] Depth 2/1000 time = 2.1823582649230957
I0123 16:14:13.490337 139863414272000 ddar.py:60] Depth 3/1000 time = 3.2139766216278076
I0123 16:14:16.922758 139863414272000 ddar.py:60] Depth 4/1000 time = 3.4321179389953613
I0123 16:14:20.315216 139863414272000 ddar.py:60] Depth 5/1000 time = 3.3922712802886963
I0123 16:14:23.654753 139863414272000 ddar.py:60] Depth 6/1000 time = 3.33893084526062
I0123 16:14:23.669198 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:14:23.669304 139863414272000 alphageometry.py:566] LM output (score=-2.947860): "k : T d f f k 14 ;"
I0123 16:14:23.669344 139863414272000 alphageometry.py:567] Translation: "k = on_tline k f d f"

I0123 16:14:23.669383 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f d f ? coll i c j"
I0123 16:14:23.669529 139863414272000 graph.py:498] 
I0123 16:14:23.669587 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f d f ? coll i c j
I0123 16:14:25.120407 139863414272000 ddar.py:60] Depth 1/1000 time = 1.4337048530578613
I0123 16:14:27.588446 139863414272000 ddar.py:60] Depth 2/1000 time = 2.4678525924682617
I0123 16:14:30.394279 139863414272000 ddar.py:60] Depth 3/1000 time = 2.805649995803833
I0123 16:14:33.672152 139863414272000 ddar.py:60] Depth 4/1000 time = 3.277682304382324
I0123 16:14:36.972835 139863414272000 ddar.py:60] Depth 5/1000 time = 3.3004651069641113
I0123 16:14:40.229525 139863414272000 ddar.py:60] Depth 6/1000 time = 3.256094217300415
I0123 16:14:40.246698 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:14:40.246825 139863414272000 alphageometry.py:566] LM output (score=-2.996692): "k : T b c i k 14 ;"
I0123 16:14:40.246867 139863414272000 alphageometry.py:567] Translation: "k = on_tline k i b c"

I0123 16:14:40.246910 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k i b c ? coll i c j"
I0123 16:14:40.247059 139863414272000 graph.py:498] 
I0123 16:14:40.247118 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k i b c ? coll i c j
I0123 16:14:41.405381 139863414272000 ddar.py:60] Depth 1/1000 time = 1.1443595886230469
I0123 16:14:44.023976 139863414272000 ddar.py:60] Depth 2/1000 time = 2.6184122562408447
I0123 16:14:46.818938 139863414272000 ddar.py:60] Depth 3/1000 time = 2.794781446456909
I0123 16:14:50.015855 139863414272000 ddar.py:60] Depth 4/1000 time = 3.196728229522705
I0123 16:14:53.667766 139863414272000 ddar.py:60] Depth 5/1000 time = 3.651711940765381
I0123 16:14:57.038763 139863414272000 ddar.py:60] Depth 6/1000 time = 3.370434045791626
I0123 16:14:57.055357 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:14:57.055455 139863414272000 alphageometry.py:566] LM output (score=-3.007323): "k : T f h h k 14 ;"
I0123 16:14:57.055494 139863414272000 alphageometry.py:567] Translation: "k = on_tline k h f h"

I0123 16:14:57.055530 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k h f h ? coll i c j"
I0123 16:14:57.055667 139863414272000 graph.py:498] 
I0123 16:14:57.055725 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k h f h ? coll i c j
I0123 16:14:59.717187 139863414272000 ddar.py:60] Depth 1/1000 time = 2.6501991748809814
I0123 16:15:03.354449 139863414272000 ddar.py:60] Depth 2/1000 time = 3.6370620727539062
I0123 16:15:07.082977 139863414272000 ddar.py:60] Depth 3/1000 time = 3.7283339500427246
I0123 16:15:12.085052 139863414272000 ddar.py:60] Depth 4/1000 time = 5.001893043518066
I0123 16:15:16.780253 139863414272000 ddar.py:60] Depth 5/1000 time = 4.695006370544434
I0123 16:15:21.842075 139863414272000 ddar.py:60] Depth 6/1000 time = 5.061260461807251
I0123 16:15:21.857394 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:15:21.857495 139863414272000 alphageometry.py:566] LM output (score=-3.067817): "k : T b e j k 14 ;"
I0123 16:15:21.857534 139863414272000 alphageometry.py:567] Translation: "k = on_tline k j b e"

I0123 16:15:21.857574 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k j b e ? coll i c j"
I0123 16:15:21.857725 139863414272000 graph.py:498] 
I0123 16:15:21.857788 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k j b e ? coll i c j
I0123 16:15:23.387439 139863414272000 ddar.py:60] Depth 1/1000 time = 1.5106959342956543
I0123 16:15:26.737841 139863414272000 ddar.py:60] Depth 2/1000 time = 3.3502156734466553
I0123 16:15:29.972620 139863414272000 ddar.py:60] Depth 3/1000 time = 3.234602212905884
I0123 16:15:34.329683 139863414272000 ddar.py:60] Depth 4/1000 time = 4.356868028640747
I0123 16:15:38.773088 139863414272000 ddar.py:60] Depth 5/1000 time = 4.44315505027771
I0123 16:15:42.845911 139863414272000 ddar.py:60] Depth 6/1000 time = 4.072129964828491
I0123 16:15:42.861032 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:15:42.861154 139863414272000 alphageometry.py:566] LM output (score=-3.075911): "k : T f h k c 14 ;"
I0123 16:15:42.861197 139863414272000 alphageometry.py:567] Translation: "k = on_tline k c f h"

I0123 16:15:42.861238 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c f h ? coll i c j"
I0123 16:15:42.861382 139863414272000 graph.py:498] 
I0123 16:15:42.861442 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c f h ? coll i c j
I0123 16:15:44.465891 139863414272000 ddar.py:60] Depth 1/1000 time = 1.5844979286193848
I0123 16:15:46.972641 139863414272000 ddar.py:60] Depth 2/1000 time = 2.5065646171569824
I0123 16:15:49.566089 139863414272000 ddar.py:60] Depth 3/1000 time = 2.593273639678955
I0123 16:15:53.232035 139863414272000 ddar.py:60] Depth 4/1000 time = 3.6657474040985107
I0123 16:15:56.186693 139863414272000 ddar.py:60] Depth 5/1000 time = 2.9544522762298584
I0123 16:15:59.867112 139863414272000 ddar.py:60] Depth 6/1000 time = 3.6796905994415283
I0123 16:15:59.882481 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:15:59.882606 139863414272000 alphageometry.py:566] LM output (score=-3.086864): "k : P a e g k 14 ;"
I0123 16:15:59.882647 139863414272000 alphageometry.py:567] Translation: "k = on_pline k g a e"

I0123 16:15:59.882700 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_pline k g a e ? coll i c j"
I0123 16:15:59.882856 139863414272000 graph.py:498] 
I0123 16:15:59.882917 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_pline k g a e ? coll i c j
I0123 16:16:01.148072 139863414272000 ddar.py:60] Depth 1/1000 time = 1.2511909008026123
I0123 16:16:03.690397 139863414272000 ddar.py:60] Depth 2/1000 time = 2.542135000228882
I0123 16:16:06.568667 139863414272000 ddar.py:60] Depth 3/1000 time = 2.878079891204834
I0123 16:16:09.943062 139863414272000 ddar.py:60] Depth 4/1000 time = 3.3742189407348633
I0123 16:16:12.952439 139863414272000 ddar.py:60] Depth 5/1000 time = 3.00917649269104
I0123 16:16:16.628883 139863414272000 ddar.py:60] Depth 6/1000 time = 3.675882339477539
I0123 16:16:16.643372 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:16:16.643461 139863414272000 alphageometry.py:566] LM output (score=-3.132665): "k : T f h k p 14 ;"
I0123 16:16:16.643501 139863414272000 alphageometry.py:567] Translation: "ERROR: point p does not exist."

I0123 16:16:16.643539 139863414272000 alphageometry.py:566] LM output (score=-3.255662): "k : C b i k 14 D b i i k 15 ;"
I0123 16:16:16.643568 139863414272000 alphageometry.py:567] Translation: "k = on_line k b i, on_circle k i b"

I0123 16:16:16.643599 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b i, on_circle k i b ? coll i c j"
I0123 16:16:16.643735 139863414272000 graph.py:498] 
I0123 16:16:16.643793 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b i, on_circle k i b ? coll i c j
I0123 16:16:17.936217 139863414272000 ddar.py:60] Depth 1/1000 time = 1.2763102054595947
I0123 16:16:20.550492 139863414272000 ddar.py:60] Depth 2/1000 time = 2.614103317260742
I0123 16:16:23.602840 139863414272000 ddar.py:60] Depth 3/1000 time = 3.0521321296691895
I0123 16:16:27.084259 139863414272000 ddar.py:60] Depth 4/1000 time = 3.4811851978302
I0123 16:16:30.948388 139863414272000 ddar.py:60] Depth 5/1000 time = 3.8639297485351562
I0123 16:16:34.496419 139863414272000 ddar.py:60] Depth 6/1000 time = 3.5475101470947266
I0123 16:16:34.514864 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:16:34.514966 139863414272000 alphageometry.py:566] LM output (score=-3.267896): "k : D b c b k 14 T a b c k 15 ;"
I0123 16:16:34.515006 139863414272000 alphageometry.py:567] Translation: "k = on_circle k b c, on_tline k c a b"

I0123 16:16:34.515046 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_circle k b c, on_tline k c a b ? coll i c j"
I0123 16:16:34.515194 139863414272000 graph.py:498] 
I0123 16:16:34.515250 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_circle k b c, on_tline k c a b ? coll i c j
I0123 16:16:35.834871 139863414272000 ddar.py:60] Depth 1/1000 time = 1.301621437072754
I0123 16:16:38.511982 139863414272000 ddar.py:60] Depth 2/1000 time = 2.676928997039795
I0123 16:16:41.859609 139863414272000 ddar.py:60] Depth 3/1000 time = 3.3474323749542236
I0123 16:16:46.876566 139863414272000 ddar.py:60] Depth 4/1000 time = 5.0167365074157715
I0123 16:16:53.262851 139863414272000 ddar.py:60] Depth 5/1000 time = 6.386059999465942
I0123 16:16:59.276256 139863414272000 ddar.py:60] Depth 6/1000 time = 6.013203859329224
I0123 16:17:05.660510 139863414272000 ddar.py:60] Depth 7/1000 time = 6.383458852767944
I0123 16:17:05.710244 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:17:05.710401 139863414272000 alphageometry.py:540] Depth 1. There are 31 nodes to expand:
I0123 16:17:05.710446 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : C b e k 14 D b k e k 15 ; x00
I0123 16:17:05.710479 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : T a j a k 14 ; x00
I0123 16:17:05.710509 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : T a f f k 14 ; x00
I0123 16:17:05.710536 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : T b f c k 14 ; x00
I0123 16:17:05.710561 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : C b j k 14 D b k j k 15 ; x00
I0123 16:17:05.710584 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : T b e b k 14 ; x00
I0123 16:17:05.710608 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : T a e e k 14 ; x00
I0123 16:17:05.710643 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : C b i k 14 D b k i k 15 ; x00
I0123 16:17:05.710668 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : P a b c k 14 T a b a k 15 ; x00
I0123 16:17:05.710693 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : T a c c k 14 ; x00
I0123 16:17:05.710716 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : T a e c k 14 ; x00
I0123 16:17:05.710739 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : T b e e k 14 ; x00
I0123 16:17:05.710762 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : T b j j k 14 ; x00
I0123 16:17:05.710784 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : T a f e k 14 ; x00
I0123 16:17:05.710807 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : T b f b k 14 ; x00
I0123 16:17:05.710830 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : T g i g k 14 ; x00
I0123 16:17:05.710852 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : T a e a k 14 ; x00
I0123 16:17:05.710875 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : T a e g k 14 ; x00
I0123 16:17:05.710897 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : T f j j k 14 ; x00
I0123 16:17:05.710919 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : T a j j k 14 ; x00
I0123 16:17:05.710948 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : T g j g k 14 ; x00
I0123 16:17:05.710975 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : T f j g k 14 ; x00
I0123 16:17:05.711001 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : T b c b k 14 ; x00
I0123 16:17:05.711024 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : T d f f k 14 ; x00
I0123 16:17:05.711047 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : T b c i k 14 ; x00
I0123 16:17:05.711071 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : T f h h k 14 ; x00
I0123 16:17:05.711094 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : T b e j k 14 ; x00
I0123 16:17:05.711117 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : T f h k c 14 ; x00
I0123 16:17:05.711140 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : P a e g k 14 ; x00
I0123 16:17:05.711164 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : C b i k 14 D b i i k 15 ; x00
I0123 16:17:05.711187 139863414272000 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : D b c b k 14 T a b c k 15 ; x00
I0123 16:17:05.711213 139863414272000 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : C b e k 14 D b k e k 15 ; x00
I0123 16:17:12.752092 139863414272000 alphageometry.py:566] LM output (score=-1.669718): "l : T g k k l 16 ;"
I0123 16:17:12.752271 139863414272000 alphageometry.py:567] Translation: "l = on_tline l k g k"

I0123 16:17:12.752319 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l k g k ? coll i c j"
I0123 16:17:12.752477 139863414272000 graph.py:498] 
I0123 16:17:12.752535 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l k g k ? coll i c j
I0123 16:17:15.093479 139863414272000 ddar.py:60] Depth 1/1000 time = 2.3209307193756104
I0123 16:17:19.058723 139863414272000 ddar.py:60] Depth 2/1000 time = 3.9650652408599854
I0123 16:17:24.224174 139863414272000 ddar.py:60] Depth 3/1000 time = 5.165261268615723
I0123 16:17:30.034790 139863414272000 ddar.py:60] Depth 4/1000 time = 5.8104236125946045
I0123 16:17:35.939532 139863414272000 ddar.py:60] Depth 5/1000 time = 5.9045491218566895
I0123 16:17:41.792327 139863414272000 ddar.py:60] Depth 6/1000 time = 5.852084636688232
I0123 16:17:41.820274 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:17:41.820338 139863414272000 alphageometry.py:566] LM output (score=-1.715072): "l : C b j l 16 D b l j l 17 ;"
I0123 16:17:41.820375 139863414272000 alphageometry.py:567] Translation: "l = on_line l b j, on_bline l j b"

I0123 16:17:41.820415 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_line l b j, on_bline l j b ? coll i c j"
I0123 16:17:41.820563 139863414272000 graph.py:498] 
I0123 16:17:41.820615 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_line l b j, on_bline l j b ? coll i c j
I0123 16:17:44.839168 139863414272000 ddar.py:60] Depth 1/1000 time = 2.994687795639038
I0123 16:17:50.710353 139863414272000 ddar.py:60] Depth 2/1000 time = 5.870999336242676
I0123 16:17:59.112364 139863414272000 ddar.py:60] Depth 3/1000 time = 8.401834964752197
I0123 16:18:08.540936 139863414272000 ddar.py:60] Depth 4/1000 time = 9.428353548049927
I0123 16:18:18.422704 139863414272000 ddar.py:60] Depth 5/1000 time = 9.88154935836792
I0123 16:18:28.360847 139863414272000 ddar.py:60] Depth 6/1000 time = 9.937929630279541
I0123 16:18:38.276640 139863414272000 ddar.py:60] Depth 7/1000 time = 9.9151611328125
I0123 16:18:38.335427 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:18:38.335500 139863414272000 alphageometry.py:566] LM output (score=-1.721934): "l : T g k g l 16 ;"
I0123 16:18:38.335538 139863414272000 alphageometry.py:567] Translation: "l = on_tline l g g k"

I0123 16:18:38.335577 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l g g k ? coll i c j"
I0123 16:18:38.335734 139863414272000 graph.py:498] 
I0123 16:18:38.335792 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l g g k ? coll i c j
I0123 16:18:40.357827 139863414272000 ddar.py:60] Depth 1/1000 time = 2.000598192214966
I0123 16:18:44.394238 139863414272000 ddar.py:60] Depth 2/1000 time = 4.036213636398315
I0123 16:18:49.678925 139863414272000 ddar.py:60] Depth 3/1000 time = 5.2844908237457275
I0123 16:18:55.747484 139863414272000 ddar.py:60] Depth 4/1000 time = 6.068357706069946
I0123 16:19:01.451473 139863414272000 ddar.py:60] Depth 5/1000 time = 5.7037270069122314
I0123 16:19:07.937036 139863414272000 ddar.py:60] Depth 6/1000 time = 6.484835147857666
I0123 16:19:07.963159 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:19:07.963241 139863414272000 alphageometry.py:566] LM output (score=-1.907544): "l : T f j k l 16 ;"
I0123 16:19:07.963280 139863414272000 alphageometry.py:567] Translation: "l = on_tline l k f j"

I0123 16:19:07.963318 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l k f j ? coll i c j"
I0123 16:19:07.963469 139863414272000 graph.py:498] 
I0123 16:19:07.963528 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l k f j ? coll i c j
I0123 16:19:10.016649 139863414272000 ddar.py:60] Depth 1/1000 time = 2.033458709716797
I0123 16:19:14.174912 139863414272000 ddar.py:60] Depth 2/1000 time = 4.158092737197876
I0123 16:19:19.563157 139863414272000 ddar.py:60] Depth 3/1000 time = 5.388016700744629
I0123 16:19:25.303751 139863414272000 ddar.py:60] Depth 4/1000 time = 5.740277290344238
I0123 16:19:31.362571 139863414272000 ddar.py:60] Depth 5/1000 time = 6.0586278438568115
I0123 16:19:37.551672 139863414272000 ddar.py:60] Depth 6/1000 time = 6.1885645389556885
I0123 16:19:37.573348 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:19:37.573431 139863414272000 alphageometry.py:566] LM output (score=-2.071872): "l : T g i g l 16 ;"
I0123 16:19:37.573469 139863414272000 alphageometry.py:567] Translation: "l = on_tline l g g i"

I0123 16:19:37.573507 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l g g i ? coll i c j"
I0123 16:19:37.573667 139863414272000 graph.py:498] 
I0123 16:19:37.573726 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l g g i ? coll i c j
I0123 16:19:39.646750 139863414272000 ddar.py:60] Depth 1/1000 time = 2.047865390777588
I0123 16:19:43.758744 139863414272000 ddar.py:60] Depth 2/1000 time = 4.111790418624878
I0123 16:19:48.616261 139863414272000 ddar.py:60] Depth 3/1000 time = 4.857332944869995
I0123 16:19:54.568901 139863414272000 ddar.py:60] Depth 4/1000 time = 5.9524524211883545
I0123 16:20:00.625696 139863414272000 ddar.py:60] Depth 5/1000 time = 6.056577205657959
I0123 16:20:06.672823 139863414272000 ddar.py:60] Depth 6/1000 time = 6.046488523483276
I0123 16:20:06.698119 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:20:06.698217 139863414272000 alphageometry.py:566] LM output (score=-2.088037): "l : T a e e l 16 ;"
I0123 16:20:06.698258 139863414272000 alphageometry.py:567] Translation: "l = on_tline l e a e"

I0123 16:20:06.698296 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l e a e ? coll i c j"
I0123 16:20:06.698446 139863414272000 graph.py:498] 
I0123 16:20:06.698506 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l e a e ? coll i c j
I0123 16:20:08.746227 139863414272000 ddar.py:60] Depth 1/1000 time = 2.0253872871398926
I0123 16:20:15.786932 139863414272000 ddar.py:60] Depth 2/1000 time = 7.040527820587158
I0123 16:20:23.134819 139863414272000 ddar.py:60] Depth 3/1000 time = 7.34769082069397
I0123 16:20:31.113989 139863414272000 ddar.py:60] Depth 4/1000 time = 7.9789652824401855
I0123 16:20:39.666807 139863414272000 ddar.py:60] Depth 5/1000 time = 8.552595376968384
I0123 16:20:48.650830 139863414272000 ddar.py:60] Depth 6/1000 time = 8.983438968658447
I0123 16:20:48.678538 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:20:48.678604 139863414272000 alphageometry.py:566] LM output (score=-2.098036): "l : C b i l 16 D b l i l 17 ;"
I0123 16:20:48.678641 139863414272000 alphageometry.py:567] Translation: "l = on_line l b i, on_bline l i b"

I0123 16:20:48.678680 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_line l b i, on_bline l i b ? coll i c j"
I0123 16:20:48.678841 139863414272000 graph.py:498] 
I0123 16:20:48.678906 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_line l b i, on_bline l i b ? coll i c j
I0123 16:20:50.881527 139863414272000 ddar.py:60] Depth 1/1000 time = 2.177886962890625
I0123 16:20:55.335676 139863414272000 ddar.py:60] Depth 2/1000 time = 4.453919172286987
I0123 16:21:01.369519 139863414272000 ddar.py:60] Depth 3/1000 time = 6.03354811668396
I0123 16:21:08.013139 139863414272000 ddar.py:60] Depth 4/1000 time = 6.643416404724121
I0123 16:21:14.146810 139863414272000 ddar.py:60] Depth 5/1000 time = 6.1334168910980225
I0123 16:21:21.112592 139863414272000 ddar.py:60] Depth 6/1000 time = 6.965006113052368
I0123 16:21:21.145205 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:21:21.145269 139863414272000 alphageometry.py:566] LM output (score=-2.169685): "l : T b k k l 16 ;"
I0123 16:21:21.145304 139863414272000 alphageometry.py:567] Translation: "l = on_tline l k b k"

I0123 16:21:21.145343 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l k b k ? coll i c j"
I0123 16:21:21.145493 139863414272000 graph.py:498] 
I0123 16:21:21.145551 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l k b k ? coll i c j
I0123 16:21:23.259130 139863414272000 ddar.py:60] Depth 1/1000 time = 2.094003200531006
I0123 16:21:28.048116 139863414272000 ddar.py:60] Depth 2/1000 time = 4.788806676864624
I0123 16:21:34.229470 139863414272000 ddar.py:60] Depth 3/1000 time = 6.1811089515686035
I0123 16:21:41.174182 139863414272000 ddar.py:60] Depth 4/1000 time = 6.944397211074829
I0123 16:21:48.511669 139863414272000 ddar.py:60] Depth 5/1000 time = 7.337285041809082
I0123 16:21:55.921733 139863414272000 ddar.py:60] Depth 6/1000 time = 7.409496545791626
I0123 16:21:55.950968 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:21:55.951031 139863414272000 alphageometry.py:566] LM output (score=-2.240237): "l : T g j g l 16 ;"
I0123 16:21:55.951067 139863414272000 alphageometry.py:567] Translation: "l = on_tline l g g j"

I0123 16:21:55.951105 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l g g j ? coll i c j"
I0123 16:21:55.951256 139863414272000 graph.py:498] 
I0123 16:21:55.951326 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l g g j ? coll i c j
I0123 16:21:58.456528 139863414272000 ddar.py:60] Depth 1/1000 time = 2.484699010848999
I0123 16:22:02.127451 139863414272000 ddar.py:60] Depth 2/1000 time = 3.6707465648651123
I0123 16:22:07.519147 139863414272000 ddar.py:60] Depth 3/1000 time = 5.391514301300049
I0123 16:22:13.376200 139863414272000 ddar.py:60] Depth 4/1000 time = 5.856841087341309
I0123 16:22:19.101114 139863414272000 ddar.py:60] Depth 5/1000 time = 5.724672555923462
I0123 16:22:25.248705 139863414272000 ddar.py:60] Depth 6/1000 time = 6.146991014480591
I0123 16:22:25.274589 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:22:25.274654 139863414272000 alphageometry.py:566] LM output (score=-2.326418): "l : C a e l 16 D a l e l 17 ;"
I0123 16:22:25.274689 139863414272000 alphageometry.py:567] Translation: "l = on_line l a e, on_bline l e a"

I0123 16:22:25.274726 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_line l a e, on_bline l e a ? coll i c j"
I0123 16:22:25.274880 139863414272000 graph.py:498] 
I0123 16:22:25.274937 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_line l a e, on_bline l e a ? coll i c j
I0123 16:22:28.132837 139863414272000 ddar.py:60] Depth 1/1000 time = 2.8336856365203857
I0123 16:22:35.417687 139863414272000 ddar.py:60] Depth 2/1000 time = 7.284646987915039
I0123 16:22:46.102710 139863414272000 ddar.py:60] Depth 3/1000 time = 10.684826374053955
I0123 16:22:58.538450 139863414272000 ddar.py:60] Depth 4/1000 time = 12.435523748397827
I0123 16:23:11.115643 139863414272000 ddar.py:60] Depth 5/1000 time = 12.576699018478394
I0123 16:23:24.259082 139863414272000 ddar.py:60] Depth 6/1000 time = 13.143076658248901
I0123 16:23:37.414799 139863414272000 ddar.py:60] Depth 7/1000 time = 13.154807806015015
I0123 16:23:37.464183 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:23:37.464251 139863414272000 alphageometry.py:566] LM output (score=-2.327834): "l : C j k l 16 D j l k l 17 ;"
I0123 16:23:37.464299 139863414272000 alphageometry.py:567] Translation: "l = on_line l j k, on_bline l k j"

I0123 16:23:37.464339 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_line l j k, on_bline l k j ? coll i c j"
I0123 16:23:37.464488 139863414272000 graph.py:498] 
I0123 16:23:37.464553 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_line l j k, on_bline l k j ? coll i c j
I0123 16:23:39.263747 139863414272000 ddar.py:60] Depth 1/1000 time = 1.7734839916229248
I0123 16:23:43.589471 139863414272000 ddar.py:60] Depth 2/1000 time = 4.325541019439697
I0123 16:23:49.280456 139863414272000 ddar.py:60] Depth 3/1000 time = 5.690776586532593
I0123 16:23:55.293055 139863414272000 ddar.py:60] Depth 4/1000 time = 6.0123982429504395
I0123 16:24:01.770279 139863414272000 ddar.py:60] Depth 5/1000 time = 6.477038621902466
I0123 16:24:07.839674 139863414272000 ddar.py:60] Depth 6/1000 time = 6.0688157081604
I0123 16:24:14.336028 139863414272000 ddar.py:60] Depth 7/1000 time = 6.463421106338501
I0123 16:24:14.336226 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:24:14.336278 139863414272000 alphageometry.py:566] LM output (score=-2.333335): "l : T a j a l 16 ;"
I0123 16:24:14.336311 139863414272000 alphageometry.py:567] Translation: "l = on_tline l a a j"

I0123 16:24:14.336348 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l a a j ? coll i c j"
I0123 16:24:14.336499 139863414272000 graph.py:498] 
I0123 16:24:14.336557 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l a a j ? coll i c j
I0123 16:24:16.891862 139863414272000 ddar.py:60] Depth 1/1000 time = 2.534954309463501
I0123 16:24:21.362578 139863414272000 ddar.py:60] Depth 2/1000 time = 4.4705493450164795
I0123 16:24:26.670065 139863414272000 ddar.py:60] Depth 3/1000 time = 5.307277679443359
I0123 16:24:32.431858 139863414272000 ddar.py:60] Depth 4/1000 time = 5.761559247970581
I0123 16:24:38.803281 139863414272000 ddar.py:60] Depth 5/1000 time = 6.371232032775879
I0123 16:24:45.203746 139863414272000 ddar.py:60] Depth 6/1000 time = 6.3999247550964355
I0123 16:24:45.231819 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:24:45.231903 139863414272000 alphageometry.py:566] LM output (score=-2.443367): "l : T a j e l 16 ;"
I0123 16:24:45.231941 139863414272000 alphageometry.py:567] Translation: "l = on_tline l e a j"

I0123 16:24:45.231983 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l e a j ? coll i c j"
I0123 16:24:45.232136 139863414272000 graph.py:498] 
I0123 16:24:45.232196 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l e a j ? coll i c j
I0123 16:24:47.824995 139863414272000 ddar.py:60] Depth 1/1000 time = 2.572808027267456
I0123 16:24:54.255402 139863414272000 ddar.py:60] Depth 2/1000 time = 6.430221796035767
I0123 16:25:02.301700 139863414272000 ddar.py:60] Depth 3/1000 time = 8.046066284179688
I0123 16:25:10.945230 139863414272000 ddar.py:60] Depth 4/1000 time = 8.643230199813843
I0123 16:25:20.063160 139863414272000 ddar.py:60] Depth 5/1000 time = 9.117675304412842
I0123 16:25:28.714556 139863414272000 ddar.py:60] Depth 6/1000 time = 8.650724172592163
I0123 16:25:28.739823 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:25:28.739890 139863414272000 alphageometry.py:566] LM output (score=-2.531778): "l : C j k l 16 D j k k l 17 ;"
I0123 16:25:28.739927 139863414272000 alphageometry.py:567] Translation: "l = on_line l j k, on_circle l k j"

I0123 16:25:28.739964 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_line l j k, on_circle l k j ? coll i c j"
I0123 16:25:28.740120 139863414272000 graph.py:498] 
I0123 16:25:28.740179 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_line l j k, on_circle l k j ? coll i c j
I0123 16:25:31.046039 139863414272000 ddar.py:60] Depth 1/1000 time = 2.2818078994750977
I0123 16:25:36.591091 139863414272000 ddar.py:60] Depth 2/1000 time = 5.544848442077637
I0123 16:25:42.828573 139863414272000 ddar.py:60] Depth 3/1000 time = 6.237269639968872
I0123 16:25:50.248633 139863414272000 ddar.py:60] Depth 4/1000 time = 7.4198668003082275
I0123 16:25:57.585596 139863414272000 ddar.py:60] Depth 5/1000 time = 7.336723566055298
I0123 16:26:05.845267 139863414272000 ddar.py:60] Depth 6/1000 time = 8.259324073791504
I0123 16:26:14.621129 139863414272000 ddar.py:60] Depth 7/1000 time = 8.775645017623901
I0123 16:26:22.898799 139863414272000 ddar.py:60] Depth 8/1000 time = 8.277015686035156
I0123 16:26:22.940824 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:26:22.940889 139863414272000 alphageometry.py:566] LM output (score=-2.539356): "l : C b h l 16 D b l h l 17 ;"
I0123 16:26:22.940927 139863414272000 alphageometry.py:567] Translation: "l = on_line l b h, on_bline l h b"

I0123 16:26:22.940965 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_line l b h, on_bline l h b ? coll i c j"
I0123 16:26:22.941120 139863414272000 graph.py:498] 
I0123 16:26:22.941181 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_line l b h, on_bline l h b ? coll i c j
I0123 16:26:27.307168 139863414272000 ddar.py:60] Depth 1/1000 time = 4.3343024253845215
I0123 16:26:33.981326 139863414272000 ddar.py:60] Depth 2/1000 time = 6.673919677734375
I0123 16:26:42.154766 139863414272000 ddar.py:60] Depth 3/1000 time = 8.173156023025513
I0123 16:26:51.899887 139863414272000 ddar.py:60] Depth 4/1000 time = 9.744887351989746
I0123 16:27:01.191636 139863414272000 ddar.py:60] Depth 5/1000 time = 9.291443347930908
I0123 16:27:09.813746 139863414272000 ddar.py:60] Depth 6/1000 time = 8.621411561965942
I0123 16:27:09.845970 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:27:09.846065 139863414272000 alphageometry.py:566] LM output (score=-2.547581): "l : T d k j l 16 ;"
I0123 16:27:09.846102 139863414272000 alphageometry.py:567] Translation: "l = on_tline l j d k"

I0123 16:27:09.846143 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l j d k ? coll i c j"
I0123 16:27:09.846302 139863414272000 graph.py:498] 
I0123 16:27:09.846360 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l j d k ? coll i c j
I0123 16:27:12.544196 139863414272000 ddar.py:60] Depth 1/1000 time = 2.677079439163208
I0123 16:27:17.248081 139863414272000 ddar.py:60] Depth 2/1000 time = 4.703679800033569
I0123 16:27:22.628598 139863414272000 ddar.py:60] Depth 3/1000 time = 5.380326509475708
I0123 16:27:28.550889 139863414272000 ddar.py:60] Depth 4/1000 time = 5.922090530395508
I0123 16:27:34.657869 139863414272000 ddar.py:60] Depth 5/1000 time = 6.106770038604736
I0123 16:27:41.181800 139863414272000 ddar.py:60] Depth 6/1000 time = 6.523376941680908
I0123 16:27:41.210628 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:27:41.210711 139863414272000 alphageometry.py:566] LM output (score=-2.619591): "l : T a e a l 16 ;"
I0123 16:27:41.210748 139863414272000 alphageometry.py:567] Translation: "l = on_tline l a a e"

I0123 16:27:41.210787 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l a a e ? coll i c j"
I0123 16:27:41.210945 139863414272000 graph.py:498] 
I0123 16:27:41.211005 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l a a e ? coll i c j
I0123 16:27:43.414766 139863414272000 ddar.py:60] Depth 1/1000 time = 2.1829888820648193
I0123 16:27:48.144511 139863414272000 ddar.py:60] Depth 2/1000 time = 4.729508638381958
I0123 16:27:53.585472 139863414272000 ddar.py:60] Depth 3/1000 time = 5.44066047668457
I0123 16:27:59.851063 139863414272000 ddar.py:60] Depth 4/1000 time = 6.265400171279907
I0123 16:28:06.648659 139863414272000 ddar.py:60] Depth 5/1000 time = 6.797343730926514
I0123 16:28:13.012289 139863414272000 ddar.py:60] Depth 6/1000 time = 6.362942218780518
I0123 16:28:13.038630 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:28:13.038696 139863414272000 alphageometry.py:566] LM output (score=-2.632100): "l : T d k g l 16 ;"
I0123 16:28:13.038734 139863414272000 alphageometry.py:567] Translation: "l = on_tline l g d k"

I0123 16:28:13.038772 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l g d k ? coll i c j"
I0123 16:28:13.038923 139863414272000 graph.py:498] 
I0123 16:28:13.038981 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l g d k ? coll i c j
I0123 16:28:15.304801 139863414272000 ddar.py:60] Depth 1/1000 time = 2.24641752243042
I0123 16:28:19.571515 139863414272000 ddar.py:60] Depth 2/1000 time = 4.26652455329895
I0123 16:28:24.991105 139863414272000 ddar.py:60] Depth 3/1000 time = 5.419356346130371
I0123 16:28:31.526534 139863414272000 ddar.py:60] Depth 4/1000 time = 6.535109758377075
I0123 16:28:37.752434 139863414272000 ddar.py:60] Depth 5/1000 time = 6.2256810665130615
I0123 16:28:43.419527 139863414272000 ddar.py:60] Depth 6/1000 time = 5.66646671295166
I0123 16:28:43.447585 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:28:43.447690 139863414272000 alphageometry.py:566] LM output (score=-2.661339): "l : T a f f l 16 ;"
I0123 16:28:43.447728 139863414272000 alphageometry.py:567] Translation: "l = on_tline l f a f"

I0123 16:28:43.447779 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l f a f ? coll i c j"
I0123 16:28:43.447946 139863414272000 graph.py:498] 
I0123 16:28:43.448005 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l f a f ? coll i c j
I0123 16:28:46.165214 139863414272000 ddar.py:60] Depth 1/1000 time = 2.695871591567993
I0123 16:28:51.735568 139863414272000 ddar.py:60] Depth 2/1000 time = 5.570164442062378
I0123 16:28:57.539344 139863414272000 ddar.py:60] Depth 3/1000 time = 5.8035736083984375
I0123 16:29:05.047161 139863414272000 ddar.py:60] Depth 4/1000 time = 7.507595539093018
I0123 16:29:12.200880 139863414272000 ddar.py:60] Depth 5/1000 time = 7.153465747833252
I0123 16:29:19.412074 139863414272000 ddar.py:60] Depth 6/1000 time = 7.210686683654785
I0123 16:29:19.437619 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:29:19.437700 139863414272000 alphageometry.py:566] LM output (score=-2.707082): "l : T a e g l 16 ;"
I0123 16:29:19.437738 139863414272000 alphageometry.py:567] Translation: "l = on_tline l g a e"

I0123 16:29:19.437776 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l g a e ? coll i c j"
I0123 16:29:19.437933 139863414272000 graph.py:498] 
I0123 16:29:19.437994 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l g a e ? coll i c j
I0123 16:29:21.238082 139863414272000 ddar.py:60] Depth 1/1000 time = 1.7799336910247803
I0123 16:29:26.102338 139863414272000 ddar.py:60] Depth 2/1000 time = 4.864038705825806
I0123 16:29:31.527055 139863414272000 ddar.py:60] Depth 3/1000 time = 5.42452597618103
I0123 16:29:37.714865 139863414272000 ddar.py:60] Depth 4/1000 time = 6.1876044273376465
I0123 16:29:44.439441 139863414272000 ddar.py:60] Depth 5/1000 time = 6.724361181259155
I0123 16:29:50.580666 139863414272000 ddar.py:60] Depth 6/1000 time = 6.140680313110352
I0123 16:29:50.607742 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:29:50.607824 139863414272000 alphageometry.py:566] LM output (score=-2.761487): "l : T a e k l 16 ;"
I0123 16:29:50.607863 139863414272000 alphageometry.py:567] Translation: "l = on_tline l k a e"

I0123 16:29:50.607913 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l k a e ? coll i c j"
I0123 16:29:50.608073 139863414272000 graph.py:498] 
I0123 16:29:50.608132 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l k a e ? coll i c j
I0123 16:29:52.852954 139863414272000 ddar.py:60] Depth 1/1000 time = 2.224545478820801
I0123 16:29:59.540443 139863414272000 ddar.py:60] Depth 2/1000 time = 6.687278747558594
I0123 16:30:07.385218 139863414272000 ddar.py:60] Depth 3/1000 time = 7.844550371170044
I0123 16:30:16.179072 139863414272000 ddar.py:60] Depth 4/1000 time = 8.79363226890564
I0123 16:30:24.966533 139863414272000 ddar.py:60] Depth 5/1000 time = 8.787163257598877
I0123 16:30:33.774245 139863414272000 ddar.py:60] Depth 6/1000 time = 8.80714201927185
I0123 16:30:33.800171 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:30:33.800271 139863414272000 alphageometry.py:566] LM output (score=-2.799165): "l : T e j e l 16 ;"
I0123 16:30:33.800307 139863414272000 alphageometry.py:567] Translation: "l = on_tline l e e j"

I0123 16:30:33.800356 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l e e j ? coll i c j"
I0123 16:30:33.800520 139863414272000 graph.py:498] 
I0123 16:30:33.800577 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l e e j ? coll i c j
I0123 16:30:36.571056 139863414272000 ddar.py:60] Depth 1/1000 time = 2.750770092010498
I0123 16:30:43.429205 139863414272000 ddar.py:60] Depth 2/1000 time = 6.857961893081665
I0123 16:30:50.929841 139863414272000 ddar.py:60] Depth 3/1000 time = 7.500454664230347
I0123 16:30:59.805377 139863414272000 ddar.py:60] Depth 4/1000 time = 8.87534236907959
I0123 16:31:08.657971 139863414272000 ddar.py:60] Depth 5/1000 time = 8.852372646331787
I0123 16:31:17.531862 139863414272000 ddar.py:60] Depth 6/1000 time = 8.873208284378052
I0123 16:31:17.557115 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:31:17.557198 139863414272000 alphageometry.py:566] LM output (score=-2.818979): "l : T d k f l 16 ;"
I0123 16:31:17.557235 139863414272000 alphageometry.py:567] Translation: "l = on_tline l f d k"

I0123 16:31:17.557272 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l f d k ? coll i c j"
I0123 16:31:17.557421 139863414272000 graph.py:498] 
I0123 16:31:17.557478 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l f d k ? coll i c j
I0123 16:31:19.817374 139863414272000 ddar.py:60] Depth 1/1000 time = 2.2364847660064697
I0123 16:31:24.603003 139863414272000 ddar.py:60] Depth 2/1000 time = 4.785456418991089
I0123 16:31:30.117890 139863414272000 ddar.py:60] Depth 3/1000 time = 5.514622211456299
I0123 16:31:36.423247 139863414272000 ddar.py:60] Depth 4/1000 time = 6.305039405822754
I0123 16:31:42.670068 139863414272000 ddar.py:60] Depth 5/1000 time = 6.246610879898071
I0123 16:31:48.967325 139863414272000 ddar.py:60] Depth 6/1000 time = 6.296637058258057
I0123 16:31:48.993973 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:31:48.994052 139863414272000 alphageometry.py:566] LM output (score=-2.855373): "l : T g j j l 16 ;"
I0123 16:31:48.994088 139863414272000 alphageometry.py:567] Translation: "l = on_tline l j g j"

I0123 16:31:48.994140 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l j g j ? coll i c j"
I0123 16:31:48.994303 139863414272000 graph.py:498] 
I0123 16:31:48.994360 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l j g j ? coll i c j
I0123 16:31:51.833784 139863414272000 ddar.py:60] Depth 1/1000 time = 2.8158981800079346
I0123 16:31:55.933087 139863414272000 ddar.py:60] Depth 2/1000 time = 4.099123954772949
I0123 16:32:00.835914 139863414272000 ddar.py:60] Depth 3/1000 time = 4.902660369873047
I0123 16:32:06.781824 139863414272000 ddar.py:60] Depth 4/1000 time = 5.945674657821655
I0123 16:32:12.441679 139863414272000 ddar.py:60] Depth 5/1000 time = 5.659527063369751
I0123 16:32:18.567963 139863414272000 ddar.py:60] Depth 6/1000 time = 6.125763893127441
I0123 16:32:18.595649 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:32:18.595728 139863414272000 alphageometry.py:566] LM output (score=-2.858191): "l : C f j l 16 D f l j l 17 ;"
I0123 16:32:18.595765 139863414272000 alphageometry.py:567] Translation: "l = on_line l f j, on_bline l j f"

I0123 16:32:18.595802 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_line l f j, on_bline l j f ? coll i c j"
I0123 16:32:18.595955 139863414272000 graph.py:498] 
I0123 16:32:18.596014 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_line l f j, on_bline l j f ? coll i c j
I0123 16:32:21.830358 139863414272000 ddar.py:60] Depth 1/1000 time = 3.210158109664917
I0123 16:32:27.118292 139863414272000 ddar.py:60] Depth 2/1000 time = 5.287750005722046
I0123 16:32:33.788251 139863414272000 ddar.py:60] Depth 3/1000 time = 6.669753551483154
I0123 16:32:40.585998 139863414272000 ddar.py:60] Depth 4/1000 time = 6.7975780963897705
I0123 16:32:50.605881 139863414272000 ddar.py:60] Depth 5/1000 time = 10.019542217254639
I0123 16:32:58.338683 139863414272000 ddar.py:60] Depth 6/1000 time = 7.731740713119507
I0123 16:32:58.365459 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:32:58.365577 139863414272000 alphageometry.py:566] LM output (score=-2.861529): "l : T d k e l 16 ;"
I0123 16:32:58.365615 139863414272000 alphageometry.py:567] Translation: "l = on_tline l e d k"

I0123 16:32:58.365683 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l e d k ? coll i c j"
I0123 16:32:58.365920 139863414272000 graph.py:498] 
I0123 16:32:58.365998 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l e d k ? coll i c j
I0123 16:33:00.252057 139863414272000 ddar.py:60] Depth 1/1000 time = 1.859656572341919
I0123 16:33:07.398265 139863414272000 ddar.py:60] Depth 2/1000 time = 7.145914316177368
I0123 16:33:15.800532 139863414272000 ddar.py:60] Depth 3/1000 time = 8.40185546875
I0123 16:33:24.655928 139863414272000 ddar.py:60] Depth 4/1000 time = 8.855034828186035
I0123 16:33:33.927289 139863414272000 ddar.py:60] Depth 5/1000 time = 9.270967721939087
I0123 16:33:42.558458 139863414272000 ddar.py:60] Depth 6/1000 time = 8.63036584854126
I0123 16:33:42.583859 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:33:42.583991 139863414272000 alphageometry.py:566] LM output (score=-2.883876): "l : T c k k l 16 ;"
I0123 16:33:42.584030 139863414272000 alphageometry.py:567] Translation: "l = on_tline l k c k"

I0123 16:33:42.584086 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l k c k ? coll i c j"
I0123 16:33:42.584270 139863414272000 graph.py:498] 
I0123 16:33:42.584329 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l k c k ? coll i c j
I0123 16:33:45.562933 139863414272000 ddar.py:60] Depth 1/1000 time = 2.9574594497680664
I0123 16:33:50.230627 139863414272000 ddar.py:60] Depth 2/1000 time = 4.667457580566406
I0123 16:33:56.514358 139863414272000 ddar.py:60] Depth 3/1000 time = 6.283492088317871
I0123 16:34:03.980206 139863414272000 ddar.py:60] Depth 4/1000 time = 7.4655749797821045
I0123 16:34:11.509392 139863414272000 ddar.py:60] Depth 5/1000 time = 7.528882026672363
I0123 16:34:18.558986 139863414272000 ddar.py:60] Depth 6/1000 time = 7.048861265182495
I0123 16:34:18.591391 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:34:18.591495 139863414272000 alphageometry.py:566] LM output (score=-2.897349): "l : T d f f l 16 ;"
I0123 16:34:18.591531 139863414272000 alphageometry.py:567] Translation: "l = on_tline l f d f"

I0123 16:34:18.591588 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l f d f ? coll i c j"
I0123 16:34:18.591767 139863414272000 graph.py:498] 
I0123 16:34:18.591825 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l f d f ? coll i c j
I0123 16:34:21.487808 139863414272000 ddar.py:60] Depth 1/1000 time = 2.873960018157959
I0123 16:34:25.572237 139863414272000 ddar.py:60] Depth 2/1000 time = 4.084202766418457
I0123 16:34:30.527151 139863414272000 ddar.py:60] Depth 3/1000 time = 4.954675912857056
I0123 16:34:36.041800 139863414272000 ddar.py:60] Depth 4/1000 time = 5.5143351554870605
I0123 16:34:42.278754 139863414272000 ddar.py:60] Depth 5/1000 time = 6.2364983558654785
I0123 16:34:47.932141 139863414272000 ddar.py:60] Depth 6/1000 time = 5.652728796005249
I0123 16:34:47.960546 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:34:47.960618 139863414272000 alphageometry.py:566] LM output (score=-2.908178): "l : T b k b l 16 ;"
I0123 16:34:47.960654 139863414272000 alphageometry.py:567] Translation: "l = on_tline l b b k"

I0123 16:34:47.960694 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l b b k ? coll i c j"
I0123 16:34:47.960881 139863414272000 graph.py:498] 
I0123 16:34:47.960942 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l b b k ? coll i c j
I0123 16:34:50.373925 139863414272000 ddar.py:60] Depth 1/1000 time = 2.3910610675811768
I0123 16:34:55.154620 139863414272000 ddar.py:60] Depth 2/1000 time = 4.780423164367676
I0123 16:35:00.311665 139863414272000 ddar.py:60] Depth 3/1000 time = 5.156736135482788
I0123 16:35:06.487359 139863414272000 ddar.py:60] Depth 4/1000 time = 6.175445795059204
I0123 16:35:12.949158 139863414272000 ddar.py:60] Depth 5/1000 time = 6.461440801620483
I0123 16:35:19.408195 139863414272000 ddar.py:60] Depth 6/1000 time = 6.45824122428894
I0123 16:35:19.435135 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:35:19.435208 139863414272000 alphageometry.py:566] LM output (score=-2.921161): "l : T g k j l 16 ;"
I0123 16:35:19.435244 139863414272000 alphageometry.py:567] Translation: "l = on_tline l j g k"

I0123 16:35:19.435289 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l j g k ? coll i c j"
I0123 16:35:19.435459 139863414272000 graph.py:498] 
I0123 16:35:19.435519 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l j g k ? coll i c j
I0123 16:35:21.787622 139863414272000 ddar.py:60] Depth 1/1000 time = 2.3318614959716797
I0123 16:35:25.923725 139863414272000 ddar.py:60] Depth 2/1000 time = 4.13587212562561
I0123 16:35:31.560235 139863414272000 ddar.py:60] Depth 3/1000 time = 5.636209964752197
I0123 16:35:37.164281 139863414272000 ddar.py:60] Depth 4/1000 time = 5.603649854660034
I0123 16:35:43.426021 139863414272000 ddar.py:60] Depth 5/1000 time = 6.261428117752075
I0123 16:35:49.174574 139863414272000 ddar.py:60] Depth 6/1000 time = 5.747781753540039
I0123 16:35:49.202445 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:35:49.202523 139863414272000 alphageometry.py:566] LM output (score=-3.008730): "l : T a e i l 16 ;"
I0123 16:35:49.202561 139863414272000 alphageometry.py:567] Translation: "l = on_tline l i a e"

I0123 16:35:49.202600 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l i a e ? coll i c j"
I0123 16:35:49.202773 139863414272000 graph.py:498] 
I0123 16:35:49.202832 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l i a e ? coll i c j
I0123 16:35:51.619133 139863414272000 ddar.py:60] Depth 1/1000 time = 2.3944718837738037
I0123 16:35:56.841504 139863414272000 ddar.py:60] Depth 2/1000 time = 5.222085952758789
I0123 16:36:02.033830 139863414272000 ddar.py:60] Depth 3/1000 time = 5.19206428527832
I0123 16:36:08.559921 139863414272000 ddar.py:60] Depth 4/1000 time = 6.525776147842407
I0123 16:36:15.091784 139863414272000 ddar.py:60] Depth 5/1000 time = 6.531423807144165
I0123 16:36:21.577731 139863414272000 ddar.py:60] Depth 6/1000 time = 6.4853386878967285
I0123 16:36:21.601413 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:36:21.601485 139863414272000 alphageometry.py:566] LM output (score=-3.060867): "l : T d k i l 16 ;"
I0123 16:36:21.601520 139863414272000 alphageometry.py:567] Translation: "l = on_tline l i d k"

I0123 16:36:21.601557 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l i d k ? coll i c j"
I0123 16:36:21.601732 139863414272000 graph.py:498] 
I0123 16:36:21.601788 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b e, on_bline k e b; l = on_tline l i d k ? coll i c j
I0123 16:36:24.004167 139863414272000 ddar.py:60] Depth 1/1000 time = 2.381134271621704
I0123 16:36:28.544488 139863414272000 ddar.py:60] Depth 2/1000 time = 4.540059328079224
I0123 16:36:34.314981 139863414272000 ddar.py:60] Depth 3/1000 time = 5.77017879486084
I0123 16:36:40.707434 139863414272000 ddar.py:60] Depth 4/1000 time = 6.392200946807861
I0123 16:36:46.687468 139863414272000 ddar.py:60] Depth 5/1000 time = 5.979673624038696
I0123 16:36:53.247282 139863414272000 ddar.py:60] Depth 6/1000 time = 6.558995962142944
I0123 16:36:53.274249 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:36:53.274332 139863414272000 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : T a j a k 14 ; x00
I0123 16:36:58.780950 139863414272000 alphageometry.py:566] LM output (score=-1.528817): "l : C b e l 15 D b l e l 16 ;"
I0123 16:36:58.781174 139863414272000 alphageometry.py:567] Translation: "l = on_line l b e, on_bline l e b"

I0123 16:36:58.781218 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_line l b e, on_bline l e b ? coll i c j"
I0123 16:36:58.781370 139863414272000 graph.py:498] 
I0123 16:36:58.781427 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_line l b e, on_bline l e b ? coll i c j
I0123 16:37:00.628114 139863414272000 ddar.py:60] Depth 1/1000 time = 1.8260059356689453
I0123 16:37:05.765012 139863414272000 ddar.py:60] Depth 2/1000 time = 5.136664390563965
I0123 16:37:10.975885 139863414272000 ddar.py:60] Depth 3/1000 time = 5.210617542266846
I0123 16:37:17.704823 139863414272000 ddar.py:60] Depth 4/1000 time = 6.728686332702637
I0123 16:37:24.456119 139863414272000 ddar.py:60] Depth 5/1000 time = 6.7509846687316895
I0123 16:37:30.636383 139863414272000 ddar.py:60] Depth 6/1000 time = 6.179647922515869
I0123 16:37:30.662612 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:37:30.662689 139863414272000 alphageometry.py:566] LM output (score=-1.655602): "l : T g i g l 15 ;"
I0123 16:37:30.662726 139863414272000 alphageometry.py:567] Translation: "l = on_tline l g g i"

I0123 16:37:30.662774 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l g g i ? coll i c j"
I0123 16:37:30.662938 139863414272000 graph.py:498] 
I0123 16:37:30.662998 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l g g i ? coll i c j
I0123 16:37:32.241819 139863414272000 ddar.py:60] Depth 1/1000 time = 1.557023286819458
I0123 16:37:35.179876 139863414272000 ddar.py:60] Depth 2/1000 time = 2.937793254852295
I0123 16:37:38.512067 139863414272000 ddar.py:60] Depth 3/1000 time = 3.331942319869995
I0123 16:37:42.368570 139863414272000 ddar.py:60] Depth 4/1000 time = 3.8562495708465576
I0123 16:37:46.242137 139863414272000 ddar.py:60] Depth 5/1000 time = 3.8732833862304688
I0123 16:37:50.089807 139863414272000 ddar.py:60] Depth 6/1000 time = 3.847001791000366
I0123 16:37:50.106889 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:37:50.106948 139863414272000 alphageometry.py:566] LM output (score=-1.912969): "l : T b c k l 15 ;"
I0123 16:37:50.106982 139863414272000 alphageometry.py:567] Translation: "l = on_tline l k b c"

I0123 16:37:50.107018 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l k b c ? coll i c j"
I0123 16:37:50.107171 139863414272000 graph.py:498] 
I0123 16:37:50.107221 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l k b c ? coll i c j
I0123 16:37:51.644973 139863414272000 ddar.py:60] Depth 1/1000 time = 1.5185608863830566
I0123 16:37:54.727565 139863414272000 ddar.py:60] Depth 2/1000 time = 3.082364082336426
I0123 16:37:57.525141 139863414272000 ddar.py:60] Depth 3/1000 time = 2.7973334789276123
I0123 16:38:01.987355 139863414272000 ddar.py:60] Depth 4/1000 time = 4.461970329284668
I0123 16:38:06.009802 139863414272000 ddar.py:60] Depth 5/1000 time = 4.0221006870269775
I0123 16:38:09.975096 139863414272000 ddar.py:60] Depth 6/1000 time = 3.9645118713378906
I0123 16:38:09.993773 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:38:09.993847 139863414272000 alphageometry.py:566] LM output (score=-1.924389): "l : T f j k l 15 ;"
I0123 16:38:09.993884 139863414272000 alphageometry.py:567] Translation: "l = on_tline l k f j"

I0123 16:38:09.993923 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l k f j ? coll i c j"
I0123 16:38:09.994086 139863414272000 graph.py:498] 
I0123 16:38:09.994146 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l k f j ? coll i c j
I0123 16:38:11.543689 139863414272000 ddar.py:60] Depth 1/1000 time = 1.529733657836914
I0123 16:38:14.644397 139863414272000 ddar.py:60] Depth 2/1000 time = 3.1004769802093506
I0123 16:38:17.356041 139863414272000 ddar.py:60] Depth 3/1000 time = 2.711409330368042
I0123 16:38:21.871009 139863414272000 ddar.py:60] Depth 4/1000 time = 4.514714002609253
I0123 16:38:25.771144 139863414272000 ddar.py:60] Depth 5/1000 time = 3.8994791507720947
I0123 16:38:25.782421 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:38:25.782480 139863414272000 alphageometry.py:566] LM output (score=-2.020966): "l : C b j l 15 D b l j l 16 ;"
I0123 16:38:25.782514 139863414272000 alphageometry.py:567] Translation: "l = on_line l b j, on_bline l j b"

I0123 16:38:25.782551 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_line l b j, on_bline l j b ? coll i c j"
I0123 16:38:25.782703 139863414272000 graph.py:498] 
I0123 16:38:25.782752 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_line l b j, on_bline l j b ? coll i c j
I0123 16:38:28.209134 139863414272000 ddar.py:60] Depth 1/1000 time = 2.4064781665802
I0123 16:38:31.936724 139863414272000 ddar.py:60] Depth 2/1000 time = 3.7273595333099365
I0123 16:38:36.948456 139863414272000 ddar.py:60] Depth 3/1000 time = 5.011490106582642
I0123 16:38:43.260274 139863414272000 ddar.py:60] Depth 4/1000 time = 6.311540126800537
I0123 16:38:48.931481 139863414272000 ddar.py:60] Depth 5/1000 time = 5.670913219451904
I0123 16:38:55.274489 139863414272000 ddar.py:60] Depth 6/1000 time = 6.342390775680542
I0123 16:38:55.299637 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:38:55.299698 139863414272000 alphageometry.py:566] LM output (score=-2.035488): "l : C b k l 15 D b l k l 16 ;"
I0123 16:38:55.299733 139863414272000 alphageometry.py:567] Translation: "l = on_line l b k, on_bline l k b"

I0123 16:38:55.299770 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_line l b k, on_bline l k b ? coll i c j"
I0123 16:38:55.299943 139863414272000 graph.py:498] 
I0123 16:38:55.300004 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_line l b k, on_bline l k b ? coll i c j
I0123 16:38:56.953008 139863414272000 ddar.py:60] Depth 1/1000 time = 1.6327600479125977
I0123 16:39:00.307859 139863414272000 ddar.py:60] Depth 2/1000 time = 3.3546242713928223
I0123 16:39:04.109565 139863414272000 ddar.py:60] Depth 3/1000 time = 3.8014707565307617
I0123 16:39:08.347177 139863414272000 ddar.py:60] Depth 4/1000 time = 4.237325191497803
I0123 16:39:13.266849 139863414272000 ddar.py:60] Depth 5/1000 time = 4.919280529022217
I0123 16:39:17.606626 139863414272000 ddar.py:60] Depth 6/1000 time = 4.339175462722778
I0123 16:39:17.630503 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:39:17.630572 139863414272000 alphageometry.py:566] LM output (score=-2.093066): "l : P a k j l 15 ;"
I0123 16:39:17.630636 139863414272000 alphageometry.py:567] Translation: "l = on_pline l j a k"

I0123 16:39:17.630677 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_pline l j a k ? coll i c j"
I0123 16:39:17.630853 139863414272000 graph.py:498] 
I0123 16:39:17.630912 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_pline l j a k ? coll i c j
I0123 16:39:19.203882 139863414272000 ddar.py:60] Depth 1/1000 time = 1.550929069519043
I0123 16:39:22.243237 139863414272000 ddar.py:60] Depth 2/1000 time = 3.0391335487365723
I0123 16:39:25.011290 139863414272000 ddar.py:60] Depth 3/1000 time = 2.767815113067627
I0123 16:39:29.586519 139863414272000 ddar.py:60] Depth 4/1000 time = 4.574975252151489
I0123 16:39:33.571027 139863414272000 ddar.py:60] Depth 5/1000 time = 3.9842045307159424
I0123 16:39:36.848314 139863414272000 ddar.py:60] Depth 6/1000 time = 3.276597261428833
I0123 16:39:36.862860 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:39:36.862937 139863414272000 alphageometry.py:566] LM output (score=-2.166309): "l : T g h h l 15 ;"
I0123 16:39:36.862976 139863414272000 alphageometry.py:567] Translation: "l = on_tline l h g h"

I0123 16:39:36.863015 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l h g h ? coll i c j"
I0123 16:39:36.863165 139863414272000 graph.py:498] 
I0123 16:39:36.863233 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l h g h ? coll i c j
I0123 16:39:39.100689 139863414272000 ddar.py:60] Depth 1/1000 time = 2.219020366668701
I0123 16:39:42.454293 139863414272000 ddar.py:60] Depth 2/1000 time = 3.353374719619751
I0123 16:39:46.730974 139863414272000 ddar.py:60] Depth 3/1000 time = 4.276428937911987
I0123 16:39:51.652227 139863414272000 ddar.py:60] Depth 4/1000 time = 4.920985460281372
I0123 16:39:56.541460 139863414272000 ddar.py:60] Depth 5/1000 time = 4.88900089263916
I0123 16:40:00.770812 139863414272000 ddar.py:60] Depth 6/1000 time = 4.228647232055664
I0123 16:40:00.784905 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:40:00.784966 139863414272000 alphageometry.py:566] LM output (score=-2.228329): "l : C b i l 15 D b l i l 16 ;"
I0123 16:40:00.785003 139863414272000 alphageometry.py:567] Translation: "l = on_line l b i, on_bline l i b"

I0123 16:40:00.785040 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_line l b i, on_bline l i b ? coll i c j"
I0123 16:40:00.785227 139863414272000 graph.py:498] 
I0123 16:40:00.785281 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_line l b i, on_bline l i b ? coll i c j
I0123 16:40:03.034162 139863414272000 ddar.py:60] Depth 1/1000 time = 2.229536771774292
I0123 16:40:06.208002 139863414272000 ddar.py:60] Depth 2/1000 time = 3.1735823154449463
I0123 16:40:09.696133 139863414272000 ddar.py:60] Depth 3/1000 time = 3.48789644241333
I0123 16:40:13.559148 139863414272000 ddar.py:60] Depth 4/1000 time = 3.862761974334717
I0123 16:40:17.548510 139863414272000 ddar.py:60] Depth 5/1000 time = 3.98907732963562
I0123 16:40:21.547070 139863414272000 ddar.py:60] Depth 6/1000 time = 3.9979753494262695
I0123 16:40:21.567016 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:40:21.567078 139863414272000 alphageometry.py:566] LM output (score=-2.280178): "l : T g h k l 15 ;"
I0123 16:40:21.567115 139863414272000 alphageometry.py:567] Translation: "l = on_tline l k g h"

I0123 16:40:21.567153 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l k g h ? coll i c j"
I0123 16:40:21.567304 139863414272000 graph.py:498] 
I0123 16:40:21.567370 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l k g h ? coll i c j
I0123 16:40:23.206479 139863414272000 ddar.py:60] Depth 1/1000 time = 1.6222972869873047
I0123 16:40:25.631620 139863414272000 ddar.py:60] Depth 2/1000 time = 2.424912214279175
I0123 16:40:29.044591 139863414272000 ddar.py:60] Depth 3/1000 time = 3.412734031677246
I0123 16:40:33.685257 139863414272000 ddar.py:60] Depth 4/1000 time = 4.640397787094116
I0123 16:40:37.739374 139863414272000 ddar.py:60] Depth 5/1000 time = 4.053782939910889
I0123 16:40:41.762345 139863414272000 ddar.py:60] Depth 6/1000 time = 4.022268772125244
I0123 16:40:41.779161 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:40:41.779245 139863414272000 alphageometry.py:566] LM output (score=-2.384672): "l : T b j k l 15 ;"
I0123 16:40:41.779281 139863414272000 alphageometry.py:567] Translation: "l = on_tline l k b j"

I0123 16:40:41.779319 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l k b j ? coll i c j"
I0123 16:40:41.779493 139863414272000 graph.py:498] 
I0123 16:40:41.779546 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l k b j ? coll i c j
I0123 16:40:43.351920 139863414272000 ddar.py:60] Depth 1/1000 time = 1.5539817810058594
I0123 16:40:46.543631 139863414272000 ddar.py:60] Depth 2/1000 time = 3.191479206085205
I0123 16:40:49.939561 139863414272000 ddar.py:60] Depth 3/1000 time = 3.395686149597168
I0123 16:40:53.913283 139863414272000 ddar.py:60] Depth 4/1000 time = 3.973461151123047
I0123 16:40:57.185352 139863414272000 ddar.py:60] Depth 5/1000 time = 3.271427631378174
I0123 16:40:57.199430 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:40:57.199490 139863414272000 alphageometry.py:566] LM output (score=-2.489843): "l : T b c i l 15 ;"
I0123 16:40:57.199527 139863414272000 alphageometry.py:567] Translation: "l = on_tline l i b c"

I0123 16:40:57.199564 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l i b c ? coll i c j"
I0123 16:40:57.199741 139863414272000 graph.py:498] 
I0123 16:40:57.199790 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l i b c ? coll i c j
I0123 16:40:59.402365 139863414272000 ddar.py:60] Depth 1/1000 time = 2.1842048168182373
I0123 16:41:01.892929 139863414272000 ddar.py:60] Depth 2/1000 time = 2.490335464477539
I0123 16:41:05.336019 139863414272000 ddar.py:60] Depth 3/1000 time = 3.442852020263672
I0123 16:41:10.267425 139863414272000 ddar.py:60] Depth 4/1000 time = 4.93114972114563
I0123 16:41:14.586771 139863414272000 ddar.py:60] Depth 5/1000 time = 4.3190436363220215
I0123 16:41:18.916225 139863414272000 ddar.py:60] Depth 6/1000 time = 4.328766822814941
I0123 16:41:18.932918 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:41:18.932980 139863414272000 alphageometry.py:566] LM output (score=-2.506093): "l : C b i l 15 D b i i l 16 ;"
I0123 16:41:18.933017 139863414272000 alphageometry.py:567] Translation: "l = on_line l b i, on_circle l i b"

I0123 16:41:18.933057 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_line l b i, on_circle l i b ? coll i c j"
I0123 16:41:18.933211 139863414272000 graph.py:498] 
I0123 16:41:18.933279 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_line l b i, on_circle l i b ? coll i c j
I0123 16:41:20.626283 139863414272000 ddar.py:60] Depth 1/1000 time = 1.6731934547424316
I0123 16:41:23.785825 139863414272000 ddar.py:60] Depth 2/1000 time = 3.159304618835449
I0123 16:41:27.367304 139863414272000 ddar.py:60] Depth 3/1000 time = 3.5812199115753174
I0123 16:41:31.484895 139863414272000 ddar.py:60] Depth 4/1000 time = 4.117293357849121
I0123 16:41:35.661559 139863414272000 ddar.py:60] Depth 5/1000 time = 4.176322937011719
I0123 16:41:39.802118 139863414272000 ddar.py:60] Depth 6/1000 time = 4.13989520072937
I0123 16:41:39.821460 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:41:39.821524 139863414272000 alphageometry.py:566] LM output (score=-2.521798): "l : T f g k l 15 ;"
I0123 16:41:39.821560 139863414272000 alphageometry.py:567] Translation: "l = on_tline l k f g"

I0123 16:41:39.821600 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l k f g ? coll i c j"
I0123 16:41:39.821769 139863414272000 graph.py:498] 
I0123 16:41:39.821833 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l k f g ? coll i c j
I0123 16:41:41.411213 139863414272000 ddar.py:60] Depth 1/1000 time = 1.571493148803711
I0123 16:41:44.528314 139863414272000 ddar.py:60] Depth 2/1000 time = 3.116873264312744
I0123 16:41:47.257065 139863414272000 ddar.py:60] Depth 3/1000 time = 2.728520631790161
I0123 16:41:51.225424 139863414272000 ddar.py:60] Depth 4/1000 time = 3.968153238296509
I0123 16:41:55.764256 139863414272000 ddar.py:60] Depth 5/1000 time = 4.538528680801392
I0123 16:41:59.747126 139863414272000 ddar.py:60] Depth 6/1000 time = 3.9822335243225098
I0123 16:41:59.765392 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:41:59.765455 139863414272000 alphageometry.py:566] LM output (score=-2.532273): "l : T b e b l 15 ;"
I0123 16:41:59.765491 139863414272000 alphageometry.py:567] Translation: "l = on_tline l b b e"

I0123 16:41:59.765532 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l b b e ? coll i c j"
I0123 16:41:59.765696 139863414272000 graph.py:498] 
I0123 16:41:59.765748 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l b b e ? coll i c j
I0123 16:42:00.721788 139863414272000 ddar.py:60] Depth 1/1000 time = 0.9378035068511963
I0123 16:42:03.846147 139863414272000 ddar.py:60] Depth 2/1000 time = 3.1241183280944824
I0123 16:42:07.367379 139863414272000 ddar.py:60] Depth 3/1000 time = 3.5209977626800537
I0123 16:42:11.686305 139863414272000 ddar.py:60] Depth 4/1000 time = 4.3186609745025635
I0123 16:42:16.698043 139863414272000 ddar.py:60] Depth 5/1000 time = 5.0114359855651855
I0123 16:42:21.011314 139863414272000 ddar.py:60] Depth 6/1000 time = 4.312581777572632
I0123 16:42:21.028195 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:42:21.028259 139863414272000 alphageometry.py:566] LM output (score=-2.561402): "l : T g k g l 15 ;"
I0123 16:42:21.028296 139863414272000 alphageometry.py:567] Translation: "l = on_tline l g g k"

I0123 16:42:21.028334 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l g g k ? coll i c j"
I0123 16:42:21.028485 139863414272000 graph.py:498] 
I0123 16:42:21.028562 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l g g k ? coll i c j
I0123 16:42:22.654225 139863414272000 ddar.py:60] Depth 1/1000 time = 1.6048002243041992
I0123 16:42:24.990248 139863414272000 ddar.py:60] Depth 2/1000 time = 2.3357934951782227
I0123 16:42:28.350613 139863414272000 ddar.py:60] Depth 3/1000 time = 3.360124349594116
I0123 16:42:32.282387 139863414272000 ddar.py:60] Depth 4/1000 time = 3.931455135345459
I0123 16:42:36.249765 139863414272000 ddar.py:60] Depth 5/1000 time = 3.9669408798217773
I0123 16:42:40.215258 139863414272000 ddar.py:60] Depth 6/1000 time = 3.9647819995880127
I0123 16:42:40.234450 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:42:40.234524 139863414272000 alphageometry.py:566] LM output (score=-2.574058): "l : T b f k l 15 ;"
I0123 16:42:40.234560 139863414272000 alphageometry.py:567] Translation: "l = on_tline l k b f"

I0123 16:42:40.234598 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l k b f ? coll i c j"
I0123 16:42:40.234766 139863414272000 graph.py:498] 
I0123 16:42:40.234820 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l k b f ? coll i c j
I0123 16:42:41.838052 139863414272000 ddar.py:60] Depth 1/1000 time = 1.582608938217163
I0123 16:42:44.483347 139863414272000 ddar.py:60] Depth 2/1000 time = 2.645064115524292
I0123 16:42:47.886271 139863414272000 ddar.py:60] Depth 3/1000 time = 3.402691125869751
I0123 16:42:51.859899 139863414272000 ddar.py:60] Depth 4/1000 time = 3.97336745262146
I0123 16:42:55.823593 139863414272000 ddar.py:60] Depth 5/1000 time = 3.963031530380249
I0123 16:42:55.836740 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:42:55.836800 139863414272000 alphageometry.py:566] LM output (score=-2.590309): "l : C b e l 15 D b e e l 16 ;"
I0123 16:42:55.836835 139863414272000 alphageometry.py:567] Translation: "l = on_line l b e, on_circle l e b"

I0123 16:42:55.836875 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_line l b e, on_circle l e b ? coll i c j"
I0123 16:42:55.837027 139863414272000 graph.py:498] 
I0123 16:42:55.837075 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_line l b e, on_circle l e b ? coll i c j
I0123 16:42:58.353192 139863414272000 ddar.py:60] Depth 1/1000 time = 2.496649980545044
I0123 16:43:02.998150 139863414272000 ddar.py:60] Depth 2/1000 time = 4.644723892211914
I0123 16:43:08.150161 139863414272000 ddar.py:60] Depth 3/1000 time = 5.151763200759888
I0123 16:43:13.882897 139863414272000 ddar.py:60] Depth 4/1000 time = 5.732475280761719
I0123 16:43:19.765115 139863414272000 ddar.py:60] Depth 5/1000 time = 5.881927967071533
I0123 16:43:25.650781 139863414272000 ddar.py:60] Depth 6/1000 time = 5.885101556777954
I0123 16:43:25.678384 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:43:25.678469 139863414272000 alphageometry.py:566] LM output (score=-2.593952): "l : T f h k l 15 ;"
I0123 16:43:25.678509 139863414272000 alphageometry.py:567] Translation: "l = on_tline l k f h"

I0123 16:43:25.678551 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l k f h ? coll i c j"
I0123 16:43:25.678708 139863414272000 graph.py:498] 
I0123 16:43:25.678765 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l k f h ? coll i c j
I0123 16:43:27.369437 139863414272000 ddar.py:60] Depth 1/1000 time = 1.672708511352539
I0123 16:43:30.608729 139863414272000 ddar.py:60] Depth 2/1000 time = 3.2390594482421875
I0123 16:43:33.406112 139863414272000 ddar.py:60] Depth 3/1000 time = 2.7971503734588623
I0123 16:43:37.157436 139863414272000 ddar.py:60] Depth 4/1000 time = 3.7510697841644287
I0123 16:43:41.114444 139863414272000 ddar.py:60] Depth 5/1000 time = 3.956685781478882
I0123 16:43:45.022463 139863414272000 ddar.py:60] Depth 6/1000 time = 3.907226324081421
I0123 16:43:45.040921 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:43:45.040997 139863414272000 alphageometry.py:566] LM output (score=-2.615340): "l : T g j g l 15 ;"
I0123 16:43:45.041035 139863414272000 alphageometry.py:567] Translation: "l = on_tline l g g j"

I0123 16:43:45.041076 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l g g j ? coll i c j"
I0123 16:43:45.041280 139863414272000 graph.py:498] 
I0123 16:43:45.041336 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l g g j ? coll i c j
I0123 16:43:46.685692 139863414272000 ddar.py:60] Depth 1/1000 time = 1.6259124279022217
I0123 16:43:49.182619 139863414272000 ddar.py:60] Depth 2/1000 time = 2.4966955184936523
I0123 16:43:52.603643 139863414272000 ddar.py:60] Depth 3/1000 time = 3.4207911491394043
I0123 16:43:56.439907 139863414272000 ddar.py:60] Depth 4/1000 time = 3.8360025882720947
I0123 16:44:00.383576 139863414272000 ddar.py:60] Depth 5/1000 time = 3.9433743953704834
I0123 16:44:03.595479 139863414272000 ddar.py:60] Depth 6/1000 time = 3.211252450942993
I0123 16:44:03.616371 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:44:03.616430 139863414272000 alphageometry.py:566] LM output (score=-2.640085): "l : T b f b l 15 ;"
I0123 16:44:03.616468 139863414272000 alphageometry.py:567] Translation: "l = on_tline l b b f"

I0123 16:44:03.616506 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l b b f ? coll i c j"
I0123 16:44:03.616658 139863414272000 graph.py:498] 
I0123 16:44:03.616708 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l b b f ? coll i c j
I0123 16:44:05.908046 139863414272000 ddar.py:60] Depth 1/1000 time = 2.2740423679351807
I0123 16:44:08.619252 139863414272000 ddar.py:60] Depth 2/1000 time = 2.710975170135498
I0123 16:44:12.112483 139863414272000 ddar.py:60] Depth 3/1000 time = 3.492990255355835
I0123 16:44:16.179797 139863414272000 ddar.py:60] Depth 4/1000 time = 4.067056894302368
I0123 16:44:20.236922 139863414272000 ddar.py:60] Depth 5/1000 time = 4.056475877761841
I0123 16:44:20.249523 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:44:20.249584 139863414272000 alphageometry.py:566] LM output (score=-2.647444): "l : T g k k l 15 ;"
I0123 16:44:20.249620 139863414272000 alphageometry.py:567] Translation: "l = on_tline l k g k"

I0123 16:44:20.249665 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l k g k ? coll i c j"
I0123 16:44:20.249816 139863414272000 graph.py:498] 
I0123 16:44:20.249865 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l k g k ? coll i c j
I0123 16:44:21.883035 139863414272000 ddar.py:60] Depth 1/1000 time = 1.615891695022583
I0123 16:44:25.084108 139863414272000 ddar.py:60] Depth 2/1000 time = 3.200839042663574
I0123 16:44:27.816219 139863414272000 ddar.py:60] Depth 3/1000 time = 2.7318625450134277
I0123 16:44:31.645976 139863414272000 ddar.py:60] Depth 4/1000 time = 3.8295037746429443
I0123 16:44:35.570510 139863414272000 ddar.py:60] Depth 5/1000 time = 3.9242379665374756
I0123 16:44:39.559793 139863414272000 ddar.py:60] Depth 6/1000 time = 3.9885213375091553
I0123 16:44:39.578964 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:44:39.579043 139863414272000 alphageometry.py:566] LM output (score=-2.651768): "l : T b c b l 15 ;"
I0123 16:44:39.579083 139863414272000 alphageometry.py:567] Translation: "l = on_tline l b b c"

I0123 16:44:39.579124 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l b b c ? coll i c j"
I0123 16:44:39.579277 139863414272000 graph.py:498] 
I0123 16:44:39.579342 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l b b c ? coll i c j
I0123 16:44:41.239831 139863414272000 ddar.py:60] Depth 1/1000 time = 1.6419241428375244
I0123 16:44:43.998198 139863414272000 ddar.py:60] Depth 2/1000 time = 2.7581303119659424
I0123 16:44:47.622842 139863414272000 ddar.py:60] Depth 3/1000 time = 3.6243679523468018
I0123 16:44:52.197726 139863414272000 ddar.py:60] Depth 4/1000 time = 4.574597120285034
I0123 16:44:56.802234 139863414272000 ddar.py:60] Depth 5/1000 time = 4.604208469390869
I0123 16:45:01.332733 139863414272000 ddar.py:60] Depth 6/1000 time = 4.52976393699646
I0123 16:45:01.348429 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:45:01.348494 139863414272000 alphageometry.py:566] LM output (score=-2.652971): "l : T g h j l 15 ;"
I0123 16:45:01.348533 139863414272000 alphageometry.py:567] Translation: "l = on_tline l j g h"

I0123 16:45:01.348572 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l j g h ? coll i c j"
I0123 16:45:01.348736 139863414272000 graph.py:498] 
I0123 16:45:01.348790 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l j g h ? coll i c j
I0123 16:45:03.026242 139863414272000 ddar.py:60] Depth 1/1000 time = 1.658466100692749
I0123 16:45:06.313565 139863414272000 ddar.py:60] Depth 2/1000 time = 3.2870852947235107
I0123 16:45:09.854719 139863414272000 ddar.py:60] Depth 3/1000 time = 3.540910005569458
I0123 16:45:13.720432 139863414272000 ddar.py:60] Depth 4/1000 time = 3.8654582500457764
I0123 16:45:17.812685 139863414272000 ddar.py:60] Depth 5/1000 time = 4.091956853866577
I0123 16:45:22.144592 139863414272000 ddar.py:60] Depth 6/1000 time = 4.331619024276733
I0123 16:45:27.153389 139863414272000 ddar.py:60] Depth 7/1000 time = 5.008140802383423
I0123 16:45:27.171793 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:45:27.171856 139863414272000 alphageometry.py:566] LM output (score=-2.777840): "l : T f i f l 15 ;"
I0123 16:45:27.171893 139863414272000 alphageometry.py:567] Translation: "l = on_tline l f f i"

I0123 16:45:27.171931 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l f f i ? coll i c j"
I0123 16:45:27.172086 139863414272000 graph.py:498] 
I0123 16:45:27.172135 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l f f i ? coll i c j
I0123 16:45:28.120261 139863414272000 ddar.py:60] Depth 1/1000 time = 0.9299330711364746
I0123 16:45:31.386979 139863414272000 ddar.py:60] Depth 2/1000 time = 3.2664873600006104
I0123 16:45:34.890006 139863414272000 ddar.py:60] Depth 3/1000 time = 3.5027918815612793
I0123 16:45:38.101648 139863414272000 ddar.py:60] Depth 4/1000 time = 3.2113852500915527
I0123 16:45:42.136983 139863414272000 ddar.py:60] Depth 5/1000 time = 4.035041570663452
I0123 16:45:46.140434 139863414272000 ddar.py:60] Depth 6/1000 time = 4.0027501583099365
I0123 16:45:46.160243 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:45:46.160339 139863414272000 alphageometry.py:566] LM output (score=-2.797868): "l : T b e e l 15 ;"
I0123 16:45:46.160376 139863414272000 alphageometry.py:567] Translation: "l = on_tline l e b e"

I0123 16:45:46.160431 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l e b e ? coll i c j"
I0123 16:45:46.160601 139863414272000 graph.py:498] 
I0123 16:45:46.160665 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l e b e ? coll i c j
I0123 16:45:47.838330 139863414272000 ddar.py:60] Depth 1/1000 time = 1.6593244075775146
I0123 16:45:51.586378 139863414272000 ddar.py:60] Depth 2/1000 time = 3.7478060722351074
I0123 16:45:56.327549 139863414272000 ddar.py:60] Depth 3/1000 time = 4.740931272506714
I0123 16:46:01.646760 139863414272000 ddar.py:60] Depth 4/1000 time = 5.318957567214966
I0123 16:46:06.334222 139863414272000 ddar.py:60] Depth 5/1000 time = 4.6871678829193115
I0123 16:46:11.735968 139863414272000 ddar.py:60] Depth 6/1000 time = 5.401026248931885
I0123 16:46:11.754543 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:46:11.754604 139863414272000 alphageometry.py:566] LM output (score=-2.855644): "l : T f h h l 15 ;"
I0123 16:46:11.754641 139863414272000 alphageometry.py:567] Translation: "l = on_tline l h f h"

I0123 16:46:11.754680 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l h f h ? coll i c j"
I0123 16:46:11.754833 139863414272000 graph.py:498] 
I0123 16:46:11.754883 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l h f h ? coll i c j
I0123 16:46:14.642360 139863414272000 ddar.py:60] Depth 1/1000 time = 2.866983413696289
I0123 16:46:19.201791 139863414272000 ddar.py:60] Depth 2/1000 time = 4.5591959953308105
I0123 16:46:24.109074 139863414272000 ddar.py:60] Depth 3/1000 time = 4.907040119171143
I0123 16:46:29.465591 139863414272000 ddar.py:60] Depth 4/1000 time = 5.356261730194092
I0123 16:46:34.980334 139863414272000 ddar.py:60] Depth 5/1000 time = 5.514438629150391
I0123 16:46:40.451881 139863414272000 ddar.py:60] Depth 6/1000 time = 5.470914840698242
I0123 16:46:40.468314 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:46:40.468380 139863414272000 alphageometry.py:566] LM output (score=-2.866504): "l : T g i i l 15 ;"
I0123 16:46:40.468436 139863414272000 alphageometry.py:567] Translation: "l = on_tline l i g i"

I0123 16:46:40.468476 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l i g i ? coll i c j"
I0123 16:46:40.468627 139863414272000 graph.py:498] 
I0123 16:46:40.468688 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l i g i ? coll i c j
I0123 16:46:42.103727 139863414272000 ddar.py:60] Depth 1/1000 time = 1.6149227619171143
I0123 16:46:45.378537 139863414272000 ddar.py:60] Depth 2/1000 time = 3.2745819091796875
I0123 16:46:48.154574 139863414272000 ddar.py:60] Depth 3/1000 time = 2.775797128677368
I0123 16:46:52.088099 139863414272000 ddar.py:60] Depth 4/1000 time = 3.9332635402679443
I0123 16:46:56.094231 139863414272000 ddar.py:60] Depth 5/1000 time = 4.005804777145386
I0123 16:46:59.344644 139863414272000 ddar.py:60] Depth 6/1000 time = 3.2496771812438965
I0123 16:46:59.364478 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:46:59.364570 139863414272000 alphageometry.py:566] LM output (score=-2.870678): "l : T f i k l 15 ;"
I0123 16:46:59.364611 139863414272000 alphageometry.py:567] Translation: "l = on_tline l k f i"

I0123 16:46:59.364652 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l k f i ? coll i c j"
I0123 16:46:59.364832 139863414272000 graph.py:498] 
I0123 16:46:59.364889 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l k f i ? coll i c j
I0123 16:47:01.718575 139863414272000 ddar.py:60] Depth 1/1000 time = 2.334019660949707
I0123 16:47:04.160342 139863414272000 ddar.py:60] Depth 2/1000 time = 2.441528797149658
I0123 16:47:07.701320 139863414272000 ddar.py:60] Depth 3/1000 time = 3.5407402515411377
I0123 16:47:11.055562 139863414272000 ddar.py:60] Depth 4/1000 time = 3.3539750576019287
I0123 16:47:15.099506 139863414272000 ddar.py:60] Depth 5/1000 time = 4.0436553955078125
I0123 16:47:19.152090 139863414272000 ddar.py:60] Depth 6/1000 time = 4.051933765411377
I0123 16:47:19.170747 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:47:19.170810 139863414272000 alphageometry.py:566] LM output (score=-2.887025): "l : T g h g l 15 ;"
I0123 16:47:19.170846 139863414272000 alphageometry.py:567] Translation: "l = on_tline l g g h"

I0123 16:47:19.170884 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l g g h ? coll i c j"
I0123 16:47:19.171034 139863414272000 graph.py:498] 
I0123 16:47:19.171082 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l g g h ? coll i c j
I0123 16:47:20.989755 139863414272000 ddar.py:60] Depth 1/1000 time = 1.8046610355377197
I0123 16:47:25.254932 139863414272000 ddar.py:60] Depth 2/1000 time = 4.264946937561035
I0123 16:47:29.092235 139863414272000 ddar.py:60] Depth 3/1000 time = 3.8370351791381836
I0123 16:47:33.292537 139863414272000 ddar.py:60] Depth 4/1000 time = 4.200044393539429
I0123 16:47:37.621298 139863414272000 ddar.py:60] Depth 5/1000 time = 4.328472852706909
I0123 16:47:42.675042 139863414272000 ddar.py:60] Depth 6/1000 time = 5.053078651428223
I0123 16:47:42.691873 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:47:42.691938 139863414272000 alphageometry.py:566] LM output (score=-2.920799): "l : C b e l 15 D b e b l 16 ;"
I0123 16:47:42.691975 139863414272000 alphageometry.py:567] Translation: "l = on_line l b e, on_circle l b e"

I0123 16:47:42.692013 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_line l b e, on_circle l b e ? coll i c j"
I0123 16:47:42.692172 139863414272000 graph.py:498] 
I0123 16:47:42.692227 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_line l b e, on_circle l b e ? coll i c j
I0123 16:47:44.638061 139863414272000 ddar.py:60] Depth 1/1000 time = 1.9272525310516357
I0123 16:47:49.131620 139863414272000 ddar.py:60] Depth 2/1000 time = 4.493330955505371
I0123 16:47:53.207530 139863414272000 ddar.py:60] Depth 3/1000 time = 4.075666189193726
I0123 16:47:58.820823 139863414272000 ddar.py:60] Depth 4/1000 time = 5.613028049468994
I0123 16:48:04.456896 139863414272000 ddar.py:60] Depth 5/1000 time = 5.635729551315308
I0123 16:48:09.308626 139863414272000 ddar.py:60] Depth 6/1000 time = 4.850854396820068
I0123 16:48:14.898346 139863414272000 ddar.py:60] Depth 7/1000 time = 5.570485591888428
I0123 16:48:14.898641 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:48:14.898704 139863414272000 alphageometry.py:566] LM output (score=-2.927962): "l : T b e k l 15 ;"
I0123 16:48:14.898740 139863414272000 alphageometry.py:567] Translation: "l = on_tline l k b e"

I0123 16:48:14.898779 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l k b e ? coll i c j"
I0123 16:48:14.898955 139863414272000 graph.py:498] 
I0123 16:48:14.899010 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k a a j; l = on_tline l k b e ? coll i c j
I0123 16:48:16.566496 139863414272000 ddar.py:60] Depth 1/1000 time = 1.6445810794830322
I0123 16:48:20.025805 139863414272000 ddar.py:60] Depth 2/1000 time = 3.459073543548584
I0123 16:48:23.000725 139863414272000 ddar.py:60] Depth 3/1000 time = 2.9746780395507812
I0123 16:48:27.308461 139863414272000 ddar.py:60] Depth 4/1000 time = 4.307481050491333
I0123 16:48:31.660693 139863414272000 ddar.py:60] Depth 5/1000 time = 4.351931571960449
I0123 16:48:35.980337 139863414272000 ddar.py:60] Depth 6/1000 time = 4.318959712982178
I0123 16:48:35.999351 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:48:35.999421 139863414272000 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : T a f f k 14 ; x00
I0123 16:48:41.589015 139863414272000 alphageometry.py:566] LM output (score=-1.194663): "l : C b e l 15 D b l e l 16 ;"
I0123 16:48:41.589222 139863414272000 alphageometry.py:567] Translation: "l = on_line l b e, on_bline l e b"

I0123 16:48:41.589266 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_line l b e, on_bline l e b ? coll i c j"
I0123 16:48:41.589416 139863414272000 graph.py:498] 
I0123 16:48:41.589471 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_line l b e, on_bline l e b ? coll i c j
I0123 16:48:44.281556 139863414272000 ddar.py:60] Depth 1/1000 time = 2.6733157634735107
I0123 16:48:49.667495 139863414272000 ddar.py:60] Depth 2/1000 time = 5.385702133178711
I0123 16:48:56.460751 139863414272000 ddar.py:60] Depth 3/1000 time = 6.793016195297241
I0123 16:49:04.077699 139863414272000 ddar.py:60] Depth 4/1000 time = 7.616689920425415
I0123 16:49:10.871808 139863414272000 ddar.py:60] Depth 5/1000 time = 6.793822765350342
I0123 16:49:18.400802 139863414272000 ddar.py:60] Depth 6/1000 time = 7.528391122817993
I0123 16:49:18.423583 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:49:18.423644 139863414272000 alphageometry.py:566] LM output (score=-1.215589): "l : P a f k l 15 ;"
I0123 16:49:18.423678 139863414272000 alphageometry.py:567] Translation: "l = on_pline l k a f"

I0123 16:49:18.423715 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_pline l k a f ? coll i c j"
I0123 16:49:18.423867 139863414272000 graph.py:498] 
I0123 16:49:18.423914 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_pline l k a f ? coll i c j
I0123 16:49:20.131857 139863414272000 ddar.py:60] Depth 1/1000 time = 1.691056489944458
I0123 16:49:23.798832 139863414272000 ddar.py:60] Depth 2/1000 time = 3.6667439937591553
I0123 16:49:28.592163 139863414272000 ddar.py:60] Depth 3/1000 time = 4.793085336685181
I0123 16:49:33.054283 139863414272000 ddar.py:60] Depth 4/1000 time = 4.461843013763428
I0123 16:49:38.466662 139863414272000 ddar.py:60] Depth 5/1000 time = 5.412026643753052
I0123 16:49:43.068409 139863414272000 ddar.py:60] Depth 6/1000 time = 4.600918292999268
I0123 16:49:43.086141 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:49:43.086210 139863414272000 alphageometry.py:566] LM output (score=-1.250685): "l : P a f k l 15 P a l f k 16 ;"
I0123 16:49:43.086246 139863414272000 alphageometry.py:567] Translation: "l = on_pline l k a f, on_pline l a f k"

I0123 16:49:43.086282 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_pline l k a f, on_pline l a f k ? coll i c j"
I0123 16:49:43.086452 139863414272000 graph.py:498] 
I0123 16:49:43.086507 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_pline l k a f, on_pline l a f k ? coll i c j
I0123 16:49:44.884554 139863414272000 ddar.py:60] Depth 1/1000 time = 1.77652907371521
I0123 16:49:49.305160 139863414272000 ddar.py:60] Depth 2/1000 time = 4.420360326766968
I0123 16:49:54.998540 139863414272000 ddar.py:60] Depth 3/1000 time = 5.6931352615356445
I0123 16:50:01.478074 139863414272000 ddar.py:60] Depth 4/1000 time = 6.479280710220337
I0123 16:50:07.982263 139863414272000 ddar.py:60] Depth 5/1000 time = 6.503901720046997
I0123 16:50:14.512519 139863414272000 ddar.py:60] Depth 6/1000 time = 6.529479026794434
I0123 16:50:14.542406 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:50:14.542468 139863414272000 alphageometry.py:566] LM output (score=-1.879672): "l : P a c h l 15 ;"
I0123 16:50:14.542505 139863414272000 alphageometry.py:567] Translation: "l = on_pline l h a c"

I0123 16:50:14.542545 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_pline l h a c ? coll i c j"
I0123 16:50:14.542703 139863414272000 graph.py:498] 
I0123 16:50:14.542753 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_pline l h a c ? coll i c j
I0123 16:50:16.247794 139863414272000 ddar.py:60] Depth 1/1000 time = 1.6863493919372559
I0123 16:50:19.935934 139863414272000 ddar.py:60] Depth 2/1000 time = 3.6879074573516846
I0123 16:50:23.938359 139863414272000 ddar.py:60] Depth 3/1000 time = 4.002192258834839
I0123 16:50:29.360881 139863414272000 ddar.py:60] Depth 4/1000 time = 5.4222636222839355
I0123 16:50:34.003463 139863414272000 ddar.py:60] Depth 5/1000 time = 4.642298936843872
I0123 16:50:39.405688 139863414272000 ddar.py:60] Depth 6/1000 time = 5.401538372039795
I0123 16:50:39.422026 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:50:39.422084 139863414272000 alphageometry.py:566] LM output (score=-1.930970): "l : P a c b l 15 ;"
I0123 16:50:39.422120 139863414272000 alphageometry.py:567] Translation: "l = on_pline l b a c"

I0123 16:50:39.422158 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_pline l b a c ? coll i c j"
I0123 16:50:39.422307 139863414272000 graph.py:498] 
I0123 16:50:39.422355 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_pline l b a c ? coll i c j
I0123 16:50:41.158898 139863414272000 ddar.py:60] Depth 1/1000 time = 1.7192575931549072
I0123 16:50:45.021515 139863414272000 ddar.py:60] Depth 2/1000 time = 3.8623783588409424
I0123 16:50:49.087373 139863414272000 ddar.py:60] Depth 3/1000 time = 4.065611839294434
I0123 16:50:53.580810 139863414272000 ddar.py:60] Depth 4/1000 time = 4.493185758590698
I0123 16:50:58.918538 139863414272000 ddar.py:60] Depth 5/1000 time = 5.3374412059783936
I0123 16:51:04.321922 139863414272000 ddar.py:60] Depth 6/1000 time = 5.402666091918945
I0123 16:51:04.339909 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:51:04.339976 139863414272000 alphageometry.py:566] LM output (score=-1.951174): "l : C b j l 15 D b l j l 16 ;"
I0123 16:51:04.340014 139863414272000 alphageometry.py:567] Translation: "l = on_line l b j, on_bline l j b"

I0123 16:51:04.340053 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_line l b j, on_bline l j b ? coll i c j"
I0123 16:51:04.340229 139863414272000 graph.py:498] 
I0123 16:51:04.340281 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_line l b j, on_bline l j b ? coll i c j
I0123 16:51:06.340445 139863414272000 ddar.py:60] Depth 1/1000 time = 1.9806714057922363
I0123 16:51:12.738092 139863414272000 ddar.py:60] Depth 2/1000 time = 6.397420406341553
I0123 16:51:20.746779 139863414272000 ddar.py:60] Depth 3/1000 time = 8.008440494537354
I0123 16:51:28.696360 139863414272000 ddar.py:60] Depth 4/1000 time = 7.949321269989014
I0123 16:51:37.472116 139863414272000 ddar.py:60] Depth 5/1000 time = 8.77546501159668
I0123 16:51:45.409205 139863414272000 ddar.py:60] Depth 6/1000 time = 7.936315298080444
I0123 16:51:45.430803 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:51:45.430864 139863414272000 alphageometry.py:566] LM output (score=-1.990116): "l : P a l f k 15 ;"
I0123 16:51:45.430900 139863414272000 alphageometry.py:567] Translation: "l = on_pline l a f k"

I0123 16:51:45.430937 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_pline l a f k ? coll i c j"
I0123 16:51:45.431088 139863414272000 graph.py:498] 
I0123 16:51:45.431135 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_pline l a f k ? coll i c j
I0123 16:51:47.155233 139863414272000 ddar.py:60] Depth 1/1000 time = 1.7075448036193848
I0123 16:51:50.838181 139863414272000 ddar.py:60] Depth 2/1000 time = 3.682725191116333
I0123 16:51:54.893397 139863414272000 ddar.py:60] Depth 3/1000 time = 4.054957151412964
I0123 16:52:00.195380 139863414272000 ddar.py:60] Depth 4/1000 time = 5.301732778549194
I0123 16:52:05.602500 139863414272000 ddar.py:60] Depth 5/1000 time = 5.406841039657593
I0123 16:52:10.201854 139863414272000 ddar.py:60] Depth 6/1000 time = 4.598671197891235
I0123 16:52:10.218156 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:52:10.218219 139863414272000 alphageometry.py:566] LM output (score=-2.160924): "l : P a c i l 15 ;"
I0123 16:52:10.218254 139863414272000 alphageometry.py:567] Translation: "l = on_pline l i a c"

I0123 16:52:10.218291 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_pline l i a c ? coll i c j"
I0123 16:52:10.218441 139863414272000 graph.py:498] 
I0123 16:52:10.218500 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_pline l i a c ? coll i c j
I0123 16:52:11.967878 139863414272000 ddar.py:60] Depth 1/1000 time = 1.7317698001861572
I0123 16:52:15.628620 139863414272000 ddar.py:60] Depth 2/1000 time = 3.660517692565918
I0123 16:52:20.447888 139863414272000 ddar.py:60] Depth 3/1000 time = 4.81901216506958
I0123 16:52:24.888152 139863414272000 ddar.py:60] Depth 4/1000 time = 4.439983606338501
I0123 16:52:30.320613 139863414272000 ddar.py:60] Depth 5/1000 time = 5.432160377502441
I0123 16:52:34.917414 139863414272000 ddar.py:60] Depth 6/1000 time = 4.596110820770264
I0123 16:52:34.935423 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:52:34.935484 139863414272000 alphageometry.py:566] LM output (score=-2.189373): "l : P a e g l 15 ;"
I0123 16:52:34.935521 139863414272000 alphageometry.py:567] Translation: "l = on_pline l g a e"

I0123 16:52:34.935561 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_pline l g a e ? coll i c j"
I0123 16:52:34.935736 139863414272000 graph.py:498] 
I0123 16:52:34.935792 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_pline l g a e ? coll i c j
I0123 16:52:36.698614 139863414272000 ddar.py:60] Depth 1/1000 time = 1.7441062927246094
I0123 16:52:40.447147 139863414272000 ddar.py:60] Depth 2/1000 time = 3.748305559158325
I0123 16:52:44.455592 139863414272000 ddar.py:60] Depth 3/1000 time = 4.008199214935303
I0123 16:52:49.858176 139863414272000 ddar.py:60] Depth 4/1000 time = 5.402320146560669
I0123 16:52:55.209248 139863414272000 ddar.py:60] Depth 5/1000 time = 5.350788116455078
I0123 16:52:59.813576 139863414272000 ddar.py:60] Depth 6/1000 time = 4.603696823120117
I0123 16:52:59.830323 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:52:59.830387 139863414272000 alphageometry.py:566] LM output (score=-2.333804): "l : P a c e l 15 ;"
I0123 16:52:59.830423 139863414272000 alphageometry.py:567] Translation: "l = on_pline l e a c"

I0123 16:52:59.830460 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_pline l e a c ? coll i c j"
I0123 16:52:59.830608 139863414272000 graph.py:498] 
I0123 16:52:59.830657 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_pline l e a c ? coll i c j
I0123 16:53:01.556336 139863414272000 ddar.py:60] Depth 1/1000 time = 1.7057669162750244
I0123 16:53:05.385910 139863414272000 ddar.py:60] Depth 2/1000 time = 3.8293404579162598
I0123 16:53:10.160494 139863414272000 ddar.py:60] Depth 3/1000 time = 4.774347305297852
I0123 16:53:14.871108 139863414272000 ddar.py:60] Depth 4/1000 time = 4.710360765457153
I0123 16:53:20.340639 139863414272000 ddar.py:60] Depth 5/1000 time = 5.469236612319946
I0123 16:53:25.035194 139863414272000 ddar.py:60] Depth 6/1000 time = 4.693875074386597
I0123 16:53:25.049876 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:53:25.049938 139863414272000 alphageometry.py:566] LM output (score=-2.336317): "l : C b k l 15 D b l k l 16 ;"
I0123 16:53:25.049976 139863414272000 alphageometry.py:567] Translation: "l = on_line l b k, on_bline l k b"

I0123 16:53:25.050016 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_line l b k, on_bline l k b ? coll i c j"
I0123 16:53:25.050171 139863414272000 graph.py:498] 
I0123 16:53:25.050246 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_line l b k, on_bline l k b ? coll i c j
I0123 16:53:26.899921 139863414272000 ddar.py:60] Depth 1/1000 time = 1.8299469947814941
I0123 16:53:33.282905 139863414272000 ddar.py:60] Depth 2/1000 time = 6.382758617401123
I0123 16:53:40.009768 139863414272000 ddar.py:60] Depth 3/1000 time = 6.726621627807617
I0123 16:53:48.367912 139863414272000 ddar.py:60] Depth 4/1000 time = 8.357816219329834
I0123 16:53:55.897972 139863414272000 ddar.py:60] Depth 5/1000 time = 7.529621362686157
I0123 16:54:03.350919 139863414272000 ddar.py:60] Depth 6/1000 time = 7.4523093700408936
I0123 16:54:03.368591 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:54:03.368663 139863414272000 alphageometry.py:566] LM output (score=-2.355488): "l : C b i l 15 D b l i l 16 ;"
I0123 16:54:03.368700 139863414272000 alphageometry.py:567] Translation: "l = on_line l b i, on_bline l i b"

I0123 16:54:03.368745 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_line l b i, on_bline l i b ? coll i c j"
I0123 16:54:03.368918 139863414272000 graph.py:498] 
I0123 16:54:03.368972 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_line l b i, on_bline l i b ? coll i c j
I0123 16:54:05.188432 139863414272000 ddar.py:60] Depth 1/1000 time = 1.7994787693023682
I0123 16:54:09.831670 139863414272000 ddar.py:60] Depth 2/1000 time = 4.64300012588501
I0123 16:54:14.074773 139863414272000 ddar.py:60] Depth 3/1000 time = 4.242865324020386
I0123 16:54:18.684202 139863414272000 ddar.py:60] Depth 4/1000 time = 4.6091697216033936
I0123 16:54:24.115580 139863414272000 ddar.py:60] Depth 5/1000 time = 5.431085586547852
I0123 16:54:28.788897 139863414272000 ddar.py:60] Depth 6/1000 time = 4.672641754150391
I0123 16:54:28.809652 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:54:28.809712 139863414272000 alphageometry.py:566] LM output (score=-2.390811): "l : P a g k l 15 ;"
I0123 16:54:28.809747 139863414272000 alphageometry.py:567] Translation: "l = on_pline l k a g"

I0123 16:54:28.809786 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_pline l k a g ? coll i c j"
I0123 16:54:28.809937 139863414272000 graph.py:498] 
I0123 16:54:28.809985 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_pline l k a g ? coll i c j
I0123 16:54:30.630177 139863414272000 ddar.py:60] Depth 1/1000 time = 1.8004391193389893
I0123 16:54:34.471017 139863414272000 ddar.py:60] Depth 2/1000 time = 3.840610980987549
I0123 16:54:39.366296 139863414272000 ddar.py:60] Depth 3/1000 time = 4.8950371742248535
I0123 16:54:44.161896 139863414272000 ddar.py:60] Depth 4/1000 time = 4.795350790023804
I0123 16:54:48.913696 139863414272000 ddar.py:60] Depth 5/1000 time = 4.751516103744507
I0123 16:54:54.443287 139863414272000 ddar.py:60] Depth 6/1000 time = 5.528886795043945
I0123 16:54:54.458607 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:54:54.458744 139863414272000 alphageometry.py:566] LM output (score=-2.557208): "l : T f k k l 15 ;"
I0123 16:54:54.458784 139863414272000 alphageometry.py:567] Translation: "l = on_tline l k f k"

I0123 16:54:54.458821 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_tline l k f k ? coll i c j"
I0123 16:54:54.458973 139863414272000 graph.py:498] 
I0123 16:54:54.459022 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_tline l k f k ? coll i c j
I0123 16:54:56.204597 139863414272000 ddar.py:60] Depth 1/1000 time = 1.7284386157989502
I0123 16:55:00.065764 139863414272000 ddar.py:60] Depth 2/1000 time = 3.860933542251587
I0123 16:55:04.193551 139863414272000 ddar.py:60] Depth 3/1000 time = 4.12754487991333
I0123 16:55:08.728085 139863414272000 ddar.py:60] Depth 4/1000 time = 4.534274578094482
I0123 16:55:13.344233 139863414272000 ddar.py:60] Depth 5/1000 time = 4.615860223770142
I0123 16:55:18.773008 139863414272000 ddar.py:60] Depth 6/1000 time = 5.428110837936401
I0123 16:55:18.791412 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:55:18.791487 139863414272000 alphageometry.py:566] LM output (score=-2.591766): "l : T g j g l 15 ;"
I0123 16:55:18.791523 139863414272000 alphageometry.py:567] Translation: "l = on_tline l g g j"

I0123 16:55:18.791562 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_tline l g g j ? coll i c j"
I0123 16:55:18.791720 139863414272000 graph.py:498] 
I0123 16:55:18.791773 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_tline l g g j ? coll i c j
I0123 16:55:20.573754 139863414272000 ddar.py:60] Depth 1/1000 time = 1.7644360065460205
I0123 16:55:24.424216 139863414272000 ddar.py:60] Depth 2/1000 time = 3.8502330780029297
I0123 16:55:28.557314 139863414272000 ddar.py:60] Depth 3/1000 time = 4.13286018371582
I0123 16:55:33.070117 139863414272000 ddar.py:60] Depth 4/1000 time = 4.512359380722046
I0123 16:55:37.732829 139863414272000 ddar.py:60] Depth 5/1000 time = 4.6623711585998535
I0123 16:55:42.351008 139863414272000 ddar.py:60] Depth 6/1000 time = 4.617367267608643
I0123 16:55:42.370929 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:55:42.371000 139863414272000 alphageometry.py:566] LM output (score=-2.592741): "l : T b c k l 15 ;"
I0123 16:55:42.371038 139863414272000 alphageometry.py:567] Translation: "l = on_tline l k b c"

I0123 16:55:42.371076 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_tline l k b c ? coll i c j"
I0123 16:55:42.371235 139863414272000 graph.py:498] 
I0123 16:55:42.371289 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_tline l k b c ? coll i c j
I0123 16:55:44.084171 139863414272000 ddar.py:60] Depth 1/1000 time = 1.6937034130096436
I0123 16:55:48.730439 139863414272000 ddar.py:60] Depth 2/1000 time = 4.646035671234131
I0123 16:55:52.904445 139863414272000 ddar.py:60] Depth 3/1000 time = 4.173742771148682
I0123 16:55:57.640147 139863414272000 ddar.py:60] Depth 4/1000 time = 4.735445499420166
I0123 16:56:02.354510 139863414272000 ddar.py:60] Depth 5/1000 time = 4.713713645935059
I0123 16:56:02.368090 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:56:02.368148 139863414272000 alphageometry.py:566] LM output (score=-2.695627): "l : P a e g l 15 P a g e l 16 ;"
I0123 16:56:02.368183 139863414272000 alphageometry.py:567] Translation: "l = on_pline l g a e, on_pline l e a g"

I0123 16:56:02.368219 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_pline l g a e, on_pline l e a g ? coll i c j"
I0123 16:56:02.368379 139863414272000 graph.py:498] 
I0123 16:56:02.368430 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_pline l g a e, on_pline l e a g ? coll i c j
I0123 16:56:04.328313 139863414272000 ddar.py:60] Depth 1/1000 time = 1.9367308616638184
I0123 16:56:09.288915 139863414272000 ddar.py:60] Depth 2/1000 time = 4.960376024246216
I0123 16:56:13.855581 139863414272000 ddar.py:60] Depth 3/1000 time = 4.566418409347534
I0123 16:56:19.142390 139863414272000 ddar.py:60] Depth 4/1000 time = 5.286560297012329
I0123 16:56:25.156821 139863414272000 ddar.py:60] Depth 5/1000 time = 6.014132499694824
I0123 16:56:31.214496 139863414272000 ddar.py:60] Depth 6/1000 time = 6.056927680969238
I0123 16:56:31.233571 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:56:31.233666 139863414272000 alphageometry.py:566] LM output (score=-2.766155): "l : C b e l 15 D b e e l 16 ;"
I0123 16:56:31.233710 139863414272000 alphageometry.py:567] Translation: "l = on_line l b e, on_circle l e b"

I0123 16:56:31.233752 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_line l b e, on_circle l e b ? coll i c j"
I0123 16:56:31.233911 139863414272000 graph.py:498] 
I0123 16:56:31.233962 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_line l b e, on_circle l e b ? coll i c j
I0123 16:56:33.301947 139863414272000 ddar.py:60] Depth 1/1000 time = 2.048447608947754
I0123 16:56:38.599116 139863414272000 ddar.py:60] Depth 2/1000 time = 5.2969419956207275
I0123 16:56:44.487890 139863414272000 ddar.py:60] Depth 3/1000 time = 5.888535976409912
I0123 16:56:50.994052 139863414272000 ddar.py:60] Depth 4/1000 time = 6.505907297134399
I0123 16:56:58.466849 139863414272000 ddar.py:60] Depth 5/1000 time = 7.472504377365112
I0123 16:57:05.201789 139863414272000 ddar.py:60] Depth 6/1000 time = 6.734364032745361
I0123 16:57:05.229688 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:57:05.229754 139863414272000 alphageometry.py:566] LM output (score=-2.769495): "l : C b i l 15 D b i i l 16 ;"
I0123 16:57:05.229792 139863414272000 alphageometry.py:567] Translation: "l = on_line l b i, on_circle l i b"

I0123 16:57:05.229831 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_line l b i, on_circle l i b ? coll i c j"
I0123 16:57:05.230008 139863414272000 graph.py:498] 
I0123 16:57:05.230059 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_line l b i, on_circle l i b ? coll i c j
I0123 16:57:07.098228 139863414272000 ddar.py:60] Depth 1/1000 time = 1.8470790386199951
I0123 16:57:10.986085 139863414272000 ddar.py:60] Depth 2/1000 time = 3.887619972229004
I0123 16:57:15.225307 139863414272000 ddar.py:60] Depth 3/1000 time = 4.238972425460815
I0123 16:57:20.708464 139863414272000 ddar.py:60] Depth 4/1000 time = 5.4829113483428955
I0123 16:57:25.534046 139863414272000 ddar.py:60] Depth 5/1000 time = 4.825289487838745
I0123 16:57:30.278611 139863414272000 ddar.py:60] Depth 6/1000 time = 4.743969440460205
I0123 16:57:30.300051 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:57:30.300109 139863414272000 alphageometry.py:566] LM output (score=-2.791963): "l : P f k k l 15 ;"
I0123 16:57:30.300144 139863414272000 alphageometry.py:567] Translation: "ERROR: Invalid predicate P f k k l"

I0123 16:57:30.300179 139863414272000 alphageometry.py:566] LM output (score=-2.792615): "l : P g h k l 15 ;"
I0123 16:57:30.300205 139863414272000 alphageometry.py:567] Translation: "l = on_pline l k g h"

I0123 16:57:30.300235 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_pline l k g h ? coll i c j"
I0123 16:57:30.300387 139863414272000 graph.py:498] 
I0123 16:57:30.300445 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_pline l k g h ? coll i c j
I0123 16:57:32.107887 139863414272000 ddar.py:60] Depth 1/1000 time = 1.790532112121582
I0123 16:57:36.037680 139863414272000 ddar.py:60] Depth 2/1000 time = 3.9295520782470703
I0123 16:57:41.072004 139863414272000 ddar.py:60] Depth 3/1000 time = 5.034085273742676
I0123 16:57:45.660780 139863414272000 ddar.py:60] Depth 4/1000 time = 4.588523626327515
I0123 16:57:50.421955 139863414272000 ddar.py:60] Depth 5/1000 time = 4.76088285446167
I0123 16:57:55.139088 139863414272000 ddar.py:60] Depth 6/1000 time = 4.716422080993652
I0123 16:57:55.157688 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:57:55.157759 139863414272000 alphageometry.py:566] LM output (score=-2.846065): "l : P e j k l 15 ;"
I0123 16:57:55.157796 139863414272000 alphageometry.py:567] Translation: "l = on_pline l k e j"

I0123 16:57:55.157835 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_pline l k e j ? coll i c j"
I0123 16:57:55.157996 139863414272000 graph.py:498] 
I0123 16:57:55.158052 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_pline l k e j ? coll i c j
I0123 16:57:56.991401 139863414272000 ddar.py:60] Depth 1/1000 time = 1.8144903182983398
I0123 16:58:00.839138 139863414272000 ddar.py:60] Depth 2/1000 time = 3.847480297088623
I0123 16:58:05.000496 139863414272000 ddar.py:60] Depth 3/1000 time = 4.161094427108765
I0123 16:58:09.731870 139863414272000 ddar.py:60] Depth 4/1000 time = 4.731106519699097
I0123 16:58:15.332459 139863414272000 ddar.py:60] Depth 5/1000 time = 5.600296497344971
I0123 16:58:20.084740 139863414272000 ddar.py:60] Depth 6/1000 time = 4.751628875732422
I0123 16:58:20.101206 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:58:20.101268 139863414272000 alphageometry.py:566] LM output (score=-2.857540): "l : P a c f l 15 ;"
I0123 16:58:20.101305 139863414272000 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2570, in add_clause
    raise DepCheckFailError(
graph.DepCheckFailError: ncoll f a c
"

I0123 16:58:20.101344 139863414272000 alphageometry.py:566] LM output (score=-2.877638): "l : T g i g l 15 ;"
I0123 16:58:20.101371 139863414272000 alphageometry.py:567] Translation: "l = on_tline l g g i"

I0123 16:58:20.101402 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_tline l g g i ? coll i c j"
I0123 16:58:20.101557 139863414272000 graph.py:498] 
I0123 16:58:20.101608 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_tline l g g i ? coll i c j
I0123 16:58:21.062086 139863414272000 ddar.py:60] Depth 1/1000 time = 0.942873477935791
I0123 16:58:24.785336 139863414272000 ddar.py:60] Depth 2/1000 time = 3.7230184078216553
I0123 16:58:29.735689 139863414272000 ddar.py:60] Depth 3/1000 time = 4.950113773345947
I0123 16:58:34.316917 139863414272000 ddar.py:60] Depth 4/1000 time = 4.580970764160156
I0123 16:58:39.039613 139863414272000 ddar.py:60] Depth 5/1000 time = 4.722400903701782
I0123 16:58:43.722965 139863414272000 ddar.py:60] Depth 6/1000 time = 4.6827232837677
I0123 16:58:43.743247 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:58:43.743309 139863414272000 alphageometry.py:566] LM output (score=-2.937862): "l : C b c l 15 D b l c l 16 ;"
I0123 16:58:43.743345 139863414272000 alphageometry.py:567] Translation: "l = on_line l b c, on_bline l c b"

I0123 16:58:43.743382 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_line l b c, on_bline l c b ? coll i c j"
I0123 16:58:43.743541 139863414272000 graph.py:498] 
I0123 16:58:43.743592 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_line l b c, on_bline l c b ? coll i c j
I0123 16:58:45.813501 139863414272000 ddar.py:60] Depth 1/1000 time = 2.0512428283691406
I0123 16:58:51.160815 139863414272000 ddar.py:60] Depth 2/1000 time = 5.347076177597046
I0123 16:58:57.319117 139863414272000 ddar.py:60] Depth 3/1000 time = 6.158059120178223
I0123 16:59:05.051960 139863414272000 ddar.py:60] Depth 4/1000 time = 7.732369661331177
I0123 16:59:12.046705 139863414272000 ddar.py:60] Depth 5/1000 time = 6.994419574737549
I0123 16:59:18.990012 139863414272000 ddar.py:60] Depth 6/1000 time = 6.942738056182861
I0123 16:59:19.016437 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:59:19.016499 139863414272000 alphageometry.py:566] LM output (score=-2.946891): "l : P a c j l 15 ;"
I0123 16:59:19.016535 139863414272000 alphageometry.py:567] Translation: "l = on_pline l j a c"

I0123 16:59:19.016572 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_pline l j a c ? coll i c j"
I0123 16:59:19.016724 139863414272000 graph.py:498] 
I0123 16:59:19.016773 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_pline l j a c ? coll i c j
I0123 16:59:20.798585 139863414272000 ddar.py:60] Depth 1/1000 time = 1.760103702545166
I0123 16:59:24.592196 139863414272000 ddar.py:60] Depth 2/1000 time = 3.793379783630371
I0123 16:59:29.667326 139863414272000 ddar.py:60] Depth 3/1000 time = 5.074877977371216
I0123 16:59:34.482313 139863414272000 ddar.py:60] Depth 4/1000 time = 4.81472635269165
I0123 16:59:39.307338 139863414272000 ddar.py:60] Depth 5/1000 time = 4.824728727340698
I0123 16:59:44.086817 139863414272000 ddar.py:60] Depth 6/1000 time = 4.778813600540161
I0123 16:59:44.101728 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 16:59:44.101789 139863414272000 alphageometry.py:566] LM output (score=-2.949550): "l : T f j k l 15 ;"
I0123 16:59:44.101826 139863414272000 alphageometry.py:567] Translation: "l = on_tline l k f j"

I0123 16:59:44.101865 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_tline l k f j ? coll i c j"
I0123 16:59:44.102019 139863414272000 graph.py:498] 
I0123 16:59:44.102076 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_tline l k f j ? coll i c j
I0123 16:59:45.896240 139863414272000 ddar.py:60] Depth 1/1000 time = 1.7770018577575684
I0123 16:59:49.856856 139863414272000 ddar.py:60] Depth 2/1000 time = 3.9603939056396484
I0123 16:59:54.165521 139863414272000 ddar.py:60] Depth 3/1000 time = 4.308419466018677
I0123 16:59:59.957355 139863414272000 ddar.py:60] Depth 4/1000 time = 5.791564702987671
I0123 17:00:04.975154 139863414272000 ddar.py:60] Depth 5/1000 time = 5.017513036727905
I0123 17:00:09.936778 139863414272000 ddar.py:60] Depth 6/1000 time = 4.960998773574829
I0123 17:00:09.955132 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:00:09.955203 139863414272000 alphageometry.py:566] LM output (score=-3.013087): "l : C b c l 15 D b c c l 16 ;"
I0123 17:00:09.955240 139863414272000 alphageometry.py:567] Translation: "l = on_line l b c, on_circle l c b"

I0123 17:00:09.955278 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_line l b c, on_circle l c b ? coll i c j"
I0123 17:00:09.955444 139863414272000 graph.py:498] 
I0123 17:00:09.955496 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_line l b c, on_circle l c b ? coll i c j
I0123 17:00:12.054393 139863414272000 ddar.py:60] Depth 1/1000 time = 2.0803298950195312
I0123 17:00:17.392522 139863414272000 ddar.py:60] Depth 2/1000 time = 5.337897777557373
I0123 17:00:23.063205 139863414272000 ddar.py:60] Depth 3/1000 time = 5.670439720153809
I0123 17:00:29.254931 139863414272000 ddar.py:60] Depth 4/1000 time = 6.191457748413086
I0123 17:00:35.487813 139863414272000 ddar.py:60] Depth 5/1000 time = 6.232573509216309
I0123 17:00:42.775354 139863414272000 ddar.py:60] Depth 6/1000 time = 7.2869322299957275
I0123 17:00:42.797734 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:00:42.797812 139863414272000 alphageometry.py:566] LM output (score=-3.065217): "l : C b j l 15 D b j j l 16 ;"
I0123 17:00:42.797849 139863414272000 alphageometry.py:567] Translation: "l = on_line l b j, on_circle l j b"

I0123 17:00:42.797890 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_line l b j, on_circle l j b ? coll i c j"
I0123 17:00:42.798063 139863414272000 graph.py:498] 
I0123 17:00:42.798118 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_line l b j, on_circle l j b ? coll i c j
I0123 17:00:44.933132 139863414272000 ddar.py:60] Depth 1/1000 time = 2.113943338394165
I0123 17:00:50.722549 139863414272000 ddar.py:60] Depth 2/1000 time = 5.789181470870972
I0123 17:00:57.740927 139863414272000 ddar.py:60] Depth 3/1000 time = 7.0181310176849365
I0123 17:01:05.461922 139863414272000 ddar.py:60] Depth 4/1000 time = 7.720752000808716
I0123 17:01:14.117033 139863414272000 ddar.py:60] Depth 5/1000 time = 8.654822826385498
I0123 17:01:21.849565 139863414272000 ddar.py:60] Depth 6/1000 time = 7.731934309005737
I0123 17:01:21.867789 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:01:21.867849 139863414272000 alphageometry.py:566] LM output (score=-3.106683): "l : P a c g l 15 ;"
I0123 17:01:21.867885 139863414272000 alphageometry.py:567] Translation: "l = on_pline l g a c"

I0123 17:01:21.867921 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_pline l g a c ? coll i c j"
I0123 17:01:21.868068 139863414272000 graph.py:498] 
I0123 17:01:21.868116 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_pline l g a c ? coll i c j
I0123 17:01:22.827420 139863414272000 ddar.py:60] Depth 1/1000 time = 0.9412133693695068
I0123 17:01:26.688899 139863414272000 ddar.py:60] Depth 2/1000 time = 3.8612537384033203
I0123 17:01:31.792068 139863414272000 ddar.py:60] Depth 3/1000 time = 5.102935075759888
I0123 17:01:36.501379 139863414272000 ddar.py:60] Depth 4/1000 time = 4.7090559005737305
I0123 17:01:41.360964 139863414272000 ddar.py:60] Depth 5/1000 time = 4.8592963218688965
I0123 17:01:46.171271 139863414272000 ddar.py:60] Depth 6/1000 time = 4.809589385986328
I0123 17:01:46.188724 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:01:46.188808 139863414272000 alphageometry.py:566] LM output (score=-3.116572): "l : D b c b l 15 T a b c l 16 ;"
I0123 17:01:46.188874 139863414272000 alphageometry.py:567] Translation: "l = on_circle l b c, on_tline l c a b"

I0123 17:01:46.188915 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_circle l b c, on_tline l c a b ? coll i c j"
I0123 17:01:46.189073 139863414272000 graph.py:498] 
I0123 17:01:46.189123 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_circle l b c, on_tline l c a b ? coll i c j
I0123 17:01:48.154736 139863414272000 ddar.py:60] Depth 1/1000 time = 1.9442203044891357
I0123 17:01:52.305928 139863414272000 ddar.py:60] Depth 2/1000 time = 4.150952339172363
I0123 17:01:56.991896 139863414272000 ddar.py:60] Depth 3/1000 time = 4.685731649398804
I0123 17:02:03.374991 139863414272000 ddar.py:60] Depth 4/1000 time = 6.382842302322388
I0123 17:02:12.442564 139863414272000 ddar.py:60] Depth 5/1000 time = 9.067301511764526
I0123 17:02:20.672814 139863414272000 ddar.py:60] Depth 6/1000 time = 8.229955673217773
I0123 17:02:28.889373 139863414272000 ddar.py:60] Depth 7/1000 time = 8.21587610244751
I0123 17:02:28.944059 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:02:28.944184 139863414272000 alphageometry.py:566] LM output (score=-3.129874): "l : T g j j l 15 ;"
I0123 17:02:28.944225 139863414272000 alphageometry.py:567] Translation: "l = on_tline l j g j"

I0123 17:02:28.944263 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_tline l j g j ? coll i c j"
I0123 17:02:28.944412 139863414272000 graph.py:498] 
I0123 17:02:28.944461 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k f a f; l = on_tline l j g j ? coll i c j
I0123 17:02:30.799829 139863414272000 ddar.py:60] Depth 1/1000 time = 1.83418869972229
I0123 17:02:33.857444 139863414272000 ddar.py:60] Depth 2/1000 time = 3.057399034500122
I0123 17:02:38.031052 139863414272000 ddar.py:60] Depth 3/1000 time = 4.173379421234131
I0123 17:02:43.728918 139863414272000 ddar.py:60] Depth 4/1000 time = 5.69760799407959
I0123 17:02:48.480559 139863414272000 ddar.py:60] Depth 5/1000 time = 4.7513415813446045
I0123 17:02:53.292771 139863414272000 ddar.py:60] Depth 6/1000 time = 4.811571359634399
I0123 17:02:53.308944 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:02:53.309017 139863414272000 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : T b f c k 14 ; x00
I0123 17:02:58.835895 139863414272000 alphageometry.py:566] LM output (score=-0.836356): "l : C b e l 15 D b l e l 16 ;"
I0123 17:02:58.836098 139863414272000 alphageometry.py:567] Translation: "l = on_line l b e, on_bline l e b"

I0123 17:02:58.836142 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_line l b e, on_bline l e b ? coll i c j"
I0123 17:02:58.836357 139863414272000 graph.py:498] 
I0123 17:02:58.836434 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_line l b e, on_bline l e b ? coll i c j
I0123 17:03:00.997799 139863414272000 ddar.py:60] Depth 1/1000 time = 2.1399075984954834
I0123 17:03:06.780949 139863414272000 ddar.py:60] Depth 2/1000 time = 5.782912969589233
I0123 17:03:13.351411 139863414272000 ddar.py:60] Depth 3/1000 time = 6.570220947265625
I0123 17:03:20.659901 139863414272000 ddar.py:60] Depth 4/1000 time = 7.30824089050293
I0123 17:03:27.990485 139863414272000 ddar.py:60] Depth 5/1000 time = 7.330297470092773
I0123 17:03:36.215327 139863414272000 ddar.py:60] Depth 6/1000 time = 8.22424840927124
I0123 17:03:36.241794 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:03:36.241860 139863414272000 alphageometry.py:566] LM output (score=-1.563465): "l : C b j l 15 D b l j l 16 ;"
I0123 17:03:36.241897 139863414272000 alphageometry.py:567] Translation: "l = on_line l b j, on_bline l j b"

I0123 17:03:36.241936 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_line l b j, on_bline l j b ? coll i c j"
I0123 17:03:36.242092 139863414272000 graph.py:498] 
I0123 17:03:36.242142 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_line l b j, on_bline l j b ? coll i c j
I0123 17:03:38.363241 139863414272000 ddar.py:60] Depth 1/1000 time = 2.10147762298584
I0123 17:03:44.095000 139863414272000 ddar.py:60] Depth 2/1000 time = 5.7315216064453125
I0123 17:03:51.450562 139863414272000 ddar.py:60] Depth 3/1000 time = 7.355312824249268
I0123 17:03:58.608558 139863414272000 ddar.py:60] Depth 4/1000 time = 7.1577534675598145
I0123 17:04:06.700582 139863414272000 ddar.py:60] Depth 5/1000 time = 8.091737747192383
I0123 17:04:14.848256 139863414272000 ddar.py:60] Depth 6/1000 time = 8.147072076797485
I0123 17:04:14.871453 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:04:14.871517 139863414272000 alphageometry.py:566] LM output (score=-1.927892): "l : C b k l 15 D b l k l 16 ;"
I0123 17:04:14.871553 139863414272000 alphageometry.py:567] Translation: "l = on_line l b k, on_bline l k b"

I0123 17:04:14.871591 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_line l b k, on_bline l k b ? coll i c j"
I0123 17:04:14.871746 139863414272000 graph.py:498] 
I0123 17:04:14.871797 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_line l b k, on_bline l k b ? coll i c j
I0123 17:04:15.919651 139863414272000 ddar.py:60] Depth 1/1000 time = 1.0294229984283447
I0123 17:04:21.071624 139863414272000 ddar.py:60] Depth 2/1000 time = 5.151739120483398
I0123 17:04:25.910941 139863414272000 ddar.py:60] Depth 3/1000 time = 4.839075803756714
I0123 17:04:31.230802 139863414272000 ddar.py:60] Depth 4/1000 time = 5.319626092910767
I0123 17:04:37.578251 139863414272000 ddar.py:60] Depth 5/1000 time = 6.347161531448364
I0123 17:04:43.028145 139863414272000 ddar.py:60] Depth 6/1000 time = 5.44932746887207
I0123 17:04:43.051088 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:04:43.051150 139863414272000 alphageometry.py:566] LM output (score=-1.945727): "l : C b i l 15 D b l i l 16 ;"
I0123 17:04:43.051187 139863414272000 alphageometry.py:567] Translation: "l = on_line l b i, on_bline l i b"

I0123 17:04:43.051226 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_line l b i, on_bline l i b ? coll i c j"
I0123 17:04:43.051381 139863414272000 graph.py:498] 
I0123 17:04:43.051431 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_line l b i, on_bline l i b ? coll i c j
I0123 17:04:44.107430 139863414272000 ddar.py:60] Depth 1/1000 time = 1.0338642597198486
I0123 17:04:48.129007 139863414272000 ddar.py:60] Depth 2/1000 time = 4.021346807479858
I0123 17:04:53.469379 139863414272000 ddar.py:60] Depth 3/1000 time = 5.340139865875244
I0123 17:04:58.544219 139863414272000 ddar.py:60] Depth 4/1000 time = 5.074579954147339
I0123 17:05:03.682615 139863414272000 ddar.py:60] Depth 5/1000 time = 5.138110160827637
I0123 17:05:08.797750 139863414272000 ddar.py:60] Depth 6/1000 time = 5.1144983768463135
I0123 17:05:08.817412 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:05:08.817473 139863414272000 alphageometry.py:566] LM output (score=-2.021868): "l : T g i g l 15 ;"
I0123 17:05:08.817508 139863414272000 alphageometry.py:567] Translation: "l = on_tline l g g i"

I0123 17:05:08.817548 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l g g i ? coll i c j"
I0123 17:05:08.817706 139863414272000 graph.py:498] 
I0123 17:05:08.817759 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l g g i ? coll i c j
I0123 17:05:09.771342 139863414272000 ddar.py:60] Depth 1/1000 time = 0.9364707469940186
I0123 17:05:13.790894 139863414272000 ddar.py:60] Depth 2/1000 time = 4.019299030303955
I0123 17:05:18.038423 139863414272000 ddar.py:60] Depth 3/1000 time = 4.247265815734863
I0123 17:05:22.854521 139863414272000 ddar.py:60] Depth 4/1000 time = 4.815858840942383
I0123 17:05:28.627841 139863414272000 ddar.py:60] Depth 5/1000 time = 5.773029565811157
I0123 17:05:33.569092 139863414272000 ddar.py:60] Depth 6/1000 time = 4.940571069717407
I0123 17:05:33.585600 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:05:33.585673 139863414272000 alphageometry.py:566] LM output (score=-2.110393): "l : T a e e l 15 ;"
I0123 17:05:33.585711 139863414272000 alphageometry.py:567] Translation: "l = on_tline l e a e"

I0123 17:05:33.585750 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l e a e ? coll i c j"
I0123 17:05:33.585919 139863414272000 graph.py:498] 
I0123 17:05:33.585973 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l e a e ? coll i c j
I0123 17:05:34.538747 139863414272000 ddar.py:60] Depth 1/1000 time = 0.9346420764923096
I0123 17:05:40.122122 139863414272000 ddar.py:60] Depth 2/1000 time = 5.583138465881348
I0123 17:05:45.827541 139863414272000 ddar.py:60] Depth 3/1000 time = 5.705171823501587
I0123 17:05:52.197788 139863414272000 ddar.py:60] Depth 4/1000 time = 6.369976758956909
I0123 17:05:58.570120 139863414272000 ddar.py:60] Depth 5/1000 time = 6.3717029094696045
I0123 17:05:58.582719 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:05:58.582783 139863414272000 alphageometry.py:566] LM output (score=-2.213077): "l : C b e l 15 D b e e l 16 ;"
I0123 17:05:58.582819 139863414272000 alphageometry.py:567] Translation: "l = on_line l b e, on_circle l e b"

I0123 17:05:58.582859 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_line l b e, on_circle l e b ? coll i c j"
I0123 17:05:58.583022 139863414272000 graph.py:498] 
I0123 17:05:58.583073 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_line l b e, on_circle l e b ? coll i c j
I0123 17:06:00.734533 139863414272000 ddar.py:60] Depth 1/1000 time = 2.132506847381592
I0123 17:06:05.474042 139863414272000 ddar.py:60] Depth 2/1000 time = 4.739288806915283
I0123 17:06:11.697479 139863414272000 ddar.py:60] Depth 3/1000 time = 6.223188400268555
I0123 17:06:18.712772 139863414272000 ddar.py:60] Depth 4/1000 time = 7.015038728713989
I0123 17:06:26.728211 139863414272000 ddar.py:60] Depth 5/1000 time = 8.015151977539062
I0123 17:06:33.897100 139863414272000 ddar.py:60] Depth 6/1000 time = 7.168288469314575
I0123 17:06:33.924420 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:06:33.924485 139863414272000 alphageometry.py:566] LM output (score=-2.302088): "l : C b i l 15 D b i i l 16 ;"
I0123 17:06:33.924522 139863414272000 alphageometry.py:567] Translation: "l = on_line l b i, on_circle l i b"

I0123 17:06:33.924561 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_line l b i, on_circle l i b ? coll i c j"
I0123 17:06:33.924718 139863414272000 graph.py:498] 
I0123 17:06:33.924767 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_line l b i, on_circle l i b ? coll i c j
I0123 17:06:34.986414 139863414272000 ddar.py:60] Depth 1/1000 time = 1.0414848327636719
I0123 17:06:39.154793 139863414272000 ddar.py:60] Depth 2/1000 time = 4.168142318725586
I0123 17:06:43.578441 139863414272000 ddar.py:60] Depth 3/1000 time = 4.423404693603516
I0123 17:06:49.407676 139863414272000 ddar.py:60] Depth 4/1000 time = 5.828979969024658
I0123 17:06:54.435557 139863414272000 ddar.py:60] Depth 5/1000 time = 5.027581453323364
I0123 17:06:59.468909 139863414272000 ddar.py:60] Depth 6/1000 time = 5.032772064208984
I0123 17:06:59.489211 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:06:59.489272 139863414272000 alphageometry.py:566] LM output (score=-2.335787): "l : T a f f l 15 ;"
I0123 17:06:59.489308 139863414272000 alphageometry.py:567] Translation: "l = on_tline l f a f"

I0123 17:06:59.489345 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l f a f ? coll i c j"
I0123 17:06:59.489522 139863414272000 graph.py:498] 
I0123 17:06:59.489574 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l f a f ? coll i c j
I0123 17:07:00.448001 139863414272000 ddar.py:60] Depth 1/1000 time = 0.9380488395690918
I0123 17:07:06.118438 139863414272000 ddar.py:60] Depth 2/1000 time = 5.670201778411865
I0123 17:07:12.072417 139863414272000 ddar.py:60] Depth 3/1000 time = 5.953734636306763
I0123 17:07:18.686046 139863414272000 ddar.py:60] Depth 4/1000 time = 6.613373041152954
I0123 17:07:26.375480 139863414272000 ddar.py:60] Depth 5/1000 time = 7.6891491413116455
I0123 17:07:33.132690 139863414272000 ddar.py:60] Depth 6/1000 time = 6.756567001342773
I0123 17:07:33.151282 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:07:33.151345 139863414272000 alphageometry.py:566] LM output (score=-2.420020): "l : T g j g l 15 ;"
I0123 17:07:33.151380 139863414272000 alphageometry.py:567] Translation: "l = on_tline l g g j"

I0123 17:07:33.151418 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l g g j ? coll i c j"
I0123 17:07:33.151567 139863414272000 graph.py:498] 
I0123 17:07:33.151615 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l g g j ? coll i c j
I0123 17:07:35.066358 139863414272000 ddar.py:60] Depth 1/1000 time = 1.8960623741149902
I0123 17:07:38.068060 139863414272000 ddar.py:60] Depth 2/1000 time = 3.0014641284942627
I0123 17:07:42.391263 139863414272000 ddar.py:60] Depth 3/1000 time = 4.322968482971191
I0123 17:07:47.266205 139863414272000 ddar.py:60] Depth 4/1000 time = 4.874683856964111
I0123 17:07:52.165106 139863414272000 ddar.py:60] Depth 5/1000 time = 4.898609638214111
I0123 17:07:57.023347 139863414272000 ddar.py:60] Depth 6/1000 time = 4.857591390609741
I0123 17:07:57.038641 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:07:57.038700 139863414272000 alphageometry.py:566] LM output (score=-2.482218): "l : C b j l 15 D b j j l 16 ;"
I0123 17:07:57.038735 139863414272000 alphageometry.py:567] Translation: "l = on_line l b j, on_circle l j b"

I0123 17:07:57.038773 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_line l b j, on_circle l j b ? coll i c j"
I0123 17:07:57.038927 139863414272000 graph.py:498] 
I0123 17:07:57.038977 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_line l b j, on_circle l j b ? coll i c j
I0123 17:08:00.156323 139863414272000 ddar.py:60] Depth 1/1000 time = 3.0969948768615723
I0123 17:08:04.855180 139863414272000 ddar.py:60] Depth 2/1000 time = 4.698632717132568
I0123 17:08:11.941554 139863414272000 ddar.py:60] Depth 3/1000 time = 7.086126089096069
I0123 17:08:18.823828 139863414272000 ddar.py:60] Depth 4/1000 time = 6.881988763809204
I0123 17:08:25.673384 139863414272000 ddar.py:60] Depth 5/1000 time = 6.849261999130249
I0123 17:08:32.482572 139863414272000 ddar.py:60] Depth 6/1000 time = 6.808584213256836
I0123 17:08:32.507838 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:08:32.507911 139863414272000 alphageometry.py:566] LM output (score=-2.522466): "l : C b h l 15 D b l h l 16 ;"
I0123 17:08:32.507948 139863414272000 alphageometry.py:567] Translation: "l = on_line l b h, on_bline l h b"

I0123 17:08:32.507986 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_line l b h, on_bline l h b ? coll i c j"
I0123 17:08:32.508138 139863414272000 graph.py:498] 
I0123 17:08:32.508187 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_line l b h, on_bline l h b ? coll i c j
I0123 17:08:35.903439 139863414272000 ddar.py:60] Depth 1/1000 time = 3.3744430541992188
I0123 17:08:41.725445 139863414272000 ddar.py:60] Depth 2/1000 time = 5.821768283843994
I0123 17:08:47.883716 139863414272000 ddar.py:60] Depth 3/1000 time = 6.158017158508301
I0123 17:08:55.427860 139863414272000 ddar.py:60] Depth 4/1000 time = 7.543895721435547
I0123 17:09:03.333320 139863414272000 ddar.py:60] Depth 5/1000 time = 7.905176401138306
I0123 17:09:10.210600 139863414272000 ddar.py:60] Depth 6/1000 time = 6.87630558013916
I0123 17:09:10.228517 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:09:10.228580 139863414272000 alphageometry.py:566] LM output (score=-2.537801): "l : C b e l 15 D b e b l 16 ;"
I0123 17:09:10.228616 139863414272000 alphageometry.py:567] Translation: "l = on_line l b e, on_circle l b e"

I0123 17:09:10.228654 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_line l b e, on_circle l b e ? coll i c j"
I0123 17:09:10.228807 139863414272000 graph.py:498] 
I0123 17:09:10.228857 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_line l b e, on_circle l b e ? coll i c j
I0123 17:09:12.409804 139863414272000 ddar.py:60] Depth 1/1000 time = 2.1616146564483643
I0123 17:09:17.874557 139863414272000 ddar.py:60] Depth 2/1000 time = 5.464519023895264
I0123 17:09:22.779120 139863414272000 ddar.py:60] Depth 3/1000 time = 4.904320478439331
I0123 17:09:29.357870 139863414272000 ddar.py:60] Depth 4/1000 time = 6.5785017013549805
I0123 17:09:36.132747 139863414272000 ddar.py:60] Depth 5/1000 time = 6.774623155593872
I0123 17:09:42.985028 139863414272000 ddar.py:60] Depth 6/1000 time = 6.8519980907440186
I0123 17:09:49.761782 139863414272000 ddar.py:60] Depth 7/1000 time = 6.775906801223755
I0123 17:09:56.626167 139863414272000 ddar.py:60] Depth 8/1000 time = 6.844498872756958
I0123 17:09:56.626695 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:09:56.626751 139863414272000 alphageometry.py:566] LM output (score=-2.556641): "l : C b c l 15 D b c c l 16 ;"
I0123 17:09:56.626787 139863414272000 alphageometry.py:567] Translation: "l = on_line l b c, on_circle l c b"

I0123 17:09:56.626827 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_line l b c, on_circle l c b ? coll i c j"
I0123 17:09:56.627011 139863414272000 graph.py:498] 
I0123 17:09:56.627063 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_line l b c, on_circle l c b ? coll i c j
I0123 17:09:58.841771 139863414272000 ddar.py:60] Depth 1/1000 time = 2.1959879398345947
I0123 17:10:04.606368 139863414272000 ddar.py:60] Depth 2/1000 time = 5.7643585205078125
I0123 17:10:09.775035 139863414272000 ddar.py:60] Depth 3/1000 time = 5.168420076370239
I0123 17:10:16.516090 139863414272000 ddar.py:60] Depth 4/1000 time = 6.740782022476196
I0123 17:10:23.239091 139863414272000 ddar.py:60] Depth 5/1000 time = 6.722700119018555
I0123 17:10:29.987905 139863414272000 ddar.py:60] Depth 6/1000 time = 6.748213768005371
I0123 17:10:30.007605 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:10:30.007667 139863414272000 alphageometry.py:566] LM output (score=-2.641696): "l : C b c l 15 D b l c l 16 ;"
I0123 17:10:30.007703 139863414272000 alphageometry.py:567] Translation: "l = on_line l b c, on_bline l c b"

I0123 17:10:30.007741 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_line l b c, on_bline l c b ? coll i c j"
I0123 17:10:30.007895 139863414272000 graph.py:498] 
I0123 17:10:30.007946 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_line l b c, on_bline l c b ? coll i c j
I0123 17:10:32.235459 139863414272000 ddar.py:60] Depth 1/1000 time = 2.2068099975585938
I0123 17:10:38.159928 139863414272000 ddar.py:60] Depth 2/1000 time = 5.9242377281188965
I0123 17:10:43.890961 139863414272000 ddar.py:60] Depth 3/1000 time = 5.730793476104736
I0123 17:10:51.927903 139863414272000 ddar.py:60] Depth 4/1000 time = 8.036682367324829
I0123 17:10:59.270906 139863414272000 ddar.py:60] Depth 5/1000 time = 7.342710018157959
I0123 17:11:06.631073 139863414272000 ddar.py:60] Depth 6/1000 time = 7.359545707702637
I0123 17:11:06.657186 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:11:06.657301 139863414272000 alphageometry.py:566] LM output (score=-2.683344): "l : T a j a l 15 ;"
I0123 17:11:06.657342 139863414272000 alphageometry.py:567] Translation: "l = on_tline l a a j"

I0123 17:11:06.657382 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l a a j ? coll i c j"
I0123 17:11:06.657534 139863414272000 graph.py:498] 
I0123 17:11:06.657583 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l a a j ? coll i c j
I0123 17:11:07.612169 139863414272000 ddar.py:60] Depth 1/1000 time = 0.9378209114074707
I0123 17:11:11.968575 139863414272000 ddar.py:60] Depth 2/1000 time = 4.356175184249878
I0123 17:11:16.492112 139863414272000 ddar.py:60] Depth 3/1000 time = 4.523289680480957
I0123 17:11:21.499917 139863414272000 ddar.py:60] Depth 4/1000 time = 5.007527589797974
I0123 17:11:26.434210 139863414272000 ddar.py:60] Depth 5/1000 time = 4.933644771575928
I0123 17:11:26.447770 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:11:26.447829 139863414272000 alphageometry.py:566] LM output (score=-2.719666): "l : T e j e l 15 ;"
I0123 17:11:26.447864 139863414272000 alphageometry.py:567] Translation: "l = on_tline l e e j"

I0123 17:11:26.447901 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l e e j ? coll i c j"
I0123 17:11:26.448053 139863414272000 graph.py:498] 
I0123 17:11:26.448102 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l e e j ? coll i c j
I0123 17:11:28.372684 139863414272000 ddar.py:60] Depth 1/1000 time = 1.9076473712921143
I0123 17:11:34.178261 139863414272000 ddar.py:60] Depth 2/1000 time = 5.805332899093628
I0123 17:11:39.124685 139863414272000 ddar.py:60] Depth 3/1000 time = 4.946174383163452
I0123 17:11:45.637409 139863414272000 ddar.py:60] Depth 4/1000 time = 6.512460470199585
I0123 17:11:52.168553 139863414272000 ddar.py:60] Depth 5/1000 time = 6.530500888824463
I0123 17:11:52.182257 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:11:52.182318 139863414272000 alphageometry.py:566] LM output (score=-2.764848): "l : C b e l 15 P g h k l 16 ;"
I0123 17:11:52.182353 139863414272000 alphageometry.py:567] Translation: "l = on_line l b e, on_pline l k g h"

I0123 17:11:52.182392 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_line l b e, on_pline l k g h ? coll i c j"
I0123 17:11:52.182548 139863414272000 graph.py:498] 
I0123 17:11:52.182598 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_line l b e, on_pline l k g h ? coll i c j
I0123 17:11:54.501338 139863414272000 ddar.py:60] Depth 1/1000 time = 2.3007102012634277
I0123 17:12:00.465510 139863414272000 ddar.py:60] Depth 2/1000 time = 5.963934421539307
I0123 17:12:06.915384 139863414272000 ddar.py:60] Depth 3/1000 time = 6.44962215423584
I0123 17:12:13.024952 139863414272000 ddar.py:60] Depth 4/1000 time = 6.109303712844849
I0123 17:12:20.268614 139863414272000 ddar.py:60] Depth 5/1000 time = 7.243359804153442
I0123 17:12:27.463350 139863414272000 ddar.py:60] Depth 6/1000 time = 7.193955898284912
I0123 17:12:27.489799 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:12:27.489860 139863414272000 alphageometry.py:566] LM output (score=-2.793703): "l : T f j k l 15 ;"
I0123 17:12:27.489897 139863414272000 alphageometry.py:567] Translation: "l = on_tline l k f j"

I0123 17:12:27.489934 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l k f j ? coll i c j"
I0123 17:12:27.490086 139863414272000 graph.py:498] 
I0123 17:12:27.490142 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l k f j ? coll i c j
I0123 17:12:29.483523 139863414272000 ddar.py:60] Depth 1/1000 time = 1.9791150093078613
I0123 17:12:36.458696 139863414272000 ddar.py:60] Depth 2/1000 time = 6.974942445755005
I0123 17:12:42.818953 139863414272000 ddar.py:60] Depth 3/1000 time = 6.360011100769043
I0123 17:12:49.616525 139863414272000 ddar.py:60] Depth 4/1000 time = 6.797307968139648
I0123 17:12:57.603533 139863414272000 ddar.py:60] Depth 5/1000 time = 7.986701011657715
I0123 17:13:04.570136 139863414272000 ddar.py:60] Depth 6/1000 time = 6.965960741043091
I0123 17:13:04.587276 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:13:04.587338 139863414272000 alphageometry.py:566] LM output (score=-2.851607): "l : T g h k l 15 ;"
I0123 17:13:04.587375 139863414272000 alphageometry.py:567] Translation: "l = on_tline l k g h"

I0123 17:13:04.587414 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l k g h ? coll i c j"
I0123 17:13:04.587565 139863414272000 graph.py:498] 
I0123 17:13:04.587615 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l k g h ? coll i c j
I0123 17:13:06.599515 139863414272000 ddar.py:60] Depth 1/1000 time = 1.9952750205993652
I0123 17:13:10.835152 139863414272000 ddar.py:60] Depth 2/1000 time = 4.235408306121826
I0123 17:13:14.337852 139863414272000 ddar.py:60] Depth 3/1000 time = 3.5024561882019043
I0123 17:13:19.261306 139863414272000 ddar.py:60] Depth 4/1000 time = 4.923191547393799
I0123 17:13:24.305936 139863414272000 ddar.py:60] Depth 5/1000 time = 5.044344425201416
I0123 17:13:30.358021 139863414272000 ddar.py:60] Depth 6/1000 time = 6.051403284072876
I0123 17:13:30.376394 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:13:30.376453 139863414272000 alphageometry.py:566] LM output (score=-2.859179): "l : T a e k l 15 ;"
I0123 17:13:30.376489 139863414272000 alphageometry.py:567] Translation: "l = on_tline l k a e"

I0123 17:13:30.376526 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l k a e ? coll i c j"
I0123 17:13:30.376679 139863414272000 graph.py:498] 
I0123 17:13:30.376728 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l k a e ? coll i c j
I0123 17:13:31.321468 139863414272000 ddar.py:60] Depth 1/1000 time = 0.9267122745513916
I0123 17:13:35.604238 139863414272000 ddar.py:60] Depth 2/1000 time = 4.282525539398193
I0123 17:13:40.207099 139863414272000 ddar.py:60] Depth 3/1000 time = 4.602595329284668
I0123 17:13:45.282180 139863414272000 ddar.py:60] Depth 4/1000 time = 5.074810981750488
I0123 17:13:50.348712 139863414272000 ddar.py:60] Depth 5/1000 time = 5.065786600112915
I0123 17:13:50.362329 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:13:50.362412 139863414272000 alphageometry.py:566] LM output (score=-2.874870): "l : T f j j l 15 ;"
I0123 17:13:50.362455 139863414272000 alphageometry.py:567] Translation: "l = on_tline l j f j"

I0123 17:13:50.362526 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l j f j ? coll i c j"
I0123 17:13:50.362712 139863414272000 graph.py:498] 
I0123 17:13:50.362771 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l j f j ? coll i c j
I0123 17:13:51.323858 139863414272000 ddar.py:60] Depth 1/1000 time = 0.9437217712402344
I0123 17:13:55.531528 139863414272000 ddar.py:60] Depth 2/1000 time = 4.207443714141846
I0123 17:14:00.134839 139863414272000 ddar.py:60] Depth 3/1000 time = 4.603065729141235
I0123 17:14:05.258486 139863414272000 ddar.py:60] Depth 4/1000 time = 5.123361825942993
I0123 17:14:10.381839 139863414272000 ddar.py:60] Depth 5/1000 time = 5.12304425239563
I0123 17:14:15.498522 139863414272000 ddar.py:60] Depth 6/1000 time = 5.115995168685913
I0123 17:14:15.514642 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:14:15.514719 139863414272000 alphageometry.py:566] LM output (score=-2.896493): "l : T f h k l 15 ;"
I0123 17:14:15.514755 139863414272000 alphageometry.py:567] Translation: "l = on_tline l k f h"

I0123 17:14:15.514794 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l k f h ? coll i c j"
I0123 17:14:15.514961 139863414272000 graph.py:498] 
I0123 17:14:15.515011 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l k f h ? coll i c j
I0123 17:14:16.531375 139863414272000 ddar.py:60] Depth 1/1000 time = 0.9967615604400635
I0123 17:14:20.701399 139863414272000 ddar.py:60] Depth 2/1000 time = 4.169790029525757
I0123 17:14:25.227115 139863414272000 ddar.py:60] Depth 3/1000 time = 4.525470018386841
I0123 17:14:30.192047 139863414272000 ddar.py:60] Depth 4/1000 time = 4.964672088623047
I0123 17:14:35.264377 139863414272000 ddar.py:60] Depth 5/1000 time = 5.072036266326904
I0123 17:14:40.340889 139863414272000 ddar.py:60] Depth 6/1000 time = 5.0757904052734375
I0123 17:14:40.359409 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:14:40.359470 139863414272000 alphageometry.py:566] LM output (score=-2.920338): "l : T a j k l 15 ;"
I0123 17:14:40.359505 139863414272000 alphageometry.py:567] Translation: "l = on_tline l k a j"

I0123 17:14:40.359544 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l k a j ? coll i c j"
I0123 17:14:40.359695 139863414272000 graph.py:498] 
I0123 17:14:40.359743 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l k a j ? coll i c j
I0123 17:14:42.334210 139863414272000 ddar.py:60] Depth 1/1000 time = 1.9554824829101562
I0123 17:14:45.622042 139863414272000 ddar.py:60] Depth 2/1000 time = 3.2875938415527344
I0123 17:14:50.153181 139863414272000 ddar.py:60] Depth 3/1000 time = 4.530888080596924
I0123 17:14:55.292261 139863414272000 ddar.py:60] Depth 4/1000 time = 5.138789653778076
I0123 17:15:00.435519 139863414272000 ddar.py:60] Depth 5/1000 time = 5.142524242401123
I0123 17:15:00.448363 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:15:00.448423 139863414272000 alphageometry.py:566] LM output (score=-2.931258): "l : P g h k l 15 ;"
I0123 17:15:00.448459 139863414272000 alphageometry.py:567] Translation: "l = on_pline l k g h"

I0123 17:15:00.448497 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_pline l k g h ? coll i c j"
I0123 17:15:00.448650 139863414272000 graph.py:498] 
I0123 17:15:00.448699 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_pline l k g h ? coll i c j
I0123 17:15:02.506433 139863414272000 ddar.py:60] Depth 1/1000 time = 2.0386343002319336
I0123 17:15:06.751103 139863414272000 ddar.py:60] Depth 2/1000 time = 4.244440317153931
I0123 17:15:10.272609 139863414272000 ddar.py:60] Depth 3/1000 time = 3.5212583541870117
I0123 17:15:15.339341 139863414272000 ddar.py:60] Depth 4/1000 time = 5.066471576690674
I0123 17:15:20.377435 139863414272000 ddar.py:60] Depth 5/1000 time = 5.03779411315918
I0123 17:15:25.421814 139863414272000 ddar.py:60] Depth 6/1000 time = 5.043652534484863
I0123 17:15:25.438281 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:15:25.438343 139863414272000 alphageometry.py:566] LM output (score=-2.946979): "l : T a e a l 15 ;"
I0123 17:15:25.438379 139863414272000 alphageometry.py:567] Translation: "l = on_tline l a a e"

I0123 17:15:25.438417 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l a a e ? coll i c j"
I0123 17:15:25.438570 139863414272000 graph.py:498] 
I0123 17:15:25.438618 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l a a e ? coll i c j
I0123 17:15:27.395242 139863414272000 ddar.py:60] Depth 1/1000 time = 1.9391405582427979
I0123 17:15:31.848322 139863414272000 ddar.py:60] Depth 2/1000 time = 4.452837228775024
I0123 17:15:36.484281 139863414272000 ddar.py:60] Depth 3/1000 time = 4.635719060897827
I0123 17:15:41.725184 139863414272000 ddar.py:60] Depth 4/1000 time = 5.240636587142944
I0123 17:15:45.852481 139863414272000 ddar.py:60] Depth 5/1000 time = 4.126624584197998
I0123 17:15:45.864299 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:15:45.864358 139863414272000 alphageometry.py:566] LM output (score=-2.947749): "l : T a f e l 15 ;"
I0123 17:15:45.864394 139863414272000 alphageometry.py:567] Translation: "l = on_tline l e a f"

I0123 17:15:45.864432 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l e a f ? coll i c j"
I0123 17:15:45.864583 139863414272000 graph.py:498] 
I0123 17:15:45.864632 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l e a f ? coll i c j
I0123 17:15:47.825563 139863414272000 ddar.py:60] Depth 1/1000 time = 1.9434854984283447
I0123 17:15:52.187314 139863414272000 ddar.py:60] Depth 2/1000 time = 4.361456871032715
I0123 17:15:56.971553 139863414272000 ddar.py:60] Depth 3/1000 time = 4.784006834030151
I0123 17:16:01.304180 139863414272000 ddar.py:60] Depth 4/1000 time = 4.332359790802002
I0123 17:16:07.746860 139863414272000 ddar.py:60] Depth 5/1000 time = 6.442394733428955
I0123 17:16:12.084331 139863414272000 ddar.py:60] Depth 6/1000 time = 4.336806058883667
I0123 17:16:12.102112 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:16:12.102176 139863414272000 alphageometry.py:566] LM output (score=-2.962739): "l : T c k c l 15 ;"
I0123 17:16:12.102213 139863414272000 alphageometry.py:567] Translation: "l = on_tline l c c k"

I0123 17:16:12.102251 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l c c k ? coll i c j"
I0123 17:16:12.102401 139863414272000 graph.py:498] 
I0123 17:16:12.102449 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l c c k ? coll i c j
I0123 17:16:14.070786 139863414272000 ddar.py:60] Depth 1/1000 time = 1.9495775699615479
I0123 17:16:18.422891 139863414272000 ddar.py:60] Depth 2/1000 time = 4.351871728897095
I0123 17:16:23.061630 139863414272000 ddar.py:60] Depth 3/1000 time = 4.638492584228516
I0123 17:16:27.006375 139863414272000 ddar.py:60] Depth 4/1000 time = 3.944481611251831
I0123 17:16:32.121649 139863414272000 ddar.py:60] Depth 5/1000 time = 5.114978313446045
I0123 17:16:38.299176 139863414272000 ddar.py:60] Depth 6/1000 time = 6.1768639087677
I0123 17:16:38.316624 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:16:38.316686 139863414272000 alphageometry.py:566] LM output (score=-2.986602): "l : T a f k l 15 ;"
I0123 17:16:38.316722 139863414272000 alphageometry.py:567] Translation: "l = on_tline l k a f"

I0123 17:16:38.316761 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l k a f ? coll i c j"
I0123 17:16:38.316916 139863414272000 graph.py:498] 
I0123 17:16:38.316967 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l k a f ? coll i c j
I0123 17:16:39.269314 139863414272000 ddar.py:60] Depth 1/1000 time = 0.9346966743469238
I0123 17:16:43.798506 139863414272000 ddar.py:60] Depth 2/1000 time = 4.528963088989258
I0123 17:16:48.593538 139863414272000 ddar.py:60] Depth 3/1000 time = 4.794785022735596
I0123 17:16:52.973109 139863414272000 ddar.py:60] Depth 4/1000 time = 4.379311561584473
I0123 17:16:58.412039 139863414272000 ddar.py:60] Depth 5/1000 time = 5.4386467933654785
I0123 17:17:03.831555 139863414272000 ddar.py:60] Depth 6/1000 time = 5.418873310089111
I0123 17:17:03.850538 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:17:03.850600 139863414272000 alphageometry.py:566] LM output (score=-3.000001): "l : T g h h l 15 ;"
I0123 17:17:03.850636 139863414272000 alphageometry.py:567] Translation: "l = on_tline l h g h"

I0123 17:17:03.850695 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l h g h ? coll i c j"
I0123 17:17:03.850860 139863414272000 graph.py:498] 
I0123 17:17:03.850943 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l h g h ? coll i c j
I0123 17:17:05.896275 139863414272000 ddar.py:60] Depth 1/1000 time = 2.024289608001709
I0123 17:17:10.474210 139863414272000 ddar.py:60] Depth 2/1000 time = 4.577697515487671
I0123 17:17:16.444384 139863414272000 ddar.py:60] Depth 3/1000 time = 5.969925880432129
I0123 17:17:22.958609 139863414272000 ddar.py:60] Depth 4/1000 time = 6.513957500457764
I0123 17:17:28.500225 139863414272000 ddar.py:60] Depth 5/1000 time = 5.541319131851196
I0123 17:17:35.052827 139863414272000 ddar.py:60] Depth 6/1000 time = 6.551924705505371
I0123 17:17:35.069731 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:17:35.069794 139863414272000 alphageometry.py:566] LM output (score=-3.020290): "l : T a j j l 15 ;"
I0123 17:17:35.069830 139863414272000 alphageometry.py:567] Translation: "l = on_tline l j a j"

I0123 17:17:35.069869 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l j a j ? coll i c j"
I0123 17:17:35.070021 139863414272000 graph.py:498] 
I0123 17:17:35.070072 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l j a j ? coll i c j
I0123 17:17:36.022609 139863414272000 ddar.py:60] Depth 1/1000 time = 0.9357085227966309
I0123 17:17:40.374988 139863414272000 ddar.py:60] Depth 2/1000 time = 4.352149248123169
I0123 17:17:45.073112 139863414272000 ddar.py:60] Depth 3/1000 time = 4.697875022888184
I0123 17:17:50.256080 139863414272000 ddar.py:60] Depth 4/1000 time = 5.182713270187378
I0123 17:17:55.419914 139863414272000 ddar.py:60] Depth 5/1000 time = 5.163189649581909
I0123 17:17:55.433987 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:17:55.434048 139863414272000 alphageometry.py:566] LM output (score=-3.021901): "l : T d f f l 15 ;"
I0123 17:17:55.434084 139863414272000 alphageometry.py:567] Translation: "l = on_tline l f d f"

I0123 17:17:55.434121 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l f d f ? coll i c j"
I0123 17:17:55.434271 139863414272000 graph.py:498] 
I0123 17:17:55.434321 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k c b f; l = on_tline l f d f ? coll i c j
I0123 17:17:56.375879 139863414272000 ddar.py:60] Depth 1/1000 time = 0.9234189987182617
I0123 17:18:00.744988 139863414272000 ddar.py:60] Depth 2/1000 time = 4.368875980377197
I0123 17:18:04.315469 139863414272000 ddar.py:60] Depth 3/1000 time = 3.5702357292175293
I0123 17:18:09.546061 139863414272000 ddar.py:60] Depth 4/1000 time = 5.230319976806641
I0123 17:18:14.781992 139863414272000 ddar.py:60] Depth 5/1000 time = 5.235591173171997
I0123 17:18:19.997956 139863414272000 ddar.py:60] Depth 6/1000 time = 5.215275526046753
I0123 17:18:20.018199 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:18:20.018283 139863414272000 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : C b j k 14 D b k j k 15 ; x00
I0123 17:18:26.805474 139863414272000 alphageometry.py:566] LM output (score=-1.710320): "l : C b e l 16 D b l e l 17 ;"
I0123 17:18:26.805738 139863414272000 alphageometry.py:567] Translation: "l = on_line l b e, on_bline l e b"

I0123 17:18:26.805786 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_line l b e, on_bline l e b ? coll i c j"
I0123 17:18:26.805947 139863414272000 graph.py:498] 
I0123 17:18:26.806002 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_line l b e, on_bline l e b ? coll i c j
I0123 17:18:30.533024 139863414272000 ddar.py:60] Depth 1/1000 time = 3.70232892036438
I0123 17:18:37.464931 139863414272000 ddar.py:60] Depth 2/1000 time = 6.931670904159546
I0123 17:18:46.049672 139863414272000 ddar.py:60] Depth 3/1000 time = 8.584495067596436
I0123 17:18:55.899906 139863414272000 ddar.py:60] Depth 4/1000 time = 9.849979877471924
I0123 17:19:06.848313 139863414272000 ddar.py:60] Depth 5/1000 time = 10.948146343231201
I0123 17:19:17.873816 139863414272000 ddar.py:60] Depth 6/1000 time = 11.025196552276611
I0123 17:19:27.791135 139863414272000 ddar.py:60] Depth 7/1000 time = 9.916597366333008
I0123 17:19:27.849246 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:19:27.849311 139863414272000 alphageometry.py:566] LM output (score=-1.728072): "l : T g i g l 16 ;"
I0123 17:19:27.849349 139863414272000 alphageometry.py:567] Translation: "l = on_tline l g g i"

I0123 17:19:27.849388 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l g g i ? coll i c j"
I0123 17:19:27.849544 139863414272000 graph.py:498] 
I0123 17:19:27.849595 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l g g i ? coll i c j
I0123 17:19:31.213513 139863414272000 ddar.py:60] Depth 1/1000 time = 3.344813585281372
I0123 17:19:34.412849 139863414272000 ddar.py:60] Depth 2/1000 time = 3.1990935802459717
I0123 17:19:39.570805 139863414272000 ddar.py:60] Depth 3/1000 time = 5.157704591751099
I0123 17:19:45.260800 139863414272000 ddar.py:60] Depth 4/1000 time = 5.689748287200928
I0123 17:19:51.116327 139863414272000 ddar.py:60] Depth 5/1000 time = 5.855223178863525
I0123 17:19:56.986834 139863414272000 ddar.py:60] Depth 6/1000 time = 5.869868993759155
I0123 17:19:57.015028 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:19:57.015100 139863414272000 alphageometry.py:566] LM output (score=-1.803603): "l : T f k k l 16 ;"
I0123 17:19:57.015138 139863414272000 alphageometry.py:567] Translation: "l = on_tline l k f k"

I0123 17:19:57.015206 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l k f k ? coll i c j"
I0123 17:19:57.015368 139863414272000 graph.py:498] 
I0123 17:19:57.015419 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l k f k ? coll i c j
I0123 17:19:59.376371 139863414272000 ddar.py:60] Depth 1/1000 time = 2.339649200439453
I0123 17:20:04.353596 139863414272000 ddar.py:60] Depth 2/1000 time = 4.976996183395386
I0123 17:20:08.861021 139863414272000 ddar.py:60] Depth 3/1000 time = 4.507171630859375
I0123 17:20:15.112663 139863414272000 ddar.py:60] Depth 4/1000 time = 6.2513861656188965
I0123 17:20:22.535478 139863414272000 ddar.py:60] Depth 5/1000 time = 7.422533273696899
I0123 17:20:28.860955 139863414272000 ddar.py:60] Depth 6/1000 time = 6.324864149093628
I0123 17:20:35.297394 139863414272000 ddar.py:60] Depth 7/1000 time = 6.428796052932739
I0123 17:20:35.313400 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:20:35.313530 139863414272000 alphageometry.py:566] LM output (score=-1.908857): "l : T g k g l 16 ;"
I0123 17:20:35.313569 139863414272000 alphageometry.py:567] Translation: "l = on_tline l g g k"

I0123 17:20:35.313607 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l g g k ? coll i c j"
I0123 17:20:35.313774 139863414272000 graph.py:498] 
I0123 17:20:35.313827 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l g g k ? coll i c j
I0123 17:20:36.549025 139863414272000 ddar.py:60] Depth 1/1000 time = 1.2166306972503662
I0123 17:20:40.859370 139863414272000 ddar.py:60] Depth 2/1000 time = 4.310114860534668
I0123 17:20:46.115298 139863414272000 ddar.py:60] Depth 3/1000 time = 5.255681753158569
I0123 17:20:52.044975 139863414272000 ddar.py:60] Depth 4/1000 time = 5.929403066635132
I0123 17:20:58.032444 139863414272000 ddar.py:60] Depth 5/1000 time = 5.987179517745972
I0123 17:21:02.829706 139863414272000 ddar.py:60] Depth 6/1000 time = 4.7966837882995605
I0123 17:21:02.854524 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:21:02.854585 139863414272000 alphageometry.py:566] LM output (score=-1.967616): "l : C h j l 16 D h l j l 17 ;"
I0123 17:21:02.854623 139863414272000 alphageometry.py:567] Translation: "l = on_line l h j, on_bline l j h"

I0123 17:21:02.854660 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_line l h j, on_bline l j h ? coll i c j"
I0123 17:21:02.854821 139863414272000 graph.py:498] 
I0123 17:21:02.854871 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_line l h j, on_bline l j h ? coll i c j
I0123 17:21:06.425831 139863414272000 ddar.py:60] Depth 1/1000 time = 3.543632745742798
I0123 17:21:10.055958 139863414272000 ddar.py:60] Depth 2/1000 time = 3.6298954486846924
I0123 17:21:15.654237 139863414272000 ddar.py:60] Depth 3/1000 time = 5.598028898239136
I0123 17:21:23.093122 139863414272000 ddar.py:60] Depth 4/1000 time = 7.4386303424835205
I0123 17:21:29.480074 139863414272000 ddar.py:60] Depth 5/1000 time = 6.386670351028442
I0123 17:21:35.905767 139863414272000 ddar.py:60] Depth 6/1000 time = 6.425030708312988
I0123 17:21:35.935328 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:21:35.935393 139863414272000 alphageometry.py:566] LM output (score=-2.075429): "l : C b i l 16 D b l i l 17 ;"
I0123 17:21:35.935431 139863414272000 alphageometry.py:567] Translation: "l = on_line l b i, on_bline l i b"

I0123 17:21:35.935471 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_line l b i, on_bline l i b ? coll i c j"
I0123 17:21:35.935634 139863414272000 graph.py:498] 
I0123 17:21:35.935683 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_line l b i, on_bline l i b ? coll i c j
I0123 17:21:38.440927 139863414272000 ddar.py:60] Depth 1/1000 time = 2.4780240058898926
I0123 17:21:42.170353 139863414272000 ddar.py:60] Depth 2/1000 time = 3.729177236557007
I0123 17:21:47.882946 139863414272000 ddar.py:60] Depth 3/1000 time = 5.712353467941284
I0123 17:21:54.147094 139863414272000 ddar.py:60] Depth 4/1000 time = 6.263866901397705
I0123 17:22:00.353685 139863414272000 ddar.py:60] Depth 5/1000 time = 6.206293821334839
I0123 17:22:07.779912 139863414272000 ddar.py:60] Depth 6/1000 time = 7.425530910491943
I0123 17:22:07.812003 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:22:07.812068 139863414272000 alphageometry.py:566] LM output (score=-2.118233): "l : C i j l 16 D i l j l 17 ;"
I0123 17:22:07.812105 139863414272000 alphageometry.py:567] Translation: "l = on_line l i j, on_bline l j i"

I0123 17:22:07.812145 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_line l i j, on_bline l j i ? coll i c j"
I0123 17:22:07.812304 139863414272000 graph.py:498] 
I0123 17:22:07.812354 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_line l i j, on_bline l j i ? coll i c j
I0123 17:22:10.296557 139863414272000 ddar.py:60] Depth 1/1000 time = 2.4580671787261963
I0123 17:22:13.753177 139863414272000 ddar.py:60] Depth 2/1000 time = 3.4563918113708496
I0123 17:22:19.255300 139863414272000 ddar.py:60] Depth 3/1000 time = 5.501872301101685
I0123 17:22:25.284759 139863414272000 ddar.py:60] Depth 4/1000 time = 6.029186487197876
I0123 17:22:31.355744 139863414272000 ddar.py:60] Depth 5/1000 time = 6.070695638656616
I0123 17:22:38.618629 139863414272000 ddar.py:60] Depth 6/1000 time = 7.262287378311157
I0123 17:22:38.646839 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:22:38.646903 139863414272000 alphageometry.py:566] LM output (score=-2.140270): "l : T g j g l 16 ;"
I0123 17:22:38.646940 139863414272000 alphageometry.py:567] Translation: "l = on_tline l g g j"

I0123 17:22:38.646998 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l g g j ? coll i c j"
I0123 17:22:38.647156 139863414272000 graph.py:498] 
I0123 17:22:38.647206 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l g g j ? coll i c j
I0123 17:22:39.882769 139863414272000 ddar.py:60] Depth 1/1000 time = 1.2167158126831055
I0123 17:22:44.249488 139863414272000 ddar.py:60] Depth 2/1000 time = 4.366488456726074
I0123 17:22:49.618609 139863414272000 ddar.py:60] Depth 3/1000 time = 5.368877172470093
I0123 17:22:55.590374 139863414272000 ddar.py:60] Depth 4/1000 time = 5.971497297286987
I0123 17:23:00.378212 139863414272000 ddar.py:60] Depth 5/1000 time = 4.7875354290008545
I0123 17:23:06.238507 139863414272000 ddar.py:60] Depth 6/1000 time = 5.859724044799805
I0123 17:23:06.263011 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:23:06.263097 139863414272000 alphageometry.py:566] LM output (score=-2.233784): "l : T a j a l 16 ;"
I0123 17:23:06.263136 139863414272000 alphageometry.py:567] Translation: "l = on_tline l a a j"

I0123 17:23:06.263173 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l a a j ? coll i c j"
I0123 17:23:06.263329 139863414272000 graph.py:498] 
I0123 17:23:06.263379 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l a a j ? coll i c j
I0123 17:23:08.578059 139863414272000 ddar.py:60] Depth 1/1000 time = 2.291780948638916
I0123 17:23:13.171427 139863414272000 ddar.py:60] Depth 2/1000 time = 4.593129634857178
I0123 17:23:18.608496 139863414272000 ddar.py:60] Depth 3/1000 time = 5.436824560165405
I0123 17:23:24.779433 139863414272000 ddar.py:60] Depth 4/1000 time = 6.170674085617065
I0123 17:23:30.972190 139863414272000 ddar.py:60] Depth 5/1000 time = 6.192464113235474
I0123 17:23:35.972137 139863414272000 ddar.py:60] Depth 6/1000 time = 4.999350070953369
I0123 17:23:35.995319 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:23:35.995385 139863414272000 alphageometry.py:566] LM output (score=-2.341787): "l : T b e b l 16 ;"
I0123 17:23:35.995422 139863414272000 alphageometry.py:567] Translation: "l = on_tline l b b e"

I0123 17:23:35.995459 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l b b e ? coll i c j"
I0123 17:23:35.995614 139863414272000 graph.py:498] 
I0123 17:23:35.995662 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l b b e ? coll i c j
I0123 17:23:39.480940 139863414272000 ddar.py:60] Depth 1/1000 time = 3.4611947536468506
I0123 17:23:43.035824 139863414272000 ddar.py:60] Depth 2/1000 time = 3.554643154144287
I0123 17:23:48.564929 139863414272000 ddar.py:60] Depth 3/1000 time = 5.528839826583862
I0123 17:23:54.795172 139863414272000 ddar.py:60] Depth 4/1000 time = 6.229990243911743
I0123 17:24:01.027894 139863414272000 ddar.py:60] Depth 5/1000 time = 6.232445240020752
I0123 17:24:07.211373 139863414272000 ddar.py:60] Depth 6/1000 time = 6.182926177978516
I0123 17:24:07.235944 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:24:07.236007 139863414272000 alphageometry.py:566] LM output (score=-2.360173): "l : T a e e l 16 ;"
I0123 17:24:07.236044 139863414272000 alphageometry.py:567] Translation: "l = on_tline l e a e"

I0123 17:24:07.236083 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l e a e ? coll i c j"
I0123 17:24:07.236239 139863414272000 graph.py:498] 
I0123 17:24:07.236290 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l e a e ? coll i c j
I0123 17:24:09.614258 139863414272000 ddar.py:60] Depth 1/1000 time = 2.3568568229675293
I0123 17:24:14.784960 139863414272000 ddar.py:60] Depth 2/1000 time = 5.170467376708984
I0123 17:24:21.861426 139863414272000 ddar.py:60] Depth 3/1000 time = 7.076035261154175
I0123 17:24:28.594862 139863414272000 ddar.py:60] Depth 4/1000 time = 6.733174800872803
I0123 17:24:36.429603 139863414272000 ddar.py:60] Depth 5/1000 time = 7.834442853927612
I0123 17:24:44.302033 139863414272000 ddar.py:60] Depth 6/1000 time = 7.871812343597412
I0123 17:24:44.323920 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:24:44.323987 139863414272000 alphageometry.py:566] LM output (score=-2.403051): "l : C e j l 16 D e l j l 17 ;"
I0123 17:24:44.324025 139863414272000 alphageometry.py:567] Translation: "l = on_line l e j, on_bline l j e"

I0123 17:24:44.324064 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_line l e j, on_bline l j e ? coll i c j"
I0123 17:24:44.324224 139863414272000 graph.py:498] 
I0123 17:24:44.324275 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_line l e j, on_bline l j e ? coll i c j
I0123 17:24:47.060627 139863414272000 ddar.py:60] Depth 1/1000 time = 2.710209846496582
I0123 17:24:53.643723 139863414272000 ddar.py:60] Depth 2/1000 time = 6.5828635692596436
I0123 17:25:01.359288 139863414272000 ddar.py:60] Depth 3/1000 time = 7.715320110321045
I0123 17:25:10.296171 139863414272000 ddar.py:60] Depth 4/1000 time = 8.936617374420166
I0123 17:25:18.111361 139863414272000 ddar.py:60] Depth 5/1000 time = 7.814895391464233
I0123 17:25:26.983180 139863414272000 ddar.py:60] Depth 6/1000 time = 8.871171712875366
I0123 17:25:27.027848 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:25:27.027916 139863414272000 alphageometry.py:566] LM output (score=-2.445465): "l : T f j j l 16 ;"
I0123 17:25:27.027954 139863414272000 alphageometry.py:567] Translation: "l = on_tline l j f j"

I0123 17:25:27.027994 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l j f j ? coll i c j"
I0123 17:25:27.028169 139863414272000 graph.py:498] 
I0123 17:25:27.028220 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l j f j ? coll i c j
I0123 17:25:29.387094 139863414272000 ddar.py:60] Depth 1/1000 time = 2.334538221359253
I0123 17:25:34.222730 139863414272000 ddar.py:60] Depth 2/1000 time = 4.835402488708496
I0123 17:25:39.661998 139863414272000 ddar.py:60] Depth 3/1000 time = 5.439018487930298
I0123 17:25:45.887254 139863414272000 ddar.py:60] Depth 4/1000 time = 6.225008010864258
I0123 17:25:52.170761 139863414272000 ddar.py:60] Depth 5/1000 time = 6.28321099281311
I0123 17:25:58.456144 139863414272000 ddar.py:60] Depth 6/1000 time = 6.2847959995269775
I0123 17:25:58.480621 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:25:58.480702 139863414272000 alphageometry.py:566] LM output (score=-2.517154): "l : T g i k l 16 ;"
I0123 17:25:58.480738 139863414272000 alphageometry.py:567] Translation: "l = on_tline l k g i"

I0123 17:25:58.480776 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l k g i ? coll i c j"
I0123 17:25:58.480933 139863414272000 graph.py:498] 
I0123 17:25:58.480986 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l k g i ? coll i c j
I0123 17:26:00.855980 139863414272000 ddar.py:60] Depth 1/1000 time = 2.3563168048858643
I0123 17:26:04.276854 139863414272000 ddar.py:60] Depth 2/1000 time = 3.420632839202881
I0123 17:26:09.552390 139863414272000 ddar.py:60] Depth 3/1000 time = 5.2752954959869385
I0123 17:26:15.367548 139863414272000 ddar.py:60] Depth 4/1000 time = 5.814904689788818
I0123 17:26:21.270342 139863414272000 ddar.py:60] Depth 5/1000 time = 5.90250039100647
I0123 17:26:27.234373 139863414272000 ddar.py:60] Depth 6/1000 time = 5.963440895080566
I0123 17:26:27.261000 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:26:27.261060 139863414272000 alphageometry.py:566] LM output (score=-2.542876): "l : T a f f l 16 ;"
I0123 17:26:27.261096 139863414272000 alphageometry.py:567] Translation: "l = on_tline l f a f"

I0123 17:26:27.261133 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l f a f ? coll i c j"
I0123 17:26:27.261287 139863414272000 graph.py:498] 
I0123 17:26:27.261337 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l f a f ? coll i c j
I0123 17:26:29.683119 139863414272000 ddar.py:60] Depth 1/1000 time = 2.401095151901245
I0123 17:26:36.441660 139863414272000 ddar.py:60] Depth 2/1000 time = 6.7582995891571045
I0123 17:26:44.122692 139863414272000 ddar.py:60] Depth 3/1000 time = 7.6807942390441895
I0123 17:26:52.252803 139863414272000 ddar.py:60] Depth 4/1000 time = 8.129849910736084
I0123 17:27:00.543160 139863414272000 ddar.py:60] Depth 5/1000 time = 8.290048360824585
I0123 17:27:10.042747 139863414272000 ddar.py:60] Depth 6/1000 time = 9.49901008605957
I0123 17:27:10.068684 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:27:10.068753 139863414272000 alphageometry.py:566] LM output (score=-2.550761): "l : T f j g l 16 ;"
I0123 17:27:10.068789 139863414272000 alphageometry.py:567] Translation: "l = on_tline l g f j"

I0123 17:27:10.068828 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l g f j ? coll i c j"
I0123 17:27:10.068983 139863414272000 graph.py:498] 
I0123 17:27:10.069034 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l g f j ? coll i c j
I0123 17:27:11.305585 139863414272000 ddar.py:60] Depth 1/1000 time = 1.2178964614868164
I0123 17:27:15.994700 139863414272000 ddar.py:60] Depth 2/1000 time = 4.688872575759888
I0123 17:27:21.531652 139863414272000 ddar.py:60] Depth 3/1000 time = 5.536715507507324
I0123 17:27:27.770009 139863414272000 ddar.py:60] Depth 4/1000 time = 6.238106966018677
I0123 17:27:34.082891 139863414272000 ddar.py:60] Depth 5/1000 time = 6.312582731246948
I0123 17:27:39.146212 139863414272000 ddar.py:60] Depth 6/1000 time = 5.06266188621521
I0123 17:27:39.170017 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:27:39.170079 139863414272000 alphageometry.py:566] LM output (score=-2.618188): "l : T e j e l 16 ;"
I0123 17:27:39.170116 139863414272000 alphageometry.py:567] Translation: "l = on_tline l e e j"

I0123 17:27:39.170153 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l e e j ? coll i c j"
I0123 17:27:39.170305 139863414272000 graph.py:498] 
I0123 17:27:39.170355 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l e e j ? coll i c j
I0123 17:27:41.538086 139863414272000 ddar.py:60] Depth 1/1000 time = 2.348320245742798
I0123 17:27:47.887481 139863414272000 ddar.py:60] Depth 2/1000 time = 6.349154949188232
I0123 17:27:53.893869 139863414272000 ddar.py:60] Depth 3/1000 time = 6.006137847900391
I0123 17:28:01.872055 139863414272000 ddar.py:60] Depth 4/1000 time = 7.977932929992676
I0123 17:28:08.656237 139863414272000 ddar.py:60] Depth 5/1000 time = 6.783900022506714
I0123 17:28:16.633608 139863414272000 ddar.py:60] Depth 6/1000 time = 7.976761817932129
I0123 17:28:16.658099 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:28:16.658162 139863414272000 alphageometry.py:566] LM output (score=-2.653018): "l : C i k l 16 D i l k l 17 ;"
I0123 17:28:16.658199 139863414272000 alphageometry.py:567] Translation: "l = on_line l i k, on_bline l k i"

I0123 17:28:16.658238 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_line l i k, on_bline l k i ? coll i c j"
I0123 17:28:16.658397 139863414272000 graph.py:498] 
I0123 17:28:16.658471 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_line l i k, on_bline l k i ? coll i c j
I0123 17:28:19.193273 139863414272000 ddar.py:60] Depth 1/1000 time = 2.508376121520996
I0123 17:28:22.606613 139863414272000 ddar.py:60] Depth 2/1000 time = 3.4131102561950684
I0123 17:28:27.909036 139863414272000 ddar.py:60] Depth 3/1000 time = 5.302187919616699
I0123 17:28:33.886942 139863414272000 ddar.py:60] Depth 4/1000 time = 5.977639436721802
I0123 17:28:39.921836 139863414272000 ddar.py:60] Depth 5/1000 time = 6.034602642059326
I0123 17:28:45.989346 139863414272000 ddar.py:60] Depth 6/1000 time = 6.066851377487183
I0123 17:28:46.014782 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:28:46.014844 139863414272000 alphageometry.py:566] LM output (score=-2.653583): "l : T a e g l 16 ;"
I0123 17:28:46.014880 139863414272000 alphageometry.py:567] Translation: "l = on_tline l g a e"

I0123 17:28:46.014918 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l g a e ? coll i c j"
I0123 17:28:46.015073 139863414272000 graph.py:498] 
I0123 17:28:46.015124 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l g a e ? coll i c j
I0123 17:28:48.411426 139863414272000 ddar.py:60] Depth 1/1000 time = 2.377398729324341
I0123 17:28:53.323234 139863414272000 ddar.py:60] Depth 2/1000 time = 4.911578416824341
I0123 17:28:57.699242 139863414272000 ddar.py:60] Depth 3/1000 time = 4.375758647918701
I0123 17:29:03.892311 139863414272000 ddar.py:60] Depth 4/1000 time = 6.1928229331970215
I0123 17:29:10.156431 139863414272000 ddar.py:60] Depth 5/1000 time = 6.263842344284058
I0123 17:29:16.405507 139863414272000 ddar.py:60] Depth 6/1000 time = 6.248464822769165
I0123 17:29:16.430118 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:29:16.430180 139863414272000 alphageometry.py:566] LM output (score=-2.663700): "l : T b j j l 16 ;"
I0123 17:29:16.430216 139863414272000 alphageometry.py:567] Translation: "l = on_tline l j b j"

I0123 17:29:16.430254 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l j b j ? coll i c j"
I0123 17:29:16.430408 139863414272000 graph.py:498] 
I0123 17:29:16.430458 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l j b j ? coll i c j
I0123 17:29:18.868615 139863414272000 ddar.py:60] Depth 1/1000 time = 2.4158377647399902
I0123 17:29:22.648365 139863414272000 ddar.py:60] Depth 2/1000 time = 3.7795023918151855
I0123 17:29:28.150520 139863414272000 ddar.py:60] Depth 3/1000 time = 5.501927614212036
I0123 17:29:34.485464 139863414272000 ddar.py:60] Depth 4/1000 time = 6.3347015380859375
I0123 17:29:40.809312 139863414272000 ddar.py:60] Depth 5/1000 time = 6.323567867279053
I0123 17:29:47.209541 139863414272000 ddar.py:60] Depth 6/1000 time = 6.399631977081299
I0123 17:29:47.232900 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:29:47.232988 139863414272000 alphageometry.py:566] LM output (score=-2.683534): "l : T g k k l 16 ;"
I0123 17:29:47.233024 139863414272000 alphageometry.py:567] Translation: "l = on_tline l k g k"

I0123 17:29:47.233061 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l k g k ? coll i c j"
I0123 17:29:47.233213 139863414272000 graph.py:498] 
I0123 17:29:47.233263 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l k g k ? coll i c j
I0123 17:29:48.469152 139863414272000 ddar.py:60] Depth 1/1000 time = 1.2153496742248535
I0123 17:29:52.956838 139863414272000 ddar.py:60] Depth 2/1000 time = 4.487447261810303
I0123 17:29:57.124943 139863414272000 ddar.py:60] Depth 3/1000 time = 4.167857885360718
I0123 17:30:02.915601 139863414272000 ddar.py:60] Depth 4/1000 time = 5.790412425994873
I0123 17:30:08.904022 139863414272000 ddar.py:60] Depth 5/1000 time = 5.988122224807739
I0123 17:30:14.927671 139863414272000 ddar.py:60] Depth 6/1000 time = 6.023037672042847
I0123 17:30:14.955936 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:30:14.955997 139863414272000 alphageometry.py:566] LM output (score=-2.683853): "l : T d f k l 16 ;"
I0123 17:30:14.956034 139863414272000 alphageometry.py:567] Translation: "l = on_tline l k d f"

I0123 17:30:14.956072 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l k d f ? coll i c j"
I0123 17:30:14.956229 139863414272000 graph.py:498] 
I0123 17:30:14.956279 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l k d f ? coll i c j
I0123 17:30:17.396307 139863414272000 ddar.py:60] Depth 1/1000 time = 2.421133518218994
I0123 17:30:20.847250 139863414272000 ddar.py:60] Depth 2/1000 time = 3.4507064819335938
I0123 17:30:26.356095 139863414272000 ddar.py:60] Depth 3/1000 time = 5.508607387542725
I0123 17:30:32.579836 139863414272000 ddar.py:60] Depth 4/1000 time = 6.223491191864014
I0123 17:30:37.541264 139863414272000 ddar.py:60] Depth 5/1000 time = 4.9611334800720215
I0123 17:30:43.619604 139863414272000 ddar.py:60] Depth 6/1000 time = 6.077702283859253
I0123 17:30:43.646090 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:30:43.646152 139863414272000 alphageometry.py:566] LM output (score=-2.688781): "l : T a j e l 16 ;"
I0123 17:30:43.646189 139863414272000 alphageometry.py:567] Translation: "l = on_tline l e a j"

I0123 17:30:43.646229 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l e a j ? coll i c j"
I0123 17:30:43.646408 139863414272000 graph.py:498] 
I0123 17:30:43.646459 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l e a j ? coll i c j
I0123 17:30:46.059560 139863414272000 ddar.py:60] Depth 1/1000 time = 2.393594264984131
I0123 17:30:52.685380 139863414272000 ddar.py:60] Depth 2/1000 time = 6.625573635101318
I0123 17:30:58.790841 139863414272000 ddar.py:60] Depth 3/1000 time = 6.105198621749878
I0123 17:31:05.362556 139863414272000 ddar.py:60] Depth 4/1000 time = 6.571463346481323
I0123 17:31:13.338166 139863414272000 ddar.py:60] Depth 5/1000 time = 7.975330591201782
I0123 17:31:20.204414 139863414272000 ddar.py:60] Depth 6/1000 time = 6.865645408630371
I0123 17:31:20.231191 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:31:20.231306 139863414272000 alphageometry.py:566] LM output (score=-2.690367): "l : T d k k l 16 ;"
I0123 17:31:20.231346 139863414272000 alphageometry.py:567] Translation: "l = on_tline l k d k"

I0123 17:31:20.231385 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l k d k ? coll i c j"
I0123 17:31:20.231557 139863414272000 graph.py:498] 
I0123 17:31:20.231611 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l k d k ? coll i c j
I0123 17:31:22.646627 139863414272000 ddar.py:60] Depth 1/1000 time = 2.3954391479492188
I0123 17:31:27.467014 139863414272000 ddar.py:60] Depth 2/1000 time = 4.820132493972778
I0123 17:31:31.839157 139863414272000 ddar.py:60] Depth 3/1000 time = 4.371898651123047
I0123 17:31:37.884623 139863414272000 ddar.py:60] Depth 4/1000 time = 6.045223236083984
I0123 17:31:44.210764 139863414272000 ddar.py:60] Depth 5/1000 time = 6.325896263122559
I0123 17:31:50.578172 139863414272000 ddar.py:60] Depth 6/1000 time = 6.3671183586120605
I0123 17:31:56.992207 139863414272000 ddar.py:60] Depth 7/1000 time = 6.413391351699829
I0123 17:32:02.174072 139863414272000 ddar.py:60] Depth 8/1000 time = 5.152055740356445
I0123 17:32:02.174356 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:32:02.174410 139863414272000 alphageometry.py:566] LM output (score=-2.693615): "l : T b e e l 16 ;"
I0123 17:32:02.174445 139863414272000 alphageometry.py:567] Translation: "l = on_tline l e b e"

I0123 17:32:02.174483 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l e b e ? coll i c j"
I0123 17:32:02.174644 139863414272000 graph.py:498] 
I0123 17:32:02.174696 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l e b e ? coll i c j
I0123 17:32:04.581710 139863414272000 ddar.py:60] Depth 1/1000 time = 2.3868815898895264
I0123 17:32:11.086336 139863414272000 ddar.py:60] Depth 2/1000 time = 6.504385471343994
I0123 17:32:17.265630 139863414272000 ddar.py:60] Depth 3/1000 time = 6.179048776626587
I0123 17:32:25.460360 139863414272000 ddar.py:60] Depth 4/1000 time = 8.194466829299927
I0123 17:32:32.450732 139863414272000 ddar.py:60] Depth 5/1000 time = 6.990082740783691
I0123 17:32:40.630045 139863414272000 ddar.py:60] Depth 6/1000 time = 8.178714990615845
I0123 17:32:40.653022 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:32:40.653083 139863414272000 alphageometry.py:566] LM output (score=-2.696556): "l : T b k k l 16 ;"
I0123 17:32:40.653142 139863414272000 alphageometry.py:567] Translation: "l = on_tline l k b k"

I0123 17:32:40.653183 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l k b k ? coll i c j"
I0123 17:32:40.653338 139863414272000 graph.py:498] 
I0123 17:32:40.653388 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l k b k ? coll i c j
I0123 17:32:43.117342 139863414272000 ddar.py:60] Depth 1/1000 time = 2.4448671340942383
I0123 17:32:47.046869 139863414272000 ddar.py:60] Depth 2/1000 time = 3.9292941093444824
I0123 17:32:52.876879 139863414272000 ddar.py:60] Depth 3/1000 time = 5.829763650894165
I0123 17:32:59.414829 139863414272000 ddar.py:60] Depth 4/1000 time = 6.537698745727539
I0123 17:33:06.015420 139863414272000 ddar.py:60] Depth 5/1000 time = 6.600306272506714
I0123 17:33:12.610555 139863414272000 ddar.py:60] Depth 6/1000 time = 6.5945093631744385
I0123 17:33:19.275549 139863414272000 ddar.py:60] Depth 7/1000 time = 6.657227039337158
I0123 17:33:19.294240 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:33:19.294301 139863414272000 alphageometry.py:566] LM output (score=-2.780123): "l : T d f f l 16 ;"
I0123 17:33:19.294337 139863414272000 alphageometry.py:567] Translation: "l = on_tline l f d f"

I0123 17:33:19.294376 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l f d f ? coll i c j"
I0123 17:33:19.294533 139863414272000 graph.py:498] 
I0123 17:33:19.294583 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l f d f ? coll i c j
I0123 17:33:20.529048 139863414272000 ddar.py:60] Depth 1/1000 time = 1.2131190299987793
I0123 17:33:25.146983 139863414272000 ddar.py:60] Depth 2/1000 time = 4.61770224571228
I0123 17:33:29.484687 139863414272000 ddar.py:60] Depth 3/1000 time = 4.3374645709991455
I0123 17:33:35.420458 139863414272000 ddar.py:60] Depth 4/1000 time = 5.935528993606567
I0123 17:33:41.527153 139863414272000 ddar.py:60] Depth 5/1000 time = 6.106406927108765
I0123 17:33:47.751011 139863414272000 ddar.py:60] Depth 6/1000 time = 6.223265886306763
I0123 17:33:47.778758 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:33:47.778820 139863414272000 alphageometry.py:566] LM output (score=-2.793007): "l : T b e i l 16 ;"
I0123 17:33:47.778857 139863414272000 alphageometry.py:567] Translation: "l = on_tline l i b e"

I0123 17:33:47.778895 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l i b e ? coll i c j"
I0123 17:33:47.779052 139863414272000 graph.py:498] 
I0123 17:33:47.779102 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l i b e ? coll i c j
I0123 17:33:50.254872 139863414272000 ddar.py:60] Depth 1/1000 time = 2.4553732872009277
I0123 17:33:53.874080 139863414272000 ddar.py:60] Depth 2/1000 time = 3.6189773082733154
I0123 17:33:59.562422 139863414272000 ddar.py:60] Depth 3/1000 time = 5.688101053237915
I0123 17:34:04.659182 139863414272000 ddar.py:60] Depth 4/1000 time = 5.096510887145996
I0123 17:34:10.977895 139863414272000 ddar.py:60] Depth 5/1000 time = 6.318419456481934
I0123 17:34:17.261981 139863414272000 ddar.py:60] Depth 6/1000 time = 6.2834250926971436
I0123 17:34:17.284143 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:34:17.284205 139863414272000 alphageometry.py:566] LM output (score=-2.817848): "l : T b c k l 16 ;"
I0123 17:34:17.284242 139863414272000 alphageometry.py:567] Translation: "l = on_tline l k b c"

I0123 17:34:17.284283 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l k b c ? coll i c j"
I0123 17:34:17.284440 139863414272000 graph.py:498] 
I0123 17:34:17.284490 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l k b c ? coll i c j
I0123 17:34:19.721789 139863414272000 ddar.py:60] Depth 1/1000 time = 2.4183220863342285
I0123 17:34:24.573545 139863414272000 ddar.py:60] Depth 2/1000 time = 4.851517677307129
I0123 17:34:30.686259 139863414272000 ddar.py:60] Depth 3/1000 time = 6.11246657371521
I0123 17:34:37.543038 139863414272000 ddar.py:60] Depth 4/1000 time = 6.856527805328369
I0123 17:34:44.405636 139863414272000 ddar.py:60] Depth 5/1000 time = 6.862309694290161
I0123 17:34:51.234417 139863414272000 ddar.py:60] Depth 6/1000 time = 6.828191757202148
I0123 17:34:51.261283 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:34:51.261348 139863414272000 alphageometry.py:566] LM output (score=-2.877407): "l : T a e a l 16 ;"
I0123 17:34:51.261384 139863414272000 alphageometry.py:567] Translation: "l = on_tline l a a e"

I0123 17:34:51.261421 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l a a e ? coll i c j"
I0123 17:34:51.261575 139863414272000 graph.py:498] 
I0123 17:34:51.261624 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l a a e ? coll i c j
I0123 17:34:53.761170 139863414272000 ddar.py:60] Depth 1/1000 time = 2.478468179702759
I0123 17:34:57.523532 139863414272000 ddar.py:60] Depth 2/1000 time = 3.7621214389801025
I0123 17:35:03.244329 139863414272000 ddar.py:60] Depth 3/1000 time = 5.720569610595703
I0123 17:35:09.725498 139863414272000 ddar.py:60] Depth 4/1000 time = 6.480917453765869
I0123 17:35:14.909274 139863414272000 ddar.py:60] Depth 5/1000 time = 5.1834962368011475
I0123 17:35:21.299267 139863414272000 ddar.py:60] Depth 6/1000 time = 6.38941502571106
I0123 17:35:21.321535 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:35:21.321598 139863414272000 alphageometry.py:566] LM output (score=-2.892444): "l : T a e c l 16 ;"
I0123 17:35:21.321634 139863414272000 alphageometry.py:567] Translation: "l = on_tline l c a e"

I0123 17:35:21.321713 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l c a e ? coll i c j"
I0123 17:35:21.321870 139863414272000 graph.py:498] 
I0123 17:35:21.321922 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l c a e ? coll i c j
I0123 17:35:23.781278 139863414272000 ddar.py:60] Depth 1/1000 time = 2.4405736923217773
I0123 17:35:29.063955 139863414272000 ddar.py:60] Depth 2/1000 time = 5.282438516616821
I0123 17:35:35.204914 139863414272000 ddar.py:60] Depth 3/1000 time = 6.140721321105957
I0123 17:35:43.440368 139863414272000 ddar.py:60] Depth 4/1000 time = 8.235208988189697
I0123 17:35:50.429512 139863414272000 ddar.py:60] Depth 5/1000 time = 6.988866567611694
I0123 17:35:58.682205 139863414272000 ddar.py:60] Depth 6/1000 time = 8.252075433731079
I0123 17:35:58.705326 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:35:58.705393 139863414272000 alphageometry.py:566] LM output (score=-2.942219): "l : T a f e l 16 ;"
I0123 17:35:58.705430 139863414272000 alphageometry.py:567] Translation: "l = on_tline l e a f"

I0123 17:35:58.705469 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l e a f ? coll i c j"
I0123 17:35:58.705621 139863414272000 graph.py:498] 
I0123 17:35:58.705679 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_line k b j, on_bline k j b; l = on_tline l e a f ? coll i c j
I0123 17:36:01.205470 139863414272000 ddar.py:60] Depth 1/1000 time = 2.481159210205078
I0123 17:36:04.949599 139863414272000 ddar.py:60] Depth 2/1000 time = 3.743901014328003
I0123 17:36:10.662990 139863414272000 ddar.py:60] Depth 3/1000 time = 5.713144063949585
I0123 17:36:17.101530 139863414272000 ddar.py:60] Depth 4/1000 time = 6.438296318054199
I0123 17:36:23.613653 139863414272000 ddar.py:60] Depth 5/1000 time = 6.511852025985718
I0123 17:36:30.197222 139863414272000 ddar.py:60] Depth 6/1000 time = 6.583027362823486
I0123 17:36:30.223420 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:36:30.223491 139863414272000 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C a b d 00 D a d b d 01 ; e : C b c e 02 D b d d e 03 ; f : C a c f 04 D a d d f 05 ; g : C a b g 06 T a b e g 07 ; h : C a b h 08 T a b f h 09 ; i : C e h i 10 C f g i 11 ; j : C a e j 12 C b f j 13 ? C i c j {F1} x00 k : T b e b k 14 ; x00
I0123 17:36:35.984625 139863414272000 alphageometry.py:566] LM output (score=-1.080204): "l : P b k e l 15 ;"
I0123 17:36:35.985036 139863414272000 alphageometry.py:567] Translation: "l = on_pline l e b k"

I0123 17:36:35.985099 139863414272000 alphageometry.py:576] Solving: "a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k b b e; l = on_pline l e b k ? coll i c j"
I0123 17:36:35.985266 139863414272000 graph.py:498] 
I0123 17:36:35.985334 139863414272000 graph.py:499] a b c = triangle a b c; d = midpoint d b a; e = on_circle e d b, on_line e c b; f = on_circle f d a, on_line f c a; g = foot g e b a; h = foot h f b a; i = on_line i f g, on_line i e h; j = on_line j e a, on_line j b f; k = on_tline k b b e; l = on_pline l e b k ? coll i c j
I0123 17:36:36.967208 139863414272000 ddar.py:60] Depth 1/1000 time = 0.963630199432373
I0123 17:36:40.207544 139863414272000 ddar.py:60] Depth 2/1000 time = 3.2400877475738525
I0123 17:36:45.309413 139863414272000 ddar.py:60] Depth 3/1000 time = 5.101630687713623
I0123 17:36:49.747772 139863414272000 ddar.py:60] Depth 4/1000 time = 4.43807053565979
I0123 17:36:55.374104 139863414272000 ddar.py:60] Depth 5/1000 time = 5.626035928726196
I0123 17:36:55.374804 139863414272000 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 17:36:55.374847 139863414272000 alphageometry.py:585] Timeout.
