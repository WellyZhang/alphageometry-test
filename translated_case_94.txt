I0123 14:14:28.191264 139772884148224 inference_utils.py:69] Parsing gin configuration.
I0123 14:14:28.191368 139772884148224 inference_utils.py:71] Added Gin search path meliad_lib/meliad/transformer/configs
I0123 14:14:28.191569 139772884148224 inference_utils.py:74] Loading Gin config file base_htrans.gin
I0123 14:14:28.191604 139772884148224 inference_utils.py:74] Loading Gin config file size/medium_150M.gin
I0123 14:14:28.191634 139772884148224 inference_utils.py:74] Loading Gin config file options/positions_t5.gin
I0123 14:14:28.191661 139772884148224 inference_utils.py:74] Loading Gin config file options/lr_cosine_decay.gin
I0123 14:14:28.191689 139772884148224 inference_utils.py:74] Loading Gin config file options/seq_1024_nocache.gin
I0123 14:14:28.191717 139772884148224 inference_utils.py:74] Loading Gin config file geometry_150M_generate.gin
I0123 14:14:28.191744 139772884148224 inference_utils.py:76] Overriding Gin param DecoderOnlyLanguageModelGenerate.output_token_losses=True
I0123 14:14:28.191771 139772884148224 inference_utils.py:76] Overriding Gin param TransformerTaskConfig.batch_size=32
I0123 14:14:28.191797 139772884148224 inference_utils.py:76] Overriding Gin param TransformerTaskConfig.sequence_length=128
I0123 14:14:28.191823 139772884148224 inference_utils.py:76] Overriding Gin param Trainer.restore_state_variables=False
I0123 14:14:28.191870 139772884148224 resource_reader.py:50] system_path_file_exists:base_htrans.gin
E0123 14:14:28.191998 139772884148224 resource_reader.py:55] Path not found: base_htrans.gin
I0123 14:14:28.192205 139772884148224 resource_reader.py:50] system_path_file_exists:trainer_configuration.gin
E0123 14:14:28.192307 139772884148224 resource_reader.py:55] Path not found: trainer_configuration.gin
I0123 14:14:28.198630 139772884148224 resource_reader.py:50] system_path_file_exists:size/medium_150M.gin
E0123 14:14:28.198749 139772884148224 resource_reader.py:55] Path not found: size/medium_150M.gin
I0123 14:14:28.199064 139772884148224 resource_reader.py:50] system_path_file_exists:options/positions_t5.gin
E0123 14:14:28.199167 139772884148224 resource_reader.py:55] Path not found: options/positions_t5.gin
I0123 14:14:28.199443 139772884148224 resource_reader.py:50] system_path_file_exists:options/lr_cosine_decay.gin
E0123 14:14:28.199542 139772884148224 resource_reader.py:55] Path not found: options/lr_cosine_decay.gin
I0123 14:14:28.199944 139772884148224 resource_reader.py:50] system_path_file_exists:options/seq_1024_nocache.gin
E0123 14:14:28.200041 139772884148224 resource_reader.py:55] Path not found: options/seq_1024_nocache.gin
I0123 14:14:28.203743 139772884148224 training_loop.py:334] ==== Training loop: initializing model ====
I0123 14:14:28.294923 139772884148224 xla_bridge.py:660] Unable to initialize backend 'rocm': NOT_FOUND: Could not find registered platform with name: "rocm". Available platform names are: CUDA
I0123 14:14:28.295631 139772884148224 xla_bridge.py:660] Unable to initialize backend 'tpu': INTERNAL: Failed to open libtpu.so: libtpu.so: cannot open shared object file: No such file or directory
I0123 14:14:28.302436 139772884148224 training_loop.py:335] Process 0 of 1
I0123 14:14:28.302491 139772884148224 training_loop.py:336] Local device count = 1
I0123 14:14:28.302530 139772884148224 training_loop.py:337] Number of replicas = 1
I0123 14:14:28.302562 139772884148224 training_loop.py:339] Using random number seed 42
I0123 14:14:28.793798 139772884148224 training_loop.py:359] Initializing the model.
I0123 14:14:29.214720 139772884148224 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.214983 139772884148224 decoder_stack.py:316] dstack: scanning over 1 windows.
I0123 14:14:29.215089 139772884148224 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:14:29.215222 139772884148224 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:14:29.215306 139772884148224 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:14:29.215391 139772884148224 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:14:29.215466 139772884148224 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:14:29.215540 139772884148224 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:14:29.215611 139772884148224 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:14:29.215683 139772884148224 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:14:29.215753 139772884148224 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:14:29.215822 139772884148224 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:14:29.215892 139772884148224 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:14:29.215960 139772884148224 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 14:14:29.216000 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:29.216045 139772884148224 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 14:14:29.216161 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:29.216202 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:29.216233 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:29.218210 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.223584 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:29.234373 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.234650 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:29.239017 139772884148224 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:14:29.249527 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:29.249585 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:29.249623 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:29.249663 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.249733 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.250919 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.250998 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.251713 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.254177 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.260427 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.261691 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.261776 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:29.261813 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:29.261873 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.262005 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:29.262336 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:29.262384 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:29.264305 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.264407 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:29.267364 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.267447 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:29.267881 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:29.278215 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:29.287139 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.287238 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:29.287541 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.287625 139772884148224 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 14:14:29.287737 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:29.287777 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:29.287809 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:29.289745 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.292207 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:29.297832 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.298096 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:29.300744 139772884148224 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:14:29.304541 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:29.304596 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:29.304633 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:29.304664 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.304727 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.305290 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.305367 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.305738 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.306514 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.309017 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.309692 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.309771 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:29.309806 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:29.309865 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.309995 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:29.310316 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:29.310359 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:29.312258 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.312351 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:29.314889 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.314970 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:29.315453 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:29.318130 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:29.320282 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.320387 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:29.320686 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.320770 139772884148224 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 14:14:29.320881 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:29.320921 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:29.320952 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:29.322894 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.325280 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:29.331228 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.331499 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:29.334169 139772884148224 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:14:29.338174 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:29.338232 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:29.338269 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:29.338300 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.338364 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.338945 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.339023 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.339390 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.340162 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.342759 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.343391 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.343469 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:29.343504 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:29.343563 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.343694 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:29.344020 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:29.344064 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:29.345985 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.346081 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:29.348644 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.348734 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:29.349170 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:29.351474 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:29.353380 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.353476 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:29.353780 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.353864 139772884148224 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 14:14:29.353975 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:29.354014 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:29.354046 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:29.355938 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.358343 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:29.363929 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.364192 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:29.366893 139772884148224 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:14:29.370635 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:29.370691 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:29.370728 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:29.370759 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.370824 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.371392 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.371470 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.371844 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.372635 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.375234 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.375856 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.375935 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:29.375970 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:29.376030 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.376164 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:29.376491 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:29.376534 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:29.378445 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.378539 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:29.381090 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.381178 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:29.381620 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:29.383887 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:29.385855 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.385954 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:29.386254 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.386339 139772884148224 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 14:14:29.386450 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:29.386489 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:29.386520 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:29.388366 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.390773 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:29.396418 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.396675 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:29.399410 139772884148224 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:14:29.403160 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:29.403216 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:29.403252 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:29.403284 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.403351 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.404278 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.404357 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.404728 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.405500 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.408051 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.408671 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.408748 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:29.408783 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:29.408843 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.408980 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:29.409307 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:29.409351 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:29.411263 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.411360 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:29.413958 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.414039 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:29.414475 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:29.416808 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:29.418738 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.418834 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:29.419134 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.419216 139772884148224 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 14:14:29.419327 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:29.419366 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:29.419398 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:29.421239 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.423698 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:29.429275 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.429527 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:29.432185 139772884148224 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:14:29.435978 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:29.436033 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:29.436068 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:29.436100 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.436166 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.436825 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.436903 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.437261 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.438043 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.440548 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.441166 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.441244 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:29.441279 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:29.441338 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.441465 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:29.441797 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:29.441842 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:29.443790 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.443888 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:29.446410 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.446491 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:29.446920 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:29.449238 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:29.451147 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.451246 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:29.451544 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.451625 139772884148224 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 14:14:29.451736 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:29.451776 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:29.451809 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:29.453709 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.456096 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:29.461730 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.461993 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:29.464655 139772884148224 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:14:29.468437 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:29.468494 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:29.468533 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:29.468566 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.468630 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.469197 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.469274 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.469630 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.470412 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.472903 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.473564 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.473648 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:29.473685 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:29.473745 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.473876 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:29.474196 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:29.474239 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:29.476118 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.476212 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:29.478709 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.478792 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:29.479580 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:29.481863 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:29.483761 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.483861 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:29.484153 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.484233 139772884148224 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 14:14:29.484341 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:29.484380 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:29.484412 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:29.627468 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.630377 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:29.636279 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.636583 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:29.639391 139772884148224 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:14:29.643291 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:29.643350 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:29.643388 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:29.643421 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.643490 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.644118 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.644197 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.644567 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.645373 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.648025 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.648697 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.648777 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:29.648813 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:29.648875 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.649007 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:29.649346 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:29.649389 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:29.651322 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.651418 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:29.654058 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.654141 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:29.654582 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:29.656947 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:29.658961 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.659069 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:29.659377 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.659463 139772884148224 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 14:14:29.659576 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:29.659617 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:29.659649 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:29.661887 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.664390 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:29.669964 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.670232 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:29.672949 139772884148224 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:14:29.676733 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:29.676789 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:29.676825 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:29.676857 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.676921 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.677547 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.677625 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.677998 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.678781 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.681318 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.681950 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.682029 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:29.682065 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:29.682125 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.682254 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:29.682581 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:29.682625 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:29.684518 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.684615 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:29.687204 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.687285 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:29.687720 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:29.690078 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:29.691991 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.692092 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:29.692401 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.692492 139772884148224 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 14:14:29.692605 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:29.692645 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:29.692678 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:29.694527 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.696980 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:29.702899 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.703170 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:29.705837 139772884148224 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:14:29.709633 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:29.709695 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:29.709731 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:29.709762 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.709826 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.710397 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.710476 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.710841 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.711627 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.714162 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.714792 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.714875 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:29.714910 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:29.714970 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.715103 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:29.715428 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:29.715471 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:29.717441 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.717536 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:29.720048 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.720134 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:29.720573 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:29.722914 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:29.724809 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.724907 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:29.725204 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.725292 139772884148224 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 14:14:29.725403 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:29.725443 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:29.725476 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:29.727393 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.729787 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:29.735406 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.735672 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:29.738314 139772884148224 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:14:29.742125 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:29.742181 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:29.742218 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:29.742249 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.742313 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.742880 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.742957 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.743314 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.744107 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.746637 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.747307 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.747387 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:29.747422 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:29.747487 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.747618 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:29.747945 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:29.747988 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:29.749881 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.749976 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:29.752749 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.752829 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:29.753317 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:29.755602 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:29.757512 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.757607 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:29.757913 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.757997 139772884148224 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 14:14:29.758114 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:29.758153 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:29.758185 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:29.760095 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.762686 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:29.768499 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.768758 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:29.771449 139772884148224 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:14:29.775277 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:29.775334 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:29.775371 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:29.775403 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.775468 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.776041 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.776119 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.776483 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.777270 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.780175 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.780813 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.780892 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:29.780927 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:29.780988 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.781127 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:29.781456 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:29.781500 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:29.783604 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.783699 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:29.786300 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.786381 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:29.786815 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:29.789078 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:29.791001 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.791098 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:29.791403 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.791685 139772884148224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:14:29.791760 139772884148224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:14:29.791827 139772884148224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:14:29.791886 139772884148224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:14:29.791942 139772884148224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:14:29.791998 139772884148224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:14:29.792052 139772884148224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:14:29.792106 139772884148224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:14:29.792160 139772884148224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:14:29.792215 139772884148224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:14:29.792279 139772884148224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:14:29.792346 139772884148224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 14:14:29.792385 139772884148224 decoder_stack.py:344] dstack: Final layernorm.
I0123 14:14:29.795956 139772884148224 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:29.843899 139772884148224 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.843984 139772884148224 decoder_stack.py:333] dstack: autoregressive generator.
I0123 14:14:29.844040 139772884148224 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 14:14:29.844146 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:29.844185 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:29.844215 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:29.844281 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.846750 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:29.852258 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.852520 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:29.855198 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:29.872335 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:29.872392 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:29.872428 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:29.872460 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.872523 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.873665 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.873749 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.874470 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.876485 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.881304 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.882628 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.882717 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:29.882753 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:29.882814 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.882948 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:29.883060 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:29.883099 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:29.885033 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.885132 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:29.887707 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.887789 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:29.887900 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:29.890179 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:29.892190 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.892286 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:29.892603 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.892689 139772884148224 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 14:14:29.892801 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:29.892841 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:29.892873 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:29.892939 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.895447 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:29.901248 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.901513 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:29.904314 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:29.917880 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:29.917937 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:29.917974 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:29.918006 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.918070 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.918649 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.918729 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.919110 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.919820 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.922404 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.923044 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.923125 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:29.923167 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:29.923230 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.923371 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:29.923480 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:29.923518 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:29.925452 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.925549 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:29.928064 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.928145 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:29.928254 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:29.930518 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:29.932479 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.932574 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:29.932867 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.932950 139772884148224 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 14:14:29.933060 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:29.933099 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:29.933132 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:29.933197 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.935531 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:29.941046 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.941314 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:29.944079 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:29.956941 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:29.956998 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:29.957033 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:29.957064 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.957126 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.957696 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.957774 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.958143 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.958855 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.961361 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.961995 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.962073 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:29.962108 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:29.962173 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.962304 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:29.962414 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:29.962453 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:29.964391 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.964487 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:29.966946 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.967027 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:29.967145 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:29.969369 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:29.971300 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.971396 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:29.971685 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.971766 139772884148224 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 14:14:29.971876 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:29.971915 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:29.971946 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:29.972011 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.974274 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:29.983087 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.983396 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:29.986213 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:29.999254 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:29.999313 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:29.999350 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:29.999384 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:29.999448 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.000040 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.000118 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.000482 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.001192 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.003783 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.004418 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.004497 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:30.004533 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:30.004595 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.004734 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:30.004853 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:30.004894 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.006881 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.006977 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.009474 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.009554 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:30.009670 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:30.011949 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.013843 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.013940 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.014229 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.014313 139772884148224 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 14:14:30.014425 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:30.014468 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:30.014501 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:30.014565 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.017204 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:30.022902 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.023172 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:30.025818 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:30.038645 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:30.038702 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:30.038738 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:30.038769 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.038831 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.039393 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.039472 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.039829 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.040530 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.043128 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.043763 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.043842 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:30.043877 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:30.043938 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.044080 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:30.044191 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:30.044231 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.046151 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.046247 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.048689 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.048769 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:30.048878 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:30.051172 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.053081 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.053177 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.053470 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.053552 139772884148224 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 14:14:30.053669 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:30.053711 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:30.053743 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:30.053808 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.056139 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:30.061947 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.062210 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:30.064949 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:30.077783 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:30.077838 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:30.077872 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:30.077903 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.077969 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.078526 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.078603 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.078967 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.079665 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.082213 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.082846 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.082924 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:30.082959 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:30.083019 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.083152 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:30.083268 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:30.083307 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.085409 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.085504 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.087956 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.088037 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:30.088146 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:30.090404 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.092320 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.092434 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.092756 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.092845 139772884148224 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 14:14:30.092961 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:30.093002 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:30.093035 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:30.093102 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.095669 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:30.101247 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.101507 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:30.104150 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:30.116922 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:30.116977 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:30.117013 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:30.117044 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.117107 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.117686 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.117765 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.118130 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.118844 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.121392 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.122399 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.122479 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:30.122514 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:30.122575 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.122711 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:30.122822 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:30.122866 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.124776 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.124868 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.127289 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.127372 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:30.127479 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:30.129705 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.131654 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.131751 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.132041 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.132122 139772884148224 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 14:14:30.132231 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:30.132270 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:30.132302 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:30.132366 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.134635 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:30.140109 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.140391 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:30.143100 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:30.155854 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:30.155910 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:30.155946 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:30.155978 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.156041 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.156654 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.156733 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.157090 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.157801 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.160333 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.160962 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.161041 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:30.161077 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:30.161136 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.161270 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:30.161380 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:30.161423 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.163321 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.163417 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.165913 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.165993 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:30.166102 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:30.168323 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.170211 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.170308 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.170599 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.170682 139772884148224 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 14:14:30.170791 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:30.170830 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:30.170862 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:30.170925 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.173189 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:30.178705 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.178964 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:30.181595 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:30.194525 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:30.194581 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:30.194617 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:30.194812 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.194876 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.195445 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.195523 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.195887 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.196578 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.199102 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.199774 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.199853 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:30.199889 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:30.199948 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.200081 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:30.200196 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:30.200236 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.202136 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.202231 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.204659 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.204739 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:30.204846 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:30.207068 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.209003 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.209099 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.209389 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.209471 139772884148224 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 14:14:30.209581 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:30.209620 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:30.209659 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:30.209724 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.211979 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:30.217397 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.217662 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:30.220329 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:30.233235 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:30.233291 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:30.233327 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:30.233358 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.233420 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.234035 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.234112 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.234475 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.235174 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.237711 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.238347 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.238426 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:30.238462 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:30.238524 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.238660 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:30.238773 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:30.238812 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.240717 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.240821 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.243317 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.243402 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:30.243509 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:30.245733 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.247597 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.247692 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.247980 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.248061 139772884148224 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 14:14:30.248170 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:30.248209 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:30.248241 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:30.248304 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.250575 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:30.256065 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.256323 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:30.258976 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:30.271676 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:30.271731 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:30.271768 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:30.271799 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.271863 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.272424 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.272501 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.272855 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.273551 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.276075 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.276743 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.276824 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:30.276860 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:30.276920 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.277053 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:30.277163 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:30.277202 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.279107 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.279208 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.281648 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.281729 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:30.281838 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:30.284049 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.285993 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.286090 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.286379 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.286463 139772884148224 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 14:14:30.286574 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:30.286615 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:30.286646 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:30.286710 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.288974 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:30.294506 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.294941 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:30.297678 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:30.310343 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:30.310400 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:30.310436 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:30.310467 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.310530 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.311084 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.311160 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.311525 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.312266 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.314819 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.315442 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.315520 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:30.315555 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:30.315613 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.315747 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:30.315857 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:30.315896 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.317812 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.317907 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.320348 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.320432 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:30.320542 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:30.322874 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.324785 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.324883 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.325177 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.325269 139772884148224 decoder_stack.py:344] dstack: Final layernorm.
I0123 14:14:30.328201 139772884148224 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:30.384785 139772884148224 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.384871 139772884148224 decoder_stack.py:333] dstack: autoregressive generator.
I0123 14:14:30.384925 139772884148224 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 14:14:30.385029 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:30.385066 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:30.385097 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:30.385160 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.387875 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:30.393310 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.393574 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:30.396194 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:30.408618 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:30.408676 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:30.408713 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:30.408745 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.408809 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.409366 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.409443 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.409810 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.410496 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.413016 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.413631 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.413717 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:30.413752 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:30.413812 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.413943 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:30.414062 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:30.414103 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.415973 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.416068 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.418494 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.418576 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:30.418687 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:30.420948 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.422812 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.422909 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.423197 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.423279 139772884148224 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 14:14:30.423388 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:30.423428 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:30.423459 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:30.423523 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.425792 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:30.431156 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.431416 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:30.434094 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:30.446450 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:30.446507 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:30.446543 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:30.446574 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.446636 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.447193 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.447271 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.447630 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.448317 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.450850 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.451477 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.451556 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:30.451592 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:30.451653 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.451784 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:30.451893 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:30.451939 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.453819 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.453916 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.456312 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.456392 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:30.456503 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:30.458758 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.460618 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.460714 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.461005 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.461088 139772884148224 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 14:14:30.461197 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:30.461237 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:30.461269 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:30.461333 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.463585 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:30.468976 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.469239 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:30.471927 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:30.484229 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:30.484284 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:30.484320 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:30.484351 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.484414 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.484973 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.485052 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.485413 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.486107 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.488660 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.489275 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.489354 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:30.489391 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:30.489451 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.489586 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:30.489703 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:30.489744 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.491598 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.491692 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.494101 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.494184 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:30.494294 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:30.496972 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.498836 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.498934 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.499226 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.499309 139772884148224 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 14:14:30.499419 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:30.499459 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:30.499491 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:30.499554 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.501791 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:30.507148 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.507410 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:30.510115 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:30.522591 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:30.522648 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:30.522686 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:30.522729 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.522795 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.523368 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.523445 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.523803 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.524482 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.527046 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.527669 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.527747 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:30.527781 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:30.527841 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.527969 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:30.528077 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:30.528116 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.530016 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.530110 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.532532 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.532611 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:30.532718 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:30.535007 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.536886 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.536981 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.537271 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.537353 139772884148224 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 14:14:30.537462 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:30.537500 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:30.537531 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:30.537594 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.539844 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:30.545236 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.545495 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:30.548263 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:30.560872 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:30.560928 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:30.560963 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:30.560993 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.561055 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.561606 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.561689 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.562051 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.562740 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.565310 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.565935 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.566013 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:30.566047 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:30.566106 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.566233 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:30.566340 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:30.566377 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.568258 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.568356 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.570785 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.570865 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:30.570973 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:30.573284 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.575137 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.575231 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.575519 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.575599 139772884148224 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 14:14:30.575705 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:30.575742 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:30.575773 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:30.575834 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.578070 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:30.583459 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.583716 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:30.586438 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:30.599065 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:30.599119 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:30.599155 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:30.599185 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.599248 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.599816 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.599891 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.600255 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.600944 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.603535 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.604153 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.604230 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:30.604264 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:30.604321 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.604453 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:30.604560 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:30.604598 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.606490 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.606589 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.609039 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.609118 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:30.609224 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:30.611986 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.613875 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.613970 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.614263 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.614344 139772884148224 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 14:14:30.614450 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:30.614489 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:30.614519 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:30.614583 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.616828 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:30.622401 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.622660 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:30.625476 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:30.638035 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:30.638089 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:30.638128 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:30.638158 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.638221 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.638799 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.638875 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.639236 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.639924 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.642504 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.643133 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.643210 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:30.643244 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:30.643305 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.643436 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:30.643545 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:30.643584 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.645516 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.645609 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.648037 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.648128 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:30.648235 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:30.650514 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.652377 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.652472 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.652762 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.652845 139772884148224 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 14:14:30.652951 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:30.652988 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:30.653019 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:30.653082 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.655345 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:30.660794 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.661055 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:30.663786 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:30.676434 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:30.676491 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:30.676527 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:30.676558 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.676625 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.677191 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.677268 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.677633 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.678338 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.680904 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.681529 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.681607 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:30.681646 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:30.681715 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.681853 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:30.681962 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:30.682000 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.683873 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.683966 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.686381 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.686467 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:30.686578 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:30.688890 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.690755 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.690851 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.691139 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.691221 139772884148224 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 14:14:30.691328 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:30.691366 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:30.691396 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:30.691459 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.693732 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:30.699150 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.699409 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:30.702117 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:30.714691 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:30.714746 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:30.714782 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:30.714813 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.714875 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.715437 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.715514 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.715871 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.716562 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.719171 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.719792 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.719871 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:30.719906 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:30.719965 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.720094 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:30.720202 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:30.720240 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.722136 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.722231 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.724763 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.724848 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:30.724959 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:30.727652 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.729533 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.729628 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.729926 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.730007 139772884148224 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 14:14:30.730113 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:30.730150 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:30.730181 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:30.730243 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.732504 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:30.737951 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.738211 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:30.740934 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:30.753541 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:30.753597 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:30.753632 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:30.753671 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.753735 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.754302 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.754378 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.754742 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.755432 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.758009 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.758646 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.758728 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:30.758763 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:30.758821 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.758951 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:30.759059 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:30.759097 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.761505 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.761601 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.764022 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.764101 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:30.764215 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:30.766480 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.768321 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.768415 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.768705 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.768786 139772884148224 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 14:14:30.768894 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:30.768932 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:30.768963 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:30.769025 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.771292 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:30.776707 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.776962 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:30.779664 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:30.792159 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:30.792213 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:30.792249 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:30.792280 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.792341 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.792899 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.792973 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.793323 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.794032 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.796572 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.797194 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.797273 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:30.797307 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:30.797364 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.797500 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:30.797606 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:30.797653 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.799519 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.799613 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.802026 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.802110 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:30.802217 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:30.804491 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.806351 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.806446 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.806730 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.806811 139772884148224 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 14:14:30.806915 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:30.806953 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:30.806983 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:30.807044 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.809272 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:30.814697 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.814954 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:30.817673 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:30.830143 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:30.830198 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:30.830233 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:30.830264 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.830326 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.830887 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.830962 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.831317 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.832004 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.834567 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.835193 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.835273 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:30.835309 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:30.835367 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.835494 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:30.835606 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:30.835644 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.837517 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.837607 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.840011 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.840094 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:30.840202 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:30.842867 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:30.844740 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.844834 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:30.845120 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:30.845206 139772884148224 decoder_stack.py:344] dstack: Final layernorm.
I0123 14:14:30.848042 139772884148224 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:35.300192 139772884148224 optimizer_config.py:74] Using Flax Adafactor Optimizer. lr=1.000000, b1=0.900000
I0123 14:14:35.836620 139772884148224 training_loop.py:409] No working directory specified.
I0123 14:14:35.836746 139772884148224 training_loop.py:431] Loading pre-trained model from ag_ckpt_vocab:
I0123 14:14:35.837538 139772884148224 checkpoints.py:1062] Restoring legacy Flax checkpoint from ag_ckpt_vocab/checkpoint_10999999
I0123 14:14:38.805397 139772884148224 training_loop.py:447] Only restoring trainable parameters.
I0123 14:14:38.806153 139772884148224 training_loop.py:724] parameter: decoder/embed/embedding, shape (1024, 1024), size 1048576
I0123 14:14:38.806214 139772884148224 training_loop.py:724] parameter: decoder/final_layernorm/scale, shape (1024,), size 1024
I0123 14:14:38.806261 139772884148224 training_loop.py:724] parameter: decoder/transformer0/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:14:38.806302 139772884148224 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:14:38.806342 139772884148224 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.806382 139772884148224 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:14:38.806421 139772884148224 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.806458 139772884148224 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.806495 139772884148224 training_loop.py:724] parameter: decoder/transformer0/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:14:38.806533 139772884148224 training_loop.py:724] parameter: decoder/transformer0/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:14:38.806571 139772884148224 training_loop.py:724] parameter: decoder/transformer0/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.806610 139772884148224 training_loop.py:724] parameter: decoder/transformer0/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:14:38.806647 139772884148224 training_loop.py:724] parameter: decoder/transformer1/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:14:38.806683 139772884148224 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:14:38.806720 139772884148224 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.806757 139772884148224 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:14:38.806793 139772884148224 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.806830 139772884148224 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.806865 139772884148224 training_loop.py:724] parameter: decoder/transformer1/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:14:38.806901 139772884148224 training_loop.py:724] parameter: decoder/transformer1/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:14:38.806952 139772884148224 training_loop.py:724] parameter: decoder/transformer1/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.806991 139772884148224 training_loop.py:724] parameter: decoder/transformer1/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:14:38.807027 139772884148224 training_loop.py:724] parameter: decoder/transformer10/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:14:38.807063 139772884148224 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:14:38.807099 139772884148224 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.807134 139772884148224 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:14:38.807170 139772884148224 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.807204 139772884148224 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.807240 139772884148224 training_loop.py:724] parameter: decoder/transformer10/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:14:38.807276 139772884148224 training_loop.py:724] parameter: decoder/transformer10/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:14:38.807312 139772884148224 training_loop.py:724] parameter: decoder/transformer10/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.807348 139772884148224 training_loop.py:724] parameter: decoder/transformer10/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:14:38.807383 139772884148224 training_loop.py:724] parameter: decoder/transformer11/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:14:38.807420 139772884148224 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:14:38.807456 139772884148224 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.807493 139772884148224 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:14:38.807530 139772884148224 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.807567 139772884148224 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.807604 139772884148224 training_loop.py:724] parameter: decoder/transformer11/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:14:38.807639 139772884148224 training_loop.py:724] parameter: decoder/transformer11/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:14:38.807675 139772884148224 training_loop.py:724] parameter: decoder/transformer11/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.807711 139772884148224 training_loop.py:724] parameter: decoder/transformer11/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:14:38.807747 139772884148224 training_loop.py:724] parameter: decoder/transformer2/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:14:38.807783 139772884148224 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:14:38.807819 139772884148224 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.807854 139772884148224 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:14:38.807896 139772884148224 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.807934 139772884148224 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.807971 139772884148224 training_loop.py:724] parameter: decoder/transformer2/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:14:38.808008 139772884148224 training_loop.py:724] parameter: decoder/transformer2/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:14:38.808044 139772884148224 training_loop.py:724] parameter: decoder/transformer2/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.808080 139772884148224 training_loop.py:724] parameter: decoder/transformer2/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:14:38.808116 139772884148224 training_loop.py:724] parameter: decoder/transformer3/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:14:38.808153 139772884148224 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:14:38.808189 139772884148224 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.808226 139772884148224 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:14:38.808263 139772884148224 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.808299 139772884148224 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.808335 139772884148224 training_loop.py:724] parameter: decoder/transformer3/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:14:38.808371 139772884148224 training_loop.py:724] parameter: decoder/transformer3/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:14:38.808407 139772884148224 training_loop.py:724] parameter: decoder/transformer3/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.808442 139772884148224 training_loop.py:724] parameter: decoder/transformer3/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:14:38.808478 139772884148224 training_loop.py:724] parameter: decoder/transformer4/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:14:38.808512 139772884148224 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:14:38.808548 139772884148224 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.808584 139772884148224 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:14:38.808619 139772884148224 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.808655 139772884148224 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.808691 139772884148224 training_loop.py:724] parameter: decoder/transformer4/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:14:38.808727 139772884148224 training_loop.py:724] parameter: decoder/transformer4/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:14:38.808763 139772884148224 training_loop.py:724] parameter: decoder/transformer4/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.808799 139772884148224 training_loop.py:724] parameter: decoder/transformer4/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:14:38.808834 139772884148224 training_loop.py:724] parameter: decoder/transformer5/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:14:38.808875 139772884148224 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:14:38.808912 139772884148224 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.808949 139772884148224 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:14:38.808986 139772884148224 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.809022 139772884148224 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.809057 139772884148224 training_loop.py:724] parameter: decoder/transformer5/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:14:38.809092 139772884148224 training_loop.py:724] parameter: decoder/transformer5/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:14:38.809128 139772884148224 training_loop.py:724] parameter: decoder/transformer5/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.809164 139772884148224 training_loop.py:724] parameter: decoder/transformer5/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:14:38.809199 139772884148224 training_loop.py:724] parameter: decoder/transformer6/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:14:38.809234 139772884148224 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:14:38.809268 139772884148224 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.809303 139772884148224 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:14:38.809338 139772884148224 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.809373 139772884148224 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.809409 139772884148224 training_loop.py:724] parameter: decoder/transformer6/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:14:38.809445 139772884148224 training_loop.py:724] parameter: decoder/transformer6/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:14:38.809481 139772884148224 training_loop.py:724] parameter: decoder/transformer6/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.809516 139772884148224 training_loop.py:724] parameter: decoder/transformer6/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:14:38.809552 139772884148224 training_loop.py:724] parameter: decoder/transformer7/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:14:38.809587 139772884148224 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:14:38.809622 139772884148224 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.809665 139772884148224 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:14:38.809702 139772884148224 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.809737 139772884148224 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.809772 139772884148224 training_loop.py:724] parameter: decoder/transformer7/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:14:38.809807 139772884148224 training_loop.py:724] parameter: decoder/transformer7/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:14:38.809847 139772884148224 training_loop.py:724] parameter: decoder/transformer7/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.809886 139772884148224 training_loop.py:724] parameter: decoder/transformer7/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:14:38.809923 139772884148224 training_loop.py:724] parameter: decoder/transformer8/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:14:38.809958 139772884148224 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:14:38.809994 139772884148224 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.810030 139772884148224 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:14:38.810066 139772884148224 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.810102 139772884148224 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.810141 139772884148224 training_loop.py:724] parameter: decoder/transformer8/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:14:38.810176 139772884148224 training_loop.py:724] parameter: decoder/transformer8/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:14:38.810213 139772884148224 training_loop.py:724] parameter: decoder/transformer8/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.810250 139772884148224 training_loop.py:724] parameter: decoder/transformer8/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:14:38.810286 139772884148224 training_loop.py:724] parameter: decoder/transformer9/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 14:14:38.810321 139772884148224 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 14:14:38.810357 139772884148224 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.810392 139772884148224 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 14:14:38.810428 139772884148224 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.810463 139772884148224 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.810499 139772884148224 training_loop.py:724] parameter: decoder/transformer9/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 14:14:38.810535 139772884148224 training_loop.py:724] parameter: decoder/transformer9/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 14:14:38.810570 139772884148224 training_loop.py:724] parameter: decoder/transformer9/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 14:14:38.810606 139772884148224 training_loop.py:724] parameter: decoder/transformer9/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 14:14:38.810635 139772884148224 training_loop.py:725] Total parameters: 152072288
I0123 14:14:38.810866 139772884148224 training_loop.py:739] Total state size: 0
I0123 14:14:38.832820 139772884148224 training_loop.py:492] Training loop: creating task for mode beam_search
I0123 14:14:38.833077 139772884148224 training_loop.py:685] Creating logging writer (train) for mode beam_search
I0123 14:14:38.833440 139772884148224 training_loop.py:652] Compiling mode beam_search with jit.
I0123 14:14:38.833760 139772884148224 training_loop.py:89] registering functions: dict_keys([])
I0123 14:14:38.849938 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a ? simtri a g d f a d
I0123 14:14:39.020458 139772884148224 ddar.py:60] Depth 1/1000 time = 0.1601848602294922
I0123 14:14:39.361946 139772884148224 ddar.py:60] Depth 2/1000 time = 0.3413197994232178
I0123 14:14:39.746835 139772884148224 ddar.py:60] Depth 3/1000 time = 0.3846573829650879
I0123 14:14:40.500698 139772884148224 ddar.py:60] Depth 4/1000 time = 0.7536275386810303
I0123 14:14:41.348782 139772884148224 ddar.py:60] Depth 5/1000 time = 0.8478429317474365
I0123 14:14:42.167119 139772884148224 ddar.py:60] Depth 6/1000 time = 0.8179018497467041
I0123 14:14:42.171769 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:14:42.171846 139772884148224 alphageometry.py:540] Depth 0. There are 1 nodes to expand:
I0123 14:14:42.171882 139772884148224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b c e 02 T b c d e 03 ; f : C a c f 04 C d e f 05 ; g : C a b g 06 C d f g 07 ? S a g d f a d {F1} x00
I0123 14:14:42.171914 139772884148224 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b c e 02 T b c d e 03 ; f : C a c f 04 C d e f 05 ; g : C a b g 06 C d f g 07 ? S a g d f a d {F1} x00
I0123 14:14:42.296050 139772884148224 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.296230 139772884148224 decoder_stack.py:316] dstack: scanning over 1 windows.
I0123 14:14:42.296329 139772884148224 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:14:42.296405 139772884148224 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:14:42.296475 139772884148224 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:14:42.296545 139772884148224 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:14:42.296613 139772884148224 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:14:42.296681 139772884148224 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:14:42.296748 139772884148224 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:14:42.296816 139772884148224 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:14:42.296882 139772884148224 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:14:42.296948 139772884148224 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:14:42.297015 139772884148224 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:14:42.297081 139772884148224 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 14:14:42.297120 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:42.297164 139772884148224 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 14:14:42.297267 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:42.297305 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:42.297335 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:42.299355 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.301901 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:42.307556 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.307827 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:42.310503 139772884148224 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:14:42.314385 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:42.314443 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:42.314480 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:42.314512 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.314576 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.315181 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.315257 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.315617 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.316377 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.318901 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.319581 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.319658 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:42.319693 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:42.319752 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.319882 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:42.320204 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:42.320246 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:42.322144 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.322238 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:42.324683 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.324764 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:42.325182 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:42.327533 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:42.329433 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.329528 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:42.329829 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.329911 139772884148224 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 14:14:42.330016 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:42.330055 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:42.330086 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:42.331862 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.334173 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:42.339772 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.340028 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:42.342609 139772884148224 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:14:42.346311 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:42.346374 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:42.346410 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:42.346440 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.346503 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.347572 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.347649 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.348011 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.348779 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.351465 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.352256 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.352333 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:42.352368 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:42.352427 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.352555 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:42.352867 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:42.352908 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:42.354862 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.354956 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:42.357407 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.357485 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:42.357928 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:42.360172 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:42.362069 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.362164 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:42.362454 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.362535 139772884148224 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 14:14:42.362641 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:42.362679 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:42.362710 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:42.364567 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.366896 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:42.372419 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.372674 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:42.375231 139772884148224 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:14:42.378912 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:42.378966 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:42.379001 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:42.379039 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.379103 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.379660 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.379737 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.380097 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.380852 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.383322 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.383942 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.384019 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:42.384053 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:42.384111 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.384239 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:42.384603 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:42.384646 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:42.386543 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.386636 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:42.389074 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.389151 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:42.389570 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:42.391803 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:42.393771 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.393865 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:42.394153 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.394233 139772884148224 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 14:14:42.394338 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:42.394376 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:42.394407 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:42.396160 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.398457 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:42.404053 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.404307 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:42.406870 139772884148224 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:14:42.410526 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:42.410582 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:42.410617 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:42.410648 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.410715 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.411328 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.411404 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.411759 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.412512 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.414966 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.415584 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.415662 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:42.415697 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:42.415755 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.415885 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:42.416199 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:42.416240 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:42.418196 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.418289 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:42.420723 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.420802 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:42.421216 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:42.423469 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:42.425357 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.425451 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:42.425757 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.425839 139772884148224 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 14:14:42.425945 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:42.425984 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:42.426015 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:42.427854 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.430173 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:42.435733 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.435991 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:42.438628 139772884148224 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:14:42.442246 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:42.442301 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:42.442335 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:42.442365 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.442433 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.442994 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.443071 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.443427 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.444177 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.446702 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.447401 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.447479 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:42.447514 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:42.447572 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.447714 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:42.448037 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:42.448082 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:42.450044 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.450142 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:42.452788 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.452867 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:42.453283 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:42.456152 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:42.458090 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.458188 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:42.458492 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.458577 139772884148224 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 14:14:42.458689 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:42.458729 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:42.458761 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:42.460554 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.462889 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:42.468577 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.468832 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:42.471423 139772884148224 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:14:42.475027 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:42.475081 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:42.475116 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:42.475148 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.475260 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.475826 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.475903 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.476258 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.477011 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.479477 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.480095 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.480172 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:42.480207 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:42.480264 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.480412 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:42.480726 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:42.480767 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:42.482712 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.482805 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:42.485230 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.485308 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:42.485747 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:42.487972 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:42.489877 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.489973 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:42.490263 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.490344 139772884148224 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 14:14:42.490451 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:42.490489 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:42.490519 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:42.492361 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.494690 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:42.500254 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.500513 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:42.503122 139772884148224 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:14:42.506771 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:42.506826 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:42.506860 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:42.506890 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.506953 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.507509 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.507593 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.507951 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.508710 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.511230 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.511901 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.511980 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:42.512015 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:42.512072 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.512202 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:42.512516 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:42.512557 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:42.514445 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.514539 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:42.516964 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.517043 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:42.517464 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:42.519752 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:42.521648 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.521743 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:42.522032 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.522114 139772884148224 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 14:14:42.522222 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:42.522261 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:42.522291 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:42.524053 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.526366 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:42.531926 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.532181 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:42.534726 139772884148224 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:14:42.538337 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:42.538392 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:42.538426 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:42.538456 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.538568 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.539130 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.539213 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.539576 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.540333 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.542808 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.543416 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.543494 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:42.543528 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:42.543585 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.543713 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:42.544025 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:42.544065 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:42.546040 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.546135 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:42.548627 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.548705 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:42.549128 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:42.551420 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:42.553298 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.553391 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:42.553841 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.553927 139772884148224 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 14:14:42.554033 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:42.554072 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:42.554102 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:42.555932 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.558251 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:42.563765 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.564020 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:42.567007 139772884148224 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:14:42.570632 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:42.570688 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:42.570722 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:42.570754 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.570816 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.571377 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.571454 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.571820 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.572585 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.575043 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.575660 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.575889 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:42.575923 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:42.575981 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.576109 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:42.576470 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:42.576512 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:42.578425 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.578518 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:42.580957 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.581036 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:42.581454 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:42.583676 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:42.585625 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.585732 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:42.586024 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.586105 139772884148224 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 14:14:42.586212 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:42.586251 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:42.586282 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:42.588042 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.590357 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:42.595960 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.596213 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:42.598802 139772884148224 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:14:42.602418 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:42.602473 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:42.602507 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:42.602537 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.602599 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.603210 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.603288 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.603649 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.604419 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.606904 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.607523 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.607600 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:42.607636 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:42.607695 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.607824 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:42.608138 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:42.608180 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:42.610089 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.610186 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:42.612738 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.612817 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:42.613235 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:42.615478 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:42.617377 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.617471 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:42.617767 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.617848 139772884148224 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 14:14:42.617954 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:42.617992 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:42.618022 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:42.619790 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.622158 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:42.627698 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.627951 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:42.630507 139772884148224 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:14:42.634121 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:42.634176 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:42.634210 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:42.634240 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.634356 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.634919 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.634996 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.635353 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.636122 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.638601 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.639220 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.639298 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:42.639333 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:42.639391 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.639523 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:42.639839 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:42.639880 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:42.641850 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.641942 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:42.644417 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.644497 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:42.644919 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:42.647159 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:42.649049 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.649144 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:42.649433 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.649515 139772884148224 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 14:14:42.649621 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:42.649667 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:42.649698 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:42.651552 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.653878 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:42.659390 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.659647 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:42.662417 139772884148224 transformer_layer.py:213] tlayer: windowed attention.
I0123 14:14:42.666104 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:42.666159 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:42.666194 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:42.666225 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.666289 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.666846 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.666923 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.667285 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.668055 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.670727 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.671345 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.671424 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:42.671459 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:42.671518 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.671650 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:42.671965 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:42.672007 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:42.673998 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.674092 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:42.676536 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.676615 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:42.677033 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:42.679279 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:42.681158 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.681251 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:42.681537 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.681795 139772884148224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:14:42.681864 139772884148224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:14:42.681920 139772884148224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:14:42.681975 139772884148224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:14:42.682029 139772884148224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:14:42.682081 139772884148224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:14:42.682134 139772884148224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:14:42.682188 139772884148224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:14:42.682240 139772884148224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:14:42.682293 139772884148224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:14:42.682344 139772884148224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:14:42.682397 139772884148224 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 14:14:42.682433 139772884148224 decoder_stack.py:344] dstack: Final layernorm.
I0123 14:14:42.685296 139772884148224 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 14:14:42.729754 139772884148224 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.729838 139772884148224 decoder_stack.py:333] dstack: autoregressive generator.
I0123 14:14:42.729891 139772884148224 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 14:14:42.729995 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:42.730032 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:42.730067 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:42.730129 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.732490 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:42.737871 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.738132 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:42.740724 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:42.753727 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:42.753782 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:42.753816 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:42.753846 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.753907 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.754469 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.754545 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.754907 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.755594 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.912819 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.913666 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.913774 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:42.913811 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:42.913885 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.914036 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:42.914168 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:42.914209 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:42.916315 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.916411 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:42.919067 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.919151 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:42.919265 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:42.921592 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:42.923577 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.923672 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:42.923971 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.924055 139772884148224 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 14:14:42.924163 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:42.924201 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:42.924232 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:42.924309 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.926631 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:42.932276 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.932543 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:42.935269 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:42.948148 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:42.948204 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:42.948239 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:42.948269 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.948332 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.948909 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.948987 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.949349 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.950054 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.952672 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.953293 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.953370 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:42.953404 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:42.953463 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.953592 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:42.953708 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:42.953748 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:42.955613 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.955705 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:42.958123 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.958203 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:42.958310 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:42.960586 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:42.962469 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.962565 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:42.962859 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.962940 139772884148224 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 14:14:42.963048 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:42.963087 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:42.963118 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:42.963190 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.965466 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:42.971009 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.971270 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:42.973890 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:42.986288 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:42.986343 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:42.986379 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:42.986410 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.986474 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.987035 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.987113 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.987470 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.988300 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.991029 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.991651 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.991729 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:42.991763 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:42.991821 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.991950 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:42.992058 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:42.992095 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:42.993938 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.994032 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:42.996452 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:42.996530 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:42.996637 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:42.998882 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.000746 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.000841 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.001133 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.001215 139772884148224 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 14:14:43.001324 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:43.001363 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:43.001393 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:43.001456 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.003716 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:43.009555 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.009822 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:43.012469 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:43.024853 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:43.024909 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:43.024944 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:43.024976 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.025040 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.025600 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.025687 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.026049 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.026727 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.029268 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.029898 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.029977 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:43.030011 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:43.030070 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.030200 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:43.030307 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:43.030345 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.032210 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.032303 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.034720 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.034801 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:43.034910 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:43.037158 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.039021 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.039118 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.039412 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.039494 139772884148224 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 14:14:43.039603 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:43.039642 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:43.039673 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:43.039736 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.042003 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:43.047522 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.047786 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:43.050427 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:43.063244 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:43.063298 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:43.063333 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:43.063363 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.063426 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.063992 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.064068 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.064428 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.065113 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.067643 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.068262 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.068339 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:43.068373 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:43.068429 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.068559 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:43.068666 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:43.068703 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.070558 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.070652 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.073048 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.073127 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:43.073234 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:43.075486 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.077330 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.077425 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.077724 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.077807 139772884148224 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 14:14:43.077915 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:43.077953 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:43.077984 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:43.078046 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.080301 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:43.085796 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.086059 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:43.088682 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:43.101489 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:43.101543 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:43.101577 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:43.101608 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.101679 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.102239 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.102315 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.102670 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.103348 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.105888 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.106505 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.106583 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:43.106618 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:43.106676 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.106806 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:43.106912 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:43.106950 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.108785 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.108877 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.111288 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.111369 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:43.111477 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:43.113711 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.115541 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.115635 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.115927 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.116008 139772884148224 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 14:14:43.116117 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:43.116156 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:43.116186 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:43.116248 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.118480 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:43.123950 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.124221 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:43.126841 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:43.139180 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:43.139236 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:43.139272 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:43.139302 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.139365 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.139918 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.139993 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.140345 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.141026 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.143549 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.144160 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.144237 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:43.144272 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:43.144330 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.144461 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:43.144567 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:43.144604 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.146446 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.146541 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.148922 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.149000 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:43.149107 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:43.151341 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.153168 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.153262 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.153553 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.153633 139772884148224 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 14:14:43.153748 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:43.153786 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:43.153818 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:43.153880 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.156113 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:43.161921 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.162193 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:43.164817 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:43.177038 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:43.177093 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:43.177128 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:43.177158 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.177220 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.177784 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.177862 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.178218 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.178890 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.181383 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.181999 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.182077 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:43.182111 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:43.182169 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.182296 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:43.182402 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:43.182439 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.184280 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.184372 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.186785 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.186865 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:43.186972 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:43.189549 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.191398 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.191492 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.191784 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.191864 139772884148224 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 14:14:43.191973 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:43.192011 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:43.192041 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:43.192103 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.194340 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:43.199824 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.200085 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:43.202717 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:43.215043 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:43.215098 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:43.215133 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:43.215163 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.215226 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.215784 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.215861 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.216220 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.216901 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.219411 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.220026 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.220103 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:43.220138 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:43.220195 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.220324 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:43.220432 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:43.220469 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.222309 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.222402 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.224793 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.224872 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:43.224980 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:43.227222 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.229064 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.229159 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.229452 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.229533 139772884148224 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 14:14:43.229649 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:43.229688 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:43.229718 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:43.229779 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.232027 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:43.237490 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.237756 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:43.240374 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:43.252699 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:43.252754 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:43.252790 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:43.252820 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.252883 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.253438 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.253514 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.253879 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.254557 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.257059 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.257684 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.257764 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:43.257799 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:43.257856 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.257989 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:43.258098 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:43.258136 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.260178 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.260271 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.262993 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.263072 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:43.263179 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:43.265394 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.267250 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.267344 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.267635 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.267715 139772884148224 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 14:14:43.267822 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:43.267860 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:43.267892 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:43.267954 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.270194 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:43.275625 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.275883 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:43.278490 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:43.291160 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:43.291215 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:43.291249 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:43.291279 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.291341 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.291893 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.291969 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.292331 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.293015 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.295488 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.296103 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.296180 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:43.296214 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:43.296271 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.296398 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:43.296504 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:43.296541 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.298451 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.298544 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.300937 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.301016 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:43.301123 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:43.303322 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.305171 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.305265 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.305555 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.305636 139772884148224 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 14:14:43.305754 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:43.305792 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:43.305823 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:43.305885 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.308178 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:43.313575 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.313839 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:43.316436 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:43.328754 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:43.328815 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:43.328850 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:43.328882 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.328944 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.329501 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.329577 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.329940 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.330617 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.333116 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.333740 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.333819 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:43.333854 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:43.333912 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.334041 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:43.334150 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:43.334188 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.336024 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.336117 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.338524 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.338604 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:43.338711 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:43.340940 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.342799 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.342893 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.343186 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.343274 139772884148224 decoder_stack.py:344] dstack: Final layernorm.
I0123 14:14:43.346135 139772884148224 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 14:14:43.396840 139772884148224 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.396923 139772884148224 decoder_stack.py:333] dstack: autoregressive generator.
I0123 14:14:43.396977 139772884148224 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 14:14:43.397078 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:43.397117 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:43.397147 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:43.397210 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.399568 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:43.404953 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.405210 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:43.407802 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:43.420257 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:43.420313 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:43.420347 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:43.420378 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.420441 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.420996 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.421071 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.421429 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.422112 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.424638 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.425247 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.425325 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:43.425360 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:43.425418 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.425549 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:43.425663 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:43.425703 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.427563 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.427656 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.430081 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.430161 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:43.430269 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:43.432501 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.434365 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.434462 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.434754 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.434834 139772884148224 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 14:14:43.434939 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:43.434977 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:43.435008 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:43.435069 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.437315 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:43.442727 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.442994 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:43.445677 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:43.458315 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:43.458369 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:43.458404 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:43.458435 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.458496 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.459105 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.459181 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.459539 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.460222 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.462668 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.463285 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.463364 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:43.463399 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:43.463458 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.463587 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:43.463694 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:43.463731 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.465731 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.465825 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.468277 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.468357 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:43.468466 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:43.470642 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.472506 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.472601 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.472895 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.472976 139772884148224 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 14:14:43.473084 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:43.473123 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:43.473154 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:43.473215 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.475462 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:43.480908 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.481175 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:43.483766 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:43.496024 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:43.496079 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:43.496114 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:43.496145 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.496207 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.496759 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.496834 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.497186 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.497870 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.500326 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.501002 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.501080 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:43.501115 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:43.501175 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.501305 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:43.501415 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:43.501451 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.503291 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.503386 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.505802 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.505883 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:43.505992 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:43.508176 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.510101 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.510196 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.510492 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.510574 139772884148224 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 14:14:43.510681 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:43.510719 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:43.510750 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:43.510811 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.513080 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:43.518469 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.518731 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:43.521341 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:43.533815 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:43.533868 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:43.533902 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:43.533933 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.533997 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.534553 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.534629 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.534986 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.535666 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.538211 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.538832 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.538910 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:43.538944 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:43.539003 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.539134 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:43.539241 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:43.539279 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.541106 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.541199 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.543598 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.543678 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:43.543787 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:43.546021 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.547848 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.547942 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.548235 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.548316 139772884148224 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 14:14:43.548424 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:43.548461 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:43.548491 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:43.548553 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.550791 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:43.556167 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.556429 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:43.559487 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:43.571617 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:43.571672 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:43.571707 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:43.571736 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.571798 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.572400 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.572476 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.572835 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.573513 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.575954 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.576564 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.576641 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:43.576676 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:43.576734 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.576863 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:43.576970 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:43.577007 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.578853 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.578946 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.581321 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.581401 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:43.581509 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:43.583719 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.585552 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.585654 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.585946 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.586027 139772884148224 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 14:14:43.586134 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:43.586171 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:43.586202 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:43.586264 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.588488 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:43.593828 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.594086 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:43.596721 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:43.608938 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:43.608993 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:43.609027 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:43.609057 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.609119 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.609678 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.609756 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.610112 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.610787 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.613336 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.613955 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.614032 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:43.614066 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:43.614125 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.614253 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:43.614361 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:43.614398 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.616209 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.616303 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.618679 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.618758 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:43.618865 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:43.621074 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.622898 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.622992 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.623279 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.623357 139772884148224 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 14:14:43.623462 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:43.623500 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:43.623531 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:43.623593 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.625814 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:43.631301 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.631564 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:43.634409 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:43.646662 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:43.646723 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:43.646760 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:43.646790 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.646852 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.647404 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.647481 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.647840 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.648520 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.651039 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.651652 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.651729 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:43.651763 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:43.651822 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.651952 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:43.652059 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:43.652096 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.653927 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.654020 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.656406 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.656485 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:43.656594 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:43.658855 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.660691 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.660784 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.661074 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.661156 139772884148224 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 14:14:43.661262 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:43.661300 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:43.661330 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:43.661392 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.663603 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:43.668957 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.669218 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:43.672245 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:43.684459 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:43.684514 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:43.684554 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:43.684587 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.684649 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.685208 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.685285 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.685657 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.686350 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.688871 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.689497 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.689573 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:43.689607 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:43.689672 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.689802 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:43.689910 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:43.689948 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.691792 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.691882 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.694268 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.694346 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:43.694454 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:43.696700 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.698527 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.698620 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.698910 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.698989 139772884148224 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 14:14:43.699094 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:43.699132 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:43.699161 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:43.699223 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.701439 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:43.706759 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.707014 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:43.709676 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:43.721993 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:43.722048 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:43.722083 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:43.722119 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.722181 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.722733 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.722811 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.723166 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.723843 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.726371 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.726984 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.727059 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:43.727092 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:43.727149 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.727276 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:43.727382 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:43.727419 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.729259 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.729349 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.731739 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.731816 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:43.731923 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:43.734511 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.736353 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.736445 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.736733 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.736811 139772884148224 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 14:14:43.736917 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:43.736955 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:43.736985 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:43.737047 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.739264 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:43.744655 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.744909 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:43.747561 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:43.759771 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:43.759826 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:43.759860 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:43.759891 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.759955 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.760519 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.760593 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.760949 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.761627 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.764157 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.764766 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.764842 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:43.764877 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:43.764934 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.765065 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:43.765174 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:43.765211 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.767042 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.767133 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.769507 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.769584 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:43.769696 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:43.771946 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.773776 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.773870 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.774164 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.774245 139772884148224 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 14:14:43.774352 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:43.774390 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:43.774421 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:43.774483 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.776700 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:43.782024 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.782283 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:43.785269 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:43.797415 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:43.797470 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:43.797505 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:43.797535 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.797602 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.798167 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.798243 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.798597 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.799273 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.801784 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.802398 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.802474 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:43.802508 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:43.802565 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.802694 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:43.802800 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:43.802837 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.804666 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.804756 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.807154 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.807233 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:43.807341 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:43.809571 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.811411 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.811504 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.811796 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.811875 139772884148224 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 14:14:43.811981 139772884148224 transformer_layer.py:154] tlayer: recurrent = False
I0123 14:14:43.812028 139772884148224 transformer_layer.py:155] tlayer: compute_importance = False
I0123 14:14:43.812062 139772884148224 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 14:14:43.812124 139772884148224 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.814353 139772884148224 transformer_base.py:161] kvq: pre_attn dropout.
I0123 14:14:43.819694 139772884148224 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.819952 139772884148224 transformer_base.py:194] kvq: normalize keys, queries.
I0123 14:14:43.822584 139772884148224 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 14:14:43.834774 139772884148224 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 14:14:43.834829 139772884148224 attention.py:418] Single window, no scan.
I0123 14:14:43.834863 139772884148224 transformer_layer.py:389] tlayer: self-attention.
I0123 14:14:43.834894 139772884148224 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.834955 139772884148224 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.835516 139772884148224 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.835591 139772884148224 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.835949 139772884148224 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.836629 139772884148224 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.839128 139772884148224 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.839737 139772884148224 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.839813 139772884148224 transformer_layer.py:468] tlayer: End windows.
I0123 14:14:43.839846 139772884148224 transformer_layer.py:472] tlayer: final FFN.
I0123 14:14:43.839903 139772884148224 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.840031 139772884148224 transformer_base.py:410] tbase: post-attention MLP.
I0123 14:14:43.840138 139772884148224 nn_components.py:325] mlp: activation = None
I0123 14:14:43.840176 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.842147 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.842237 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.844597 139772884148224 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.844674 139772884148224 transformer_base.py:443] tbase: final FFN
I0123 14:14:43.844782 139772884148224 nn_components.py:320] mlp: hidden 4096, relu
I0123 14:14:43.846999 139772884148224 nn_components.py:329] mlp: final activation = None
I0123 14:14:43.848819 139772884148224 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.848910 139772884148224 nn_components.py:261] mlp: residual
I0123 14:14:43.849199 139772884148224 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:43.849282 139772884148224 decoder_stack.py:344] dstack: Final layernorm.
I0123 14:14:43.852096 139772884148224 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 14:14:54.567708 139772884148224 alphageometry.py:566] LM output (score=-0.251658): "h : T b d b h 08 ;"
I0123 14:14:54.567970 139772884148224 alphageometry.py:567] Translation: "h = on_tline h b b d"

I0123 14:14:54.568028 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d ? simtri a g d f a d"
I0123 14:14:54.568150 139772884148224 graph.py:498] 
I0123 14:14:54.568201 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d ? simtri a g d f a d
I0123 14:14:54.962719 139772884148224 ddar.py:60] Depth 1/1000 time = 0.3873422145843506
I0123 14:14:55.394329 139772884148224 ddar.py:60] Depth 2/1000 time = 0.4313817024230957
I0123 14:14:55.968629 139772884148224 ddar.py:60] Depth 3/1000 time = 0.5740616321563721
I0123 14:14:56.920294 139772884148224 ddar.py:60] Depth 4/1000 time = 0.9514248371124268
I0123 14:14:57.872791 139772884148224 ddar.py:60] Depth 5/1000 time = 0.952239990234375
I0123 14:14:58.817034 139772884148224 ddar.py:60] Depth 6/1000 time = 0.9437556266784668
I0123 14:14:58.822711 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:14:58.822818 139772884148224 alphageometry.py:566] LM output (score=-1.376657): "h : ^ d b d h d h d c 08 ;"
I0123 14:14:58.822858 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ d b d h d h d c"

I0123 14:14:58.822891 139772884148224 alphageometry.py:566] LM output (score=-2.142906): "h : T b g b h 08 ;"
I0123 14:14:58.822919 139772884148224 alphageometry.py:567] Translation: "h = on_tline h b b g"

I0123 14:14:58.822950 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g ? simtri a g d f a d"
I0123 14:14:58.823062 139772884148224 graph.py:498] 
I0123 14:14:58.823108 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g ? simtri a g d f a d
I0123 14:14:59.194477 139772884148224 ddar.py:60] Depth 1/1000 time = 0.36522912979125977
I0123 14:14:59.434684 139772884148224 ddar.py:60] Depth 2/1000 time = 0.23999762535095215
I0123 14:14:59.896007 139772884148224 ddar.py:60] Depth 3/1000 time = 0.4611220359802246
I0123 14:15:00.795996 139772884148224 ddar.py:60] Depth 4/1000 time = 0.899749755859375
I0123 14:15:01.768571 139772884148224 ddar.py:60] Depth 5/1000 time = 0.9723415374755859
I0123 14:15:02.927438 139772884148224 ddar.py:60] Depth 6/1000 time = 1.1584153175354004
I0123 14:15:02.934098 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:15:02.934183 139772884148224 alphageometry.py:566] LM output (score=-2.269355): "h : D b h c h 08 ;"
I0123 14:15:02.934222 139772884148224 alphageometry.py:567] Translation: "h = on_bline h c b"

I0123 14:15:02.934259 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b ? simtri a g d f a d"
I0123 14:15:02.934372 139772884148224 graph.py:498] 
I0123 14:15:02.934418 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b ? simtri a g d f a d
I0123 14:15:03.141187 139772884148224 ddar.py:60] Depth 1/1000 time = 0.1967310905456543
I0123 14:15:04.015692 139772884148224 ddar.py:60] Depth 2/1000 time = 0.8743307590484619
I0123 14:15:05.474316 139772884148224 ddar.py:60] Depth 3/1000 time = 1.4583585262298584
I0123 14:15:07.308963 139772884148224 ddar.py:60] Depth 4/1000 time = 1.8343579769134521
I0123 14:15:08.997224 139772884148224 ddar.py:60] Depth 5/1000 time = 1.6879749298095703
I0123 14:15:10.833847 139772884148224 ddar.py:60] Depth 6/1000 time = 1.8360872268676758
I0123 14:15:10.840707 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:15:10.840784 139772884148224 alphageometry.py:566] LM output (score=-2.434714): "h : ^ b a b c b c b h 08 ;"
I0123 14:15:10.840821 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b a b c b c b h"

I0123 14:15:10.840853 139772884148224 alphageometry.py:566] LM output (score=-2.527812): "h : ^ b a b c b h c d 08 ^ b a b h c b c d 09 ;"
I0123 14:15:10.840881 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b a b c b h c d"

I0123 14:15:10.840908 139772884148224 alphageometry.py:566] LM output (score=-2.590286): "h : ^ b c b d b e b h 08 ;"
I0123 14:15:10.840933 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b c b d b e b h"

I0123 14:15:10.840960 139772884148224 alphageometry.py:566] LM output (score=-2.620047): "h : ^ b c b d b h d e 08 ^ b c b h d b d e 09 ;"
I0123 14:15:10.840985 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b c b d b h d e"

I0123 14:15:10.841011 139772884148224 alphageometry.py:566] LM output (score=-2.697910): "h : ^ d b d e d e d h 08 ;"
I0123 14:15:10.841046 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ d b d e d e d h"

I0123 14:15:10.841073 139772884148224 alphageometry.py:566] LM output (score=-2.744728): "h : D b g b h 08 D e g e h 09 ;"
I0123 14:15:10.841099 139772884148224 alphageometry.py:567] Translation: "h = on_circle h b g, on_circle h e g"

I0123 14:15:10.841127 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g ? simtri a g d f a d"
I0123 14:15:10.841237 139772884148224 graph.py:498] 
I0123 14:15:10.841282 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g ? simtri a g d f a d
I0123 14:15:11.252595 139772884148224 ddar.py:60] Depth 1/1000 time = 0.39623260498046875
I0123 14:15:12.104849 139772884148224 ddar.py:60] Depth 2/1000 time = 0.8520166873931885
I0123 14:15:13.176843 139772884148224 ddar.py:60] Depth 3/1000 time = 1.07175874710083
I0123 14:15:15.585709 139772884148224 ddar.py:60] Depth 4/1000 time = 2.4085965156555176
I0123 14:15:18.008925 139772884148224 ddar.py:60] Depth 5/1000 time = 2.422945261001587
I0123 14:15:20.633563 139772884148224 ddar.py:60] Depth 6/1000 time = 2.624314546585083
I0123 14:15:23.112449 139772884148224 ddar.py:60] Depth 7/1000 time = 2.478252649307251
I0123 14:15:23.126186 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:15:23.126287 139772884148224 alphageometry.py:566] LM output (score=-2.785135): "h : C b c h 08 D b h c h 09 ;"
I0123 14:15:23.126326 139772884148224 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 14:15:23.126361 139772884148224 alphageometry.py:566] LM output (score=-2.807576): "h : C a b h 08 D a h b h 09 ;"
I0123 14:15:23.126390 139772884148224 alphageometry.py:567] Translation: "h = on_line h a b, on_bline h b a"

I0123 14:15:23.126423 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a ? simtri a g d f a d"
I0123 14:15:23.126546 139772884148224 graph.py:498] 
I0123 14:15:23.126599 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a ? simtri a g d f a d
I0123 14:15:23.607009 139772884148224 ddar.py:60] Depth 1/1000 time = 0.470731258392334
I0123 14:15:24.209923 139772884148224 ddar.py:60] Depth 2/1000 time = 0.6026694774627686
I0123 14:15:25.269906 139772884148224 ddar.py:60] Depth 3/1000 time = 1.0597352981567383
I0123 14:15:27.118648 139772884148224 ddar.py:60] Depth 4/1000 time = 1.8484745025634766
I0123 14:15:29.150755 139772884148224 ddar.py:60] Depth 5/1000 time = 2.031836748123169
I0123 14:15:30.993220 139772884148224 ddar.py:60] Depth 6/1000 time = 1.8421897888183594
I0123 14:15:33.044504 139772884148224 ddar.py:60] Depth 7/1000 time = 2.0507099628448486
I0123 14:15:33.058183 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:15:33.058269 139772884148224 alphageometry.py:566] LM output (score=-2.879727): "h : T b f b h 08 ;"
I0123 14:15:33.058307 139772884148224 alphageometry.py:567] Translation: "h = on_tline h b b f"

I0123 14:15:33.058344 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f ? simtri a g d f a d"
I0123 14:15:33.058469 139772884148224 graph.py:498] 
I0123 14:15:33.058516 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f ? simtri a g d f a d
I0123 14:15:33.249963 139772884148224 ddar.py:60] Depth 1/1000 time = 0.1848926544189453
I0123 14:15:33.689499 139772884148224 ddar.py:60] Depth 2/1000 time = 0.43936681747436523
I0123 14:15:33.986408 139772884148224 ddar.py:60] Depth 3/1000 time = 0.2966725826263428
I0123 14:15:34.857735 139772884148224 ddar.py:60] Depth 4/1000 time = 0.8710975646972656
I0123 14:15:36.010614 139772884148224 ddar.py:60] Depth 5/1000 time = 1.152620553970337
I0123 14:15:37.019246 139772884148224 ddar.py:60] Depth 6/1000 time = 1.0081708431243896
I0123 14:15:37.025783 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:15:37.025870 139772884148224 alphageometry.py:566] LM output (score=-2.888529): "h : C a c h 08 D a h c h 09 ;"
I0123 14:15:37.025908 139772884148224 alphageometry.py:567] Translation: "h = on_line h a c, on_bline h c a"

I0123 14:15:37.025946 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a ? simtri a g d f a d"
I0123 14:15:37.026061 139772884148224 graph.py:498] 
I0123 14:15:37.026110 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a ? simtri a g d f a d
I0123 14:15:37.522732 139772884148224 ddar.py:60] Depth 1/1000 time = 0.4876441955566406
I0123 14:15:38.159458 139772884148224 ddar.py:60] Depth 2/1000 time = 0.636476993560791
I0123 14:15:39.267922 139772884148224 ddar.py:60] Depth 3/1000 time = 1.1081995964050293
I0123 14:15:41.174977 139772884148224 ddar.py:60] Depth 4/1000 time = 1.9067952632904053
I0123 14:15:43.054677 139772884148224 ddar.py:60] Depth 5/1000 time = 1.8794357776641846
I0123 14:15:45.128406 139772884148224 ddar.py:60] Depth 6/1000 time = 2.07318377494812
I0123 14:15:45.144586 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:15:45.144680 139772884148224 alphageometry.py:566] LM output (score=-2.896659): "h : C b f h 08 D b h f h 09 ;"
I0123 14:15:45.144720 139772884148224 alphageometry.py:567] Translation: "h = on_line h b f, on_bline h f b"

I0123 14:15:45.144757 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h b f, on_bline h f b ? simtri a g d f a d"
I0123 14:15:45.144869 139772884148224 graph.py:498] 
I0123 14:15:45.144914 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h b f, on_bline h f b ? simtri a g d f a d
I0123 14:15:45.378029 139772884148224 ddar.py:60] Depth 1/1000 time = 0.22398591041564941
I0123 14:15:45.880873 139772884148224 ddar.py:60] Depth 2/1000 time = 0.5026822090148926
I0123 14:15:46.474737 139772884148224 ddar.py:60] Depth 3/1000 time = 0.5936334133148193
I0123 14:15:47.808921 139772884148224 ddar.py:60] Depth 4/1000 time = 1.3339424133300781
I0123 14:15:49.032168 139772884148224 ddar.py:60] Depth 5/1000 time = 1.222989797592163
I0123 14:15:50.453585 139772884148224 ddar.py:60] Depth 6/1000 time = 1.42093825340271
I0123 14:15:50.461624 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:15:50.461707 139772884148224 alphageometry.py:566] LM output (score=-2.905328): "h : T b c c h 08 ;"
I0123 14:15:50.461744 139772884148224 alphageometry.py:567] Translation: "h = on_tline h c b c"

I0123 14:15:50.461781 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c ? simtri a g d f a d"
I0123 14:15:50.461907 139772884148224 graph.py:498] 
I0123 14:15:50.461955 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c ? simtri a g d f a d
I0123 14:15:50.679294 139772884148224 ddar.py:60] Depth 1/1000 time = 0.21102046966552734
I0123 14:15:51.109473 139772884148224 ddar.py:60] Depth 2/1000 time = 0.43000197410583496
I0123 14:15:51.584281 139772884148224 ddar.py:60] Depth 3/1000 time = 0.47458362579345703
I0123 14:15:52.563897 139772884148224 ddar.py:60] Depth 4/1000 time = 0.9793784618377686
I0123 14:15:53.569189 139772884148224 ddar.py:60] Depth 5/1000 time = 1.0050222873687744
I0123 14:15:54.583811 139772884148224 ddar.py:60] Depth 6/1000 time = 1.014087200164795
I0123 14:15:54.589662 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:15:54.589762 139772884148224 alphageometry.py:566] LM output (score=-2.927649): "h : ^ b c b h b h b d 08 ^ d b d h d h d c 09 ;"
I0123 14:15:54.589805 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b c b h b h b d"

I0123 14:15:54.589843 139772884148224 alphageometry.py:566] LM output (score=-2.953942): "h : ^ b a b c a h c d 08 ;"
I0123 14:15:54.589872 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b a b c a h c d"

I0123 14:15:54.589900 139772884148224 alphageometry.py:566] LM output (score=-2.960483): "h : T b c b h 08 ;"
I0123 14:15:54.589927 139772884148224 alphageometry.py:567] Translation: "h = on_tline h b b c"

I0123 14:15:54.589957 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b c ? simtri a g d f a d"
I0123 14:15:54.590080 139772884148224 graph.py:498] 
I0123 14:15:54.590132 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b c ? simtri a g d f a d
I0123 14:15:54.804147 139772884148224 ddar.py:60] Depth 1/1000 time = 0.20740652084350586
I0123 14:15:55.227993 139772884148224 ddar.py:60] Depth 2/1000 time = 0.4236874580383301
I0123 14:15:55.720118 139772884148224 ddar.py:60] Depth 3/1000 time = 0.49190258979797363
I0123 14:15:56.645306 139772884148224 ddar.py:60] Depth 4/1000 time = 0.9249632358551025
I0123 14:15:57.650052 139772884148224 ddar.py:60] Depth 5/1000 time = 1.0045104026794434
I0123 14:15:58.654708 139772884148224 ddar.py:60] Depth 6/1000 time = 1.004164695739746
I0123 14:15:58.660397 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:15:58.660481 139772884148224 alphageometry.py:566] LM output (score=-2.962756): "h : D b c b h 08 D b c c h 09 ;"
I0123 14:15:58.660521 139772884148224 alphageometry.py:567] Translation: "h = on_circle h b c, on_circle h c b"

I0123 14:15:58.660559 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b c, on_circle h c b ? simtri a g d f a d"
I0123 14:15:58.660675 139772884148224 graph.py:498] 
I0123 14:15:58.660721 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b c, on_circle h c b ? simtri a g d f a d
I0123 14:15:58.900284 139772884148224 ddar.py:60] Depth 1/1000 time = 0.22810626029968262
I0123 14:15:59.886811 139772884148224 ddar.py:60] Depth 2/1000 time = 0.9863502979278564
I0123 14:16:01.299873 139772884148224 ddar.py:60] Depth 3/1000 time = 1.4127864837646484
I0123 14:16:03.277783 139772884148224 ddar.py:60] Depth 4/1000 time = 1.977628469467163
I0123 14:16:05.312565 139772884148224 ddar.py:60] Depth 5/1000 time = 2.0344996452331543
I0123 14:16:07.123040 139772884148224 ddar.py:60] Depth 6/1000 time = 1.8096981048583984
I0123 14:16:09.146110 139772884148224 ddar.py:60] Depth 7/1000 time = 2.0225374698638916
I0123 14:16:09.153219 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:16:09.153308 139772884148224 alphageometry.py:566] LM output (score=-2.962991): "h : C c g h 08 D c h g h 09 ;"
I0123 14:16:09.153348 139772884148224 alphageometry.py:567] Translation: "h = on_line h c g, on_bline h g c"

I0123 14:16:09.153387 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h c g, on_bline h g c ? simtri a g d f a d"
I0123 14:16:09.153502 139772884148224 graph.py:498] 
I0123 14:16:09.153550 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h c g, on_bline h g c ? simtri a g d f a d
I0123 14:16:09.616516 139772884148224 ddar.py:60] Depth 1/1000 time = 0.4538130760192871
I0123 14:16:09.921602 139772884148224 ddar.py:60] Depth 2/1000 time = 0.30484819412231445
I0123 14:16:10.531813 139772884148224 ddar.py:60] Depth 3/1000 time = 0.6099975109100342
I0123 14:16:11.858732 139772884148224 ddar.py:60] Depth 4/1000 time = 1.3266539573669434
I0123 14:16:13.100471 139772884148224 ddar.py:60] Depth 5/1000 time = 1.2414557933807373
I0123 14:16:14.586257 139772884148224 ddar.py:60] Depth 6/1000 time = 1.4853487014770508
I0123 14:16:14.594307 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:16:14.594401 139772884148224 alphageometry.py:566] LM output (score=-2.969697): "h : ^ b c b h b d b c 08 ;"
I0123 14:16:14.594440 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b c b h b d b c"

I0123 14:16:14.594475 139772884148224 alphageometry.py:566] LM output (score=-3.025048): "h : T c d c h 08 ;"
I0123 14:16:14.594504 139772884148224 alphageometry.py:567] Translation: "h = on_tline h c c d"

I0123 14:16:14.594534 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c c d ? simtri a g d f a d"
I0123 14:16:14.594657 139772884148224 graph.py:498] 
I0123 14:16:14.594710 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c c d ? simtri a g d f a d
I0123 14:16:14.777554 139772884148224 ddar.py:60] Depth 1/1000 time = 0.1767420768737793
I0123 14:16:15.251792 139772884148224 ddar.py:60] Depth 2/1000 time = 0.4740629196166992
I0123 14:16:15.646995 139772884148224 ddar.py:60] Depth 3/1000 time = 0.3949759006500244
I0123 14:16:16.855465 139772884148224 ddar.py:60] Depth 4/1000 time = 1.208251714706421
I0123 14:16:17.620544 139772884148224 ddar.py:60] Depth 5/1000 time = 0.7648253440856934
I0123 14:16:18.822552 139772884148224 ddar.py:60] Depth 6/1000 time = 1.2015659809112549
I0123 14:16:18.828014 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:16:18.828097 139772884148224 alphageometry.py:566] LM output (score=-3.041307): "h : ^ b d b h b h b e 08 ^ d b d h d h d e 09 ;"
I0123 14:16:18.828136 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b d b h b h b e"

I0123 14:16:18.828171 139772884148224 alphageometry.py:566] LM output (score=-3.113534): "h : ^ b c b d b g b h 08 ;"
I0123 14:16:18.828200 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b c b d b g b h"

I0123 14:16:18.828228 139772884148224 alphageometry.py:566] LM output (score=-3.206143): "h : ^ b a b c a h b d 08 ^ a b a h b c b d 09 ;"
I0123 14:16:18.828254 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b a b c a h b d"

I0123 14:16:18.828282 139772884148224 alphageometry.py:566] LM output (score=-3.231830): "h : P b g c h 08 P b h c g 09 ;"
I0123 14:16:18.828323 139772884148224 alphageometry.py:567] Translation: "h = on_pline h c b g, on_pline h b c g"

I0123 14:16:18.828355 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_pline h c b g, on_pline h b c g ? simtri a g d f a d"
I0123 14:16:18.828468 139772884148224 graph.py:498] 
I0123 14:16:18.828513 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_pline h c b g, on_pline h b c g ? simtri a g d f a d
I0123 14:16:19.079204 139772884148224 ddar.py:60] Depth 1/1000 time = 0.24056601524353027
I0123 14:16:19.599566 139772884148224 ddar.py:60] Depth 2/1000 time = 0.5201947689056396
I0123 14:16:19.964701 139772884148224 ddar.py:60] Depth 3/1000 time = 0.36492156982421875
I0123 14:16:22.225598 139772884148224 ddar.py:60] Depth 4/1000 time = 2.2606725692749023
I0123 14:16:24.671620 139772884148224 ddar.py:60] Depth 5/1000 time = 2.445762872695923
I0123 14:16:27.352888 139772884148224 ddar.py:60] Depth 6/1000 time = 2.6809887886047363
I0123 14:16:29.831334 139772884148224 ddar.py:60] Depth 7/1000 time = 2.478005886077881
I0123 14:16:29.842415 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:16:29.842504 139772884148224 alphageometry.py:566] LM output (score=-3.238739): "h : ^ b d b h b h b e 08 ;"
I0123 14:16:29.842544 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b d b h b h b e"

I0123 14:16:29.842580 139772884148224 alphageometry.py:566] LM output (score=-3.241500): "h : D b e b h 08 D d e d h 09 ;"
I0123 14:16:29.842608 139772884148224 alphageometry.py:567] Translation: "h = on_circle h b e, on_circle h d e"

I0123 14:16:29.842639 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b e, on_circle h d e ? simtri a g d f a d"
I0123 14:16:29.842754 139772884148224 graph.py:498] 
I0123 14:16:29.842803 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b e, on_circle h d e ? simtri a g d f a d
I0123 14:16:30.076482 139772884148224 ddar.py:60] Depth 1/1000 time = 0.2200927734375
I0123 14:16:30.402407 139772884148224 ddar.py:60] Depth 2/1000 time = 0.32572245597839355
I0123 14:16:31.124152 139772884148224 ddar.py:60] Depth 3/1000 time = 0.7214438915252686
I0123 14:16:32.359645 139772884148224 ddar.py:60] Depth 4/1000 time = 1.2352278232574463
I0123 14:16:33.664993 139772884148224 ddar.py:60] Depth 5/1000 time = 1.3050472736358643
I0123 14:16:34.943069 139772884148224 ddar.py:60] Depth 6/1000 time = 1.2774937152862549
I0123 14:16:34.953876 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:16:34.953968 139772884148224 alphageometry.py:566] LM output (score=-3.291768): "h : ^ b a b c b g b h 08 ;"
I0123 14:16:34.954007 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b a b c b g b h"

I0123 14:16:34.954042 139772884148224 alphageometry.py:566] LM output (score=-3.343244): "h : ^ b a b c a h c d 08 ^ a b a h c b c d 09 ;"
I0123 14:16:34.954071 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b a b c a h c d"

I0123 14:16:34.954101 139772884148224 alphageometry.py:566] LM output (score=-3.356454): "h : ^ b a b e b e b h 08 ;"
I0123 14:16:34.954127 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b a b e b e b h"

I0123 14:16:34.954162 139772884148224 alphageometry.py:540] Depth 1. There are 15 nodes to expand:
I0123 14:16:34.954192 139772884148224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b c e 02 T b c d e 03 ; f : C a c f 04 C d e f 05 ; g : C a b g 06 C d f g 07 ? S a g d f a d {F1} x00 h : T b d b h 08 ; x00
I0123 14:16:34.954234 139772884148224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b c e 02 T b c d e 03 ; f : C a c f 04 C d e f 05 ; g : C a b g 06 C d f g 07 ? S a g d f a d {F1} x00 h : T b g b h 08 ; x00
I0123 14:16:34.954263 139772884148224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b c e 02 T b c d e 03 ; f : C a c f 04 C d e f 05 ; g : C a b g 06 C d f g 07 ? S a g d f a d {F1} x00 h : D b h c h 08 ; x00
I0123 14:16:34.954290 139772884148224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b c e 02 T b c d e 03 ; f : C a c f 04 C d e f 05 ; g : C a b g 06 C d f g 07 ? S a g d f a d {F1} x00 h : D b g b h 08 D e g e h 09 ; x00
I0123 14:16:34.954316 139772884148224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b c e 02 T b c d e 03 ; f : C a c f 04 C d e f 05 ; g : C a b g 06 C d f g 07 ? S a g d f a d {F1} x00 h : C a b h 08 D a h b h 09 ; x00
I0123 14:16:34.954342 139772884148224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b c e 02 T b c d e 03 ; f : C a c f 04 C d e f 05 ; g : C a b g 06 C d f g 07 ? S a g d f a d {F1} x00 h : T b f b h 08 ; x00
I0123 14:16:34.954367 139772884148224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b c e 02 T b c d e 03 ; f : C a c f 04 C d e f 05 ; g : C a b g 06 C d f g 07 ? S a g d f a d {F1} x00 h : C a c h 08 D a h c h 09 ; x00
I0123 14:16:34.954391 139772884148224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b c e 02 T b c d e 03 ; f : C a c f 04 C d e f 05 ; g : C a b g 06 C d f g 07 ? S a g d f a d {F1} x00 h : C b f h 08 D b h f h 09 ; x00
I0123 14:16:34.954416 139772884148224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b c e 02 T b c d e 03 ; f : C a c f 04 C d e f 05 ; g : C a b g 06 C d f g 07 ? S a g d f a d {F1} x00 h : T b c c h 08 ; x00
I0123 14:16:34.954441 139772884148224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b c e 02 T b c d e 03 ; f : C a c f 04 C d e f 05 ; g : C a b g 06 C d f g 07 ? S a g d f a d {F1} x00 h : T b c b h 08 ; x00
I0123 14:16:34.954464 139772884148224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b c e 02 T b c d e 03 ; f : C a c f 04 C d e f 05 ; g : C a b g 06 C d f g 07 ? S a g d f a d {F1} x00 h : D b c b h 08 D b c c h 09 ; x00
I0123 14:16:34.954488 139772884148224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b c e 02 T b c d e 03 ; f : C a c f 04 C d e f 05 ; g : C a b g 06 C d f g 07 ? S a g d f a d {F1} x00 h : C c g h 08 D c h g h 09 ; x00
I0123 14:16:34.954512 139772884148224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b c e 02 T b c d e 03 ; f : C a c f 04 C d e f 05 ; g : C a b g 06 C d f g 07 ? S a g d f a d {F1} x00 h : T c d c h 08 ; x00
I0123 14:16:34.954536 139772884148224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b c e 02 T b c d e 03 ; f : C a c f 04 C d e f 05 ; g : C a b g 06 C d f g 07 ? S a g d f a d {F1} x00 h : P b g c h 08 P b h c g 09 ; x00
I0123 14:16:34.954560 139772884148224 alphageometry.py:544] {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b c e 02 T b c d e 03 ; f : C a c f 04 C d e f 05 ; g : C a b g 06 C d f g 07 ? S a g d f a d {F1} x00 h : D b e b h 08 D d e d h 09 ; x00
I0123 14:16:34.954588 139772884148224 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b c e 02 T b c d e 03 ; f : C a c f 04 C d e f 05 ; g : C a b g 06 C d f g 07 ? S a g d f a d {F1} x00 h : T b d b h 08 ; x00
I0123 14:16:39.091996 139772884148224 alphageometry.py:566] LM output (score=-0.068476): "i : P b h d i 09 ;"
I0123 14:16:39.092147 139772884148224 alphageometry.py:567] Translation: "i = on_pline i d b h"

I0123 14:16:39.092208 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i d b h ? simtri a g d f a d"
I0123 14:16:39.092329 139772884148224 graph.py:498] 
I0123 14:16:39.092384 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i d b h ? simtri a g d f a d
I0123 14:16:39.546525 139772884148224 ddar.py:60] Depth 1/1000 time = 0.44460129737854004
I0123 14:16:39.852190 139772884148224 ddar.py:60] Depth 2/1000 time = 0.3054358959197998
I0123 14:16:40.522274 139772884148224 ddar.py:60] Depth 3/1000 time = 0.6698648929595947
I0123 14:16:41.572386 139772884148224 ddar.py:60] Depth 4/1000 time = 1.049865484237671
I0123 14:16:42.628844 139772884148224 ddar.py:60] Depth 5/1000 time = 1.0561912059783936
I0123 14:16:43.678630 139772884148224 ddar.py:60] Depth 6/1000 time = 1.0492854118347168
I0123 14:16:43.684417 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:16:43.684470 139772884148224 alphageometry.py:566] LM output (score=-2.352204): "i : P b d h i 09 P b h d i 10 ;"
I0123 14:16:43.684505 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b d, on_pline i d b h"

I0123 14:16:43.684542 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i h b d, on_pline i d b h ? simtri a g d f a d"
I0123 14:16:43.684664 139772884148224 graph.py:498] 
I0123 14:16:43.684711 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i h b d, on_pline i d b h ? simtri a g d f a d
I0123 14:16:44.172664 139772884148224 ddar.py:60] Depth 1/1000 time = 0.4747040271759033
I0123 14:16:44.905615 139772884148224 ddar.py:60] Depth 2/1000 time = 0.7327017784118652
I0123 14:16:45.860911 139772884148224 ddar.py:60] Depth 3/1000 time = 0.9550411701202393
I0123 14:16:47.254419 139772884148224 ddar.py:60] Depth 4/1000 time = 1.3932595252990723
I0123 14:16:48.640807 139772884148224 ddar.py:60] Depth 5/1000 time = 1.3861315250396729
I0123 14:16:50.256354 139772884148224 ddar.py:60] Depth 6/1000 time = 1.614966630935669
I0123 14:16:50.264906 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:16:50.264970 139772884148224 alphageometry.py:566] LM output (score=-2.490564): "i : P b d h i 09 ;"
I0123 14:16:50.265006 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b d"

I0123 14:16:50.265040 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i h b d ? simtri a g d f a d"
I0123 14:16:50.265158 139772884148224 graph.py:498] 
I0123 14:16:50.265203 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i h b d ? simtri a g d f a d
I0123 14:16:50.479306 139772884148224 ddar.py:60] Depth 1/1000 time = 0.2050797939300537
I0123 14:16:51.017151 139772884148224 ddar.py:60] Depth 2/1000 time = 0.5376691818237305
I0123 14:16:51.710872 139772884148224 ddar.py:60] Depth 3/1000 time = 0.6934773921966553
I0123 14:16:52.794506 139772884148224 ddar.py:60] Depth 4/1000 time = 1.0833919048309326
I0123 14:16:53.636883 139772884148224 ddar.py:60] Depth 5/1000 time = 0.8421308994293213
I0123 14:16:54.942363 139772884148224 ddar.py:60] Depth 6/1000 time = 1.3050105571746826
I0123 14:16:54.948067 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:16:54.948143 139772884148224 alphageometry.py:566] LM output (score=-2.873665): "i : P a b c i 09 ;"
I0123 14:16:54.948180 139772884148224 alphageometry.py:567] Translation: "i = on_pline i c a b"

I0123 14:16:54.948218 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i c a b ? simtri a g d f a d"
I0123 14:16:54.948337 139772884148224 graph.py:498] 
I0123 14:16:54.948382 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i c a b ? simtri a g d f a d
I0123 14:16:55.179076 139772884148224 ddar.py:60] Depth 1/1000 time = 0.2215557098388672
I0123 14:16:55.702534 139772884148224 ddar.py:60] Depth 2/1000 time = 0.52327561378479
I0123 14:16:56.162894 139772884148224 ddar.py:60] Depth 3/1000 time = 0.4601149559020996
I0123 14:16:57.471577 139772884148224 ddar.py:60] Depth 4/1000 time = 1.3084402084350586
I0123 14:16:58.326075 139772884148224 ddar.py:60] Depth 5/1000 time = 0.8542296886444092
I0123 14:16:59.648129 139772884148224 ddar.py:60] Depth 6/1000 time = 1.3215913772583008
I0123 14:16:59.654057 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:16:59.654119 139772884148224 alphageometry.py:566] LM output (score=-3.091699): "i : P b e b i 09 ;"
I0123 14:16:59.654157 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b e b i"

I0123 14:16:59.654191 139772884148224 alphageometry.py:566] LM output (score=-3.162604): "i : D b i h i 09 D c i h i 10 ;"
I0123 14:16:59.654219 139772884148224 alphageometry.py:567] Translation: "i = on_bline i h b, on_bline i h c"

I0123 14:16:59.654249 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_bline i h b, on_bline i h c ? simtri a g d f a d"
I0123 14:16:59.654369 139772884148224 graph.py:498] 
I0123 14:16:59.654415 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_bline i h b, on_bline i h c ? simtri a g d f a d
I0123 14:16:59.983110 139772884148224 ddar.py:60] Depth 1/1000 time = 0.31348443031311035
I0123 14:17:01.248506 139772884148224 ddar.py:60] Depth 2/1000 time = 1.2652065753936768
I0123 14:17:03.214505 139772884148224 ddar.py:60] Depth 3/1000 time = 1.9657206535339355
I0123 14:17:05.561986 139772884148224 ddar.py:60] Depth 4/1000 time = 2.3472068309783936
I0123 14:17:07.920377 139772884148224 ddar.py:60] Depth 5/1000 time = 2.3581039905548096
I0123 14:17:10.016037 139772884148224 ddar.py:60] Depth 6/1000 time = 2.0951428413391113
I0123 14:17:10.027258 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:17:10.027320 139772884148224 alphageometry.py:566] LM output (score=-3.180697): "i : P c e h i 09 ;"
I0123 14:17:10.027355 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h c e"

I0123 14:17:10.027390 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i h c e ? simtri a g d f a d"
I0123 14:17:10.027504 139772884148224 graph.py:498] 
I0123 14:17:10.027549 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i h c e ? simtri a g d f a d
I0123 14:17:10.264802 139772884148224 ddar.py:60] Depth 1/1000 time = 0.22827959060668945
I0123 14:17:10.812583 139772884148224 ddar.py:60] Depth 2/1000 time = 0.547609806060791
I0123 14:17:11.513905 139772884148224 ddar.py:60] Depth 3/1000 time = 0.7010819911956787
I0123 14:17:12.609789 139772884148224 ddar.py:60] Depth 4/1000 time = 1.0956194400787354
I0123 14:17:13.702350 139772884148224 ddar.py:60] Depth 5/1000 time = 1.0923030376434326
I0123 14:17:14.794860 139772884148224 ddar.py:60] Depth 6/1000 time = 1.0920135974884033
I0123 14:17:14.800923 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:17:14.800982 139772884148224 alphageometry.py:566] LM output (score=-3.250034): "i : P b g h i 09 ;"
I0123 14:17:14.801018 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b g"

I0123 14:17:14.801054 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i h b g ? simtri a g d f a d"
I0123 14:17:14.801172 139772884148224 graph.py:498] 
I0123 14:17:14.801218 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i h b g ? simtri a g d f a d
I0123 14:17:15.028262 139772884148224 ddar.py:60] Depth 1/1000 time = 0.21666455268859863
I0123 14:17:15.555315 139772884148224 ddar.py:60] Depth 2/1000 time = 0.5268819332122803
I0123 14:17:16.259666 139772884148224 ddar.py:60] Depth 3/1000 time = 0.7041068077087402
I0123 14:17:17.106499 139772884148224 ddar.py:60] Depth 4/1000 time = 0.8465836048126221
I0123 14:17:18.439189 139772884148224 ddar.py:60] Depth 5/1000 time = 1.332423448562622
I0123 14:17:19.533332 139772884148224 ddar.py:60] Depth 6/1000 time = 1.0936799049377441
I0123 14:17:19.539162 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:17:19.539220 139772884148224 alphageometry.py:566] LM output (score=-3.277441): "i : P b e e i 09 ;"
I0123 14:17:19.539256 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b e e i"

I0123 14:17:19.539289 139772884148224 alphageometry.py:566] LM output (score=-3.282989): "i : P b e d i 09 ;"
I0123 14:17:19.539316 139772884148224 alphageometry.py:567] Translation: "i = on_pline i d b e"

I0123 14:17:19.539345 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i d b e ? simtri a g d f a d"
I0123 14:17:19.539462 139772884148224 graph.py:498] 
I0123 14:17:19.539508 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i d b e ? simtri a g d f a d
I0123 14:17:19.790048 139772884148224 ddar.py:60] Depth 1/1000 time = 0.24139046669006348
I0123 14:17:20.363640 139772884148224 ddar.py:60] Depth 2/1000 time = 0.573418378829956
I0123 14:17:20.831032 139772884148224 ddar.py:60] Depth 3/1000 time = 0.46715641021728516
I0123 14:17:22.187808 139772884148224 ddar.py:60] Depth 4/1000 time = 1.3565292358398438
I0123 14:17:23.308034 139772884148224 ddar.py:60] Depth 5/1000 time = 1.1199367046356201
I0123 14:17:24.156837 139772884148224 ddar.py:60] Depth 6/1000 time = 0.8482680320739746
I0123 14:17:24.162747 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:17:24.162812 139772884148224 alphageometry.py:566] LM output (score=-3.363122): "i : P c e d i 09 ;"
I0123 14:17:24.162848 139772884148224 alphageometry.py:567] Translation: "i = on_pline i d c e"

I0123 14:17:24.162892 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i d c e ? simtri a g d f a d"
I0123 14:17:24.163032 139772884148224 graph.py:498] 
I0123 14:17:24.163085 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i d c e ? simtri a g d f a d
I0123 14:17:24.653866 139772884148224 ddar.py:60] Depth 1/1000 time = 0.4814627170562744
I0123 14:17:25.226023 139772884148224 ddar.py:60] Depth 2/1000 time = 0.5719208717346191
I0123 14:17:25.957342 139772884148224 ddar.py:60] Depth 3/1000 time = 0.7310833930969238
I0123 14:17:27.077135 139772884148224 ddar.py:60] Depth 4/1000 time = 1.1195356845855713
I0123 14:17:27.934620 139772884148224 ddar.py:60] Depth 5/1000 time = 0.8572158813476562
I0123 14:17:29.294788 139772884148224 ddar.py:60] Depth 6/1000 time = 1.3596770763397217
I0123 14:17:29.300828 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:17:29.300879 139772884148224 alphageometry.py:566] LM output (score=-3.537145): "i : P b c b i 09 ;"
I0123 14:17:29.300914 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b c b i"

I0123 14:17:29.300949 139772884148224 alphageometry.py:566] LM output (score=-3.564365): "i : P b c e i 09 ;"
I0123 14:17:29.300977 139772884148224 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2570, in add_clause
    raise DepCheckFailError(
graph.DepCheckFailError: ncoll e b c
"

I0123 14:17:29.301007 139772884148224 alphageometry.py:566] LM output (score=-3.595459): "i : P c e f i 09 ;"
I0123 14:17:29.301034 139772884148224 alphageometry.py:567] Translation: "i = on_pline i f c e"

I0123 14:17:29.301064 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i f c e ? simtri a g d f a d"
I0123 14:17:29.301185 139772884148224 graph.py:498] 
I0123 14:17:29.301231 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i f c e ? simtri a g d f a d
I0123 14:17:29.549357 139772884148224 ddar.py:60] Depth 1/1000 time = 0.23785138130187988
I0123 14:17:30.127052 139772884148224 ddar.py:60] Depth 2/1000 time = 0.5775163173675537
I0123 14:17:30.599600 139772884148224 ddar.py:60] Depth 3/1000 time = 0.4723060131072998
I0123 14:17:31.954977 139772884148224 ddar.py:60] Depth 4/1000 time = 1.3551394939422607
I0123 14:17:32.817328 139772884148224 ddar.py:60] Depth 5/1000 time = 0.8620843887329102
I0123 14:17:33.911843 139772884148224 ddar.py:60] Depth 6/1000 time = 1.0940189361572266
I0123 14:17:33.917548 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:17:33.917605 139772884148224 alphageometry.py:566] LM output (score=-3.746427): "i : P b c h i 09 ;"
I0123 14:17:33.917647 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b c"

I0123 14:17:33.917686 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i h b c ? simtri a g d f a d"
I0123 14:17:33.917807 139772884148224 graph.py:498] 
I0123 14:17:33.917851 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i h b c ? simtri a g d f a d
I0123 14:17:34.404958 139772884148224 ddar.py:60] Depth 1/1000 time = 0.4777557849884033
I0123 14:17:34.975206 139772884148224 ddar.py:60] Depth 2/1000 time = 0.5700056552886963
I0123 14:17:35.433418 139772884148224 ddar.py:60] Depth 3/1000 time = 0.45796990394592285
I0123 14:17:36.780045 139772884148224 ddar.py:60] Depth 4/1000 time = 1.3463854789733887
I0123 14:17:37.622067 139772884148224 ddar.py:60] Depth 5/1000 time = 0.8417704105377197
I0123 14:17:38.969366 139772884148224 ddar.py:60] Depth 6/1000 time = 1.346825361251831
I0123 14:17:38.975450 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:17:38.975510 139772884148224 alphageometry.py:566] LM output (score=-3.783727): "i : P b c f i 09 ;"
I0123 14:17:38.975543 139772884148224 alphageometry.py:567] Translation: "i = on_pline i f b c"

I0123 14:17:38.975577 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i f b c ? simtri a g d f a d"
I0123 14:17:38.975693 139772884148224 graph.py:498] 
I0123 14:17:38.975737 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i f b c ? simtri a g d f a d
I0123 14:17:39.222546 139772884148224 ddar.py:60] Depth 1/1000 time = 0.23684191703796387
I0123 14:17:39.804180 139772884148224 ddar.py:60] Depth 2/1000 time = 0.581458330154419
I0123 14:17:40.273884 139772884148224 ddar.py:60] Depth 3/1000 time = 0.4694700241088867
I0123 14:17:41.371236 139772884148224 ddar.py:60] Depth 4/1000 time = 1.09710693359375
I0123 14:17:42.747985 139772884148224 ddar.py:60] Depth 5/1000 time = 1.3764894008636475
I0123 14:17:43.606964 139772884148224 ddar.py:60] Depth 6/1000 time = 0.8585004806518555
I0123 14:17:43.613108 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:17:43.613169 139772884148224 alphageometry.py:566] LM output (score=-3.796651): "i : P b e h i 09 ;"
I0123 14:17:43.613204 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b e"

I0123 14:17:43.613241 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i h b e ? simtri a g d f a d"
I0123 14:17:43.613359 139772884148224 graph.py:498] 
I0123 14:17:43.613405 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i h b e ? simtri a g d f a d
I0123 14:17:44.103013 139772884148224 ddar.py:60] Depth 1/1000 time = 0.4805276393890381
I0123 14:17:44.675452 139772884148224 ddar.py:60] Depth 2/1000 time = 0.5722086429595947
I0123 14:17:45.132798 139772884148224 ddar.py:60] Depth 3/1000 time = 0.4571065902709961
I0123 14:17:46.234263 139772884148224 ddar.py:60] Depth 4/1000 time = 1.1012368202209473
I0123 14:17:47.333578 139772884148224 ddar.py:60] Depth 5/1000 time = 1.0990607738494873
I0123 14:17:48.444362 139772884148224 ddar.py:60] Depth 6/1000 time = 1.1102745532989502
I0123 14:17:48.450377 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:17:48.450451 139772884148224 alphageometry.py:566] LM output (score=-3.822958): "i : P b h e i 09 ;"
I0123 14:17:48.450488 139772884148224 alphageometry.py:567] Translation: "i = on_pline i e b h"

I0123 14:17:48.450532 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i e b h ? simtri a g d f a d"
I0123 14:17:48.450657 139772884148224 graph.py:498] 
I0123 14:17:48.450707 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i e b h ? simtri a g d f a d
I0123 14:17:48.948376 139772884148224 ddar.py:60] Depth 1/1000 time = 0.48856687545776367
I0123 14:17:49.555452 139772884148224 ddar.py:60] Depth 2/1000 time = 0.6068234443664551
I0123 14:17:50.004021 139772884148224 ddar.py:60] Depth 3/1000 time = 0.44828057289123535
I0123 14:17:51.090771 139772884148224 ddar.py:60] Depth 4/1000 time = 1.0865223407745361
I0123 14:17:52.198364 139772884148224 ddar.py:60] Depth 5/1000 time = 1.1073148250579834
I0123 14:17:53.286916 139772884148224 ddar.py:60] Depth 6/1000 time = 1.0880284309387207
I0123 14:17:53.292472 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:17:53.292525 139772884148224 alphageometry.py:566] LM output (score=-3.836989): "i : P b c f i 09 P b i c f 10 ;"
I0123 14:17:53.292560 139772884148224 alphageometry.py:567] Translation: "i = on_pline i f b c, on_pline i b c f"

I0123 14:17:53.292596 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i f b c, on_pline i b c f ? simtri a g d f a d"
I0123 14:17:53.292726 139772884148224 graph.py:498] 
I0123 14:17:53.292773 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i f b c, on_pline i b c f ? simtri a g d f a d
I0123 14:17:53.864753 139772884148224 ddar.py:60] Depth 1/1000 time = 0.5581226348876953
I0123 14:17:54.320306 139772884148224 ddar.py:60] Depth 2/1000 time = 0.45531773567199707
I0123 14:17:55.200582 139772884148224 ddar.py:60] Depth 3/1000 time = 0.8800523281097412
I0123 14:17:56.813107 139772884148224 ddar.py:60] Depth 4/1000 time = 1.6122851371765137
I0123 14:17:58.159878 139772884148224 ddar.py:60] Depth 5/1000 time = 1.3465003967285156
I0123 14:17:59.511065 139772884148224 ddar.py:60] Depth 6/1000 time = 1.3506357669830322
I0123 14:17:59.518562 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:17:59.518613 139772884148224 alphageometry.py:566] LM output (score=-3.846286): "i : P b c d i 09 ;"
I0123 14:17:59.518647 139772884148224 alphageometry.py:567] Translation: "i = on_pline i d b c"

I0123 14:17:59.518683 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i d b c ? simtri a g d f a d"
I0123 14:17:59.518800 139772884148224 graph.py:498] 
I0123 14:17:59.518845 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i d b c ? simtri a g d f a d
I0123 14:17:59.767280 139772884148224 ddar.py:60] Depth 1/1000 time = 0.2391190528869629
I0123 14:18:00.366784 139772884148224 ddar.py:60] Depth 2/1000 time = 0.599334716796875
I0123 14:18:00.837815 139772884148224 ddar.py:60] Depth 3/1000 time = 0.4707908630371094
I0123 14:18:01.950123 139772884148224 ddar.py:60] Depth 4/1000 time = 1.1120786666870117
I0123 14:18:03.351448 139772884148224 ddar.py:60] Depth 5/1000 time = 1.4010655879974365
I0123 14:18:04.208088 139772884148224 ddar.py:60] Depth 6/1000 time = 0.8561372756958008
I0123 14:18:04.214000 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:18:04.214063 139772884148224 alphageometry.py:566] LM output (score=-3.883991): "i : P b h c i 09 ;"
I0123 14:18:04.214097 139772884148224 alphageometry.py:567] Translation: "i = on_pline i c b h"

I0123 14:18:04.214133 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i c b h ? simtri a g d f a d"
I0123 14:18:04.214250 139772884148224 graph.py:498] 
I0123 14:18:04.214307 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i c b h ? simtri a g d f a d
I0123 14:18:04.688884 139772884148224 ddar.py:60] Depth 1/1000 time = 0.4656546115875244
I0123 14:18:04.992338 139772884148224 ddar.py:60] Depth 2/1000 time = 0.3032259941101074
I0123 14:18:05.697343 139772884148224 ddar.py:60] Depth 3/1000 time = 0.7047793865203857
I0123 14:18:06.793262 139772884148224 ddar.py:60] Depth 4/1000 time = 1.0956430435180664
I0123 14:18:07.901988 139772884148224 ddar.py:60] Depth 5/1000 time = 1.1084401607513428
I0123 14:18:09.009308 139772884148224 ddar.py:60] Depth 6/1000 time = 1.1067533493041992
I0123 14:18:09.014826 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:18:09.014909 139772884148224 alphageometry.py:566] LM output (score=-3.942954): "i : P b e g i 09 ;"
I0123 14:18:09.014949 139772884148224 alphageometry.py:567] Translation: "i = on_pline i g b e"

I0123 14:18:09.015002 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i g b e ? simtri a g d f a d"
I0123 14:18:09.015143 139772884148224 graph.py:498] 
I0123 14:18:09.015194 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i g b e ? simtri a g d f a d
I0123 14:18:09.265947 139772884148224 ddar.py:60] Depth 1/1000 time = 0.24117183685302734
I0123 14:18:09.892959 139772884148224 ddar.py:60] Depth 2/1000 time = 0.6268377304077148
I0123 14:18:10.654589 139772884148224 ddar.py:60] Depth 3/1000 time = 0.7613754272460938
I0123 14:18:11.770528 139772884148224 ddar.py:60] Depth 4/1000 time = 1.1156885623931885
I0123 14:18:12.913061 139772884148224 ddar.py:60] Depth 5/1000 time = 1.142266035079956
I0123 14:18:13.763166 139772884148224 ddar.py:60] Depth 6/1000 time = 0.8496148586273193
I0123 14:18:13.769059 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:18:13.769110 139772884148224 alphageometry.py:566] LM output (score=-3.957178): "i : P c e f i 09 P c i e f 10 ;"
I0123 14:18:13.769145 139772884148224 alphageometry.py:567] Translation: "i = on_pline i f c e, on_pline i c e f"

I0123 14:18:13.769182 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i f c e, on_pline i c e f ? simtri a g d f a d"
I0123 14:18:13.769307 139772884148224 graph.py:498] 
I0123 14:18:13.769354 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i f c e, on_pline i c e f ? simtri a g d f a d
I0123 14:18:14.361870 139772884148224 ddar.py:60] Depth 1/1000 time = 0.5793025493621826
I0123 14:18:15.128642 139772884148224 ddar.py:60] Depth 2/1000 time = 0.7665348052978516
I0123 14:18:16.185365 139772884148224 ddar.py:60] Depth 3/1000 time = 1.056490182876587
I0123 14:18:17.819245 139772884148224 ddar.py:60] Depth 4/1000 time = 1.6336338520050049
I0123 14:18:19.467617 139772884148224 ddar.py:60] Depth 5/1000 time = 1.648097276687622
I0123 14:18:21.102612 139772884148224 ddar.py:60] Depth 6/1000 time = 1.6344366073608398
I0123 14:18:21.112827 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:18:21.112887 139772884148224 alphageometry.py:566] LM output (score=-3.958866): "i : P a c h i 09 ;"
I0123 14:18:21.112922 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h a c"

I0123 14:18:21.112959 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i h a c ? simtri a g d f a d"
I0123 14:18:21.113077 139772884148224 graph.py:498] 
I0123 14:18:21.113123 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i h a c ? simtri a g d f a d
I0123 14:18:21.607142 139772884148224 ddar.py:60] Depth 1/1000 time = 0.48464202880859375
I0123 14:18:22.176188 139772884148224 ddar.py:60] Depth 2/1000 time = 0.5687978267669678
I0123 14:18:22.631586 139772884148224 ddar.py:60] Depth 3/1000 time = 0.4551503658294678
I0123 14:18:23.737087 139772884148224 ddar.py:60] Depth 4/1000 time = 1.1052517890930176
I0123 14:18:24.844851 139772884148224 ddar.py:60] Depth 5/1000 time = 1.107494831085205
I0123 14:18:25.965353 139772884148224 ddar.py:60] Depth 6/1000 time = 1.1200504302978516
I0123 14:18:25.971584 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:18:25.971650 139772884148224 alphageometry.py:566] LM output (score=-3.963300): "i : P c i d g 09 ;"
I0123 14:18:25.971684 139772884148224 alphageometry.py:567] Translation: "i = on_pline i c d g"

I0123 14:18:25.971721 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i c d g ? simtri a g d f a d"
I0123 14:18:25.971842 139772884148224 graph.py:498] 
I0123 14:18:25.971889 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i c d g ? simtri a g d f a d
I0123 14:18:26.501837 139772884148224 ddar.py:60] Depth 1/1000 time = 0.5210092067718506
I0123 14:18:26.804111 139772884148224 ddar.py:60] Depth 2/1000 time = 0.3020448684692383
I0123 14:18:27.561909 139772884148224 ddar.py:60] Depth 3/1000 time = 0.7575321197509766
I0123 14:18:28.746977 139772884148224 ddar.py:60] Depth 4/1000 time = 1.1847178936004639
I0123 14:18:29.932671 139772884148224 ddar.py:60] Depth 5/1000 time = 1.185420036315918
I0123 14:18:30.801710 139772884148224 ddar.py:60] Depth 6/1000 time = 0.868537425994873
I0123 14:18:30.807741 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:18:30.807794 139772884148224 alphageometry.py:566] LM output (score=-3.963930): "i : P b c c i 09 ;"
I0123 14:18:30.807828 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b c c i"

I0123 14:18:30.807862 139772884148224 alphageometry.py:566] LM output (score=-3.993372): "i : P c e f i 09 P c f e i 10 ;"
I0123 14:18:30.807889 139772884148224 alphageometry.py:567] Translation: "i = on_pline i f c e, on_pline i e c f"

I0123 14:18:30.807917 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i f c e, on_pline i e c f ? simtri a g d f a d"
I0123 14:18:30.808049 139772884148224 graph.py:498] 
I0123 14:18:30.808102 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i f c e, on_pline i e c f ? simtri a g d f a d
I0123 14:18:31.391394 139772884148224 ddar.py:60] Depth 1/1000 time = 0.5699265003204346
I0123 14:18:32.092449 139772884148224 ddar.py:60] Depth 2/1000 time = 0.7008163928985596
I0123 14:18:33.029431 139772884148224 ddar.py:60] Depth 3/1000 time = 0.9367456436157227
I0123 14:18:34.649868 139772884148224 ddar.py:60] Depth 4/1000 time = 1.6201786994934082
I0123 14:18:36.324307 139772884148224 ddar.py:60] Depth 5/1000 time = 1.6741886138916016
I0123 14:18:37.947031 139772884148224 ddar.py:60] Depth 6/1000 time = 1.622204303741455
I0123 14:18:37.956095 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:18:37.956149 139772884148224 alphageometry.py:566] LM output (score=-4.028097): "i : P c i d f 09 ;"
I0123 14:18:37.956184 139772884148224 alphageometry.py:567] Translation: "i = on_pline i c d f"

I0123 14:18:37.956220 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i c d f ? simtri a g d f a d"
I0123 14:18:37.956348 139772884148224 graph.py:498] 
I0123 14:18:37.956395 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i c d f ? simtri a g d f a d
I0123 14:18:38.487148 139772884148224 ddar.py:60] Depth 1/1000 time = 0.5206470489501953
I0123 14:18:38.787914 139772884148224 ddar.py:60] Depth 2/1000 time = 0.30054187774658203
I0123 14:18:39.544647 139772884148224 ddar.py:60] Depth 3/1000 time = 0.7565112113952637
I0123 14:18:40.710780 139772884148224 ddar.py:60] Depth 4/1000 time = 1.1658821105957031
I0123 14:18:41.883122 139772884148224 ddar.py:60] Depth 5/1000 time = 1.1720869541168213
I0123 14:18:42.752109 139772884148224 ddar.py:60] Depth 6/1000 time = 0.8684911727905273
I0123 14:18:42.758613 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:18:42.758673 139772884148224 alphageometry.py:566] LM output (score=-4.090970): "i : P b g c i 09 P b i c g 10 ;"
I0123 14:18:42.758709 139772884148224 alphageometry.py:567] Translation: "i = on_pline i c b g, on_pline i b c g"

I0123 14:18:42.758745 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i c b g, on_pline i b c g ? simtri a g d f a d"
I0123 14:18:42.758867 139772884148224 graph.py:498] 
I0123 14:18:42.758913 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i c b g, on_pline i b c g ? simtri a g d f a d
I0123 14:18:43.313193 139772884148224 ddar.py:60] Depth 1/1000 time = 0.5406317710876465
I0123 14:18:43.705046 139772884148224 ddar.py:60] Depth 2/1000 time = 0.3916206359863281
I0123 14:18:44.562141 139772884148224 ddar.py:60] Depth 3/1000 time = 0.8568747043609619
I0123 14:18:47.451135 139772884148224 ddar.py:60] Depth 4/1000 time = 2.888690710067749
I0123 14:18:49.979542 139772884148224 ddar.py:60] Depth 5/1000 time = 2.5280191898345947
I0123 14:18:52.767055 139772884148224 ddar.py:60] Depth 6/1000 time = 2.787240982055664
I0123 14:18:55.583319 139772884148224 ddar.py:60] Depth 7/1000 time = 2.815803289413452
I0123 14:18:55.593745 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:18:55.593806 139772884148224 alphageometry.py:566] LM output (score=-4.097458): "i : P b g c i 09 ;"
I0123 14:18:55.593842 139772884148224 alphageometry.py:567] Translation: "i = on_pline i c b g"

I0123 14:18:55.593877 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i c b g ? simtri a g d f a d"
I0123 14:18:55.594005 139772884148224 graph.py:498] 
I0123 14:18:55.594057 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i c b g ? simtri a g d f a d
I0123 14:18:55.827682 139772884148224 ddar.py:60] Depth 1/1000 time = 0.22396135330200195
I0123 14:18:56.118849 139772884148224 ddar.py:60] Depth 2/1000 time = 0.29100823402404785
I0123 14:18:56.872710 139772884148224 ddar.py:60] Depth 3/1000 time = 0.7534818649291992
I0123 14:18:58.014666 139772884148224 ddar.py:60] Depth 4/1000 time = 1.141706943511963
I0123 14:18:59.167561 139772884148224 ddar.py:60] Depth 5/1000 time = 1.1526389122009277
I0123 14:19:00.322718 139772884148224 ddar.py:60] Depth 6/1000 time = 1.1547064781188965
I0123 14:19:00.328753 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:19:00.328816 139772884148224 alphageometry.py:566] LM output (score=-4.132852): "i : P c e d i 09 P c i d e 10 ;"
I0123 14:19:00.328853 139772884148224 alphageometry.py:567] Translation: "i = on_pline i d c e, on_pline i c d e"

I0123 14:19:00.328904 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i d c e, on_pline i c d e ? simtri a g d f a d"
I0123 14:19:00.329032 139772884148224 graph.py:498] 
I0123 14:19:00.329085 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b d; i = on_pline i d c e, on_pline i c d e ? simtri a g d f a d
I0123 14:19:00.661814 139772884148224 ddar.py:60] Depth 1/1000 time = 0.3197174072265625
I0123 14:19:01.456697 139772884148224 ddar.py:60] Depth 2/1000 time = 0.7946834564208984
I0123 14:19:02.651470 139772884148224 ddar.py:60] Depth 3/1000 time = 1.194523572921753
I0123 14:19:04.319401 139772884148224 ddar.py:60] Depth 4/1000 time = 1.667668342590332
I0123 14:19:06.010059 139772884148224 ddar.py:60] Depth 5/1000 time = 1.690331220626831
I0123 14:19:07.702027 139772884148224 ddar.py:60] Depth 6/1000 time = 1.6912338733673096
I0123 14:19:07.711277 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:19:07.711339 139772884148224 alphageometry.py:566] LM output (score=-4.239390): "i : P b h b i 09 ;"
I0123 14:19:07.711374 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b h b i"

I0123 14:19:07.711415 139772884148224 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b c e 02 T b c d e 03 ; f : C a c f 04 C d e f 05 ; g : C a b g 06 C d f g 07 ? S a g d f a d {F1} x00 h : T b g b h 08 ; x00
I0123 14:19:14.425225 139772884148224 alphageometry.py:566] LM output (score=-0.447262): "i : P b h g i 09 ;"
I0123 14:19:14.425356 139772884148224 alphageometry.py:567] Translation: "i = on_pline i g b h"

I0123 14:19:14.425398 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_pline i g b h ? simtri a g d f a d"
I0123 14:19:14.425515 139772884148224 graph.py:498] 
I0123 14:19:14.425567 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_pline i g b h ? simtri a g d f a d
I0123 14:19:14.665783 139772884148224 ddar.py:60] Depth 1/1000 time = 0.2312178611755371
I0123 14:19:15.271163 139772884148224 ddar.py:60] Depth 2/1000 time = 0.6052014827728271
I0123 14:19:15.621199 139772884148224 ddar.py:60] Depth 3/1000 time = 0.34981226921081543
I0123 14:19:16.711697 139772884148224 ddar.py:60] Depth 4/1000 time = 1.0903146266937256
I0123 14:19:17.878720 139772884148224 ddar.py:60] Depth 5/1000 time = 1.166778802871704
I0123 14:19:19.031969 139772884148224 ddar.py:60] Depth 6/1000 time = 1.1527667045593262
I0123 14:19:19.039208 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:19:19.039260 139772884148224 alphageometry.py:566] LM output (score=-0.482641): "i : P b g h i 09 P b h g i 10 ;"
I0123 14:19:19.039294 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b g, on_pline i g b h"

I0123 14:19:19.039329 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_pline i h b g, on_pline i g b h ? simtri a g d f a d"
I0123 14:19:19.039452 139772884148224 graph.py:498] 
I0123 14:19:19.039499 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_pline i h b g, on_pline i g b h ? simtri a g d f a d
I0123 14:19:19.620874 139772884148224 ddar.py:60] Depth 1/1000 time = 0.5666265487670898
I0123 14:19:20.406039 139772884148224 ddar.py:60] Depth 2/1000 time = 0.784921407699585
I0123 14:19:20.971715 139772884148224 ddar.py:60] Depth 3/1000 time = 0.5654358863830566
I0123 14:19:22.456811 139772884148224 ddar.py:60] Depth 4/1000 time = 1.484870195388794
I0123 14:19:24.330240 139772884148224 ddar.py:60] Depth 5/1000 time = 1.8731739521026611
I0123 14:19:25.914535 139772884148224 ddar.py:60] Depth 6/1000 time = 1.5837352275848389
I0123 14:19:27.498142 139772884148224 ddar.py:60] Depth 7/1000 time = 1.5782530307769775
I0123 14:19:27.504321 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:19:27.504386 139772884148224 alphageometry.py:566] LM output (score=-1.168007): "i : P b g h i 09 ;"
I0123 14:19:27.504421 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b g"

I0123 14:19:27.504457 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_pline i h b g ? simtri a g d f a d"
I0123 14:19:27.504574 139772884148224 graph.py:498] 
I0123 14:19:27.504619 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_pline i h b g ? simtri a g d f a d
I0123 14:19:27.734399 139772884148224 ddar.py:60] Depth 1/1000 time = 0.2200014591217041
I0123 14:19:28.026413 139772884148224 ddar.py:60] Depth 2/1000 time = 0.29186224937438965
I0123 14:19:28.663324 139772884148224 ddar.py:60] Depth 3/1000 time = 0.6367428302764893
I0123 14:19:29.791042 139772884148224 ddar.py:60] Depth 4/1000 time = 1.1274783611297607
I0123 14:19:31.002115 139772884148224 ddar.py:60] Depth 5/1000 time = 1.21083402633667
I0123 14:19:31.878873 139772884148224 ddar.py:60] Depth 6/1000 time = 0.8762810230255127
I0123 14:19:31.886052 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:19:31.886114 139772884148224 alphageometry.py:566] LM output (score=-3.737772): "i : P b h b i 09 ;"
I0123 14:19:31.886150 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b h b i"

I0123 14:19:31.886187 139772884148224 alphageometry.py:566] LM output (score=-3.903557): "i : P b h b i 09 T b i c d 10 ;"
I0123 14:19:31.886216 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b h b i"

I0123 14:19:31.886245 139772884148224 alphageometry.py:566] LM output (score=-3.992566): "i : P a b c i 09 ;"
I0123 14:19:31.886272 139772884148224 alphageometry.py:567] Translation: "i = on_pline i c a b"

I0123 14:19:31.886302 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_pline i c a b ? simtri a g d f a d"
I0123 14:19:31.886422 139772884148224 graph.py:498] 
I0123 14:19:31.886470 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_pline i c a b ? simtri a g d f a d
I0123 14:19:32.410299 139772884148224 ddar.py:60] Depth 1/1000 time = 0.5148360729217529
I0123 14:19:32.702969 139772884148224 ddar.py:60] Depth 2/1000 time = 0.292461633682251
I0123 14:19:33.336979 139772884148224 ddar.py:60] Depth 3/1000 time = 0.6338224411010742
I0123 14:19:34.484595 139772884148224 ddar.py:60] Depth 4/1000 time = 1.1473770141601562
I0123 14:19:35.688345 139772884148224 ddar.py:60] Depth 5/1000 time = 1.203495979309082
I0123 14:19:36.898872 139772884148224 ddar.py:60] Depth 6/1000 time = 1.2100424766540527
I0123 14:19:36.906258 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:19:36.906311 139772884148224 alphageometry.py:566] LM output (score=-4.117823): "i : P b h b i 09 T b c b i 10 ;"
I0123 14:19:36.906347 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b h b i"

I0123 14:19:36.906396 139772884148224 alphageometry.py:566] LM output (score=-4.367952): "i : P b c e i 09 ;"
I0123 14:19:36.906429 139772884148224 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2570, in add_clause
    raise DepCheckFailError(
graph.DepCheckFailError: ncoll e b c
"

I0123 14:19:36.906461 139772884148224 alphageometry.py:566] LM output (score=-4.373580): "i : P b c b i 09 ;"
I0123 14:19:36.906489 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b c b i"

I0123 14:19:36.906518 139772884148224 alphageometry.py:566] LM output (score=-4.410108): "i : P b h b i 09 T b i c g 10 ;"
I0123 14:19:36.906545 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b h b i"

I0123 14:19:36.906573 139772884148224 alphageometry.py:566] LM output (score=-4.504025): "i : P b h b i 09 T b g b i 10 ;"
I0123 14:19:36.906600 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b h b i"

I0123 14:19:36.906627 139772884148224 alphageometry.py:566] LM output (score=-4.578670): "i : P b h b i 09 T b i c f 10 ;"
I0123 14:19:36.906654 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b h b i"

I0123 14:19:36.906681 139772884148224 alphageometry.py:566] LM output (score=-4.599144): "i : D b h h i 09 D g i h i 10 ;"
I0123 14:19:36.906707 139772884148224 alphageometry.py:567] Translation: "i = on_circle i h b, on_bline i h g"

I0123 14:19:36.906736 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_circle i h b, on_bline i h g ? simtri a g d f a d"
I0123 14:19:36.906857 139772884148224 graph.py:498] 
I0123 14:19:36.906903 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_circle i h b, on_bline i h g ? simtri a g d f a d
I0123 14:19:37.198581 139772884148224 ddar.py:60] Depth 1/1000 time = 0.27846765518188477
I0123 14:19:37.565504 139772884148224 ddar.py:60] Depth 2/1000 time = 0.3667731285095215
I0123 14:19:38.299016 139772884148224 ddar.py:60] Depth 3/1000 time = 0.7333381175994873
I0123 14:19:39.540977 139772884148224 ddar.py:60] Depth 4/1000 time = 1.2417242527008057
I0123 14:19:40.869767 139772884148224 ddar.py:60] Depth 5/1000 time = 1.3285408020019531
I0123 14:19:42.189652 139772884148224 ddar.py:60] Depth 6/1000 time = 1.3194265365600586
I0123 14:19:42.196959 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:19:42.197013 139772884148224 alphageometry.py:566] LM output (score=-4.604345): "i : T b d b i 09 ;"
I0123 14:19:42.197048 139772884148224 alphageometry.py:567] Translation: "i = on_tline i b b d"

I0123 14:19:42.197085 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_tline i b b d ? simtri a g d f a d"
I0123 14:19:42.197203 139772884148224 graph.py:498] 
I0123 14:19:42.197255 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_tline i b b d ? simtri a g d f a d
I0123 14:19:42.425435 139772884148224 ddar.py:60] Depth 1/1000 time = 0.2195415496826172
I0123 14:19:42.756551 139772884148224 ddar.py:60] Depth 2/1000 time = 0.33095860481262207
I0123 14:19:43.559794 139772884148224 ddar.py:60] Depth 3/1000 time = 0.8030591011047363
I0123 14:19:44.803493 139772884148224 ddar.py:60] Depth 4/1000 time = 1.2434501647949219
I0123 14:19:46.040124 139772884148224 ddar.py:60] Depth 5/1000 time = 1.2363777160644531
I0123 14:19:47.278034 139772884148224 ddar.py:60] Depth 6/1000 time = 1.2374367713928223
I0123 14:19:47.285703 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:19:47.285766 139772884148224 alphageometry.py:566] LM output (score=-4.613043): "i : P b c f i 09 P b i c f 10 ;"
I0123 14:19:47.285802 139772884148224 alphageometry.py:567] Translation: "i = on_pline i f b c, on_pline i b c f"

I0123 14:19:47.285839 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_pline i f b c, on_pline i b c f ? simtri a g d f a d"
I0123 14:19:47.285961 139772884148224 graph.py:498] 
I0123 14:19:47.286008 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_pline i f b c, on_pline i b c f ? simtri a g d f a d
I0123 14:19:47.602954 139772884148224 ddar.py:60] Depth 1/1000 time = 0.30353784561157227
I0123 14:19:48.324759 139772884148224 ddar.py:60] Depth 2/1000 time = 0.7216205596923828
I0123 14:19:48.782238 139772884148224 ddar.py:60] Depth 3/1000 time = 0.4572608470916748
I0123 14:19:50.156408 139772884148224 ddar.py:60] Depth 4/1000 time = 1.373962640762329
I0123 14:19:51.582511 139772884148224 ddar.py:60] Depth 5/1000 time = 1.4258637428283691
I0123 14:19:52.994758 139772884148224 ddar.py:60] Depth 6/1000 time = 1.411759853363037
I0123 14:19:53.003161 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:19:53.003216 139772884148224 alphageometry.py:566] LM output (score=-4.703317): "i : P b c b i 09 T b h b i 10 ;"
I0123 14:19:53.003250 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b c b i"

I0123 14:19:53.003285 139772884148224 alphageometry.py:566] LM output (score=-4.734389): "i : P b h g i 09 P b i g h 10 ;"
I0123 14:19:53.003313 139772884148224 alphageometry.py:567] Translation: "i = on_pline i g b h, on_pline i b g h"

I0123 14:19:53.003343 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_pline i g b h, on_pline i b g h ? simtri a g d f a d"
I0123 14:19:53.003465 139772884148224 graph.py:498] 
I0123 14:19:53.003512 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_pline i g b h, on_pline i b g h ? simtri a g d f a d
I0123 14:19:53.610419 139772884148224 ddar.py:60] Depth 1/1000 time = 0.593879222869873
I0123 14:19:53.997843 139772884148224 ddar.py:60] Depth 2/1000 time = 0.38721251487731934
I0123 14:19:54.764794 139772884148224 ddar.py:60] Depth 3/1000 time = 0.7667644023895264
I0123 14:19:56.018380 139772884148224 ddar.py:60] Depth 4/1000 time = 1.2533509731292725
I0123 14:19:57.371737 139772884148224 ddar.py:60] Depth 5/1000 time = 1.3530588150024414
I0123 14:19:58.367491 139772884148224 ddar.py:60] Depth 6/1000 time = 0.9951324462890625
I0123 14:19:58.376426 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:19:58.376505 139772884148224 alphageometry.py:566] LM output (score=-4.840868): "i : P b e g i 09 P b g e i 10 ;"
I0123 14:19:58.376541 139772884148224 alphageometry.py:567] Translation: "i = on_pline i g b e, on_pline i e b g"

I0123 14:19:58.376595 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_pline i g b e, on_pline i e b g ? simtri a g d f a d"
I0123 14:19:58.376753 139772884148224 graph.py:498] 
I0123 14:19:58.376806 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_pline i g b e, on_pline i e b g ? simtri a g d f a d
I0123 14:19:59.012084 139772884148224 ddar.py:60] Depth 1/1000 time = 0.6216413974761963
I0123 14:19:59.769505 139772884148224 ddar.py:60] Depth 2/1000 time = 0.7571709156036377
I0123 14:20:00.319076 139772884148224 ddar.py:60] Depth 3/1000 time = 0.5493326187133789
I0123 14:20:02.056881 139772884148224 ddar.py:60] Depth 4/1000 time = 1.7375857830047607
I0123 14:20:04.148003 139772884148224 ddar.py:60] Depth 5/1000 time = 2.09086275100708
I0123 14:20:05.928786 139772884148224 ddar.py:60] Depth 6/1000 time = 1.7802300453186035
I0123 14:20:05.939263 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:20:05.939329 139772884148224 alphageometry.py:566] LM output (score=-4.862056): "i : T b h h i 09 ;"
I0123 14:20:05.939367 139772884148224 alphageometry.py:567] Translation: "i = on_tline i h b h"

I0123 14:20:05.939406 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_tline i h b h ? simtri a g d f a d"
I0123 14:20:05.939531 139772884148224 graph.py:498] 
I0123 14:20:05.939580 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_tline i h b h ? simtri a g d f a d
I0123 14:20:06.169042 139772884148224 ddar.py:60] Depth 1/1000 time = 0.21964645385742188
I0123 14:20:06.786685 139772884148224 ddar.py:60] Depth 2/1000 time = 0.6174747943878174
I0123 14:20:07.129262 139772884148224 ddar.py:60] Depth 3/1000 time = 0.342365026473999
I0123 14:20:08.234352 139772884148224 ddar.py:60] Depth 4/1000 time = 1.1048970222473145
I0123 14:20:09.463441 139772884148224 ddar.py:60] Depth 5/1000 time = 1.2288470268249512
I0123 14:20:10.688669 139772884148224 ddar.py:60] Depth 6/1000 time = 1.2247304916381836
I0123 14:20:10.695434 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:20:10.695500 139772884148224 alphageometry.py:566] LM output (score=-4.879785): "i : P b e g i 09 ;"
I0123 14:20:10.695537 139772884148224 alphageometry.py:567] Translation: "i = on_pline i g b e"

I0123 14:20:10.695573 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_pline i g b e ? simtri a g d f a d"
I0123 14:20:10.695693 139772884148224 graph.py:498] 
I0123 14:20:10.695739 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_pline i g b e ? simtri a g d f a d
I0123 14:20:10.956610 139772884148224 ddar.py:60] Depth 1/1000 time = 0.25180768966674805
I0123 14:20:11.269480 139772884148224 ddar.py:60] Depth 2/1000 time = 0.3127145767211914
I0123 14:20:11.954643 139772884148224 ddar.py:60] Depth 3/1000 time = 0.6849832534790039
I0123 14:20:13.099655 139772884148224 ddar.py:60] Depth 4/1000 time = 1.1447646617889404
I0123 14:20:14.342379 139772884148224 ddar.py:60] Depth 5/1000 time = 1.2424676418304443
I0123 14:20:15.234851 139772884148224 ddar.py:60] Depth 6/1000 time = 0.8919773101806641
I0123 14:20:15.242341 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:20:15.242409 139772884148224 alphageometry.py:566] LM output (score=-4.889965): "i : P b h b i 09 T b d b i 10 ;"
I0123 14:20:15.242446 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b h b i"

I0123 14:20:15.242482 139772884148224 alphageometry.py:566] LM output (score=-4.898369): "i : P b c c i 09 ;"
I0123 14:20:15.242510 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b c c i"

I0123 14:20:15.242540 139772884148224 alphageometry.py:566] LM output (score=-4.901896): "i : P b h g i 09 T b i g h 10 ;"
I0123 14:20:15.242579 139772884148224 alphageometry.py:567] Translation: "i = on_pline i g b h, on_tline i b g h"

I0123 14:20:15.242613 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_pline i g b h, on_tline i b g h ? simtri a g d f a d"
I0123 14:20:15.242740 139772884148224 graph.py:498] 
I0123 14:20:15.242790 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_pline i g b h, on_tline i b g h ? simtri a g d f a d
I0123 14:20:15.842649 139772884148224 ddar.py:60] Depth 1/1000 time = 0.5867133140563965
I0123 14:20:16.207520 139772884148224 ddar.py:60] Depth 2/1000 time = 0.36464428901672363
I0123 14:20:16.983949 139772884148224 ddar.py:60] Depth 3/1000 time = 0.7761919498443604
I0123 14:20:18.267112 139772884148224 ddar.py:60] Depth 4/1000 time = 1.282893180847168
I0123 14:20:19.631915 139772884148224 ddar.py:60] Depth 5/1000 time = 1.3645274639129639
I0123 14:20:20.981163 139772884148224 ddar.py:60] Depth 6/1000 time = 1.3486981391906738
I0123 14:20:20.990952 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:20:20.991006 139772884148224 alphageometry.py:566] LM output (score=-4.924188): "i : P b h b i 09 T b c h i 10 ;"
I0123 14:20:20.991040 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b h b i"

I0123 14:20:20.991074 139772884148224 alphageometry.py:566] LM output (score=-5.076294): "i : P a b c i 09 T a b a i 10 ;"
I0123 14:20:20.991102 139772884148224 alphageometry.py:567] Translation: "i = on_pline i c a b, on_tline i a a b"

I0123 14:20:20.991133 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_pline i c a b, on_tline i a a b ? simtri a g d f a d"
I0123 14:20:20.991269 139772884148224 graph.py:498] 
I0123 14:20:20.991326 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_pline i c a b, on_tline i a a b ? simtri a g d f a d
I0123 14:20:21.268507 139772884148224 ddar.py:60] Depth 1/1000 time = 0.2638683319091797
I0123 14:20:21.979007 139772884148224 ddar.py:60] Depth 2/1000 time = 0.7103278636932373
I0123 14:20:22.388288 139772884148224 ddar.py:60] Depth 3/1000 time = 0.4090445041656494
I0123 14:20:23.609613 139772884148224 ddar.py:60] Depth 4/1000 time = 1.2211096286773682
I0123 14:20:24.976969 139772884148224 ddar.py:60] Depth 5/1000 time = 1.3670921325683594
I0123 14:20:26.335725 139772884148224 ddar.py:60] Depth 6/1000 time = 1.3581948280334473
I0123 14:20:26.344506 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:20:26.344569 139772884148224 alphageometry.py:566] LM output (score=-5.086503): "i : P b h b i 09 T b f b i 10 ;"
I0123 14:20:26.344607 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b h b i"

I0123 14:20:26.344643 139772884148224 alphageometry.py:566] LM output (score=-5.095294): "i : P a c h i 09 ;"
I0123 14:20:26.344671 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h a c"

I0123 14:20:26.344702 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_pline i h a c ? simtri a g d f a d"
I0123 14:20:26.344817 139772884148224 graph.py:498] 
I0123 14:20:26.344863 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_pline i h a c ? simtri a g d f a d
I0123 14:20:26.584141 139772884148224 ddar.py:60] Depth 1/1000 time = 0.230027437210083
I0123 14:20:27.184451 139772884148224 ddar.py:60] Depth 2/1000 time = 0.6001408100128174
I0123 14:20:27.497388 139772884148224 ddar.py:60] Depth 3/1000 time = 0.31272196769714355
I0123 14:20:28.655024 139772884148224 ddar.py:60] Depth 4/1000 time = 1.1574320793151855
I0123 14:20:29.893968 139772884148224 ddar.py:60] Depth 5/1000 time = 1.2386844158172607
I0123 14:20:30.765198 139772884148224 ddar.py:60] Depth 6/1000 time = 0.8707809448242188
I0123 14:20:30.772387 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:20:30.772448 139772884148224 alphageometry.py:566] LM output (score=-5.104170): "i : P a b a i 09 ;"
I0123 14:20:30.772485 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P a b a i"

I0123 14:20:30.772521 139772884148224 alphageometry.py:566] LM output (score=-5.108695): "i : T b h b i 09 ;"
I0123 14:20:30.772549 139772884148224 alphageometry.py:567] Translation: "i = on_tline i b b h"

I0123 14:20:30.772579 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_tline i b b h ? simtri a g d f a d"
I0123 14:20:30.772695 139772884148224 graph.py:498] 
I0123 14:20:30.772746 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_tline i b b h ? simtri a g d f a d
I0123 14:20:31.431492 139772884148224 ddar.py:60] Depth 1/1000 time = 0.6524794101715088
I0123 14:20:32.153945 139772884148224 ddar.py:60] Depth 2/1000 time = 0.722221851348877
I0123 14:20:32.941802 139772884148224 ddar.py:60] Depth 3/1000 time = 0.787625789642334
I0123 14:20:34.624638 139772884148224 ddar.py:60] Depth 4/1000 time = 1.6825919151306152
I0123 14:20:36.054646 139772884148224 ddar.py:60] Depth 5/1000 time = 1.429732084274292
I0123 14:20:37.839072 139772884148224 ddar.py:60] Depth 6/1000 time = 1.7838711738586426
I0123 14:20:37.845628 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:20:37.845695 139772884148224 alphageometry.py:566] LM output (score=-5.183527): "i : P b g h i 09 T b i g h 10 ;"
I0123 14:20:37.845730 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b g, on_tline i b g h"

I0123 14:20:37.845767 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_pline i h b g, on_tline i b g h ? simtri a g d f a d"
I0123 14:20:37.845902 139772884148224 graph.py:498] 
I0123 14:20:37.845958 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_pline i h b g, on_tline i b g h ? simtri a g d f a d
I0123 14:20:38.109588 139772884148224 ddar.py:60] Depth 1/1000 time = 0.25051331520080566
I0123 14:20:38.465179 139772884148224 ddar.py:60] Depth 2/1000 time = 0.35542750358581543
I0123 14:20:39.225826 139772884148224 ddar.py:60] Depth 3/1000 time = 0.7604670524597168
I0123 14:20:40.500403 139772884148224 ddar.py:60] Depth 4/1000 time = 1.2743332386016846
I0123 14:20:41.881655 139772884148224 ddar.py:60] Depth 5/1000 time = 1.3809945583343506
I0123 14:20:42.883097 139772884148224 ddar.py:60] Depth 6/1000 time = 1.0009350776672363
I0123 14:20:42.892114 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:20:42.892170 139772884148224 alphageometry.py:566] LM output (score=-5.203084): "i : P b c f i 09 ;"
I0123 14:20:42.892205 139772884148224 alphageometry.py:567] Translation: "i = on_pline i f b c"

I0123 14:20:42.892243 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_pline i f b c ? simtri a g d f a d"
I0123 14:20:42.892377 139772884148224 graph.py:498] 
I0123 14:20:42.892425 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_pline i f b c ? simtri a g d f a d
I0123 14:20:43.491200 139772884148224 ddar.py:60] Depth 1/1000 time = 0.5895547866821289
I0123 14:20:43.801854 139772884148224 ddar.py:60] Depth 2/1000 time = 0.3104429244995117
I0123 14:20:44.512470 139772884148224 ddar.py:60] Depth 3/1000 time = 0.7104380130767822
I0123 14:20:45.692733 139772884148224 ddar.py:60] Depth 4/1000 time = 1.1800336837768555
I0123 14:20:46.589497 139772884148224 ddar.py:60] Depth 5/1000 time = 0.8965284824371338
I0123 14:20:47.822716 139772884148224 ddar.py:60] Depth 6/1000 time = 1.2327485084533691
I0123 14:20:47.829501 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:20:47.829562 139772884148224 alphageometry.py:566] LM output (score=-5.220423): "i : P b c h i 09 P b h c i 10 ;"
I0123 14:20:47.829598 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b c, on_pline i c b h"

I0123 14:20:47.829636 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_pline i h b c, on_pline i c b h ? simtri a g d f a d"
I0123 14:20:47.829766 139772884148224 graph.py:498] 
I0123 14:20:47.829813 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b g; i = on_pline i h b c, on_pline i c b h ? simtri a g d f a d
I0123 14:20:48.469649 139772884148224 ddar.py:60] Depth 1/1000 time = 0.627345085144043
I0123 14:20:48.843959 139772884148224 ddar.py:60] Depth 2/1000 time = 0.3740870952606201
I0123 14:20:49.683729 139772884148224 ddar.py:60] Depth 3/1000 time = 0.8395719528198242
I0123 14:20:51.030528 139772884148224 ddar.py:60] Depth 4/1000 time = 1.3465650081634521
I0123 14:20:52.495590 139772884148224 ddar.py:60] Depth 5/1000 time = 1.464813232421875
I0123 14:20:53.961791 139772884148224 ddar.py:60] Depth 6/1000 time = 1.4656600952148438
I0123 14:20:53.971055 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:20:53.971117 139772884148224 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b c e 02 T b c d e 03 ; f : C a c f 04 C d e f 05 ; g : C a b g 06 C d f g 07 ? S a g d f a d {F1} x00 h : D b h c h 08 ; x00
I0123 14:20:58.701353 139772884148224 alphageometry.py:566] LM output (score=-0.428990): "i : T b d b i 09 ;"
I0123 14:20:58.701610 139772884148224 alphageometry.py:567] Translation: "i = on_tline i b b d"

I0123 14:20:58.701678 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_tline i b b d ? simtri a g d f a d"
I0123 14:20:58.701809 139772884148224 graph.py:498] 
I0123 14:20:58.701864 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_tline i b b d ? simtri a g d f a d
I0123 14:20:58.944298 139772884148224 ddar.py:60] Depth 1/1000 time = 0.23032116889953613
I0123 14:21:00.004578 139772884148224 ddar.py:60] Depth 2/1000 time = 1.0600926876068115
I0123 14:21:02.068581 139772884148224 ddar.py:60] Depth 3/1000 time = 2.063746690750122
I0123 14:21:04.200788 139772884148224 ddar.py:60] Depth 4/1000 time = 2.131941080093384
I0123 14:21:06.356019 139772884148224 ddar.py:60] Depth 5/1000 time = 2.15474009513855
I0123 14:21:06.363603 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:21:06.363667 139772884148224 alphageometry.py:566] LM output (score=-1.679222): "i : P b c h i 09 ;"
I0123 14:21:06.363713 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b c"

I0123 14:21:06.363751 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i h b c ? simtri a g d f a d"
I0123 14:21:06.363868 139772884148224 graph.py:498] 
I0123 14:21:06.363915 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i h b c ? simtri a g d f a d
I0123 14:21:06.629026 139772884148224 ddar.py:60] Depth 1/1000 time = 0.2528989315032959
I0123 14:21:07.639913 139772884148224 ddar.py:60] Depth 2/1000 time = 1.0107057094573975
I0123 14:21:09.395606 139772884148224 ddar.py:60] Depth 3/1000 time = 1.7554330825805664
I0123 14:21:11.582827 139772884148224 ddar.py:60] Depth 4/1000 time = 2.1869397163391113
I0123 14:21:13.780431 139772884148224 ddar.py:60] Depth 5/1000 time = 2.1973190307617188
I0123 14:21:15.928249 139772884148224 ddar.py:60] Depth 6/1000 time = 2.147261142730713
I0123 14:21:15.935421 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:21:15.935487 139772884148224 alphageometry.py:566] LM output (score=-1.711414): "i : P b c e i 09 ;"
I0123 14:21:15.935523 139772884148224 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2570, in add_clause
    raise DepCheckFailError(
graph.DepCheckFailError: ncoll e b c
"

I0123 14:21:15.935560 139772884148224 alphageometry.py:566] LM output (score=-1.713173): "i : P b c c i 09 ;"
I0123 14:21:15.935589 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b c c i"

I0123 14:21:15.935617 139772884148224 alphageometry.py:566] LM output (score=-1.947618): "i : T b g b i 09 ;"
I0123 14:21:15.935643 139772884148224 alphageometry.py:567] Translation: "i = on_tline i b b g"

I0123 14:21:15.935673 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_tline i b b g ? simtri a g d f a d"
I0123 14:21:15.935787 139772884148224 graph.py:498] 
I0123 14:21:15.935833 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_tline i b b g ? simtri a g d f a d
I0123 14:21:16.556647 139772884148224 ddar.py:60] Depth 1/1000 time = 0.6099331378936768
I0123 14:21:17.527692 139772884148224 ddar.py:60] Depth 2/1000 time = 0.9708166122436523
I0123 14:21:19.303331 139772884148224 ddar.py:60] Depth 3/1000 time = 1.775386095046997
I0123 14:21:21.059624 139772884148224 ddar.py:60] Depth 4/1000 time = 1.7560155391693115
I0123 14:21:23.231214 139772884148224 ddar.py:60] Depth 5/1000 time = 2.1713075637817383
I0123 14:21:25.388660 139772884148224 ddar.py:60] Depth 6/1000 time = 2.156940460205078
I0123 14:21:25.396582 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:21:25.396644 139772884148224 alphageometry.py:566] LM output (score=-2.106054): "i : C b f i 09 D b i f i 10 ;"
I0123 14:21:25.396680 139772884148224 alphageometry.py:567] Translation: "i = on_line i b f, on_bline i f b"

I0123 14:21:25.396718 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_line i b f, on_bline i f b ? simtri a g d f a d"
I0123 14:21:25.396837 139772884148224 graph.py:498] 
I0123 14:21:25.396883 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_line i b f, on_bline i f b ? simtri a g d f a d
I0123 14:21:25.686220 139772884148224 ddar.py:60] Depth 1/1000 time = 0.2738208770751953
I0123 14:21:27.174853 139772884148224 ddar.py:60] Depth 2/1000 time = 1.4884517192840576
I0123 14:21:29.233875 139772884148224 ddar.py:60] Depth 3/1000 time = 2.0587563514709473
I0123 14:21:32.200362 139772884148224 ddar.py:60] Depth 4/1000 time = 2.9661991596221924
I0123 14:21:35.213091 139772884148224 ddar.py:60] Depth 5/1000 time = 3.0123836994171143
I0123 14:21:37.833574 139772884148224 ddar.py:60] Depth 6/1000 time = 2.619807004928589
I0123 14:21:37.843894 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:21:37.843965 139772884148224 alphageometry.py:566] LM output (score=-2.184000): "i : P b g c i 09 P b i c g 10 ;"
I0123 14:21:37.844002 139772884148224 alphageometry.py:567] Translation: "i = on_pline i c b g, on_pline i b c g"

I0123 14:21:37.844043 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i c b g, on_pline i b c g ? simtri a g d f a d"
I0123 14:21:37.844179 139772884148224 graph.py:498] 
I0123 14:21:37.844238 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i c b g, on_pline i b c g ? simtri a g d f a d
I0123 14:21:38.522861 139772884148224 ddar.py:60] Depth 1/1000 time = 0.6606552600860596
I0123 14:21:39.596484 139772884148224 ddar.py:60] Depth 2/1000 time = 1.0733680725097656
I0123 14:21:41.765819 139772884148224 ddar.py:60] Depth 3/1000 time = 2.1690614223480225
I0123 14:21:46.863617 139772884148224 ddar.py:60] Depth 4/1000 time = 5.097510576248169
I0123 14:21:51.616538 139772884148224 ddar.py:60] Depth 5/1000 time = 4.752635717391968
I0123 14:21:56.744820 139772884148224 ddar.py:60] Depth 6/1000 time = 5.127978324890137
I0123 14:22:01.992215 139772884148224 ddar.py:60] Depth 7/1000 time = 5.24684476852417
I0123 14:22:02.006753 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:22:02.006820 139772884148224 alphageometry.py:566] LM output (score=-2.360054): "i : P b c b i 09 ;"
I0123 14:22:02.006855 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b c b i"

I0123 14:22:02.006888 139772884148224 alphageometry.py:566] LM output (score=-2.360585): "i : P b i h f 09 ;"
I0123 14:22:02.006915 139772884148224 alphageometry.py:567] Translation: "i = on_pline i b h f"

I0123 14:22:02.006944 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i b h f ? simtri a g d f a d"
I0123 14:22:02.007060 139772884148224 graph.py:498] 
I0123 14:22:02.007109 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i b h f ? simtri a g d f a d
I0123 14:22:02.257200 139772884148224 ddar.py:60] Depth 1/1000 time = 0.23693442344665527
I0123 14:22:03.240875 139772884148224 ddar.py:60] Depth 2/1000 time = 0.9834744930267334
I0123 14:22:05.065078 139772884148224 ddar.py:60] Depth 3/1000 time = 1.8239219188690186
I0123 14:22:07.270473 139772884148224 ddar.py:60] Depth 4/1000 time = 2.2051219940185547
I0123 14:22:09.130068 139772884148224 ddar.py:60] Depth 5/1000 time = 1.8593099117279053
I0123 14:22:11.358287 139772884148224 ddar.py:60] Depth 6/1000 time = 2.2276804447174072
I0123 14:22:11.365055 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:22:11.365122 139772884148224 alphageometry.py:566] LM output (score=-2.517655): "i : P b i c f 09 ;"
I0123 14:22:11.365177 139772884148224 alphageometry.py:567] Translation: "i = on_pline i b c f"

I0123 14:22:11.365216 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i b c f ? simtri a g d f a d"
I0123 14:22:11.365341 139772884148224 graph.py:498] 
I0123 14:22:11.365389 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i b c f ? simtri a g d f a d
I0123 14:22:12.010483 139772884148224 ddar.py:60] Depth 1/1000 time = 0.6320528984069824
I0123 14:22:12.949407 139772884148224 ddar.py:60] Depth 2/1000 time = 0.9386820793151855
I0123 14:22:14.329815 139772884148224 ddar.py:60] Depth 3/1000 time = 1.3801319599151611
I0123 14:22:16.563463 139772884148224 ddar.py:60] Depth 4/1000 time = 2.233367919921875
I0123 14:22:18.803155 139772884148224 ddar.py:60] Depth 5/1000 time = 2.239408493041992
I0123 14:22:21.049283 139772884148224 ddar.py:60] Depth 6/1000 time = 2.2455270290374756
I0123 14:22:21.056774 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:22:21.056860 139772884148224 alphageometry.py:566] LM output (score=-2.545155): "i : C c g i 09 D c i g i 10 ;"
I0123 14:22:21.056896 139772884148224 alphageometry.py:567] Translation: "i = on_line i c g, on_bline i g c"

I0123 14:22:21.056944 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_line i c g, on_bline i g c ? simtri a g d f a d"
I0123 14:22:21.057086 139772884148224 graph.py:498] 
I0123 14:22:21.057140 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_line i c g, on_bline i g c ? simtri a g d f a d
I0123 14:22:21.777847 139772884148224 ddar.py:60] Depth 1/1000 time = 0.7030444145202637
I0123 14:22:22.922006 139772884148224 ddar.py:60] Depth 2/1000 time = 1.1438994407653809
I0123 14:22:25.025719 139772884148224 ddar.py:60] Depth 3/1000 time = 2.1034421920776367
I0123 14:22:28.049498 139772884148224 ddar.py:60] Depth 4/1000 time = 3.02349591255188
I0123 14:22:31.109180 139772884148224 ddar.py:60] Depth 5/1000 time = 3.0593907833099365
I0123 14:22:33.759473 139772884148224 ddar.py:60] Depth 6/1000 time = 2.6497890949249268
I0123 14:22:33.769903 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:22:33.769967 139772884148224 alphageometry.py:566] LM output (score=-2.641522): "i : P c e f i 09 P c i e f 10 ;"
I0123 14:22:33.770004 139772884148224 alphageometry.py:567] Translation: "i = on_pline i f c e, on_pline i c e f"

I0123 14:22:33.770042 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i f c e, on_pline i c e f ? simtri a g d f a d"
I0123 14:22:33.770169 139772884148224 graph.py:498] 
I0123 14:22:33.770217 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i f c e, on_pline i c e f ? simtri a g d f a d
I0123 14:22:34.535549 139772884148224 ddar.py:60] Depth 1/1000 time = 0.7488245964050293
I0123 14:22:35.829702 139772884148224 ddar.py:60] Depth 2/1000 time = 1.293905258178711
I0123 14:22:38.214178 139772884148224 ddar.py:60] Depth 3/1000 time = 2.384204864501953
I0123 14:22:41.146382 139772884148224 ddar.py:60] Depth 4/1000 time = 2.9318652153015137
I0123 14:22:44.506047 139772884148224 ddar.py:60] Depth 5/1000 time = 3.3592662811279297
I0123 14:22:47.473696 139772884148224 ddar.py:60] Depth 6/1000 time = 2.966949224472046
I0123 14:22:47.483918 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:22:47.483986 139772884148224 alphageometry.py:566] LM output (score=-2.644308): "i : P b e h i 09 ;"
I0123 14:22:47.484025 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b e"

I0123 14:22:47.484065 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i h b e ? simtri a g d f a d"
I0123 14:22:47.484203 139772884148224 graph.py:498] 
I0123 14:22:47.484258 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i h b e ? simtri a g d f a d
I0123 14:22:47.751091 139772884148224 ddar.py:60] Depth 1/1000 time = 0.25388336181640625
I0123 14:22:49.201848 139772884148224 ddar.py:60] Depth 2/1000 time = 1.4505681991577148
I0123 14:22:50.651156 139772884148224 ddar.py:60] Depth 3/1000 time = 1.4490327835083008
I0123 14:22:52.867322 139772884148224 ddar.py:60] Depth 4/1000 time = 2.2158772945404053
I0123 14:22:55.131107 139772884148224 ddar.py:60] Depth 5/1000 time = 2.2634897232055664
I0123 14:22:57.384421 139772884148224 ddar.py:60] Depth 6/1000 time = 2.252732038497925
I0123 14:22:57.391676 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:22:57.391740 139772884148224 alphageometry.py:566] LM output (score=-2.663886): "i : P b i e g 09 ;"
I0123 14:22:57.391777 139772884148224 alphageometry.py:567] Translation: "i = on_pline i b e g"

I0123 14:22:57.391818 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i b e g ? simtri a g d f a d"
I0123 14:22:57.391938 139772884148224 graph.py:498] 
I0123 14:22:57.391991 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i b e g ? simtri a g d f a d
I0123 14:22:57.665070 139772884148224 ddar.py:60] Depth 1/1000 time = 0.26062536239624023
I0123 14:22:59.075582 139772884148224 ddar.py:60] Depth 2/1000 time = 1.4103293418884277
I0123 14:23:00.552557 139772884148224 ddar.py:60] Depth 3/1000 time = 1.47670578956604
I0123 14:23:02.804327 139772884148224 ddar.py:60] Depth 4/1000 time = 2.2514336109161377
I0123 14:23:05.151010 139772884148224 ddar.py:60] Depth 5/1000 time = 2.346271276473999
I0123 14:23:07.022550 139772884148224 ddar.py:60] Depth 6/1000 time = 1.870945930480957
I0123 14:23:07.030049 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:23:07.030104 139772884148224 alphageometry.py:566] LM output (score=-2.677990): "i : P b g h i 09 ;"
I0123 14:23:07.030139 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b g"

I0123 14:23:07.030177 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i h b g ? simtri a g d f a d"
I0123 14:23:07.030311 139772884148224 graph.py:498] 
I0123 14:23:07.030365 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i h b g ? simtri a g d f a d
I0123 14:23:07.700525 139772884148224 ddar.py:60] Depth 1/1000 time = 0.6575531959533691
I0123 14:23:08.671270 139772884148224 ddar.py:60] Depth 2/1000 time = 0.9705073833465576
I0123 14:23:10.113688 139772884148224 ddar.py:60] Depth 3/1000 time = 1.4421498775482178
I0123 14:23:12.334027 139772884148224 ddar.py:60] Depth 4/1000 time = 2.2200570106506348
I0123 14:23:14.617482 139772884148224 ddar.py:60] Depth 5/1000 time = 2.283179521560669
I0123 14:23:16.474462 139772884148224 ddar.py:60] Depth 6/1000 time = 1.8564198017120361
I0123 14:23:16.481808 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:23:16.481862 139772884148224 alphageometry.py:566] LM output (score=-2.720435): "i : P b c d i 09 ;"
I0123 14:23:16.481897 139772884148224 alphageometry.py:567] Translation: "i = on_pline i d b c"

I0123 14:23:16.481935 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i d b c ? simtri a g d f a d"
I0123 14:23:16.482051 139772884148224 graph.py:498] 
I0123 14:23:16.482097 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i d b c ? simtri a g d f a d
I0123 14:23:17.158310 139772884148224 ddar.py:60] Depth 1/1000 time = 0.663886308670044
I0123 14:23:18.221094 139772884148224 ddar.py:60] Depth 2/1000 time = 1.0625460147857666
I0123 14:23:20.101789 139772884148224 ddar.py:60] Depth 3/1000 time = 1.8804175853729248
I0123 14:23:22.399278 139772884148224 ddar.py:60] Depth 4/1000 time = 2.297163248062134
I0123 14:23:24.307051 139772884148224 ddar.py:60] Depth 5/1000 time = 1.9073889255523682
I0123 14:23:26.571167 139772884148224 ddar.py:60] Depth 6/1000 time = 2.2635130882263184
I0123 14:23:26.578259 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:23:26.578314 139772884148224 alphageometry.py:566] LM output (score=-2.842430): "i : P b i e f 09 ;"
I0123 14:23:26.578350 139772884148224 alphageometry.py:567] Translation: "i = on_pline i b e f"

I0123 14:23:26.578388 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i b e f ? simtri a g d f a d"
I0123 14:23:26.578515 139772884148224 graph.py:498] 
I0123 14:23:26.578570 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i b e f ? simtri a g d f a d
I0123 14:23:27.262275 139772884148224 ddar.py:60] Depth 1/1000 time = 0.6711878776550293
I0123 14:23:28.286172 139772884148224 ddar.py:60] Depth 2/1000 time = 1.0236642360687256
I0123 14:23:29.755518 139772884148224 ddar.py:60] Depth 3/1000 time = 1.4690821170806885
I0123 14:23:32.050636 139772884148224 ddar.py:60] Depth 4/1000 time = 2.2947700023651123
I0123 14:23:34.474531 139772884148224 ddar.py:60] Depth 5/1000 time = 2.4234702587127686
I0123 14:23:36.436456 139772884148224 ddar.py:60] Depth 6/1000 time = 1.9613213539123535
I0123 14:23:36.444052 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:23:36.444120 139772884148224 alphageometry.py:566] LM output (score=-2.925388): "i : P b c e i 09 T b i d e 10 ;"
I0123 14:23:36.444157 139772884148224 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2570, in add_clause
    raise DepCheckFailError(
graph.DepCheckFailError: ncoll e b c
"

I0123 14:23:36.444198 139772884148224 alphageometry.py:566] LM output (score=-3.001768): "i : P b c f i 09 ;"
I0123 14:23:36.444229 139772884148224 alphageometry.py:567] Translation: "i = on_pline i f b c"

I0123 14:23:36.444261 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i f b c ? simtri a g d f a d"
I0123 14:23:36.444385 139772884148224 graph.py:498] 
I0123 14:23:36.444437 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i f b c ? simtri a g d f a d
I0123 14:23:37.145840 139772884148224 ddar.py:60] Depth 1/1000 time = 0.6881778240203857
I0123 14:23:38.243993 139772884148224 ddar.py:60] Depth 2/1000 time = 1.0978124141693115
I0123 14:23:40.159192 139772884148224 ddar.py:60] Depth 3/1000 time = 1.914863109588623
I0123 14:23:42.477055 139772884148224 ddar.py:60] Depth 4/1000 time = 2.3174426555633545
I0123 14:23:44.418549 139772884148224 ddar.py:60] Depth 5/1000 time = 1.9411745071411133
I0123 14:23:46.726274 139772884148224 ddar.py:60] Depth 6/1000 time = 2.3070616722106934
I0123 14:23:46.733999 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:23:46.734092 139772884148224 alphageometry.py:566] LM output (score=-3.007504): "i : P b e b i 09 ;"
I0123 14:23:46.734130 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b e b i"

I0123 14:23:46.734183 139772884148224 alphageometry.py:566] LM output (score=-3.032443): "i : P b g c i 09 ;"
I0123 14:23:46.734213 139772884148224 alphageometry.py:567] Translation: "i = on_pline i c b g"

I0123 14:23:46.734247 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i c b g ? simtri a g d f a d"
I0123 14:23:46.734390 139772884148224 graph.py:498] 
I0123 14:23:46.734442 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i c b g ? simtri a g d f a d
I0123 14:23:46.994273 139772884148224 ddar.py:60] Depth 1/1000 time = 0.24609684944152832
I0123 14:23:47.995756 139772884148224 ddar.py:60] Depth 2/1000 time = 1.001296043395996
I0123 14:23:49.811374 139772884148224 ddar.py:60] Depth 3/1000 time = 1.8153595924377441
I0123 14:23:52.099074 139772884148224 ddar.py:60] Depth 4/1000 time = 2.2874081134796143
I0123 14:23:53.940949 139772884148224 ddar.py:60] Depth 5/1000 time = 1.841580867767334
I0123 14:23:56.189131 139772884148224 ddar.py:60] Depth 6/1000 time = 2.2476043701171875
I0123 14:23:56.196074 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:23:56.196169 139772884148224 alphageometry.py:566] LM output (score=-3.085340): "i : P c e h i 09 ;"
I0123 14:23:56.196206 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h c e"

I0123 14:23:56.196257 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i h c e ? simtri a g d f a d"
I0123 14:23:56.196400 139772884148224 graph.py:498] 
I0123 14:23:56.196453 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i h c e ? simtri a g d f a d
I0123 14:23:56.933133 139772884148224 ddar.py:60] Depth 1/1000 time = 0.7236278057098389
I0123 14:23:57.994576 139772884148224 ddar.py:60] Depth 2/1000 time = 1.0612120628356934
I0123 14:23:59.889198 139772884148224 ddar.py:60] Depth 3/1000 time = 1.8943674564361572
I0123 14:24:02.158358 139772884148224 ddar.py:60] Depth 4/1000 time = 2.2688302993774414
I0123 14:24:04.063841 139772884148224 ddar.py:60] Depth 5/1000 time = 1.9050815105438232
I0123 14:24:06.337372 139772884148224 ddar.py:60] Depth 6/1000 time = 2.2729299068450928
I0123 14:24:06.344777 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:24:06.344841 139772884148224 alphageometry.py:566] LM output (score=-3.112475): "i : P b d e i 09 P b e d i 10 ;"
I0123 14:24:06.344878 139772884148224 alphageometry.py:567] Translation: "i = on_pline i e b d, on_pline i d b e"

I0123 14:24:06.344932 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i e b d, on_pline i d b e ? simtri a g d f a d"
I0123 14:24:06.345075 139772884148224 graph.py:498] 
I0123 14:24:06.345129 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i e b d, on_pline i d b e ? simtri a g d f a d
I0123 14:24:07.077598 139772884148224 ddar.py:60] Depth 1/1000 time = 0.7148852348327637
I0123 14:24:08.353963 139772884148224 ddar.py:60] Depth 2/1000 time = 1.276120901107788
I0123 14:24:10.803668 139772884148224 ddar.py:60] Depth 3/1000 time = 2.449415683746338
I0123 14:24:13.822039 139772884148224 ddar.py:60] Depth 4/1000 time = 3.0180273056030273
I0123 14:24:16.875425 139772884148224 ddar.py:60] Depth 5/1000 time = 3.053103446960449
I0123 14:24:19.894346 139772884148224 ddar.py:60] Depth 6/1000 time = 3.0181593894958496
I0123 14:24:19.905838 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:24:19.905930 139772884148224 alphageometry.py:566] LM output (score=-3.132389): "i : P b e h i 09 P b i e h 10 ;"
I0123 14:24:19.905969 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b e, on_pline i b e h"

I0123 14:24:19.906023 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i h b e, on_pline i b e h ? simtri a g d f a d"
I0123 14:24:19.906179 139772884148224 graph.py:498] 
I0123 14:24:19.906235 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i h b e, on_pline i b e h ? simtri a g d f a d
I0123 14:24:20.685200 139772884148224 ddar.py:60] Depth 1/1000 time = 0.7612080574035645
I0123 14:24:21.963890 139772884148224 ddar.py:60] Depth 2/1000 time = 1.2784595489501953
I0123 14:24:24.362307 139772884148224 ddar.py:60] Depth 3/1000 time = 2.3981456756591797
I0123 14:24:27.236961 139772884148224 ddar.py:60] Depth 4/1000 time = 2.8743667602539062
I0123 14:24:30.163180 139772884148224 ddar.py:60] Depth 5/1000 time = 2.9258885383605957
I0123 14:24:33.097978 139772884148224 ddar.py:60] Depth 6/1000 time = 2.934093952178955
I0123 14:24:33.108697 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:24:33.108761 139772884148224 alphageometry.py:566] LM output (score=-3.169517): "i : P b i f h 09 ;"
I0123 14:24:33.108796 139772884148224 alphageometry.py:567] Translation: "i = on_pline i b f h"

I0123 14:24:33.108830 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i b f h ? simtri a g d f a d"
I0123 14:24:33.108955 139772884148224 graph.py:498] 
I0123 14:24:33.109010 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i b f h ? simtri a g d f a d
I0123 14:24:33.355907 139772884148224 ddar.py:60] Depth 1/1000 time = 0.23436737060546875
I0123 14:24:34.377002 139772884148224 ddar.py:60] Depth 2/1000 time = 1.0209128856658936
I0123 14:24:36.277249 139772884148224 ddar.py:60] Depth 3/1000 time = 1.8999793529510498
I0123 14:24:38.154650 139772884148224 ddar.py:60] Depth 4/1000 time = 1.8771190643310547
I0123 14:24:40.485393 139772884148224 ddar.py:60] Depth 5/1000 time = 2.330456018447876
I0123 14:24:42.844661 139772884148224 ddar.py:60] Depth 6/1000 time = 2.35867977142334
I0123 14:24:42.851421 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:24:42.851505 139772884148224 alphageometry.py:566] LM output (score=-3.206550): "i : P b e h i 09 P b h e i 10 ;"
I0123 14:24:42.851554 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b e, on_pline i e b h"

I0123 14:24:42.851607 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i h b e, on_pline i e b h ? simtri a g d f a d"
I0123 14:24:42.851752 139772884148224 graph.py:498] 
I0123 14:24:42.851804 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i h b e, on_pline i e b h ? simtri a g d f a d
I0123 14:24:43.155402 139772884148224 ddar.py:60] Depth 1/1000 time = 0.2881031036376953
I0123 14:24:44.445502 139772884148224 ddar.py:60] Depth 2/1000 time = 1.2899034023284912
I0123 14:24:46.946049 139772884148224 ddar.py:60] Depth 3/1000 time = 2.5002617835998535
I0123 14:24:49.859305 139772884148224 ddar.py:60] Depth 4/1000 time = 2.912980318069458
I0123 14:24:52.794794 139772884148224 ddar.py:60] Depth 5/1000 time = 2.935215711593628
I0123 14:24:55.717540 139772884148224 ddar.py:60] Depth 6/1000 time = 2.922114133834839
I0123 14:24:55.729336 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:24:55.729397 139772884148224 alphageometry.py:566] LM output (score=-3.209700): "i : P c e h i 09 P c i e h 10 ;"
I0123 14:24:55.729432 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h c e, on_pline i c e h"

I0123 14:24:55.729468 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i h c e, on_pline i c e h ? simtri a g d f a d"
I0123 14:24:55.729590 139772884148224 graph.py:498] 
I0123 14:24:55.729637 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i h c e, on_pline i c e h ? simtri a g d f a d
I0123 14:24:56.480370 139772884148224 ddar.py:60] Depth 1/1000 time = 0.7342119216918945
I0123 14:24:57.790196 139772884148224 ddar.py:60] Depth 2/1000 time = 1.3095393180847168
I0123 14:25:00.279543 139772884148224 ddar.py:60] Depth 3/1000 time = 2.48896861076355
I0123 14:25:03.172237 139772884148224 ddar.py:60] Depth 4/1000 time = 2.8923962116241455
I0123 14:25:06.094274 139772884148224 ddar.py:60] Depth 5/1000 time = 2.921752452850342
I0123 14:25:08.999139 139772884148224 ddar.py:60] Depth 6/1000 time = 2.9042763710021973
I0123 14:25:09.009029 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:25:09.009093 139772884148224 alphageometry.py:566] LM output (score=-3.245347): "i : P c e d i 09 P c i d e 10 ;"
I0123 14:25:09.009129 139772884148224 alphageometry.py:567] Translation: "i = on_pline i d c e, on_pline i c d e"

I0123 14:25:09.009165 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i d c e, on_pline i c d e ? simtri a g d f a d"
I0123 14:25:09.009307 139772884148224 graph.py:498] 
I0123 14:25:09.009361 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i d c e, on_pline i c d e ? simtri a g d f a d
I0123 14:25:09.810629 139772884148224 ddar.py:60] Depth 1/1000 time = 0.7846226692199707
I0123 14:25:11.159706 139772884148224 ddar.py:60] Depth 2/1000 time = 1.3488259315490723
I0123 14:25:13.714115 139772884148224 ddar.py:60] Depth 3/1000 time = 2.5541207790374756
I0123 14:25:16.732239 139772884148224 ddar.py:60] Depth 4/1000 time = 3.0177865028381348
I0123 14:25:19.774614 139772884148224 ddar.py:60] Depth 5/1000 time = 3.041950225830078
I0123 14:25:22.767478 139772884148224 ddar.py:60] Depth 6/1000 time = 2.9921958446502686
I0123 14:25:22.778525 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:25:22.778594 139772884148224 alphageometry.py:566] LM output (score=-3.253016): "i : P b i c e 09 ;"
I0123 14:25:22.778630 139772884148224 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2570, in add_clause
    raise DepCheckFailError(
graph.DepCheckFailError: ncoll b c e
"

I0123 14:25:22.778665 139772884148224 alphageometry.py:566] LM output (score=-3.268564): "i : P a b c i 09 ;"
I0123 14:25:22.778692 139772884148224 alphageometry.py:567] Translation: "i = on_pline i c a b"

I0123 14:25:22.778722 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i c a b ? simtri a g d f a d"
I0123 14:25:22.778850 139772884148224 graph.py:498] 
I0123 14:25:22.778904 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i c a b ? simtri a g d f a d
I0123 14:25:23.472491 139772884148224 ddar.py:60] Depth 1/1000 time = 0.6809954643249512
I0123 14:25:24.476835 139772884148224 ddar.py:60] Depth 2/1000 time = 1.004101276397705
I0123 14:25:25.929539 139772884148224 ddar.py:60] Depth 3/1000 time = 1.4524343013763428
I0123 14:25:28.217206 139772884148224 ddar.py:60] Depth 4/1000 time = 2.2873847484588623
I0123 14:25:30.089227 139772884148224 ddar.py:60] Depth 5/1000 time = 1.871732473373413
I0123 14:25:32.413205 139772884148224 ddar.py:60] Depth 6/1000 time = 2.323460578918457
I0123 14:25:32.420392 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:25:32.420457 139772884148224 alphageometry.py:566] LM output (score=-3.304998): "i : P b c d i 09 P b i c d 10 ;"
I0123 14:25:32.420495 139772884148224 alphageometry.py:567] Translation: "i = on_pline i d b c, on_pline i b c d"

I0123 14:25:32.420532 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i d b c, on_pline i b c d ? simtri a g d f a d"
I0123 14:25:32.420656 139772884148224 graph.py:498] 
I0123 14:25:32.420703 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i d b c, on_pline i b c d ? simtri a g d f a d
I0123 14:25:32.737982 139772884148224 ddar.py:60] Depth 1/1000 time = 0.3008716106414795
I0123 14:25:34.459465 139772884148224 ddar.py:60] Depth 2/1000 time = 1.721297025680542
I0123 14:25:36.184793 139772884148224 ddar.py:60] Depth 3/1000 time = 1.7250556945800781
I0123 14:25:38.737077 139772884148224 ddar.py:60] Depth 4/1000 time = 2.5519649982452393
I0123 14:25:41.328369 139772884148224 ddar.py:60] Depth 5/1000 time = 2.591006278991699
I0123 14:25:43.929253 139772884148224 ddar.py:60] Depth 6/1000 time = 2.6003057956695557
I0123 14:25:43.938252 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:25:43.938316 139772884148224 alphageometry.py:566] LM output (score=-3.384079): "i : P b c f i 09 P b i c f 10 ;"
I0123 14:25:43.938354 139772884148224 alphageometry.py:567] Translation: "i = on_pline i f b c, on_pline i b c f"

I0123 14:25:43.938392 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i f b c, on_pline i b c f ? simtri a g d f a d"
I0123 14:25:43.938544 139772884148224 graph.py:498] 
I0123 14:25:43.938601 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_bline h c b; i = on_pline i f b c, on_pline i b c f ? simtri a g d f a d
I0123 14:25:44.275105 139772884148224 ddar.py:60] Depth 1/1000 time = 0.31952333450317383
I0123 14:25:45.487155 139772884148224 ddar.py:60] Depth 2/1000 time = 1.2118549346923828
I0123 14:25:47.604840 139772884148224 ddar.py:60] Depth 3/1000 time = 2.117429256439209
I0123 14:25:50.192314 139772884148224 ddar.py:60] Depth 4/1000 time = 2.5872011184692383
I0123 14:25:52.851197 139772884148224 ddar.py:60] Depth 5/1000 time = 2.6586029529571533
I0123 14:25:55.034376 139772884148224 ddar.py:60] Depth 6/1000 time = 2.1825506687164307
I0123 14:25:55.042999 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:25:55.043089 139772884148224 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b c e 02 T b c d e 03 ; f : C a c f 04 C d e f 05 ; g : C a b g 06 C d f g 07 ? S a g d f a d {F1} x00 h : D b g b h 08 D e g e h 09 ; x00
I0123 14:25:59.217608 139772884148224 alphageometry.py:566] LM output (score=-1.053313): "i : T b d b i 10 ;"
I0123 14:25:59.217780 139772884148224 alphageometry.py:567] Translation: "i = on_tline i b b d"

I0123 14:25:59.217830 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_tline i b b d ? simtri a g d f a d"
I0123 14:25:59.217962 139772884148224 graph.py:498] 
I0123 14:25:59.218014 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_tline i b b d ? simtri a g d f a d
I0123 14:25:59.952740 139772884148224 ddar.py:60] Depth 1/1000 time = 0.7184722423553467
I0123 14:26:01.017321 139772884148224 ddar.py:60] Depth 2/1000 time = 1.0643539428710938
I0123 14:26:02.473093 139772884148224 ddar.py:60] Depth 3/1000 time = 1.455519199371338
I0123 14:26:05.313879 139772884148224 ddar.py:60] Depth 4/1000 time = 2.840538501739502
I0123 14:26:08.185738 139772884148224 ddar.py:60] Depth 5/1000 time = 2.8716087341308594
I0123 14:26:11.065451 139772884148224 ddar.py:60] Depth 6/1000 time = 2.8791866302490234
I0123 14:26:11.079653 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:26:11.079711 139772884148224 alphageometry.py:566] LM output (score=-1.302513): "i : P b g h i 10 ;"
I0123 14:26:11.079746 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b g"

I0123 14:26:11.079782 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i h b g ? simtri a g d f a d"
I0123 14:26:11.079901 139772884148224 graph.py:498] 
I0123 14:26:11.079946 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i h b g ? simtri a g d f a d
I0123 14:26:11.357996 139772884148224 ddar.py:60] Depth 1/1000 time = 0.26229333877563477
I0123 14:26:12.866448 139772884148224 ddar.py:60] Depth 2/1000 time = 1.5082614421844482
I0123 14:26:14.146934 139772884148224 ddar.py:60] Depth 3/1000 time = 1.2802557945251465
I0123 14:26:16.918172 139772884148224 ddar.py:60] Depth 4/1000 time = 2.7709877490997314
I0123 14:26:20.000425 139772884148224 ddar.py:60] Depth 5/1000 time = 3.082003593444824
I0123 14:26:23.540488 139772884148224 ddar.py:60] Depth 6/1000 time = 3.5397982597351074
I0123 14:26:27.100436 139772884148224 ddar.py:60] Depth 7/1000 time = 3.5594451427459717
I0123 14:26:27.114960 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:26:27.115027 139772884148224 alphageometry.py:566] LM output (score=-1.393658): "i : P b e b i 10 T b h b i 11 ;"
I0123 14:26:27.115063 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b e b i"

I0123 14:26:27.115096 139772884148224 alphageometry.py:566] LM output (score=-1.558990): "i : P b h d i 10 ;"
I0123 14:26:27.115122 139772884148224 alphageometry.py:567] Translation: "i = on_pline i d b h"

I0123 14:26:27.115151 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i d b h ? simtri a g d f a d"
I0123 14:26:27.115274 139772884148224 graph.py:498] 
I0123 14:26:27.115321 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i d b h ? simtri a g d f a d
I0123 14:26:27.375136 139772884148224 ddar.py:60] Depth 1/1000 time = 0.24450445175170898
I0123 14:26:28.425364 139772884148224 ddar.py:60] Depth 2/1000 time = 1.0500550270080566
I0123 14:26:29.696995 139772884148224 ddar.py:60] Depth 3/1000 time = 1.2713730335235596
I0123 14:26:32.604124 139772884148224 ddar.py:60] Depth 4/1000 time = 2.9068806171417236
I0123 14:26:35.577426 139772884148224 ddar.py:60] Depth 5/1000 time = 2.9730403423309326
I0123 14:26:38.568418 139772884148224 ddar.py:60] Depth 6/1000 time = 2.9907078742980957
I0123 14:26:41.547141 139772884148224 ddar.py:60] Depth 7/1000 time = 2.9781875610351562
I0123 14:26:41.561821 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:26:41.561891 139772884148224 alphageometry.py:566] LM output (score=-1.607820): "i : P b c h i 10 ;"
I0123 14:26:41.561927 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b c"

I0123 14:26:41.561966 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i h b c ? simtri a g d f a d"
I0123 14:26:41.562099 139772884148224 graph.py:498] 
I0123 14:26:41.562159 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i h b c ? simtri a g d f a d
I0123 14:26:41.859842 139772884148224 ddar.py:60] Depth 1/1000 time = 0.28087663650512695
I0123 14:26:43.426193 139772884148224 ddar.py:60] Depth 2/1000 time = 1.5661425590515137
I0123 14:26:44.754387 139772884148224 ddar.py:60] Depth 3/1000 time = 1.3279671669006348
I0123 14:26:47.582206 139772884148224 ddar.py:60] Depth 4/1000 time = 2.8275837898254395
I0123 14:26:50.563045 139772884148224 ddar.py:60] Depth 5/1000 time = 2.980586528778076
I0123 14:26:53.048775 139772884148224 ddar.py:60] Depth 6/1000 time = 2.4854624271392822
I0123 14:26:56.474697 139772884148224 ddar.py:60] Depth 7/1000 time = 3.4253756999969482
I0123 14:26:56.490445 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:26:56.490498 139772884148224 alphageometry.py:566] LM output (score=-1.678165): "i : P b e h i 10 ;"
I0123 14:26:56.490532 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b e"

I0123 14:26:56.490567 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i h b e ? simtri a g d f a d"
I0123 14:26:56.490689 139772884148224 graph.py:498] 
I0123 14:26:56.490735 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i h b e ? simtri a g d f a d
I0123 14:26:56.780027 139772884148224 ddar.py:60] Depth 1/1000 time = 0.27390289306640625
I0123 14:26:57.890691 139772884148224 ddar.py:60] Depth 2/1000 time = 1.1104741096496582
I0123 14:26:59.209052 139772884148224 ddar.py:60] Depth 3/1000 time = 1.3181114196777344
I0123 14:27:01.979466 139772884148224 ddar.py:60] Depth 4/1000 time = 2.770151138305664
I0123 14:27:04.884584 139772884148224 ddar.py:60] Depth 5/1000 time = 2.904862403869629
I0123 14:27:07.806768 139772884148224 ddar.py:60] Depth 6/1000 time = 2.9219179153442383
I0123 14:27:10.737587 139772884148224 ddar.py:60] Depth 7/1000 time = 2.9302239418029785
I0123 14:27:10.750885 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:27:10.750966 139772884148224 alphageometry.py:566] LM output (score=-1.684803): "i : T b h b i 10 ;"
I0123 14:27:10.751003 139772884148224 alphageometry.py:567] Translation: "i = on_tline i b b h"

I0123 14:27:10.751048 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_tline i b b h ? simtri a g d f a d"
I0123 14:27:10.751183 139772884148224 graph.py:498] 
I0123 14:27:10.751234 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_tline i b b h ? simtri a g d f a d
I0123 14:27:11.499665 139772884148224 ddar.py:60] Depth 1/1000 time = 0.732982873916626
I0123 14:27:12.569470 139772884148224 ddar.py:60] Depth 2/1000 time = 1.06955885887146
I0123 14:27:13.858417 139772884148224 ddar.py:60] Depth 3/1000 time = 1.2886948585510254
I0123 14:27:16.797857 139772884148224 ddar.py:60] Depth 4/1000 time = 2.9391822814941406
I0123 14:27:19.310062 139772884148224 ddar.py:60] Depth 5/1000 time = 2.5119433403015137
I0123 14:27:22.252577 139772884148224 ddar.py:60] Depth 6/1000 time = 2.9420621395111084
I0123 14:27:25.194460 139772884148224 ddar.py:60] Depth 7/1000 time = 2.941390037536621
I0123 14:27:25.209671 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:27:25.209734 139772884148224 alphageometry.py:566] LM output (score=-1.710965): "i : P b h d i 10 P b i d h 11 ;"
I0123 14:27:25.209770 139772884148224 alphageometry.py:567] Translation: "i = on_pline i d b h, on_pline i b d h"

I0123 14:27:25.209806 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i d b h, on_pline i b d h ? simtri a g d f a d"
I0123 14:27:25.209929 139772884148224 graph.py:498] 
I0123 14:27:25.209975 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i d b h, on_pline i b d h ? simtri a g d f a d
I0123 14:27:25.981483 139772884148224 ddar.py:60] Depth 1/1000 time = 0.7518277168273926
I0123 14:27:27.322620 139772884148224 ddar.py:60] Depth 2/1000 time = 1.3408892154693604
I0123 14:27:29.137354 139772884148224 ddar.py:60] Depth 3/1000 time = 1.8144800662994385
I0123 14:27:33.369169 139772884148224 ddar.py:60] Depth 4/1000 time = 4.231561660766602
I0123 14:27:37.463745 139772884148224 ddar.py:60] Depth 5/1000 time = 4.094109773635864
I0123 14:27:41.993730 139772884148224 ddar.py:60] Depth 6/1000 time = 4.529690265655518
I0123 14:27:46.048304 139772884148224 ddar.py:60] Depth 7/1000 time = 4.053908348083496
I0123 14:27:46.068874 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:27:46.068962 139772884148224 alphageometry.py:566] LM output (score=-1.959470): "i : P b c h i 10 P b h c i 11 ;"
I0123 14:27:46.069000 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b c, on_pline i c b h"

I0123 14:27:46.069045 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i h b c, on_pline i c b h ? simtri a g d f a d"
I0123 14:27:46.069180 139772884148224 graph.py:498] 
I0123 14:27:46.069234 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i h b c, on_pline i c b h ? simtri a g d f a d
I0123 14:27:46.403673 139772884148224 ddar.py:60] Depth 1/1000 time = 0.315349817276001
I0123 14:27:48.213971 139772884148224 ddar.py:60] Depth 2/1000 time = 1.810107707977295
I0123 14:27:49.777862 139772884148224 ddar.py:60] Depth 3/1000 time = 1.5636615753173828
I0123 14:27:53.209596 139772884148224 ddar.py:60] Depth 4/1000 time = 3.4314918518066406
I0123 14:27:57.342619 139772884148224 ddar.py:60] Depth 5/1000 time = 4.132745265960693
I0123 14:28:01.558749 139772884148224 ddar.py:60] Depth 6/1000 time = 4.215859651565552
I0123 14:28:05.274419 139772884148224 ddar.py:60] Depth 7/1000 time = 3.7151079177856445
I0123 14:28:05.293935 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:28:05.293989 139772884148224 alphageometry.py:566] LM output (score=-2.021607): "i : P b g h i 10 P b h g i 11 ;"
I0123 14:28:05.294024 139772884148224 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 14:28:05.294058 139772884148224 alphageometry.py:566] LM output (score=-2.172938): "i : T b h d i 10 ;"
I0123 14:28:05.294085 139772884148224 alphageometry.py:567] Translation: "i = on_tline i d b h"

I0123 14:28:05.294115 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_tline i d b h ? simtri a g d f a d"
I0123 14:28:05.294232 139772884148224 graph.py:498] 
I0123 14:28:05.294277 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_tline i d b h ? simtri a g d f a d
I0123 14:28:05.550479 139772884148224 ddar.py:60] Depth 1/1000 time = 0.2414090633392334
I0123 14:28:06.599574 139772884148224 ddar.py:60] Depth 2/1000 time = 1.0489156246185303
I0123 14:28:08.367678 139772884148224 ddar.py:60] Depth 3/1000 time = 1.7678630352020264
I0123 14:28:10.794733 139772884148224 ddar.py:60] Depth 4/1000 time = 2.4267990589141846
I0123 14:28:13.831077 139772884148224 ddar.py:60] Depth 5/1000 time = 3.0360679626464844
I0123 14:28:16.832864 139772884148224 ddar.py:60] Depth 6/1000 time = 3.001481533050537
I0123 14:28:19.874379 139772884148224 ddar.py:60] Depth 7/1000 time = 3.0409839153289795
I0123 14:28:19.890169 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:28:19.890240 139772884148224 alphageometry.py:566] LM output (score=-2.312398): "i : P b e h i 10 P b h e i 11 ;"
I0123 14:28:19.890276 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b e, on_pline i e b h"

I0123 14:28:19.890313 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i h b e, on_pline i e b h ? simtri a g d f a d"
I0123 14:28:19.890456 139772884148224 graph.py:498] 
I0123 14:28:19.890510 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i h b e, on_pline i e b h ? simtri a g d f a d
I0123 14:28:20.222284 139772884148224 ddar.py:60] Depth 1/1000 time = 0.31260108947753906
I0123 14:28:21.560667 139772884148224 ddar.py:60] Depth 2/1000 time = 1.3381786346435547
I0123 14:28:23.670540 139772884148224 ddar.py:60] Depth 3/1000 time = 2.109612464904785
I0123 14:28:27.494404 139772884148224 ddar.py:60] Depth 4/1000 time = 3.8236093521118164
I0123 14:28:31.613405 139772884148224 ddar.py:60] Depth 5/1000 time = 4.1187427043914795
I0123 14:28:35.682147 139772884148224 ddar.py:60] Depth 6/1000 time = 4.068461179733276
I0123 14:28:40.269748 139772884148224 ddar.py:60] Depth 7/1000 time = 4.587041854858398
I0123 14:28:40.290282 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:28:40.290342 139772884148224 alphageometry.py:566] LM output (score=-2.363109): "i : P b e b i 10 ;"
I0123 14:28:40.290377 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b e b i"

I0123 14:28:40.290411 139772884148224 alphageometry.py:566] LM output (score=-2.411478): "i : T b g b i 10 ;"
I0123 14:28:40.290439 139772884148224 alphageometry.py:567] Translation: "i = on_tline i b b g"

I0123 14:28:40.290469 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_tline i b b g ? simtri a g d f a d"
I0123 14:28:40.290585 139772884148224 graph.py:498] 
I0123 14:28:40.290631 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_tline i b b g ? simtri a g d f a d
I0123 14:28:40.562769 139772884148224 ddar.py:60] Depth 1/1000 time = 0.25687670707702637
I0123 14:28:41.652830 139772884148224 ddar.py:60] Depth 2/1000 time = 1.0898747444152832
I0123 14:28:42.965597 139772884148224 ddar.py:60] Depth 3/1000 time = 1.312523603439331
I0123 14:28:45.798357 139772884148224 ddar.py:60] Depth 4/1000 time = 2.832505941390991
I0123 14:28:48.867459 139772884148224 ddar.py:60] Depth 5/1000 time = 3.068849563598633
I0123 14:28:51.959912 139772884148224 ddar.py:60] Depth 6/1000 time = 3.0921456813812256
I0123 14:28:54.551874 139772884148224 ddar.py:60] Depth 7/1000 time = 2.5913267135620117
I0123 14:28:54.568207 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:28:54.568281 139772884148224 alphageometry.py:566] LM output (score=-2.476869): "i : P c e h i 10 ;"
I0123 14:28:54.568317 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h c e"

I0123 14:28:54.568354 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i h c e ? simtri a g d f a d"
I0123 14:28:54.568489 139772884148224 graph.py:498] 
I0123 14:28:54.568543 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i h c e ? simtri a g d f a d
I0123 14:28:55.346671 139772884148224 ddar.py:60] Depth 1/1000 time = 0.7627291679382324
I0123 14:28:56.494150 139772884148224 ddar.py:60] Depth 2/1000 time = 1.1472549438476562
I0123 14:28:57.850353 139772884148224 ddar.py:60] Depth 3/1000 time = 1.3559603691101074
I0123 14:29:00.722026 139772884148224 ddar.py:60] Depth 4/1000 time = 2.871413230895996
I0123 14:29:03.785197 139772884148224 ddar.py:60] Depth 5/1000 time = 3.0629000663757324
I0123 14:29:06.321746 139772884148224 ddar.py:60] Depth 6/1000 time = 2.5362815856933594
I0123 14:29:09.291272 139772884148224 ddar.py:60] Depth 7/1000 time = 2.968998432159424
I0123 14:29:09.305707 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:29:09.305775 139772884148224 alphageometry.py:566] LM output (score=-2.514969): "i : P a b c i 10 ;"
I0123 14:29:09.305811 139772884148224 alphageometry.py:567] Translation: "i = on_pline i c a b"

I0123 14:29:09.305846 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i c a b ? simtri a g d f a d"
I0123 14:29:09.305967 139772884148224 graph.py:498] 
I0123 14:29:09.306014 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i c a b ? simtri a g d f a d
I0123 14:29:10.065133 139772884148224 ddar.py:60] Depth 1/1000 time = 0.7429869174957275
I0123 14:29:11.164943 139772884148224 ddar.py:60] Depth 2/1000 time = 1.0995795726776123
I0123 14:29:12.477080 139772884148224 ddar.py:60] Depth 3/1000 time = 1.311889886856079
I0123 14:29:15.364617 139772884148224 ddar.py:60] Depth 4/1000 time = 2.887291193008423
I0123 14:29:18.591290 139772884148224 ddar.py:60] Depth 5/1000 time = 3.2264137268066406
I0123 14:29:22.312029 139772884148224 ddar.py:60] Depth 6/1000 time = 3.720458984375
I0123 14:29:25.554091 139772884148224 ddar.py:60] Depth 7/1000 time = 3.241551160812378
I0123 14:29:25.569813 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:29:25.569892 139772884148224 alphageometry.py:566] LM output (score=-2.549626): "i : P b g h i 10 P b i g h 11 ;"
I0123 14:29:25.569931 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b g, on_pline i b g h"

I0123 14:29:25.569970 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i h b g, on_pline i b g h ? simtri a g d f a d"
I0123 14:29:25.570097 139772884148224 graph.py:498] 
I0123 14:29:25.570143 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i h b g, on_pline i b g h ? simtri a g d f a d
I0123 14:29:25.896753 139772884148224 ddar.py:60] Depth 1/1000 time = 0.307511568069458
I0123 14:29:27.225878 139772884148224 ddar.py:60] Depth 2/1000 time = 1.3289282321929932
I0123 14:29:28.786035 139772884148224 ddar.py:60] Depth 3/1000 time = 1.5599145889282227
I0123 14:29:32.906433 139772884148224 ddar.py:60] Depth 4/1000 time = 4.120148658752441
I0123 14:29:36.869781 139772884148224 ddar.py:60] Depth 5/1000 time = 3.963073253631592
I0123 14:29:41.364545 139772884148224 ddar.py:60] Depth 6/1000 time = 4.494478702545166
I0123 14:29:45.359931 139772884148224 ddar.py:60] Depth 7/1000 time = 3.994804859161377
I0123 14:29:45.379752 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:29:45.379816 139772884148224 alphageometry.py:566] LM output (score=-2.728815): "i : P b h d i 10 P b i d g 11 ;"
I0123 14:29:45.379852 139772884148224 alphageometry.py:567] Translation: "i = on_pline i d b h, on_pline i b d g"

I0123 14:29:45.379888 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i d b h, on_pline i b d g ? simtri a g d f a d"
I0123 14:29:45.380028 139772884148224 graph.py:498] 
I0123 14:29:45.380082 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i d b h, on_pline i b d g ? simtri a g d f a d
I0123 14:29:45.703441 139772884148224 ddar.py:60] Depth 1/1000 time = 0.3045380115509033
I0123 14:29:46.923022 139772884148224 ddar.py:60] Depth 2/1000 time = 1.2193949222564697
I0123 14:29:49.067215 139772884148224 ddar.py:60] Depth 3/1000 time = 2.143951416015625
I0123 14:29:53.084856 139772884148224 ddar.py:60] Depth 4/1000 time = 4.017385959625244
I0123 14:29:57.258424 139772884148224 ddar.py:60] Depth 5/1000 time = 4.173287868499756
I0123 14:30:01.430293 139772884148224 ddar.py:60] Depth 6/1000 time = 4.1715967655181885
I0123 14:30:05.597518 139772884148224 ddar.py:60] Depth 7/1000 time = 4.166688680648804
I0123 14:30:05.619285 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:30:05.619352 139772884148224 alphageometry.py:566] LM output (score=-2.749777): "i : P c h g i 10 P c i g h 11 ;"
I0123 14:30:05.619387 139772884148224 alphageometry.py:567] Translation: "i = on_pline i g c h, on_pline i c g h"

I0123 14:30:05.619423 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i g c h, on_pline i c g h ? simtri a g d f a d"
I0123 14:30:05.619549 139772884148224 graph.py:498] 
I0123 14:30:05.619604 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i g c h, on_pline i c g h ? simtri a g d f a d
I0123 14:30:05.948008 139772884148224 ddar.py:60] Depth 1/1000 time = 0.30799126625061035
I0123 14:30:07.247051 139772884148224 ddar.py:60] Depth 2/1000 time = 1.2988505363464355
I0123 14:30:08.846444 139772884148224 ddar.py:60] Depth 3/1000 time = 1.5991437435150146
I0123 14:30:12.536989 139772884148224 ddar.py:60] Depth 4/1000 time = 3.6902966499328613
I0123 14:30:17.345741 139772884148224 ddar.py:60] Depth 5/1000 time = 4.808475017547607
I0123 14:30:22.165663 139772884148224 ddar.py:60] Depth 6/1000 time = 4.819600343704224
I0123 14:30:26.962027 139772884148224 ddar.py:60] Depth 7/1000 time = 4.795778751373291
I0123 14:30:32.354068 139772884148224 ddar.py:60] Depth 8/1000 time = 5.371368408203125
I0123 14:30:32.354527 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:30:32.354583 139772884148224 alphageometry.py:566] LM output (score=-2.797886): "i : P b d c i 10 ;"
I0123 14:30:32.354618 139772884148224 alphageometry.py:567] Translation: "i = on_pline i c b d"

I0123 14:30:32.354655 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i c b d ? simtri a g d f a d"
I0123 14:30:32.354788 139772884148224 graph.py:498] 
I0123 14:30:32.354842 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i c b d ? simtri a g d f a d
I0123 14:30:32.621041 139772884148224 ddar.py:60] Depth 1/1000 time = 0.24971508979797363
I0123 14:30:33.696552 139772884148224 ddar.py:60] Depth 2/1000 time = 1.0753264427185059
I0123 14:30:34.997562 139772884148224 ddar.py:60] Depth 3/1000 time = 1.3007619380950928
I0123 14:30:37.361783 139772884148224 ddar.py:60] Depth 4/1000 time = 2.36395001411438
I0123 14:30:40.392909 139772884148224 ddar.py:60] Depth 5/1000 time = 3.0308525562286377
I0123 14:30:43.431780 139772884148224 ddar.py:60] Depth 6/1000 time = 3.0386099815368652
I0123 14:30:45.903751 139772884148224 ddar.py:60] Depth 7/1000 time = 2.4714789390563965
I0123 14:30:45.918247 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:30:45.918311 139772884148224 alphageometry.py:566] LM output (score=-2.820523): "i : P b d h i 10 P b h d i 11 ;"
I0123 14:30:45.918348 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b d, on_pline i d b h"

I0123 14:30:45.918401 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i h b d, on_pline i d b h ? simtri a g d f a d"
I0123 14:30:45.918529 139772884148224 graph.py:498] 
I0123 14:30:45.918576 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i h b d, on_pline i d b h ? simtri a g d f a d
I0123 14:30:46.728479 139772884148224 ddar.py:60] Depth 1/1000 time = 0.7912070751190186
I0123 14:30:48.013485 139772884148224 ddar.py:60] Depth 2/1000 time = 1.2847800254821777
I0123 14:30:49.591971 139772884148224 ddar.py:60] Depth 3/1000 time = 1.5782275199890137
I0123 14:30:53.136853 139772884148224 ddar.py:60] Depth 4/1000 time = 3.5445902347564697
I0123 14:30:57.533143 139772884148224 ddar.py:60] Depth 5/1000 time = 4.3958985805511475
I0123 14:31:01.748450 139772884148224 ddar.py:60] Depth 6/1000 time = 4.214989423751831
I0123 14:31:05.933498 139772884148224 ddar.py:60] Depth 7/1000 time = 4.184503555297852
I0123 14:31:05.954439 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:31:05.954505 139772884148224 alphageometry.py:566] LM output (score=-2.827542): "i : P b d h i 10 ;"
I0123 14:31:05.954541 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b d"

I0123 14:31:05.954577 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i h b d ? simtri a g d f a d"
I0123 14:31:05.954714 139772884148224 graph.py:498] 
I0123 14:31:05.954768 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i h b d ? simtri a g d f a d
I0123 14:31:06.215970 139772884148224 ddar.py:60] Depth 1/1000 time = 0.24512219429016113
I0123 14:31:07.262460 139772884148224 ddar.py:60] Depth 2/1000 time = 1.0463128089904785
I0123 14:31:08.542294 139772884148224 ddar.py:60] Depth 3/1000 time = 1.2795944213867188
I0123 14:31:11.550493 139772884148224 ddar.py:60] Depth 4/1000 time = 3.0079383850097656
I0123 14:31:14.600307 139772884148224 ddar.py:60] Depth 5/1000 time = 3.049555778503418
I0123 14:31:17.111056 139772884148224 ddar.py:60] Depth 6/1000 time = 2.5104682445526123
I0123 14:31:20.128096 139772884148224 ddar.py:60] Depth 7/1000 time = 3.0165512561798096
I0123 14:31:20.142893 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:31:20.142946 139772884148224 alphageometry.py:566] LM output (score=-2.847306): "i : P c h g i 10 ;"
I0123 14:31:20.142980 139772884148224 alphageometry.py:567] Translation: "i = on_pline i g c h"

I0123 14:31:20.143014 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i g c h ? simtri a g d f a d"
I0123 14:31:20.143136 139772884148224 graph.py:498] 
I0123 14:31:20.143181 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i g c h ? simtri a g d f a d
I0123 14:31:20.412333 139772884148224 ddar.py:60] Depth 1/1000 time = 0.25386500358581543
I0123 14:31:21.494899 139772884148224 ddar.py:60] Depth 2/1000 time = 1.082373857498169
I0123 14:31:23.279075 139772884148224 ddar.py:60] Depth 3/1000 time = 1.7839419841766357
I0123 14:31:25.705194 139772884148224 ddar.py:60] Depth 4/1000 time = 2.4258620738983154
I0123 14:31:29.708302 139772884148224 ddar.py:60] Depth 5/1000 time = 4.002828359603882
I0123 14:31:33.712439 139772884148224 ddar.py:60] Depth 6/1000 time = 4.003831148147583
I0123 14:31:37.734177 139772884148224 ddar.py:60] Depth 7/1000 time = 4.02120304107666
I0123 14:31:37.747777 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:31:37.747839 139772884148224 alphageometry.py:566] LM output (score=-2.860563): "i : P b e b i 10 P d f h i 11 ;"
I0123 14:31:37.747875 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b e b i"

I0123 14:31:37.747912 139772884148224 alphageometry.py:566] LM output (score=-2.861556): "i : P c e h i 10 P c i e h 11 ;"
I0123 14:31:37.747940 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h c e, on_pline i c e h"

I0123 14:31:37.747969 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i h c e, on_pline i c e h ? simtri a g d f a d"
I0123 14:31:37.748106 139772884148224 graph.py:498] 
I0123 14:31:37.748159 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i h c e, on_pline i c e h ? simtri a g d f a d
I0123 14:31:38.085934 139772884148224 ddar.py:60] Depth 1/1000 time = 0.3178529739379883
I0123 14:31:39.540154 139772884148224 ddar.py:60] Depth 2/1000 time = 1.4540235996246338
I0123 14:31:41.503247 139772884148224 ddar.py:60] Depth 3/1000 time = 1.9628379344940186
I0123 14:31:45.723234 139772884148224 ddar.py:60] Depth 4/1000 time = 4.2197349071502686
I0123 14:31:50.433566 139772884148224 ddar.py:60] Depth 5/1000 time = 4.710066556930542
I0123 14:31:54.638337 139772884148224 ddar.py:60] Depth 6/1000 time = 4.204495429992676
I0123 14:31:58.853854 139772884148224 ddar.py:60] Depth 7/1000 time = 4.214972496032715
I0123 14:31:58.872252 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:31:58.872319 139772884148224 alphageometry.py:566] LM output (score=-2.914445): "i : P b i c f 10 ;"
I0123 14:31:58.872354 139772884148224 alphageometry.py:567] Translation: "i = on_pline i b c f"

I0123 14:31:58.872390 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i b c f ? simtri a g d f a d"
I0123 14:31:58.872510 139772884148224 graph.py:498] 
I0123 14:31:58.872555 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i b c f ? simtri a g d f a d
I0123 14:31:59.152568 139772884148224 ddar.py:60] Depth 1/1000 time = 0.2642240524291992
I0123 14:32:00.227959 139772884148224 ddar.py:60] Depth 2/1000 time = 1.0751988887786865
I0123 14:32:01.526507 139772884148224 ddar.py:60] Depth 3/1000 time = 1.2983136177062988
I0123 14:32:04.460299 139772884148224 ddar.py:60] Depth 4/1000 time = 2.9335362911224365
I0123 14:32:07.019913 139772884148224 ddar.py:60] Depth 5/1000 time = 2.559340476989746
I0123 14:32:10.150938 139772884148224 ddar.py:60] Depth 6/1000 time = 3.1307461261749268
I0123 14:32:13.288186 139772884148224 ddar.py:60] Depth 7/1000 time = 3.1367430686950684
I0123 14:32:13.302962 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:32:13.303033 139772884148224 alphageometry.py:566] LM output (score=-2.949412): "i : P b d e i 10 P b e d i 11 ;"
I0123 14:32:13.303069 139772884148224 alphageometry.py:567] Translation: "i = on_pline i e b d, on_pline i d b e"

I0123 14:32:13.303105 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i e b d, on_pline i d b e ? simtri a g d f a d"
I0123 14:32:13.303251 139772884148224 graph.py:498] 
I0123 14:32:13.303307 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i e b d, on_pline i d b e ? simtri a g d f a d
I0123 14:32:13.647836 139772884148224 ddar.py:60] Depth 1/1000 time = 0.32535409927368164
I0123 14:32:15.023395 139772884148224 ddar.py:60] Depth 2/1000 time = 1.3753547668457031
I0123 14:32:16.902392 139772884148224 ddar.py:60] Depth 3/1000 time = 1.8787391185760498
I0123 14:32:20.709047 139772884148224 ddar.py:60] Depth 4/1000 time = 3.8064002990722656
I0123 14:32:24.759319 139772884148224 ddar.py:60] Depth 5/1000 time = 4.050010681152344
I0123 14:32:29.375329 139772884148224 ddar.py:60] Depth 6/1000 time = 4.615715026855469
I0123 14:32:32.850535 139772884148224 ddar.py:60] Depth 7/1000 time = 3.474518299102783
I0123 14:32:32.870551 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:32:32.870641 139772884148224 alphageometry.py:566] LM output (score=-2.963030): "i : P b i c e 10 ;"
I0123 14:32:32.870679 139772884148224 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2570, in add_clause
    raise DepCheckFailError(
graph.DepCheckFailError: ncoll b c e
"

I0123 14:32:32.870714 139772884148224 alphageometry.py:566] LM output (score=-2.987548): "i : P b g c i 10 P b i c g 11 ;"
I0123 14:32:32.870741 139772884148224 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 14:32:32.870769 139772884148224 alphageometry.py:566] LM output (score=-3.062988): "i : P a b c i 10 T a b a i 11 ;"
I0123 14:32:32.870794 139772884148224 alphageometry.py:567] Translation: "i = on_pline i c a b, on_tline i a a b"

I0123 14:32:32.870823 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i c a b, on_tline i a a b ? simtri a g d f a d"
I0123 14:32:32.870950 139772884148224 graph.py:498] 
I0123 14:32:32.870996 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_circle h b g, on_circle h e g; i = on_pline i c a b, on_tline i a a b ? simtri a g d f a d
I0123 14:32:33.693994 139772884148224 ddar.py:60] Depth 1/1000 time = 0.8043520450592041
I0123 14:32:35.001232 139772884148224 ddar.py:60] Depth 2/1000 time = 1.3070063591003418
I0123 14:32:36.488661 139772884148224 ddar.py:60] Depth 3/1000 time = 1.4871866703033447
I0123 14:32:39.746588 139772884148224 ddar.py:60] Depth 4/1000 time = 3.2576637268066406
I0123 14:32:43.374924 139772884148224 ddar.py:60] Depth 5/1000 time = 3.6280651092529297
I0123 14:32:47.031559 139772884148224 ddar.py:60] Depth 6/1000 time = 3.656358003616333
I0123 14:32:51.212016 139772884148224 ddar.py:60] Depth 7/1000 time = 4.17985200881958
I0123 14:32:54.843174 139772884148224 ddar.py:60] Depth 8/1000 time = 3.611562728881836
I0123 14:32:54.843663 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:32:54.843718 139772884148224 alphageometry.py:566] LM output (score=-3.142420): "i : P b c b i 10 ;"
I0123 14:32:54.843752 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b c b i"

I0123 14:32:54.843802 139772884148224 alphageometry.py:566] LM output (score=-3.170098): "i : P b e b i 10 P c h f i 11 ;"
I0123 14:32:54.843832 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b e b i"

I0123 14:32:54.843866 139772884148224 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b c e 02 T b c d e 03 ; f : C a c f 04 C d e f 05 ; g : C a b g 06 C d f g 07 ? S a g d f a d {F1} x00 h : C a b h 08 D a h b h 09 ; x00
I0123 14:32:58.990491 139772884148224 alphageometry.py:566] LM output (score=-0.300197): "i : T b d b i 10 ;"
I0123 14:32:58.990653 139772884148224 alphageometry.py:567] Translation: "i = on_tline i b b d"

I0123 14:32:58.990705 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_tline i b b d ? simtri a g d f a d"
I0123 14:32:58.990835 139772884148224 graph.py:498] 
I0123 14:32:58.990891 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_tline i b b d ? simtri a g d f a d
I0123 14:32:59.330094 139772884148224 ddar.py:60] Depth 1/1000 time = 0.32814621925354004
I0123 14:33:00.452206 139772884148224 ddar.py:60] Depth 2/1000 time = 1.121898889541626
I0123 14:33:01.859513 139772884148224 ddar.py:60] Depth 3/1000 time = 1.4070558547973633
I0123 14:33:04.218967 139772884148224 ddar.py:60] Depth 4/1000 time = 2.359187602996826
I0123 14:33:06.453268 139772884148224 ddar.py:60] Depth 5/1000 time = 2.2340171337127686
I0123 14:33:08.715351 139772884148224 ddar.py:60] Depth 6/1000 time = 2.261523962020874
I0123 14:33:08.732560 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:33:08.732633 139772884148224 alphageometry.py:566] LM output (score=-1.271820): "i : ^ d b d i d i d c 10 ;"
I0123 14:33:08.732671 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ d b d i d i d c"

I0123 14:33:08.732707 139772884148224 alphageometry.py:566] LM output (score=-1.814351): "i : C b f i 10 D b i f i 11 ;"
I0123 14:33:08.732735 139772884148224 alphageometry.py:567] Translation: "i = on_line i b f, on_bline i f b"

I0123 14:33:08.732767 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_line i b f, on_bline i f b ? simtri a g d f a d"
I0123 14:33:08.732895 139772884148224 graph.py:498] 
I0123 14:33:08.732943 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_line i b f, on_bline i f b ? simtri a g d f a d
I0123 14:33:09.720410 139772884148224 ddar.py:60] Depth 1/1000 time = 0.9723057746887207
I0123 14:33:10.980934 139772884148224 ddar.py:60] Depth 2/1000 time = 1.2602827548980713
I0123 14:33:12.604145 139772884148224 ddar.py:60] Depth 3/1000 time = 1.6229488849639893
I0123 14:33:15.409358 139772884148224 ddar.py:60] Depth 4/1000 time = 2.8048791885375977
I0123 14:33:18.847026 139772884148224 ddar.py:60] Depth 5/1000 time = 3.4373159408569336
I0123 14:33:22.292053 139772884148224 ddar.py:60] Depth 6/1000 time = 3.44461989402771
I0123 14:33:25.112285 139772884148224 ddar.py:60] Depth 7/1000 time = 2.8196606636047363
I0123 14:33:28.553754 139772884148224 ddar.py:60] Depth 8/1000 time = 3.4163811206817627
I0123 14:33:28.554371 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:33:28.554452 139772884148224 alphageometry.py:566] LM output (score=-2.444684): "i : P b c e i 10 ;"
I0123 14:33:28.554488 139772884148224 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2570, in add_clause
    raise DepCheckFailError(
graph.DepCheckFailError: ncoll e b c
"

I0123 14:33:28.554551 139772884148224 alphageometry.py:566] LM output (score=-2.553114): "i : P b h c i 10 ;"
I0123 14:33:28.554582 139772884148224 alphageometry.py:567] Translation: "i = on_pline i c b h"

I0123 14:33:28.554616 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i c b h ? simtri a g d f a d"
I0123 14:33:28.554774 139772884148224 graph.py:498] 
I0123 14:33:28.554829 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i c b h ? simtri a g d f a d
I0123 14:33:28.932547 139772884148224 ddar.py:60] Depth 1/1000 time = 0.3655741214752197
I0123 14:33:30.007612 139772884148224 ddar.py:60] Depth 2/1000 time = 1.0748438835144043
I0123 14:33:31.391248 139772884148224 ddar.py:60] Depth 3/1000 time = 1.3833937644958496
I0123 14:33:33.634685 139772884148224 ddar.py:60] Depth 4/1000 time = 2.243178129196167
I0123 14:33:35.820124 139772884148224 ddar.py:60] Depth 5/1000 time = 2.1851589679718018
I0123 14:33:38.658768 139772884148224 ddar.py:60] Depth 6/1000 time = 2.83804988861084
I0123 14:33:38.675395 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:33:38.675477 139772884148224 alphageometry.py:566] LM output (score=-2.559227): "i : T b g b i 10 ;"
I0123 14:33:38.675516 139772884148224 alphageometry.py:567] Translation: "i = on_tline i b b g"

I0123 14:33:38.675561 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_tline i b b g ? simtri a g d f a d"
I0123 14:33:38.675704 139772884148224 graph.py:498] 
I0123 14:33:38.675759 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_tline i b b g ? simtri a g d f a d
I0123 14:33:39.036750 139772884148224 ddar.py:60] Depth 1/1000 time = 0.34979248046875
I0123 14:33:40.230865 139772884148224 ddar.py:60] Depth 2/1000 time = 1.1938939094543457
I0123 14:33:41.657110 139772884148224 ddar.py:60] Depth 3/1000 time = 1.4260082244873047
I0123 14:33:43.963251 139772884148224 ddar.py:60] Depth 4/1000 time = 2.3058741092681885
I0123 14:33:46.210329 139772884148224 ddar.py:60] Depth 5/1000 time = 2.2468056678771973
I0123 14:33:48.484280 139772884148224 ddar.py:60] Depth 6/1000 time = 2.273357391357422
I0123 14:33:48.501870 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:33:48.501962 139772884148224 alphageometry.py:566] LM output (score=-2.568612): "i : P b h e i 10 ;"
I0123 14:33:48.502001 139772884148224 alphageometry.py:567] Translation: "i = on_pline i e b h"

I0123 14:33:48.502052 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i e b h ? simtri a g d f a d"
I0123 14:33:48.502209 139772884148224 graph.py:498] 
I0123 14:33:48.502262 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i e b h ? simtri a g d f a d
I0123 14:33:49.485722 139772884148224 ddar.py:60] Depth 1/1000 time = 0.9722437858581543
I0123 14:33:49.952998 139772884148224 ddar.py:60] Depth 2/1000 time = 0.46701765060424805
I0123 14:33:51.345283 139772884148224 ddar.py:60] Depth 3/1000 time = 1.392054557800293
I0123 14:33:53.544295 139772884148224 ddar.py:60] Depth 4/1000 time = 2.198737621307373
I0123 14:33:56.334025 139772884148224 ddar.py:60] Depth 5/1000 time = 2.7894487380981445
I0123 14:33:58.570180 139772884148224 ddar.py:60] Depth 6/1000 time = 2.2358648777008057
I0123 14:34:00.799815 139772884148224 ddar.py:60] Depth 7/1000 time = 2.2290878295898438
I0123 14:34:00.814633 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:34:00.814712 139772884148224 alphageometry.py:566] LM output (score=-2.583659): "i : P b c h i 10 ;"
I0123 14:34:00.814750 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b c"

I0123 14:34:00.814786 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i h b c ? simtri a g d f a d"
I0123 14:34:00.814923 139772884148224 graph.py:498] 
I0123 14:34:00.814973 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i h b c ? simtri a g d f a d
I0123 14:34:01.192854 139772884148224 ddar.py:60] Depth 1/1000 time = 0.36690306663513184
I0123 14:34:02.336960 139772884148224 ddar.py:60] Depth 2/1000 time = 1.1437809467315674
I0123 14:34:03.762985 139772884148224 ddar.py:60] Depth 3/1000 time = 1.425766944885254
I0123 14:34:06.008812 139772884148224 ddar.py:60] Depth 4/1000 time = 2.245560884475708
I0123 14:34:08.223912 139772884148224 ddar.py:60] Depth 5/1000 time = 2.2148208618164062
I0123 14:34:10.408283 139772884148224 ddar.py:60] Depth 6/1000 time = 2.18379282951355
I0123 14:34:10.426476 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:34:10.426546 139772884148224 alphageometry.py:566] LM output (score=-2.641942): "i : T b h b i 10 ;"
I0123 14:34:10.426587 139772884148224 alphageometry.py:567] Translation: "i = on_tline i b b h"

I0123 14:34:10.426627 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_tline i b b h ? simtri a g d f a d"
I0123 14:34:10.426766 139772884148224 graph.py:498] 
I0123 14:34:10.426822 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_tline i b b h ? simtri a g d f a d
I0123 14:34:11.381101 139772884148224 ddar.py:60] Depth 1/1000 time = 0.9433066844940186
I0123 14:34:12.038934 139772884148224 ddar.py:60] Depth 2/1000 time = 0.6576004028320312
I0123 14:34:13.463050 139772884148224 ddar.py:60] Depth 3/1000 time = 1.4238736629486084
I0123 14:34:15.749718 139772884148224 ddar.py:60] Depth 4/1000 time = 2.2863950729370117
I0123 14:34:18.649776 139772884148224 ddar.py:60] Depth 5/1000 time = 2.8997628688812256
I0123 14:34:20.928361 139772884148224 ddar.py:60] Depth 6/1000 time = 2.2780046463012695
I0123 14:34:20.945685 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:34:20.945756 139772884148224 alphageometry.py:566] LM output (score=-2.711641): "i : P b h b i 10 ;"
I0123 14:34:20.945792 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b h b i"

I0123 14:34:20.945826 139772884148224 alphageometry.py:566] LM output (score=-2.830035): "i : P b h f i 10 ;"
I0123 14:34:20.945852 139772884148224 alphageometry.py:567] Translation: "i = on_pline i f b h"

I0123 14:34:20.945883 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i f b h ? simtri a g d f a d"
I0123 14:34:20.946017 139772884148224 graph.py:498] 
I0123 14:34:20.946082 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i f b h ? simtri a g d f a d
I0123 14:34:21.321886 139772884148224 ddar.py:60] Depth 1/1000 time = 0.36466264724731445
I0123 14:34:22.401448 139772884148224 ddar.py:60] Depth 2/1000 time = 1.079347848892212
I0123 14:34:23.238729 139772884148224 ddar.py:60] Depth 3/1000 time = 0.8370203971862793
I0123 14:34:26.098952 139772884148224 ddar.py:60] Depth 4/1000 time = 2.859952211380005
I0123 14:34:28.337119 139772884148224 ddar.py:60] Depth 5/1000 time = 2.237887144088745
I0123 14:34:30.578311 139772884148224 ddar.py:60] Depth 6/1000 time = 2.2406790256500244
I0123 14:34:30.594946 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:34:30.595001 139772884148224 alphageometry.py:566] LM output (score=-2.880784): "i : P c e f i 10 P c i e f 11 ;"
I0123 14:34:30.595035 139772884148224 alphageometry.py:567] Translation: "i = on_pline i f c e, on_pline i c e f"

I0123 14:34:30.595071 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i f c e, on_pline i c e f ? simtri a g d f a d"
I0123 14:34:30.595198 139772884148224 graph.py:498] 
I0123 14:34:30.595249 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i f c e, on_pline i c e f ? simtri a g d f a d
I0123 14:34:31.081481 139772884148224 ddar.py:60] Depth 1/1000 time = 0.47238588333129883
I0123 14:34:32.369816 139772884148224 ddar.py:60] Depth 2/1000 time = 1.2880985736846924
I0123 14:34:34.284089 139772884148224 ddar.py:60] Depth 3/1000 time = 1.914027214050293
I0123 14:34:37.419609 139772884148224 ddar.py:60] Depth 4/1000 time = 3.135225772857666
I0123 14:34:41.198749 139772884148224 ddar.py:60] Depth 5/1000 time = 3.7787835597991943
I0123 14:34:44.230202 139772884148224 ddar.py:60] Depth 6/1000 time = 3.030783176422119
I0123 14:34:44.253726 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:34:44.253792 139772884148224 alphageometry.py:566] LM output (score=-2.882631): "i : P b i d f 10 ;"
I0123 14:34:44.253828 139772884148224 alphageometry.py:567] Translation: "i = on_pline i b d f"

I0123 14:34:44.253865 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i b d f ? simtri a g d f a d"
I0123 14:34:44.253998 139772884148224 graph.py:498] 
I0123 14:34:44.254052 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i b d f ? simtri a g d f a d
I0123 14:34:45.245317 139772884148224 ddar.py:60] Depth 1/1000 time = 0.9800951480865479
I0123 14:34:45.736253 139772884148224 ddar.py:60] Depth 2/1000 time = 0.490710973739624
I0123 14:34:47.150253 139772884148224 ddar.py:60] Depth 3/1000 time = 1.4137661457061768
I0123 14:34:49.418958 139772884148224 ddar.py:60] Depth 4/1000 time = 2.2684409618377686
I0123 14:34:52.269536 139772884148224 ddar.py:60] Depth 5/1000 time = 2.850313425064087
I0123 14:34:54.543874 139772884148224 ddar.py:60] Depth 6/1000 time = 2.2737765312194824
I0123 14:34:54.562333 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:34:54.562402 139772884148224 alphageometry.py:566] LM output (score=-2.886693): "i : P b g c i 10 P b i c g 11 ;"
I0123 14:34:54.562439 139772884148224 alphageometry.py:567] Translation: "i = on_pline i c b g, on_pline i b c g"

I0123 14:34:54.562477 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i c b g, on_pline i b c g ? simtri a g d f a d"
I0123 14:34:54.562616 139772884148224 graph.py:498] 
I0123 14:34:54.562663 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i c b g, on_pline i b c g ? simtri a g d f a d
I0123 14:34:55.002950 139772884148224 ddar.py:60] Depth 1/1000 time = 0.42611122131347656
I0123 14:34:56.205516 139772884148224 ddar.py:60] Depth 2/1000 time = 1.2023441791534424
I0123 14:34:57.809247 139772884148224 ddar.py:60] Depth 3/1000 time = 1.6034324169158936
I0123 14:35:02.206543 139772884148224 ddar.py:60] Depth 4/1000 time = 4.396883249282837
I0123 14:35:07.332981 139772884148224 ddar.py:60] Depth 5/1000 time = 5.126145839691162
I0123 14:35:12.431196 139772884148224 ddar.py:60] Depth 6/1000 time = 5.09792947769165
I0123 14:35:17.574370 139772884148224 ddar.py:60] Depth 7/1000 time = 5.1426098346710205
I0123 14:35:17.598396 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:35:17.598463 139772884148224 alphageometry.py:566] LM output (score=-2.891411): "i : P b i e f 10 ;"
I0123 14:35:17.598499 139772884148224 alphageometry.py:567] Translation: "i = on_pline i b e f"

I0123 14:35:17.598536 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i b e f ? simtri a g d f a d"
I0123 14:35:17.598664 139772884148224 graph.py:498] 
I0123 14:35:17.598717 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i b e f ? simtri a g d f a d
I0123 14:35:18.588035 139772884148224 ddar.py:60] Depth 1/1000 time = 0.978278636932373
I0123 14:35:19.076611 139772884148224 ddar.py:60] Depth 2/1000 time = 0.488361120223999
I0123 14:35:20.500809 139772884148224 ddar.py:60] Depth 3/1000 time = 1.4239583015441895
I0123 14:35:22.778856 139772884148224 ddar.py:60] Depth 4/1000 time = 2.27777099609375
I0123 14:35:25.072467 139772884148224 ddar.py:60] Depth 5/1000 time = 2.293294668197632
I0123 14:35:27.339738 139772884148224 ddar.py:60] Depth 6/1000 time = 2.266561508178711
I0123 14:35:27.357302 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:35:27.357381 139772884148224 alphageometry.py:566] LM output (score=-2.911186): "i : P b g c i 10 ;"
I0123 14:35:27.357418 139772884148224 alphageometry.py:567] Translation: "i = on_pline i c b g"

I0123 14:35:27.357455 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i c b g ? simtri a g d f a d"
I0123 14:35:27.357589 139772884148224 graph.py:498] 
I0123 14:35:27.357646 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i c b g ? simtri a g d f a d
I0123 14:35:28.334906 139772884148224 ddar.py:60] Depth 1/1000 time = 0.9656989574432373
I0123 14:35:29.420823 139772884148224 ddar.py:60] Depth 2/1000 time = 1.0856761932373047
I0123 14:35:30.239178 139772884148224 ddar.py:60] Depth 3/1000 time = 0.8181023597717285
I0123 14:35:33.138076 139772884148224 ddar.py:60] Depth 4/1000 time = 2.8986263275146484
I0123 14:35:35.403138 139772884148224 ddar.py:60] Depth 5/1000 time = 2.2648000717163086
I0123 14:35:37.661976 139772884148224 ddar.py:60] Depth 6/1000 time = 2.258291006088257
I0123 14:35:37.679273 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:35:37.679356 139772884148224 alphageometry.py:566] LM output (score=-2.917084): "i : P b g f i 10 P b i f g 11 ;"
I0123 14:35:37.679394 139772884148224 alphageometry.py:567] Translation: "i = on_pline i f b g, on_pline i b f g"

I0123 14:35:37.679431 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i f b g, on_pline i b f g ? simtri a g d f a d"
I0123 14:35:37.679560 139772884148224 graph.py:498] 
I0123 14:35:37.679607 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i f b g, on_pline i b f g ? simtri a g d f a d
I0123 14:35:38.162290 139772884148224 ddar.py:60] Depth 1/1000 time = 0.4690396785736084
I0123 14:35:39.393277 139772884148224 ddar.py:60] Depth 2/1000 time = 1.2307524681091309
I0123 14:35:41.090306 139772884148224 ddar.py:60] Depth 3/1000 time = 1.6967861652374268
I0123 14:35:43.725154 139772884148224 ddar.py:60] Depth 4/1000 time = 2.63458514213562
I0123 14:35:46.342736 139772884148224 ddar.py:60] Depth 5/1000 time = 2.617302417755127
I0123 14:35:48.959732 139772884148224 ddar.py:60] Depth 6/1000 time = 2.616698741912842
I0123 14:35:52.187836 139772884148224 ddar.py:60] Depth 7/1000 time = 3.22752046585083
I0123 14:35:52.205509 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:35:52.205582 139772884148224 alphageometry.py:566] LM output (score=-3.004249): "i : ^ b c b i b g b c 10 ;"
I0123 14:35:52.205619 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b c b i b g b c"

I0123 14:35:52.205660 139772884148224 alphageometry.py:566] LM output (score=-3.073469): "i : P b c b i 10 ;"
I0123 14:35:52.205689 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b c b i"

I0123 14:35:52.205718 139772884148224 alphageometry.py:566] LM output (score=-3.074263): "i : P b i c e 10 ;"
I0123 14:35:52.205744 139772884148224 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2570, in add_clause
    raise DepCheckFailError(
graph.DepCheckFailError: ncoll b c e
"

I0123 14:35:52.205776 139772884148224 alphageometry.py:566] LM output (score=-3.125540): "i : P b i d g 10 ;"
I0123 14:35:52.205803 139772884148224 alphageometry.py:567] Translation: "i = on_pline i b d g"

I0123 14:35:52.205833 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i b d g ? simtri a g d f a d"
I0123 14:35:52.205954 139772884148224 graph.py:498] 
I0123 14:35:52.205999 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i b d g ? simtri a g d f a d
I0123 14:35:52.591367 139772884148224 ddar.py:60] Depth 1/1000 time = 0.3745908737182617
I0123 14:35:53.676095 139772884148224 ddar.py:60] Depth 2/1000 time = 1.0845072269439697
I0123 14:35:55.174385 139772884148224 ddar.py:60] Depth 3/1000 time = 1.4980340003967285
I0123 14:35:57.515403 139772884148224 ddar.py:60] Depth 4/1000 time = 2.3407015800476074
I0123 14:35:59.856999 139772884148224 ddar.py:60] Depth 5/1000 time = 2.3412246704101562
I0123 14:36:02.171328 139772884148224 ddar.py:60] Depth 6/1000 time = 2.3137192726135254
I0123 14:36:02.189466 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:36:02.189561 139772884148224 alphageometry.py:566] LM output (score=-3.127559): "i : P b c h i 10 P b h c i 11 ;"
I0123 14:36:02.189618 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b c, on_pline i c b h"

I0123 14:36:02.189663 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i h b c, on_pline i c b h ? simtri a g d f a d"
I0123 14:36:02.189803 139772884148224 graph.py:498] 
I0123 14:36:02.189856 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i h b c, on_pline i c b h ? simtri a g d f a d
I0123 14:36:02.648905 139772884148224 ddar.py:60] Depth 1/1000 time = 0.4441959857940674
I0123 14:36:03.908638 139772884148224 ddar.py:60] Depth 2/1000 time = 1.259491205215454
I0123 14:36:05.691138 139772884148224 ddar.py:60] Depth 3/1000 time = 1.7822473049163818
I0123 14:36:08.359357 139772884148224 ddar.py:60] Depth 4/1000 time = 2.6679635047912598
I0123 14:36:11.045758 139772884148224 ddar.py:60] Depth 5/1000 time = 2.68613600730896
I0123 14:36:14.348124 139772884148224 ddar.py:60] Depth 6/1000 time = 3.3020973205566406
I0123 14:36:17.056353 139772884148224 ddar.py:60] Depth 7/1000 time = 2.7076525688171387
I0123 14:36:17.075147 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:36:17.075202 139772884148224 alphageometry.py:566] LM output (score=-3.153307): "i : ^ b c b d b i d h 10 ^ b c b i d b d h 11 ;"
I0123 14:36:17.075237 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b c b d b i d h"

I0123 14:36:17.075271 139772884148224 alphageometry.py:566] LM output (score=-3.154057): "i : P b h e i 10 P b i e h 11 ;"
I0123 14:36:17.075298 139772884148224 alphageometry.py:567] Translation: "i = on_pline i e b h, on_pline i b e h"

I0123 14:36:17.075328 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i e b h, on_pline i b e h ? simtri a g d f a d"
I0123 14:36:17.075453 139772884148224 graph.py:498] 
I0123 14:36:17.075499 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i e b h, on_pline i b e h ? simtri a g d f a d
I0123 14:36:17.511870 139772884148224 ddar.py:60] Depth 1/1000 time = 0.4221374988555908
I0123 14:36:18.751367 139772884148224 ddar.py:60] Depth 2/1000 time = 1.2392733097076416
I0123 14:36:20.524786 139772884148224 ddar.py:60] Depth 3/1000 time = 1.7731757164001465
I0123 14:36:23.262347 139772884148224 ddar.py:60] Depth 4/1000 time = 2.7372922897338867
I0123 14:36:26.001590 139772884148224 ddar.py:60] Depth 5/1000 time = 2.738959789276123
I0123 14:36:29.389148 139772884148224 ddar.py:60] Depth 6/1000 time = 3.387282133102417
I0123 14:36:32.160923 139772884148224 ddar.py:60] Depth 7/1000 time = 2.771230936050415
I0123 14:36:32.179943 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:36:32.180011 139772884148224 alphageometry.py:566] LM output (score=-3.156349): "i : P b g f i 10 ;"
I0123 14:36:32.180047 139772884148224 alphageometry.py:567] Translation: "i = on_pline i f b g"

I0123 14:36:32.180083 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i f b g ? simtri a g d f a d"
I0123 14:36:32.180212 139772884148224 graph.py:498] 
I0123 14:36:32.180261 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i f b g ? simtri a g d f a d
I0123 14:36:32.560442 139772884148224 ddar.py:60] Depth 1/1000 time = 0.36890602111816406
I0123 14:36:33.686234 139772884148224 ddar.py:60] Depth 2/1000 time = 1.1255836486816406
I0123 14:36:35.161062 139772884148224 ddar.py:60] Depth 3/1000 time = 1.4745872020721436
I0123 14:36:37.527872 139772884148224 ddar.py:60] Depth 4/1000 time = 2.366539478302002
I0123 14:36:39.821293 139772884148224 ddar.py:60] Depth 5/1000 time = 2.2931275367736816
I0123 14:36:42.137756 139772884148224 ddar.py:60] Depth 6/1000 time = 2.3159022331237793
I0123 14:36:42.154689 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:36:42.154758 139772884148224 alphageometry.py:566] LM output (score=-3.166009): "i : ^ b a b c b c b i 10 ;"
I0123 14:36:42.154795 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b a b c b c b i"

I0123 14:36:42.154830 139772884148224 alphageometry.py:566] LM output (score=-3.177079): "i : C b f i 10 D b f f i 11 ;"
I0123 14:36:42.154859 139772884148224 alphageometry.py:567] Translation: "i = on_line i b f, on_circle i f b"

I0123 14:36:42.154890 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_line i b f, on_circle i f b ? simtri a g d f a d"
I0123 14:36:42.155023 139772884148224 graph.py:498] 
I0123 14:36:42.155077 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_line i b f, on_circle i f b ? simtri a g d f a d
I0123 14:36:42.557216 139772884148224 ddar.py:60] Depth 1/1000 time = 0.3868129253387451
I0123 14:36:43.807535 139772884148224 ddar.py:60] Depth 2/1000 time = 1.2500903606414795
I0123 14:36:45.425215 139772884148224 ddar.py:60] Depth 3/1000 time = 1.6174261569976807
I0123 14:36:48.318836 139772884148224 ddar.py:60] Depth 4/1000 time = 2.8933656215667725
I0123 14:36:51.260405 139772884148224 ddar.py:60] Depth 5/1000 time = 2.941310167312622
I0123 14:36:54.850954 139772884148224 ddar.py:60] Depth 6/1000 time = 3.5902740955352783
I0123 14:36:57.788529 139772884148224 ddar.py:60] Depth 7/1000 time = 2.93698787689209
I0123 14:36:57.815215 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:36:57.815290 139772884148224 alphageometry.py:566] LM output (score=-3.217546): "i : ^ b c b i b d b c 10 ;"
I0123 14:36:57.815327 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b c b i b d b c"

I0123 14:36:57.815362 139772884148224 alphageometry.py:566] LM output (score=-3.244067): "i : P b i c f 10 ;"
I0123 14:36:57.815389 139772884148224 alphageometry.py:567] Translation: "i = on_pline i b c f"

I0123 14:36:57.815420 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i b c f ? simtri a g d f a d"
I0123 14:36:57.815542 139772884148224 graph.py:498] 
I0123 14:36:57.815589 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i b c f ? simtri a g d f a d
I0123 14:36:58.178583 139772884148224 ddar.py:60] Depth 1/1000 time = 0.3508150577545166
I0123 14:36:59.293803 139772884148224 ddar.py:60] Depth 2/1000 time = 1.1150054931640625
I0123 14:37:00.768336 139772884148224 ddar.py:60] Depth 3/1000 time = 1.4742753505706787
I0123 14:37:03.149405 139772884148224 ddar.py:60] Depth 4/1000 time = 2.380805730819702
I0123 14:37:04.813168 139772884148224 ddar.py:60] Depth 5/1000 time = 1.663496494293213
I0123 14:37:07.732424 139772884148224 ddar.py:60] Depth 6/1000 time = 2.9187440872192383
I0123 14:37:07.748631 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:37:07.748716 139772884148224 alphageometry.py:566] LM output (score=-3.255182): "i : P b h f i 10 P b i f h 11 ;"
I0123 14:37:07.748755 139772884148224 alphageometry.py:567] Translation: "i = on_pline i f b h, on_pline i b f h"

I0123 14:37:07.748792 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i f b h, on_pline i b f h ? simtri a g d f a d"
I0123 14:37:07.748919 139772884148224 graph.py:498] 
I0123 14:37:07.748966 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i f b h, on_pline i b f h ? simtri a g d f a d
I0123 14:37:08.185325 139772884148224 ddar.py:60] Depth 1/1000 time = 0.42136168479919434
I0123 14:37:09.535033 139772884148224 ddar.py:60] Depth 2/1000 time = 1.3494789600372314
I0123 14:37:11.510365 139772884148224 ddar.py:60] Depth 3/1000 time = 1.9750351905822754
I0123 14:37:15.339301 139772884148224 ddar.py:60] Depth 4/1000 time = 3.8283989429473877
I0123 14:37:19.282927 139772884148224 ddar.py:60] Depth 5/1000 time = 3.9430747032165527
I0123 14:37:24.206549 139772884148224 ddar.py:60] Depth 6/1000 time = 4.922891139984131
I0123 14:37:27.476733 139772884148224 ddar.py:60] Depth 7/1000 time = 3.268549680709839
I0123 14:37:27.499365 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:37:27.499446 139772884148224 alphageometry.py:566] LM output (score=-3.256818): "i : P b i e g 10 ;"
I0123 14:37:27.499484 139772884148224 alphageometry.py:567] Translation: "i = on_pline i b e g"

I0123 14:37:27.499521 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i b e g ? simtri a g d f a d"
I0123 14:37:27.499670 139772884148224 graph.py:498] 
I0123 14:37:27.499740 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i b e g ? simtri a g d f a d
I0123 14:37:27.898311 139772884148224 ddar.py:60] Depth 1/1000 time = 0.3850440979003906
I0123 14:37:29.060104 139772884148224 ddar.py:60] Depth 2/1000 time = 1.1615233421325684
I0123 14:37:30.596974 139772884148224 ddar.py:60] Depth 3/1000 time = 1.5365688800811768
I0123 14:37:33.041307 139772884148224 ddar.py:60] Depth 4/1000 time = 2.4439456462860107
I0123 14:37:35.463042 139772884148224 ddar.py:60] Depth 5/1000 time = 2.4212634563446045
I0123 14:37:37.831035 139772884148224 ddar.py:60] Depth 6/1000 time = 2.36733341217041
I0123 14:37:37.848778 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:37:37.848853 139772884148224 alphageometry.py:566] LM output (score=-3.260929): "i : P c e f i 10 ;"
I0123 14:37:37.848891 139772884148224 alphageometry.py:567] Translation: "i = on_pline i f c e"

I0123 14:37:37.848929 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i f c e ? simtri a g d f a d"
I0123 14:37:37.849078 139772884148224 graph.py:498] 
I0123 14:37:37.849135 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a b, on_bline h b a; i = on_pline i f c e ? simtri a g d f a d
I0123 14:37:38.228272 139772884148224 ddar.py:60] Depth 1/1000 time = 0.3672962188720703
I0123 14:37:39.459022 139772884148224 ddar.py:60] Depth 2/1000 time = 1.2305006980895996
I0123 14:37:40.286041 139772884148224 ddar.py:60] Depth 3/1000 time = 0.8267154693603516
I0123 14:37:42.568520 139772884148224 ddar.py:60] Depth 4/1000 time = 2.282137870788574
I0123 14:37:44.862359 139772884148224 ddar.py:60] Depth 5/1000 time = 2.293440341949463
I0123 14:37:47.133818 139772884148224 ddar.py:60] Depth 6/1000 time = 2.270641565322876
I0123 14:37:47.151664 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:37:47.151757 139772884148224 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b c e 02 T b c d e 03 ; f : C a c f 04 C d e f 05 ; g : C a b g 06 C d f g 07 ? S a g d f a d {F1} x00 h : T b f b h 08 ; x00
I0123 14:37:53.336979 139772884148224 alphageometry.py:566] LM output (score=-0.491857): "i : P b h f i 09 ;"
I0123 14:37:53.337168 139772884148224 alphageometry.py:567] Translation: "i = on_pline i f b h"

I0123 14:37:53.337209 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i f b h ? simtri a g d f a d"
I0123 14:37:53.337332 139772884148224 graph.py:498] 
I0123 14:37:53.337382 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i f b h ? simtri a g d f a d
I0123 14:37:54.258827 139772884148224 ddar.py:60] Depth 1/1000 time = 0.9122674465179443
I0123 14:37:54.542473 139772884148224 ddar.py:60] Depth 2/1000 time = 0.2833902835845947
I0123 14:37:54.877359 139772884148224 ddar.py:60] Depth 3/1000 time = 0.3346831798553467
I0123 14:37:55.690030 139772884148224 ddar.py:60] Depth 4/1000 time = 0.812453031539917
I0123 14:37:57.222829 139772884148224 ddar.py:60] Depth 5/1000 time = 1.5325095653533936
I0123 14:37:58.084741 139772884148224 ddar.py:60] Depth 6/1000 time = 0.861365556716919
I0123 14:37:58.091516 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:37:58.091576 139772884148224 alphageometry.py:566] LM output (score=-0.666280): "i : P b f h i 09 ;"
I0123 14:37:58.091612 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b f"

I0123 14:37:58.091650 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i h b f ? simtri a g d f a d"
I0123 14:37:58.091782 139772884148224 graph.py:498] 
I0123 14:37:58.091830 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i h b f ? simtri a g d f a d
I0123 14:37:59.007521 139772884148224 ddar.py:60] Depth 1/1000 time = 0.9064590930938721
I0123 14:37:59.284894 139772884148224 ddar.py:60] Depth 2/1000 time = 0.27709436416625977
I0123 14:37:59.624390 139772884148224 ddar.py:60] Depth 3/1000 time = 0.3392941951751709
I0123 14:38:00.377158 139772884148224 ddar.py:60] Depth 4/1000 time = 0.752535343170166
I0123 14:38:01.900203 139772884148224 ddar.py:60] Depth 5/1000 time = 1.5227646827697754
I0123 14:38:02.765812 139772884148224 ddar.py:60] Depth 6/1000 time = 0.8650209903717041
I0123 14:38:02.772944 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:38:02.773013 139772884148224 alphageometry.py:566] LM output (score=-0.747626): "i : P b f h i 09 P b h f i 10 ;"
I0123 14:38:02.773050 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b f, on_pline i f b h"

I0123 14:38:02.773088 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i h b f, on_pline i f b h ? simtri a g d f a d"
I0123 14:38:02.773223 139772884148224 graph.py:498] 
I0123 14:38:02.773270 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i h b f, on_pline i f b h ? simtri a g d f a d
I0123 14:38:03.731576 139772884148224 ddar.py:60] Depth 1/1000 time = 0.9451727867126465
I0123 14:38:04.168201 139772884148224 ddar.py:60] Depth 2/1000 time = 0.43634533882141113
I0123 14:38:04.704751 139772884148224 ddar.py:60] Depth 3/1000 time = 0.5363082885742188
I0123 14:38:06.465483 139772884148224 ddar.py:60] Depth 4/1000 time = 1.7604522705078125
I0123 14:38:07.638609 139772884148224 ddar.py:60] Depth 5/1000 time = 1.1728112697601318
I0123 14:38:09.501604 139772884148224 ddar.py:60] Depth 6/1000 time = 1.8623628616333008
I0123 14:38:09.510898 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:38:09.510965 139772884148224 alphageometry.py:566] LM output (score=-3.429359): "i : D b i h i 09 D c i h i 10 ;"
I0123 14:38:09.511002 139772884148224 alphageometry.py:567] Translation: "i = on_bline i h b, on_bline i h c"

I0123 14:38:09.511040 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_bline i h b, on_bline i h c ? simtri a g d f a d"
I0123 14:38:09.511172 139772884148224 graph.py:498] 
I0123 14:38:09.511220 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_bline i h b, on_bline i h c ? simtri a g d f a d
I0123 14:38:09.842418 139772884148224 ddar.py:60] Depth 1/1000 time = 0.3168199062347412
I0123 14:38:11.295996 139772884148224 ddar.py:60] Depth 2/1000 time = 1.4533534049987793
I0123 14:38:13.157067 139772884148224 ddar.py:60] Depth 3/1000 time = 1.8607439994812012
I0123 14:38:15.493420 139772884148224 ddar.py:60] Depth 4/1000 time = 2.335998296737671
I0123 14:38:17.859254 139772884148224 ddar.py:60] Depth 5/1000 time = 2.365475654602051
I0123 14:38:20.222143 139772884148224 ddar.py:60] Depth 6/1000 time = 2.362513542175293
I0123 14:38:22.619240 139772884148224 ddar.py:60] Depth 7/1000 time = 2.396406650543213
I0123 14:38:22.631915 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:38:22.631996 139772884148224 alphageometry.py:566] LM output (score=-3.637811): "i : D b h h i 09 D f i h i 10 ;"
I0123 14:38:22.632033 139772884148224 alphageometry.py:567] Translation: "i = on_circle i h b, on_bline i h f"

I0123 14:38:22.632078 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_circle i h b, on_bline i h f ? simtri a g d f a d"
I0123 14:38:22.632230 139772884148224 graph.py:498] 
I0123 14:38:22.632282 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_circle i h b, on_bline i h f ? simtri a g d f a d
I0123 14:38:22.931964 139772884148224 ddar.py:60] Depth 1/1000 time = 0.284426212310791
I0123 14:38:23.313100 139772884148224 ddar.py:60] Depth 2/1000 time = 0.38093018531799316
I0123 14:38:23.754918 139772884148224 ddar.py:60] Depth 3/1000 time = 0.44158053398132324
I0123 14:38:25.407696 139772884148224 ddar.py:60] Depth 4/1000 time = 1.6525344848632812
I0123 14:38:26.401057 139772884148224 ddar.py:60] Depth 5/1000 time = 0.9930663108825684
I0123 14:38:28.085625 139772884148224 ddar.py:60] Depth 6/1000 time = 1.6840295791625977
I0123 14:38:28.093410 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:38:28.093467 139772884148224 alphageometry.py:566] LM output (score=-3.803162): "i : P b g c i 09 P b i c g 10 ;"
I0123 14:38:28.093503 139772884148224 alphageometry.py:567] Translation: "i = on_pline i c b g, on_pline i b c g"

I0123 14:38:28.093542 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i c b g, on_pline i b c g ? simtri a g d f a d"
I0123 14:38:28.093711 139772884148224 graph.py:498] 
I0123 14:38:28.093763 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i c b g, on_pline i b c g ? simtri a g d f a d
I0123 14:38:28.386665 139772884148224 ddar.py:60] Depth 1/1000 time = 0.27895355224609375
I0123 14:38:28.750640 139772884148224 ddar.py:60] Depth 2/1000 time = 0.3637692928314209
I0123 14:38:29.192657 139772884148224 ddar.py:60] Depth 3/1000 time = 0.4418179988861084
I0123 14:38:32.475906 139772884148224 ddar.py:60] Depth 4/1000 time = 3.283017158508301
I0123 14:38:35.171124 139772884148224 ddar.py:60] Depth 5/1000 time = 2.694927930831909
I0123 14:38:37.843691 139772884148224 ddar.py:60] Depth 6/1000 time = 2.672187328338623
I0123 14:38:41.258450 139772884148224 ddar.py:60] Depth 7/1000 time = 3.414083242416382
I0123 14:38:41.270962 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:38:41.271034 139772884148224 alphageometry.py:566] LM output (score=-3.920835): "i : D b h h i 09 P b f h i 10 ;"
I0123 14:38:41.271072 139772884148224 alphageometry.py:567] Translation: "i = on_circle i h b, on_pline i h b f"

I0123 14:38:41.271111 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_circle i h b, on_pline i h b f ? simtri a g d f a d"
I0123 14:38:41.271262 139772884148224 graph.py:498] 
I0123 14:38:41.271322 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_circle i h b, on_pline i h b f ? simtri a g d f a d
I0123 14:38:41.520814 139772884148224 ddar.py:60] Depth 1/1000 time = 0.23625493049621582
I0123 14:38:41.834482 139772884148224 ddar.py:60] Depth 2/1000 time = 0.3134884834289551
I0123 14:38:42.208275 139772884148224 ddar.py:60] Depth 3/1000 time = 0.373598575592041
I0123 14:38:43.748884 139772884148224 ddar.py:60] Depth 4/1000 time = 1.540369987487793
I0123 14:38:44.681277 139772884148224 ddar.py:60] Depth 5/1000 time = 0.9320809841156006
I0123 14:38:45.603552 139772884148224 ddar.py:60] Depth 6/1000 time = 0.9216091632843018
I0123 14:38:47.200546 139772884148224 ddar.py:60] Depth 7/1000 time = 1.5964772701263428
I0123 14:38:47.208107 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:38:47.208164 139772884148224 alphageometry.py:566] LM output (score=-4.031273): "i : T b d b i 09 ;"
I0123 14:38:47.208198 139772884148224 alphageometry.py:567] Translation: "i = on_tline i b b d"

I0123 14:38:47.208233 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_tline i b b d ? simtri a g d f a d"
I0123 14:38:47.208360 139772884148224 graph.py:498] 
I0123 14:38:47.208408 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_tline i b b d ? simtri a g d f a d
I0123 14:38:47.434927 139772884148224 ddar.py:60] Depth 1/1000 time = 0.21575045585632324
I0123 14:38:47.767886 139772884148224 ddar.py:60] Depth 2/1000 time = 0.3327457904815674
I0123 14:38:48.965829 139772884148224 ddar.py:60] Depth 3/1000 time = 1.1977076530456543
I0123 14:38:49.873951 139772884148224 ddar.py:60] Depth 4/1000 time = 0.9078001976013184
I0123 14:38:50.781376 139772884148224 ddar.py:60] Depth 5/1000 time = 0.9070944786071777
I0123 14:38:52.352518 139772884148224 ddar.py:60] Depth 6/1000 time = 1.5705950260162354
I0123 14:38:52.360221 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:38:52.360280 139772884148224 alphageometry.py:566] LM output (score=-4.250951): "i : D b g b i 09 D g h h i 10 ;"
I0123 14:38:52.360316 139772884148224 alphageometry.py:567] Translation: "i = on_circle i b g, on_circle i h g"

I0123 14:38:52.360354 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_circle i b g, on_circle i h g ? simtri a g d f a d"
I0123 14:38:52.360491 139772884148224 graph.py:498] 
I0123 14:38:52.360546 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_circle i b g, on_circle i h g ? simtri a g d f a d
I0123 14:38:52.634605 139772884148224 ddar.py:60] Depth 1/1000 time = 0.25908946990966797
I0123 14:38:53.021399 139772884148224 ddar.py:60] Depth 2/1000 time = 0.386584997177124
I0123 14:38:54.192751 139772884148224 ddar.py:60] Depth 3/1000 time = 1.1711153984069824
I0123 14:38:55.183471 139772884148224 ddar.py:60] Depth 4/1000 time = 0.9904093742370605
I0123 14:38:57.052026 139772884148224 ddar.py:60] Depth 5/1000 time = 1.8681790828704834
I0123 14:38:58.165401 139772884148224 ddar.py:60] Depth 6/1000 time = 1.1129179000854492
I0123 14:38:59.268577 139772884148224 ddar.py:60] Depth 7/1000 time = 1.1025285720825195
I0123 14:38:59.279795 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:38:59.279902 139772884148224 alphageometry.py:566] LM output (score=-4.408820): "i : P b c b i 09 T b h b i 10 ;"
I0123 14:38:59.279937 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b c b i"

I0123 14:38:59.279989 139772884148224 alphageometry.py:566] LM output (score=-4.463706): "i : P b c f i 09 P b i c f 10 ;"
I0123 14:38:59.280017 139772884148224 alphageometry.py:567] Translation: "i = on_pline i f b c, on_pline i b c f"

I0123 14:38:59.280050 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i f b c, on_pline i b c f ? simtri a g d f a d"
I0123 14:38:59.280231 139772884148224 graph.py:498] 
I0123 14:38:59.280285 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i f b c, on_pline i b c f ? simtri a g d f a d
I0123 14:39:00.335441 139772884148224 ddar.py:60] Depth 1/1000 time = 1.0412511825561523
I0123 14:39:00.714105 139772884148224 ddar.py:60] Depth 2/1000 time = 0.3783857822418213
I0123 14:39:01.148576 139772884148224 ddar.py:60] Depth 3/1000 time = 0.4342153072357178
I0123 14:39:02.868586 139772884148224 ddar.py:60] Depth 4/1000 time = 1.7197377681732178
I0123 14:39:03.977014 139772884148224 ddar.py:60] Depth 5/1000 time = 1.108121395111084
I0123 14:39:05.787134 139772884148224 ddar.py:60] Depth 6/1000 time = 1.809546709060669
I0123 14:39:05.795559 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:39:05.795624 139772884148224 alphageometry.py:566] LM output (score=-4.469615): "i : D b g b i 09 T b h g i 10 ;"
I0123 14:39:05.795662 139772884148224 alphageometry.py:567] Translation: "i = on_circle i b g, on_tline i g b h"

I0123 14:39:05.795698 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_circle i b g, on_tline i g b h ? simtri a g d f a d"
I0123 14:39:05.795831 139772884148224 graph.py:498] 
I0123 14:39:05.795878 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_circle i b g, on_tline i g b h ? simtri a g d f a d
I0123 14:39:06.049568 139772884148224 ddar.py:60] Depth 1/1000 time = 0.2406013011932373
I0123 14:39:06.371809 139772884148224 ddar.py:60] Depth 2/1000 time = 0.322049617767334
I0123 14:39:07.458295 139772884148224 ddar.py:60] Depth 3/1000 time = 1.0862743854522705
I0123 14:39:08.309055 139772884148224 ddar.py:60] Depth 4/1000 time = 0.8504726886749268
I0123 14:39:09.300863 139772884148224 ddar.py:60] Depth 5/1000 time = 0.9915220737457275
I0123 14:39:10.972776 139772884148224 ddar.py:60] Depth 6/1000 time = 1.6716079711914062
I0123 14:39:11.945705 139772884148224 ddar.py:60] Depth 7/1000 time = 0.9723539352416992
I0123 14:39:13.630712 139772884148224 ddar.py:60] Depth 8/1000 time = 1.6827306747436523
I0123 14:39:14.702141 139772884148224 ddar.py:60] Depth 9/1000 time = 1.0711100101470947
I0123 14:39:16.488614 139772884148224 ddar.py:60] Depth 10/1000 time = 1.7861404418945312
I0123 14:39:16.496996 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:39:16.497069 139772884148224 alphageometry.py:566] LM output (score=-4.477173): "i : P a b c i 09 ;"
I0123 14:39:16.497106 139772884148224 alphageometry.py:567] Translation: "i = on_pline i c a b"

I0123 14:39:16.497144 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i c a b ? simtri a g d f a d"
I0123 14:39:16.497274 139772884148224 graph.py:498] 
I0123 14:39:16.497320 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i c a b ? simtri a g d f a d
I0123 14:39:16.740451 139772884148224 ddar.py:60] Depth 1/1000 time = 0.2326183319091797
I0123 14:39:17.004827 139772884148224 ddar.py:60] Depth 2/1000 time = 0.2641866207122803
I0123 14:39:17.323786 139772884148224 ddar.py:60] Depth 3/1000 time = 0.31876039505004883
I0123 14:39:18.814947 139772884148224 ddar.py:60] Depth 4/1000 time = 1.4909229278564453
I0123 14:39:19.695815 139772884148224 ddar.py:60] Depth 5/1000 time = 0.8805036544799805
I0123 14:39:21.330068 139772884148224 ddar.py:60] Depth 6/1000 time = 1.6335890293121338
I0123 14:39:21.337325 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:39:21.337402 139772884148224 alphageometry.py:566] LM output (score=-4.490611): "i : P c e f i 09 P c i e f 10 ;"
I0123 14:39:21.337439 139772884148224 alphageometry.py:567] Translation: "i = on_pline i f c e, on_pline i c e f"

I0123 14:39:21.337475 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i f c e, on_pline i c e f ? simtri a g d f a d"
I0123 14:39:21.337622 139772884148224 graph.py:498] 
I0123 14:39:21.337687 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i f c e, on_pline i c e f ? simtri a g d f a d
I0123 14:39:21.686713 139772884148224 ddar.py:60] Depth 1/1000 time = 0.3349645137786865
I0123 14:39:22.145702 139772884148224 ddar.py:60] Depth 2/1000 time = 0.4587728977203369
I0123 14:39:23.542898 139772884148224 ddar.py:60] Depth 3/1000 time = 1.3969414234161377
I0123 14:39:24.828946 139772884148224 ddar.py:60] Depth 4/1000 time = 1.2857592105865479
I0123 14:39:26.962797 139772884148224 ddar.py:60] Depth 5/1000 time = 2.1335344314575195
I0123 14:39:28.365245 139772884148224 ddar.py:60] Depth 6/1000 time = 1.4017834663391113
I0123 14:39:28.375558 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:39:28.375625 139772884148224 alphageometry.py:566] LM output (score=-4.495100): "i : P b c b i 09 ;"
I0123 14:39:28.375684 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b c b i"

I0123 14:39:28.375724 139772884148224 alphageometry.py:566] LM output (score=-4.523187): "i : P b d e i 09 P b e d i 10 ;"
I0123 14:39:28.375751 139772884148224 alphageometry.py:567] Translation: "i = on_pline i e b d, on_pline i d b e"

I0123 14:39:28.375781 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i e b d, on_pline i d b e ? simtri a g d f a d"
I0123 14:39:28.375918 139772884148224 graph.py:498] 
I0123 14:39:28.375964 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i e b d, on_pline i d b e ? simtri a g d f a d
I0123 14:39:29.409485 139772884148224 ddar.py:60] Depth 1/1000 time = 1.0199434757232666
I0123 14:39:29.843601 139772884148224 ddar.py:60] Depth 2/1000 time = 0.4338498115539551
I0123 14:39:30.549951 139772884148224 ddar.py:60] Depth 3/1000 time = 0.7060976028442383
I0123 14:39:32.631043 139772884148224 ddar.py:60] Depth 4/1000 time = 2.080824136734009
I0123 14:39:34.084772 139772884148224 ddar.py:60] Depth 5/1000 time = 1.453416109085083
I0123 14:39:36.230766 139772884148224 ddar.py:60] Depth 6/1000 time = 2.145310163497925
I0123 14:39:36.240858 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:39:36.240926 139772884148224 alphageometry.py:566] LM output (score=-4.530958): "i : P b g h i 09 P b h g i 10 ;"
I0123 14:39:36.240963 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b g, on_pline i g b h"

I0123 14:39:36.241003 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i h b g, on_pline i g b h ? simtri a g d f a d"
I0123 14:39:36.241135 139772884148224 graph.py:498] 
I0123 14:39:36.241184 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i h b g, on_pline i g b h ? simtri a g d f a d
I0123 14:39:36.516211 139772884148224 ddar.py:60] Depth 1/1000 time = 0.26178407669067383
I0123 14:39:36.863195 139772884148224 ddar.py:60] Depth 2/1000 time = 0.3467891216278076
I0123 14:39:38.000618 139772884148224 ddar.py:60] Depth 3/1000 time = 1.1372101306915283
I0123 14:39:38.913225 139772884148224 ddar.py:60] Depth 4/1000 time = 0.912304162979126
I0123 14:39:40.681024 139772884148224 ddar.py:60] Depth 5/1000 time = 1.7674858570098877
I0123 14:39:41.704291 139772884148224 ddar.py:60] Depth 6/1000 time = 1.022686243057251
I0123 14:39:41.712675 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:39:41.712744 139772884148224 alphageometry.py:566] LM output (score=-4.534437): "i : T b h h i 09 ;"
I0123 14:39:41.712782 139772884148224 alphageometry.py:567] Translation: "i = on_tline i h b h"

I0123 14:39:41.712818 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_tline i h b h ? simtri a g d f a d"
I0123 14:39:41.712947 139772884148224 graph.py:498] 
I0123 14:39:41.712993 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_tline i h b h ? simtri a g d f a d
I0123 14:39:41.939046 139772884148224 ddar.py:60] Depth 1/1000 time = 0.21686029434204102
I0123 14:39:42.937201 139772884148224 ddar.py:60] Depth 2/1000 time = 0.9979465007781982
I0123 14:39:43.271411 139772884148224 ddar.py:60] Depth 3/1000 time = 0.33394718170166016
I0123 14:39:44.043677 139772884148224 ddar.py:60] Depth 4/1000 time = 0.7720456123352051
I0123 14:39:45.686439 139772884148224 ddar.py:60] Depth 5/1000 time = 1.6424455642700195
I0123 14:39:46.536641 139772884148224 ddar.py:60] Depth 6/1000 time = 0.8496472835540771
I0123 14:39:46.543909 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:39:46.543965 139772884148224 alphageometry.py:566] LM output (score=-4.573109): "i : P b g c i 09 T b h b i 10 ;"
I0123 14:39:46.544001 139772884148224 alphageometry.py:567] Translation: "i = on_pline i c b g, on_tline i b b h"

I0123 14:39:46.544037 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i c b g, on_tline i b b h ? simtri a g d f a d"
I0123 14:39:46.544171 139772884148224 graph.py:498] 
I0123 14:39:46.544217 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i c b g, on_tline i b b h ? simtri a g d f a d
I0123 14:39:46.857759 139772884148224 ddar.py:60] Depth 1/1000 time = 0.3028073310852051
I0123 14:39:48.006718 139772884148224 ddar.py:60] Depth 2/1000 time = 1.1487152576446533
I0123 14:39:48.449506 139772884148224 ddar.py:60] Depth 3/1000 time = 0.44249939918518066
I0123 14:39:49.415676 139772884148224 ddar.py:60] Depth 4/1000 time = 0.9659023284912109
I0123 14:39:51.224325 139772884148224 ddar.py:60] Depth 5/1000 time = 1.8083422183990479
I0123 14:39:53.069469 139772884148224 ddar.py:60] Depth 6/1000 time = 1.8448007106781006
I0123 14:39:54.159789 139772884148224 ddar.py:60] Depth 7/1000 time = 1.0897161960601807
I0123 14:39:54.169117 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:39:54.169185 139772884148224 alphageometry.py:566] LM output (score=-4.662968): "i : P b c e i 09 ;"
I0123 14:39:54.169221 139772884148224 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2570, in add_clause
    raise DepCheckFailError(
graph.DepCheckFailError: ncoll e b c
"

I0123 14:39:54.169258 139772884148224 alphageometry.py:566] LM output (score=-4.668378): "i : P b c d i 09 ;"
I0123 14:39:54.169285 139772884148224 alphageometry.py:567] Translation: "i = on_pline i d b c"

I0123 14:39:54.169314 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i d b c ? simtri a g d f a d"
I0123 14:39:54.169452 139772884148224 graph.py:498] 
I0123 14:39:54.169507 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i d b c ? simtri a g d f a d
I0123 14:39:54.429529 139772884148224 ddar.py:60] Depth 1/1000 time = 0.25035810470581055
I0123 14:39:55.450437 139772884148224 ddar.py:60] Depth 2/1000 time = 1.020688533782959
I0123 14:39:55.810091 139772884148224 ddar.py:60] Depth 3/1000 time = 0.35939502716064453
I0123 14:39:56.591186 139772884148224 ddar.py:60] Depth 4/1000 time = 0.7808589935302734
I0123 14:39:58.198421 139772884148224 ddar.py:60] Depth 5/1000 time = 1.606942892074585
I0123 14:39:59.066965 139772884148224 ddar.py:60] Depth 6/1000 time = 0.8679783344268799
I0123 14:39:59.074326 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:39:59.074392 139772884148224 alphageometry.py:566] LM output (score=-4.673414): "i : P b f b i 09 ;"
I0123 14:39:59.074427 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b f b i"

I0123 14:39:59.074462 139772884148224 alphageometry.py:566] LM output (score=-4.759691): "i : P b c d i 09 P b i c d 10 ;"
I0123 14:39:59.074513 139772884148224 alphageometry.py:567] Translation: "i = on_pline i d b c, on_pline i b c d"

I0123 14:39:59.074545 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i d b c, on_pline i b c d ? simtri a g d f a d"
I0123 14:39:59.074678 139772884148224 graph.py:498] 
I0123 14:39:59.074726 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i d b c, on_pline i b c d ? simtri a g d f a d
I0123 14:39:59.372554 139772884148224 ddar.py:60] Depth 1/1000 time = 0.28441643714904785
I0123 14:40:00.512444 139772884148224 ddar.py:60] Depth 2/1000 time = 1.1396713256835938
I0123 14:40:01.014129 139772884148224 ddar.py:60] Depth 3/1000 time = 0.5014066696166992
I0123 14:40:02.003596 139772884148224 ddar.py:60] Depth 4/1000 time = 0.9891738891601562
I0123 14:40:03.794493 139772884148224 ddar.py:60] Depth 5/1000 time = 1.790585994720459
I0123 14:40:04.864078 139772884148224 ddar.py:60] Depth 6/1000 time = 1.0690100193023682
I0123 14:40:04.872131 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:40:04.872199 139772884148224 alphageometry.py:566] LM output (score=-4.832950): "i : P b g h i 09 ;"
I0123 14:40:04.872236 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b g"

I0123 14:40:04.872275 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i h b g ? simtri a g d f a d"
I0123 14:40:04.872403 139772884148224 graph.py:498] 
I0123 14:40:04.872451 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i h b g ? simtri a g d f a d
I0123 14:40:05.847424 139772884148224 ddar.py:60] Depth 1/1000 time = 0.9653341770172119
I0123 14:40:06.108347 139772884148224 ddar.py:60] Depth 2/1000 time = 0.260664701461792
I0123 14:40:06.425292 139772884148224 ddar.py:60] Depth 3/1000 time = 0.3167691230773926
I0123 14:40:07.194113 139772884148224 ddar.py:60] Depth 4/1000 time = 0.7686183452606201
I0123 14:40:08.781471 139772884148224 ddar.py:60] Depth 5/1000 time = 1.587078332901001
I0123 14:40:09.634705 139772884148224 ddar.py:60] Depth 6/1000 time = 0.8527281284332275
I0123 14:40:09.641931 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:40:09.641995 139772884148224 alphageometry.py:566] LM output (score=-4.847670): "i : P b c f i 09 ;"
I0123 14:40:09.642032 139772884148224 alphageometry.py:567] Translation: "i = on_pline i f b c"

I0123 14:40:09.642069 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i f b c ? simtri a g d f a d"
I0123 14:40:09.642196 139772884148224 graph.py:498] 
I0123 14:40:09.642242 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i f b c ? simtri a g d f a d
I0123 14:40:10.623621 139772884148224 ddar.py:60] Depth 1/1000 time = 0.972278356552124
I0123 14:40:10.930319 139772884148224 ddar.py:60] Depth 2/1000 time = 0.30642271041870117
I0123 14:40:11.289472 139772884148224 ddar.py:60] Depth 3/1000 time = 0.358931303024292
I0123 14:40:12.112422 139772884148224 ddar.py:60] Depth 4/1000 time = 0.8227219581604004
I0123 14:40:13.693556 139772884148224 ddar.py:60] Depth 5/1000 time = 1.580838680267334
I0123 14:40:14.572027 139772884148224 ddar.py:60] Depth 6/1000 time = 0.8778989315032959
I0123 14:40:14.579318 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:40:14.579392 139772884148224 alphageometry.py:566] LM output (score=-4.882979): "i : P c e f i 09 ;"
I0123 14:40:14.579429 139772884148224 alphageometry.py:567] Translation: "i = on_pline i f c e"

I0123 14:40:14.579467 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i f c e ? simtri a g d f a d"
I0123 14:40:14.579595 139772884148224 graph.py:498] 
I0123 14:40:14.579643 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i f c e ? simtri a g d f a d
I0123 14:40:15.567955 139772884148224 ddar.py:60] Depth 1/1000 time = 0.9791519641876221
I0123 14:40:15.873749 139772884148224 ddar.py:60] Depth 2/1000 time = 0.30551910400390625
I0123 14:40:16.234060 139772884148224 ddar.py:60] Depth 3/1000 time = 0.3601095676422119
I0123 14:40:17.053210 139772884148224 ddar.py:60] Depth 4/1000 time = 0.8189191818237305
I0123 14:40:18.679100 139772884148224 ddar.py:60] Depth 5/1000 time = 1.625586748123169
I0123 14:40:19.556190 139772884148224 ddar.py:60] Depth 6/1000 time = 0.8765206336975098
I0123 14:40:19.562650 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:40:19.562713 139772884148224 alphageometry.py:566] LM output (score=-4.909270): "i : P b f b i 09 T b h b i 10 ;"
I0123 14:40:19.562748 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b f b i"

I0123 14:40:19.562783 139772884148224 alphageometry.py:566] LM output (score=-4.918006): "i : D b i h i 09 D g i h i 10 ;"
I0123 14:40:19.562809 139772884148224 alphageometry.py:567] Translation: "i = on_bline i h b, on_bline i h g"

I0123 14:40:19.562838 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_bline i h b, on_bline i h g ? simtri a g d f a d"
I0123 14:40:19.562968 139772884148224 graph.py:498] 
I0123 14:40:19.563014 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_bline i h b, on_bline i h g ? simtri a g d f a d
I0123 14:40:19.881819 139772884148224 ddar.py:60] Depth 1/1000 time = 0.3039829730987549
I0123 14:40:21.021517 139772884148224 ddar.py:60] Depth 2/1000 time = 1.1393635272979736
I0123 14:40:21.450082 139772884148224 ddar.py:60] Depth 3/1000 time = 0.4282662868499756
I0123 14:40:22.321515 139772884148224 ddar.py:60] Depth 4/1000 time = 0.8711597919464111
I0123 14:40:24.022723 139772884148224 ddar.py:60] Depth 5/1000 time = 1.7008843421936035
I0123 14:40:24.984276 139772884148224 ddar.py:60] Depth 6/1000 time = 0.9609358310699463
I0123 14:40:26.722855 139772884148224 ddar.py:60] Depth 7/1000 time = 1.737318754196167
I0123 14:40:27.727625 139772884148224 ddar.py:60] Depth 8/1000 time = 1.002136468887329
I0123 14:40:28.755116 139772884148224 ddar.py:60] Depth 9/1000 time = 1.0271592140197754
I0123 14:40:28.763121 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:40:28.763178 139772884148224 alphageometry.py:566] LM output (score=-4.939590): "i : P b h f i 09 T b i f h 10 ;"
I0123 14:40:28.763212 139772884148224 alphageometry.py:567] Translation: "i = on_pline i f b h, on_tline i b f h"

I0123 14:40:28.763249 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i f b h, on_tline i b f h ? simtri a g d f a d"
I0123 14:40:28.763405 139772884148224 graph.py:498] 
I0123 14:40:28.763467 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i f b h, on_tline i b f h ? simtri a g d f a d
I0123 14:40:29.755807 139772884148224 ddar.py:60] Depth 1/1000 time = 0.9784727096557617
I0123 14:40:30.106069 139772884148224 ddar.py:60] Depth 2/1000 time = 0.3499786853790283
I0123 14:40:30.518022 139772884148224 ddar.py:60] Depth 3/1000 time = 0.41172289848327637
I0123 14:40:31.394589 139772884148224 ddar.py:60] Depth 4/1000 time = 0.8763265609741211
I0123 14:40:33.119912 139772884148224 ddar.py:60] Depth 5/1000 time = 1.725036859512329
I0123 14:40:34.089138 139772884148224 ddar.py:60] Depth 6/1000 time = 0.9686131477355957
I0123 14:40:34.098155 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:40:34.098212 139772884148224 alphageometry.py:566] LM output (score=-4.995279): "i : P b c h i 09 ;"
I0123 14:40:34.098246 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b c"

I0123 14:40:34.098284 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i h b c ? simtri a g d f a d"
I0123 14:40:34.098411 139772884148224 graph.py:498] 
I0123 14:40:34.098457 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i h b c ? simtri a g d f a d
I0123 14:40:34.348265 139772884148224 ddar.py:60] Depth 1/1000 time = 0.24060916900634766
I0123 14:40:35.382974 139772884148224 ddar.py:60] Depth 2/1000 time = 1.034513235092163
I0123 14:40:35.731820 139772884148224 ddar.py:60] Depth 3/1000 time = 0.34859585762023926
I0123 14:40:36.521175 139772884148224 ddar.py:60] Depth 4/1000 time = 0.7891368865966797
I0123 14:40:38.142357 139772884148224 ddar.py:60] Depth 5/1000 time = 1.620901346206665
I0123 14:40:39.000785 139772884148224 ddar.py:60] Depth 6/1000 time = 0.8578488826751709
I0123 14:40:39.008085 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:40:39.008150 139772884148224 alphageometry.py:566] LM output (score=-5.031227): "i : P b g c i 09 ;"
I0123 14:40:39.008186 139772884148224 alphageometry.py:567] Translation: "i = on_pline i c b g"

I0123 14:40:39.008224 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i c b g ? simtri a g d f a d"
I0123 14:40:39.008351 139772884148224 graph.py:498] 
I0123 14:40:39.008398 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b f; i = on_pline i c b g ? simtri a g d f a d
I0123 14:40:39.249016 139772884148224 ddar.py:60] Depth 1/1000 time = 0.23133015632629395
I0123 14:40:40.239799 139772884148224 ddar.py:60] Depth 2/1000 time = 0.9905881881713867
I0123 14:40:40.556351 139772884148224 ddar.py:60] Depth 3/1000 time = 0.3162825107574463
I0123 14:40:41.356268 139772884148224 ddar.py:60] Depth 4/1000 time = 0.7996904850006104
I0123 14:40:43.016871 139772884148224 ddar.py:60] Depth 5/1000 time = 1.6603202819824219
I0123 14:40:43.877801 139772884148224 ddar.py:60] Depth 6/1000 time = 0.8604052066802979
I0123 14:40:43.885063 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:40:43.885128 139772884148224 alphageometry.py:566] LM output (score=-5.042524): "i : P b c c i 09 ;"
I0123 14:40:43.885164 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b c c i"

I0123 14:40:43.885208 139772884148224 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b c e 02 T b c d e 03 ; f : C a c f 04 C d e f 05 ; g : C a b g 06 C d f g 07 ? S a g d f a d {F1} x00 h : C a c h 08 D a h c h 09 ; x00
I0123 14:40:48.064599 139772884148224 alphageometry.py:566] LM output (score=-0.527244): "i : ^ d b d i d i d c 10 ;"
I0123 14:40:48.064814 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ d b d i d i d c"

I0123 14:40:48.064862 139772884148224 alphageometry.py:566] LM output (score=-1.015814): "i : T b d b i 10 ;"
I0123 14:40:48.064895 139772884148224 alphageometry.py:567] Translation: "i = on_tline i b b d"

I0123 14:40:48.064929 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a; i = on_tline i b b d ? simtri a g d f a d"
I0123 14:40:48.065044 139772884148224 graph.py:498] 
I0123 14:40:48.065094 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a; i = on_tline i b b d ? simtri a g d f a d
I0123 14:40:48.396467 139772884148224 ddar.py:60] Depth 1/1000 time = 0.32019877433776855
I0123 14:40:49.670303 139772884148224 ddar.py:60] Depth 2/1000 time = 1.2735748291015625
I0123 14:40:50.504943 139772884148224 ddar.py:60] Depth 3/1000 time = 0.8343136310577393
I0123 14:40:52.940403 139772884148224 ddar.py:60] Depth 4/1000 time = 2.4351348876953125
I0123 14:40:55.337652 139772884148224 ddar.py:60] Depth 5/1000 time = 2.396902084350586
I0123 14:40:57.708480 139772884148224 ddar.py:60] Depth 6/1000 time = 2.3704490661621094
I0123 14:41:00.116353 139772884148224 ddar.py:60] Depth 7/1000 time = 2.4072322845458984
I0123 14:41:00.133502 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:41:00.133561 139772884148224 alphageometry.py:566] LM output (score=-1.386547): "i : P b e h i 10 ;"
I0123 14:41:00.133596 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b e"

I0123 14:41:00.133631 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a; i = on_pline i h b e ? simtri a g d f a d"
I0123 14:41:00.133773 139772884148224 graph.py:498] 
I0123 14:41:00.133821 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a; i = on_pline i h b e ? simtri a g d f a d
I0123 14:41:00.508511 139772884148224 ddar.py:60] Depth 1/1000 time = 0.3629021644592285
I0123 14:41:01.757448 139772884148224 ddar.py:60] Depth 2/1000 time = 1.2486565113067627
I0123 14:41:03.347452 139772884148224 ddar.py:60] Depth 3/1000 time = 1.5896728038787842
I0123 14:41:04.928381 139772884148224 ddar.py:60] Depth 4/1000 time = 1.5806078910827637
I0123 14:41:07.246757 139772884148224 ddar.py:60] Depth 5/1000 time = 2.3180413246154785
I0123 14:41:09.584678 139772884148224 ddar.py:60] Depth 6/1000 time = 2.3375487327575684
I0123 14:41:11.912636 139772884148224 ddar.py:60] Depth 7/1000 time = 2.3272829055786133
I0123 14:41:11.929407 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:41:11.929491 139772884148224 alphageometry.py:566] LM output (score=-1.665291): "i : P b e b i 10 ;"
I0123 14:41:11.929530 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b e b i"

I0123 14:41:11.929567 139772884148224 alphageometry.py:566] LM output (score=-2.131631): "i : P b e h i 10 P b i e h 11 ;"
I0123 14:41:11.929596 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b e, on_pline i b e h"

I0123 14:41:11.929628 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a; i = on_pline i h b e, on_pline i b e h ? simtri a g d f a d"
I0123 14:41:11.929776 139772884148224 graph.py:498] 
I0123 14:41:11.929850 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a; i = on_pline i h b e, on_pline i b e h ? simtri a g d f a d
I0123 14:41:13.125785 139772884148224 ddar.py:60] Depth 1/1000 time = 1.1812589168548584
I0123 14:41:13.778717 139772884148224 ddar.py:60] Depth 2/1000 time = 0.6526181697845459
I0123 14:41:15.597263 139772884148224 ddar.py:60] Depth 3/1000 time = 1.8182356357574463
I0123 14:41:20.382031 139772884148224 ddar.py:60] Depth 4/1000 time = 4.784436225891113
I0123 14:41:24.772883 139772884148224 ddar.py:60] Depth 5/1000 time = 4.390497446060181
I0123 14:41:29.894221 139772884148224 ddar.py:60] Depth 6/1000 time = 5.120947360992432
I0123 14:41:35.051348 139772884148224 ddar.py:60] Depth 7/1000 time = 5.156367301940918
I0123 14:41:35.090889 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:41:35.090969 139772884148224 alphageometry.py:566] LM output (score=-2.134276): "i : ^ b c b i b d b c 10 ;"
I0123 14:41:35.091007 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b c b i b d b c"

I0123 14:41:35.091042 139772884148224 alphageometry.py:566] LM output (score=-2.205560): "i : ^ b a b c b c b i 10 ;"
I0123 14:41:35.091070 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b a b c b c b i"

I0123 14:41:35.091098 139772884148224 alphageometry.py:566] LM output (score=-2.294448): "i : ^ b d b i b i b h 10 ^ d b d i d i d h 11 ;"
I0123 14:41:35.091124 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b d b i b i b h"

I0123 14:41:35.091149 139772884148224 alphageometry.py:566] LM output (score=-2.327426): "i : C b f i 10 D b i f i 11 ;"
I0123 14:41:35.091174 139772884148224 alphageometry.py:567] Translation: "i = on_line i b f, on_bline i f b"

I0123 14:41:35.091202 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a; i = on_line i b f, on_bline i f b ? simtri a g d f a d"
I0123 14:41:35.091339 139772884148224 graph.py:498] 
I0123 14:41:35.091393 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a; i = on_line i b f, on_bline i f b ? simtri a g d f a d
I0123 14:41:35.510238 139772884148224 ddar.py:60] Depth 1/1000 time = 0.4033815860748291
I0123 14:41:36.893874 139772884148224 ddar.py:60] Depth 2/1000 time = 1.3833653926849365
I0123 14:41:38.689173 139772884148224 ddar.py:60] Depth 3/1000 time = 1.7949817180633545
I0123 14:41:41.477880 139772884148224 ddar.py:60] Depth 4/1000 time = 2.7883808612823486
I0123 14:41:44.348880 139772884148224 ddar.py:60] Depth 5/1000 time = 2.870652437210083
I0123 14:41:47.201264 139772884148224 ddar.py:60] Depth 6/1000 time = 2.8520114421844482
I0123 14:41:50.851144 139772884148224 ddar.py:60] Depth 7/1000 time = 3.6491641998291016
I0123 14:41:53.744162 139772884148224 ddar.py:60] Depth 8/1000 time = 2.875098943710327
I0123 14:41:56.612596 139772884148224 ddar.py:60] Depth 9/1000 time = 2.863753318786621
I0123 14:41:56.613130 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:41:56.613183 139772884148224 alphageometry.py:566] LM output (score=-2.388165): "i : P c e f i 10 P c i e f 11 ;"
I0123 14:41:56.613217 139772884148224 alphageometry.py:567] Translation: "i = on_pline i f c e, on_pline i c e f"

I0123 14:41:56.613254 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a; i = on_pline i f c e, on_pline i c e f ? simtri a g d f a d"
I0123 14:41:56.613394 139772884148224 graph.py:498] 
I0123 14:41:56.613440 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a; i = on_pline i f c e, on_pline i c e f ? simtri a g d f a d
I0123 14:41:57.113753 139772884148224 ddar.py:60] Depth 1/1000 time = 0.4865424633026123
I0123 14:41:58.589972 139772884148224 ddar.py:60] Depth 2/1000 time = 1.4759159088134766
I0123 14:42:00.685472 139772884148224 ddar.py:60] Depth 3/1000 time = 2.0951755046844482
I0123 14:42:03.944954 139772884148224 ddar.py:60] Depth 4/1000 time = 3.25913143157959
I0123 14:42:07.152939 139772884148224 ddar.py:60] Depth 5/1000 time = 3.207613468170166
I0123 14:42:10.352984 139772884148224 ddar.py:60] Depth 6/1000 time = 3.199144124984741
I0123 14:42:10.375152 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:42:10.375247 139772884148224 alphageometry.py:566] LM output (score=-2.427104): "i : ^ b c b d h i h f 10 ;"
I0123 14:42:10.375286 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b c b d h i h f"

I0123 14:42:10.375331 139772884148224 alphageometry.py:566] LM output (score=-2.495520): "i : ^ b c b i b g b c 10 ;"
I0123 14:42:10.375359 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b c b i b g b c"

I0123 14:42:10.375387 139772884148224 alphageometry.py:566] LM output (score=-2.600746): "i : ^ d b d f d f d i 10 ;"
I0123 14:42:10.375414 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ d b d f d f d i"

I0123 14:42:10.375440 139772884148224 alphageometry.py:566] LM output (score=-2.627137): "i : T b g b i 10 ;"
I0123 14:42:10.375465 139772884148224 alphageometry.py:567] Translation: "i = on_tline i b b g"

I0123 14:42:10.375497 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a; i = on_tline i b b g ? simtri a g d f a d"
I0123 14:42:10.375648 139772884148224 graph.py:498] 
I0123 14:42:10.375710 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a; i = on_tline i b b g ? simtri a g d f a d
I0123 14:42:11.507227 139772884148224 ddar.py:60] Depth 1/1000 time = 1.1201846599578857
I0123 14:42:12.018950 139772884148224 ddar.py:60] Depth 2/1000 time = 0.5114102363586426
I0123 14:42:13.659647 139772884148224 ddar.py:60] Depth 3/1000 time = 1.640397310256958
I0123 14:42:16.233175 139772884148224 ddar.py:60] Depth 4/1000 time = 2.573176383972168
I0123 14:42:17.944716 139772884148224 ddar.py:60] Depth 5/1000 time = 1.7112019062042236
I0123 14:42:20.404128 139772884148224 ddar.py:60] Depth 6/1000 time = 2.4590342044830322
I0123 14:42:22.858610 139772884148224 ddar.py:60] Depth 7/1000 time = 2.453829765319824
I0123 14:42:22.876308 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:42:22.876426 139772884148224 alphageometry.py:566] LM output (score=-2.689974): "i : ^ b a b c a i b d 10 ^ a b a i b c b d 11 ;"
I0123 14:42:22.876467 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b a b c a i b d"

I0123 14:42:22.876504 139772884148224 alphageometry.py:566] LM output (score=-2.692779): "i : P b e f i 10 P b i e f 11 ;"
I0123 14:42:22.876531 139772884148224 alphageometry.py:567] Translation: "i = on_pline i f b e, on_pline i b e f"

I0123 14:42:22.876561 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a; i = on_pline i f b e, on_pline i b e f ? simtri a g d f a d"
I0123 14:42:22.876704 139772884148224 graph.py:498] 
I0123 14:42:22.876752 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a; i = on_pline i f b e, on_pline i b e f ? simtri a g d f a d
I0123 14:42:24.155530 139772884148224 ddar.py:60] Depth 1/1000 time = 1.263927698135376
I0123 14:42:24.887478 139772884148224 ddar.py:60] Depth 2/1000 time = 0.7316408157348633
I0123 14:42:26.893272 139772884148224 ddar.py:60] Depth 3/1000 time = 2.0054771900177
I0123 14:42:30.170236 139772884148224 ddar.py:60] Depth 4/1000 time = 3.276623487472534
I0123 14:42:34.202694 139772884148224 ddar.py:60] Depth 5/1000 time = 4.032098293304443
I0123 14:42:37.465771 139772884148224 ddar.py:60] Depth 6/1000 time = 3.262681245803833
I0123 14:42:40.698038 139772884148224 ddar.py:60] Depth 7/1000 time = 3.231466293334961
I0123 14:42:40.719682 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:42:40.719765 139772884148224 alphageometry.py:566] LM output (score=-2.744052): "i : ^ b c b d h i h d 10 ^ b c h i d b d h 11 ;"
I0123 14:42:40.719804 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b c b d h i h d"

I0123 14:42:40.719841 139772884148224 alphageometry.py:566] LM output (score=-2.749483): "i : ^ b c b d b d b i 10 ;"
I0123 14:42:40.719867 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b c b d b d b i"

I0123 14:42:40.719894 139772884148224 alphageometry.py:566] LM output (score=-2.789460): "i : ^ b c b i b d b e 10 ;"
I0123 14:42:40.719920 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b c b i b d b e"

I0123 14:42:40.719946 139772884148224 alphageometry.py:566] LM output (score=-2.822244): "i : ^ b c b d h e h i 10 ;"
I0123 14:42:40.719970 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b c b d h e h i"

I0123 14:42:40.719996 139772884148224 alphageometry.py:566] LM output (score=-2.846065): "i : P b g c i 10 P b i c g 11 ;"
I0123 14:42:40.720021 139772884148224 alphageometry.py:567] Translation: "i = on_pline i c b g, on_pline i b c g"

I0123 14:42:40.720050 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a; i = on_pline i c b g, on_pline i b c g ? simtri a g d f a d"
I0123 14:42:40.720190 139772884148224 graph.py:498] 
I0123 14:42:40.720237 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a; i = on_pline i c b g, on_pline i b c g ? simtri a g d f a d
I0123 14:42:41.148604 139772884148224 ddar.py:60] Depth 1/1000 time = 0.41350769996643066
I0123 14:42:41.759378 139772884148224 ddar.py:60] Depth 2/1000 time = 0.6104905605316162
I0123 14:42:43.518775 139772884148224 ddar.py:60] Depth 3/1000 time = 1.759096384048462
I0123 14:42:48.270477 139772884148224 ddar.py:60] Depth 4/1000 time = 4.751367092132568
I0123 14:42:54.059405 139772884148224 ddar.py:60] Depth 5/1000 time = 5.788585901260376
I0123 14:42:58.152767 139772884148224 ddar.py:60] Depth 6/1000 time = 4.0929059982299805
I0123 14:43:03.878499 139772884148224 ddar.py:60] Depth 7/1000 time = 5.724878787994385
I0123 14:43:03.907213 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:43:03.907316 139772884148224 alphageometry.py:566] LM output (score=-2.864991): "i : P b e d i 10 ;"
I0123 14:43:03.907356 139772884148224 alphageometry.py:567] Translation: "i = on_pline i d b e"

I0123 14:43:03.907398 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a; i = on_pline i d b e ? simtri a g d f a d"
I0123 14:43:03.907552 139772884148224 graph.py:498] 
I0123 14:43:03.907615 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a; i = on_pline i d b e ? simtri a g d f a d
I0123 14:43:04.284131 139772884148224 ddar.py:60] Depth 1/1000 time = 0.3644998073577881
I0123 14:43:04.812299 139772884148224 ddar.py:60] Depth 2/1000 time = 0.5279030799865723
I0123 14:43:06.405358 139772884148224 ddar.py:60] Depth 3/1000 time = 1.5927603244781494
I0123 14:43:08.927821 139772884148224 ddar.py:60] Depth 4/1000 time = 2.5221285820007324
I0123 14:43:11.369470 139772884148224 ddar.py:60] Depth 5/1000 time = 2.441302537918091
I0123 14:43:13.834061 139772884148224 ddar.py:60] Depth 6/1000 time = 2.463874101638794
I0123 14:43:13.852000 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:43:13.852072 139772884148224 alphageometry.py:566] LM output (score=-2.887887): "i : P b e b i 10 P d f h i 11 ;"
I0123 14:43:13.852112 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b e b i"

I0123 14:43:13.852146 139772884148224 alphageometry.py:566] LM output (score=-2.916386): "i : C c g i 10 D c i g i 11 ;"
I0123 14:43:13.852174 139772884148224 alphageometry.py:567] Translation: "i = on_line i c g, on_bline i g c"

I0123 14:43:13.852204 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a; i = on_line i c g, on_bline i g c ? simtri a g d f a d"
I0123 14:43:13.852340 139772884148224 graph.py:498] 
I0123 14:43:13.852388 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a; i = on_line i c g, on_bline i g c ? simtri a g d f a d
I0123 14:43:14.263830 139772884148224 ddar.py:60] Depth 1/1000 time = 0.39598751068115234
I0123 14:43:15.741827 139772884148224 ddar.py:60] Depth 2/1000 time = 1.4777138233184814
I0123 14:43:16.817128 139772884148224 ddar.py:60] Depth 3/1000 time = 1.0749859809875488
I0123 14:43:20.720995 139772884148224 ddar.py:60] Depth 4/1000 time = 3.9035303592681885
I0123 14:43:23.800695 139772884148224 ddar.py:60] Depth 5/1000 time = 3.0793027877807617
I0123 14:43:26.876029 139772884148224 ddar.py:60] Depth 6/1000 time = 3.0749599933624268
I0123 14:43:30.722944 139772884148224 ddar.py:60] Depth 7/1000 time = 3.846256732940674
I0123 14:43:33.851865 139772884148224 ddar.py:60] Depth 8/1000 time = 3.102475881576538
I0123 14:43:33.852405 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:43:33.852457 139772884148224 alphageometry.py:566] LM output (score=-2.965398): "i : P b e f i 10 ;"
I0123 14:43:33.852492 139772884148224 alphageometry.py:567] Translation: "i = on_pline i f b e"

I0123 14:43:33.852527 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a; i = on_pline i f b e ? simtri a g d f a d"
I0123 14:43:33.852663 139772884148224 graph.py:498] 
I0123 14:43:33.852710 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a; i = on_pline i f b e ? simtri a g d f a d
I0123 14:43:34.233137 139772884148224 ddar.py:60] Depth 1/1000 time = 0.368807315826416
I0123 14:43:35.525547 139772884148224 ddar.py:60] Depth 2/1000 time = 1.292140245437622
I0123 14:43:36.344049 139772884148224 ddar.py:60] Depth 3/1000 time = 0.8181750774383545
I0123 14:43:38.793282 139772884148224 ddar.py:60] Depth 4/1000 time = 2.448904514312744
I0123 14:43:41.188316 139772884148224 ddar.py:60] Depth 5/1000 time = 2.394679546356201
I0123 14:43:43.630352 139772884148224 ddar.py:60] Depth 6/1000 time = 2.4416558742523193
I0123 14:43:46.088914 139772884148224 ddar.py:60] Depth 7/1000 time = 2.4578592777252197
I0123 14:43:46.104748 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:43:46.104852 139772884148224 alphageometry.py:566] LM output (score=-3.016809): "i : ^ d b d i d c d b 10 ;"
I0123 14:43:46.104891 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ d b d i d c d b"

I0123 14:43:46.104927 139772884148224 alphageometry.py:566] LM output (score=-3.048730): "i : P b c h i 10 ;"
I0123 14:43:46.104954 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b c"

I0123 14:43:46.104984 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a; i = on_pline i h b c ? simtri a g d f a d"
I0123 14:43:46.105116 139772884148224 graph.py:498] 
I0123 14:43:46.105163 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a; i = on_pline i h b c ? simtri a g d f a d
I0123 14:43:46.476896 139772884148224 ddar.py:60] Depth 1/1000 time = 0.3602328300476074
I0123 14:43:47.791309 139772884148224 ddar.py:60] Depth 2/1000 time = 1.3141419887542725
I0123 14:43:48.600499 139772884148224 ddar.py:60] Depth 3/1000 time = 0.808868408203125
I0123 14:43:51.072588 139772884148224 ddar.py:60] Depth 4/1000 time = 2.471761465072632
I0123 14:43:53.484292 139772884148224 ddar.py:60] Depth 5/1000 time = 2.4113593101501465
I0123 14:43:55.962959 139772884148224 ddar.py:60] Depth 6/1000 time = 2.478281021118164
I0123 14:43:57.568344 139772884148224 ddar.py:60] Depth 7/1000 time = 1.6044795513153076
I0123 14:43:57.584269 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:43:57.584364 139772884148224 alphageometry.py:566] LM output (score=-3.052033): "i : C b h i 10 D b h h i 11 ;"
I0123 14:43:57.584404 139772884148224 alphageometry.py:567] Translation: "i = on_line i b h, on_circle i h b"

I0123 14:43:57.584444 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a; i = on_line i b h, on_circle i h b ? simtri a g d f a d"
I0123 14:43:57.584601 139772884148224 graph.py:498] 
I0123 14:43:57.584665 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a; i = on_line i b h, on_circle i h b ? simtri a g d f a d
I0123 14:43:58.796375 139772884148224 ddar.py:60] Depth 1/1000 time = 1.196033239364624
I0123 14:43:59.521133 139772884148224 ddar.py:60] Depth 2/1000 time = 0.7244491577148438
I0123 14:44:01.442308 139772884148224 ddar.py:60] Depth 3/1000 time = 1.9208300113677979
I0123 14:44:04.334369 139772884148224 ddar.py:60] Depth 4/1000 time = 2.8917274475097656
I0123 14:44:07.204738 139772884148224 ddar.py:60] Depth 5/1000 time = 2.8700129985809326
I0123 14:44:10.064288 139772884148224 ddar.py:60] Depth 6/1000 time = 2.858731508255005
I0123 14:44:10.085526 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:44:10.085610 139772884148224 alphageometry.py:566] LM output (score=-3.072180): "i : C b h i 10 D b i h i 11 ;"
I0123 14:44:10.085656 139772884148224 alphageometry.py:567] Translation: "i = on_line i b h, on_bline i h b"

I0123 14:44:10.085697 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a; i = on_line i b h, on_bline i h b ? simtri a g d f a d"
I0123 14:44:10.085841 139772884148224 graph.py:498] 
I0123 14:44:10.085891 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a; i = on_line i b h, on_bline i h b ? simtri a g d f a d
I0123 14:44:11.250098 139772884148224 ddar.py:60] Depth 1/1000 time = 1.1485295295715332
I0123 14:44:11.778697 139772884148224 ddar.py:60] Depth 2/1000 time = 0.5283448696136475
I0123 14:44:13.392628 139772884148224 ddar.py:60] Depth 3/1000 time = 1.6136207580566406
I0123 14:44:16.129345 139772884148224 ddar.py:60] Depth 4/1000 time = 2.736387014389038
I0123 14:44:18.820874 139772884148224 ddar.py:60] Depth 5/1000 time = 2.691188335418701
I0123 14:44:21.500771 139772884148224 ddar.py:60] Depth 6/1000 time = 2.679513454437256
I0123 14:44:24.195508 139772884148224 ddar.py:60] Depth 7/1000 time = 2.6939697265625
I0123 14:44:26.928998 139772884148224 ddar.py:60] Depth 8/1000 time = 2.712836980819702
I0123 14:44:26.929537 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:44:26.929589 139772884148224 alphageometry.py:566] LM output (score=-3.085435): "i : C c g i 10 D c g g i 11 ;"
I0123 14:44:26.929625 139772884148224 alphageometry.py:567] Translation: "i = on_line i c g, on_circle i g c"

I0123 14:44:26.929672 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a; i = on_line i c g, on_circle i g c ? simtri a g d f a d"
I0123 14:44:26.929811 139772884148224 graph.py:498] 
I0123 14:44:26.929859 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h a c, on_bline h c a; i = on_line i c g, on_circle i g c ? simtri a g d f a d
I0123 14:44:27.336639 139772884148224 ddar.py:60] Depth 1/1000 time = 0.3913273811340332
I0123 14:44:28.765093 139772884148224 ddar.py:60] Depth 2/1000 time = 1.4281713962554932
I0123 14:44:29.720580 139772884148224 ddar.py:60] Depth 3/1000 time = 0.9551658630371094
I0123 14:44:32.742208 139772884148224 ddar.py:60] Depth 4/1000 time = 3.021301746368408
I0123 14:44:36.680590 139772884148224 ddar.py:60] Depth 5/1000 time = 3.938037872314453
I0123 14:44:39.803251 139772884148224 ddar.py:60] Depth 6/1000 time = 3.122264862060547
I0123 14:44:42.951356 139772884148224 ddar.py:60] Depth 7/1000 time = 3.14739727973938
I0123 14:44:42.980167 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:44:42.980232 139772884148224 alphageometry.py:566] LM output (score=-3.102039): "i : ^ b c b d b g b i 10 ;"
I0123 14:44:42.980269 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b c b d b g b i"

I0123 14:44:42.980305 139772884148224 alphageometry.py:566] LM output (score=-3.111184): "i : ^ b e b i b i b f 10 ^ e b e i e i e f 11 ;"
I0123 14:44:42.980333 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b e b i b i b f"

I0123 14:44:42.980365 139772884148224 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b c e 02 T b c d e 03 ; f : C a c f 04 C d e f 05 ; g : C a b g 06 C d f g 07 ? S a g d f a d {F1} x00 h : C b f h 08 D b h f h 09 ; x00
I0123 14:44:47.051478 139772884148224 alphageometry.py:566] LM output (score=-0.397927): "i : ^ d b d i d i d c 10 ;"
I0123 14:44:47.051696 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ d b d i d i d c"

I0123 14:44:47.051746 139772884148224 alphageometry.py:566] LM output (score=-0.987761): "i : T b d b i 10 ;"
I0123 14:44:47.051778 139772884148224 alphageometry.py:567] Translation: "i = on_tline i b b d"

I0123 14:44:47.051811 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h b f, on_bline h f b; i = on_tline i b b d ? simtri a g d f a d"
I0123 14:44:47.051934 139772884148224 graph.py:498] 
I0123 14:44:47.051991 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h b f, on_bline h f b; i = on_tline i b b d ? simtri a g d f a d
I0123 14:44:47.323792 139772884148224 ddar.py:60] Depth 1/1000 time = 0.2590036392211914
I0123 14:44:47.721025 139772884148224 ddar.py:60] Depth 2/1000 time = 0.39703822135925293
I0123 14:44:48.329285 139772884148224 ddar.py:60] Depth 3/1000 time = 0.6080455780029297
I0123 14:44:50.312037 139772884148224 ddar.py:60] Depth 4/1000 time = 1.9824697971343994
I0123 14:44:51.459195 139772884148224 ddar.py:60] Depth 5/1000 time = 1.146827220916748
I0123 14:44:53.443845 139772884148224 ddar.py:60] Depth 6/1000 time = 1.9840941429138184
I0123 14:44:53.452728 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:44:53.452800 139772884148224 alphageometry.py:566] LM output (score=-1.597271): "i : ^ b d b i b i b h 10 ^ d b d i d i d h 11 ;"
I0123 14:44:53.452838 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b d b i b i b h"

I0123 14:44:53.452874 139772884148224 alphageometry.py:566] LM output (score=-1.738294): "i : ^ b e b i b i b h 10 ^ h b h i h i h e 11 ;"
I0123 14:44:53.452900 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b e b i b i b h"

I0123 14:44:53.452927 139772884148224 alphageometry.py:566] LM output (score=-1.820164): "i : ^ b c b i b i b h 10 ^ h b h i h i h c 11 ;"
I0123 14:44:53.452952 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b c b i b i b h"

I0123 14:44:53.452977 139772884148224 alphageometry.py:566] LM output (score=-1.822949): "i : ^ b c b i b d b c 10 ;"
I0123 14:44:53.453002 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b c b i b d b c"

I0123 14:44:53.453028 139772884148224 alphageometry.py:566] LM output (score=-1.872981): "i : T b h b i 10 ;"
I0123 14:44:53.453052 139772884148224 alphageometry.py:567] Translation: "i = on_tline i b b h"

I0123 14:44:53.453081 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h b f, on_bline h f b; i = on_tline i b b h ? simtri a g d f a d"
I0123 14:44:53.453216 139772884148224 graph.py:498] 
I0123 14:44:53.453263 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h b f, on_bline h f b; i = on_tline i b b h ? simtri a g d f a d
I0123 14:44:53.726938 139772884148224 ddar.py:60] Depth 1/1000 time = 0.26296091079711914
I0123 14:44:54.099393 139772884148224 ddar.py:60] Depth 2/1000 time = 0.37224435806274414
I0123 14:44:54.582532 139772884148224 ddar.py:60] Depth 3/1000 time = 0.4829232692718506
I0123 14:44:56.411975 139772884148224 ddar.py:60] Depth 4/1000 time = 1.8291866779327393
I0123 14:44:58.393069 139772884148224 ddar.py:60] Depth 5/1000 time = 1.980762243270874
I0123 14:44:59.551836 139772884148224 ddar.py:60] Depth 6/1000 time = 1.1582252979278564
I0123 14:44:59.561921 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:44:59.561983 139772884148224 alphageometry.py:566] LM output (score=-1.884901): "i : ^ b e b i b i b h 10 ^ e b e i e i e h 11 ;"
I0123 14:44:59.562019 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b e b i b i b h"

I0123 14:44:59.562054 139772884148224 alphageometry.py:566] LM output (score=-1.916383): "i : ^ b d b i b i b h 10 ^ h b h i h i h d 11 ;"
I0123 14:44:59.562082 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b d b i b i b h"

I0123 14:44:59.562110 139772884148224 alphageometry.py:566] LM output (score=-1.970762): "i : ^ b a b c b c b i 10 ;"
I0123 14:44:59.562136 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b a b c b c b i"

I0123 14:44:59.562162 139772884148224 alphageometry.py:566] LM output (score=-1.993078): "i : ^ b g b i b i b h 10 ^ g b g i g i g h 11 ;"
I0123 14:44:59.562187 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b g b i b i b h"

I0123 14:44:59.562244 139772884148224 alphageometry.py:566] LM output (score=-2.261539): "i : ^ b c b i b i b h 10 ^ c b c i c i c h 11 ;"
I0123 14:44:59.562270 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b c b i b i b h"

I0123 14:44:59.562298 139772884148224 alphageometry.py:566] LM output (score=-2.295210): "i : ^ b c b i b d b c 10 ^ g b g i b i b g 11 ;"
I0123 14:44:59.562323 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b c b i b d b c"

I0123 14:44:59.562349 139772884148224 alphageometry.py:566] LM output (score=-2.393351): "i : T b g b i 10 ;"
I0123 14:44:59.562554 139772884148224 alphageometry.py:567] Translation: "i = on_tline i b b g"

I0123 14:44:59.562582 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h b f, on_bline h f b; i = on_tline i b b g ? simtri a g d f a d"
I0123 14:44:59.562713 139772884148224 graph.py:498] 
I0123 14:44:59.562759 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h b f, on_bline h f b; i = on_tline i b b g ? simtri a g d f a d
I0123 14:44:59.838322 139772884148224 ddar.py:60] Depth 1/1000 time = 0.26489901542663574
I0123 14:45:01.029977 139772884148224 ddar.py:60] Depth 2/1000 time = 1.1914479732513428
I0123 14:45:01.515057 139772884148224 ddar.py:60] Depth 3/1000 time = 0.4847850799560547
I0123 14:45:02.599901 139772884148224 ddar.py:60] Depth 4/1000 time = 1.0845749378204346
I0123 14:45:04.557144 139772884148224 ddar.py:60] Depth 5/1000 time = 1.9569282531738281
I0123 14:45:05.722036 139772884148224 ddar.py:60] Depth 6/1000 time = 1.1643450260162354
I0123 14:45:05.731621 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:45:05.731689 139772884148224 alphageometry.py:566] LM output (score=-2.432465): "i : ^ b a b c b i c d 10 ^ b a b i c b c d 11 ;"
I0123 14:45:05.731725 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b a b c b i c d"

I0123 14:45:05.731760 139772884148224 alphageometry.py:566] LM output (score=-2.472955): "i : T b f b i 10 ;"
I0123 14:45:05.731786 139772884148224 alphageometry.py:567] Translation: "i = on_tline i b b f"

I0123 14:45:05.731816 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h b f, on_bline h f b; i = on_tline i b b f ? simtri a g d f a d"
I0123 14:45:05.731950 139772884148224 graph.py:498] 
I0123 14:45:05.731998 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h b f, on_bline h f b; i = on_tline i b b f ? simtri a g d f a d
I0123 14:45:06.809489 139772884148224 ddar.py:60] Depth 1/1000 time = 1.0668737888336182
I0123 14:45:07.207667 139772884148224 ddar.py:60] Depth 2/1000 time = 0.39788293838500977
I0123 14:45:07.689716 139772884148224 ddar.py:60] Depth 3/1000 time = 0.4818296432495117
I0123 14:45:09.612607 139772884148224 ddar.py:60] Depth 4/1000 time = 1.9226408004760742
I0123 14:45:10.786435 139772884148224 ddar.py:60] Depth 5/1000 time = 1.173490285873413
I0123 14:45:12.766015 139772884148224 ddar.py:60] Depth 6/1000 time = 1.9790027141571045
I0123 14:45:12.775557 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:45:12.775632 139772884148224 alphageometry.py:566] LM output (score=-2.513173): "i : ^ b c b i b f b c 10 ;"
I0123 14:45:12.775670 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b c b i b f b c"

I0123 14:45:12.775705 139772884148224 alphageometry.py:566] LM output (score=-2.515558): "i : ^ b c b i b d b c 10 ^ e b e i e h e b 11 ;"
I0123 14:45:12.775732 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b c b i b d b c"

I0123 14:45:12.775796 139772884148224 alphageometry.py:566] LM output (score=-2.526439): "i : ^ b c b d b i d e 10 ^ b c b i d b d e 11 ;"
I0123 14:45:12.775824 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b c b d b i d e"

I0123 14:45:12.775851 139772884148224 alphageometry.py:566] LM output (score=-2.581538): "i : ^ b c b i b g b c 10 ;"
I0123 14:45:12.775876 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b c b i b g b c"

I0123 14:45:12.775901 139772884148224 alphageometry.py:566] LM output (score=-2.582349): "i : ^ b c b i b d b c 10 ^ h b h i b i b h 11 ;"
I0123 14:45:12.775926 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b c b i b d b c"

I0123 14:45:12.775951 139772884148224 alphageometry.py:566] LM output (score=-2.629083): "i : ^ b g b i b i b h 10 ^ h b h i h i h g 11 ;"
I0123 14:45:12.775975 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b g b i b i b h"

I0123 14:45:12.776000 139772884148224 alphageometry.py:566] LM output (score=-2.723619): "i : ^ b c b i b d b c 10 ^ d b d i b i b d 11 ;"
I0123 14:45:12.776024 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b c b i b d b c"

I0123 14:45:12.776049 139772884148224 alphageometry.py:566] LM output (score=-2.728222): "i : C b e i 10 D b i e i 11 ;"
I0123 14:45:12.776072 139772884148224 alphageometry.py:567] Translation: "i = on_line i b e, on_bline i e b"

I0123 14:45:12.776099 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h b f, on_bline h f b; i = on_line i b e, on_bline i e b ? simtri a g d f a d"
I0123 14:45:12.776236 139772884148224 graph.py:498] 
I0123 14:45:12.776284 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_line h b f, on_bline h f b; i = on_line i b e, on_bline i e b ? simtri a g d f a d
I0123 14:45:13.235722 139772884148224 ddar.py:60] Depth 1/1000 time = 0.44315028190612793
I0123 14:45:14.710583 139772884148224 ddar.py:60] Depth 2/1000 time = 1.4745948314666748
I0123 14:45:16.321818 139772884148224 ddar.py:60] Depth 3/1000 time = 1.6109256744384766
I0123 14:45:18.643903 139772884148224 ddar.py:60] Depth 4/1000 time = 2.3217742443084717
I0123 14:45:21.098714 139772884148224 ddar.py:60] Depth 5/1000 time = 2.4544832706451416
I0123 14:45:23.525010 139772884148224 ddar.py:60] Depth 6/1000 time = 2.425929307937622
I0123 14:45:25.923984 139772884148224 ddar.py:60] Depth 7/1000 time = 2.3984055519104004
I0123 14:45:28.356449 139772884148224 ddar.py:60] Depth 8/1000 time = 2.431464195251465
I0123 14:45:28.367104 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:45:28.367175 139772884148224 alphageometry.py:566] LM output (score=-2.770718): "i : ^ b h b i e c e f 10 ;"
I0123 14:45:28.367213 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b h b i e c e f"

I0123 14:45:28.367248 139772884148224 alphageometry.py:566] LM output (score=-2.789416): "i : ^ b c b i b d b c 10 ^ d e d i d h d e 11 ;"
I0123 14:45:28.367275 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b c b i b d b c"

I0123 14:45:28.367302 139772884148224 alphageometry.py:566] LM output (score=-2.805250): "i : ^ b c b i b d b c 10 ^ d b d i d e d b 11 ;"
I0123 14:45:28.367327 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b c b i b d b c"

I0123 14:45:28.367354 139772884148224 alphageometry.py:566] LM output (score=-2.821265): "i : ^ b c b i b d b h 10 ;"
I0123 14:45:28.367378 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b c b i b d b h"

I0123 14:45:28.367403 139772884148224 alphageometry.py:566] LM output (score=-2.863399): "i : ^ b c b i b d b c 10 ^ d b d i d h d b 11 ;"
I0123 14:45:28.367451 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b c b i b d b c"

I0123 14:45:28.367478 139772884148224 alphageometry.py:566] LM output (score=-2.885695): "i : ^ b c b i b d b c 10 ^ e b e i b i b e 11 ;"
I0123 14:45:28.367503 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b c b i b d b c"

I0123 14:45:28.367527 139772884148224 alphageometry.py:566] LM output (score=-2.903974): "i : ^ b h b i e c e g 10 ;"
I0123 14:45:28.367550 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ b h b i e c e g"

I0123 14:45:28.367575 139772884148224 alphageometry.py:566] LM output (score=-2.923512): "i : ^ d b d i d i d c 10 P d e d i 11 ;"
I0123 14:45:28.367599 139772884148224 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ d b d i d i d c"

I0123 14:45:28.367630 139772884148224 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b c e 02 T b c d e 03 ; f : C a c f 04 C d e f 05 ; g : C a b g 06 C d f g 07 ? S a g d f a d {F1} x00 h : T b c c h 08 ; x00
I0123 14:45:33.837656 139772884148224 alphageometry.py:566] LM output (score=-0.245257): "i : T b d b i 09 ;"
I0123 14:45:33.837841 139772884148224 alphageometry.py:567] Translation: "i = on_tline i b b d"

I0123 14:45:33.837882 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_tline i b b d ? simtri a g d f a d"
I0123 14:45:33.838082 139772884148224 graph.py:498] 
I0123 14:45:33.838137 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_tline i b b d ? simtri a g d f a d
I0123 14:45:34.886931 139772884148224 ddar.py:60] Depth 1/1000 time = 1.0401997566223145
I0123 14:45:35.191269 139772884148224 ddar.py:60] Depth 2/1000 time = 0.3040475845336914
I0123 14:45:35.675884 139772884148224 ddar.py:60] Depth 3/1000 time = 0.4843435287475586
I0123 14:45:36.566697 139772884148224 ddar.py:60] Depth 4/1000 time = 0.8905119895935059
I0123 14:45:38.283838 139772884148224 ddar.py:60] Depth 5/1000 time = 1.7167832851409912
I0123 14:45:39.171309 139772884148224 ddar.py:60] Depth 6/1000 time = 0.8868510723114014
I0123 14:45:39.177456 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:45:39.177523 139772884148224 alphageometry.py:566] LM output (score=-1.471901): "i : C b h i 09 D b i h i 10 ;"
I0123 14:45:39.177561 139772884148224 alphageometry.py:567] Translation: "i = on_line i b h, on_bline i h b"

I0123 14:45:39.177597 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_line i b h, on_bline i h b ? simtri a g d f a d"
I0123 14:45:39.177742 139772884148224 graph.py:498] 
I0123 14:45:39.177791 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_line i b h, on_bline i h b ? simtri a g d f a d
I0123 14:45:39.476208 139772884148224 ddar.py:60] Depth 1/1000 time = 0.2873542308807373
I0123 14:45:40.639397 139772884148224 ddar.py:60] Depth 2/1000 time = 1.162980079650879
I0123 14:45:42.372875 139772884148224 ddar.py:60] Depth 3/1000 time = 1.7331326007843018
I0123 14:45:44.869689 139772884148224 ddar.py:60] Depth 4/1000 time = 2.4964444637298584
I0123 14:45:47.461574 139772884148224 ddar.py:60] Depth 5/1000 time = 2.591543674468994
I0123 14:45:50.063485 139772884148224 ddar.py:60] Depth 6/1000 time = 2.601243734359741
I0123 14:45:50.072136 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:45:50.072210 139772884148224 alphageometry.py:566] LM output (score=-1.596059): "i : P b i c h 09 ;"
I0123 14:45:50.072277 139772884148224 alphageometry.py:567] Translation: "i = on_pline i b c h"

I0123 14:45:50.072319 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_pline i b c h ? simtri a g d f a d"
I0123 14:45:50.072462 139772884148224 graph.py:498] 
I0123 14:45:50.072517 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_pline i b c h ? simtri a g d f a d
I0123 14:45:50.394034 139772884148224 ddar.py:60] Depth 1/1000 time = 0.31209516525268555
I0123 14:45:50.691743 139772884148224 ddar.py:60] Depth 2/1000 time = 0.2975187301635742
I0123 14:45:51.069123 139772884148224 ddar.py:60] Depth 3/1000 time = 0.37720632553100586
I0123 14:45:51.937653 139772884148224 ddar.py:60] Depth 4/1000 time = 0.8682966232299805
I0123 14:45:53.741284 139772884148224 ddar.py:60] Depth 5/1000 time = 1.8033277988433838
I0123 14:45:54.715247 139772884148224 ddar.py:60] Depth 6/1000 time = 0.9733314514160156
I0123 14:45:54.721754 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:45:54.721821 139772884148224 alphageometry.py:566] LM output (score=-1.839950): "i : P b c h i 09 P b i c h 10 ;"
I0123 14:45:54.721859 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b c, on_pline i b c h"

I0123 14:45:54.721897 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_pline i h b c, on_pline i b c h ? simtri a g d f a d"
I0123 14:45:54.722036 139772884148224 graph.py:498] 
I0123 14:45:54.722083 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_pline i h b c, on_pline i b c h ? simtri a g d f a d
I0123 14:45:56.005291 139772884148224 ddar.py:60] Depth 1/1000 time = 1.2703204154968262
I0123 14:45:56.507157 139772884148224 ddar.py:60] Depth 2/1000 time = 0.5015769004821777
I0123 14:45:57.207064 139772884148224 ddar.py:60] Depth 3/1000 time = 0.6996340751647949
I0123 14:45:59.719132 139772884148224 ddar.py:60] Depth 4/1000 time = 2.511782169342041
I0123 14:46:02.069797 139772884148224 ddar.py:60] Depth 5/1000 time = 2.3503239154815674
I0123 14:46:05.332410 139772884148224 ddar.py:60] Depth 6/1000 time = 3.262246608734131
I0123 14:46:07.742730 139772884148224 ddar.py:60] Depth 7/1000 time = 2.4095401763916016
I0123 14:46:11.079466 139772884148224 ddar.py:60] Depth 8/1000 time = 3.3125345706939697
I0123 14:46:14.511056 139772884148224 ddar.py:60] Depth 9/1000 time = 3.409895658493042
I0123 14:46:14.511587 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:46:14.511647 139772884148224 alphageometry.py:566] LM output (score=-1.876961): "i : T b g b i 09 ;"
I0123 14:46:14.511683 139772884148224 alphageometry.py:567] Translation: "i = on_tline i b b g"

I0123 14:46:14.511721 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_tline i b b g ? simtri a g d f a d"
I0123 14:46:14.511851 139772884148224 graph.py:498] 
I0123 14:46:14.511898 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_tline i b b g ? simtri a g d f a d
I0123 14:46:14.763030 139772884148224 ddar.py:60] Depth 1/1000 time = 0.24148344993591309
I0123 14:46:15.055316 139772884148224 ddar.py:60] Depth 2/1000 time = 0.29208970069885254
I0123 14:46:15.403212 139772884148224 ddar.py:60] Depth 3/1000 time = 0.3477051258087158
I0123 14:46:16.239675 139772884148224 ddar.py:60] Depth 4/1000 time = 0.8362457752227783
I0123 14:46:17.997172 139772884148224 ddar.py:60] Depth 5/1000 time = 1.7571625709533691
I0123 14:46:18.920070 139772884148224 ddar.py:60] Depth 6/1000 time = 0.9223179817199707
I0123 14:46:18.927309 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:46:18.927365 139772884148224 alphageometry.py:566] LM output (score=-2.058387): "i : T b i c h 09 ;"
I0123 14:46:18.927399 139772884148224 alphageometry.py:567] Translation: "i = on_tline i b c h"

I0123 14:46:18.927436 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_tline i b c h ? simtri a g d f a d"
I0123 14:46:18.927579 139772884148224 graph.py:498] 
I0123 14:46:18.927634 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_tline i b c h ? simtri a g d f a d
I0123 14:46:20.230849 139772884148224 ddar.py:60] Depth 1/1000 time = 1.2961478233337402
I0123 14:46:20.688742 139772884148224 ddar.py:60] Depth 2/1000 time = 0.4575934410095215
I0123 14:46:22.035336 139772884148224 ddar.py:60] Depth 3/1000 time = 1.3463091850280762
I0123 14:46:23.918560 139772884148224 ddar.py:60] Depth 4/1000 time = 1.8829147815704346
I0123 14:46:24.995975 139772884148224 ddar.py:60] Depth 5/1000 time = 1.0770914554595947
I0123 14:46:26.910832 139772884148224 ddar.py:60] Depth 6/1000 time = 1.9142637252807617
I0123 14:46:26.916650 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:46:26.916708 139772884148224 alphageometry.py:566] LM output (score=-2.220780): "i : D b i h i 09 D c h h i 10 ;"
I0123 14:46:26.916745 139772884148224 alphageometry.py:567] Translation: "i = on_bline i h b, on_circle i h c"

I0123 14:46:26.916780 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_bline i h b, on_circle i h c ? simtri a g d f a d"
I0123 14:46:26.916913 139772884148224 graph.py:498] 
I0123 14:46:26.916960 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_bline i h b, on_circle i h c ? simtri a g d f a d
I0123 14:46:27.240084 139772884148224 ddar.py:60] Depth 1/1000 time = 0.30610132217407227
I0123 14:46:28.415868 139772884148224 ddar.py:60] Depth 2/1000 time = 1.1755669116973877
I0123 14:46:28.839737 139772884148224 ddar.py:60] Depth 3/1000 time = 0.42357563972473145
I0123 14:46:29.766161 139772884148224 ddar.py:60] Depth 4/1000 time = 0.9261658191680908
I0123 14:46:30.781457 139772884148224 ddar.py:60] Depth 5/1000 time = 1.0149815082550049
I0123 14:46:32.587452 139772884148224 ddar.py:60] Depth 6/1000 time = 1.8054001331329346
I0123 14:46:32.594190 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:46:32.594256 139772884148224 alphageometry.py:566] LM output (score=-2.335170): "i : P b c h i 09 ;"
I0123 14:46:32.594293 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b c"

I0123 14:46:32.594329 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_pline i h b c ? simtri a g d f a d"
I0123 14:46:32.594458 139772884148224 graph.py:498] 
I0123 14:46:32.594504 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_pline i h b c ? simtri a g d f a d
I0123 14:46:32.882713 139772884148224 ddar.py:60] Depth 1/1000 time = 0.2785623073577881
I0123 14:46:33.164767 139772884148224 ddar.py:60] Depth 2/1000 time = 0.28167033195495605
I0123 14:46:33.506968 139772884148224 ddar.py:60] Depth 3/1000 time = 0.34200119972229004
I0123 14:46:35.133207 139772884148224 ddar.py:60] Depth 4/1000 time = 1.6260199546813965
I0123 14:46:36.016639 139772884148224 ddar.py:60] Depth 5/1000 time = 0.8831088542938232
I0123 14:46:37.754921 139772884148224 ddar.py:60] Depth 6/1000 time = 1.737657070159912
I0123 14:46:37.760996 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:46:37.761064 139772884148224 alphageometry.py:566] LM output (score=-2.382960): "i : T b i c d 09 ;"
I0123 14:46:37.761100 139772884148224 alphageometry.py:567] Translation: "i = on_tline i b c d"

I0123 14:46:37.761137 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_tline i b c d ? simtri a g d f a d"
I0123 14:46:37.761267 139772884148224 graph.py:498] 
I0123 14:46:37.761314 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_tline i b c d ? simtri a g d f a d
I0123 14:46:38.003254 139772884148224 ddar.py:60] Depth 1/1000 time = 0.23268556594848633
I0123 14:46:38.264917 139772884148224 ddar.py:60] Depth 2/1000 time = 0.2614905834197998
I0123 14:46:38.587017 139772884148224 ddar.py:60] Depth 3/1000 time = 0.32192134857177734
I0123 14:46:39.381849 139772884148224 ddar.py:60] Depth 4/1000 time = 0.7946269512176514
I0123 14:46:41.098114 139772884148224 ddar.py:60] Depth 5/1000 time = 1.715770959854126
I0123 14:46:41.981024 139772884148224 ddar.py:60] Depth 6/1000 time = 0.8823063373565674
I0123 14:46:41.987460 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:46:41.987528 139772884148224 alphageometry.py:566] LM output (score=-2.635174): "i : D b i h i 09 P b c h i 10 P b i c h 11 ;"
I0123 14:46:41.987564 139772884148224 alphageometry.py:567] Translation: "ERROR: there cannot be more than two predicates."

I0123 14:46:41.987599 139772884148224 alphageometry.py:566] LM output (score=-2.825724): "i : C a b i 09 D a i b i 10 ;"
I0123 14:46:41.987627 139772884148224 alphageometry.py:567] Translation: "i = on_line i a b, on_bline i b a"

I0123 14:46:41.987657 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_line i a b, on_bline i b a ? simtri a g d f a d"
I0123 14:46:41.987791 139772884148224 graph.py:498] 
I0123 14:46:41.987838 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_line i a b, on_bline i b a ? simtri a g d f a d
I0123 14:46:43.215147 139772884148224 ddar.py:60] Depth 1/1000 time = 1.2161448001861572
I0123 14:46:43.694843 139772884148224 ddar.py:60] Depth 2/1000 time = 0.4793994426727295
I0123 14:46:45.391011 139772884148224 ddar.py:60] Depth 3/1000 time = 1.6958653926849365
I0123 14:46:47.083984 139772884148224 ddar.py:60] Depth 4/1000 time = 1.6926493644714355
I0123 14:46:49.575106 139772884148224 ddar.py:60] Depth 5/1000 time = 2.4907889366149902
I0123 14:46:52.076935 139772884148224 ddar.py:60] Depth 6/1000 time = 2.501443386077881
I0123 14:46:54.606664 139772884148224 ddar.py:60] Depth 7/1000 time = 2.5290780067443848
I0123 14:46:54.622818 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:46:54.622899 139772884148224 alphageometry.py:566] LM output (score=-2.925511): "i : D b i h i 09 P b i c h 10 ;"
I0123 14:46:54.622938 139772884148224 alphageometry.py:567] Translation: "i = on_bline i h b, on_pline i b c h"

I0123 14:46:54.622977 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_bline i h b, on_pline i b c h ? simtri a g d f a d"
I0123 14:46:54.623133 139772884148224 graph.py:498] 
I0123 14:46:54.623181 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_bline i h b, on_pline i b c h ? simtri a g d f a d
I0123 14:46:54.988889 139772884148224 ddar.py:60] Depth 1/1000 time = 0.35075831413269043
I0123 14:46:55.335427 139772884148224 ddar.py:60] Depth 2/1000 time = 0.3463435173034668
I0123 14:46:56.641916 139772884148224 ddar.py:60] Depth 3/1000 time = 1.3062760829925537
I0123 14:46:57.594667 139772884148224 ddar.py:60] Depth 4/1000 time = 0.9524390697479248
I0123 14:46:58.655309 139772884148224 ddar.py:60] Depth 5/1000 time = 1.0603222846984863
I0123 14:47:00.534003 139772884148224 ddar.py:60] Depth 6/1000 time = 1.878061056137085
I0123 14:47:00.541125 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:47:00.541181 139772884148224 alphageometry.py:566] LM output (score=-2.974345): "i : T b i h i 09 ;"
I0123 14:47:00.541217 139772884148224 alphageometry.py:567] Translation: "i = on_dia i h b"

I0123 14:47:00.541253 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_dia i h b ? simtri a g d f a d"
I0123 14:47:00.541381 139772884148224 graph.py:498] 
I0123 14:47:00.541426 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_dia i h b ? simtri a g d f a d
I0123 14:47:00.789757 139772884148224 ddar.py:60] Depth 1/1000 time = 0.23931097984313965
I0123 14:47:01.067097 139772884148224 ddar.py:60] Depth 2/1000 time = 0.2771573066711426
I0123 14:47:01.456962 139772884148224 ddar.py:60] Depth 3/1000 time = 0.3896760940551758
I0123 14:47:03.256425 139772884148224 ddar.py:60] Depth 4/1000 time = 1.7992262840270996
I0123 14:47:04.254081 139772884148224 ddar.py:60] Depth 5/1000 time = 0.997307538986206
I0123 14:47:05.249049 139772884148224 ddar.py:60] Depth 6/1000 time = 0.9943475723266602
I0123 14:47:05.256632 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:47:05.256700 139772884148224 alphageometry.py:566] LM output (score=-3.315331): "i : C b f i 09 D b i f i 10 ;"
I0123 14:47:05.256735 139772884148224 alphageometry.py:567] Translation: "i = on_line i b f, on_bline i f b"

I0123 14:47:05.256774 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_line i b f, on_bline i f b ? simtri a g d f a d"
I0123 14:47:05.256910 139772884148224 graph.py:498] 
I0123 14:47:05.256958 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_line i b f, on_bline i f b ? simtri a g d f a d
I0123 14:47:05.558527 139772884148224 ddar.py:60] Depth 1/1000 time = 0.29047656059265137
I0123 14:47:06.756845 139772884148224 ddar.py:60] Depth 2/1000 time = 1.1980972290039062
I0123 14:47:07.233805 139772884148224 ddar.py:60] Depth 3/1000 time = 0.4766683578491211
I0123 14:47:09.231467 139772884148224 ddar.py:60] Depth 4/1000 time = 1.9971776008605957
I0123 14:47:10.416195 139772884148224 ddar.py:60] Depth 5/1000 time = 1.1844005584716797
I0123 14:47:12.485264 139772884148224 ddar.py:60] Depth 6/1000 time = 2.068413734436035
I0123 14:47:12.494275 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:47:12.494345 139772884148224 alphageometry.py:566] LM output (score=-3.512693): "i : C a c i 09 D a i c i 10 ;"
I0123 14:47:12.494382 139772884148224 alphageometry.py:567] Translation: "i = on_line i a c, on_bline i c a"

I0123 14:47:12.494454 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_line i a c, on_bline i c a ? simtri a g d f a d"
I0123 14:47:12.494590 139772884148224 graph.py:498] 
I0123 14:47:12.494637 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_line i a c, on_bline i c a ? simtri a g d f a d
I0123 14:47:12.880576 139772884148224 ddar.py:60] Depth 1/1000 time = 0.3746352195739746
I0123 14:47:13.374686 139772884148224 ddar.py:60] Depth 2/1000 time = 0.4938337802886963
I0123 14:47:15.055340 139772884148224 ddar.py:60] Depth 3/1000 time = 1.6803665161132812
I0123 14:47:17.608314 139772884148224 ddar.py:60] Depth 4/1000 time = 2.552645444869995
I0123 14:47:20.156848 139772884148224 ddar.py:60] Depth 5/1000 time = 2.5481975078582764
I0123 14:47:21.816269 139772884148224 ddar.py:60] Depth 6/1000 time = 1.6587517261505127
I0123 14:47:21.833813 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:47:21.833871 139772884148224 alphageometry.py:566] LM output (score=-3.589402): "i : T b i c g 09 ;"
I0123 14:47:21.833908 139772884148224 alphageometry.py:567] Translation: "i = on_tline i b c g"

I0123 14:47:21.833945 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_tline i b c g ? simtri a g d f a d"
I0123 14:47:21.834077 139772884148224 graph.py:498] 
I0123 14:47:21.834124 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_tline i b c g ? simtri a g d f a d
I0123 14:47:22.943017 139772884148224 ddar.py:60] Depth 1/1000 time = 1.099541187286377
I0123 14:47:23.225424 139772884148224 ddar.py:60] Depth 2/1000 time = 0.28214120864868164
I0123 14:47:23.569797 139772884148224 ddar.py:60] Depth 3/1000 time = 0.34418487548828125
I0123 14:47:24.402291 139772884148224 ddar.py:60] Depth 4/1000 time = 0.8322832584381104
I0123 14:47:26.200627 139772884148224 ddar.py:60] Depth 5/1000 time = 1.7980222702026367
I0123 14:47:27.094822 139772884148224 ddar.py:60] Depth 6/1000 time = 0.8935894966125488
I0123 14:47:27.102636 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:47:27.102705 139772884148224 alphageometry.py:566] LM output (score=-3.609381): "i : P b c h i 09 T b i c h 10 ;"
I0123 14:47:27.102741 139772884148224 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2622, in add_clause
    nums = draw_fn()
  File "/home/chi/alphageometry-test/graph.py", line 2608, in draw_fn
    return nm.reduce(to_be_intersected, existing_points)
  File "/home/chi/alphageometry-test/numericals.py", line 1310, in reduce
    result = a.intersect(b)
  File "/home/chi/alphageometry-test/numericals.py", line 213, in intersect
    return line_line_intersection(self, obj)
  File "/home/chi/alphageometry-test/numericals.py", line 584, in line_line_intersection
    raise InvalidLineIntersectError
numericals.InvalidLineIntersectError
"

I0123 14:47:27.102791 139772884148224 alphageometry.py:566] LM output (score=-3.613206): "i : P b g c i 09 P b i c g 10 ;"
I0123 14:47:27.102821 139772884148224 alphageometry.py:567] Translation: "i = on_pline i c b g, on_pline i b c g"

I0123 14:47:27.102850 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_pline i c b g, on_pline i b c g ? simtri a g d f a d"
I0123 14:47:27.103021 139772884148224 graph.py:498] 
I0123 14:47:27.103071 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_pline i c b g, on_pline i b c g ? simtri a g d f a d
I0123 14:47:27.428339 139772884148224 ddar.py:60] Depth 1/1000 time = 0.3111226558685303
I0123 14:47:27.775102 139772884148224 ddar.py:60] Depth 2/1000 time = 0.34655213356018066
I0123 14:47:29.090335 139772884148224 ddar.py:60] Depth 3/1000 time = 1.3150100708007812
I0123 14:47:31.837275 139772884148224 ddar.py:60] Depth 4/1000 time = 2.746633529663086
I0123 14:47:34.757678 139772884148224 ddar.py:60] Depth 5/1000 time = 2.9200663566589355
I0123 14:47:37.682425 139772884148224 ddar.py:60] Depth 6/1000 time = 2.9243862628936768
I0123 14:47:40.599479 139772884148224 ddar.py:60] Depth 7/1000 time = 2.9164693355560303
I0123 14:47:40.610996 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:47:40.611070 139772884148224 alphageometry.py:566] LM output (score=-3.628080): "i : T b f b i 09 ;"
I0123 14:47:40.611109 139772884148224 alphageometry.py:567] Translation: "i = on_tline i b b f"

I0123 14:47:40.611147 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_tline i b b f ? simtri a g d f a d"
I0123 14:47:40.611278 139772884148224 graph.py:498] 
I0123 14:47:40.611325 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_tline i b b f ? simtri a g d f a d
I0123 14:47:40.871288 139772884148224 ddar.py:60] Depth 1/1000 time = 0.25054001808166504
I0123 14:47:41.154591 139772884148224 ddar.py:60] Depth 2/1000 time = 0.28307509422302246
I0123 14:47:41.499919 139772884148224 ddar.py:60] Depth 3/1000 time = 0.34513139724731445
I0123 14:47:42.301847 139772884148224 ddar.py:60] Depth 4/1000 time = 0.801713228225708
I0123 14:47:44.067567 139772884148224 ddar.py:60] Depth 5/1000 time = 1.7654056549072266
I0123 14:47:44.968072 139772884148224 ddar.py:60] Depth 6/1000 time = 0.8999078273773193
I0123 14:47:44.975246 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:47:44.975313 139772884148224 alphageometry.py:566] LM output (score=-3.673825): "i : P b e h i 09 ;"
I0123 14:47:44.975349 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b e"

I0123 14:47:44.975385 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_pline i h b e ? simtri a g d f a d"
I0123 14:47:44.975520 139772884148224 graph.py:498] 
I0123 14:47:44.975566 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_pline i h b e ? simtri a g d f a d
I0123 14:47:45.265262 139772884148224 ddar.py:60] Depth 1/1000 time = 0.2801535129547119
I0123 14:47:46.404675 139772884148224 ddar.py:60] Depth 2/1000 time = 1.1391913890838623
I0123 14:47:46.746896 139772884148224 ddar.py:60] Depth 3/1000 time = 0.34192967414855957
I0123 14:47:47.553374 139772884148224 ddar.py:60] Depth 4/1000 time = 0.8062412738800049
I0123 14:47:49.364443 139772884148224 ddar.py:60] Depth 5/1000 time = 1.8107566833496094
I0123 14:47:50.247024 139772884148224 ddar.py:60] Depth 6/1000 time = 0.8819503784179688
I0123 14:47:50.253116 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:47:50.253183 139772884148224 alphageometry.py:566] LM output (score=-3.719604): "i : D b i h i 09 P b c h i 10 ;"
I0123 14:47:50.253219 139772884148224 alphageometry.py:567] Translation: "i = on_bline i h b, on_pline i h b c"

I0123 14:47:50.253285 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_bline i h b, on_pline i h b c ? simtri a g d f a d"
I0123 14:47:50.253421 139772884148224 graph.py:498] 
I0123 14:47:50.253468 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_bline i h b, on_pline i h b c ? simtri a g d f a d
I0123 14:47:50.585043 139772884148224 ddar.py:60] Depth 1/1000 time = 0.3155710697174072
I0123 14:47:50.914690 139772884148224 ddar.py:60] Depth 2/1000 time = 0.32943034172058105
I0123 14:47:52.196664 139772884148224 ddar.py:60] Depth 3/1000 time = 1.2817506790161133
I0123 14:47:53.076319 139772884148224 ddar.py:60] Depth 4/1000 time = 0.8793408870697021
I0123 14:47:54.049761 139772884148224 ddar.py:60] Depth 5/1000 time = 0.9731266498565674
I0123 14:47:55.920333 139772884148224 ddar.py:60] Depth 6/1000 time = 1.8699414730072021
I0123 14:47:55.927788 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:47:55.927847 139772884148224 alphageometry.py:566] LM output (score=-3.737199): "i : D b i h i 09 P b c h i 10 P b i c h 11 T b h c i 12 ;"
I0123 14:47:55.927884 139772884148224 alphageometry.py:567] Translation: "ERROR: there cannot be more than two predicates."

I0123 14:47:55.927919 139772884148224 alphageometry.py:566] LM output (score=-3.754862): "i : T b i d g 09 ;"
I0123 14:47:55.927946 139772884148224 alphageometry.py:567] Translation: "i = on_tline i b d g"

I0123 14:47:55.927975 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_tline i b d g ? simtri a g d f a d"
I0123 14:47:55.928102 139772884148224 graph.py:498] 
I0123 14:47:55.928149 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_tline i b d g ? simtri a g d f a d
I0123 14:47:56.373159 139772884148224 ddar.py:60] Depth 1/1000 time = 0.4382171630859375
I0123 14:47:57.717350 139772884148224 ddar.py:60] Depth 2/1000 time = 1.3439030647277832
I0123 14:47:58.232471 139772884148224 ddar.py:60] Depth 3/1000 time = 0.5148131847381592
I0123 14:48:00.095028 139772884148224 ddar.py:60] Depth 4/1000 time = 1.862056016921997
I0123 14:48:02.088660 139772884148224 ddar.py:60] Depth 5/1000 time = 1.9932951927185059
I0123 14:48:03.163452 139772884148224 ddar.py:60] Depth 6/1000 time = 1.0742106437683105
I0123 14:48:03.168524 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:48:03.168594 139772884148224 alphageometry.py:566] LM output (score=-3.782288): "i : D b i h i 09 D c h h i 10 P b c h i 11 P b i c h 12 ;"
I0123 14:48:03.168632 139772884148224 alphageometry.py:567] Translation: "ERROR: there cannot be more than two predicates."

I0123 14:48:03.168668 139772884148224 alphageometry.py:566] LM output (score=-3.835136): "i : T b i c f 09 ;"
I0123 14:48:03.168696 139772884148224 alphageometry.py:567] Translation: "i = on_tline i b c f"

I0123 14:48:03.168726 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_tline i b c f ? simtri a g d f a d"
I0123 14:48:03.168856 139772884148224 graph.py:498] 
I0123 14:48:03.168904 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_tline i b c f ? simtri a g d f a d
I0123 14:48:04.299762 139772884148224 ddar.py:60] Depth 1/1000 time = 1.1214613914489746
I0123 14:48:04.589247 139772884148224 ddar.py:60] Depth 2/1000 time = 0.2891724109649658
I0123 14:48:04.935152 139772884148224 ddar.py:60] Depth 3/1000 time = 0.34569597244262695
I0123 14:48:05.746478 139772884148224 ddar.py:60] Depth 4/1000 time = 0.8111026287078857
I0123 14:48:07.554192 139772884148224 ddar.py:60] Depth 5/1000 time = 1.8074028491973877
I0123 14:48:08.466384 139772884148224 ddar.py:60] Depth 6/1000 time = 0.9115924835205078
I0123 14:48:08.473278 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:48:08.473335 139772884148224 alphageometry.py:566] LM output (score=-3.965034): "i : T b e b i 09 ;"
I0123 14:48:08.473371 139772884148224 alphageometry.py:567] Translation: "i = on_tline i b b e"

I0123 14:48:08.473407 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_tline i b b e ? simtri a g d f a d"
I0123 14:48:08.473543 139772884148224 graph.py:498] 
I0123 14:48:08.473590 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_tline i b b e ? simtri a g d f a d
I0123 14:48:08.761331 139772884148224 ddar.py:60] Depth 1/1000 time = 0.2787637710571289
I0123 14:48:09.028558 139772884148224 ddar.py:60] Depth 2/1000 time = 0.26702284812927246
I0123 14:48:10.233773 139772884148224 ddar.py:60] Depth 3/1000 time = 1.2050230503082275
I0123 14:48:11.080885 139772884148224 ddar.py:60] Depth 4/1000 time = 0.846806526184082
I0123 14:48:12.017387 139772884148224 ddar.py:60] Depth 5/1000 time = 0.9361929893493652
I0123 14:48:13.837686 139772884148224 ddar.py:60] Depth 6/1000 time = 1.8196849822998047
I0123 14:48:13.843670 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:48:13.843741 139772884148224 alphageometry.py:566] LM output (score=-4.013928): "i : T b i d i 09 ;"
I0123 14:48:13.843778 139772884148224 alphageometry.py:567] Translation: "i = on_dia i d b"

I0123 14:48:13.843816 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_dia i d b ? simtri a g d f a d"
I0123 14:48:13.843943 139772884148224 graph.py:498] 
I0123 14:48:13.843989 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_dia i d b ? simtri a g d f a d
I0123 14:48:14.098371 139772884148224 ddar.py:60] Depth 1/1000 time = 0.24507617950439453
I0123 14:48:14.385308 139772884148224 ddar.py:60] Depth 2/1000 time = 0.28674936294555664
I0123 14:48:14.766599 139772884148224 ddar.py:60] Depth 3/1000 time = 0.38110780715942383
I0123 14:48:16.567152 139772884148224 ddar.py:60] Depth 4/1000 time = 1.80031156539917
I0123 14:48:17.567540 139772884148224 ddar.py:60] Depth 5/1000 time = 1.0000526905059814
I0123 14:48:18.563605 139772884148224 ddar.py:60] Depth 6/1000 time = 0.9954485893249512
I0123 14:48:18.571156 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:48:18.571224 139772884148224 alphageometry.py:566] LM output (score=-4.014340): "i : T b i c h 09 T b i h i 10 ;"
I0123 14:48:18.571260 139772884148224 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 14:48:18.571300 139772884148224 alphageometry.py:566] LM output (score=-4.040055): "i : T a b a i 09 ;"
I0123 14:48:18.571329 139772884148224 alphageometry.py:567] Translation: "i = on_tline i a a b"

I0123 14:48:18.571360 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_tline i a a b ? simtri a g d f a d"
I0123 14:48:18.571520 139772884148224 graph.py:498] 
I0123 14:48:18.571568 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_tline i a a b ? simtri a g d f a d
I0123 14:48:18.822967 139772884148224 ddar.py:60] Depth 1/1000 time = 0.24225115776062012
I0123 14:48:19.979769 139772884148224 ddar.py:60] Depth 2/1000 time = 1.1565790176391602
I0123 14:48:20.329468 139772884148224 ddar.py:60] Depth 3/1000 time = 0.34941601753234863
I0123 14:48:21.155864 139772884148224 ddar.py:60] Depth 4/1000 time = 0.8261454105377197
I0123 14:48:22.076679 139772884148224 ddar.py:60] Depth 5/1000 time = 0.920508623123169
I0123 14:48:23.867098 139772884148224 ddar.py:60] Depth 6/1000 time = 1.7898361682891846
I0123 14:48:23.874177 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:48:23.874248 139772884148224 alphageometry.py:566] LM output (score=-4.077578): "i : C a b i 09 T a b d i 10 ;"
I0123 14:48:23.874286 139772884148224 alphageometry.py:567] Translation: "i = on_line i a b, on_tline i d a b"

I0123 14:48:23.874325 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_line i a b, on_tline i d a b ? simtri a g d f a d"
I0123 14:48:23.874464 139772884148224 graph.py:498] 
I0123 14:48:23.874513 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_line i a b, on_tline i d a b ? simtri a g d f a d
I0123 14:48:24.268824 139772884148224 ddar.py:60] Depth 1/1000 time = 0.3846564292907715
I0123 14:48:25.711902 139772884148224 ddar.py:60] Depth 2/1000 time = 1.4428057670593262
I0123 14:48:26.431700 139772884148224 ddar.py:60] Depth 3/1000 time = 0.7194960117340088
I0123 14:48:28.812988 139772884148224 ddar.py:60] Depth 4/1000 time = 2.380981922149658
I0123 14:48:31.340677 139772884148224 ddar.py:60] Depth 5/1000 time = 2.527355909347534
I0123 14:48:32.947175 139772884148224 ddar.py:60] Depth 6/1000 time = 1.6061220169067383
I0123 14:48:35.430607 139772884148224 ddar.py:60] Depth 7/1000 time = 2.4827520847320557
I0123 14:48:35.446005 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:48:35.446078 139772884148224 alphageometry.py:566] LM output (score=-4.094416): "i : T b h b i 09 ;"
I0123 14:48:35.446113 139772884148224 alphageometry.py:567] Translation: "i = on_tline i b b h"

I0123 14:48:35.446152 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_tline i b b h ? simtri a g d f a d"
I0123 14:48:35.446285 139772884148224 graph.py:498] 
I0123 14:48:35.446331 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_tline i b b h ? simtri a g d f a d
I0123 14:48:35.703867 139772884148224 ddar.py:60] Depth 1/1000 time = 0.24820613861083984
I0123 14:48:36.881186 139772884148224 ddar.py:60] Depth 2/1000 time = 1.1770923137664795
I0123 14:48:37.214153 139772884148224 ddar.py:60] Depth 3/1000 time = 0.332688570022583
I0123 14:48:38.018332 139772884148224 ddar.py:60] Depth 4/1000 time = 0.803948163986206
I0123 14:48:38.908869 139772884148224 ddar.py:60] Depth 5/1000 time = 0.8902347087860107
I0123 14:48:40.694405 139772884148224 ddar.py:60] Depth 6/1000 time = 1.7849438190460205
I0123 14:48:40.700536 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:48:40.700627 139772884148224 alphageometry.py:566] LM output (score=-4.171860): "i : D b i h i 09 ;"
I0123 14:48:40.700664 139772884148224 alphageometry.py:567] Translation: "i = on_bline i h b"

I0123 14:48:40.700700 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_bline i h b ? simtri a g d f a d"
I0123 14:48:40.700830 139772884148224 graph.py:498] 
I0123 14:48:40.700875 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h c b c; i = on_bline i h b ? simtri a g d f a d
I0123 14:48:40.966914 139772884148224 ddar.py:60] Depth 1/1000 time = 0.2533731460571289
I0123 14:48:41.244102 139772884148224 ddar.py:60] Depth 2/1000 time = 0.2770195007324219
I0123 14:48:41.580392 139772884148224 ddar.py:60] Depth 3/1000 time = 0.3361179828643799
I0123 14:48:42.371546 139772884148224 ddar.py:60] Depth 4/1000 time = 0.7909505367279053
I0123 14:48:44.147486 139772884148224 ddar.py:60] Depth 5/1000 time = 1.7756450176239014
I0123 14:48:45.030559 139772884148224 ddar.py:60] Depth 6/1000 time = 0.8824970722198486
I0123 14:48:45.036530 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:48:45.036601 139772884148224 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : D a d b d 00 D b d c d 01 ; e : C b c e 02 T b c d e 03 ; f : C a c f 04 C d e f 05 ; g : C a b g 06 C d f g 07 ? S a g d f a d {F1} x00 h : T b c b h 08 ; x00
I0123 14:48:48.986578 139772884148224 alphageometry.py:566] LM output (score=-0.210709): "i : P b h c i 09 ;"
I0123 14:48:48.986783 139772884148224 alphageometry.py:567] Translation: "i = on_pline i c b h"

I0123 14:48:48.986824 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b c; i = on_pline i c b h ? simtri a g d f a d"
I0123 14:48:48.986947 139772884148224 graph.py:498] 
I0123 14:48:48.986994 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b c; i = on_pline i c b h ? simtri a g d f a d
I0123 14:48:49.310062 139772884148224 ddar.py:60] Depth 1/1000 time = 0.3144557476043701
I0123 14:48:50.521216 139772884148224 ddar.py:60] Depth 2/1000 time = 1.2109367847442627
I0123 14:48:50.900860 139772884148224 ddar.py:60] Depth 3/1000 time = 0.37935400009155273
I0123 14:48:51.775663 139772884148224 ddar.py:60] Depth 4/1000 time = 0.8745782375335693
I0123 14:48:52.768591 139772884148224 ddar.py:60] Depth 5/1000 time = 0.9926023483276367
I0123 14:48:54.609194 139772884148224 ddar.py:60] Depth 6/1000 time = 1.8399670124053955
I0123 14:48:54.615168 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:48:54.615238 139772884148224 alphageometry.py:566] LM output (score=-1.061364): "i : P b c h i 09 P b h c i 10 ;"
I0123 14:48:54.615274 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b c, on_pline i c b h"

I0123 14:48:54.615310 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b c; i = on_pline i h b c, on_pline i c b h ? simtri a g d f a d"
I0123 14:48:54.615449 139772884148224 graph.py:498] 
I0123 14:48:54.615496 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b c; i = on_pline i h b c, on_pline i c b h ? simtri a g d f a d
I0123 14:48:55.039649 139772884148224 ddar.py:60] Depth 1/1000 time = 0.4111781120300293
I0123 14:48:55.539959 139772884148224 ddar.py:60] Depth 2/1000 time = 0.5000596046447754
I0123 14:48:57.160114 139772884148224 ddar.py:60] Depth 3/1000 time = 1.6199069023132324
I0123 14:48:58.808095 139772884148224 ddar.py:60] Depth 4/1000 time = 1.6476447582244873
I0123 14:49:02.070645 139772884148224 ddar.py:60] Depth 5/1000 time = 3.2622132301330566
I0123 14:49:04.483096 139772884148224 ddar.py:60] Depth 6/1000 time = 2.4120726585388184
I0123 14:49:07.830207 139772884148224 ddar.py:60] Depth 7/1000 time = 3.3463141918182373
I0123 14:49:10.312306 139772884148224 ddar.py:60] Depth 8/1000 time = 2.457594633102417
I0123 14:49:13.769788 139772884148224 ddar.py:60] Depth 9/1000 time = 3.4352681636810303
I0123 14:49:13.770326 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:49:13.770390 139772884148224 alphageometry.py:566] LM output (score=-1.407374): "i : P b c h i 09 ;"
I0123 14:49:13.770427 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b c"

I0123 14:49:13.770465 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b c; i = on_pline i h b c ? simtri a g d f a d"
I0123 14:49:13.770593 139772884148224 graph.py:498] 
I0123 14:49:13.770640 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b c; i = on_pline i h b c ? simtri a g d f a d
I0123 14:49:14.063225 139772884148224 ddar.py:60] Depth 1/1000 time = 0.28253602981567383
I0123 14:49:14.348727 139772884148224 ddar.py:60] Depth 2/1000 time = 0.28528690338134766
I0123 14:49:14.691897 139772884148224 ddar.py:60] Depth 3/1000 time = 0.34297609329223633
I0123 14:49:16.389018 139772884148224 ddar.py:60] Depth 4/1000 time = 1.6968984603881836
I0123 14:49:17.281902 139772884148224 ddar.py:60] Depth 5/1000 time = 0.8925619125366211
I0123 14:49:18.169687 139772884148224 ddar.py:60] Depth 6/1000 time = 0.8871428966522217
I0123 14:49:18.175400 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:49:18.175469 139772884148224 alphageometry.py:566] LM output (score=-2.113850): "i : P b h e i 09 ;"
I0123 14:49:18.175509 139772884148224 alphageometry.py:567] Translation: "i = on_pline i e b h"

I0123 14:49:18.175549 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b c; i = on_pline i e b h ? simtri a g d f a d"
I0123 14:49:18.175683 139772884148224 graph.py:498] 
I0123 14:49:18.175731 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b c; i = on_pline i e b h ? simtri a g d f a d
I0123 14:49:18.483515 139772884148224 ddar.py:60] Depth 1/1000 time = 0.29868340492248535
I0123 14:49:19.837149 139772884148224 ddar.py:60] Depth 2/1000 time = 1.3533942699432373
I0123 14:49:20.401376 139772884148224 ddar.py:60] Depth 3/1000 time = 0.5639116764068604
I0123 14:49:22.698059 139772884148224 ddar.py:60] Depth 4/1000 time = 2.2963809967041016
I0123 14:49:25.158901 139772884148224 ddar.py:60] Depth 5/1000 time = 2.460503339767456
I0123 14:49:27.620851 139772884148224 ddar.py:60] Depth 6/1000 time = 2.4613051414489746
I0123 14:49:27.630145 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:49:27.630226 139772884148224 alphageometry.py:566] LM output (score=-2.535462): "i : P b c h i 09 T b i c h 10 ;"
I0123 14:49:27.630263 139772884148224 alphageometry.py:567] Translation: "i = on_pline i h b c, on_tline i b c h"

I0123 14:49:27.630300 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b c; i = on_pline i h b c, on_tline i b c h ? simtri a g d f a d"
I0123 14:49:27.630443 139772884148224 graph.py:498] 
I0123 14:49:27.630499 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b c; i = on_pline i h b c, on_tline i b c h ? simtri a g d f a d
I0123 14:49:27.955152 139772884148224 ddar.py:60] Depth 1/1000 time = 0.3111693859100342
I0123 14:49:28.306571 139772884148224 ddar.py:60] Depth 2/1000 time = 0.3511931896209717
I0123 14:49:29.621721 139772884148224 ddar.py:60] Depth 3/1000 time = 1.3149197101593018
I0123 14:49:30.580237 139772884148224 ddar.py:60] Depth 4/1000 time = 0.9582045078277588
I0123 14:49:31.585432 139772884148224 ddar.py:60] Depth 5/1000 time = 1.004850149154663
I0123 14:49:33.485951 139772884148224 ddar.py:60] Depth 6/1000 time = 1.8998150825500488
I0123 14:49:33.493912 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:49:33.493999 139772884148224 alphageometry.py:566] LM output (score=-2.875472): "i : P a b c i 09 ;"
I0123 14:49:33.494039 139772884148224 alphageometry.py:567] Translation: "i = on_pline i c a b"

I0123 14:49:33.494085 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b c; i = on_pline i c a b ? simtri a g d f a d"
I0123 14:49:33.494232 139772884148224 graph.py:498] 
I0123 14:49:33.494281 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b c; i = on_pline i c a b ? simtri a g d f a d
I0123 14:49:33.765074 139772884148224 ddar.py:60] Depth 1/1000 time = 0.26056957244873047
I0123 14:49:34.008969 139772884148224 ddar.py:60] Depth 2/1000 time = 0.24371099472045898
I0123 14:49:34.307770 139772884148224 ddar.py:60] Depth 3/1000 time = 0.29863452911376953
I0123 14:49:36.074264 139772884148224 ddar.py:60] Depth 4/1000 time = 1.7662923336029053
I0123 14:49:36.985245 139772884148224 ddar.py:60] Depth 5/1000 time = 0.9107084274291992
I0123 14:49:37.884194 139772884148224 ddar.py:60] Depth 6/1000 time = 0.898369550704956
I0123 14:49:37.889894 139772884148224 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 14:49:37.889963 139772884148224 alphageometry.py:566] LM output (score=-3.014455): "i : D b i h i 09 D c i h i 10 ;"
I0123 14:49:37.890001 139772884148224 alphageometry.py:567] Translation: "i = on_bline i h b, on_bline i h c"

I0123 14:49:37.890038 139772884148224 alphageometry.py:576] Solving: "a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b c; i = on_bline i h b, on_bline i h c ? simtri a g d f a d"
I0123 14:49:37.890173 139772884148224 graph.py:498] 
I0123 14:49:37.890218 139772884148224 graph.py:499] a b c = triangle a b c; d = circle d c b a; e = foot e d c b; f = on_line f d e, on_line f c a; g = on_line g d f, on_line g b a; h = on_tline h b b c; i = on_bline i h b, on_bline i h c ? simtri a g d f a d
I0123 14:49:39.155204 139772884148224 ddar.py:60] Depth 1/1000 time = 1.2473735809326172
I0123 14:49:39.911553 139772884148224 ddar.py:60] Depth 2/1000 time = 0.7560398578643799
I0123 14:49:42.124599 139772884148224 ddar.py:60] Depth 3/1000 time = 2.2126872539520264
I0123 14:49:44.823855 139772884148224 ddar.py:60] Depth 4/1000 time = 2.6988589763641357
I0123 14:49:47.548520 139772884148224 ddar.py:60] Depth 5/1000 time = 2.7242963314056396
I0123 14:49:50.270777 139772884148224 ddar.py:60] Depth 6/1000 time = 2.7215795516967773
