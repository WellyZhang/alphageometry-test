I0123 13:12:41.635427 139631495815168 inference_utils.py:69] Parsing gin configuration.
I0123 13:12:41.635528 139631495815168 inference_utils.py:71] Added Gin search path meliad_lib/meliad/transformer/configs
I0123 13:12:41.635730 139631495815168 inference_utils.py:74] Loading Gin config file base_htrans.gin
I0123 13:12:41.635762 139631495815168 inference_utils.py:74] Loading Gin config file size/medium_150M.gin
I0123 13:12:41.635790 139631495815168 inference_utils.py:74] Loading Gin config file options/positions_t5.gin
I0123 13:12:41.635815 139631495815168 inference_utils.py:74] Loading Gin config file options/lr_cosine_decay.gin
I0123 13:12:41.635841 139631495815168 inference_utils.py:74] Loading Gin config file options/seq_1024_nocache.gin
I0123 13:12:41.635866 139631495815168 inference_utils.py:74] Loading Gin config file geometry_150M_generate.gin
I0123 13:12:41.635891 139631495815168 inference_utils.py:76] Overriding Gin param DecoderOnlyLanguageModelGenerate.output_token_losses=True
I0123 13:12:41.635917 139631495815168 inference_utils.py:76] Overriding Gin param TransformerTaskConfig.batch_size=32
I0123 13:12:41.635942 139631495815168 inference_utils.py:76] Overriding Gin param TransformerTaskConfig.sequence_length=128
I0123 13:12:41.635966 139631495815168 inference_utils.py:76] Overriding Gin param Trainer.restore_state_variables=False
I0123 13:12:41.636011 139631495815168 resource_reader.py:50] system_path_file_exists:base_htrans.gin
E0123 13:12:41.636147 139631495815168 resource_reader.py:55] Path not found: base_htrans.gin
I0123 13:12:41.636356 139631495815168 resource_reader.py:50] system_path_file_exists:trainer_configuration.gin
E0123 13:12:41.636454 139631495815168 resource_reader.py:55] Path not found: trainer_configuration.gin
I0123 13:12:41.642703 139631495815168 resource_reader.py:50] system_path_file_exists:size/medium_150M.gin
E0123 13:12:41.642820 139631495815168 resource_reader.py:55] Path not found: size/medium_150M.gin
I0123 13:12:41.643139 139631495815168 resource_reader.py:50] system_path_file_exists:options/positions_t5.gin
E0123 13:12:41.643243 139631495815168 resource_reader.py:55] Path not found: options/positions_t5.gin
I0123 13:12:41.643521 139631495815168 resource_reader.py:50] system_path_file_exists:options/lr_cosine_decay.gin
E0123 13:12:41.643620 139631495815168 resource_reader.py:55] Path not found: options/lr_cosine_decay.gin
I0123 13:12:41.644024 139631495815168 resource_reader.py:50] system_path_file_exists:options/seq_1024_nocache.gin
E0123 13:12:41.644124 139631495815168 resource_reader.py:55] Path not found: options/seq_1024_nocache.gin
I0123 13:12:41.647801 139631495815168 training_loop.py:334] ==== Training loop: initializing model ====
I0123 13:12:41.754300 139631495815168 xla_bridge.py:660] Unable to initialize backend 'rocm': NOT_FOUND: Could not find registered platform with name: "rocm". Available platform names are: CUDA
I0123 13:12:41.755012 139631495815168 xla_bridge.py:660] Unable to initialize backend 'tpu': INTERNAL: Failed to open libtpu.so: libtpu.so: cannot open shared object file: No such file or directory
I0123 13:12:41.761722 139631495815168 training_loop.py:335] Process 0 of 1
I0123 13:12:41.761775 139631495815168 training_loop.py:336] Local device count = 1
I0123 13:12:41.761815 139631495815168 training_loop.py:337] Number of replicas = 1
I0123 13:12:41.761846 139631495815168 training_loop.py:339] Using random number seed 42
I0123 13:12:42.237480 139631495815168 training_loop.py:359] Initializing the model.
I0123 13:12:42.616306 139631495815168 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.616583 139631495815168 decoder_stack.py:316] dstack: scanning over 1 windows.
I0123 13:12:42.616688 139631495815168 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 13:12:42.616769 139631495815168 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 13:12:42.616845 139631495815168 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 13:12:42.616927 139631495815168 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 13:12:42.616999 139631495815168 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 13:12:42.617069 139631495815168 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 13:12:42.617139 139631495815168 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 13:12:42.617208 139631495815168 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 13:12:42.617278 139631495815168 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 13:12:42.617347 139631495815168 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 13:12:42.617415 139631495815168 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 13:12:42.617484 139631495815168 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0123 13:12:42.617522 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:42.617567 139631495815168 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 13:12:42.617689 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:42.617731 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:42.617761 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:42.619773 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.624998 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:42.635508 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.635787 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:42.640105 139631495815168 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:12:42.650670 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:42.650730 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:42.650768 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:42.650799 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.650863 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.652058 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.652137 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.652842 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.655315 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.661365 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.663080 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.663161 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:42.663197 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:42.663263 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.663394 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:42.663723 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:42.663771 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:42.665693 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.665797 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:42.668646 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.668727 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:42.669220 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:42.679205 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:42.687880 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.687980 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:42.688276 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.688360 139631495815168 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 13:12:42.688471 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:42.688513 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:42.688544 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:42.690394 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.692831 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:42.698360 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.698629 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:42.701201 139631495815168 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:12:42.704998 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:42.705054 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:42.705090 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:42.705119 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.705179 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.705756 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.705833 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.706190 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.706953 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.709380 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.709996 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.710074 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:42.710108 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:42.710164 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.710289 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:42.710620 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:42.710664 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:42.712598 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.712692 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:42.715157 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.715241 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:42.715671 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:42.717950 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:42.719820 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.719920 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:42.720205 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.720285 139631495815168 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 13:12:42.720394 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:42.720432 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:42.720463 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:42.722348 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.724675 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:42.730559 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.730832 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:42.733431 139631495815168 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:12:42.737276 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:42.737333 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:42.737368 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:42.737399 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.737461 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.738027 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.738104 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.738458 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.739228 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.741700 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.742364 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.742446 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:42.742481 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:42.742540 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.742674 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:42.742998 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:42.743042 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:42.744946 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.745041 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:42.747529 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.747614 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:42.748099 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:42.750343 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:42.752220 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.752319 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:42.752609 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.752691 139631495815168 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 13:12:42.752799 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:42.752839 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:42.752869 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:42.755347 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.757987 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:42.763626 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.763893 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:42.766535 139631495815168 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:12:42.770362 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:42.770420 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:42.770456 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:42.770487 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.770549 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.771120 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.771200 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.771560 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.772327 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.774862 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.775497 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.775574 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:42.775610 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:42.775670 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.775802 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:42.776126 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:42.776170 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:42.778062 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.778160 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:42.780707 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.780792 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:42.781225 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:42.783502 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:42.785395 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.785492 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:42.785790 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.785873 139631495815168 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 13:12:42.785984 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:42.786024 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:42.786054 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:42.787952 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.790316 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:42.796120 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.796387 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:42.799160 139631495815168 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:12:42.802892 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:42.802949 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:42.802984 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:42.803015 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.803077 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.803641 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.803720 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.804072 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.804830 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.807664 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.808285 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.808363 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:42.808398 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:42.808457 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.808591 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:42.808920 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:42.808964 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:42.810873 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.810968 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:42.813481 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.813565 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:42.814001 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:42.816249 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:42.818202 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.818299 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:42.818587 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.818667 139631495815168 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 13:12:42.818779 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:42.818820 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:42.818851 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:42.820693 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.823051 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:42.828611 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.828874 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:42.831516 139631495815168 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:12:42.835254 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:42.835309 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:42.835345 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:42.835376 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.835439 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.836043 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.836119 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.836473 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.837249 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.839726 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.840353 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.840429 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:42.840463 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:42.840527 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.840655 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:42.840983 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:42.841027 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:42.842923 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.843019 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:42.845543 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.845623 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:42.846061 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:42.848358 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:42.850272 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.850368 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:42.850655 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.850736 139631495815168 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 13:12:42.850847 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:42.850886 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:42.850917 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:42.852761 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.855196 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:42.860785 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.861048 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:42.863775 139631495815168 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:12:42.867583 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:42.867639 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:42.867674 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:42.867704 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.867765 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.868323 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.868398 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.868755 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.869521 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.872069 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.872697 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.872773 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:42.872808 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:42.872867 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.872996 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:42.873322 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:42.873366 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:42.875324 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.875421 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:42.877932 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.878011 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:42.878445 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:42.881069 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:42.882980 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.883085 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:42.883377 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:42.883461 139631495815168 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 13:12:42.883574 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:42.883615 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:42.883647 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:43.027951 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.031114 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:43.036980 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.037281 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:43.039963 139631495815168 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:12:43.043917 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:43.043976 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:43.044013 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:43.044044 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.044112 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.044720 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.044797 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.045159 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.045942 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.048508 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.049152 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.049231 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:43.049266 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:43.049326 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.049452 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:43.049798 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:43.049843 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.051725 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.051826 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.054378 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.054461 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:43.054892 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:43.057174 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.059074 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.059184 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.059472 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.059555 139631495815168 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 13:12:43.059665 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:43.059704 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:43.059734 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:43.061653 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.064002 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:43.069569 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.069840 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:43.072497 139631495815168 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:12:43.076330 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:43.076385 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:43.076421 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:43.076451 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.076514 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.077087 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.077165 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.077528 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.078296 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.080816 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.081438 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.081517 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:43.081552 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:43.081612 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.081747 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:43.082077 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:43.082122 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.084009 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.084105 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.086632 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.086717 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:43.087145 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:43.089390 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.091336 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.091433 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.091728 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.091814 139631495815168 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 13:12:43.091926 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:43.091966 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:43.091996 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:43.093828 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.096228 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:43.101703 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.101970 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:43.105116 139631495815168 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:12:43.108934 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:43.108990 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:43.109025 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:43.109055 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.109115 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.109728 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.109805 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.110165 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.110928 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.113377 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.114009 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.114088 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:43.114124 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:43.114182 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.114309 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:43.114640 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:43.114684 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.116572 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.116667 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.119214 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.119295 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:43.119718 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:43.122028 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.123920 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.124016 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.124302 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.124388 139631495815168 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 13:12:43.124500 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:43.124539 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:43.124569 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:43.126410 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.128852 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:43.134374 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.134641 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:43.137250 139631495815168 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:12:43.140999 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:43.141056 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:43.141091 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:43.141123 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.141185 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.141760 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.141837 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.142187 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.142951 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.145400 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.146022 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.146102 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:43.146136 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:43.146195 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.146323 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:43.146639 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:43.146682 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.148771 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.148865 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.151779 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.151861 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:43.152283 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:43.154595 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.156615 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.156712 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.156995 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.157075 139631495815168 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 13:12:43.157190 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:43.157231 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:43.157262 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:43.159285 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.161798 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:43.167435 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.167696 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:43.170455 139631495815168 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:12:43.174476 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:43.174531 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:43.174568 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:43.174598 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.174660 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.175225 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.175302 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.175653 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.176418 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.178858 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.179834 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.179914 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:43.179949 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:43.180008 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.180135 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:43.180455 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:43.180500 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.182384 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.182479 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.184944 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.185024 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:43.185510 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:43.187750 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.189648 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.189750 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.190036 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.190314 139631495815168 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 13:12:43.190385 139631495815168 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 13:12:43.190451 139631495815168 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 13:12:43.190508 139631495815168 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 13:12:43.190563 139631495815168 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 13:12:43.190616 139631495815168 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 13:12:43.190668 139631495815168 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 13:12:43.190720 139631495815168 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 13:12:43.190771 139631495815168 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 13:12:43.190822 139631495815168 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 13:12:43.190874 139631495815168 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 13:12:43.190926 139631495815168 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0123 13:12:43.190963 139631495815168 decoder_stack.py:344] dstack: Final layernorm.
I0123 13:12:43.194425 139631495815168 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:43.241793 139631495815168 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.241879 139631495815168 decoder_stack.py:333] dstack: autoregressive generator.
I0123 13:12:43.241934 139631495815168 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 13:12:43.242038 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:43.242077 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:43.242107 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:43.242169 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.244553 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:43.249954 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.250217 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:43.252829 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:43.269313 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:43.269370 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:43.269405 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:43.269436 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.269497 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.270628 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.270707 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.271402 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.273387 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.278258 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.279568 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.279654 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:43.279691 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:43.279750 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.279880 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:43.279989 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:43.280030 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.281947 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.282043 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.284452 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.284533 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:43.284641 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:43.286862 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.288796 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.288893 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.289177 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.289259 139631495815168 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 13:12:43.289368 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:43.289407 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:43.289437 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:43.289501 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.291744 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:43.297180 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.297439 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:43.300110 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:43.313229 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:43.313285 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:43.313321 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:43.313352 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.313414 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.313985 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.314062 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.314412 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.315099 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.317560 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.318175 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.318252 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:43.318291 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:43.318351 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.318486 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:43.318595 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:43.318633 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.320537 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.320632 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.323028 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.323109 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:43.323216 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:43.325410 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.327344 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.327442 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.327730 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.327811 139631495815168 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 13:12:43.327921 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:43.327959 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:43.327990 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:43.328053 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.330305 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:43.335698 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.335958 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:43.338628 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:43.351582 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:43.351639 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:43.351674 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:43.351704 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.351766 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.352331 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.352408 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.352764 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.353451 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.355908 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.356535 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.356616 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:43.356649 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:43.356713 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.356842 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:43.356950 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:43.356991 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.358903 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.358999 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.361384 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.361464 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:43.361572 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:43.363785 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.365700 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.365797 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.366081 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.366163 139631495815168 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 13:12:43.366272 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:43.366311 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:43.366341 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:43.366404 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.368647 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:43.374022 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.374282 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:43.376930 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:43.389648 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:43.389704 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:43.389740 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:43.389770 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.389830 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.390386 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.390466 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.390820 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.391505 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.393975 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.394604 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.394681 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:43.394716 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:43.394779 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.394913 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:43.395022 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:43.395062 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.396993 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.397089 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.399460 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.399542 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:43.399651 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:43.401877 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.403727 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.403823 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.404107 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.404189 139631495815168 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 13:12:43.404297 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:43.404337 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:43.404366 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:43.404428 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.407012 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:43.412440 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.412707 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:43.419345 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:43.432429 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:43.432490 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:43.432528 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:43.432559 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.432634 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.433243 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.433322 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.433687 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.434381 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.436956 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.437604 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.437689 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:43.437724 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:43.437783 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.437918 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:43.438035 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:43.438076 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.440020 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.440116 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.442770 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.442857 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:43.442969 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:43.445292 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.447186 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.447284 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.447566 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.447647 139631495815168 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 13:12:43.447758 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:43.447801 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:43.447831 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:43.447895 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.450154 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:43.455578 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.455837 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:43.458535 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:43.471619 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:43.471676 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:43.471711 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:43.471741 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.471801 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.472361 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.472438 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.472792 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.473484 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.475963 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.476590 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.476667 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:43.476701 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:43.476759 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.476886 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:43.477001 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:43.477041 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.478979 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.479075 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.481457 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.481538 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:43.481653 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:43.483875 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.485750 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.485848 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.486133 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.486214 139631495815168 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 13:12:43.486323 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:43.486362 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:43.486391 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:43.486455 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.488669 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:43.494145 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.494405 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:43.496992 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:43.509664 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:43.509721 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:43.509757 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:43.509787 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.509853 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.510409 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.510485 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.510830 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.511512 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.513972 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.514958 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.515036 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:43.515071 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:43.515128 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.515260 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:43.515368 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:43.515412 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.517286 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.517382 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.519759 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.519840 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:43.519948 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:43.522156 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.524086 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.524181 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.524463 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.524545 139631495815168 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 13:12:43.524654 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:43.524693 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:43.524724 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:43.524787 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.527011 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:43.532384 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.532655 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:43.535338 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:43.548036 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:43.548093 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:43.548129 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:43.548160 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.548222 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.548825 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.548902 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.549257 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.549958 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.552402 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.553031 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.553110 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:43.553143 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:43.553201 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.553328 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:43.553437 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:43.553481 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.555532 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.555628 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.558075 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.558156 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:43.558264 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:43.560482 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.562373 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.562471 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.562759 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.562841 139631495815168 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 13:12:43.562952 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:43.562992 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:43.563022 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:43.563086 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.565477 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:43.570960 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.571225 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:43.573847 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:43.586617 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:43.586673 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:43.586709 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:43.586740 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.586805 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.587454 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.587531 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.587885 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.588582 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.591204 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.591884 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.591963 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:43.591999 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:43.592059 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.592187 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:43.592296 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:43.592335 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.594223 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.594319 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.596708 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.596787 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:43.596895 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:43.599096 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.601022 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.601117 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.601400 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.601481 139631495815168 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 13:12:43.601588 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:43.601627 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:43.601668 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:43.601734 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.603967 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:43.609362 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.609623 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:43.612269 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:43.625227 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:43.625283 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:43.625319 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:43.625351 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.625414 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.626031 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.626108 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.626462 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.627153 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.629595 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.630229 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.630308 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:43.630342 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:43.630401 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.630534 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:43.630644 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:43.630683 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.632553 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.632655 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.635127 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.635207 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:43.635314 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:43.637540 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.639405 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.639502 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.639789 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.639871 139631495815168 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 13:12:43.639980 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:43.640018 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:43.640048 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:43.640110 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.642345 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:43.647813 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.648075 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:43.650711 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:43.663378 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:43.663434 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:43.663474 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:43.663506 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.663568 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.664122 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.664197 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.664542 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.665227 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.667702 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.668362 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.668438 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:43.668473 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:43.668531 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.668660 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:43.668773 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:43.668812 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.670684 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.670785 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.673186 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.673265 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:43.673373 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:43.675564 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.677475 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.677569 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.677858 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.677938 139631495815168 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 13:12:43.678046 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:43.678085 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:43.678114 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:43.678177 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.680402 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:43.685763 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.686021 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:43.688832 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:43.701390 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:43.701446 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:43.701485 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:43.701516 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.701577 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.702138 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.702214 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.702566 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.703305 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.705751 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.706367 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.706443 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:43.706477 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:43.706536 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.706676 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:43.706785 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:43.706823 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.708664 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.708757 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.711136 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.711215 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:43.711322 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:43.713549 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.715399 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.715495 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.715777 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.715867 139631495815168 decoder_stack.py:344] dstack: Final layernorm.
I0123 13:12:43.718724 139631495815168 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:43.774110 139631495815168 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.774194 139631495815168 decoder_stack.py:333] dstack: autoregressive generator.
I0123 13:12:43.774249 139631495815168 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 13:12:43.774351 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:43.774389 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:43.774419 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:43.774480 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.777090 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:43.782445 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.782706 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:43.785269 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:43.797590 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:43.797651 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:43.797688 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:43.797719 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.797780 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.798339 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.798416 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.798767 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.799436 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.801898 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.802516 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.802594 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:43.802629 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:43.802688 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.802819 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:43.802936 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:43.802975 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.804809 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.804903 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.807351 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.807432 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:43.807539 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:43.809776 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.811604 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.811698 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.811980 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.812062 139631495815168 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 13:12:43.812168 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:43.812207 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:43.812237 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:43.812299 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.814524 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:43.819865 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.820127 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:43.822755 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:43.835066 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:43.835123 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:43.835159 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:43.835190 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.835251 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.835803 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.835880 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.836230 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.836909 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.839402 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.840018 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.840095 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:43.840130 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:43.840188 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.840315 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:43.840422 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:43.840466 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.842314 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.842410 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.844773 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.844853 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:43.844963 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:43.847219 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.849031 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.849128 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.849411 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.849492 139631495815168 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 13:12:43.849598 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:43.849637 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:43.849674 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:43.849739 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.851977 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:43.857324 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.857586 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:43.860241 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:43.872836 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:43.872894 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:43.872930 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:43.872961 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.873024 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.873580 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.873661 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.874009 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.874673 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.877166 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.877787 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.877865 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:43.877899 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:43.877957 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.878085 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:43.878194 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:43.878234 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.880082 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.880177 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.882578 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.882659 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:43.882769 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:43.885532 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.887397 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.887494 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.887779 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.887862 139631495815168 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 13:12:43.887971 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:43.888010 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:43.888041 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:43.888104 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.890335 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:43.895714 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.895975 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:43.898647 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:43.911336 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:43.911393 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:43.911434 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:43.911473 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.911537 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.912099 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.912175 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.912528 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.913211 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.915729 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.916347 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.916423 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:43.916457 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:43.916515 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.916642 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:43.916750 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:43.916790 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.918665 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.918759 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.921146 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.921224 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:43.921331 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:43.923610 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.925478 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.925574 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.925865 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.925947 139631495815168 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 13:12:43.926055 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:43.926093 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:43.926122 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:43.926186 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.928408 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:43.933800 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.934057 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:43.937061 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:43.949792 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:43.949846 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:43.949880 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:43.949910 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.949974 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.950527 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.950601 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.950951 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.951632 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.954155 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.954805 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.954884 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:43.954919 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:43.954978 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.955111 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:43.955223 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:43.955261 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.957117 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.957215 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.959593 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.959675 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:43.959782 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:43.962041 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.963881 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.963975 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.964256 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.964337 139631495815168 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 13:12:43.964444 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:43.964483 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:43.964512 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:43.964573 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.966783 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:43.972184 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.972440 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:43.975106 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:43.987609 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:43.987664 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:43.987699 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:43.987729 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.987790 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.988351 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.988426 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.988774 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.989457 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.991959 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.992580 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.992656 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:43.992690 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:43.992747 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.992873 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:43.992980 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:43.993018 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:43.994874 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.994974 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:43.997344 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:43.997422 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:43.997531 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:44.000207 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:44.002059 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.002156 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:44.002440 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.002522 139631495815168 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 13:12:44.002629 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:44.002668 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:44.002697 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:44.002760 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.004981 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:44.010376 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.010635 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:44.013319 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:44.025875 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:44.025929 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:44.025964 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:44.025993 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.026054 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.026615 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.026691 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.027058 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.027736 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.030248 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.030868 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.030944 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:44.030976 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:44.031034 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.031160 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:44.031267 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:44.031305 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:44.033158 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.033250 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:44.035611 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.035690 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:44.035796 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:44.038192 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:44.040035 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.040130 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:44.040408 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.040489 139631495815168 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 13:12:44.040595 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:44.040633 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:44.040662 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:44.040724 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.042944 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:44.048454 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.048712 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:44.051368 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:44.063917 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:44.063971 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:44.064005 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:44.064034 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.064095 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.064658 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.064733 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.065092 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.065790 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.068301 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.068924 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.069001 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:44.069035 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:44.069092 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.069218 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:44.069324 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:44.069361 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:44.071227 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.071321 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:44.073685 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.073770 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:44.073880 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:44.076157 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:44.078002 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.078098 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:44.078381 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.078461 139631495815168 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 13:12:44.078569 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:44.078607 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:44.078637 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:44.078700 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.080919 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:44.086352 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.086614 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:44.089260 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:44.101954 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:44.102009 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:44.102043 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:44.102073 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.102134 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.102695 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.102770 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.103127 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.103807 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.106361 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.106975 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.107052 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:44.107086 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:44.107144 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.107272 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:44.107383 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:44.107421 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:44.109269 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.109361 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:44.111739 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.111822 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:44.111930 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:44.114565 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:44.116412 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.116508 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:44.116791 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.116871 139631495815168 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 13:12:44.116978 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:44.117016 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:44.117046 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:44.117108 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.119315 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:44.124658 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.124917 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:44.127568 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:44.140149 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:44.140203 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:44.140240 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:44.140270 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.140331 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.140899 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.140974 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.141322 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.142015 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.144510 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.145133 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.145213 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:44.145247 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:44.145303 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.145437 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:44.145545 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:44.145582 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:44.148022 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.148115 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:44.150620 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.150699 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:44.150818 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:44.153028 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:44.154865 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.154959 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:44.155238 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.155318 139631495815168 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 13:12:44.155423 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:44.155461 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:44.155490 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:44.155552 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.157765 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:44.163110 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.163371 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:44.166022 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:44.178990 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:44.179044 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:44.179078 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:44.179106 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.179171 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.179725 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.179801 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.180156 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.180840 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.183332 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.183959 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.184035 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:44.184068 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:44.184124 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.184251 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:44.184355 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:44.184391 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:44.186249 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.186342 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:44.188689 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.188767 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:44.188874 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:44.191163 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:44.192999 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.193093 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:44.193377 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.193458 139631495815168 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 13:12:44.193565 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:44.193602 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:44.193631 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:44.193700 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.195897 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:44.201227 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.201482 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:44.204116 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:44.216622 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:44.216677 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:44.216711 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:44.216740 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.216800 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.217348 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.217422 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.217781 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.218469 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.220957 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.221576 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.221658 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:44.221694 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:44.221750 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.221877 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:44.221985 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:44.222022 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:44.223855 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.223947 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:44.226315 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.226394 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:44.226498 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:44.229147 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:44.231011 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.231106 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:44.231386 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:44.231471 139631495815168 decoder_stack.py:344] dstack: Final layernorm.
I0123 13:12:44.234286 139631495815168 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:48.677635 139631495815168 optimizer_config.py:74] Using Flax Adafactor Optimizer. lr=1.000000, b1=0.900000
I0123 13:12:49.228476 139631495815168 training_loop.py:409] No working directory specified.
I0123 13:12:49.228593 139631495815168 training_loop.py:431] Loading pre-trained model from ag_ckpt_vocab:
I0123 13:12:49.229336 139631495815168 checkpoints.py:1062] Restoring legacy Flax checkpoint from ag_ckpt_vocab/checkpoint_10999999
I0123 13:12:52.265271 139631495815168 training_loop.py:447] Only restoring trainable parameters.
I0123 13:12:52.265975 139631495815168 training_loop.py:724] parameter: decoder/embed/embedding, shape (1024, 1024), size 1048576
I0123 13:12:52.266036 139631495815168 training_loop.py:724] parameter: decoder/final_layernorm/scale, shape (1024,), size 1024
I0123 13:12:52.266082 139631495815168 training_loop.py:724] parameter: decoder/transformer0/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 13:12:52.266126 139631495815168 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 13:12:52.266166 139631495815168 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.266206 139631495815168 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 13:12:52.266246 139631495815168 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.266285 139631495815168 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.266324 139631495815168 training_loop.py:724] parameter: decoder/transformer0/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 13:12:52.266361 139631495815168 training_loop.py:724] parameter: decoder/transformer0/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 13:12:52.266398 139631495815168 training_loop.py:724] parameter: decoder/transformer0/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.266436 139631495815168 training_loop.py:724] parameter: decoder/transformer0/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 13:12:52.266474 139631495815168 training_loop.py:724] parameter: decoder/transformer1/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 13:12:52.266511 139631495815168 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 13:12:52.266550 139631495815168 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.266587 139631495815168 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 13:12:52.266624 139631495815168 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.266662 139631495815168 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.266699 139631495815168 training_loop.py:724] parameter: decoder/transformer1/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 13:12:52.266736 139631495815168 training_loop.py:724] parameter: decoder/transformer1/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 13:12:52.266787 139631495815168 training_loop.py:724] parameter: decoder/transformer1/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.266826 139631495815168 training_loop.py:724] parameter: decoder/transformer1/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 13:12:52.266862 139631495815168 training_loop.py:724] parameter: decoder/transformer10/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 13:12:52.266900 139631495815168 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 13:12:52.266936 139631495815168 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.266973 139631495815168 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 13:12:52.267009 139631495815168 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.267045 139631495815168 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.267081 139631495815168 training_loop.py:724] parameter: decoder/transformer10/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 13:12:52.267117 139631495815168 training_loop.py:724] parameter: decoder/transformer10/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 13:12:52.267153 139631495815168 training_loop.py:724] parameter: decoder/transformer10/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.267189 139631495815168 training_loop.py:724] parameter: decoder/transformer10/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 13:12:52.267226 139631495815168 training_loop.py:724] parameter: decoder/transformer11/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 13:12:52.267262 139631495815168 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 13:12:52.267299 139631495815168 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.267336 139631495815168 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 13:12:52.267372 139631495815168 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.267408 139631495815168 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.267445 139631495815168 training_loop.py:724] parameter: decoder/transformer11/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 13:12:52.267481 139631495815168 training_loop.py:724] parameter: decoder/transformer11/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 13:12:52.267516 139631495815168 training_loop.py:724] parameter: decoder/transformer11/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.267551 139631495815168 training_loop.py:724] parameter: decoder/transformer11/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 13:12:52.267587 139631495815168 training_loop.py:724] parameter: decoder/transformer2/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 13:12:52.267622 139631495815168 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 13:12:52.267657 139631495815168 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.267693 139631495815168 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 13:12:52.267734 139631495815168 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.267771 139631495815168 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.267807 139631495815168 training_loop.py:724] parameter: decoder/transformer2/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 13:12:52.267843 139631495815168 training_loop.py:724] parameter: decoder/transformer2/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 13:12:52.267879 139631495815168 training_loop.py:724] parameter: decoder/transformer2/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.267914 139631495815168 training_loop.py:724] parameter: decoder/transformer2/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 13:12:52.267949 139631495815168 training_loop.py:724] parameter: decoder/transformer3/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 13:12:52.267984 139631495815168 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 13:12:52.268020 139631495815168 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.268056 139631495815168 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 13:12:52.268091 139631495815168 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.268126 139631495815168 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.268162 139631495815168 training_loop.py:724] parameter: decoder/transformer3/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 13:12:52.268198 139631495815168 training_loop.py:724] parameter: decoder/transformer3/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 13:12:52.268235 139631495815168 training_loop.py:724] parameter: decoder/transformer3/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.268272 139631495815168 training_loop.py:724] parameter: decoder/transformer3/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 13:12:52.268308 139631495815168 training_loop.py:724] parameter: decoder/transformer4/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 13:12:52.268345 139631495815168 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 13:12:52.268381 139631495815168 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.268418 139631495815168 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 13:12:52.268454 139631495815168 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.268490 139631495815168 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.268526 139631495815168 training_loop.py:724] parameter: decoder/transformer4/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 13:12:52.268562 139631495815168 training_loop.py:724] parameter: decoder/transformer4/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 13:12:52.268598 139631495815168 training_loop.py:724] parameter: decoder/transformer4/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.268633 139631495815168 training_loop.py:724] parameter: decoder/transformer4/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 13:12:52.268669 139631495815168 training_loop.py:724] parameter: decoder/transformer5/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 13:12:52.268710 139631495815168 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 13:12:52.268748 139631495815168 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.268785 139631495815168 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 13:12:52.268820 139631495815168 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.268856 139631495815168 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.268891 139631495815168 training_loop.py:724] parameter: decoder/transformer5/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 13:12:52.268927 139631495815168 training_loop.py:724] parameter: decoder/transformer5/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 13:12:52.268963 139631495815168 training_loop.py:724] parameter: decoder/transformer5/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.268998 139631495815168 training_loop.py:724] parameter: decoder/transformer5/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 13:12:52.269035 139631495815168 training_loop.py:724] parameter: decoder/transformer6/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 13:12:52.269071 139631495815168 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 13:12:52.269107 139631495815168 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.269143 139631495815168 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 13:12:52.269179 139631495815168 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.269214 139631495815168 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.269250 139631495815168 training_loop.py:724] parameter: decoder/transformer6/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 13:12:52.269285 139631495815168 training_loop.py:724] parameter: decoder/transformer6/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 13:12:52.269322 139631495815168 training_loop.py:724] parameter: decoder/transformer6/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.269359 139631495815168 training_loop.py:724] parameter: decoder/transformer6/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 13:12:52.269395 139631495815168 training_loop.py:724] parameter: decoder/transformer7/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 13:12:52.269431 139631495815168 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 13:12:52.269466 139631495815168 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.269502 139631495815168 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 13:12:52.269538 139631495815168 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.269573 139631495815168 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.269608 139631495815168 training_loop.py:724] parameter: decoder/transformer7/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 13:12:52.269648 139631495815168 training_loop.py:724] parameter: decoder/transformer7/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 13:12:52.269693 139631495815168 training_loop.py:724] parameter: decoder/transformer7/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.269733 139631495815168 training_loop.py:724] parameter: decoder/transformer7/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 13:12:52.269770 139631495815168 training_loop.py:724] parameter: decoder/transformer8/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 13:12:52.269806 139631495815168 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 13:12:52.269842 139631495815168 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.269878 139631495815168 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 13:12:52.269914 139631495815168 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.269949 139631495815168 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.269985 139631495815168 training_loop.py:724] parameter: decoder/transformer8/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 13:12:52.270020 139631495815168 training_loop.py:724] parameter: decoder/transformer8/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 13:12:52.270056 139631495815168 training_loop.py:724] parameter: decoder/transformer8/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.270092 139631495815168 training_loop.py:724] parameter: decoder/transformer8/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 13:12:52.270128 139631495815168 training_loop.py:724] parameter: decoder/transformer9/relative_positions/rel_embedding, shape (8, 32), size 256
I0123 13:12:52.270164 139631495815168 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/attention_scale, shape (8,), size 8
I0123 13:12:52.270200 139631495815168 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.270236 139631495815168 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0123 13:12:52.270271 139631495815168 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.270307 139631495815168 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.270342 139631495815168 training_loop.py:724] parameter: decoder/transformer9/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0123 13:12:52.270377 139631495815168 training_loop.py:724] parameter: decoder/transformer9/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0123 13:12:52.270412 139631495815168 training_loop.py:724] parameter: decoder/transformer9/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0123 13:12:52.270447 139631495815168 training_loop.py:724] parameter: decoder/transformer9/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0123 13:12:52.270475 139631495815168 training_loop.py:725] Total parameters: 152072288
I0123 13:12:52.270686 139631495815168 training_loop.py:739] Total state size: 0
I0123 13:12:52.291722 139631495815168 training_loop.py:492] Training loop: creating task for mode beam_search
I0123 13:12:52.291994 139631495815168 training_loop.py:685] Creating logging writer (train) for mode beam_search
I0123 13:12:52.292367 139631495815168 training_loop.py:652] Compiling mode beam_search with jit.
I0123 13:12:52.292691 139631495815168 training_loop.py:89] registering functions: dict_keys([])
I0123 13:12:52.308736 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a ? simtri d b f e a f
I0123 13:12:52.365001 139631495815168 ddar.py:60] Depth 1/1000 time = 0.04507708549499512
I0123 13:12:52.437290 139631495815168 ddar.py:60] Depth 2/1000 time = 0.07220625877380371
I0123 13:12:52.519452 139631495815168 ddar.py:60] Depth 3/1000 time = 0.08208179473876953
I0123 13:12:52.629569 139631495815168 ddar.py:60] Depth 4/1000 time = 0.1099851131439209
I0123 13:12:52.741690 139631495815168 ddar.py:60] Depth 5/1000 time = 0.11198735237121582
I0123 13:12:52.743923 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:12:52.743979 139631495815168 alphageometry.py:540] Depth 0. There are 1 nodes to expand:
I0123 13:12:52.744014 139631495815168 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a c d 00 T a b b d 01 ; e : C b c e 02 T a b a e 03 ; f : C a b f 04 T a b c f 05 ? S d b f e a f {F1} x00
I0123 13:12:52.744044 139631495815168 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C a c d 00 T a b b d 01 ; e : C b c e 02 T a b a e 03 ; f : C a b f 04 T a b c f 05 ? S d b f e a f {F1} x00
I0123 13:12:52.862551 139631495815168 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.862721 139631495815168 decoder_stack.py:316] dstack: scanning over 1 windows.
I0123 13:12:52.862823 139631495815168 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 13:12:52.862903 139631495815168 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 13:12:52.862977 139631495815168 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 13:12:52.863049 139631495815168 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 13:12:52.863120 139631495815168 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 13:12:52.863190 139631495815168 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 13:12:52.863260 139631495815168 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 13:12:52.863331 139631495815168 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 13:12:52.863399 139631495815168 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 13:12:52.863469 139631495815168 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 13:12:52.863539 139631495815168 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 13:12:52.863605 139631495815168 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0123 13:12:52.863644 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:52.863688 139631495815168 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 13:12:52.863794 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:52.863831 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:52.863862 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:52.865732 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.868260 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:52.874083 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.874366 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:52.877021 139631495815168 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:12:52.880929 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:52.880985 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:52.881031 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:52.881064 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.881126 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.882189 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.882272 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.882650 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.883454 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.886061 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.886715 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.886795 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:52.886831 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:52.886893 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.887027 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:52.887365 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:52.887408 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:52.889347 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.889440 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:52.892009 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.892088 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:52.892510 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:52.894829 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:52.896751 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.896847 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:52.897135 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.897216 139631495815168 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 13:12:52.897322 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:52.897360 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:52.897391 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:52.899185 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.901573 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:52.907151 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.907413 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:52.909940 139631495815168 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:12:52.913607 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:52.913669 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:52.913704 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:52.913739 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.913803 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.914365 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.914441 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.914795 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.915553 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.917995 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.918612 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.918689 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:52.918722 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:52.918779 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.918907 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:52.919229 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:52.919270 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:52.921207 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.921299 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:52.923733 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.923812 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:52.924228 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:52.926453 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:52.928327 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.928420 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:52.928703 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.928782 139631495815168 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 13:12:52.928887 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:52.928925 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:52.928954 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:52.930814 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.933095 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:52.938597 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.938852 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:52.941379 139631495815168 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:12:52.945043 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:52.945099 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:52.945132 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:52.945162 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.945228 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.945793 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.945870 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.946220 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.946969 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.949334 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.949948 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.950026 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:52.950058 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:52.950115 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.950242 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:52.950558 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:52.950600 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:52.952738 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.952832 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:52.955242 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.955320 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:52.955738 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:52.957948 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:52.959817 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.959912 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:52.960195 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.960275 139631495815168 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 13:12:52.960381 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:52.960419 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:52.960448 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:52.962288 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.964556 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:52.970023 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.970278 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:52.972804 139631495815168 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:12:52.976484 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:52.976538 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:52.976571 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:52.976600 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.976660 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.977216 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.977290 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.977647 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.978391 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.980798 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.981412 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.981488 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:52.981521 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:52.981579 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.981714 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:52.982033 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:52.982074 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:52.984018 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.984111 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:52.986531 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.986610 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:52.987026 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:52.989224 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:52.991310 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.991407 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:52.991692 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.991772 139631495815168 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 13:12:52.991879 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:52.991917 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:52.991945 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:52.993810 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:52.996107 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:53.001570 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.001832 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:53.004361 139631495815168 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:12:53.008424 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:53.008479 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:53.008513 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:53.008543 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.008602 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.009163 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.009239 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.009589 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.010347 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.012754 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.013368 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.013446 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:53.013479 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:53.013538 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.013669 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:53.013988 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:53.014030 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.015968 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.016059 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.018468 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.018547 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:53.018965 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:53.021166 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.023043 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.023138 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.023425 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.023505 139631495815168 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 13:12:53.023612 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:53.023650 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:53.023679 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:53.025530 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.027982 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:53.033490 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.033756 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:53.036270 139631495815168 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:12:53.039957 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:53.040011 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:53.040045 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:53.040075 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.040135 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.040686 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.040766 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.041120 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.041877 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.044267 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.044880 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.044956 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:53.044990 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:53.045046 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.045191 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:53.045502 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:53.045543 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.047489 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.047583 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.050014 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.050092 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:53.050509 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:53.052727 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.054617 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.054712 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.054997 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.055078 139631495815168 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 13:12:53.055184 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:53.055221 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:53.055251 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:53.057099 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.059361 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:53.064840 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.065096 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:53.067626 139631495815168 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:12:53.071301 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:53.071356 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:53.071389 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:53.071418 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.071479 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.072045 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.072121 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.072477 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.073221 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.075622 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.076230 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.076305 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:53.076339 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:53.076395 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.076519 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:53.076831 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:53.076871 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.078805 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.078899 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.081288 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.081366 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:53.081792 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:53.083997 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.085877 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.085971 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.086254 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.086333 139631495815168 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 13:12:53.086439 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:53.086477 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:53.086508 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:53.088341 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.090614 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:53.096069 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.096322 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:53.098853 139631495815168 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:12:53.102544 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:53.102598 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:53.102632 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:53.102661 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.102722 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.103281 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.103357 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.103715 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.104464 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.106887 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.107506 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.107582 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:53.107615 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:53.107673 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.107800 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:53.108115 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:53.108157 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.110106 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.110201 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.112632 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.112711 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:53.113131 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:53.115357 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.117228 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.117323 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.117613 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.117704 139631495815168 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 13:12:53.117812 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:53.117850 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:53.117880 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:53.119719 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.121984 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:53.127594 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.127847 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:53.130525 139631495815168 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:12:53.134635 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:53.134690 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:53.134724 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:53.134753 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.134814 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.135369 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.135444 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.135795 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.136558 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.138981 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.139602 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.139683 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:53.139717 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:53.139775 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.139903 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:53.140216 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:53.140258 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.142205 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.142298 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.144716 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.144794 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:53.145208 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:53.147432 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.149311 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.149404 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.149694 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.149775 139631495815168 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 13:12:53.149881 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:53.149918 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:53.149947 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:53.151781 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.154054 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:53.159473 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.159727 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:53.162226 139631495815168 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:12:53.165865 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:53.165919 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:53.165952 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:53.165981 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.166041 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.166587 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.166663 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.167008 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.167744 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.170148 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.170758 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.170834 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:53.170867 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:53.170925 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.171052 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:53.171364 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:53.171405 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.173336 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.173429 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.175827 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.175905 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:53.176323 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:53.178564 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.180432 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.180527 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.180812 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.180891 139631495815168 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 13:12:53.180999 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:53.181037 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:53.181066 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:53.182949 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.185248 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:53.190772 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.191029 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:53.193560 139631495815168 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:12:53.197244 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:53.197299 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:53.197333 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:53.197362 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.197423 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.197986 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.198062 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.198416 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.199175 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.201576 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.202193 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.202270 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:53.202304 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:53.202361 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.202487 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:53.202801 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:53.202842 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.204782 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.204874 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.207270 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.207350 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:53.207769 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:53.209974 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.211853 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.211948 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.212234 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.212315 139631495815168 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 13:12:53.212420 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:53.212458 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:53.212488 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:53.214366 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.216669 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:53.222159 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.222414 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:53.224938 139631495815168 transformer_layer.py:213] tlayer: windowed attention.
I0123 13:12:53.228621 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:53.228676 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:53.228710 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:53.228739 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.228800 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.229349 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.229424 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.229970 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.230721 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.233117 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.233743 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.233820 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:53.233854 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:53.233911 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.234038 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:53.234349 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:53.234390 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.236330 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.236422 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.238800 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.238879 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:53.239302 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:53.241511 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.243392 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.243487 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.243767 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.244010 139631495815168 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 13:12:53.244076 139631495815168 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 13:12:53.244133 139631495815168 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 13:12:53.244187 139631495815168 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 13:12:53.244240 139631495815168 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 13:12:53.244292 139631495815168 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 13:12:53.244344 139631495815168 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 13:12:53.244396 139631495815168 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 13:12:53.244447 139631495815168 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 13:12:53.244498 139631495815168 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 13:12:53.244550 139631495815168 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 13:12:53.244600 139631495815168 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0123 13:12:53.244636 139631495815168 decoder_stack.py:344] dstack: Final layernorm.
I0123 13:12:53.247492 139631495815168 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0123 13:12:53.292012 139631495815168 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.292096 139631495815168 decoder_stack.py:333] dstack: autoregressive generator.
I0123 13:12:53.292148 139631495815168 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 13:12:53.292250 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:53.292289 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:53.292317 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:53.292383 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.294715 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:53.300068 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.300331 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:53.302884 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:53.315460 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:53.315516 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:53.315549 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:53.315578 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.315639 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.316197 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.316272 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.316627 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.317313 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.320118 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.320741 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.320817 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:53.320849 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:53.320906 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.321033 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:53.321139 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:53.321175 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.323003 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.323097 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.325462 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.325541 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:53.325654 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:53.327877 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.329695 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.329791 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.330074 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.330154 139631495815168 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 13:12:53.330260 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:53.330298 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:53.330326 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:53.330387 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.332576 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:53.337892 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.338150 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:53.340755 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:53.353204 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:53.353260 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:53.353294 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:53.353322 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.353383 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.353944 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.354019 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.354368 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.355038 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.357491 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.358124 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.358201 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:53.358235 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:53.358293 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.358421 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:53.358530 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:53.358568 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.360416 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.360509 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.362893 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.362971 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:53.363078 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:53.365305 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.367121 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.367215 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.367497 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.367578 139631495815168 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 13:12:53.367684 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:53.367721 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:53.367750 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:53.367811 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.370007 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:53.375271 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.375528 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:53.378137 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:53.390299 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:53.390354 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:53.390387 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:53.390417 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.390478 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.391028 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.391104 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.391457 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.392123 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.394599 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.395218 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.395295 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:53.395328 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:53.395386 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.395514 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:53.395620 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:53.395658 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.397469 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.397562 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.399939 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.400018 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:53.400125 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:53.402362 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.404180 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.404274 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.404559 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.404639 139631495815168 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 13:12:53.404747 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:53.404784 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:53.404813 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:53.404875 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.407074 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:53.412361 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.412620 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:53.415235 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:53.427457 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:53.427512 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:53.427546 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:53.427576 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.427637 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.428186 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.428261 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.428608 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.429271 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.432142 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.432760 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.432838 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:53.432872 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:53.432929 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.433059 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:53.433165 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:53.433203 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.435029 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.435122 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.437480 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.437559 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:53.437672 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:53.439889 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.441718 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.441812 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.442097 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.442177 139631495815168 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 13:12:53.442284 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:53.442322 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:53.442351 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:53.442412 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.444600 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:53.449919 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.450182 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:53.452775 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:53.465422 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:53.465476 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:53.465510 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:53.465540 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.465602 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.466168 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.466245 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.466600 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.467286 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.469786 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.470396 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.470472 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:53.470505 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:53.470562 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.470689 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:53.470794 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:53.470831 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.472662 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.472754 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.475130 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.475208 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:53.475313 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:53.477527 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.479350 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.479444 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.479729 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.479810 139631495815168 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 13:12:53.479917 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:53.479955 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:53.479985 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:53.480048 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.482270 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:53.487573 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.487842 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:53.490478 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:53.502752 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:53.502805 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:53.502839 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:53.502868 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.502928 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.503484 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.503559 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.503908 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.504578 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.507063 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.507680 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.507755 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:53.507789 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:53.507846 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.507973 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:53.508080 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:53.508116 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.509956 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.510050 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.512416 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.512494 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:53.512603 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:53.514868 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.516699 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.516794 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.517085 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.517166 139631495815168 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 13:12:53.517274 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:53.517312 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:53.517341 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:53.517401 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.519610 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:53.524937 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.525196 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:53.527830 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:53.540246 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:53.540302 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:53.540336 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:53.540365 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.540426 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.540983 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.541057 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.541406 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.542091 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.544985 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.545598 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.545684 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:53.545718 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:53.545775 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.545902 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:53.546008 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:53.546046 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.547864 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.547957 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.550306 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.550384 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:53.550488 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:53.552700 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.554505 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.554601 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.554886 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.554968 139631495815168 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 13:12:53.555075 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:53.555113 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:53.555142 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:53.555205 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.557387 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:53.562850 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.563115 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:53.565752 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:53.578016 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:53.578070 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:53.578105 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:53.578134 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.578196 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.578753 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.578827 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.579174 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.579839 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.582294 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.582908 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.582985 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:53.583018 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:53.583075 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.583202 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:53.583309 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:53.583346 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.585177 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.585269 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.587643 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.587722 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:53.587830 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:53.590069 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.591914 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.592008 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.592294 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.592375 139631495815168 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 13:12:53.592481 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:53.592519 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:53.592549 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:53.592609 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.594816 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:53.600102 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.600358 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:53.602979 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:53.615166 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:53.615221 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:53.615255 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:53.615284 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.615347 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.615904 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.615979 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.616331 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.617006 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.619461 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.620072 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.620149 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:53.620182 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:53.620240 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.620366 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:53.620472 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:53.620511 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.622344 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.622438 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.624776 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.624854 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:53.624960 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:53.627180 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.629001 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.629095 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.629382 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.629463 139631495815168 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 13:12:53.629570 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:53.629608 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:53.629637 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:53.629707 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.631884 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:53.637187 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.637444 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:53.640070 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:53.652582 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:53.652643 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:53.652679 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:53.652709 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.652771 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.653328 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.653404 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.653763 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.654436 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.657310 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.657933 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.658012 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:53.658046 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:53.658103 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.658230 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:53.658337 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:53.658375 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.660185 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.660278 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.662778 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.662856 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:53.662962 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:53.665178 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.667005 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.667101 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.667386 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.667467 139631495815168 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 13:12:53.667575 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:53.667613 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:53.667641 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:53.667703 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.669904 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:53.675318 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.675578 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:53.678179 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:53.690447 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:53.690501 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:53.690541 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:53.690571 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.690634 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.691193 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.691269 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.691622 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.692304 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.694799 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.695419 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.695497 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:53.695530 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:53.695587 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.695715 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:53.695821 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:53.695858 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.697685 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.697778 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.700147 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.700226 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:53.700330 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:53.702543 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.704351 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.704446 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.704731 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.704812 139631495815168 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 13:12:53.704919 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:53.704957 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:53.704988 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:53.705050 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.707253 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:53.712570 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.712828 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:53.715460 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:53.727779 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:53.727833 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:53.727867 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:53.727901 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.727964 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.728524 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.728599 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.728946 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.729622 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.732098 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.732720 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.732797 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:53.732831 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:53.732889 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.733018 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:53.733124 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:53.733161 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.735008 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.735102 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.737468 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.737547 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:53.737659 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:53.739886 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.741720 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.741816 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.742109 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.742195 139631495815168 decoder_stack.py:344] dstack: Final layernorm.
I0123 13:12:53.744993 139631495815168 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0123 13:12:53.794603 139631495815168 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.794686 139631495815168 decoder_stack.py:333] dstack: autoregressive generator.
I0123 13:12:53.794739 139631495815168 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0123 13:12:53.794840 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:53.794878 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:53.794907 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:53.794969 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.797219 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:53.802608 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.802875 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:53.805423 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:53.817874 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:53.817929 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:53.817963 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:53.817992 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.818052 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.818605 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.818680 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.819026 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.819695 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.822098 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.822714 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.822790 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:53.822823 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:53.822880 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.823007 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:53.823114 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:53.823151 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.825024 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.825118 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.827478 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.827558 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:53.827665 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:53.829820 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.831620 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.831714 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.832000 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.832080 139631495815168 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0123 13:12:53.832187 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:53.832225 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:53.832254 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:53.832317 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.834532 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:53.840351 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.840614 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:53.843168 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:53.855533 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:53.855587 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:53.855621 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:53.855649 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.855711 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.856266 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.856343 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.856692 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.857362 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.859765 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.860376 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.860453 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:53.860486 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:53.860543 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.860671 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:53.860778 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:53.860815 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.862716 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.862809 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.865164 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.865242 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:53.865350 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:53.867508 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.869308 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.869403 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.869697 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.869778 139631495815168 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0123 13:12:53.869884 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:53.869921 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:53.869950 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:53.870011 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.872182 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:53.877665 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.877923 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:53.880451 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:53.892820 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:53.892876 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:53.892910 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:53.892939 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.893000 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.893548 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.893623 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.893981 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.894653 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.897058 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.897679 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.897757 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:53.897790 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:53.897847 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.897977 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:53.898084 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:53.898122 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.900000 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.900092 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.902463 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.902543 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:53.902651 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:53.904802 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.906628 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.906723 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.907009 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.907089 139631495815168 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0123 13:12:53.907196 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:53.907233 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:53.907261 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:53.907321 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.909489 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:53.914863 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.915120 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:53.917628 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:53.930127 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:53.930180 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:53.930214 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:53.930243 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.930303 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.930850 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.930926 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.931276 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.931942 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.934317 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.934921 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.934997 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:53.935030 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:53.935087 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.935211 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:53.935318 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:53.935356 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.937216 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.937308 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.939671 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.939750 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:53.939857 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:53.942007 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.943808 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.943902 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.944189 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.944270 139631495815168 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0123 13:12:53.944375 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:53.944413 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:53.944442 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:53.944503 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.946680 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:53.952475 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.952737 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:53.955271 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:53.967481 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:53.967541 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:53.967576 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:53.967606 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.967667 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.968221 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.968297 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.968643 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.969305 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.971695 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.972304 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.972380 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:53.972414 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:53.972471 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.972599 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:53.972706 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:53.972743 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.974610 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.974702 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.977018 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.977096 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:53.977203 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:53.979330 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:53.981124 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.981219 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:53.981504 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.981586 139631495815168 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0123 13:12:53.981698 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:53.981738 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:53.981767 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:53.981829 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.983997 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:53.989321 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:53.989584 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:53.992089 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:54.004332 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:54.004386 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:54.004426 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:54.004457 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.004518 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.005064 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.005139 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.005485 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.006160 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.008559 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.009199 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.009274 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:54.009308 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:54.009365 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.009492 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:54.009601 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:54.009644 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:54.011551 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.011645 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:54.014020 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.014100 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:54.014208 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:54.016366 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:54.018221 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.018317 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:54.018605 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.018686 139631495815168 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0123 13:12:54.018791 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:54.018829 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:54.018858 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:54.018920 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.021097 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:54.026488 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.026749 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:54.029444 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:54.041950 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:54.042004 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:54.042037 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:54.042073 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.042135 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.042683 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.042763 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.043112 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.043779 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.046199 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.046806 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.046883 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:54.046917 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:54.046974 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.047101 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:54.047208 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:54.047245 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:54.049139 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.049233 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:54.051586 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.051665 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:54.051773 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:54.053922 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:54.055733 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.055827 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:54.056111 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.056192 139631495815168 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0123 13:12:54.056298 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:54.056336 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:54.056365 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:54.056426 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.058617 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:54.064392 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.064652 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:54.067199 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:54.079489 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:54.079544 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:54.079579 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:54.079608 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.079674 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.080241 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.080317 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.080671 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.081338 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.083745 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.084351 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.084425 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:54.084458 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:54.084514 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.084638 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:54.084750 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:54.084788 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:54.086689 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.086781 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:54.089148 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.089224 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:54.089331 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:54.091522 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:54.093352 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.093447 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:54.093740 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.093820 139631495815168 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0123 13:12:54.093928 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:54.093965 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:54.093993 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:54.094053 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.096230 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:54.101590 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.101856 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:54.104378 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:54.116805 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:54.116860 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:54.116894 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:54.116923 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.116987 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.117544 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.117618 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.117976 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.118647 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.121044 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.121659 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.121735 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:54.121768 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:54.121824 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.121955 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:54.122062 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:54.122100 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:54.123994 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.124086 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:54.126452 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.126534 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:54.126642 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:54.128783 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:54.130615 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.130708 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:54.130991 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.131234 139631495815168 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0123 13:12:54.131340 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:54.131376 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:54.131405 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:54.131466 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.133707 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:54.139045 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.139303 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:54.141848 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:54.154166 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:54.154220 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:54.154253 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:54.154283 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.154346 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.154901 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.154976 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.155324 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.156001 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.158414 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.159034 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.159109 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:54.159143 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:54.159199 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.159325 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:54.159432 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:54.159470 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:54.161349 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.161441 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:54.163799 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.163875 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:54.163982 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:54.166139 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:54.167978 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.168071 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:54.168359 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.168438 139631495815168 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0123 13:12:54.168545 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:54.168583 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:54.168612 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:54.168674 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.170864 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:54.176606 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.176865 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:54.179806 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:54.192197 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:54.192251 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:54.192285 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:54.192315 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.192374 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.192929 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.193003 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.193348 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.194034 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.196425 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.197037 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.197114 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:54.197147 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:54.197203 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.197330 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:54.197437 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:54.197474 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:54.199378 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.199470 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:54.201831 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.201907 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:54.202014 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:54.204161 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:54.205985 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.206079 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:54.206364 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.206444 139631495815168 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0123 13:12:54.206550 139631495815168 transformer_layer.py:154] tlayer: recurrent = False
I0123 13:12:54.206588 139631495815168 transformer_layer.py:155] tlayer: compute_importance = False
I0123 13:12:54.206617 139631495815168 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0123 13:12:54.206678 139631495815168 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.208838 139631495815168 transformer_base.py:161] kvq: pre_attn dropout.
I0123 13:12:54.214179 139631495815168 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.214438 139631495815168 transformer_base.py:194] kvq: normalize keys, queries.
I0123 13:12:54.216986 139631495815168 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0123 13:12:54.229372 139631495815168 transformer_layer.py:299] tlayer: num_windows = 1.
I0123 13:12:54.229426 139631495815168 attention.py:418] Single window, no scan.
I0123 13:12:54.229460 139631495815168 transformer_layer.py:389] tlayer: self-attention.
I0123 13:12:54.229489 139631495815168 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.229550 139631495815168 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.230105 139631495815168 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.230186 139631495815168 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.230540 139631495815168 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.231217 139631495815168 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.233609 139631495815168 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.234226 139631495815168 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.234300 139631495815168 transformer_layer.py:468] tlayer: End windows.
I0123 13:12:54.234333 139631495815168 transformer_layer.py:472] tlayer: final FFN.
I0123 13:12:54.234389 139631495815168 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.234511 139631495815168 transformer_base.py:410] tbase: post-attention MLP.
I0123 13:12:54.234617 139631495815168 nn_components.py:325] mlp: activation = None
I0123 13:12:54.234654 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:54.236547 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.236639 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:54.238988 139631495815168 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.239064 139631495815168 transformer_base.py:443] tbase: final FFN
I0123 13:12:54.239169 139631495815168 nn_components.py:320] mlp: hidden 4096, relu
I0123 13:12:54.241314 139631495815168 nn_components.py:329] mlp: final activation = None
I0123 13:12:54.243154 139631495815168 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.243246 139631495815168 nn_components.py:261] mlp: residual
I0123 13:12:54.243536 139631495815168 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:12:54.243634 139631495815168 decoder_stack.py:344] dstack: Final layernorm.
I0123 13:12:54.246392 139631495815168 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0123 13:13:04.604535 139631495815168 alphageometry.py:566] LM output (score=-1.898879): "c : T a b c e 06 ;"
I0123 13:13:04.604739 139631495815168 alphageometry.py:567] Translation: "ERROR: point c already exists."

I0123 13:13:04.604786 139631495815168 alphageometry.py:566] LM output (score=-1.923646): "c : T a b c b 06 ;"
I0123 13:13:04.604815 139631495815168 alphageometry.py:567] Translation: "ERROR: point c already exists."

I0123 13:13:04.604844 139631495815168 alphageometry.py:566] LM output (score=-2.002650): "c : T a b c d 06 ;"
I0123 13:13:04.604871 139631495815168 alphageometry.py:567] Translation: "ERROR: point c already exists."

I0123 13:13:04.604897 139631495815168 alphageometry.py:566] LM output (score=-2.050455): "g : P a b c g 06 ;"
I0123 13:13:04.604922 139631495815168 alphageometry.py:567] Translation: "g = on_pline g c a b"

I0123 13:13:04.604951 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b ? simtri d b f e a f"
I0123 13:13:04.605065 139631495815168 graph.py:498] 
I0123 13:13:04.605117 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b ? simtri d b f e a f
I0123 13:13:04.674161 139631495815168 ddar.py:60] Depth 1/1000 time = 0.05931544303894043
I0123 13:13:04.761673 139631495815168 ddar.py:60] Depth 2/1000 time = 0.08741402626037598
I0123 13:13:04.860488 139631495815168 ddar.py:60] Depth 3/1000 time = 0.09873557090759277
I0123 13:13:04.990703 139631495815168 ddar.py:60] Depth 4/1000 time = 0.13007235527038574
I0123 13:13:05.122453 139631495815168 ddar.py:60] Depth 5/1000 time = 0.13162446022033691
I0123 13:13:05.125001 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:05.125083 139631495815168 alphageometry.py:566] LM output (score=-2.072944): "g : P a b c g 06 T a b g c 07 ;"
I0123 13:13:05.125119 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 13:13:05.125152 139631495815168 alphageometry.py:566] LM output (score=-2.088313): "c : T a b c f 06 ;"
I0123 13:13:05.125179 139631495815168 alphageometry.py:567] Translation: "ERROR: point c already exists."

I0123 13:13:05.125205 139631495815168 alphageometry.py:566] LM output (score=-2.113243): "c : T a b c c 06 ;"
I0123 13:13:05.125231 139631495815168 alphageometry.py:567] Translation: "ERROR: point c already exists."

I0123 13:13:05.125257 139631495815168 alphageometry.py:566] LM output (score=-2.144374): "c : T a b a c 06 ;"
I0123 13:13:05.125281 139631495815168 alphageometry.py:567] Translation: "ERROR: point c already exists."

I0123 13:13:05.125307 139631495815168 alphageometry.py:566] LM output (score=-2.237423): "g : P a b c g 06 P a c b g 07 ;"
I0123 13:13:05.125331 139631495815168 alphageometry.py:567] Translation: "g = on_pline g c a b, on_pline g b a c"

I0123 13:13:05.125357 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c ? simtri d b f e a f"
I0123 13:13:05.125452 139631495815168 graph.py:498] 
I0123 13:13:05.125497 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c ? simtri d b f e a f
I0123 13:13:05.232670 139631495815168 ddar.py:60] Depth 1/1000 time = 0.09295034408569336
I0123 13:13:05.372613 139631495815168 ddar.py:60] Depth 2/1000 time = 0.13985991477966309
I0123 13:13:05.525743 139631495815168 ddar.py:60] Depth 3/1000 time = 0.15304946899414062
I0123 13:13:05.706587 139631495815168 ddar.py:60] Depth 4/1000 time = 0.18071317672729492
I0123 13:13:05.891998 139631495815168 ddar.py:60] Depth 5/1000 time = 0.1852579116821289
I0123 13:13:05.897283 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:05.897357 139631495815168 alphageometry.py:566] LM output (score=-2.366462): "c : D a b a c 06 ;"
I0123 13:13:05.897393 139631495815168 alphageometry.py:567] Translation: "ERROR: point c already exists."

I0123 13:13:05.897428 139631495815168 alphageometry.py:566] LM output (score=-2.489304): "c : C a b c 06 D a c b c 07 ;"
I0123 13:13:05.897456 139631495815168 alphageometry.py:567] Translation: "ERROR: point c already exists."

I0123 13:13:05.897483 139631495815168 alphageometry.py:566] LM output (score=-2.492635): "g : P a b e g 06 P a e b g 07 ;"
I0123 13:13:05.897509 139631495815168 alphageometry.py:567] Translation: "g = on_pline g e a b, on_pline g b a e"

I0123 13:13:05.897536 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e ? simtri d b f e a f"
I0123 13:13:05.897637 139631495815168 graph.py:498] 
I0123 13:13:05.897689 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e ? simtri d b f e a f
I0123 13:13:06.021974 139631495815168 ddar.py:60] Depth 1/1000 time = 0.11015653610229492
I0123 13:13:06.258247 139631495815168 ddar.py:60] Depth 2/1000 time = 0.23618769645690918
I0123 13:13:06.548867 139631495815168 ddar.py:60] Depth 3/1000 time = 0.2905311584472656
I0123 13:13:06.887701 139631495815168 ddar.py:60] Depth 4/1000 time = 0.3386659622192383
I0123 13:13:07.225494 139631495815168 ddar.py:60] Depth 5/1000 time = 0.3376197814941406
I0123 13:13:07.572440 139631495815168 ddar.py:60] Depth 6/1000 time = 0.3400309085845947
I0123 13:13:07.572738 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:07.572800 139631495815168 alphageometry.py:566] LM output (score=-2.539059): "g : P a b d g 06 P a g b d 07 ;"
I0123 13:13:07.572836 139631495815168 alphageometry.py:567] Translation: "g = on_pline g d a b, on_pline g a b d"

I0123 13:13:07.572873 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d ? simtri d b f e a f"
I0123 13:13:07.572978 139631495815168 graph.py:498] 
I0123 13:13:07.573022 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d ? simtri d b f e a f
I0123 13:13:07.684062 139631495815168 ddar.py:60] Depth 1/1000 time = 0.09656167030334473
I0123 13:13:07.892747 139631495815168 ddar.py:60] Depth 2/1000 time = 0.20859670639038086
I0123 13:13:08.154026 139631495815168 ddar.py:60] Depth 3/1000 time = 0.26119303703308105
I0123 13:13:08.459087 139631495815168 ddar.py:60] Depth 4/1000 time = 0.3049135208129883
I0123 13:13:08.765702 139631495815168 ddar.py:60] Depth 5/1000 time = 0.3064734935760498
I0123 13:13:09.083884 139631495815168 ddar.py:60] Depth 6/1000 time = 0.31033945083618164
I0123 13:13:09.084167 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:09.084218 139631495815168 alphageometry.py:566] LM output (score=-2.616697): "g : P c g a b 06 ;"
I0123 13:13:09.084254 139631495815168 alphageometry.py:567] Translation: "g = on_pline g c a b"

I0123 13:13:09.084289 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b ? simtri d b f e a f"
I0123 13:13:09.084384 139631495815168 graph.py:498] 
I0123 13:13:09.084427 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b ? simtri d b f e a f
I0123 13:13:09.152276 139631495815168 ddar.py:60] Depth 1/1000 time = 0.05821943283081055
I0123 13:13:09.243517 139631495815168 ddar.py:60] Depth 2/1000 time = 0.09115910530090332
I0123 13:13:09.343431 139631495815168 ddar.py:60] Depth 3/1000 time = 0.09983539581298828
I0123 13:13:09.472976 139631495815168 ddar.py:60] Depth 4/1000 time = 0.12941288948059082
I0123 13:13:09.604372 139631495815168 ddar.py:60] Depth 5/1000 time = 0.1312694549560547
I0123 13:13:09.606930 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:09.606985 139631495815168 alphageometry.py:566] LM output (score=-2.657994): "c : D a b b c 06 ;"
I0123 13:13:09.607019 139631495815168 alphageometry.py:567] Translation: "ERROR: point c already exists."

I0123 13:13:09.607052 139631495815168 alphageometry.py:566] LM output (score=-2.708581): "b : P a b c b 06 ;"
I0123 13:13:09.607079 139631495815168 alphageometry.py:567] Translation: "ERROR: point b already exists."

I0123 13:13:09.607106 139631495815168 alphageometry.py:566] LM output (score=-2.718172): "b : P a b a b 06 ;"
I0123 13:13:09.607133 139631495815168 alphageometry.py:567] Translation: "ERROR: point b already exists."

I0123 13:13:09.607161 139631495815168 alphageometry.py:566] LM output (score=-2.726421): "c : D a c c f 06 ;"
I0123 13:13:09.607197 139631495815168 alphageometry.py:567] Translation: "ERROR: point c already exists."

I0123 13:13:09.607226 139631495815168 alphageometry.py:566] LM output (score=-2.741269): "c : D a c b c 06 ;"
I0123 13:13:09.607253 139631495815168 alphageometry.py:567] Translation: "ERROR: point c already exists."

I0123 13:13:09.607279 139631495815168 alphageometry.py:566] LM output (score=-2.764669): "b : D a b d b 06 ;"
I0123 13:13:09.607305 139631495815168 alphageometry.py:567] Translation: "ERROR: point b already exists."

I0123 13:13:09.607331 139631495815168 alphageometry.py:566] LM output (score=-2.785475): "g : P a c e g 06 P a e c g 07 ;"
I0123 13:13:09.607357 139631495815168 alphageometry.py:567] Translation: "g = on_pline g e a c, on_pline g c a e"

I0123 13:13:09.607385 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e ? simtri d b f e a f"
I0123 13:13:09.607480 139631495815168 graph.py:498] 
I0123 13:13:09.607522 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e ? simtri d b f e a f
I0123 13:13:09.721681 139631495815168 ddar.py:60] Depth 1/1000 time = 0.10038471221923828
I0123 13:13:10.129944 139631495815168 ddar.py:60] Depth 2/1000 time = 0.40816450119018555
I0123 13:13:10.325815 139631495815168 ddar.py:60] Depth 3/1000 time = 0.19570565223693848
I0123 13:13:10.560004 139631495815168 ddar.py:60] Depth 4/1000 time = 0.23400163650512695
I0123 13:13:10.796299 139631495815168 ddar.py:60] Depth 5/1000 time = 0.23614764213562012
I0123 13:13:10.801392 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:10.801452 139631495815168 alphageometry.py:566] LM output (score=-2.787768): "c : T a c b c 06 ;"
I0123 13:13:10.801488 139631495815168 alphageometry.py:567] Translation: "ERROR: point c already exists."

I0123 13:13:10.801521 139631495815168 alphageometry.py:566] LM output (score=-2.789384): "g : C c b g 06 D c g b g 07 ;"
I0123 13:13:10.801549 139631495815168 alphageometry.py:567] Translation: "g = on_line g c b, on_bline g b c"

I0123 13:13:10.801580 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c ? simtri d b f e a f"
I0123 13:13:10.801687 139631495815168 graph.py:498] 
I0123 13:13:10.801734 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c ? simtri d b f e a f
I0123 13:13:10.907008 139631495815168 ddar.py:60] Depth 1/1000 time = 0.09747552871704102
I0123 13:13:11.115087 139631495815168 ddar.py:60] Depth 2/1000 time = 0.2079935073852539
I0123 13:13:11.521655 139631495815168 ddar.py:60] Depth 3/1000 time = 0.40645647048950195
I0123 13:13:11.802474 139631495815168 ddar.py:60] Depth 4/1000 time = 0.28060078620910645
I0123 13:13:12.268551 139631495815168 ddar.py:60] Depth 5/1000 time = 0.4658854007720947
I0123 13:13:12.542726 139631495815168 ddar.py:60] Depth 6/1000 time = 0.2736697196960449
I0123 13:13:13.011067 139631495815168 ddar.py:60] Depth 7/1000 time = 0.4644284248352051
I0123 13:13:13.011422 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:13.011507 139631495815168 alphageometry.py:566] LM output (score=-2.822840): "g : P a b e g 06 ;"
I0123 13:13:13.011546 139631495815168 alphageometry.py:567] Translation: "g = on_pline g e a b"

I0123 13:13:13.011582 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b ? simtri d b f e a f"
I0123 13:13:13.011689 139631495815168 graph.py:498] 
I0123 13:13:13.011749 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b ? simtri d b f e a f
I0123 13:13:13.079972 139631495815168 ddar.py:60] Depth 1/1000 time = 0.05785059928894043
I0123 13:13:13.164356 139631495815168 ddar.py:60] Depth 2/1000 time = 0.08429622650146484
I0123 13:13:13.260128 139631495815168 ddar.py:60] Depth 3/1000 time = 0.09569025039672852
I0123 13:13:13.383282 139631495815168 ddar.py:60] Depth 4/1000 time = 0.12302207946777344
I0123 13:13:13.509743 139631495815168 ddar.py:60] Depth 5/1000 time = 0.12633681297302246
I0123 13:13:13.512616 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:13.512670 139631495815168 alphageometry.py:566] LM output (score=-2.876649): "g : P a c e g 06 P a g c e 07 ;"
I0123 13:13:13.512706 139631495815168 alphageometry.py:567] Translation: "g = on_pline g e a c, on_pline g a c e"

I0123 13:13:13.512741 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e ? simtri d b f e a f"
I0123 13:13:13.512843 139631495815168 graph.py:498] 
I0123 13:13:13.512887 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e ? simtri d b f e a f
I0123 13:13:13.623062 139631495815168 ddar.py:60] Depth 1/1000 time = 0.09472990036010742
I0123 13:13:13.772053 139631495815168 ddar.py:60] Depth 2/1000 time = 0.14890623092651367
I0123 13:13:13.930255 139631495815168 ddar.py:60] Depth 3/1000 time = 0.15811920166015625
I0123 13:13:14.113804 139631495815168 ddar.py:60] Depth 4/1000 time = 0.1834092140197754
I0123 13:13:14.300819 139631495815168 ddar.py:60] Depth 5/1000 time = 0.18688631057739258
I0123 13:13:14.304933 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:14.304989 139631495815168 alphageometry.py:566] LM output (score=-2.911536): "c : P a c a b 06 ;"
I0123 13:13:14.305025 139631495815168 alphageometry.py:567] Translation: "ERROR: point c already exists."

I0123 13:13:14.305057 139631495815168 alphageometry.py:566] LM output (score=-2.922927): "b : D a b b d 06 ;"
I0123 13:13:14.305083 139631495815168 alphageometry.py:567] Translation: "ERROR: point b already exists."

I0123 13:13:14.305110 139631495815168 alphageometry.py:566] LM output (score=-2.940452): "g : P a g c f 06 ;"
I0123 13:13:14.305136 139631495815168 alphageometry.py:567] Translation: "g = on_pline g a c f"

I0123 13:13:14.305164 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f ? simtri d b f e a f"
I0123 13:13:14.305257 139631495815168 graph.py:498] 
I0123 13:13:14.305299 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f ? simtri d b f e a f
I0123 13:13:14.384020 139631495815168 ddar.py:60] Depth 1/1000 time = 0.07045674324035645
I0123 13:13:14.497705 139631495815168 ddar.py:60] Depth 2/1000 time = 0.11360335350036621
I0123 13:13:14.629577 139631495815168 ddar.py:60] Depth 3/1000 time = 0.13179302215576172
I0123 13:13:14.784547 139631495815168 ddar.py:60] Depth 4/1000 time = 0.15482354164123535
I0123 13:13:14.943259 139631495815168 ddar.py:60] Depth 5/1000 time = 0.15858054161071777
I0123 13:13:14.945891 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:14.945944 139631495815168 alphageometry.py:566] LM output (score=-2.960949): "g : P c f c g 06 T c g a b 07 ;"
I0123 13:13:14.945980 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c f c g"

I0123 13:13:14.946012 139631495815168 alphageometry.py:566] LM output (score=-2.972217): "c : P a b c d 06 ;"
I0123 13:13:14.946039 139631495815168 alphageometry.py:567] Translation: "ERROR: point c already exists."

I0123 13:13:14.946076 139631495815168 alphageometry.py:566] LM output (score=-3.029789): "g : P c f e g 06 P c e f g 07 ;"
I0123 13:13:14.946104 139631495815168 alphageometry.py:567] Translation: "g = on_pline g e c f, on_pline g f c e"

I0123 13:13:14.946133 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e ? simtri d b f e a f"
I0123 13:13:14.946226 139631495815168 graph.py:498] 
I0123 13:13:14.946268 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e ? simtri d b f e a f
I0123 13:13:15.060033 139631495815168 ddar.py:60] Depth 1/1000 time = 0.10039424896240234
I0123 13:13:15.268395 139631495815168 ddar.py:60] Depth 2/1000 time = 0.20827269554138184
I0123 13:13:15.537556 139631495815168 ddar.py:60] Depth 3/1000 time = 0.2690744400024414
I0123 13:13:15.840595 139631495815168 ddar.py:60] Depth 4/1000 time = 0.3028857707977295
I0123 13:13:16.145454 139631495815168 ddar.py:60] Depth 5/1000 time = 0.3047184944152832
I0123 13:13:16.152833 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:16.152889 139631495815168 alphageometry.py:566] LM output (score=-3.038356): "g : P a e b g 06 ;"
I0123 13:13:16.152924 139631495815168 alphageometry.py:567] Translation: "g = on_pline g b a e"

I0123 13:13:16.152957 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g b a e ? simtri d b f e a f"
I0123 13:13:16.153048 139631495815168 graph.py:498] 
I0123 13:13:16.153089 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g b a e ? simtri d b f e a f
I0123 13:13:16.231675 139631495815168 ddar.py:60] Depth 1/1000 time = 0.07027935981750488
I0123 13:13:16.347602 139631495815168 ddar.py:60] Depth 2/1000 time = 0.11584734916687012
I0123 13:13:16.473311 139631495815168 ddar.py:60] Depth 3/1000 time = 0.12562894821166992
I0123 13:13:16.634235 139631495815168 ddar.py:60] Depth 4/1000 time = 0.1607837677001953
I0123 13:13:16.792706 139631495815168 ddar.py:60] Depth 5/1000 time = 0.15833473205566406
I0123 13:13:16.795271 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:16.795331 139631495815168 alphageometry.py:540] Depth 1. There are 12 nodes to expand:
I0123 13:13:16.795367 139631495815168 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a c d 00 T a b b d 01 ; e : C b c e 02 T a b a e 03 ; f : C a b f 04 T a b c f 05 ? S d b f e a f {F1} x00 g : P a b c g 06 ; x00
I0123 13:13:16.795396 139631495815168 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a c d 00 T a b b d 01 ; e : C b c e 02 T a b a e 03 ; f : C a b f 04 T a b c f 05 ? S d b f e a f {F1} x00 g : P a b c g 06 P a c b g 07 ; x00
I0123 13:13:16.795422 139631495815168 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a c d 00 T a b b d 01 ; e : C b c e 02 T a b a e 03 ; f : C a b f 04 T a b c f 05 ? S d b f e a f {F1} x00 g : P a b e g 06 P a e b g 07 ; x00
I0123 13:13:16.795448 139631495815168 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a c d 00 T a b b d 01 ; e : C b c e 02 T a b a e 03 ; f : C a b f 04 T a b c f 05 ? S d b f e a f {F1} x00 g : P a b d g 06 P a g b d 07 ; x00
I0123 13:13:16.795473 139631495815168 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a c d 00 T a b b d 01 ; e : C b c e 02 T a b a e 03 ; f : C a b f 04 T a b c f 05 ? S d b f e a f {F1} x00 g : P c g a b 06 ; x00
I0123 13:13:16.795498 139631495815168 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a c d 00 T a b b d 01 ; e : C b c e 02 T a b a e 03 ; f : C a b f 04 T a b c f 05 ? S d b f e a f {F1} x00 g : P a c e g 06 P a e c g 07 ; x00
I0123 13:13:16.795531 139631495815168 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a c d 00 T a b b d 01 ; e : C b c e 02 T a b a e 03 ; f : C a b f 04 T a b c f 05 ? S d b f e a f {F1} x00 g : C c b g 06 D c g b g 07 ; x00
I0123 13:13:16.795557 139631495815168 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a c d 00 T a b b d 01 ; e : C b c e 02 T a b a e 03 ; f : C a b f 04 T a b c f 05 ? S d b f e a f {F1} x00 g : P a b e g 06 ; x00
I0123 13:13:16.795581 139631495815168 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a c d 00 T a b b d 01 ; e : C b c e 02 T a b a e 03 ; f : C a b f 04 T a b c f 05 ? S d b f e a f {F1} x00 g : P a c e g 06 P a g c e 07 ; x00
I0123 13:13:16.795604 139631495815168 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a c d 00 T a b b d 01 ; e : C b c e 02 T a b a e 03 ; f : C a b f 04 T a b c f 05 ? S d b f e a f {F1} x00 g : P a g c f 06 ; x00
I0123 13:13:16.795627 139631495815168 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a c d 00 T a b b d 01 ; e : C b c e 02 T a b a e 03 ; f : C a b f 04 T a b c f 05 ? S d b f e a f {F1} x00 g : P c f e g 06 P c e f g 07 ; x00
I0123 13:13:16.795649 139631495815168 alphageometry.py:544] {S} a : ; b : ; c : ; d : C a c d 00 T a b b d 01 ; e : C b c e 02 T a b a e 03 ; f : C a b f 04 T a b c f 05 ? S d b f e a f {F1} x00 g : P a e b g 06 ; x00
I0123 13:13:16.795679 139631495815168 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C a c d 00 T a b b d 01 ; e : C b c e 02 T a b a e 03 ; f : C a b f 04 T a b c f 05 ? S d b f e a f {F1} x00 g : P a b c g 06 ; x00
I0123 13:13:21.134296 139631495815168 alphageometry.py:566] LM output (score=-1.228509): "h : P c g c h 07 T c f c h 08 ;"
I0123 13:13:21.134433 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c g c h"

I0123 13:13:21.134474 139631495815168 alphageometry.py:566] LM output (score=-1.360671): "h : P c g b h 07 ;"
I0123 13:13:21.134504 139631495815168 alphageometry.py:567] Translation: "h = on_pline h b c g"

I0123 13:13:21.134534 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_pline h b c g ? simtri d b f e a f"
I0123 13:13:21.134637 139631495815168 graph.py:498] 
I0123 13:13:21.134681 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_pline h b c g ? simtri d b f e a f
I0123 13:13:21.230996 139631495815168 ddar.py:60] Depth 1/1000 time = 0.08162307739257812
I0123 13:13:21.372884 139631495815168 ddar.py:60] Depth 2/1000 time = 0.1417996883392334
I0123 13:13:21.528478 139631495815168 ddar.py:60] Depth 3/1000 time = 0.15551328659057617
I0123 13:13:21.716647 139631495815168 ddar.py:60] Depth 4/1000 time = 0.1880345344543457
I0123 13:13:21.907326 139631495815168 ddar.py:60] Depth 5/1000 time = 0.1905508041381836
I0123 13:13:21.910240 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:21.910286 139631495815168 alphageometry.py:566] LM output (score=-1.735639): "h : P c g f h 07 P f e f h 08 ;"
I0123 13:13:21.910318 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P f e f h"

I0123 13:13:21.910349 139631495815168 alphageometry.py:566] LM output (score=-1.826649): "h : C c g h 07 T c g e h 08 ;"
I0123 13:13:21.910374 139631495815168 alphageometry.py:567] Translation: "h = on_line h c g, on_tline h e c g"

I0123 13:13:21.910402 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_line h c g, on_tline h e c g ? simtri d b f e a f"
I0123 13:13:21.910504 139631495815168 graph.py:498] 
I0123 13:13:21.910547 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_line h c g, on_tline h e c g ? simtri d b f e a f
I0123 13:13:22.048563 139631495815168 ddar.py:60] Depth 1/1000 time = 0.12461161613464355
I0123 13:13:22.282272 139631495815168 ddar.py:60] Depth 2/1000 time = 0.2336263656616211
I0123 13:13:22.609794 139631495815168 ddar.py:60] Depth 3/1000 time = 0.3274345397949219
I0123 13:13:23.056116 139631495815168 ddar.py:60] Depth 4/1000 time = 0.4461696147918701
I0123 13:13:23.704956 139631495815168 ddar.py:60] Depth 5/1000 time = 0.6486773490905762
I0123 13:13:23.714788 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:23.714850 139631495815168 alphageometry.py:566] LM output (score=-2.022082): "h : C c g h 07 T c g b h 08 ;"
I0123 13:13:23.714888 139631495815168 alphageometry.py:567] Translation: "h = on_line h c g, on_tline h b c g"

I0123 13:13:23.714924 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_line h c g, on_tline h b c g ? simtri d b f e a f"
I0123 13:13:23.715039 139631495815168 graph.py:498] 
I0123 13:13:23.715085 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_line h c g, on_tline h b c g ? simtri d b f e a f
I0123 13:13:23.895765 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1698625087738037
I0123 13:13:24.211676 139631495815168 ddar.py:60] Depth 2/1000 time = 0.3158228397369385
I0123 13:13:24.570827 139631495815168 ddar.py:60] Depth 3/1000 time = 0.359058141708374
I0123 13:13:25.008846 139631495815168 ddar.py:60] Depth 4/1000 time = 0.43787074089050293
I0123 13:13:25.443717 139631495815168 ddar.py:60] Depth 5/1000 time = 0.4347267150878906
I0123 13:13:25.451174 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:25.451224 139631495815168 alphageometry.py:566] LM output (score=-2.091420): "h : P c g c h 07 T c h b d 08 ;"
I0123 13:13:25.451259 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c g c h"

I0123 13:13:25.451290 139631495815168 alphageometry.py:566] LM output (score=-2.098299): "h : P c g c h 07 T c h f e 08 ;"
I0123 13:13:25.451318 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c g c h"

I0123 13:13:25.451346 139631495815168 alphageometry.py:566] LM output (score=-2.104386): "h : P c g c h 07 T c e c h 08 ;"
I0123 13:13:25.451372 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c g c h"

I0123 13:13:25.451398 139631495815168 alphageometry.py:566] LM output (score=-2.130087): "h : P c g d h 07 P c d g h 08 ;"
I0123 13:13:25.451423 139631495815168 alphageometry.py:567] Translation: "h = on_pline h d c g, on_pline h g c d"

I0123 13:13:25.451452 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_pline h d c g, on_pline h g c d ? simtri d b f e a f"
I0123 13:13:25.451556 139631495815168 graph.py:498] 
I0123 13:13:25.451601 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_pline h d c g, on_pline h g c d ? simtri d b f e a f
I0123 13:13:25.595520 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1234593391418457
I0123 13:13:25.774351 139631495815168 ddar.py:60] Depth 2/1000 time = 0.17874670028686523
I0123 13:13:25.969553 139631495815168 ddar.py:60] Depth 3/1000 time = 0.19511842727661133
I0123 13:13:26.196499 139631495815168 ddar.py:60] Depth 4/1000 time = 0.2268052101135254
I0123 13:13:26.425833 139631495815168 ddar.py:60] Depth 5/1000 time = 0.2292032241821289
I0123 13:13:26.430649 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:26.430696 139631495815168 alphageometry.py:566] LM output (score=-2.165309): "h : P c g c h 07 T c h d e 08 ;"
I0123 13:13:26.430742 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c g c h"

I0123 13:13:26.430775 139631495815168 alphageometry.py:566] LM output (score=-2.185800): "h : D c f c h 07 D g f g h 08 ;"
I0123 13:13:26.430802 139631495815168 alphageometry.py:567] Translation: "h = on_circle h c f, on_circle h g f"

I0123 13:13:26.430831 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_circle h c f, on_circle h g f ? simtri d b f e a f"
I0123 13:13:26.430931 139631495815168 graph.py:498] 
I0123 13:13:26.430975 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_circle h c f, on_circle h g f ? simtri d b f e a f
I0123 13:13:26.563451 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1196601390838623
I0123 13:13:26.748214 139631495815168 ddar.py:60] Depth 2/1000 time = 0.18467950820922852
I0123 13:13:26.985241 139631495815168 ddar.py:60] Depth 3/1000 time = 0.23694467544555664
I0123 13:13:27.314734 139631495815168 ddar.py:60] Depth 4/1000 time = 0.32933688163757324
I0123 13:13:27.659768 139631495815168 ddar.py:60] Depth 5/1000 time = 0.3448817729949951
I0123 13:13:28.008587 139631495815168 ddar.py:60] Depth 6/1000 time = 0.3486647605895996
I0123 13:13:28.368346 139631495815168 ddar.py:60] Depth 7/1000 time = 0.34918808937072754
I0123 13:13:28.368669 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:28.368712 139631495815168 alphageometry.py:566] LM output (score=-2.201610): "h : P c g b h 07 P c h b g 08 ;"
I0123 13:13:28.368745 139631495815168 alphageometry.py:567] Translation: "h = on_pline h b c g, on_pline h c b g"

I0123 13:13:28.368777 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_pline h b c g, on_pline h c b g ? simtri d b f e a f"
I0123 13:13:28.368881 139631495815168 graph.py:498] 
I0123 13:13:28.368925 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_pline h b c g, on_pline h c b g ? simtri d b f e a f
I0123 13:13:28.503021 139631495815168 ddar.py:60] Depth 1/1000 time = 0.11388039588928223
I0123 13:13:28.706943 139631495815168 ddar.py:60] Depth 2/1000 time = 0.20383715629577637
I0123 13:13:28.932080 139631495815168 ddar.py:60] Depth 3/1000 time = 0.22505640983581543
I0123 13:13:29.198791 139631495815168 ddar.py:60] Depth 4/1000 time = 0.26656365394592285
I0123 13:13:29.463481 139631495815168 ddar.py:60] Depth 5/1000 time = 0.26451802253723145
I0123 13:13:29.467607 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:29.467668 139631495815168 alphageometry.py:566] LM output (score=-2.217147): "h : P c g c h 07 P c h g d 08 ;"
I0123 13:13:29.467702 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c g c h"

I0123 13:13:29.467740 139631495815168 alphageometry.py:566] LM output (score=-2.271975): "h : P c g f h 07 P c f g h 08 ;"
I0123 13:13:29.467769 139631495815168 alphageometry.py:567] Translation: "h = on_pline h f c g, on_pline h g c f"

I0123 13:13:29.467799 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_pline h f c g, on_pline h g c f ? simtri d b f e a f"
I0123 13:13:29.467908 139631495815168 graph.py:498] 
I0123 13:13:29.467955 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_pline h f c g, on_pline h g c f ? simtri d b f e a f
I0123 13:13:29.629129 139631495815168 ddar.py:60] Depth 1/1000 time = 0.14208364486694336
I0123 13:13:30.171452 139631495815168 ddar.py:60] Depth 2/1000 time = 0.5422117710113525
I0123 13:13:30.525635 139631495815168 ddar.py:60] Depth 3/1000 time = 0.35402512550354004
I0123 13:13:30.929463 139631495815168 ddar.py:60] Depth 4/1000 time = 0.4036600589752197
I0123 13:13:31.337869 139631495815168 ddar.py:60] Depth 5/1000 time = 0.4082491397857666
I0123 13:13:31.752938 139631495815168 ddar.py:60] Depth 6/1000 time = 0.4078552722930908
I0123 13:13:31.753225 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:31.753272 139631495815168 alphageometry.py:566] LM output (score=-2.303727): "h : P c g f h 07 P f e e h 08 ;"
I0123 13:13:31.753307 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P f e e h"

I0123 13:13:31.753342 139631495815168 alphageometry.py:566] LM output (score=-2.336168): "h : D c g c h 07 T c g c h 08 ;"
I0123 13:13:31.753369 139631495815168 alphageometry.py:567] Translation: "h = on_circle h c g, on_tline h c c g"

I0123 13:13:31.753400 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_circle h c g, on_tline h c c g ? simtri d b f e a f"
I0123 13:13:31.753515 139631495815168 graph.py:498] 
I0123 13:13:31.753562 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_circle h c g, on_tline h c c g ? simtri d b f e a f
I0123 13:13:31.868905 139631495815168 ddar.py:60] Depth 1/1000 time = 0.10030198097229004
I0123 13:13:32.016199 139631495815168 ddar.py:60] Depth 2/1000 time = 0.14720630645751953
I0123 13:13:32.178288 139631495815168 ddar.py:60] Depth 3/1000 time = 0.16200757026672363
I0123 13:13:32.378114 139631495815168 ddar.py:60] Depth 4/1000 time = 0.19968509674072266
I0123 13:13:32.576046 139631495815168 ddar.py:60] Depth 5/1000 time = 0.19779443740844727
I0123 13:13:32.774246 139631495815168 ddar.py:60] Depth 6/1000 time = 0.19756412506103516
I0123 13:13:32.777280 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:32.777326 139631495815168 alphageometry.py:566] LM output (score=-2.336854): "h : D a c c h 07 D a g g h 08 ;"
I0123 13:13:32.777359 139631495815168 alphageometry.py:567] Translation: "h = on_circle h c a, on_circle h g a"

I0123 13:13:32.777392 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_circle h c a, on_circle h g a ? simtri d b f e a f"
I0123 13:13:32.777495 139631495815168 graph.py:498] 
I0123 13:13:32.777540 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_circle h c a, on_circle h g a ? simtri d b f e a f
I0123 13:13:32.908947 139631495815168 ddar.py:60] Depth 1/1000 time = 0.11846685409545898
I0123 13:13:33.093899 139631495815168 ddar.py:60] Depth 2/1000 time = 0.18486857414245605
I0123 13:13:33.318566 139631495815168 ddar.py:60] Depth 3/1000 time = 0.22458457946777344
I0123 13:13:33.578145 139631495815168 ddar.py:60] Depth 4/1000 time = 0.25942087173461914
I0123 13:13:33.840733 139631495815168 ddar.py:60] Depth 5/1000 time = 0.26244139671325684
I0123 13:13:34.118116 139631495815168 ddar.py:60] Depth 6/1000 time = 0.2691819667816162
I0123 13:13:34.118415 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:34.118456 139631495815168 alphageometry.py:566] LM output (score=-2.372575): "h : P c g e h 07 T c g c h 08 ;"
I0123 13:13:34.118488 139631495815168 alphageometry.py:567] Translation: "h = on_pline h e c g, on_tline h c c g"

I0123 13:13:34.118520 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_pline h e c g, on_tline h c c g ? simtri d b f e a f"
I0123 13:13:34.118636 139631495815168 graph.py:498] 
I0123 13:13:34.118680 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_pline h e c g, on_tline h c c g ? simtri d b f e a f
I0123 13:13:34.263128 139631495815168 ddar.py:60] Depth 1/1000 time = 0.12535715103149414
I0123 13:13:34.488560 139631495815168 ddar.py:60] Depth 2/1000 time = 0.22534656524658203
I0123 13:13:34.842444 139631495815168 ddar.py:60] Depth 3/1000 time = 0.35379624366760254
I0123 13:13:35.269782 139631495815168 ddar.py:60] Depth 4/1000 time = 0.427187442779541
I0123 13:13:35.701593 139631495815168 ddar.py:60] Depth 5/1000 time = 0.4316673278808594
I0123 13:13:35.709868 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:35.709917 139631495815168 alphageometry.py:566] LM output (score=-2.404027): "h : D b c c h 07 D b g g h 08 ;"
I0123 13:13:35.709951 139631495815168 alphageometry.py:567] Translation: "h = on_circle h c b, on_circle h g b"

I0123 13:13:35.709986 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_circle h c b, on_circle h g b ? simtri d b f e a f"
I0123 13:13:35.710092 139631495815168 graph.py:498] 
I0123 13:13:35.710136 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_circle h c b, on_circle h g b ? simtri d b f e a f
I0123 13:13:35.841398 139631495815168 ddar.py:60] Depth 1/1000 time = 0.11791229248046875
I0123 13:13:36.047734 139631495815168 ddar.py:60] Depth 2/1000 time = 0.2062528133392334
I0123 13:13:36.271718 139631495815168 ddar.py:60] Depth 3/1000 time = 0.22390246391296387
I0123 13:13:36.531387 139631495815168 ddar.py:60] Depth 4/1000 time = 0.25951480865478516
I0123 13:13:36.797852 139631495815168 ddar.py:60] Depth 5/1000 time = 0.26631879806518555
I0123 13:13:37.078897 139631495815168 ddar.py:60] Depth 6/1000 time = 0.27335500717163086
I0123 13:13:37.079192 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:37.079236 139631495815168 alphageometry.py:566] LM output (score=-2.443369): "h : D c h g h 07 D c h f h 08 ;"
I0123 13:13:37.079268 139631495815168 alphageometry.py:567] Translation: "h = on_bline h g c, on_bline h f c"

I0123 13:13:37.079301 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_bline h g c, on_bline h f c ? simtri d b f e a f"
I0123 13:13:37.079403 139631495815168 graph.py:498] 
I0123 13:13:37.079447 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_bline h g c, on_bline h f c ? simtri d b f e a f
I0123 13:13:37.487703 139631495815168 ddar.py:60] Depth 1/1000 time = 0.3878343105316162
I0123 13:13:37.668198 139631495815168 ddar.py:60] Depth 2/1000 time = 0.18032622337341309
I0123 13:13:37.866768 139631495815168 ddar.py:60] Depth 3/1000 time = 0.19844436645507812
I0123 13:13:38.102007 139631495815168 ddar.py:60] Depth 4/1000 time = 0.23506760597229004
I0123 13:13:38.564069 139631495815168 ddar.py:60] Depth 5/1000 time = 0.4618959426879883
I0123 13:13:38.816829 139631495815168 ddar.py:60] Depth 6/1000 time = 0.252274751663208
I0123 13:13:39.099007 139631495815168 ddar.py:60] Depth 7/1000 time = 0.28198671340942383
I0123 13:13:39.385480 139631495815168 ddar.py:60] Depth 8/1000 time = 0.2817075252532959
I0123 13:13:39.385765 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:39.385813 139631495815168 alphageometry.py:566] LM output (score=-2.452318): "h : P c g c h 07 P c h g e 08 ;"
I0123 13:13:39.385859 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c g c h"

I0123 13:13:39.385892 139631495815168 alphageometry.py:566] LM output (score=-2.472819): "h : P c g c h 07 P c h g c 08 ;"
I0123 13:13:39.385919 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c g c h"

I0123 13:13:39.385946 139631495815168 alphageometry.py:566] LM output (score=-2.473018): "h : P c g c h 07 P c h g h 08 ;"
I0123 13:13:39.385971 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c g c h"

I0123 13:13:39.385997 139631495815168 alphageometry.py:566] LM output (score=-2.485031): "h : P c g c h 07 T c h g e 08 ;"
I0123 13:13:39.386021 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c g c h"

I0123 13:13:39.386045 139631495815168 alphageometry.py:566] LM output (score=-2.515192): "h : P a b e h 07 P a e b h 08 ;"
I0123 13:13:39.386069 139631495815168 alphageometry.py:567] Translation: "h = on_pline h e a b, on_pline h b a e"

I0123 13:13:39.386096 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_pline h e a b, on_pline h b a e ? simtri d b f e a f"
I0123 13:13:39.386208 139631495815168 graph.py:498] 
I0123 13:13:39.386253 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_pline h e a b, on_pline h b a e ? simtri d b f e a f
I0123 13:13:39.542037 139631495815168 ddar.py:60] Depth 1/1000 time = 0.13573598861694336
I0123 13:13:39.810178 139631495815168 ddar.py:60] Depth 2/1000 time = 0.2680509090423584
I0123 13:13:40.144001 139631495815168 ddar.py:60] Depth 3/1000 time = 0.33373451232910156
I0123 13:13:40.517190 139631495815168 ddar.py:60] Depth 4/1000 time = 0.3730316162109375
I0123 13:13:40.891705 139631495815168 ddar.py:60] Depth 5/1000 time = 0.3743762969970703
I0123 13:13:41.506324 139631495815168 ddar.py:60] Depth 6/1000 time = 0.6066133975982666
I0123 13:13:41.506691 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:41.506745 139631495815168 alphageometry.py:566] LM output (score=-2.634626): "h : P a c c h 07 T c g c h 08 ;"
I0123 13:13:41.506780 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P a c c h"

I0123 13:13:41.506814 139631495815168 alphageometry.py:566] LM output (score=-2.638939): "h : P c g c h 07 T c b c h 08 ;"
I0123 13:13:41.506841 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c g c h"

I0123 13:13:41.506868 139631495815168 alphageometry.py:566] LM output (score=-2.676218): "h : D c e c h 07 T g c e h 08 ;"
I0123 13:13:41.506893 139631495815168 alphageometry.py:567] Translation: "h = on_circle h c e, on_tline h e g c"

I0123 13:13:41.506922 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_circle h c e, on_tline h e g c ? simtri d b f e a f"
I0123 13:13:41.507032 139631495815168 graph.py:498] 
I0123 13:13:41.507076 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_circle h c e, on_tline h e g c ? simtri d b f e a f
I0123 13:13:41.622887 139631495815168 ddar.py:60] Depth 1/1000 time = 0.10080075263977051
I0123 13:13:41.775216 139631495815168 ddar.py:60] Depth 2/1000 time = 0.1522364616394043
I0123 13:13:41.956138 139631495815168 ddar.py:60] Depth 3/1000 time = 0.18084120750427246
I0123 13:13:42.212219 139631495815168 ddar.py:60] Depth 4/1000 time = 0.2559335231781006
I0123 13:13:42.474607 139631495815168 ddar.py:60] Depth 5/1000 time = 0.26224637031555176
I0123 13:13:42.768302 139631495815168 ddar.py:60] Depth 6/1000 time = 0.29000377655029297
I0123 13:13:43.082840 139631495815168 ddar.py:60] Depth 7/1000 time = 0.3143916130065918
I0123 13:13:43.406292 139631495815168 ddar.py:60] Depth 8/1000 time = 0.32329869270324707
I0123 13:13:43.748697 139631495815168 ddar.py:60] Depth 9/1000 time = 0.3368508815765381
I0123 13:13:44.100498 139631495815168 ddar.py:60] Depth 10/1000 time = 0.3481733798980713
I0123 13:13:44.100781 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:44.100824 139631495815168 alphageometry.py:566] LM output (score=-2.692980): "h : P c g d h 07 P d e d h 08 ;"
I0123 13:13:44.100856 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P d e d h"

I0123 13:13:44.100887 139631495815168 alphageometry.py:566] LM output (score=-2.693728): "h : T c g c h 07 ;"
I0123 13:13:44.100914 139631495815168 alphageometry.py:567] Translation: "h = on_tline h c c g"

I0123 13:13:44.100943 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_tline h c c g ? simtri d b f e a f"
I0123 13:13:44.101042 139631495815168 graph.py:498] 
I0123 13:13:44.101085 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_tline h c c g ? simtri d b f e a f
I0123 13:13:44.193106 139631495815168 ddar.py:60] Depth 1/1000 time = 0.07864809036254883
I0123 13:13:44.316748 139631495815168 ddar.py:60] Depth 2/1000 time = 0.12355947494506836
I0123 13:13:44.452237 139631495815168 ddar.py:60] Depth 3/1000 time = 0.13541173934936523
I0123 13:13:44.621302 139631495815168 ddar.py:60] Depth 4/1000 time = 0.16892504692077637
I0123 13:13:44.788865 139631495815168 ddar.py:60] Depth 5/1000 time = 0.16743016242980957
I0123 13:13:44.791868 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:44.791914 139631495815168 alphageometry.py:566] LM output (score=-2.710797): "h : D c e c h 07 D g e g h 08 ;"
I0123 13:13:44.791946 139631495815168 alphageometry.py:567] Translation: "h = on_circle h c e, on_circle h g e"

I0123 13:13:44.791978 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_circle h c e, on_circle h g e ? simtri d b f e a f"
I0123 13:13:44.792079 139631495815168 graph.py:498] 
I0123 13:13:44.792123 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_circle h c e, on_circle h g e ? simtri d b f e a f
I0123 13:13:44.921538 139631495815168 ddar.py:60] Depth 1/1000 time = 0.11658716201782227
I0123 13:13:45.098015 139631495815168 ddar.py:60] Depth 2/1000 time = 0.17639684677124023
I0123 13:13:45.334941 139631495815168 ddar.py:60] Depth 3/1000 time = 0.23684287071228027
I0123 13:13:45.664362 139631495815168 ddar.py:60] Depth 4/1000 time = 0.32926082611083984
I0123 13:13:45.996071 139631495815168 ddar.py:60] Depth 5/1000 time = 0.33155035972595215
I0123 13:13:46.365488 139631495815168 ddar.py:60] Depth 6/1000 time = 0.35745668411254883
I0123 13:13:46.365809 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:46.365853 139631495815168 alphageometry.py:566] LM output (score=-2.738778): "h : P c g c h 07 T c h c d 08 ;"
I0123 13:13:46.365887 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c g c h"

I0123 13:13:46.365923 139631495815168 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C a c d 00 T a b b d 01 ; e : C b c e 02 T a b a e 03 ; f : C a b f 04 T a b c f 05 ? S d b f e a f {F1} x00 g : P a b c g 06 P a c b g 07 ; x00
I0123 13:13:50.425081 139631495815168 alphageometry.py:566] LM output (score=-0.289470): "h : C a g h 08 D a h g h 09 ;"
I0123 13:13:50.425231 139631495815168 alphageometry.py:567] Translation: "h = on_line h a g, on_bline h g a"

I0123 13:13:50.425286 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h a g, on_bline h g a ? simtri d b f e a f"
I0123 13:13:50.425403 139631495815168 graph.py:498] 
I0123 13:13:50.425451 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h a g, on_bline h g a ? simtri d b f e a f
I0123 13:13:50.591822 139631495815168 ddar.py:60] Depth 1/1000 time = 0.14955568313598633
I0123 13:13:50.869833 139631495815168 ddar.py:60] Depth 2/1000 time = 0.2779195308685303
I0123 13:13:51.563532 139631495815168 ddar.py:60] Depth 3/1000 time = 0.6935944557189941
I0123 13:13:52.353565 139631495815168 ddar.py:60] Depth 4/1000 time = 0.7897994518280029
I0123 13:13:52.898468 139631495815168 ddar.py:60] Depth 5/1000 time = 0.5446538925170898
I0123 13:13:53.672796 139631495815168 ddar.py:60] Depth 6/1000 time = 0.7737457752227783
I0123 13:13:54.473709 139631495815168 ddar.py:60] Depth 7/1000 time = 0.7923743724822998
I0123 13:13:54.474064 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:54.474120 139631495815168 alphageometry.py:566] LM output (score=-1.342875): "h : C g e h 08 D g h e h 09 ;"
I0123 13:13:54.474156 139631495815168 alphageometry.py:567] Translation: "h = on_line h g e, on_bline h e g"

I0123 13:13:54.474192 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h g e, on_bline h e g ? simtri d b f e a f"
I0123 13:13:54.474310 139631495815168 graph.py:498] 
I0123 13:13:54.474358 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h g e, on_bline h e g ? simtri d b f e a f
I0123 13:13:54.617579 139631495815168 ddar.py:60] Depth 1/1000 time = 0.12621784210205078
I0123 13:13:54.793031 139631495815168 ddar.py:60] Depth 2/1000 time = 0.17535114288330078
I0123 13:13:54.985517 139631495815168 ddar.py:60] Depth 3/1000 time = 0.19240236282348633
I0123 13:13:55.207206 139631495815168 ddar.py:60] Depth 4/1000 time = 0.22154593467712402
I0123 13:13:55.433320 139631495815168 ddar.py:60] Depth 5/1000 time = 0.22598505020141602
I0123 13:13:55.661733 139631495815168 ddar.py:60] Depth 6/1000 time = 0.22792792320251465
I0123 13:13:55.667173 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:55.667222 139631495815168 alphageometry.py:566] LM output (score=-1.352491): "h : C c g h 08 D c g c h 09 ;"
I0123 13:13:55.667258 139631495815168 alphageometry.py:567] Translation: "h = on_line h c g, on_circle h c g"

I0123 13:13:55.667293 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c g, on_circle h c g ? simtri d b f e a f"
I0123 13:13:55.667407 139631495815168 graph.py:498] 
I0123 13:13:55.667453 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c g, on_circle h c g ? simtri d b f e a f
I0123 13:13:55.845679 139631495815168 ddar.py:60] Depth 1/1000 time = 0.16170692443847656
I0123 13:13:56.126387 139631495815168 ddar.py:60] Depth 2/1000 time = 0.2806222438812256
I0123 13:13:56.484946 139631495815168 ddar.py:60] Depth 3/1000 time = 0.35846948623657227
I0123 13:13:56.904057 139631495815168 ddar.py:60] Depth 4/1000 time = 0.4189629554748535
I0123 13:13:57.325499 139631495815168 ddar.py:60] Depth 5/1000 time = 0.42130208015441895
I0123 13:13:57.746927 139631495815168 ddar.py:60] Depth 6/1000 time = 0.4209015369415283
I0123 13:13:58.185199 139631495815168 ddar.py:60] Depth 7/1000 time = 0.42965221405029297
I0123 13:13:58.185464 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:58.185506 139631495815168 alphageometry.py:566] LM output (score=-1.450207): "h : C c g h 08 D c h g h 09 ;"
I0123 13:13:58.185539 139631495815168 alphageometry.py:567] Translation: "h = on_line h c g, on_bline h g c"

I0123 13:13:58.185572 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c g, on_bline h g c ? simtri d b f e a f"
I0123 13:13:58.185684 139631495815168 graph.py:498] 
I0123 13:13:58.185731 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c g, on_bline h g c ? simtri d b f e a f
I0123 13:13:58.348581 139631495815168 ddar.py:60] Depth 1/1000 time = 0.14682340621948242
I0123 13:13:58.789355 139631495815168 ddar.py:60] Depth 2/1000 time = 0.4406697750091553
I0123 13:13:59.003422 139631495815168 ddar.py:60] Depth 3/1000 time = 0.2138979434967041
I0123 13:13:59.249092 139631495815168 ddar.py:60] Depth 4/1000 time = 0.24549055099487305
I0123 13:13:59.497112 139631495815168 ddar.py:60] Depth 5/1000 time = 0.24788665771484375
I0123 13:13:59.742078 139631495815168 ddar.py:60] Depth 6/1000 time = 0.24448418617248535
I0123 13:13:59.747462 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:13:59.747510 139631495815168 alphageometry.py:566] LM output (score=-1.553303): "h : C c g h 08 T c g e h 09 ;"
I0123 13:13:59.747545 139631495815168 alphageometry.py:567] Translation: "h = on_line h c g, on_tline h e c g"

I0123 13:13:59.747581 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c g, on_tline h e c g ? simtri d b f e a f"
I0123 13:13:59.747693 139631495815168 graph.py:498] 
I0123 13:13:59.747740 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c g, on_tline h e c g ? simtri d b f e a f
I0123 13:13:59.941407 139631495815168 ddar.py:60] Depth 1/1000 time = 0.17390775680541992
I0123 13:14:00.260201 139631495815168 ddar.py:60] Depth 2/1000 time = 0.318709135055542
I0123 13:14:00.702680 139631495815168 ddar.py:60] Depth 3/1000 time = 0.44238901138305664
I0123 13:14:01.403769 139631495815168 ddar.py:60] Depth 4/1000 time = 0.7009341716766357
I0123 13:14:02.159781 139631495815168 ddar.py:60] Depth 5/1000 time = 0.7558541297912598
I0123 13:14:02.937731 139631495815168 ddar.py:60] Depth 6/1000 time = 0.763117790222168
I0123 13:14:02.938046 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:14:02.938090 139631495815168 alphageometry.py:566] LM output (score=-1.606994): "h : C b c h 08 D b h c h 09 ;"
I0123 13:14:02.938123 139631495815168 alphageometry.py:567] Translation: "h = on_line h b c, on_bline h c b"

I0123 13:14:02.938158 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h b c, on_bline h c b ? simtri d b f e a f"
I0123 13:14:02.938269 139631495815168 graph.py:498] 
I0123 13:14:02.938315 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h b c, on_bline h c b ? simtri d b f e a f
I0123 13:14:03.135249 139631495815168 ddar.py:60] Depth 1/1000 time = 0.18063640594482422
I0123 13:14:03.821840 139631495815168 ddar.py:60] Depth 2/1000 time = 0.6864733695983887
I0123 13:14:04.562171 139631495815168 ddar.py:60] Depth 3/1000 time = 0.7401461601257324
I0123 13:14:05.097125 139631495815168 ddar.py:60] Depth 4/1000 time = 0.5347199440002441
I0123 13:14:05.877710 139631495815168 ddar.py:60] Depth 5/1000 time = 0.7803611755371094
I0123 13:14:06.689571 139631495815168 ddar.py:60] Depth 6/1000 time = 0.8111960887908936
I0123 13:14:07.501365 139631495815168 ddar.py:60] Depth 7/1000 time = 0.803459644317627
I0123 13:14:07.501752 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:14:07.501806 139631495815168 alphageometry.py:566] LM output (score=-1.962578): "h : C c e h 08 D c h e h 09 ;"
I0123 13:14:07.501841 139631495815168 alphageometry.py:567] Translation: "h = on_line h c e, on_bline h e c"

I0123 13:14:07.501877 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c e, on_bline h e c ? simtri d b f e a f"
I0123 13:14:07.502003 139631495815168 graph.py:498] 
I0123 13:14:07.502056 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c e, on_bline h e c ? simtri d b f e a f
I0123 13:14:07.676387 139631495815168 ddar.py:60] Depth 1/1000 time = 0.15712618827819824
I0123 13:14:07.874905 139631495815168 ddar.py:60] Depth 2/1000 time = 0.19842958450317383
I0123 13:14:08.094876 139631495815168 ddar.py:60] Depth 3/1000 time = 0.21986174583435059
I0123 13:14:08.341255 139631495815168 ddar.py:60] Depth 4/1000 time = 0.24622058868408203
I0123 13:14:08.587521 139631495815168 ddar.py:60] Depth 5/1000 time = 0.24613142013549805
I0123 13:14:08.832952 139631495815168 ddar.py:60] Depth 6/1000 time = 0.2449631690979004
I0123 13:14:08.838445 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:14:08.838496 139631495815168 alphageometry.py:566] LM output (score=-2.082732): "h : C c e h 08 P a g f h 09 ;"
I0123 13:14:08.838530 139631495815168 alphageometry.py:567] Translation: "h = on_line h c e, on_pline h f a g"

I0123 13:14:08.838565 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c e, on_pline h f a g ? simtri d b f e a f"
I0123 13:14:08.838674 139631495815168 graph.py:498] 
I0123 13:14:08.838719 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c e, on_pline h f a g ? simtri d b f e a f
I0123 13:14:09.009631 139631495815168 ddar.py:60] Depth 1/1000 time = 0.14925384521484375
I0123 13:14:09.205879 139631495815168 ddar.py:60] Depth 2/1000 time = 0.19615530967712402
I0123 13:14:09.422961 139631495815168 ddar.py:60] Depth 3/1000 time = 0.2169954776763916
I0123 13:14:09.672225 139631495815168 ddar.py:60] Depth 4/1000 time = 0.24912476539611816
I0123 13:14:09.924416 139631495815168 ddar.py:60] Depth 5/1000 time = 0.2520565986633301
I0123 13:14:09.930092 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:14:09.930139 139631495815168 alphageometry.py:566] LM output (score=-2.140091): "h : C c g h 08 D c g g h 09 ;"
I0123 13:14:09.930174 139631495815168 alphageometry.py:567] Translation: "h = on_line h c g, on_circle h g c"

I0123 13:14:09.930208 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c g, on_circle h g c ? simtri d b f e a f"
I0123 13:14:09.930318 139631495815168 graph.py:498] 
I0123 13:14:09.930364 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c g, on_circle h g c ? simtri d b f e a f
I0123 13:14:10.090696 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1441211700439453
I0123 13:14:10.317017 139631495815168 ddar.py:60] Depth 2/1000 time = 0.22623634338378906
I0123 13:14:10.591040 139631495815168 ddar.py:60] Depth 3/1000 time = 0.27393674850463867
I0123 13:14:10.907163 139631495815168 ddar.py:60] Depth 4/1000 time = 0.3159818649291992
I0123 13:14:11.482736 139631495815168 ddar.py:60] Depth 5/1000 time = 0.5754146575927734
I0123 13:14:11.800057 139631495815168 ddar.py:60] Depth 6/1000 time = 0.3167538642883301
I0123 13:14:11.806155 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:14:11.806213 139631495815168 alphageometry.py:566] LM output (score=-2.377248): "h : C c g h 08 P a h g e 09 ;"
I0123 13:14:11.806249 139631495815168 alphageometry.py:567] Translation: "h = on_line h c g, on_pline h a g e"

I0123 13:14:11.806286 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c g, on_pline h a g e ? simtri d b f e a f"
I0123 13:14:11.806405 139631495815168 graph.py:498] 
I0123 13:14:11.806452 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c g, on_pline h a g e ? simtri d b f e a f
I0123 13:14:11.972498 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1436779499053955
I0123 13:14:12.183674 139631495815168 ddar.py:60] Depth 2/1000 time = 0.21108531951904297
I0123 13:14:12.405282 139631495815168 ddar.py:60] Depth 3/1000 time = 0.22152161598205566
I0123 13:14:12.657812 139631495815168 ddar.py:60] Depth 4/1000 time = 0.252392053604126
I0123 13:14:12.915501 139631495815168 ddar.py:60] Depth 5/1000 time = 0.25755929946899414
I0123 13:14:12.920922 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:14:12.920970 139631495815168 alphageometry.py:566] LM output (score=-2.385039): "h : C d g h 08 D d h g h 09 ;"
I0123 13:14:12.921004 139631495815168 alphageometry.py:567] Translation: "h = on_line h d g, on_bline h g d"

I0123 13:14:12.921037 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h d g, on_bline h g d ? simtri d b f e a f"
I0123 13:14:12.921147 139631495815168 graph.py:498] 
I0123 13:14:12.921192 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h d g, on_bline h g d ? simtri d b f e a f
I0123 13:14:13.064982 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1273329257965088
I0123 13:14:13.244322 139631495815168 ddar.py:60] Depth 2/1000 time = 0.17925500869750977
I0123 13:14:13.444930 139631495815168 ddar.py:60] Depth 3/1000 time = 0.20052075386047363
I0123 13:14:13.668799 139631495815168 ddar.py:60] Depth 4/1000 time = 0.22373390197753906
I0123 13:14:13.896502 139631495815168 ddar.py:60] Depth 5/1000 time = 0.22757411003112793
I0123 13:14:14.122020 139631495815168 ddar.py:60] Depth 6/1000 time = 0.225050687789917
I0123 13:14:14.127507 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:14:14.127554 139631495815168 alphageometry.py:566] LM output (score=-2.386003): "h : C c g h 08 T c g b h 09 ;"
I0123 13:14:14.127587 139631495815168 alphageometry.py:567] Translation: "h = on_line h c g, on_tline h b c g"

I0123 13:14:14.127619 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c g, on_tline h b c g ? simtri d b f e a f"
I0123 13:14:14.127738 139631495815168 graph.py:498] 
I0123 13:14:14.127785 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c g, on_tline h b c g ? simtri d b f e a f
I0123 13:14:14.379690 139631495815168 ddar.py:60] Depth 1/1000 time = 0.23723125457763672
I0123 13:14:15.028601 139631495815168 ddar.py:60] Depth 2/1000 time = 0.6488184928894043
I0123 13:14:15.742069 139631495815168 ddar.py:60] Depth 3/1000 time = 0.7133615016937256
I0123 13:14:16.829252 139631495815168 ddar.py:60] Depth 4/1000 time = 1.0870041847229004
I0123 13:14:17.646724 139631495815168 ddar.py:60] Depth 5/1000 time = 0.8172245025634766
I0123 13:14:17.661221 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:14:17.661278 139631495815168 alphageometry.py:566] LM output (score=-2.667482): "h : C c g h 08 T g h e h 09 ;"
I0123 13:14:17.661312 139631495815168 alphageometry.py:567] Translation: "h = on_line h c g, on_dia h e g"

I0123 13:14:17.661348 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c g, on_dia h e g ? simtri d b f e a f"
I0123 13:14:17.661463 139631495815168 graph.py:498] 
I0123 13:14:17.661510 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c g, on_dia h e g ? simtri d b f e a f
I0123 13:14:17.854188 139631495815168 ddar.py:60] Depth 1/1000 time = 0.16931486129760742
I0123 13:14:18.170718 139631495815168 ddar.py:60] Depth 2/1000 time = 0.3164384365081787
I0123 13:14:18.603156 139631495815168 ddar.py:60] Depth 3/1000 time = 0.43234729766845703
I0123 13:14:19.292732 139631495815168 ddar.py:60] Depth 4/1000 time = 0.68941330909729
I0123 13:14:20.032260 139631495815168 ddar.py:60] Depth 5/1000 time = 0.7393684387207031
I0123 13:14:20.795822 139631495815168 ddar.py:60] Depth 6/1000 time = 0.749091386795044
I0123 13:14:20.796150 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:14:20.796196 139631495815168 alphageometry.py:566] LM output (score=-2.670763): "h : C c f h 08 D c h f h 09 ;"
I0123 13:14:20.796229 139631495815168 alphageometry.py:567] Translation: "h = on_line h c f, on_bline h f c"

I0123 13:14:20.796263 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c f, on_bline h f c ? simtri d b f e a f"
I0123 13:14:20.796375 139631495815168 graph.py:498] 
I0123 13:14:20.796419 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c f, on_bline h f c ? simtri d b f e a f
I0123 13:14:20.962105 139631495815168 ddar.py:60] Depth 1/1000 time = 0.14957261085510254
I0123 13:14:21.160698 139631495815168 ddar.py:60] Depth 2/1000 time = 0.19850659370422363
I0123 13:14:21.375243 139631495815168 ddar.py:60] Depth 3/1000 time = 0.2144608497619629
I0123 13:14:21.891283 139631495815168 ddar.py:60] Depth 4/1000 time = 0.5158796310424805
I0123 13:14:22.142621 139631495815168 ddar.py:60] Depth 5/1000 time = 0.2511167526245117
I0123 13:14:22.147975 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:14:22.148028 139631495815168 alphageometry.py:566] LM output (score=-2.762316): "h : C g f h 08 D g h f h 09 ;"
I0123 13:14:22.148064 139631495815168 alphageometry.py:567] Translation: "h = on_line h g f, on_bline h f g"

I0123 13:14:22.148099 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h g f, on_bline h f g ? simtri d b f e a f"
I0123 13:14:22.148229 139631495815168 graph.py:498] 
I0123 13:14:22.148277 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h g f, on_bline h f g ? simtri d b f e a f
I0123 13:14:22.303296 139631495815168 ddar.py:60] Depth 1/1000 time = 0.13794517517089844
I0123 13:14:22.617994 139631495815168 ddar.py:60] Depth 2/1000 time = 0.314608097076416
I0123 13:14:22.947945 139631495815168 ddar.py:60] Depth 3/1000 time = 0.3298521041870117
I0123 13:14:23.593180 139631495815168 ddar.py:60] Depth 4/1000 time = 0.6450576782226562
I0123 13:14:23.973608 139631495815168 ddar.py:60] Depth 5/1000 time = 0.3802003860473633
I0123 13:14:24.343739 139631495815168 ddar.py:60] Depth 6/1000 time = 0.36955952644348145
I0123 13:14:25.002026 139631495815168 ddar.py:60] Depth 7/1000 time = 0.6506659984588623
I0123 13:14:25.002373 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:14:25.002429 139631495815168 alphageometry.py:566] LM output (score=-2.814951): "h : C c d h 08 D c h d h 09 ;"
I0123 13:14:25.002467 139631495815168 alphageometry.py:567] Translation: "h = on_line h c d, on_bline h d c"

I0123 13:14:25.002505 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c d, on_bline h d c ? simtri d b f e a f"
I0123 13:14:25.002623 139631495815168 graph.py:498] 
I0123 13:14:25.002669 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c d, on_bline h d c ? simtri d b f e a f
I0123 13:14:25.175051 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1553211212158203
I0123 13:14:25.384210 139631495815168 ddar.py:60] Depth 2/1000 time = 0.20906281471252441
I0123 13:14:25.605226 139631495815168 ddar.py:60] Depth 3/1000 time = 0.220933198928833
I0123 13:14:25.861370 139631495815168 ddar.py:60] Depth 4/1000 time = 0.25600242614746094
I0123 13:14:26.120414 139631495815168 ddar.py:60] Depth 5/1000 time = 0.2589075565338135
I0123 13:14:26.378071 139631495815168 ddar.py:60] Depth 6/1000 time = 0.25719165802001953
I0123 13:14:26.383342 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:14:26.383390 139631495815168 alphageometry.py:566] LM output (score=-2.857831): "h : C c e h 08 T c e g h 09 ;"
I0123 13:14:26.383425 139631495815168 alphageometry.py:567] Translation: "h = on_line h c e, on_tline h g c e"

I0123 13:14:26.383459 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c e, on_tline h g c e ? simtri d b f e a f"
I0123 13:14:26.383571 139631495815168 graph.py:498] 
I0123 13:14:26.383615 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c e, on_tline h g c e ? simtri d b f e a f
I0123 13:14:26.560621 139631495815168 ddar.py:60] Depth 1/1000 time = 0.15631532669067383
I0123 13:14:26.812232 139631495815168 ddar.py:60] Depth 2/1000 time = 0.2515289783477783
I0123 13:14:27.086111 139631495815168 ddar.py:60] Depth 3/1000 time = 0.2737913131713867
I0123 13:14:27.396623 139631495815168 ddar.py:60] Depth 4/1000 time = 0.31037211418151855
I0123 13:14:27.710346 139631495815168 ddar.py:60] Depth 5/1000 time = 0.3135874271392822
I0123 13:14:27.717950 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:14:27.717999 139631495815168 alphageometry.py:566] LM output (score=-2.874195): "h : C c g h 08 P a h b e 09 ;"
I0123 13:14:27.718045 139631495815168 alphageometry.py:567] Translation: "h = on_line h c g, on_pline h a b e"

I0123 13:14:27.718079 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c g, on_pline h a b e ? simtri d b f e a f"
I0123 13:14:27.718371 139631495815168 graph.py:498] 
I0123 13:14:27.718415 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c g, on_pline h a b e ? simtri d b f e a f
I0123 13:14:27.919828 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1800215244293213
I0123 13:14:28.248829 139631495815168 ddar.py:60] Depth 2/1000 time = 0.32891058921813965
I0123 13:14:28.636585 139631495815168 ddar.py:60] Depth 3/1000 time = 0.3876652717590332
I0123 13:14:29.075654 139631495815168 ddar.py:60] Depth 4/1000 time = 0.4389204978942871
I0123 13:14:29.512587 139631495815168 ddar.py:60] Depth 5/1000 time = 0.43679165840148926
I0123 13:14:30.222594 139631495815168 ddar.py:60] Depth 6/1000 time = 0.7094714641571045
I0123 13:14:30.678030 139631495815168 ddar.py:60] Depth 7/1000 time = 0.4455835819244385
I0123 13:14:30.678328 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:14:30.678377 139631495815168 alphageometry.py:566] LM output (score=-2.924948): "h : C e g h 08 D e h g h 09 ;"
I0123 13:14:30.678411 139631495815168 alphageometry.py:567] Translation: "h = on_line h e g, on_bline h g e"

I0123 13:14:30.678448 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h e g, on_bline h g e ? simtri d b f e a f"
I0123 13:14:30.678567 139631495815168 graph.py:498] 
I0123 13:14:30.678614 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h e g, on_bline h g e ? simtri d b f e a f
I0123 13:14:30.819695 139631495815168 ddar.py:60] Depth 1/1000 time = 0.12430071830749512
I0123 13:14:30.994039 139631495815168 ddar.py:60] Depth 2/1000 time = 0.1742537021636963
I0123 13:14:31.185710 139631495815168 ddar.py:60] Depth 3/1000 time = 0.1915874481201172
I0123 13:14:31.404730 139631495815168 ddar.py:60] Depth 4/1000 time = 0.21888113021850586
I0123 13:14:31.626706 139631495815168 ddar.py:60] Depth 5/1000 time = 0.22184085845947266
I0123 13:14:31.848956 139631495815168 ddar.py:60] Depth 6/1000 time = 0.2217726707458496
I0123 13:14:31.854684 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:14:31.854732 139631495815168 alphageometry.py:566] LM output (score=-3.087686): "h : C c g h 08 T c g d h 09 ;"
I0123 13:14:31.854767 139631495815168 alphageometry.py:567] Translation: "h = on_line h c g, on_tline h d c g"

I0123 13:14:31.854800 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c g, on_tline h d c g ? simtri d b f e a f"
I0123 13:14:31.854909 139631495815168 graph.py:498] 
I0123 13:14:31.854954 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c g, on_tline h d c g ? simtri d b f e a f
I0123 13:14:32.109024 139631495815168 ddar.py:60] Depth 1/1000 time = 0.23895049095153809
I0123 13:14:32.801921 139631495815168 ddar.py:60] Depth 2/1000 time = 0.692805290222168
I0123 13:14:33.526997 139631495815168 ddar.py:60] Depth 3/1000 time = 0.7249705791473389
I0123 13:14:34.381335 139631495815168 ddar.py:60] Depth 4/1000 time = 0.854158878326416
I0123 13:14:35.512984 139631495815168 ddar.py:60] Depth 5/1000 time = 1.1314465999603271
I0123 13:14:35.526508 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:14:35.526594 139631495815168 alphageometry.py:566] LM output (score=-3.114684): "h : C c g h 08 P a h b g 09 ;"
I0123 13:14:35.526632 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 13:14:35.526675 139631495815168 alphageometry.py:566] LM output (score=-3.214792): "h : C c b h 08 D c h b h 09 ;"
I0123 13:14:35.526705 139631495815168 alphageometry.py:567] Translation: "h = on_line h c b, on_bline h b c"

I0123 13:14:35.526738 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c b, on_bline h b c ? simtri d b f e a f"
I0123 13:14:35.526861 139631495815168 graph.py:498] 
I0123 13:14:35.526912 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c b, on_bline h b c ? simtri d b f e a f
I0123 13:14:35.723927 139631495815168 ddar.py:60] Depth 1/1000 time = 0.17983651161193848
I0123 13:14:36.157085 139631495815168 ddar.py:60] Depth 2/1000 time = 0.4330618381500244
I0123 13:14:36.945747 139631495815168 ddar.py:60] Depth 3/1000 time = 0.7885124683380127
I0123 13:14:37.757473 139631495815168 ddar.py:60] Depth 4/1000 time = 0.811455488204956
I0123 13:14:38.295664 139631495815168 ddar.py:60] Depth 5/1000 time = 0.5379469394683838
I0123 13:14:39.115603 139631495815168 ddar.py:60] Depth 6/1000 time = 0.819366455078125
I0123 13:14:39.952313 139631495815168 ddar.py:60] Depth 7/1000 time = 0.8278803825378418
I0123 13:14:39.952669 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:14:39.952717 139631495815168 alphageometry.py:566] LM output (score=-3.217787): "h : C c g h 08 D g e e h 09 ;"
I0123 13:14:39.952751 139631495815168 alphageometry.py:567] Translation: "h = on_line h c g, on_circle h e g"

I0123 13:14:39.952788 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c g, on_circle h e g ? simtri d b f e a f"
I0123 13:14:39.952908 139631495815168 graph.py:498] 
I0123 13:14:39.952956 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c g, on_circle h e g ? simtri d b f e a f
I0123 13:14:40.127713 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1579287052154541
I0123 13:14:40.342979 139631495815168 ddar.py:60] Depth 2/1000 time = 0.2151777744293213
I0123 13:14:40.574760 139631495815168 ddar.py:60] Depth 3/1000 time = 0.23169684410095215
I0123 13:14:40.843630 139631495815168 ddar.py:60] Depth 4/1000 time = 0.26873135566711426
I0123 13:14:41.112765 139631495815168 ddar.py:60] Depth 5/1000 time = 0.2689974308013916
I0123 13:14:41.411631 139631495815168 ddar.py:60] Depth 6/1000 time = 0.293837308883667
I0123 13:14:41.730917 139631495815168 ddar.py:60] Depth 7/1000 time = 0.3191373348236084
I0123 13:14:42.066753 139631495815168 ddar.py:60] Depth 8/1000 time = 0.3356943130493164
I0123 13:14:42.409574 139631495815168 ddar.py:60] Depth 9/1000 time = 0.34044408798217773
I0123 13:14:42.756942 139631495815168 ddar.py:60] Depth 10/1000 time = 0.3448786735534668
I0123 13:14:42.757208 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:14:42.757265 139631495815168 alphageometry.py:566] LM output (score=-3.231475): "h : C c g h 08 D g d d h 09 ;"
I0123 13:14:42.757299 139631495815168 alphageometry.py:567] Translation: "h = on_line h c g, on_circle h d g"

I0123 13:14:42.757334 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c g, on_circle h d g ? simtri d b f e a f"
I0123 13:14:42.757446 139631495815168 graph.py:498] 
I0123 13:14:42.757491 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c g, on_circle h d g ? simtri d b f e a f
I0123 13:14:42.931369 139631495815168 ddar.py:60] Depth 1/1000 time = 0.15828204154968262
I0123 13:14:43.148412 139631495815168 ddar.py:60] Depth 2/1000 time = 0.21695923805236816
I0123 13:14:43.383129 139631495815168 ddar.py:60] Depth 3/1000 time = 0.2346334457397461
I0123 13:14:43.653370 139631495815168 ddar.py:60] Depth 4/1000 time = 0.27010011672973633
I0123 13:14:43.924381 139631495815168 ddar.py:60] Depth 5/1000 time = 0.2708730697631836
I0123 13:14:44.221140 139631495815168 ddar.py:60] Depth 6/1000 time = 0.29187965393066406
I0123 13:14:44.557986 139631495815168 ddar.py:60] Depth 7/1000 time = 0.3367002010345459
I0123 13:14:44.983426 139631495815168 ddar.py:60] Depth 8/1000 time = 0.42529940605163574
I0123 13:14:45.785737 139631495815168 ddar.py:60] Depth 9/1000 time = 0.802147388458252
I0123 13:14:46.283030 139631495815168 ddar.py:60] Depth 10/1000 time = 0.4947066307067871
I0123 13:14:46.785139 139631495815168 ddar.py:60] Depth 11/1000 time = 0.49999141693115234
I0123 13:14:47.315249 139631495815168 ddar.py:60] Depth 12/1000 time = 0.5257408618927002
I0123 13:14:47.315533 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:14:47.315579 139631495815168 alphageometry.py:566] LM output (score=-3.254751): "h : C c e h 08 P a g d h 09 ;"
I0123 13:14:47.315613 139631495815168 alphageometry.py:567] Translation: "h = on_line h c e, on_pline h d a g"

I0123 13:14:47.315648 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c e, on_pline h d a g ? simtri d b f e a f"
I0123 13:14:47.315764 139631495815168 graph.py:498] 
I0123 13:14:47.315810 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c e, on_pline h d a g ? simtri d b f e a f
I0123 13:14:47.486440 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1475536823272705
I0123 13:14:47.686875 139631495815168 ddar.py:60] Depth 2/1000 time = 0.2003483772277832
I0123 13:14:47.902823 139631495815168 ddar.py:60] Depth 3/1000 time = 0.21586227416992188
I0123 13:14:48.152336 139631495815168 ddar.py:60] Depth 4/1000 time = 0.2493741512298584
I0123 13:14:48.403979 139631495815168 ddar.py:60] Depth 5/1000 time = 0.2515125274658203
I0123 13:14:48.409821 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:14:48.409871 139631495815168 alphageometry.py:566] LM output (score=-3.263103): "h : C b g h 08 D b h g h 09 ;"
I0123 13:14:48.409905 139631495815168 alphageometry.py:567] Translation: "h = on_line h b g, on_bline h g b"

I0123 13:14:48.409940 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h b g, on_bline h g b ? simtri d b f e a f"
I0123 13:14:48.410049 139631495815168 graph.py:498] 
I0123 13:14:48.410095 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h b g, on_bline h g b ? simtri d b f e a f
I0123 13:14:48.566317 139631495815168 ddar.py:60] Depth 1/1000 time = 0.14007830619812012
I0123 13:14:48.757559 139631495815168 ddar.py:60] Depth 2/1000 time = 0.19115304946899414
I0123 13:14:48.968110 139631495815168 ddar.py:60] Depth 3/1000 time = 0.21046733856201172
I0123 13:14:49.208551 139631495815168 ddar.py:60] Depth 4/1000 time = 0.24030160903930664
I0123 13:14:49.454068 139631495815168 ddar.py:60] Depth 5/1000 time = 0.24538707733154297
I0123 13:14:49.696162 139631495815168 ddar.py:60] Depth 6/1000 time = 0.24160385131835938
I0123 13:14:49.701965 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:14:49.702013 139631495815168 alphageometry.py:566] LM output (score=-3.297328): "h : C b g h 08 D b g b h 09 ;"
I0123 13:14:49.702048 139631495815168 alphageometry.py:567] Translation: "h = on_line h b g, on_circle h b g"

I0123 13:14:49.702083 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h b g, on_circle h b g ? simtri d b f e a f"
I0123 13:14:49.702191 139631495815168 graph.py:498] 
I0123 13:14:49.702236 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h b g, on_circle h b g ? simtri d b f e a f
I0123 13:14:49.857788 139631495815168 ddar.py:60] Depth 1/1000 time = 0.13954901695251465
I0123 13:14:50.076768 139631495815168 ddar.py:60] Depth 2/1000 time = 0.21889472007751465
I0123 13:14:50.356672 139631495815168 ddar.py:60] Depth 3/1000 time = 0.2798151969909668
I0123 13:14:50.678433 139631495815168 ddar.py:60] Depth 4/1000 time = 0.32158637046813965
I0123 13:14:51.001825 139631495815168 ddar.py:60] Depth 5/1000 time = 0.3232603073120117
I0123 13:14:51.329467 139631495815168 ddar.py:60] Depth 6/1000 time = 0.32715630531311035
I0123 13:14:51.336068 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:14:51.336117 139631495815168 alphageometry.py:566] LM output (score=-3.320094): "h : C c g h 08 T c g f h 09 ;"
I0123 13:14:51.336151 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 13:14:51.336184 139631495815168 alphageometry.py:566] LM output (score=-3.393290): "g : C c g d 08 D c g g d 09 ;"
I0123 13:14:51.336212 139631495815168 alphageometry.py:567] Translation: "ERROR: point g already exists."

I0123 13:14:51.336239 139631495815168 alphageometry.py:566] LM output (score=-3.404267): "h : C b e h 08 D b h e h 09 ;"
I0123 13:14:51.336266 139631495815168 alphageometry.py:567] Translation: "h = on_line h b e, on_bline h e b"

I0123 13:14:51.336295 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h b e, on_bline h e b ? simtri d b f e a f"
I0123 13:14:51.336399 139631495815168 graph.py:498] 
I0123 13:14:51.336443 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h b e, on_bline h e b ? simtri d b f e a f
I0123 13:14:51.519027 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1660003662109375
I0123 13:14:52.163309 139631495815168 ddar.py:60] Depth 2/1000 time = 0.644181489944458
I0123 13:14:52.552110 139631495815168 ddar.py:60] Depth 3/1000 time = 0.3886387348175049
I0123 13:14:53.285866 139631495815168 ddar.py:60] Depth 4/1000 time = 0.7335519790649414
I0123 13:14:54.016953 139631495815168 ddar.py:60] Depth 5/1000 time = 0.7308378219604492
I0123 13:14:54.448840 139631495815168 ddar.py:60] Depth 6/1000 time = 0.43125343322753906
I0123 13:14:55.209734 139631495815168 ddar.py:60] Depth 7/1000 time = 0.7537510395050049
I0123 13:14:55.210100 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:14:55.210162 139631495815168 alphageometry.py:566] LM output (score=-3.473372): "h : C c g h 08 P a g e h 09 ;"
I0123 13:14:55.210198 139631495815168 alphageometry.py:567] Translation: "h = on_line h c g, on_pline h e a g"

I0123 13:14:55.210234 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c g, on_pline h e a g ? simtri d b f e a f"
I0123 13:14:55.210358 139631495815168 graph.py:498] 
I0123 13:14:55.210410 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c g, on_pline h e a g ? simtri d b f e a f
I0123 13:14:55.375258 139631495815168 ddar.py:60] Depth 1/1000 time = 0.14227867126464844
I0123 13:14:55.568371 139631495815168 ddar.py:60] Depth 2/1000 time = 0.19301962852478027
I0123 13:14:55.779097 139631495815168 ddar.py:60] Depth 3/1000 time = 0.2106330394744873
I0123 13:14:56.018986 139631495815168 ddar.py:60] Depth 4/1000 time = 0.23973345756530762
I0123 13:14:56.259941 139631495815168 ddar.py:60] Depth 5/1000 time = 0.24081897735595703
I0123 13:14:56.265817 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:14:56.265870 139631495815168 alphageometry.py:566] LM output (score=-3.491014): "h : C c g h 08 C f e h 09 ;"
I0123 13:14:56.265905 139631495815168 alphageometry.py:567] Translation: "h = on_line h c g, on_line h f e"

I0123 13:14:56.265945 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c g, on_line h f e ? simtri d b f e a f"
I0123 13:14:56.266058 139631495815168 graph.py:498] 
I0123 13:14:56.266104 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b, on_pline g b a c; h = on_line h c g, on_line h f e ? simtri d b f e a f
I0123 13:14:56.451371 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1705479621887207
I0123 13:14:56.725103 139631495815168 ddar.py:60] Depth 2/1000 time = 0.27364611625671387
I0123 13:14:57.017138 139631495815168 ddar.py:60] Depth 3/1000 time = 0.2919490337371826
I0123 13:14:57.368452 139631495815168 ddar.py:60] Depth 4/1000 time = 0.35117435455322266
I0123 13:14:57.720168 139631495815168 ddar.py:60] Depth 5/1000 time = 0.3515815734863281
I0123 13:14:57.731559 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:14:57.731610 139631495815168 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C a c d 00 T a b b d 01 ; e : C b c e 02 T a b a e 03 ; f : C a b f 04 T a b c f 05 ? S d b f e a f {F1} x00 g : P a b e g 06 P a e b g 07 ; x00
I0123 13:15:02.489998 139631495815168 alphageometry.py:566] LM output (score=-0.710125): "h : C c e h 08 D c h e h 09 ;"
I0123 13:15:02.490146 139631495815168 alphageometry.py:567] Translation: "h = on_line h c e, on_bline h e c"

I0123 13:15:02.490189 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_line h c e, on_bline h e c ? simtri d b f e a f"
I0123 13:15:02.490303 139631495815168 graph.py:498] 
I0123 13:15:02.490350 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_line h c e, on_bline h e c ? simtri d b f e a f
I0123 13:15:02.690624 139631495815168 ddar.py:60] Depth 1/1000 time = 0.18406319618225098
I0123 13:15:03.002473 139631495815168 ddar.py:60] Depth 2/1000 time = 0.3117523193359375
I0123 13:15:03.378370 139631495815168 ddar.py:60] Depth 3/1000 time = 0.3758068084716797
I0123 13:15:03.798514 139631495815168 ddar.py:60] Depth 4/1000 time = 0.41998744010925293
I0123 13:15:04.221292 139631495815168 ddar.py:60] Depth 5/1000 time = 0.42262816429138184
I0123 13:15:04.647348 139631495815168 ddar.py:60] Depth 6/1000 time = 0.4254617691040039
I0123 13:15:05.082109 139631495815168 ddar.py:60] Depth 7/1000 time = 0.4267432689666748
I0123 13:15:05.082398 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:15:05.082442 139631495815168 alphageometry.py:566] LM output (score=-1.039756): "h : C a g h 08 D a h g h 09 ;"
I0123 13:15:05.082475 139631495815168 alphageometry.py:567] Translation: "h = on_line h a g, on_bline h g a"

I0123 13:15:05.082509 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_line h a g, on_bline h g a ? simtri d b f e a f"
I0123 13:15:05.082617 139631495815168 graph.py:498] 
I0123 13:15:05.082663 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_line h a g, on_bline h g a ? simtri d b f e a f
I0123 13:15:05.269500 139631495815168 ddar.py:60] Depth 1/1000 time = 0.17194461822509766
I0123 13:15:06.238246 139631495815168 ddar.py:60] Depth 2/1000 time = 0.968630313873291
I0123 13:15:07.338151 139631495815168 ddar.py:60] Depth 3/1000 time = 1.0997200012207031
I0123 13:15:08.491299 139631495815168 ddar.py:60] Depth 4/1000 time = 1.1528964042663574
I0123 13:15:09.631890 139631495815168 ddar.py:60] Depth 5/1000 time = 1.1403446197509766
I0123 13:15:10.765717 139631495815168 ddar.py:60] Depth 6/1000 time = 1.1330876350402832
I0123 13:15:11.920414 139631495815168 ddar.py:60] Depth 7/1000 time = 1.145871877670288
I0123 13:15:11.920788 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:15:11.920836 139631495815168 alphageometry.py:566] LM output (score=-1.105124): "h : C c g h 08 D c h g h 09 ;"
I0123 13:15:11.920871 139631495815168 alphageometry.py:567] Translation: "h = on_line h c g, on_bline h g c"

I0123 13:15:11.920907 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_line h c g, on_bline h g c ? simtri d b f e a f"
I0123 13:15:11.921023 139631495815168 graph.py:498] 
I0123 13:15:11.921069 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_line h c g, on_bline h g c ? simtri d b f e a f
I0123 13:15:12.085708 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1487722396850586
I0123 13:15:12.362992 139631495815168 ddar.py:60] Depth 2/1000 time = 0.27719759941101074
I0123 13:15:12.701910 139631495815168 ddar.py:60] Depth 3/1000 time = 0.33883118629455566
I0123 13:15:13.085327 139631495815168 ddar.py:60] Depth 4/1000 time = 0.3832688331604004
I0123 13:15:13.480775 139631495815168 ddar.py:60] Depth 5/1000 time = 0.39530253410339355
I0123 13:15:13.866122 139631495815168 ddar.py:60] Depth 6/1000 time = 0.3847637176513672
I0123 13:15:14.263082 139631495815168 ddar.py:60] Depth 7/1000 time = 0.3896336555480957
I0123 13:15:14.263361 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:15:14.263405 139631495815168 alphageometry.py:566] LM output (score=-1.263942): "h : P c g e h 08 P c h e g 09 ;"
I0123 13:15:14.263449 139631495815168 alphageometry.py:567] Translation: "h = on_pline h e c g, on_pline h c e g"

I0123 13:15:14.263484 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_pline h e c g, on_pline h c e g ? simtri d b f e a f"
I0123 13:15:14.263592 139631495815168 graph.py:498] 
I0123 13:15:14.263637 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_pline h e c g, on_pline h c e g ? simtri d b f e a f
I0123 13:15:14.476421 139631495815168 ddar.py:60] Depth 1/1000 time = 0.18627381324768066
I0123 13:15:14.878782 139631495815168 ddar.py:60] Depth 2/1000 time = 0.4022715091705322
I0123 13:15:15.419983 139631495815168 ddar.py:60] Depth 3/1000 time = 0.5411050319671631
I0123 13:15:15.977597 139631495815168 ddar.py:60] Depth 4/1000 time = 0.5574495792388916
I0123 13:15:16.533211 139631495815168 ddar.py:60] Depth 5/1000 time = 0.5554542541503906
I0123 13:15:17.419886 139631495815168 ddar.py:60] Depth 6/1000 time = 0.8745102882385254
I0123 13:15:17.420285 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:15:17.420342 139631495815168 alphageometry.py:566] LM output (score=-1.441604): "h : C b e h 08 D b h e h 09 ;"
I0123 13:15:17.420379 139631495815168 alphageometry.py:567] Translation: "h = on_line h b e, on_bline h e b"

I0123 13:15:17.420415 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_line h b e, on_bline h e b ? simtri d b f e a f"
I0123 13:15:17.420532 139631495815168 graph.py:498] 
I0123 13:15:17.420578 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_line h b e, on_bline h e b ? simtri d b f e a f
I0123 13:15:17.634187 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1977243423461914
I0123 13:15:18.274000 139631495815168 ddar.py:60] Depth 2/1000 time = 0.6397085189819336
I0123 13:15:19.345457 139631495815168 ddar.py:60] Depth 3/1000 time = 1.0713050365447998
I0123 13:15:20.485167 139631495815168 ddar.py:60] Depth 4/1000 time = 1.1394550800323486
I0123 13:15:21.941124 139631495815168 ddar.py:60] Depth 5/1000 time = 1.455711841583252
I0123 13:15:22.753155 139631495815168 ddar.py:60] Depth 6/1000 time = 0.811356782913208
I0123 13:15:24.221070 139631495815168 ddar.py:60] Depth 7/1000 time = 1.4590115547180176
I0123 13:15:24.221450 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:15:24.221507 139631495815168 alphageometry.py:566] LM output (score=-1.731295): "h : C d e h 08 D d h e h 09 ;"
I0123 13:15:24.221542 139631495815168 alphageometry.py:567] Translation: "h = on_line h d e, on_bline h e d"

I0123 13:15:24.221579 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_line h d e, on_bline h e d ? simtri d b f e a f"
I0123 13:15:24.221704 139631495815168 graph.py:498] 
I0123 13:15:24.221752 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_line h d e, on_bline h e d ? simtri d b f e a f
I0123 13:15:24.386933 139631495815168 ddar.py:60] Depth 1/1000 time = 0.14906978607177734
I0123 13:15:24.680836 139631495815168 ddar.py:60] Depth 2/1000 time = 0.2938070297241211
I0123 13:15:25.205193 139631495815168 ddar.py:60] Depth 3/1000 time = 0.5242581367492676
I0123 13:15:25.852301 139631495815168 ddar.py:60] Depth 4/1000 time = 0.6469156742095947
I0123 13:15:26.856633 139631495815168 ddar.py:60] Depth 5/1000 time = 1.0041074752807617
I0123 13:15:27.584488 139631495815168 ddar.py:60] Depth 6/1000 time = 0.727611780166626
I0123 13:15:28.615906 139631495815168 ddar.py:60] Depth 7/1000 time = 1.0307238101959229
I0123 13:15:29.365019 139631495815168 ddar.py:60] Depth 8/1000 time = 0.7380602359771729
I0123 13:15:30.435381 139631495815168 ddar.py:60] Depth 9/1000 time = 1.0665290355682373
I0123 13:15:30.435780 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:15:30.435827 139631495815168 alphageometry.py:566] LM output (score=-1.931993): "h : P c g e h 08 P c e g h 09 ;"
I0123 13:15:30.435860 139631495815168 alphageometry.py:567] Translation: "h = on_pline h e c g, on_pline h g c e"

I0123 13:15:30.435894 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_pline h e c g, on_pline h g c e ? simtri d b f e a f"
I0123 13:15:30.436013 139631495815168 graph.py:498] 
I0123 13:15:30.436057 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_pline h e c g, on_pline h g c e ? simtri d b f e a f
I0123 13:15:30.631880 139631495815168 ddar.py:60] Depth 1/1000 time = 0.16752171516418457
I0123 13:15:30.950041 139631495815168 ddar.py:60] Depth 2/1000 time = 0.3180708885192871
I0123 13:15:31.349778 139631495815168 ddar.py:60] Depth 3/1000 time = 0.3996429443359375
I0123 13:15:31.792529 139631495815168 ddar.py:60] Depth 4/1000 time = 0.4425985813140869
I0123 13:15:32.241671 139631495815168 ddar.py:60] Depth 5/1000 time = 0.44899868965148926
I0123 13:15:32.706534 139631495815168 ddar.py:60] Depth 6/1000 time = 0.4556424617767334
I0123 13:15:32.706838 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:15:32.706880 139631495815168 alphageometry.py:566] LM output (score=-2.144830): "h : C c e h 08 P a g f h 09 ;"
I0123 13:15:32.706913 139631495815168 alphageometry.py:567] Translation: "h = on_line h c e, on_pline h f a g"

I0123 13:15:32.706946 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_line h c e, on_pline h f a g ? simtri d b f e a f"
I0123 13:15:32.707055 139631495815168 graph.py:498] 
I0123 13:15:32.707099 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_line h c e, on_pline h f a g ? simtri d b f e a f
I0123 13:15:32.897848 139631495815168 ddar.py:60] Depth 1/1000 time = 0.17095112800598145
I0123 13:15:33.195355 139631495815168 ddar.py:60] Depth 2/1000 time = 0.29741764068603516
I0123 13:15:33.613683 139631495815168 ddar.py:60] Depth 3/1000 time = 0.41823863983154297
I0123 13:15:34.619450 139631495815168 ddar.py:60] Depth 4/1000 time = 1.0055930614471436
I0123 13:15:35.622675 139631495815168 ddar.py:60] Depth 5/1000 time = 1.0029854774475098
I0123 13:15:36.302299 139631495815168 ddar.py:60] Depth 6/1000 time = 0.6789422035217285
I0123 13:15:37.321824 139631495815168 ddar.py:60] Depth 7/1000 time = 1.0112781524658203
I0123 13:15:37.322197 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:15:37.322253 139631495815168 alphageometry.py:566] LM output (score=-2.196788): "h : C d g h 08 D d h g h 09 ;"
I0123 13:15:37.322289 139631495815168 alphageometry.py:567] Translation: "h = on_line h d g, on_bline h g d"

I0123 13:15:37.322326 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_line h d g, on_bline h g d ? simtri d b f e a f"
I0123 13:15:37.322463 139631495815168 graph.py:498] 
I0123 13:15:37.322520 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_line h d g, on_bline h g d ? simtri d b f e a f
I0123 13:15:37.484959 139631495815168 ddar.py:60] Depth 1/1000 time = 0.14670968055725098
I0123 13:15:37.852243 139631495815168 ddar.py:60] Depth 2/1000 time = 0.36714696884155273
I0123 13:15:38.287479 139631495815168 ddar.py:60] Depth 3/1000 time = 0.4350626468658447
I0123 13:15:38.771566 139631495815168 ddar.py:60] Depth 4/1000 time = 0.4839184284210205
I0123 13:15:39.609522 139631495815168 ddar.py:60] Depth 5/1000 time = 0.8377768993377686
I0123 13:15:40.095957 139631495815168 ddar.py:60] Depth 6/1000 time = 0.48569536209106445
I0123 13:15:40.593360 139631495815168 ddar.py:60] Depth 7/1000 time = 0.48993849754333496
I0123 13:15:40.593687 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:15:40.593739 139631495815168 alphageometry.py:566] LM output (score=-2.282378): "h : C c e h 08 T c e g h 09 ;"
I0123 13:15:40.593774 139631495815168 alphageometry.py:567] Translation: "h = on_line h c e, on_tline h g c e"

I0123 13:15:40.593813 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_line h c e, on_tline h g c e ? simtri d b f e a f"
I0123 13:15:40.593941 139631495815168 graph.py:498] 
I0123 13:15:40.593992 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_line h c e, on_tline h g c e ? simtri d b f e a f
I0123 13:15:40.789998 139631495815168 ddar.py:60] Depth 1/1000 time = 0.17524266242980957
I0123 13:15:41.203865 139631495815168 ddar.py:60] Depth 2/1000 time = 0.4137759208679199
I0123 13:15:41.695235 139631495815168 ddar.py:60] Depth 3/1000 time = 0.49127912521362305
I0123 13:15:42.239510 139631495815168 ddar.py:60] Depth 4/1000 time = 0.5441131591796875
I0123 13:15:42.787584 139631495815168 ddar.py:60] Depth 5/1000 time = 0.5479183197021484
I0123 13:15:43.357147 139631495815168 ddar.py:60] Depth 6/1000 time = 0.5581202507019043
I0123 13:15:43.357455 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:15:43.357499 139631495815168 alphageometry.py:566] LM output (score=-2.310535): "h : P b e g h 08 P b g e h 09 ;"
I0123 13:15:43.357532 139631495815168 alphageometry.py:567] Translation: "h = on_pline h g b e, on_pline h e b g"

I0123 13:15:43.357565 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_pline h g b e, on_pline h e b g ? simtri d b f e a f"
I0123 13:15:43.357680 139631495815168 graph.py:498] 
I0123 13:15:43.357728 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_pline h g b e, on_pline h e b g ? simtri d b f e a f
I0123 13:15:43.568613 139631495815168 ddar.py:60] Depth 1/1000 time = 0.18516945838928223
I0123 13:15:44.022598 139631495815168 ddar.py:60] Depth 2/1000 time = 0.4538905620574951
I0123 13:15:44.929925 139631495815168 ddar.py:60] Depth 3/1000 time = 0.9072184562683105
I0123 13:15:45.558740 139631495815168 ddar.py:60] Depth 4/1000 time = 0.6285901069641113
I0123 13:15:46.196981 139631495815168 ddar.py:60] Depth 5/1000 time = 0.6380746364593506
I0123 13:15:46.829826 139631495815168 ddar.py:60] Depth 6/1000 time = 0.6321814060211182
I0123 13:15:47.480329 139631495815168 ddar.py:60] Depth 7/1000 time = 0.6415467262268066
I0123 13:15:47.480641 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:15:47.480701 139631495815168 alphageometry.py:566] LM output (score=-2.330329): "h : C e g h 08 D e h g h 09 ;"
I0123 13:15:47.480736 139631495815168 alphageometry.py:567] Translation: "h = on_line h e g, on_bline h g e"

I0123 13:15:47.480771 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_line h e g, on_bline h g e ? simtri d b f e a f"
I0123 13:15:47.480885 139631495815168 graph.py:498] 
I0123 13:15:47.480933 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_line h e g, on_bline h g e ? simtri d b f e a f
I0123 13:15:47.668797 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1720573902130127
I0123 13:15:48.008501 139631495815168 ddar.py:60] Depth 2/1000 time = 0.3396151065826416
I0123 13:15:48.472701 139631495815168 ddar.py:60] Depth 3/1000 time = 0.46410655975341797
I0123 13:15:49.001548 139631495815168 ddar.py:60] Depth 4/1000 time = 0.5286791324615479
I0123 13:15:49.534344 139631495815168 ddar.py:60] Depth 5/1000 time = 0.5326247215270996
I0123 13:15:50.068425 139631495815168 ddar.py:60] Depth 6/1000 time = 0.5334732532501221
I0123 13:15:50.617239 139631495815168 ddar.py:60] Depth 7/1000 time = 0.5381081104278564
I0123 13:15:50.617552 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:15:50.617596 139631495815168 alphageometry.py:566] LM output (score=-2.393586): "h : P b f g h 08 P b g f h 09 ;"
I0123 13:15:50.617629 139631495815168 alphageometry.py:567] Translation: "h = on_pline h g b f, on_pline h f b g"

I0123 13:15:50.617669 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_pline h g b f, on_pline h f b g ? simtri d b f e a f"
I0123 13:15:50.617780 139631495815168 graph.py:498] 
I0123 13:15:50.617826 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_pline h g b f, on_pline h f b g ? simtri d b f e a f
I0123 13:15:50.835168 139631495815168 ddar.py:60] Depth 1/1000 time = 0.19246721267700195
I0123 13:15:51.501210 139631495815168 ddar.py:60] Depth 2/1000 time = 0.665952205657959
I0123 13:15:52.652251 139631495815168 ddar.py:60] Depth 3/1000 time = 1.150862455368042
I0123 13:15:54.162322 139631495815168 ddar.py:60] Depth 4/1000 time = 1.5098731517791748
I0123 13:15:55.334558 139631495815168 ddar.py:60] Depth 5/1000 time = 1.1719825267791748
I0123 13:15:55.353181 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:15:55.353238 139631495815168 alphageometry.py:566] LM output (score=-2.397594): "h : P c g e h 08 P c h g e 09 ;"
I0123 13:15:55.353273 139631495815168 alphageometry.py:567] Translation: "h = on_pline h e c g, on_pline h c g e"

I0123 13:15:55.353310 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_pline h e c g, on_pline h c g e ? simtri d b f e a f"
I0123 13:15:55.353427 139631495815168 graph.py:498] 
I0123 13:15:55.353474 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_pline h e c g, on_pline h c g e ? simtri d b f e a f
I0123 13:15:55.569136 139631495815168 ddar.py:60] Depth 1/1000 time = 0.18787431716918945
I0123 13:15:55.958616 139631495815168 ddar.py:60] Depth 2/1000 time = 0.3893892765045166
I0123 13:15:56.479001 139631495815168 ddar.py:60] Depth 3/1000 time = 0.5202927589416504
I0123 13:15:57.049422 139631495815168 ddar.py:60] Depth 4/1000 time = 0.5702664852142334
I0123 13:15:57.619872 139631495815168 ddar.py:60] Depth 5/1000 time = 0.5702848434448242
I0123 13:15:58.215664 139631495815168 ddar.py:60] Depth 6/1000 time = 0.583871603012085
I0123 13:15:58.215974 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:15:58.216017 139631495815168 alphageometry.py:566] LM output (score=-2.625020): "h : P c e g h 08 P c h e g 09 ;"
I0123 13:15:58.216050 139631495815168 alphageometry.py:567] Translation: "h = on_pline h g c e, on_pline h c e g"

I0123 13:15:58.216083 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_pline h g c e, on_pline h c e g ? simtri d b f e a f"
I0123 13:15:58.216195 139631495815168 graph.py:498] 
I0123 13:15:58.216239 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_pline h g c e, on_pline h c e g ? simtri d b f e a f
I0123 13:15:58.431691 139631495815168 ddar.py:60] Depth 1/1000 time = 0.18891239166259766
I0123 13:15:58.857987 139631495815168 ddar.py:60] Depth 2/1000 time = 0.42620301246643066
I0123 13:15:59.431012 139631495815168 ddar.py:60] Depth 3/1000 time = 0.5729269981384277
I0123 13:16:00.357768 139631495815168 ddar.py:60] Depth 4/1000 time = 0.9265758991241455
I0123 13:16:00.950398 139631495815168 ddar.py:60] Depth 5/1000 time = 0.5923991203308105
I0123 13:16:01.568830 139631495815168 ddar.py:60] Depth 6/1000 time = 0.6076126098632812
I0123 13:16:01.569159 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:16:01.569206 139631495815168 alphageometry.py:566] LM output (score=-2.650235): "h : C b c h 08 D b h c h 09 ;"
I0123 13:16:01.569241 139631495815168 alphageometry.py:567] Translation: "h = on_line h b c, on_bline h c b"

I0123 13:16:01.569277 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_line h b c, on_bline h c b ? simtri d b f e a f"
I0123 13:16:01.569392 139631495815168 graph.py:498] 
I0123 13:16:01.569438 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_line h b c, on_bline h c b ? simtri d b f e a f
I0123 13:16:01.768081 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1827859878540039
I0123 13:16:02.260343 139631495815168 ddar.py:60] Depth 2/1000 time = 0.492145299911499
I0123 13:16:03.261691 139631495815168 ddar.py:60] Depth 3/1000 time = 1.0011579990386963
I0123 13:16:04.316936 139631495815168 ddar.py:60] Depth 4/1000 time = 1.054966926574707
I0123 13:16:05.016700 139631495815168 ddar.py:60] Depth 5/1000 time = 0.6994600296020508
I0123 13:16:06.065689 139631495815168 ddar.py:60] Depth 6/1000 time = 1.0482583045959473
I0123 13:16:07.152956 139631495815168 ddar.py:60] Depth 7/1000 time = 1.0788893699645996
I0123 13:16:07.153355 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:16:07.153409 139631495815168 alphageometry.py:566] LM output (score=-2.694728): "h : P b c g h 08 P b g c h 09 ;"
I0123 13:16:07.153444 139631495815168 alphageometry.py:567] Translation: "h = on_pline h g b c, on_pline h c b g"

I0123 13:16:07.153480 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_pline h g b c, on_pline h c b g ? simtri d b f e a f"
I0123 13:16:07.153613 139631495815168 graph.py:498] 
I0123 13:16:07.153671 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_pline h g b c, on_pline h c b g ? simtri d b f e a f
I0123 13:16:07.362132 139631495815168 ddar.py:60] Depth 1/1000 time = 0.18201684951782227
I0123 13:16:07.833973 139631495815168 ddar.py:60] Depth 2/1000 time = 0.47174692153930664
I0123 13:16:08.472424 139631495815168 ddar.py:60] Depth 3/1000 time = 0.6383566856384277
I0123 13:16:09.171152 139631495815168 ddar.py:60] Depth 4/1000 time = 0.6985599994659424
I0123 13:16:09.869249 139631495815168 ddar.py:60] Depth 5/1000 time = 0.6979281902313232
I0123 13:16:10.591723 139631495815168 ddar.py:60] Depth 6/1000 time = 0.7113440036773682
I0123 13:16:10.592056 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:16:10.592101 139631495815168 alphageometry.py:566] LM output (score=-2.705440): "h : P b e d h 08 P b h d e 09 ;"
I0123 13:16:10.592135 139631495815168 alphageometry.py:567] Translation: "h = on_pline h d b e, on_pline h b d e"

I0123 13:16:10.592170 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_pline h d b e, on_pline h b d e ? simtri d b f e a f"
I0123 13:16:10.592283 139631495815168 graph.py:498] 
I0123 13:16:10.592329 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_pline h d b e, on_pline h b d e ? simtri d b f e a f
I0123 13:16:10.789671 139631495815168 ddar.py:60] Depth 1/1000 time = 0.16867637634277344
I0123 13:16:11.121025 139631495815168 ddar.py:60] Depth 2/1000 time = 0.33125925064086914
I0123 13:16:11.554983 139631495815168 ddar.py:60] Depth 3/1000 time = 0.43386411666870117
I0123 13:16:12.040782 139631495815168 ddar.py:60] Depth 4/1000 time = 0.4856398105621338
I0123 13:16:12.528687 139631495815168 ddar.py:60] Depth 5/1000 time = 0.4877505302429199
I0123 13:16:13.032871 139631495815168 ddar.py:60] Depth 6/1000 time = 0.4944572448730469
I0123 13:16:13.033189 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:16:13.033232 139631495815168 alphageometry.py:566] LM output (score=-2.714051): "h : P c d g h 08 P c h d g 09 ;"
I0123 13:16:13.033265 139631495815168 alphageometry.py:567] Translation: "h = on_pline h g c d, on_pline h c d g"

I0123 13:16:13.033299 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_pline h g c d, on_pline h c d g ? simtri d b f e a f"
I0123 13:16:13.033410 139631495815168 graph.py:498] 
I0123 13:16:13.033455 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_pline h g c d, on_pline h c d g ? simtri d b f e a f
I0123 13:16:13.225154 139631495815168 ddar.py:60] Depth 1/1000 time = 0.16373920440673828
I0123 13:16:13.930198 139631495815168 ddar.py:60] Depth 2/1000 time = 0.7049405574798584
I0123 13:16:14.409149 139631495815168 ddar.py:60] Depth 3/1000 time = 0.4787898063659668
I0123 13:16:14.952374 139631495815168 ddar.py:60] Depth 4/1000 time = 0.5430538654327393
I0123 13:16:15.491826 139631495815168 ddar.py:60] Depth 5/1000 time = 0.5392940044403076
I0123 13:16:16.052298 139631495815168 ddar.py:60] Depth 6/1000 time = 0.550614595413208
I0123 13:16:16.052628 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:16:16.052675 139631495815168 alphageometry.py:566] LM output (score=-2.778731): "h : C e g h 08 D e g g h 09 ;"
I0123 13:16:16.052709 139631495815168 alphageometry.py:567] Translation: "h = on_line h e g, on_circle h g e"

I0123 13:16:16.052744 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_line h e g, on_circle h g e ? simtri d b f e a f"
I0123 13:16:16.052875 139631495815168 graph.py:498] 
I0123 13:16:16.052922 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_line h e g, on_circle h g e ? simtri d b f e a f
I0123 13:16:16.254323 139631495815168 ddar.py:60] Depth 1/1000 time = 0.18632102012634277
I0123 13:16:16.678943 139631495815168 ddar.py:60] Depth 2/1000 time = 0.4245281219482422
I0123 13:16:17.316617 139631495815168 ddar.py:60] Depth 3/1000 time = 0.6375763416290283
I0123 13:16:18.048069 139631495815168 ddar.py:60] Depth 4/1000 time = 0.7312784194946289
I0123 13:16:18.782389 139631495815168 ddar.py:60] Depth 5/1000 time = 0.7341511249542236
I0123 13:16:19.522716 139631495815168 ddar.py:60] Depth 6/1000 time = 0.7396924495697021
I0123 13:16:20.290771 139631495815168 ddar.py:60] Depth 7/1000 time = 0.7557370662689209
I0123 13:16:20.291103 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:16:20.291148 139631495815168 alphageometry.py:566] LM output (score=-2.781362): "h : P b f e h 08 ;"
I0123 13:16:20.291182 139631495815168 alphageometry.py:567] Translation: "h = on_pline h e b f"

I0123 13:16:20.291215 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_pline h e b f ? simtri d b f e a f"
I0123 13:16:20.291324 139631495815168 graph.py:498] 
I0123 13:16:20.291370 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_pline h e b f ? simtri d b f e a f
I0123 13:16:20.443779 139631495815168 ddar.py:60] Depth 1/1000 time = 0.13298869132995605
I0123 13:16:20.740461 139631495815168 ddar.py:60] Depth 2/1000 time = 0.29659390449523926
I0123 13:16:21.100360 139631495815168 ddar.py:60] Depth 3/1000 time = 0.3598058223724365
I0123 13:16:21.511812 139631495815168 ddar.py:60] Depth 4/1000 time = 0.4112966060638428
I0123 13:16:21.922452 139631495815168 ddar.py:60] Depth 5/1000 time = 0.41048479080200195
I0123 13:16:22.343433 139631495815168 ddar.py:60] Depth 6/1000 time = 0.4132351875305176
I0123 13:16:22.343737 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:16:22.343792 139631495815168 alphageometry.py:566] LM output (score=-2.887616): "h : P c d e h 08 P c e d h 09 ;"
I0123 13:16:22.343826 139631495815168 alphageometry.py:567] Translation: "h = on_pline h e c d, on_pline h d c e"

I0123 13:16:22.343863 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_pline h e c d, on_pline h d c e ? simtri d b f e a f"
I0123 13:16:22.343977 139631495815168 graph.py:498] 
I0123 13:16:22.344024 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_pline h e c d, on_pline h d c e ? simtri d b f e a f
I0123 13:16:22.545216 139631495815168 ddar.py:60] Depth 1/1000 time = 0.17340302467346191
I0123 13:16:22.900967 139631495815168 ddar.py:60] Depth 2/1000 time = 0.3556203842163086
I0123 13:16:23.718759 139631495815168 ddar.py:60] Depth 3/1000 time = 0.817601203918457
I0123 13:16:24.199156 139631495815168 ddar.py:60] Depth 4/1000 time = 0.4801673889160156
I0123 13:16:24.675063 139631495815168 ddar.py:60] Depth 5/1000 time = 0.4757370948791504
I0123 13:16:25.165808 139631495815168 ddar.py:60] Depth 6/1000 time = 0.482313871383667
I0123 13:16:25.166129 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:16:25.166179 139631495815168 alphageometry.py:566] LM output (score=-2.944404): "h : C e g h 08 T c h e g 09 ;"
I0123 13:16:25.166227 139631495815168 alphageometry.py:567] Translation: "h = on_line h e g, on_tline h c e g"

I0123 13:16:25.166278 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_line h e g, on_tline h c e g ? simtri d b f e a f"
I0123 13:16:25.166407 139631495815168 graph.py:498] 
I0123 13:16:25.166459 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_line h e g, on_tline h c e g ? simtri d b f e a f
I0123 13:16:25.415545 139631495815168 ddar.py:60] Depth 1/1000 time = 0.2304375171661377
I0123 13:16:26.055535 139631495815168 ddar.py:60] Depth 2/1000 time = 0.6398966312408447
I0123 13:16:27.113957 139631495815168 ddar.py:60] Depth 3/1000 time = 1.0583109855651855
I0123 13:16:28.422329 139631495815168 ddar.py:60] Depth 4/1000 time = 1.3081634044647217
I0123 13:16:29.746075 139631495815168 ddar.py:60] Depth 5/1000 time = 1.3235414028167725
I0123 13:16:29.765917 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:16:29.765974 139631495815168 alphageometry.py:566] LM output (score=-2.962012): "h : D b c b h 08 D c g g h 09 ;"
I0123 13:16:29.766010 139631495815168 alphageometry.py:567] Translation: "h = on_circle h b c, on_circle h g c"

I0123 13:16:29.766046 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_circle h b c, on_circle h g c ? simtri d b f e a f"
I0123 13:16:29.766159 139631495815168 graph.py:498] 
I0123 13:16:29.766205 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_circle h b c, on_circle h g c ? simtri d b f e a f
I0123 13:16:29.964240 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1804966926574707
I0123 13:16:30.385843 139631495815168 ddar.py:60] Depth 2/1000 time = 0.4215123653411865
I0123 13:16:31.331254 139631495815168 ddar.py:60] Depth 3/1000 time = 0.9453034400939941
I0123 13:16:31.993281 139631495815168 ddar.py:60] Depth 4/1000 time = 0.6617929935455322
I0123 13:16:32.649601 139631495815168 ddar.py:60] Depth 5/1000 time = 0.6561408042907715
I0123 13:16:33.340213 139631495815168 ddar.py:60] Depth 6/1000 time = 0.6709296703338623
I0123 13:16:33.340585 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:16:33.340632 139631495815168 alphageometry.py:566] LM output (score=-3.020307): "h : D b c b h 08 ;"
I0123 13:16:33.340666 139631495815168 alphageometry.py:567] Translation: "h = on_circle h b c"

I0123 13:16:33.340702 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_circle h b c ? simtri d b f e a f"
I0123 13:16:33.340811 139631495815168 graph.py:498] 
I0123 13:16:33.340856 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_circle h b c ? simtri d b f e a f
I0123 13:16:33.495428 139631495815168 ddar.py:60] Depth 1/1000 time = 0.13916993141174316
I0123 13:16:33.745922 139631495815168 ddar.py:60] Depth 2/1000 time = 0.25040698051452637
I0123 13:16:34.067160 139631495815168 ddar.py:60] Depth 3/1000 time = 0.321148157119751
I0123 13:16:34.432041 139631495815168 ddar.py:60] Depth 4/1000 time = 0.364727258682251
I0123 13:16:34.799928 139631495815168 ddar.py:60] Depth 5/1000 time = 0.3677358627319336
I0123 13:16:35.178385 139631495815168 ddar.py:60] Depth 6/1000 time = 0.3700859546661377
I0123 13:16:35.178694 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:16:35.178751 139631495815168 alphageometry.py:566] LM output (score=-3.025844): "h : P a g b h 08 P a h b g 09 ;"
I0123 13:16:35.178787 139631495815168 alphageometry.py:567] Translation: "h = on_pline h b a g, on_pline h a b g"

I0123 13:16:35.178821 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_pline h b a g, on_pline h a b g ? simtri d b f e a f"
I0123 13:16:35.178932 139631495815168 graph.py:498] 
I0123 13:16:35.178977 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_pline h b a g, on_pline h a b g ? simtri d b f e a f
I0123 13:16:35.388071 139631495815168 ddar.py:60] Depth 1/1000 time = 0.18369817733764648
I0123 13:16:35.877480 139631495815168 ddar.py:60] Depth 2/1000 time = 0.4893202781677246
I0123 13:16:36.582541 139631495815168 ddar.py:60] Depth 3/1000 time = 0.7049651145935059
I0123 13:16:37.430002 139631495815168 ddar.py:60] Depth 4/1000 time = 0.8472762107849121
I0123 13:16:38.284737 139631495815168 ddar.py:60] Depth 5/1000 time = 0.8545498847961426
I0123 13:16:39.520252 139631495815168 ddar.py:60] Depth 6/1000 time = 1.2347524166107178
I0123 13:16:39.532949 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:16:39.533010 139631495815168 alphageometry.py:566] LM output (score=-3.028039): "h : P b f e h 08 P b h f e 09 ;"
I0123 13:16:39.533047 139631495815168 alphageometry.py:567] Translation: "h = on_pline h e b f, on_pline h b f e"

I0123 13:16:39.533083 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_pline h e b f, on_pline h b f e ? simtri d b f e a f"
I0123 13:16:39.533201 139631495815168 graph.py:498] 
I0123 13:16:39.533247 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_pline h e b f, on_pline h b f e ? simtri d b f e a f
I0123 13:16:39.737110 139631495815168 ddar.py:60] Depth 1/1000 time = 0.176558256149292
I0123 13:16:40.149970 139631495815168 ddar.py:60] Depth 2/1000 time = 0.4127621650695801
I0123 13:16:40.712893 139631495815168 ddar.py:60] Depth 3/1000 time = 0.5628154277801514
I0123 13:16:41.345412 139631495815168 ddar.py:60] Depth 4/1000 time = 0.6323554515838623
I0123 13:16:41.985332 139631495815168 ddar.py:60] Depth 5/1000 time = 0.639716386795044
I0123 13:16:42.640678 139631495815168 ddar.py:60] Depth 6/1000 time = 0.643871545791626
I0123 13:16:42.641019 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:16:42.641098 139631495815168 alphageometry.py:566] LM output (score=-3.053641): "h : P b g c h 08 P c d e h 09 ;"
I0123 13:16:42.641133 139631495815168 alphageometry.py:567] Translation: "h = on_pline h c b g, on_pline h e c d"

I0123 13:16:42.641180 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_pline h c b g, on_pline h e c d ? simtri d b f e a f"
I0123 13:16:42.641319 139631495815168 graph.py:498] 
I0123 13:16:42.641370 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_pline h c b g, on_pline h e c d ? simtri d b f e a f
I0123 13:16:42.847860 139631495815168 ddar.py:60] Depth 1/1000 time = 0.180436372756958
I0123 13:16:43.295824 139631495815168 ddar.py:60] Depth 2/1000 time = 0.44787049293518066
I0123 13:16:43.890170 139631495815168 ddar.py:60] Depth 3/1000 time = 0.5942401885986328
I0123 13:16:44.595378 139631495815168 ddar.py:60] Depth 4/1000 time = 0.7050089836120605
I0123 13:16:45.302575 139631495815168 ddar.py:60] Depth 5/1000 time = 0.7070310115814209
I0123 13:16:46.035400 139631495815168 ddar.py:60] Depth 6/1000 time = 0.7207674980163574
I0123 13:16:46.035738 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:16:46.035790 139631495815168 alphageometry.py:566] LM output (score=-3.098884): "h : D b c c h 08 D b g g h 09 ;"
I0123 13:16:46.035825 139631495815168 alphageometry.py:567] Translation: "h = on_circle h c b, on_circle h g b"

I0123 13:16:46.035862 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_circle h c b, on_circle h g b ? simtri d b f e a f"
I0123 13:16:46.035976 139631495815168 graph.py:498] 
I0123 13:16:46.036022 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_circle h c b, on_circle h g b ? simtri d b f e a f
I0123 13:16:46.221560 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1684412956237793
I0123 13:16:46.566162 139631495815168 ddar.py:60] Depth 2/1000 time = 0.3445131778717041
I0123 13:16:47.001085 139631495815168 ddar.py:60] Depth 3/1000 time = 0.4348304271697998
I0123 13:16:47.928036 139631495815168 ddar.py:60] Depth 4/1000 time = 0.9267637729644775
I0123 13:16:48.428392 139631495815168 ddar.py:60] Depth 5/1000 time = 0.5001077651977539
I0123 13:16:48.943568 139631495815168 ddar.py:60] Depth 6/1000 time = 0.5041985511779785
I0123 13:16:48.943929 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:16:48.943976 139631495815168 alphageometry.py:566] LM output (score=-3.117571): "h : P c e c h 08 P g d g h 09 ;"
I0123 13:16:48.944011 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c e c h"

I0123 13:16:48.944044 139631495815168 alphageometry.py:566] LM output (score=-3.178796): "h : P b f e h 08 P b h e f 09 ;"
I0123 13:16:48.944072 139631495815168 alphageometry.py:567] Translation: "h = on_pline h e b f, on_pline h b e f"

I0123 13:16:48.944100 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_pline h e b f, on_pline h b e f ? simtri d b f e a f"
I0123 13:16:48.944215 139631495815168 graph.py:498] 
I0123 13:16:48.944260 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_pline h e b f, on_pline h b e f ? simtri d b f e a f
I0123 13:16:49.148241 139631495815168 ddar.py:60] Depth 1/1000 time = 0.17671465873718262
I0123 13:16:49.563042 139631495815168 ddar.py:60] Depth 2/1000 time = 0.414705753326416
I0123 13:16:50.130859 139631495815168 ddar.py:60] Depth 3/1000 time = 0.5677201747894287
I0123 13:16:50.760565 139631495815168 ddar.py:60] Depth 4/1000 time = 0.6295394897460938
I0123 13:16:51.391863 139631495815168 ddar.py:60] Depth 5/1000 time = 0.6311321258544922
I0123 13:16:52.050336 139631495815168 ddar.py:60] Depth 6/1000 time = 0.6466443538665771
I0123 13:16:52.050651 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:16:52.050694 139631495815168 alphageometry.py:566] LM output (score=-3.211269): "h : D b c c h 08 ;"
I0123 13:16:52.050726 139631495815168 alphageometry.py:567] Translation: "h = on_circle h c b"

I0123 13:16:52.050757 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_circle h c b ? simtri d b f e a f"
I0123 13:16:52.050863 139631495815168 graph.py:498] 
I0123 13:16:52.050920 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b, on_pline g b a e; h = on_circle h c b ? simtri d b f e a f
I0123 13:16:52.203070 139631495815168 ddar.py:60] Depth 1/1000 time = 0.137678861618042
I0123 13:16:52.446139 139631495815168 ddar.py:60] Depth 2/1000 time = 0.24297833442687988
I0123 13:16:52.768947 139631495815168 ddar.py:60] Depth 3/1000 time = 0.32271814346313477
I0123 13:16:53.138455 139631495815168 ddar.py:60] Depth 4/1000 time = 0.3693561553955078
I0123 13:16:53.512714 139631495815168 ddar.py:60] Depth 5/1000 time = 0.37410950660705566
I0123 13:16:53.900101 139631495815168 ddar.py:60] Depth 6/1000 time = 0.3791663646697998
I0123 13:16:53.900401 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:16:53.900449 139631495815168 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C a c d 00 T a b b d 01 ; e : C b c e 02 T a b a e 03 ; f : C a b f 04 T a b c f 05 ? S d b f e a f {F1} x00 g : P a b d g 06 P a g b d 07 ; x00
I0123 13:16:58.503239 139631495815168 alphageometry.py:566] LM output (score=-0.724530): "h : C b g h 08 D b h g h 09 ;"
I0123 13:16:58.503387 139631495815168 alphageometry.py:567] Translation: "h = on_line h b g, on_bline h g b"

I0123 13:16:58.503433 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_line h b g, on_bline h g b ? simtri d b f e a f"
I0123 13:16:58.503548 139631495815168 graph.py:498] 
I0123 13:16:58.503596 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_line h b g, on_bline h g b ? simtri d b f e a f
I0123 13:16:58.676004 139631495815168 ddar.py:60] Depth 1/1000 time = 0.15688538551330566
I0123 13:16:59.685817 139631495815168 ddar.py:60] Depth 2/1000 time = 1.0096988677978516
I0123 13:17:00.834236 139631495815168 ddar.py:60] Depth 3/1000 time = 1.148249626159668
I0123 13:17:01.641304 139631495815168 ddar.py:60] Depth 4/1000 time = 0.8068225383758545
I0123 13:17:02.839237 139631495815168 ddar.py:60] Depth 5/1000 time = 1.1976399421691895
I0123 13:17:04.063341 139631495815168 ddar.py:60] Depth 6/1000 time = 1.223285436630249
I0123 13:17:05.283966 139631495815168 ddar.py:60] Depth 7/1000 time = 1.2114992141723633
I0123 13:17:05.284357 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:17:05.284409 139631495815168 alphageometry.py:566] LM output (score=-1.051801): "h : C c g h 08 D c h g h 09 ;"
I0123 13:17:05.284445 139631495815168 alphageometry.py:567] Translation: "h = on_line h c g, on_bline h g c"

I0123 13:17:05.284481 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_line h c g, on_bline h g c ? simtri d b f e a f"
I0123 13:17:05.284609 139631495815168 graph.py:498] 
I0123 13:17:05.284662 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_line h c g, on_bline h g c ? simtri d b f e a f
I0123 13:17:05.431558 139631495815168 ddar.py:60] Depth 1/1000 time = 0.13064169883728027
I0123 13:17:05.698583 139631495815168 ddar.py:60] Depth 2/1000 time = 0.26693224906921387
I0123 13:17:06.027411 139631495815168 ddar.py:60] Depth 3/1000 time = 0.32873964309692383
I0123 13:17:06.397438 139631495815168 ddar.py:60] Depth 4/1000 time = 0.3698759078979492
I0123 13:17:06.770344 139631495815168 ddar.py:60] Depth 5/1000 time = 0.37276363372802734
I0123 13:17:07.145994 139631495815168 ddar.py:60] Depth 6/1000 time = 0.3750612735748291
I0123 13:17:07.531046 139631495815168 ddar.py:60] Depth 7/1000 time = 0.37801265716552734
I0123 13:17:07.531338 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:17:07.531383 139631495815168 alphageometry.py:566] LM output (score=-1.412532): "h : P c g e h 08 P c e g h 09 ;"
I0123 13:17:07.531416 139631495815168 alphageometry.py:567] Translation: "h = on_pline h e c g, on_pline h g c e"

I0123 13:17:07.531450 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_pline h e c g, on_pline h g c e ? simtri d b f e a f"
I0123 13:17:07.531561 139631495815168 graph.py:498] 
I0123 13:17:07.531605 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_pline h e c g, on_pline h g c e ? simtri d b f e a f
I0123 13:17:07.705748 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1466364860534668
I0123 13:17:08.022537 139631495815168 ddar.py:60] Depth 2/1000 time = 0.31670045852661133
I0123 13:17:08.394987 139631495815168 ddar.py:60] Depth 3/1000 time = 0.3723561763763428
I0123 13:17:08.810671 139631495815168 ddar.py:60] Depth 4/1000 time = 0.41553306579589844
I0123 13:17:09.229447 139631495815168 ddar.py:60] Depth 5/1000 time = 0.41863059997558594
I0123 13:17:09.672369 139631495815168 ddar.py:60] Depth 6/1000 time = 0.43372464179992676
I0123 13:17:09.672675 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:17:09.672721 139631495815168 alphageometry.py:566] LM output (score=-1.740277): "h : C a d h 08 D a h d h 09 ;"
I0123 13:17:09.672756 139631495815168 alphageometry.py:567] Translation: "h = on_line h a d, on_bline h d a"

I0123 13:17:09.672791 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_line h a d, on_bline h d a ? simtri d b f e a f"
I0123 13:17:09.672904 139631495815168 graph.py:498] 
I0123 13:17:09.672949 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_line h a d, on_bline h d a ? simtri d b f e a f
I0123 13:17:09.867446 139631495815168 ddar.py:60] Depth 1/1000 time = 0.17898344993591309
I0123 13:17:10.880089 139631495815168 ddar.py:60] Depth 2/1000 time = 1.0125350952148438
I0123 13:17:12.026096 139631495815168 ddar.py:60] Depth 3/1000 time = 1.1458168029785156
I0123 13:17:13.233222 139631495815168 ddar.py:60] Depth 4/1000 time = 1.2068846225738525
I0123 13:17:14.040987 139631495815168 ddar.py:60] Depth 5/1000 time = 0.8075065612792969
I0123 13:17:15.217686 139631495815168 ddar.py:60] Depth 6/1000 time = 1.1760189533233643
I0123 13:17:16.429541 139631495815168 ddar.py:60] Depth 7/1000 time = 1.2030589580535889
I0123 13:17:16.429914 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:17:16.429964 139631495815168 alphageometry.py:566] LM output (score=-1.921450): "h : C c d h 08 D c h d h 09 ;"
I0123 13:17:16.429998 139631495815168 alphageometry.py:567] Translation: "h = on_line h c d, on_bline h d c"

I0123 13:17:16.430034 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_line h c d, on_bline h d c ? simtri d b f e a f"
I0123 13:17:16.430152 139631495815168 graph.py:498] 
I0123 13:17:16.430199 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_line h c d, on_bline h d c ? simtri d b f e a f
I0123 13:17:16.610005 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1640782356262207
I0123 13:17:16.882323 139631495815168 ddar.py:60] Depth 2/1000 time = 0.27222156524658203
I0123 13:17:17.223706 139631495815168 ddar.py:60] Depth 3/1000 time = 0.3412806987762451
I0123 13:17:17.611025 139631495815168 ddar.py:60] Depth 4/1000 time = 0.38716602325439453
I0123 13:17:18.002614 139631495815168 ddar.py:60] Depth 5/1000 time = 0.39144444465637207
I0123 13:17:18.392088 139631495815168 ddar.py:60] Depth 6/1000 time = 0.3889293670654297
I0123 13:17:18.799576 139631495815168 ddar.py:60] Depth 7/1000 time = 0.3998863697052002
I0123 13:17:18.799859 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:17:18.799902 139631495815168 alphageometry.py:566] LM output (score=-1.960025): "h : P c g d h 08 P c h d g 09 ;"
I0123 13:17:18.799935 139631495815168 alphageometry.py:567] Translation: "h = on_pline h d c g, on_pline h c d g"

I0123 13:17:18.799968 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_pline h d c g, on_pline h c d g ? simtri d b f e a f"
I0123 13:17:18.800078 139631495815168 graph.py:498] 
I0123 13:17:18.800123 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_pline h d c g, on_pline h c d g ? simtri d b f e a f
I0123 13:17:18.996501 139631495815168 ddar.py:60] Depth 1/1000 time = 0.16998028755187988
I0123 13:17:19.373567 139631495815168 ddar.py:60] Depth 2/1000 time = 0.37697601318359375
I0123 13:17:19.891335 139631495815168 ddar.py:60] Depth 3/1000 time = 0.5176701545715332
I0123 13:17:20.433670 139631495815168 ddar.py:60] Depth 4/1000 time = 0.542168140411377
I0123 13:17:21.365976 139631495815168 ddar.py:60] Depth 5/1000 time = 0.9321169853210449
I0123 13:17:21.919629 139631495815168 ddar.py:60] Depth 6/1000 time = 0.5420360565185547
I0123 13:17:21.919988 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:17:21.920037 139631495815168 alphageometry.py:566] LM output (score=-2.111558): "h : C c e h 08 T c e g h 09 ;"
I0123 13:17:21.920071 139631495815168 alphageometry.py:567] Translation: "h = on_line h c e, on_tline h g c e"

I0123 13:17:21.920106 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_line h c e, on_tline h g c e ? simtri d b f e a f"
I0123 13:17:21.920224 139631495815168 graph.py:498] 
I0123 13:17:21.920270 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_line h c e, on_tline h g c e ? simtri d b f e a f
I0123 13:17:22.084067 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1434159278869629
I0123 13:17:22.484499 139631495815168 ddar.py:60] Depth 2/1000 time = 0.40033817291259766
I0123 13:17:23.224572 139631495815168 ddar.py:60] Depth 3/1000 time = 0.7399718761444092
I0123 13:17:24.087990 139631495815168 ddar.py:60] Depth 4/1000 time = 0.8632388114929199
I0123 13:17:24.954185 139631495815168 ddar.py:60] Depth 5/1000 time = 0.8660213947296143
I0123 13:17:25.845366 139631495815168 ddar.py:60] Depth 6/1000 time = 0.8741159439086914
I0123 13:17:25.845749 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:17:25.845796 139631495815168 alphageometry.py:566] LM output (score=-2.151712): "h : P b g g h 08 P c d c h 09 ;"
I0123 13:17:25.845830 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b g g h"

I0123 13:17:25.845863 139631495815168 alphageometry.py:566] LM output (score=-2.175638): "h : P c d g h 08 P c h g d 09 ;"
I0123 13:17:25.845890 139631495815168 alphageometry.py:567] Translation: "h = on_pline h g c d, on_pline h c g d"

I0123 13:17:25.845920 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_pline h g c d, on_pline h c g d ? simtri d b f e a f"
I0123 13:17:25.846045 139631495815168 graph.py:498] 
I0123 13:17:25.846091 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_pline h g c d, on_pline h c g d ? simtri d b f e a f
I0123 13:17:26.046515 139631495815168 ddar.py:60] Depth 1/1000 time = 0.17241859436035156
I0123 13:17:26.424044 139631495815168 ddar.py:60] Depth 2/1000 time = 0.3774425983428955
I0123 13:17:26.947953 139631495815168 ddar.py:60] Depth 3/1000 time = 0.5238165855407715
I0123 13:17:27.511275 139631495815168 ddar.py:60] Depth 4/1000 time = 0.5631654262542725
I0123 13:17:28.086202 139631495815168 ddar.py:60] Depth 5/1000 time = 0.5747730731964111
I0123 13:17:28.668591 139631495815168 ddar.py:60] Depth 6/1000 time = 0.5707705020904541
I0123 13:17:28.668896 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:17:28.668942 139631495815168 alphageometry.py:566] LM output (score=-2.349843): "h : P b g g h 08 T g e g h 09 ;"
I0123 13:17:28.668975 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b g g h"

I0123 13:17:28.669007 139631495815168 alphageometry.py:566] LM output (score=-2.413535): "h : C g e h 08 D g h e h 09 ;"
I0123 13:17:28.669035 139631495815168 alphageometry.py:567] Translation: "h = on_line h g e, on_bline h e g"

I0123 13:17:28.669065 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_line h g e, on_bline h e g ? simtri d b f e a f"
I0123 13:17:28.669178 139631495815168 graph.py:498] 
I0123 13:17:28.669224 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_line h g e, on_bline h e g ? simtri d b f e a f
I0123 13:17:28.814374 139631495815168 ddar.py:60] Depth 1/1000 time = 0.13003945350646973
I0123 13:17:29.537399 139631495815168 ddar.py:60] Depth 2/1000 time = 0.7229130268096924
I0123 13:17:29.919175 139631495815168 ddar.py:60] Depth 3/1000 time = 0.3816065788269043
I0123 13:17:30.348067 139631495815168 ddar.py:60] Depth 4/1000 time = 0.42873311042785645
I0123 13:17:30.782199 139631495815168 ddar.py:60] Depth 5/1000 time = 0.4339754581451416
I0123 13:17:31.216268 139631495815168 ddar.py:60] Depth 6/1000 time = 0.43349170684814453
I0123 13:17:31.668000 139631495815168 ddar.py:60] Depth 7/1000 time = 0.44385504722595215
I0123 13:17:31.668306 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:17:31.668351 139631495815168 alphageometry.py:566] LM output (score=-2.418676): "h : C c e h 08 P a b g h 09 ;"
I0123 13:17:31.668385 139631495815168 alphageometry.py:567] Translation: "h = on_line h c e, on_pline h g a b"

I0123 13:17:31.668421 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_line h c e, on_pline h g a b ? simtri d b f e a f"
I0123 13:17:31.668534 139631495815168 graph.py:498] 
I0123 13:17:31.668581 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_line h c e, on_pline h g a b ? simtri d b f e a f
I0123 13:17:31.850052 139631495815168 ddar.py:60] Depth 1/1000 time = 0.16227149963378906
I0123 13:17:32.252840 139631495815168 ddar.py:60] Depth 2/1000 time = 0.40269994735717773
I0123 13:17:32.828272 139631495815168 ddar.py:60] Depth 3/1000 time = 0.5753357410430908
I0123 13:17:33.463075 139631495815168 ddar.py:60] Depth 4/1000 time = 0.6346426010131836
I0123 13:17:34.107604 139631495815168 ddar.py:60] Depth 5/1000 time = 0.6443626880645752
I0123 13:17:35.183716 139631495815168 ddar.py:60] Depth 6/1000 time = 1.0588042736053467
I0123 13:17:35.184128 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:17:35.184188 139631495815168 alphageometry.py:566] LM output (score=-2.424359): "h : P a g b h 08 P a h b g 09 ;"
I0123 13:17:35.184224 139631495815168 alphageometry.py:567] Translation: "h = on_pline h b a g, on_pline h a b g"

I0123 13:17:35.184260 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_pline h b a g, on_pline h a b g ? simtri d b f e a f"
I0123 13:17:35.184379 139631495815168 graph.py:498] 
I0123 13:17:35.184425 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_pline h b a g, on_pline h a b g ? simtri d b f e a f
I0123 13:17:35.394378 139631495815168 ddar.py:60] Depth 1/1000 time = 0.18382048606872559
I0123 13:17:35.876331 139631495815168 ddar.py:60] Depth 2/1000 time = 0.4818544387817383
I0123 13:17:36.574681 139631495815168 ddar.py:60] Depth 3/1000 time = 0.6982495784759521
I0123 13:17:37.420303 139631495815168 ddar.py:60] Depth 4/1000 time = 0.8454470634460449
I0123 13:17:38.270239 139631495815168 ddar.py:60] Depth 5/1000 time = 0.849769115447998
I0123 13:17:39.123392 139631495815168 ddar.py:60] Depth 6/1000 time = 0.8524460792541504
I0123 13:17:39.135946 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:17:39.135998 139631495815168 alphageometry.py:566] LM output (score=-2.488109): "h : C c e h 08 P b g d h 09 ;"
I0123 13:17:39.136031 139631495815168 alphageometry.py:567] Translation: "h = on_line h c e, on_pline h d b g"

I0123 13:17:39.136065 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_line h c e, on_pline h d b g ? simtri d b f e a f"
I0123 13:17:39.136178 139631495815168 graph.py:498] 
I0123 13:17:39.136223 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_line h c e, on_pline h d b g ? simtri d b f e a f
I0123 13:17:39.307014 139631495815168 ddar.py:60] Depth 1/1000 time = 0.15012836456298828
I0123 13:17:39.609304 139631495815168 ddar.py:60] Depth 2/1000 time = 0.3021996021270752
I0123 13:17:39.986444 139631495815168 ddar.py:60] Depth 3/1000 time = 0.37705087661743164
I0123 13:17:40.414769 139631495815168 ddar.py:60] Depth 4/1000 time = 0.42817020416259766
I0123 13:17:40.844278 139631495815168 ddar.py:60] Depth 5/1000 time = 0.42935657501220703
I0123 13:17:41.288741 139631495815168 ddar.py:60] Depth 6/1000 time = 0.43532800674438477
I0123 13:17:41.289044 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:17:41.289088 139631495815168 alphageometry.py:566] LM output (score=-2.584011): "h : P c g g h 08 P d e d h 09 ;"
I0123 13:17:41.289120 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c g g h"

I0123 13:17:41.289153 139631495815168 alphageometry.py:566] LM output (score=-2.589773): "h : P b g b h 08 P c d c h 09 ;"
I0123 13:17:41.289181 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b g b h"

I0123 13:17:41.289209 139631495815168 alphageometry.py:566] LM output (score=-2.608431): "h : C d g h 08 D d g d h 09 ;"
I0123 13:17:41.289235 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 13:17:41.289279 139631495815168 alphageometry.py:566] LM output (score=-2.608716): "h : C d e h 08 D d h e h 09 ;"
I0123 13:17:41.289307 139631495815168 alphageometry.py:567] Translation: "h = on_line h d e, on_bline h e d"

I0123 13:17:41.289337 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_line h d e, on_bline h e d ? simtri d b f e a f"
I0123 13:17:41.289445 139631495815168 graph.py:498] 
I0123 13:17:41.289489 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_line h d e, on_bline h e d ? simtri d b f e a f
I0123 13:17:41.436055 139631495815168 ddar.py:60] Depth 1/1000 time = 0.13164329528808594
I0123 13:17:41.702451 139631495815168 ddar.py:60] Depth 2/1000 time = 0.26630401611328125
I0123 13:17:42.589375 139631495815168 ddar.py:60] Depth 3/1000 time = 0.8868153095245361
I0123 13:17:43.176752 139631495815168 ddar.py:60] Depth 4/1000 time = 0.5871362686157227
I0123 13:17:44.258343 139631495815168 ddar.py:60] Depth 5/1000 time = 1.0813641548156738
I0123 13:17:44.948396 139631495815168 ddar.py:60] Depth 6/1000 time = 0.6898095607757568
I0123 13:17:45.635624 139631495815168 ddar.py:60] Depth 7/1000 time = 0.6865708827972412
I0123 13:17:46.784330 139631495815168 ddar.py:60] Depth 8/1000 time = 1.138040542602539
I0123 13:17:47.505468 139631495815168 ddar.py:60] Depth 9/1000 time = 0.7172393798828125
I0123 13:17:47.505967 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:17:47.506048 139631495815168 alphageometry.py:566] LM output (score=-2.611929): "h : P c g c h 08 P d e d h 09 ;"
I0123 13:17:47.506086 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c g c h"

I0123 13:17:47.506128 139631495815168 alphageometry.py:566] LM output (score=-2.640490): "h : C b c h 08 D b h c h 09 ;"
I0123 13:17:47.506156 139631495815168 alphageometry.py:567] Translation: "h = on_line h b c, on_bline h c b"

I0123 13:17:47.506189 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_line h b c, on_bline h c b ? simtri d b f e a f"
I0123 13:17:47.506325 139631495815168 graph.py:498] 
I0123 13:17:47.506376 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_line h b c, on_bline h c b ? simtri d b f e a f
I0123 13:17:47.684988 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1621246337890625
I0123 13:17:48.127042 139631495815168 ddar.py:60] Depth 2/1000 time = 0.44195556640625
I0123 13:17:49.128296 139631495815168 ddar.py:60] Depth 3/1000 time = 1.0011067390441895
I0123 13:17:50.191738 139631495815168 ddar.py:60] Depth 4/1000 time = 1.0631771087646484
I0123 13:17:50.815376 139631495815168 ddar.py:60] Depth 5/1000 time = 0.6233956813812256
I0123 13:17:51.865926 139631495815168 ddar.py:60] Depth 6/1000 time = 1.0498619079589844
I0123 13:17:52.500217 139631495815168 ddar.py:60] Depth 7/1000 time = 0.6269261837005615
I0123 13:17:53.569000 139631495815168 ddar.py:60] Depth 8/1000 time = 1.0652084350585938
I0123 13:17:53.569396 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:17:53.569447 139631495815168 alphageometry.py:566] LM output (score=-2.649530): "h : D d g e h 08 P d g e h 09 ;"
I0123 13:17:53.569482 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 13:17:53.569532 139631495815168 alphageometry.py:566] LM output (score=-2.651337): "h : P c d g h 08 P c h d g 09 ;"
I0123 13:17:53.569565 139631495815168 alphageometry.py:567] Translation: "h = on_pline h g c d, on_pline h c d g"

I0123 13:17:53.569598 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_pline h g c d, on_pline h c d g ? simtri d b f e a f"
I0123 13:17:53.569731 139631495815168 graph.py:498] 
I0123 13:17:53.569779 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_pline h g c d, on_pline h c d g ? simtri d b f e a f
I0123 13:17:53.769168 139631495815168 ddar.py:60] Depth 1/1000 time = 0.17191791534423828
I0123 13:17:54.151818 139631495815168 ddar.py:60] Depth 2/1000 time = 0.38255977630615234
I0123 13:17:54.676681 139631495815168 ddar.py:60] Depth 3/1000 time = 0.5247697830200195
I0123 13:17:55.246738 139631495815168 ddar.py:60] Depth 4/1000 time = 0.5699000358581543
I0123 13:17:55.819889 139631495815168 ddar.py:60] Depth 5/1000 time = 0.5729982852935791
I0123 13:17:56.411347 139631495815168 ddar.py:60] Depth 6/1000 time = 0.5806777477264404
I0123 13:17:56.411654 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:17:56.411700 139631495815168 alphageometry.py:566] LM output (score=-2.671375): "h : P a c g h 08 P a g c h 09 ;"
I0123 13:17:56.411734 139631495815168 alphageometry.py:567] Translation: "h = on_pline h g a c, on_pline h c a g"

I0123 13:17:56.411768 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_pline h g a c, on_pline h c a g ? simtri d b f e a f"
I0123 13:17:56.411880 139631495815168 graph.py:498] 
I0123 13:17:56.411923 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_pline h g a c, on_pline h c a g ? simtri d b f e a f
I0123 13:17:56.619571 139631495815168 ddar.py:60] Depth 1/1000 time = 0.18193292617797852
I0123 13:17:57.081556 139631495815168 ddar.py:60] Depth 2/1000 time = 0.4618949890136719
I0123 13:17:57.717684 139631495815168 ddar.py:60] Depth 3/1000 time = 0.6360344886779785
I0123 13:17:58.421632 139631495815168 ddar.py:60] Depth 4/1000 time = 0.7037773132324219
I0123 13:17:59.124722 139631495815168 ddar.py:60] Depth 5/1000 time = 0.7029237747192383
I0123 13:18:00.273354 139631495815168 ddar.py:60] Depth 6/1000 time = 1.137629747390747
I0123 13:18:00.273778 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:18:00.273836 139631495815168 alphageometry.py:566] LM output (score=-2.677459): "h : P c g g h 08 P d f d h 09 ;"
I0123 13:18:00.273871 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c g g h"

I0123 13:18:00.273904 139631495815168 alphageometry.py:566] LM output (score=-2.719063): "h : P b g b h 08 T b g c h 09 ;"
I0123 13:18:00.273931 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b g b h"

I0123 13:18:00.273958 139631495815168 alphageometry.py:566] LM output (score=-2.719585): "h : C c e h 08 P b g f h 09 ;"
I0123 13:18:00.273982 139631495815168 alphageometry.py:567] Translation: "h = on_line h c e, on_pline h f b g"

I0123 13:18:00.274010 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_line h c e, on_pline h f b g ? simtri d b f e a f"
I0123 13:18:00.274142 139631495815168 graph.py:498] 
I0123 13:18:00.274188 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_line h c e, on_pline h f b g ? simtri d b f e a f
I0123 13:18:00.446525 139631495815168 ddar.py:60] Depth 1/1000 time = 0.15195441246032715
I0123 13:18:00.731477 139631495815168 ddar.py:60] Depth 2/1000 time = 0.2848551273345947
I0123 13:18:01.097056 139631495815168 ddar.py:60] Depth 3/1000 time = 0.36548852920532227
I0123 13:18:01.514766 139631495815168 ddar.py:60] Depth 4/1000 time = 0.41755223274230957
I0123 13:18:01.934138 139631495815168 ddar.py:60] Depth 5/1000 time = 0.41922545433044434
I0123 13:18:02.381925 139631495815168 ddar.py:60] Depth 6/1000 time = 0.43958449363708496
I0123 13:18:02.887200 139631495815168 ddar.py:60] Depth 7/1000 time = 0.5051190853118896
I0123 13:18:03.404881 139631495815168 ddar.py:60] Depth 8/1000 time = 0.5175087451934814
I0123 13:18:03.933602 139631495815168 ddar.py:60] Depth 9/1000 time = 0.5285708904266357
I0123 13:18:04.481142 139631495815168 ddar.py:60] Depth 10/1000 time = 0.544499397277832
I0123 13:18:04.484801 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:18:04.484859 139631495815168 alphageometry.py:566] LM output (score=-2.724453): "h : P c g g h 08 P d g g h 09 ;"
I0123 13:18:04.484894 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c g g h"

I0123 13:18:04.484929 139631495815168 alphageometry.py:566] LM output (score=-2.744088): "h : C a g h 08 D a h g h 09 ;"
I0123 13:18:04.484958 139631495815168 alphageometry.py:567] Translation: "h = on_line h a g, on_bline h g a"

I0123 13:18:04.484989 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_line h a g, on_bline h g a ? simtri d b f e a f"
I0123 13:18:04.485107 139631495815168 graph.py:498] 
I0123 13:18:04.485156 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_line h a g, on_bline h g a ? simtri d b f e a f
I0123 13:18:04.658486 139631495815168 ddar.py:60] Depth 1/1000 time = 0.15823626518249512
I0123 13:18:04.997758 139631495815168 ddar.py:60] Depth 2/1000 time = 0.3391838073730469
I0123 13:18:05.480261 139631495815168 ddar.py:60] Depth 3/1000 time = 0.4824099540710449
I0123 13:18:06.034177 139631495815168 ddar.py:60] Depth 4/1000 time = 0.5537371635437012
I0123 13:18:07.073506 139631495815168 ddar.py:60] Depth 5/1000 time = 1.0391242504119873
I0123 13:18:07.625350 139631495815168 ddar.py:60] Depth 6/1000 time = 0.5511231422424316
I0123 13:18:08.199652 139631495815168 ddar.py:60] Depth 7/1000 time = 0.5633015632629395
I0123 13:18:08.200007 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:18:08.200060 139631495815168 alphageometry.py:566] LM output (score=-2.770427): "h : C a c h 08 D a h c h 09 ;"
I0123 13:18:08.200095 139631495815168 alphageometry.py:567] Translation: "h = on_line h a c, on_bline h c a"

I0123 13:18:08.200132 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_line h a c, on_bline h c a ? simtri d b f e a f"
I0123 13:18:08.200256 139631495815168 graph.py:498] 
I0123 13:18:08.200308 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g d a b, on_pline g a b d; h = on_line h a c, on_bline h c a ? simtri d b f e a f
I0123 13:18:08.383602 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1672816276550293
I0123 13:18:08.852253 139631495815168 ddar.py:60] Depth 2/1000 time = 0.4685516357421875
I0123 13:18:09.891307 139631495815168 ddar.py:60] Depth 3/1000 time = 1.0389032363891602
I0123 13:18:10.558796 139631495815168 ddar.py:60] Depth 4/1000 time = 0.6672532558441162
I0123 13:18:11.666208 139631495815168 ddar.py:60] Depth 5/1000 time = 1.1071712970733643
I0123 13:18:12.326072 139631495815168 ddar.py:60] Depth 6/1000 time = 0.6591765880584717
I0123 13:18:13.436496 139631495815168 ddar.py:60] Depth 7/1000 time = 1.1012885570526123
I0123 13:18:13.436872 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:18:13.436922 139631495815168 alphageometry.py:566] LM output (score=-2.819355): "h : P c g g h 08 P d a d h 09 ;"
I0123 13:18:13.436955 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c g g h"

I0123 13:18:13.436988 139631495815168 alphageometry.py:566] LM output (score=-2.824602): "h : P b g g h 08 T b g d h 09 ;"
I0123 13:18:13.437015 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b g g h"

I0123 13:18:13.437042 139631495815168 alphageometry.py:566] LM output (score=-2.838247): "h : P c g g h 08 P d e e h 09 ;"
I0123 13:18:13.437068 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c g g h"

I0123 13:18:13.437099 139631495815168 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C a c d 00 T a b b d 01 ; e : C b c e 02 T a b a e 03 ; f : C a b f 04 T a b c f 05 ? S d b f e a f {F1} x00 g : P c g a b 06 ; x00
I0123 13:18:17.427512 139631495815168 alphageometry.py:566] LM output (score=-0.810025): "h : C c a h 07 C c g h 08 ;"
I0123 13:18:17.427643 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 13:18:17.427681 139631495815168 alphageometry.py:566] LM output (score=-1.234585): "h : C c g h 07 T c g a h 08 ;"
I0123 13:18:17.427711 139631495815168 alphageometry.py:567] Translation: "h = on_line h c g, on_tline h a c g"

I0123 13:18:17.427741 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_line h c g, on_tline h a c g ? simtri d b f e a f"
I0123 13:18:17.427842 139631495815168 graph.py:498] 
I0123 13:18:17.427885 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_line h c g, on_tline h a c g ? simtri d b f e a f
I0123 13:18:17.580159 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1372847557067871
I0123 13:18:17.859945 139631495815168 ddar.py:60] Depth 2/1000 time = 0.27969884872436523
I0123 13:18:18.217474 139631495815168 ddar.py:60] Depth 3/1000 time = 0.3574395179748535
I0123 13:18:18.635344 139631495815168 ddar.py:60] Depth 4/1000 time = 0.4177207946777344
I0123 13:18:19.060034 139631495815168 ddar.py:60] Depth 5/1000 time = 0.4245460033416748
I0123 13:18:19.068893 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:18:19.068942 139631495815168 alphageometry.py:566] LM output (score=-1.422246): "h : C c a h 07 D c h a h 08 ;"
I0123 13:18:19.068975 139631495815168 alphageometry.py:567] Translation: "h = on_line h c a, on_bline h a c"

I0123 13:18:19.069010 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_line h c a, on_bline h a c ? simtri d b f e a f"
I0123 13:18:19.069116 139631495815168 graph.py:498] 
I0123 13:18:19.069161 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_line h c a, on_bline h a c ? simtri d b f e a f
I0123 13:18:19.195585 139631495815168 ddar.py:60] Depth 1/1000 time = 0.11484766006469727
I0123 13:18:19.457081 139631495815168 ddar.py:60] Depth 2/1000 time = 0.26140856742858887
I0123 13:18:20.182205 139631495815168 ddar.py:60] Depth 3/1000 time = 0.7250158786773682
I0123 13:18:20.517487 139631495815168 ddar.py:60] Depth 4/1000 time = 0.3350660800933838
I0123 13:18:20.855658 139631495815168 ddar.py:60] Depth 5/1000 time = 0.3380095958709717
I0123 13:18:21.630857 139631495815168 ddar.py:60] Depth 6/1000 time = 0.7746732234954834
I0123 13:18:21.982209 139631495815168 ddar.py:60] Depth 7/1000 time = 0.347015380859375
I0123 13:18:21.982527 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:18:21.982582 139631495815168 alphageometry.py:566] LM output (score=-1.568156): "h : C c g h 07 T c g b h 08 ;"
I0123 13:18:21.982616 139631495815168 alphageometry.py:567] Translation: "h = on_line h c g, on_tline h b c g"

I0123 13:18:21.982652 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_line h c g, on_tline h b c g ? simtri d b f e a f"
I0123 13:18:21.982766 139631495815168 graph.py:498] 
I0123 13:18:21.982812 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_line h c g, on_tline h b c g ? simtri d b f e a f
I0123 13:18:22.161237 139631495815168 ddar.py:60] Depth 1/1000 time = 0.16739749908447266
I0123 13:18:22.466179 139631495815168 ddar.py:60] Depth 2/1000 time = 0.30484652519226074
I0123 13:18:22.828191 139631495815168 ddar.py:60] Depth 3/1000 time = 0.36191630363464355
I0123 13:18:23.263633 139631495815168 ddar.py:60] Depth 4/1000 time = 0.4352898597717285
I0123 13:18:23.701740 139631495815168 ddar.py:60] Depth 5/1000 time = 0.43796396255493164
I0123 13:18:23.709501 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:18:23.709552 139631495815168 alphageometry.py:566] LM output (score=-1.956558): "h : C c g h 07 C a e h 08 ;"
I0123 13:18:23.709586 139631495815168 alphageometry.py:567] Translation: "h = on_line h c g, on_line h a e"

I0123 13:18:23.709620 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_line h c g, on_line h a e ? simtri d b f e a f"
I0123 13:18:23.709734 139631495815168 graph.py:498] 
I0123 13:18:23.709782 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_line h c g, on_line h a e ? simtri d b f e a f
I0123 13:18:23.888537 139631495815168 ddar.py:60] Depth 1/1000 time = 0.16859221458435059
I0123 13:18:24.220131 139631495815168 ddar.py:60] Depth 2/1000 time = 0.33150720596313477
I0123 13:18:24.587402 139631495815168 ddar.py:60] Depth 3/1000 time = 0.36718201637268066
I0123 13:18:25.027881 139631495815168 ddar.py:60] Depth 4/1000 time = 0.44033193588256836
I0123 13:18:25.476165 139631495815168 ddar.py:60] Depth 5/1000 time = 0.44814205169677734
I0123 13:18:25.483585 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:18:25.483634 139631495815168 alphageometry.py:566] LM output (score=-2.116178): "h : C c g h 07 T c g e h 08 ;"
I0123 13:18:25.483668 139631495815168 alphageometry.py:567] Translation: "h = on_line h c g, on_tline h e c g"

I0123 13:18:25.483702 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_line h c g, on_tline h e c g ? simtri d b f e a f"
I0123 13:18:25.483808 139631495815168 graph.py:498] 
I0123 13:18:25.483853 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_line h c g, on_tline h e c g ? simtri d b f e a f
I0123 13:18:25.623043 139631495815168 ddar.py:60] Depth 1/1000 time = 0.125687837600708
I0123 13:18:25.864019 139631495815168 ddar.py:60] Depth 2/1000 time = 0.2408909797668457
I0123 13:18:26.191711 139631495815168 ddar.py:60] Depth 3/1000 time = 0.3276069164276123
I0123 13:18:26.641488 139631495815168 ddar.py:60] Depth 4/1000 time = 0.4496314525604248
I0123 13:18:27.088019 139631495815168 ddar.py:60] Depth 5/1000 time = 0.4463839530944824
I0123 13:18:27.097690 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:18:27.097738 139631495815168 alphageometry.py:566] LM output (score=-2.161476): "h : C c e h 07 P c g c h 08 ;"
I0123 13:18:27.097773 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c g c h"

I0123 13:18:27.097804 139631495815168 alphageometry.py:566] LM output (score=-2.166221): "h : C c e h 07 P g h a d 08 ;"
I0123 13:18:27.097832 139631495815168 alphageometry.py:567] Translation: "h = on_line h c e, on_pline h g a d"

I0123 13:18:27.097862 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_line h c e, on_pline h g a d ? simtri d b f e a f"
I0123 13:18:27.097963 139631495815168 graph.py:498] 
I0123 13:18:27.098007 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_line h c e, on_pline h g a d ? simtri d b f e a f
I0123 13:18:27.227388 139631495815168 ddar.py:60] Depth 1/1000 time = 0.11458039283752441
I0123 13:18:27.819841 139631495815168 ddar.py:60] Depth 2/1000 time = 0.5923519134521484
I0123 13:18:27.984859 139631495815168 ddar.py:60] Depth 3/1000 time = 0.16484308242797852
I0123 13:18:28.181867 139631495815168 ddar.py:60] Depth 4/1000 time = 0.19683027267456055
I0123 13:18:28.381508 139631495815168 ddar.py:60] Depth 5/1000 time = 0.19949769973754883
I0123 13:18:28.384645 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:18:28.384695 139631495815168 alphageometry.py:566] LM output (score=-2.167338): "h : C c e h 07 P c g b h 08 ;"
I0123 13:18:28.384729 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 13:18:28.384763 139631495815168 alphageometry.py:566] LM output (score=-2.172180): "h : D c f c h 07 D g f g h 08 ;"
I0123 13:18:28.384790 139631495815168 alphageometry.py:567] Translation: "h = on_circle h c f, on_circle h g f"

I0123 13:18:28.384821 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_circle h c f, on_circle h g f ? simtri d b f e a f"
I0123 13:18:28.384926 139631495815168 graph.py:498] 
I0123 13:18:28.384970 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_circle h c f, on_circle h g f ? simtri d b f e a f
I0123 13:18:28.513331 139631495815168 ddar.py:60] Depth 1/1000 time = 0.11545252799987793
I0123 13:18:28.701870 139631495815168 ddar.py:60] Depth 2/1000 time = 0.18845415115356445
I0123 13:18:28.938019 139631495815168 ddar.py:60] Depth 3/1000 time = 0.2360672950744629
I0123 13:18:29.271675 139631495815168 ddar.py:60] Depth 4/1000 time = 0.3334987163543701
I0123 13:18:29.614620 139631495815168 ddar.py:60] Depth 5/1000 time = 0.3427882194519043
I0123 13:18:29.962054 139631495815168 ddar.py:60] Depth 6/1000 time = 0.347278356552124
I0123 13:18:30.324296 139631495815168 ddar.py:60] Depth 7/1000 time = 0.35187768936157227
I0123 13:18:30.324615 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:18:30.324658 139631495815168 alphageometry.py:566] LM output (score=-2.287446): "h : C c b h 07 D c h b h 08 ;"
I0123 13:18:30.324691 139631495815168 alphageometry.py:567] Translation: "h = on_line h c b, on_bline h b c"

I0123 13:18:30.324724 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_line h c b, on_bline h b c ? simtri d b f e a f"
I0123 13:18:30.324832 139631495815168 graph.py:498] 
I0123 13:18:30.324876 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_line h c b, on_bline h b c ? simtri d b f e a f
I0123 13:18:30.450125 139631495815168 ddar.py:60] Depth 1/1000 time = 0.11417627334594727
I0123 13:18:30.710739 139631495815168 ddar.py:60] Depth 2/1000 time = 0.260526180267334
I0123 13:18:31.003679 139631495815168 ddar.py:60] Depth 3/1000 time = 0.2928433418273926
I0123 13:18:31.795249 139631495815168 ddar.py:60] Depth 4/1000 time = 0.7913970947265625
I0123 13:18:32.130614 139631495815168 ddar.py:60] Depth 5/1000 time = 0.3351449966430664
I0123 13:18:32.461649 139631495815168 ddar.py:60] Depth 6/1000 time = 0.3305239677429199
I0123 13:18:32.808602 139631495815168 ddar.py:60] Depth 7/1000 time = 0.34273862838745117
I0123 13:18:32.808881 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:18:32.808928 139631495815168 alphageometry.py:566] LM output (score=-2.303186): "h : C c a h 07 P c g a h 08 ;"
I0123 13:18:32.808961 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 13:18:32.808995 139631495815168 alphageometry.py:566] LM output (score=-2.358440): "h : C c e h 07 P c g e h 08 ;"
I0123 13:18:32.809023 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 13:18:32.809051 139631495815168 alphageometry.py:566] LM output (score=-2.361631): "h : C c e h 07 C c g h 08 ;"
I0123 13:18:32.809076 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 13:18:32.809102 139631495815168 alphageometry.py:566] LM output (score=-2.370690): "h : D c g a h 07 D c h a g 08 ;"
I0123 13:18:32.809128 139631495815168 alphageometry.py:567] Translation: "h = eqdistance h a c g, eqdistance h c a g"

I0123 13:18:32.809156 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = eqdistance h a c g, eqdistance h c a g ? simtri d b f e a f"
I0123 13:18:32.809265 139631495815168 graph.py:498] 
I0123 13:18:32.809309 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = eqdistance h a c g, eqdistance h c a g ? simtri d b f e a f
I0123 13:18:33.372533 139631495815168 ddar.py:60] Depth 1/1000 time = 0.548947811126709
I0123 13:18:33.519165 139631495815168 ddar.py:60] Depth 2/1000 time = 0.14646601676940918
I0123 13:18:33.695205 139631495815168 ddar.py:60] Depth 3/1000 time = 0.17595696449279785
I0123 13:18:33.926807 139631495815168 ddar.py:60] Depth 4/1000 time = 0.2314591407775879
I0123 13:18:34.161253 139631495815168 ddar.py:60] Depth 5/1000 time = 0.23430919647216797
I0123 13:18:34.165794 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:18:34.165843 139631495815168 alphageometry.py:566] LM output (score=-2.373771): "h : D c b c h 07 ;"
I0123 13:18:34.165877 139631495815168 alphageometry.py:567] Translation: "h = on_circle h c b"

I0123 13:18:34.165911 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_circle h c b ? simtri d b f e a f"
I0123 13:18:34.166012 139631495815168 graph.py:498] 
I0123 13:18:34.166057 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_circle h c b ? simtri d b f e a f
I0123 13:18:34.260466 139631495815168 ddar.py:60] Depth 1/1000 time = 0.08422565460205078
I0123 13:18:34.363129 139631495815168 ddar.py:60] Depth 2/1000 time = 0.10258030891418457
I0123 13:18:34.478711 139631495815168 ddar.py:60] Depth 3/1000 time = 0.11550235748291016
I0123 13:18:34.630382 139631495815168 ddar.py:60] Depth 4/1000 time = 0.15153837203979492
I0123 13:18:34.777335 139631495815168 ddar.py:60] Depth 5/1000 time = 0.14682435989379883
I0123 13:18:34.781514 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:18:34.781561 139631495815168 alphageometry.py:566] LM output (score=-2.459406): "h : C c b h 07 C c g h 08 ;"
I0123 13:18:34.781594 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 13:18:34.781625 139631495815168 alphageometry.py:566] LM output (score=-2.472997): "h : D c e c h 07 ;"
I0123 13:18:34.781662 139631495815168 alphageometry.py:567] Translation: "h = on_circle h c e"

I0123 13:18:34.781693 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_circle h c e ? simtri d b f e a f"
I0123 13:18:34.781791 139631495815168 graph.py:498] 
I0123 13:18:34.781835 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_circle h c e ? simtri d b f e a f
I0123 13:18:34.874433 139631495815168 ddar.py:60] Depth 1/1000 time = 0.08242154121398926
I0123 13:18:34.976963 139631495815168 ddar.py:60] Depth 2/1000 time = 0.1024470329284668
I0123 13:18:35.093138 139631495815168 ddar.py:60] Depth 3/1000 time = 0.11609649658203125
I0123 13:18:35.238715 139631495815168 ddar.py:60] Depth 4/1000 time = 0.14544296264648438
I0123 13:18:35.384667 139631495815168 ddar.py:60] Depth 5/1000 time = 0.14582610130310059
I0123 13:18:35.388142 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:18:35.388188 139631495815168 alphageometry.py:566] LM output (score=-2.493910): "h : C c e h 07 P g h a b 08 ;"
I0123 13:18:35.388222 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 13:18:35.388262 139631495815168 alphageometry.py:566] LM output (score=-2.522649): "h : T c g c h 07 ;"
I0123 13:18:35.388291 139631495815168 alphageometry.py:567] Translation: "h = on_tline h c c g"

I0123 13:18:35.388321 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_tline h c c g ? simtri d b f e a f"
I0123 13:18:35.388418 139631495815168 graph.py:498] 
I0123 13:18:35.388460 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_tline h c c g ? simtri d b f e a f
I0123 13:18:35.479545 139631495815168 ddar.py:60] Depth 1/1000 time = 0.07725954055786133
I0123 13:18:35.602119 139631495815168 ddar.py:60] Depth 2/1000 time = 0.12248826026916504
I0123 13:18:35.737381 139631495815168 ddar.py:60] Depth 3/1000 time = 0.13518261909484863
I0123 13:18:35.905972 139631495815168 ddar.py:60] Depth 4/1000 time = 0.16845083236694336
I0123 13:18:36.078497 139631495815168 ddar.py:60] Depth 5/1000 time = 0.1723928451538086
I0123 13:18:36.081356 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:18:36.081400 139631495815168 alphageometry.py:566] LM output (score=-2.619333): "h : C c g h 07 C c d h 08 ;"
I0123 13:18:36.081433 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 13:18:36.081464 139631495815168 alphageometry.py:566] LM output (score=-2.633355): "h : D c b c h 07 D g b g h 08 ;"
I0123 13:18:36.081491 139631495815168 alphageometry.py:567] Translation: "h = on_circle h c b, on_circle h g b"

I0123 13:18:36.081520 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_circle h c b, on_circle h g b ? simtri d b f e a f"
I0123 13:18:36.081618 139631495815168 graph.py:498] 
I0123 13:18:36.081668 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_circle h c b, on_circle h g b ? simtri d b f e a f
I0123 13:18:36.212400 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1169748306274414
I0123 13:18:36.425924 139631495815168 ddar.py:60] Depth 2/1000 time = 0.2134413719177246
I0123 13:18:36.650364 139631495815168 ddar.py:60] Depth 3/1000 time = 0.22435784339904785
I0123 13:18:36.912380 139631495815168 ddar.py:60] Depth 4/1000 time = 0.26186490058898926
I0123 13:18:37.177520 139631495815168 ddar.py:60] Depth 5/1000 time = 0.26499390602111816
I0123 13:18:37.459105 139631495815168 ddar.py:60] Depth 6/1000 time = 0.2739288806915283
I0123 13:18:37.459400 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:18:37.459442 139631495815168 alphageometry.py:566] LM output (score=-2.640067): "h : C g e h 07 D g h e h 08 ;"
I0123 13:18:37.459475 139631495815168 alphageometry.py:567] Translation: "h = on_line h g e, on_bline h e g"

I0123 13:18:37.459508 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_line h g e, on_bline h e g ? simtri d b f e a f"
I0123 13:18:37.459610 139631495815168 graph.py:498] 
I0123 13:18:37.459652 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_line h g e, on_bline h e g ? simtri d b f e a f
I0123 13:18:37.556204 139631495815168 ddar.py:60] Depth 1/1000 time = 0.08561205863952637
I0123 13:18:37.670638 139631495815168 ddar.py:60] Depth 2/1000 time = 0.11435222625732422
I0123 13:18:37.795799 139631495815168 ddar.py:60] Depth 3/1000 time = 0.12508249282836914
I0123 13:18:37.949473 139631495815168 ddar.py:60] Depth 4/1000 time = 0.15354204177856445
I0123 13:18:38.106093 139631495815168 ddar.py:60] Depth 5/1000 time = 0.156494140625
I0123 13:18:38.271171 139631495815168 ddar.py:60] Depth 6/1000 time = 0.16462063789367676
I0123 13:18:38.274170 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:18:38.274226 139631495815168 alphageometry.py:566] LM output (score=-2.695728): "h : P c g b h 07 ;"
I0123 13:18:38.274261 139631495815168 alphageometry.py:567] Translation: "h = on_pline h b c g"

I0123 13:18:38.274293 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_pline h b c g ? simtri d b f e a f"
I0123 13:18:38.274390 139631495815168 graph.py:498] 
I0123 13:18:38.274433 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_pline h b c g ? simtri d b f e a f
I0123 13:18:38.370949 139631495815168 ddar.py:60] Depth 1/1000 time = 0.08222532272338867
I0123 13:18:38.515304 139631495815168 ddar.py:60] Depth 2/1000 time = 0.14427447319030762
I0123 13:18:38.672214 139631495815168 ddar.py:60] Depth 3/1000 time = 0.1568305492401123
I0123 13:18:38.862232 139631495815168 ddar.py:60] Depth 4/1000 time = 0.18988442420959473
I0123 13:18:39.052734 139631495815168 ddar.py:60] Depth 5/1000 time = 0.19037723541259766
I0123 13:18:39.055648 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:18:39.055693 139631495815168 alphageometry.py:566] LM output (score=-2.698228): "h : C g f h 07 D g h f h 08 ;"
I0123 13:18:39.055726 139631495815168 alphageometry.py:567] Translation: "h = on_line h g f, on_bline h f g"

I0123 13:18:39.055756 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_line h g f, on_bline h f g ? simtri d b f e a f"
I0123 13:18:39.055856 139631495815168 graph.py:498] 
I0123 13:18:39.055899 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_line h g f, on_bline h f g ? simtri d b f e a f
I0123 13:18:39.160774 139631495815168 ddar.py:60] Depth 1/1000 time = 0.09403848648071289
I0123 13:18:39.363755 139631495815168 ddar.py:60] Depth 2/1000 time = 0.2028970718383789
I0123 13:18:39.596661 139631495815168 ddar.py:60] Depth 3/1000 time = 0.23281526565551758
I0123 13:18:39.871620 139631495815168 ddar.py:60] Depth 4/1000 time = 0.27481865882873535
I0123 13:18:40.152792 139631495815168 ddar.py:60] Depth 5/1000 time = 0.2810330390930176
I0123 13:18:40.886650 139631495815168 ddar.py:60] Depth 6/1000 time = 0.7333476543426514
I0123 13:18:41.171767 139631495815168 ddar.py:60] Depth 7/1000 time = 0.280759334564209
I0123 13:18:41.172064 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:18:41.172113 139631495815168 alphageometry.py:566] LM output (score=-2.713327): "h : C c g h 07 T c g c h 08 ;"
I0123 13:18:41.172147 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 13:18:41.172182 139631495815168 alphageometry.py:566] LM output (score=-2.742875): "h : D c h g h 07 D g h f h 08 ;"
I0123 13:18:41.172227 139631495815168 alphageometry.py:567] Translation: "h = on_bline h g c, on_bline h f g"

I0123 13:18:41.172259 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_bline h g c, on_bline h f g ? simtri d b f e a f"
I0123 13:18:41.172371 139631495815168 graph.py:498] 
I0123 13:18:41.172416 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_bline h g c, on_bline h f g ? simtri d b f e a f
I0123 13:18:41.369421 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1763317584991455
I0123 13:18:41.580027 139631495815168 ddar.py:60] Depth 2/1000 time = 0.21051621437072754
I0123 13:18:41.785648 139631495815168 ddar.py:60] Depth 3/1000 time = 0.20552778244018555
I0123 13:18:42.035090 139631495815168 ddar.py:60] Depth 4/1000 time = 0.2492976188659668
I0123 13:18:42.284671 139631495815168 ddar.py:60] Depth 5/1000 time = 0.24943327903747559
I0123 13:18:42.578376 139631495815168 ddar.py:60] Depth 6/1000 time = 0.29329371452331543
I0123 13:18:43.317677 139631495815168 ddar.py:60] Depth 7/1000 time = 0.7391359806060791
I0123 13:18:43.611934 139631495815168 ddar.py:60] Depth 8/1000 time = 0.2891244888305664
I0123 13:18:43.612239 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:18:43.612287 139631495815168 alphageometry.py:566] LM output (score=-2.748755): "h : C c g h 07 T c g d h 08 ;"
I0123 13:18:43.612321 139631495815168 alphageometry.py:567] Translation: "h = on_line h c g, on_tline h d c g"

I0123 13:18:43.612356 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_line h c g, on_tline h d c g ? simtri d b f e a f"
I0123 13:18:43.612468 139631495815168 graph.py:498] 
I0123 13:18:43.612513 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_line h c g, on_tline h d c g ? simtri d b f e a f
I0123 13:18:43.788313 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1656970977783203
I0123 13:18:44.090787 139631495815168 ddar.py:60] Depth 2/1000 time = 0.3023824691772461
I0123 13:18:44.453357 139631495815168 ddar.py:60] Depth 3/1000 time = 0.36248254776000977
I0123 13:18:44.888394 139631495815168 ddar.py:60] Depth 4/1000 time = 0.4348914623260498
I0123 13:18:45.320017 139631495815168 ddar.py:60] Depth 5/1000 time = 0.43148064613342285
I0123 13:18:45.327665 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:18:45.327715 139631495815168 alphageometry.py:566] LM output (score=-2.762909): "h : D c b c h 07 D b g g h 08 ;"
I0123 13:18:45.327749 139631495815168 alphageometry.py:567] Translation: "h = on_circle h c b, on_circle h g b"

I0123 13:18:45.327783 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_circle h c b, on_circle h g b ? simtri d b f e a f"
I0123 13:18:45.327887 139631495815168 graph.py:498] 
I0123 13:18:45.327931 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_circle h c b, on_circle h g b ? simtri d b f e a f
I0123 13:18:45.458256 139631495815168 ddar.py:60] Depth 1/1000 time = 0.11768293380737305
I0123 13:18:45.665263 139631495815168 ddar.py:60] Depth 2/1000 time = 0.20692014694213867
I0123 13:18:45.889827 139631495815168 ddar.py:60] Depth 3/1000 time = 0.22447919845581055
I0123 13:18:46.157585 139631495815168 ddar.py:60] Depth 4/1000 time = 0.2676069736480713
I0123 13:18:46.425755 139631495815168 ddar.py:60] Depth 5/1000 time = 0.2680199146270752
I0123 13:18:46.708749 139631495815168 ddar.py:60] Depth 6/1000 time = 0.2750885486602783
I0123 13:18:46.709046 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:18:46.709089 139631495815168 alphageometry.py:566] LM output (score=-2.827765): "h : D c b b h 07 ;"
I0123 13:18:46.709121 139631495815168 alphageometry.py:567] Translation: "h = on_circle h b c"

I0123 13:18:46.709153 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_circle h b c ? simtri d b f e a f"
I0123 13:18:46.709252 139631495815168 graph.py:498] 
I0123 13:18:46.709295 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_circle h b c ? simtri d b f e a f
I0123 13:18:46.802086 139631495815168 ddar.py:60] Depth 1/1000 time = 0.08261394500732422
I0123 13:18:46.903893 139631495815168 ddar.py:60] Depth 2/1000 time = 0.10172104835510254
I0123 13:18:47.019099 139631495815168 ddar.py:60] Depth 3/1000 time = 0.11512613296508789
I0123 13:18:47.162743 139631495815168 ddar.py:60] Depth 4/1000 time = 0.1435084342956543
I0123 13:18:47.310286 139631495815168 ddar.py:60] Depth 5/1000 time = 0.14741158485412598
I0123 13:18:47.314426 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:18:47.314473 139631495815168 alphageometry.py:566] LM output (score=-2.881862): "h : ^ c g a b c h c a 07 ;"
I0123 13:18:47.314507 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ c g a b c h c a"

I0123 13:18:47.314537 139631495815168 alphageometry.py:566] LM output (score=-2.893756): "h : C c e h 07 T c e g h 08 ;"
I0123 13:18:47.314563 139631495815168 alphageometry.py:567] Translation: "h = on_line h c e, on_tline h g c e"

I0123 13:18:47.314591 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_line h c e, on_tline h g c e ? simtri d b f e a f"
I0123 13:18:47.314692 139631495815168 graph.py:498] 
I0123 13:18:47.314735 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g c a b; h = on_line h c e, on_tline h g c e ? simtri d b f e a f
I0123 13:18:47.431089 139631495815168 ddar.py:60] Depth 1/1000 time = 0.10201740264892578
I0123 13:18:47.605416 139631495815168 ddar.py:60] Depth 2/1000 time = 0.17424416542053223
I0123 13:18:47.794190 139631495815168 ddar.py:60] Depth 3/1000 time = 0.18869400024414062
I0123 13:18:48.019454 139631495815168 ddar.py:60] Depth 4/1000 time = 0.22512602806091309
I0123 13:18:48.245405 139631495815168 ddar.py:60] Depth 5/1000 time = 0.22581815719604492
I0123 13:18:48.249845 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:18:48.249896 139631495815168 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C a c d 00 T a b b d 01 ; e : C b c e 02 T a b a e 03 ; f : C a b f 04 T a b c f 05 ? S d b f e a f {F1} x00 g : P a c e g 06 P a e c g 07 ; x00
I0123 13:18:53.937495 139631495815168 alphageometry.py:566] LM output (score=-0.097161): "h : C a g h 08 D a h g h 09 ;"
I0123 13:18:53.937736 139631495815168 alphageometry.py:567] Translation: "h = on_line h a g, on_bline h g a"

I0123 13:18:53.937794 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h a g, on_bline h g a ? simtri d b f e a f"
I0123 13:18:53.937927 139631495815168 graph.py:498] 
I0123 13:18:53.937979 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h a g, on_bline h g a ? simtri d b f e a f
I0123 13:18:54.112974 139631495815168 ddar.py:60] Depth 1/1000 time = 0.15903091430664062
I0123 13:18:54.463188 139631495815168 ddar.py:60] Depth 2/1000 time = 0.3501241207122803
I0123 13:18:55.594278 139631495815168 ddar.py:60] Depth 3/1000 time = 1.130974531173706
I0123 13:18:56.242479 139631495815168 ddar.py:60] Depth 4/1000 time = 0.6479556560516357
I0123 13:18:57.380482 139631495815168 ddar.py:60] Depth 5/1000 time = 1.1377601623535156
I0123 13:18:58.029546 139631495815168 ddar.py:60] Depth 6/1000 time = 0.6485123634338379
I0123 13:18:59.172915 139631495815168 ddar.py:60] Depth 7/1000 time = 1.1354906558990479
I0123 13:18:59.173295 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:18:59.173342 139631495815168 alphageometry.py:566] LM output (score=-1.490884): "h : C c e h 08 D c h e h 09 ;"
I0123 13:18:59.173375 139631495815168 alphageometry.py:567] Translation: "h = on_line h c e, on_bline h e c"

I0123 13:18:59.173411 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h c e, on_bline h e c ? simtri d b f e a f"
I0123 13:18:59.173529 139631495815168 graph.py:498] 
I0123 13:18:59.173576 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h c e, on_bline h e c ? simtri d b f e a f
I0123 13:18:59.379462 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1894237995147705
I0123 13:18:59.720375 139631495815168 ddar.py:60] Depth 2/1000 time = 0.3408241271972656
I0123 13:19:00.253751 139631495815168 ddar.py:60] Depth 3/1000 time = 0.5332791805267334
I0123 13:19:01.370608 139631495815168 ddar.py:60] Depth 4/1000 time = 1.1166515350341797
I0123 13:19:02.003536 139631495815168 ddar.py:60] Depth 5/1000 time = 0.6326899528503418
I0123 13:19:03.114362 139631495815168 ddar.py:60] Depth 6/1000 time = 1.1102886199951172
I0123 13:19:03.767689 139631495815168 ddar.py:60] Depth 7/1000 time = 0.6446285247802734
I0123 13:19:03.768048 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:19:03.768100 139631495815168 alphageometry.py:566] LM output (score=-1.707222): "h : C e g h 08 D e h g h 09 ;"
I0123 13:19:03.768135 139631495815168 alphageometry.py:567] Translation: "h = on_line h e g, on_bline h g e"

I0123 13:19:03.768171 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h e g, on_bline h g e ? simtri d b f e a f"
I0123 13:19:03.768291 139631495815168 graph.py:498] 
I0123 13:19:03.768335 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h e g, on_bline h g e ? simtri d b f e a f
I0123 13:19:03.942095 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1579604148864746
I0123 13:19:04.194671 139631495815168 ddar.py:60] Depth 2/1000 time = 0.25248026847839355
I0123 13:19:04.458508 139631495815168 ddar.py:60] Depth 3/1000 time = 0.26375412940979004
I0123 13:19:04.772882 139631495815168 ddar.py:60] Depth 4/1000 time = 0.3142204284667969
I0123 13:19:05.082195 139631495815168 ddar.py:60] Depth 5/1000 time = 0.3091702461242676
I0123 13:19:05.396777 139631495815168 ddar.py:60] Depth 6/1000 time = 0.31412601470947266
I0123 13:19:05.402500 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:19:05.402549 139631495815168 alphageometry.py:566] LM output (score=-1.794436): "h : C b g h 08 D b h g h 09 ;"
I0123 13:19:05.402583 139631495815168 alphageometry.py:567] Translation: "h = on_line h b g, on_bline h g b"

I0123 13:19:05.402616 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h b g, on_bline h g b ? simtri d b f e a f"
I0123 13:19:05.402739 139631495815168 graph.py:498] 
I0123 13:19:05.402785 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h b g, on_bline h g b ? simtri d b f e a f
I0123 13:19:05.561624 139631495815168 ddar.py:60] Depth 1/1000 time = 0.14328789710998535
I0123 13:19:05.800972 139631495815168 ddar.py:60] Depth 2/1000 time = 0.23925518989562988
I0123 13:19:06.671147 139631495815168 ddar.py:60] Depth 3/1000 time = 0.8700714111328125
I0123 13:19:07.129933 139631495815168 ddar.py:60] Depth 4/1000 time = 0.45836544036865234
I0123 13:19:07.588607 139631495815168 ddar.py:60] Depth 5/1000 time = 0.4584972858428955
I0123 13:19:08.050237 139631495815168 ddar.py:60] Depth 6/1000 time = 0.4611392021179199
I0123 13:19:09.005831 139631495815168 ddar.py:60] Depth 7/1000 time = 0.9487686157226562
I0123 13:19:09.006199 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:19:09.006245 139631495815168 alphageometry.py:566] LM output (score=-2.424861): "h : C d g h 08 D d h g h 09 ;"
I0123 13:19:09.006278 139631495815168 alphageometry.py:567] Translation: "h = on_line h d g, on_bline h g d"

I0123 13:19:09.006312 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h d g, on_bline h g d ? simtri d b f e a f"
I0123 13:19:09.006430 139631495815168 graph.py:498] 
I0123 13:19:09.006474 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h d g, on_bline h g d ? simtri d b f e a f
I0123 13:19:09.160670 139631495815168 ddar.py:60] Depth 1/1000 time = 0.13876748085021973
I0123 13:19:09.406837 139631495815168 ddar.py:60] Depth 2/1000 time = 0.2460792064666748
I0123 13:19:09.652732 139631495815168 ddar.py:60] Depth 3/1000 time = 0.24581027030944824
I0123 13:19:09.942625 139631495815168 ddar.py:60] Depth 4/1000 time = 0.28973817825317383
I0123 13:19:10.237034 139631495815168 ddar.py:60] Depth 5/1000 time = 0.29427051544189453
I0123 13:19:10.531927 139631495815168 ddar.py:60] Depth 6/1000 time = 0.29442644119262695
I0123 13:19:10.537058 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:19:10.537106 139631495815168 alphageometry.py:566] LM output (score=-2.531557): "h : P c e g h 08 P c g e h 09 ;"
I0123 13:19:10.537139 139631495815168 alphageometry.py:567] Translation: "h = on_pline h g c e, on_pline h e c g"

I0123 13:19:10.537172 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_pline h g c e, on_pline h e c g ? simtri d b f e a f"
I0123 13:19:10.537281 139631495815168 graph.py:498] 
I0123 13:19:10.537325 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_pline h g c e, on_pline h e c g ? simtri d b f e a f
I0123 13:19:10.744958 139631495815168 ddar.py:60] Depth 1/1000 time = 0.18181157112121582
I0123 13:19:11.136359 139631495815168 ddar.py:60] Depth 2/1000 time = 0.391315221786499
I0123 13:19:11.543168 139631495815168 ddar.py:60] Depth 3/1000 time = 0.4067239761352539
I0123 13:19:12.008792 139631495815168 ddar.py:60] Depth 4/1000 time = 0.46547770500183105
I0123 13:19:12.473264 139631495815168 ddar.py:60] Depth 5/1000 time = 0.4643275737762451
I0123 13:19:12.940314 139631495815168 ddar.py:60] Depth 6/1000 time = 0.4665353298187256
I0123 13:19:12.947814 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:19:12.947873 139631495815168 alphageometry.py:566] LM output (score=-2.663299): "h : C b e h 08 D b h e h 09 ;"
I0123 13:19:12.947907 139631495815168 alphageometry.py:567] Translation: "h = on_line h b e, on_bline h e b"

I0123 13:19:12.947942 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h b e, on_bline h e b ? simtri d b f e a f"
I0123 13:19:12.948051 139631495815168 graph.py:498] 
I0123 13:19:12.948095 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h b e, on_bline h e b ? simtri d b f e a f
I0123 13:19:13.146100 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1828775405883789
I0123 13:19:13.594146 139631495815168 ddar.py:60] Depth 2/1000 time = 0.4479532241821289
I0123 13:19:14.569226 139631495815168 ddar.py:60] Depth 3/1000 time = 0.9749505519866943
I0123 13:19:15.111753 139631495815168 ddar.py:60] Depth 4/1000 time = 0.5423073768615723
I0123 13:19:16.143123 139631495815168 ddar.py:60] Depth 5/1000 time = 1.0311565399169922
I0123 13:19:16.679608 139631495815168 ddar.py:60] Depth 6/1000 time = 0.5358757972717285
I0123 13:19:17.232061 139631495815168 ddar.py:60] Depth 7/1000 time = 0.5457572937011719
I0123 13:19:17.232388 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:19:17.232439 139631495815168 alphageometry.py:566] LM output (score=-2.780006): "h : P c e f h 08 P c f e h 09 ;"
I0123 13:19:17.232472 139631495815168 alphageometry.py:567] Translation: "h = on_pline h f c e, on_pline h e c f"

I0123 13:19:17.232507 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_pline h f c e, on_pline h e c f ? simtri d b f e a f"
I0123 13:19:17.232627 139631495815168 graph.py:498] 
I0123 13:19:17.232671 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_pline h f c e, on_pline h e c f ? simtri d b f e a f
I0123 13:19:17.465393 139631495815168 ddar.py:60] Depth 1/1000 time = 0.20624089241027832
I0123 13:19:18.342110 139631495815168 ddar.py:60] Depth 2/1000 time = 0.876591682434082
I0123 13:19:18.831568 139631495815168 ddar.py:60] Depth 3/1000 time = 0.4892916679382324
I0123 13:19:19.361632 139631495815168 ddar.py:60] Depth 4/1000 time = 0.5298631191253662
I0123 13:19:19.894302 139631495815168 ddar.py:60] Depth 5/1000 time = 0.5324954986572266
I0123 13:19:19.906082 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:19:19.906133 139631495815168 alphageometry.py:566] LM output (score=-2.873290): "h : C b c h 08 D b h c h 09 ;"
I0123 13:19:19.906167 139631495815168 alphageometry.py:567] Translation: "h = on_line h b c, on_bline h c b"

I0123 13:19:19.906202 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h b c, on_bline h c b ? simtri d b f e a f"
I0123 13:19:19.906313 139631495815168 graph.py:498] 
I0123 13:19:19.906358 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h b c, on_bline h c b ? simtri d b f e a f
I0123 13:19:20.104116 139631495815168 ddar.py:60] Depth 1/1000 time = 0.18257761001586914
I0123 13:19:20.512688 139631495815168 ddar.py:60] Depth 2/1000 time = 0.4084808826446533
I0123 13:19:21.473459 139631495815168 ddar.py:60] Depth 3/1000 time = 0.9606451988220215
I0123 13:19:22.003469 139631495815168 ddar.py:60] Depth 4/1000 time = 0.5297772884368896
I0123 13:19:22.534173 139631495815168 ddar.py:60] Depth 5/1000 time = 0.5304853916168213
I0123 13:19:23.552327 139631495815168 ddar.py:60] Depth 6/1000 time = 1.0176267623901367
I0123 13:19:24.086254 139631495815168 ddar.py:60] Depth 7/1000 time = 0.527012825012207
I0123 13:19:24.086587 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:19:24.086632 139631495815168 alphageometry.py:566] LM output (score=-2.891809): "h : C c g h 08 D c h g h 09 ;"
I0123 13:19:24.086665 139631495815168 alphageometry.py:567] Translation: "h = on_line h c g, on_bline h g c"

I0123 13:19:24.086700 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h c g, on_bline h g c ? simtri d b f e a f"
I0123 13:19:24.086814 139631495815168 graph.py:498] 
I0123 13:19:24.086860 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h c g, on_bline h g c ? simtri d b f e a f
I0123 13:19:24.279305 139631495815168 ddar.py:60] Depth 1/1000 time = 0.17734527587890625
I0123 13:19:24.586581 139631495815168 ddar.py:60] Depth 2/1000 time = 0.307187557220459
I0123 13:19:24.910825 139631495815168 ddar.py:60] Depth 3/1000 time = 0.3241586685180664
I0123 13:19:25.287596 139631495815168 ddar.py:60] Depth 4/1000 time = 0.3766155242919922
I0123 13:19:25.663233 139631495815168 ddar.py:60] Depth 5/1000 time = 0.3754842281341553
I0123 13:19:25.668738 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:19:25.668786 139631495815168 alphageometry.py:566] LM output (score=-2.998691): "h : C a g h 08 C c e h 09 ;"
I0123 13:19:25.668819 139631495815168 alphageometry.py:567] Translation: "h = on_line h a g, on_line h c e"

I0123 13:19:25.668853 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h a g, on_line h c e ? simtri d b f e a f"
I0123 13:19:25.668960 139631495815168 graph.py:498] 
I0123 13:19:25.669003 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h a g, on_line h c e ? simtri d b f e a f
I0123 13:19:25.896069 139631495815168 ddar.py:60] Depth 1/1000 time = 0.21350622177124023
I0123 13:19:26.263294 139631495815168 ddar.py:60] Depth 2/1000 time = 0.36713433265686035
I0123 13:19:27.139376 139631495815168 ddar.py:60] Depth 3/1000 time = 0.8759732246398926
I0123 13:19:27.787919 139631495815168 ddar.py:60] Depth 4/1000 time = 0.6483066082000732
I0123 13:19:28.981438 139631495815168 ddar.py:60] Depth 5/1000 time = 1.1932897567749023
I0123 13:19:29.651606 139631495815168 ddar.py:60] Depth 6/1000 time = 0.669456958770752
I0123 13:19:30.842060 139631495815168 ddar.py:60] Depth 7/1000 time = 1.180846929550171
I0123 13:19:30.842436 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:19:30.842487 139631495815168 alphageometry.py:566] LM output (score=-3.279046): "h : P b g c h 08 P b h c g 09 ;"
I0123 13:19:30.842520 139631495815168 alphageometry.py:567] Translation: "h = on_pline h c b g, on_pline h b c g"

I0123 13:19:30.842555 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_pline h c b g, on_pline h b c g ? simtri d b f e a f"
I0123 13:19:30.842689 139631495815168 graph.py:498] 
I0123 13:19:30.842740 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_pline h c b g, on_pline h b c g ? simtri d b f e a f
I0123 13:19:31.041336 139631495815168 ddar.py:60] Depth 1/1000 time = 0.17159199714660645
I0123 13:19:31.407219 139631495815168 ddar.py:60] Depth 2/1000 time = 0.3657951354980469
I0123 13:19:31.872079 139631495815168 ddar.py:60] Depth 3/1000 time = 0.46476078033447266
I0123 13:19:32.419592 139631495815168 ddar.py:60] Depth 4/1000 time = 0.5473334789276123
I0123 13:19:32.973926 139631495815168 ddar.py:60] Depth 5/1000 time = 0.5541846752166748
I0123 13:19:32.983639 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:19:32.983687 139631495815168 alphageometry.py:566] LM output (score=-3.285038): "h : P c e d h 08 P c h d e 09 ;"
I0123 13:19:32.983720 139631495815168 alphageometry.py:567] Translation: "h = on_pline h d c e, on_pline h c d e"

I0123 13:19:32.983754 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_pline h d c e, on_pline h c d e ? simtri d b f e a f"
I0123 13:19:32.983863 139631495815168 graph.py:498] 
I0123 13:19:32.983908 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_pline h d c e, on_pline h c d e ? simtri d b f e a f
I0123 13:19:33.183474 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1698741912841797
I0123 13:19:33.455332 139631495815168 ddar.py:60] Depth 2/1000 time = 0.2717728614807129
I0123 13:19:33.746161 139631495815168 ddar.py:60] Depth 3/1000 time = 0.2907428741455078
I0123 13:19:34.087579 139631495815168 ddar.py:60] Depth 4/1000 time = 0.3412644863128662
I0123 13:19:34.430533 139631495815168 ddar.py:60] Depth 5/1000 time = 0.342806339263916
I0123 13:19:34.437027 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:19:34.437080 139631495815168 alphageometry.py:566] LM output (score=-3.321091): "h : C d e h 08 D d h e h 09 ;"
I0123 13:19:34.437114 139631495815168 alphageometry.py:567] Translation: "h = on_line h d e, on_bline h e d"

I0123 13:19:34.437147 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h d e, on_bline h e d ? simtri d b f e a f"
I0123 13:19:34.437252 139631495815168 graph.py:498] 
I0123 13:19:34.437295 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h d e, on_bline h e d ? simtri d b f e a f
I0123 13:19:34.596238 139631495815168 ddar.py:60] Depth 1/1000 time = 0.14378046989440918
I0123 13:19:34.823011 139631495815168 ddar.py:60] Depth 2/1000 time = 0.2266848087310791
I0123 13:19:35.063984 139631495815168 ddar.py:60] Depth 3/1000 time = 0.24088549613952637
I0123 13:19:35.350946 139631495815168 ddar.py:60] Depth 4/1000 time = 0.2868175506591797
I0123 13:19:35.640970 139631495815168 ddar.py:60] Depth 5/1000 time = 0.2898838520050049
I0123 13:19:35.932637 139631495815168 ddar.py:60] Depth 6/1000 time = 0.2911999225616455
I0123 13:19:35.938278 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:19:35.938325 139631495815168 alphageometry.py:566] LM output (score=-3.399827): "h : C a c h 08 D a h c h 09 ;"
I0123 13:19:35.938358 139631495815168 alphageometry.py:567] Translation: "h = on_line h a c, on_bline h c a"

I0123 13:19:35.938390 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h a c, on_bline h c a ? simtri d b f e a f"
I0123 13:19:35.938494 139631495815168 graph.py:498] 
I0123 13:19:35.938537 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h a c, on_bline h c a ? simtri d b f e a f
I0123 13:19:36.135174 139631495815168 ddar.py:60] Depth 1/1000 time = 0.18108463287353516
I0123 13:19:36.595579 139631495815168 ddar.py:60] Depth 2/1000 time = 0.4603099822998047
I0123 13:19:37.599345 139631495815168 ddar.py:60] Depth 3/1000 time = 1.0036332607269287
I0123 13:19:38.166337 139631495815168 ddar.py:60] Depth 4/1000 time = 0.5667684078216553
I0123 13:19:39.235606 139631495815168 ddar.py:60] Depth 5/1000 time = 1.0690529346466064
I0123 13:19:39.797160 139631495815168 ddar.py:60] Depth 6/1000 time = 0.5609707832336426
I0123 13:19:40.881764 139631495815168 ddar.py:60] Depth 7/1000 time = 1.0782058238983154
I0123 13:19:40.882134 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:19:40.882181 139631495815168 alphageometry.py:566] LM output (score=-3.495996): "g : C c e g 08 D c g e g 09 ;"
I0123 13:19:40.882215 139631495815168 alphageometry.py:567] Translation: "ERROR: point g already exists."

I0123 13:19:40.882249 139631495815168 alphageometry.py:566] LM output (score=-3.561047): "h : C c g h 08 D c g c h 09 ;"
I0123 13:19:40.882278 139631495815168 alphageometry.py:567] Translation: "h = on_line h c g, on_circle h c g"

I0123 13:19:40.882307 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h c g, on_circle h c g ? simtri d b f e a f"
I0123 13:19:40.882426 139631495815168 graph.py:498] 
I0123 13:19:40.882470 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h c g, on_circle h c g ? simtri d b f e a f
I0123 13:19:41.076217 139631495815168 ddar.py:60] Depth 1/1000 time = 0.17845654487609863
I0123 13:19:41.412626 139631495815168 ddar.py:60] Depth 2/1000 time = 0.336322546005249
I0123 13:19:41.851668 139631495815168 ddar.py:60] Depth 3/1000 time = 0.4389526844024658
I0123 13:19:42.372572 139631495815168 ddar.py:60] Depth 4/1000 time = 0.5207338333129883
I0123 13:19:42.898559 139631495815168 ddar.py:60] Depth 5/1000 time = 0.5258264541625977
I0123 13:19:42.907958 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:19:42.908007 139631495815168 alphageometry.py:566] LM output (score=-3.563967): "i : C a g i 08 D a i g i 09 ;"
I0123 13:19:42.908041 139631495815168 alphageometry.py:567] Translation: "i = on_line i a g, on_bline i g a"

I0123 13:19:42.908073 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; i = on_line i a g, on_bline i g a ? simtri d b f e a f"
I0123 13:19:42.908180 139631495815168 graph.py:498] 
I0123 13:19:42.908225 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h a g, on_bline h g a ? simtri d b f e a f
I0123 13:19:43.082238 139631495815168 ddar.py:60] Depth 1/1000 time = 0.15915179252624512
I0123 13:19:43.440793 139631495815168 ddar.py:60] Depth 2/1000 time = 0.35846471786499023
I0123 13:19:44.006644 139631495815168 ddar.py:60] Depth 3/1000 time = 0.5657527446746826
I0123 13:19:45.184779 139631495815168 ddar.py:60] Depth 4/1000 time = 1.1779301166534424
I0123 13:19:45.835349 139631495815168 ddar.py:60] Depth 5/1000 time = 0.6503219604492188
I0123 13:19:47.043490 139631495815168 ddar.py:60] Depth 6/1000 time = 1.2075486183166504
I0123 13:19:47.714774 139631495815168 ddar.py:60] Depth 7/1000 time = 0.6628162860870361
I0123 13:19:47.715138 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:19:47.715199 139631495815168 alphageometry.py:566] LM output (score=-3.641924): "h : C e g h 08 T c h e g 09 ;"
I0123 13:19:47.715245 139631495815168 alphageometry.py:567] Translation: "h = on_line h e g, on_tline h c e g"

I0123 13:19:47.715285 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h e g, on_tline h c e g ? simtri d b f e a f"
I0123 13:19:47.715419 139631495815168 graph.py:498] 
I0123 13:19:47.715469 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h e g, on_tline h c e g ? simtri d b f e a f
I0123 13:19:47.874574 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1405034065246582
I0123 13:19:48.157850 139631495815168 ddar.py:60] Depth 2/1000 time = 0.2831747531890869
I0123 13:19:48.485100 139631495815168 ddar.py:60] Depth 3/1000 time = 0.32714080810546875
I0123 13:19:48.863583 139631495815168 ddar.py:60] Depth 4/1000 time = 0.3783290386199951
I0123 13:19:49.246986 139631495815168 ddar.py:60] Depth 5/1000 time = 0.3832578659057617
I0123 13:19:49.255695 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:19:49.255744 139631495815168 alphageometry.py:566] LM output (score=-3.655024): "h : P a g c h 08 P a h c g 09 ;"
I0123 13:19:49.255778 139631495815168 alphageometry.py:567] Translation: "h = on_pline h c a g, on_pline h a c g"

I0123 13:19:49.255815 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_pline h c a g, on_pline h a c g ? simtri d b f e a f"
I0123 13:19:49.255928 139631495815168 graph.py:498] 
I0123 13:19:49.255973 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_pline h c a g, on_pline h a c g ? simtri d b f e a f
I0123 13:19:49.461247 139631495815168 ddar.py:60] Depth 1/1000 time = 0.17916512489318848
I0123 13:19:49.902704 139631495815168 ddar.py:60] Depth 2/1000 time = 0.44137072563171387
I0123 13:19:50.502024 139631495815168 ddar.py:60] Depth 3/1000 time = 0.5992250442504883
I0123 13:19:51.253529 139631495815168 ddar.py:60] Depth 4/1000 time = 0.7513241767883301
I0123 13:19:52.526917 139631495815168 ddar.py:60] Depth 5/1000 time = 1.2731802463531494
I0123 13:19:53.286574 139631495815168 ddar.py:60] Depth 6/1000 time = 0.758979320526123
I0123 13:19:53.300207 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:19:53.300265 139631495815168 alphageometry.py:566] LM output (score=-3.679437): "f : C a g f 08 D a f g f 09 ;"
I0123 13:19:53.300301 139631495815168 alphageometry.py:567] Translation: "ERROR: point f already exists."

I0123 13:19:53.300335 139631495815168 alphageometry.py:566] LM output (score=-3.741794): "h : C a e h 08 D a h e h 09 ;"
I0123 13:19:53.300363 139631495815168 alphageometry.py:567] Translation: "h = on_line h a e, on_bline h e a"

I0123 13:19:53.300393 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h a e, on_bline h e a ? simtri d b f e a f"
I0123 13:19:53.300508 139631495815168 graph.py:498] 
I0123 13:19:53.300552 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h a e, on_bline h e a ? simtri d b f e a f
I0123 13:19:53.503121 139631495815168 ddar.py:60] Depth 1/1000 time = 0.18665480613708496
I0123 13:19:53.793221 139631495815168 ddar.py:60] Depth 2/1000 time = 0.290010929107666
I0123 13:19:54.105168 139631495815168 ddar.py:60] Depth 3/1000 time = 0.3118622303009033
I0123 13:19:54.462120 139631495815168 ddar.py:60] Depth 4/1000 time = 0.35679101943969727
I0123 13:19:54.823165 139631495815168 ddar.py:60] Depth 5/1000 time = 0.36089539527893066
I0123 13:19:55.184180 139631495815168 ddar.py:60] Depth 6/1000 time = 0.3605649471282959
I0123 13:19:55.189712 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:19:55.189760 139631495815168 alphageometry.py:566] LM output (score=-3.741935): "h : C e g h 08 D e g e h 09 ;"
I0123 13:19:55.189793 139631495815168 alphageometry.py:567] Translation: "h = on_line h e g, on_circle h e g"

I0123 13:19:55.189826 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h e g, on_circle h e g ? simtri d b f e a f"
I0123 13:19:55.189935 139631495815168 graph.py:498] 
I0123 13:19:55.189980 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h e g, on_circle h e g ? simtri d b f e a f
I0123 13:19:55.360007 139631495815168 ddar.py:60] Depth 1/1000 time = 0.15406560897827148
I0123 13:19:55.634724 139631495815168 ddar.py:60] Depth 2/1000 time = 0.2746307849884033
I0123 13:19:55.981590 139631495815168 ddar.py:60] Depth 3/1000 time = 0.34677672386169434
I0123 13:19:56.386246 139631495815168 ddar.py:60] Depth 4/1000 time = 0.4044971466064453
I0123 13:19:56.796511 139631495815168 ddar.py:60] Depth 5/1000 time = 0.41012048721313477
I0123 13:19:57.208164 139631495815168 ddar.py:60] Depth 6/1000 time = 0.4111900329589844
I0123 13:19:57.214757 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:19:57.214805 139631495815168 alphageometry.py:566] LM output (score=-3.931974): "h : P c d e h 08 P c e d h 09 ;"
I0123 13:19:57.214839 139631495815168 alphageometry.py:567] Translation: "h = on_pline h e c d, on_pline h d c e"

I0123 13:19:57.214872 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_pline h e c d, on_pline h d c e ? simtri d b f e a f"
I0123 13:19:57.214980 139631495815168 graph.py:498] 
I0123 13:19:57.215023 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_pline h e c d, on_pline h d c e ? simtri d b f e a f
I0123 13:19:57.409852 139631495815168 ddar.py:60] Depth 1/1000 time = 0.16927695274353027
I0123 13:19:57.721625 139631495815168 ddar.py:60] Depth 2/1000 time = 0.3116872310638428
I0123 13:19:58.054642 139631495815168 ddar.py:60] Depth 3/1000 time = 0.3329274654388428
I0123 13:19:58.436560 139631495815168 ddar.py:60] Depth 4/1000 time = 0.3817629814147949
I0123 13:19:58.822245 139631495815168 ddar.py:60] Depth 5/1000 time = 0.38553905487060547
I0123 13:19:58.830564 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:19:58.830612 139631495815168 alphageometry.py:566] LM output (score=-4.021685): "h : P c e c h 08 P d g g h 09 ;"
I0123 13:19:58.830646 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c e c h"

I0123 13:19:58.830677 139631495815168 alphageometry.py:566] LM output (score=-4.074760): "h : P c e c h 08 P g f g h 09 ;"
I0123 13:19:58.830704 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c e c h"

I0123 13:19:58.830732 139631495815168 alphageometry.py:566] LM output (score=-4.110145): "h : P b c g h 08 P b h c g 09 ;"
I0123 13:19:58.830758 139631495815168 alphageometry.py:567] Translation: "h = on_pline h g b c, on_pline h b c g"

I0123 13:19:58.830785 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_pline h g b c, on_pline h b c g ? simtri d b f e a f"
I0123 13:19:58.830901 139631495815168 graph.py:498] 
I0123 13:19:58.830945 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_pline h g b c, on_pline h b c g ? simtri d b f e a f
I0123 13:19:59.034487 139631495815168 ddar.py:60] Depth 1/1000 time = 0.17723488807678223
I0123 13:19:59.458201 139631495815168 ddar.py:60] Depth 2/1000 time = 0.4236264228820801
I0123 13:20:00.091017 139631495815168 ddar.py:60] Depth 3/1000 time = 0.632725715637207
I0123 13:20:00.787929 139631495815168 ddar.py:60] Depth 4/1000 time = 0.6967484951019287
I0123 13:20:01.489530 139631495815168 ddar.py:60] Depth 5/1000 time = 0.7014350891113281
I0123 13:20:02.216393 139631495815168 ddar.py:60] Depth 6/1000 time = 0.714787483215332
I0123 13:20:02.216729 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:20:02.216772 139631495815168 alphageometry.py:566] LM output (score=-4.127412): "h : P c g f h 08 P c f g h 09 ;"
I0123 13:20:02.216805 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2570, in add_clause
    raise DepCheckFailError(
graph.DepCheckFailError: ncoll f c g
"

I0123 13:20:02.216837 139631495815168 alphageometry.py:566] LM output (score=-4.211665): "h : C b e h 08 P a g f h 09 ;"
I0123 13:20:02.216866 139631495815168 alphageometry.py:567] Translation: "h = on_line h b e, on_pline h f a g"

I0123 13:20:02.216895 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h b e, on_pline h f a g ? simtri d b f e a f"
I0123 13:20:02.217003 139631495815168 graph.py:498] 
I0123 13:20:02.217046 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_line h b e, on_pline h f a g ? simtri d b f e a f
I0123 13:20:02.402236 139631495815168 ddar.py:60] Depth 1/1000 time = 0.16470122337341309
I0123 13:20:02.654616 139631495815168 ddar.py:60] Depth 2/1000 time = 0.25229334831237793
I0123 13:20:02.918671 139631495815168 ddar.py:60] Depth 3/1000 time = 0.26397180557250977
I0123 13:20:03.228278 139631495815168 ddar.py:60] Depth 4/1000 time = 0.3094620704650879
I0123 13:20:03.542112 139631495815168 ddar.py:60] Depth 5/1000 time = 0.3136885166168213
I0123 13:20:03.547451 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:20:03.547498 139631495815168 alphageometry.py:566] LM output (score=-4.307014): "c : T a b c g 08 ;"
I0123 13:20:03.547532 139631495815168 alphageometry.py:567] Translation: "ERROR: point c already exists."

I0123 13:20:03.547564 139631495815168 alphageometry.py:566] LM output (score=-4.318863): "h : P b f e h 08 P b h e f 09 ;"
I0123 13:20:03.547591 139631495815168 alphageometry.py:567] Translation: "h = on_pline h e b f, on_pline h b e f"

I0123 13:20:03.547621 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_pline h e b f, on_pline h b e f ? simtri d b f e a f"
I0123 13:20:03.547726 139631495815168 graph.py:498] 
I0123 13:20:03.547768 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g c a e; h = on_pline h e b f, on_pline h b e f ? simtri d b f e a f
I0123 13:20:03.743899 139631495815168 ddar.py:60] Depth 1/1000 time = 0.16477680206298828
I0123 13:20:04.567812 139631495815168 ddar.py:60] Depth 2/1000 time = 0.8238086700439453
I0123 13:20:04.859953 139631495815168 ddar.py:60] Depth 3/1000 time = 0.2919778823852539
I0123 13:20:05.197767 139631495815168 ddar.py:60] Depth 4/1000 time = 0.3376164436340332
I0123 13:20:05.540531 139631495815168 ddar.py:60] Depth 5/1000 time = 0.34254884719848633
I0123 13:20:05.546890 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:20:05.546964 139631495815168 alphageometry.py:566] LM output (score=-4.323078): "h : C e g h 08 P a h c g 09 ;"
I0123 13:20:05.547000 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 13:20:05.547060 139631495815168 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C a c d 00 T a b b d 01 ; e : C b c e 02 T a b a e 03 ; f : C a b f 04 T a b c f 05 ? S d b f e a f {F1} x00 g : C c b g 06 D c g b g 07 ; x00
I0123 13:20:10.246776 139631495815168 alphageometry.py:566] LM output (score=-0.807445): "h : C c a h 08 D c h a h 09 ;"
I0123 13:20:10.246949 139631495815168 alphageometry.py:567] Translation: "h = on_line h c a, on_bline h a c"

I0123 13:20:10.246995 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h c a, on_bline h a c ? simtri d b f e a f"
I0123 13:20:10.247123 139631495815168 graph.py:498] 
I0123 13:20:10.247175 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h c a, on_bline h a c ? simtri d b f e a f
I0123 13:20:10.439730 139631495815168 ddar.py:60] Depth 1/1000 time = 0.18131756782531738
I0123 13:20:10.884572 139631495815168 ddar.py:60] Depth 2/1000 time = 0.44474291801452637
I0123 13:20:12.005439 139631495815168 ddar.py:60] Depth 3/1000 time = 1.1207194328308105
I0123 13:20:13.151970 139631495815168 ddar.py:60] Depth 4/1000 time = 1.1461026668548584
I0123 13:20:13.761838 139631495815168 ddar.py:60] Depth 5/1000 time = 0.6096258163452148
I0123 13:20:14.906919 139631495815168 ddar.py:60] Depth 6/1000 time = 1.1445271968841553
I0123 13:20:15.542285 139631495815168 ddar.py:60] Depth 7/1000 time = 0.6277530193328857
I0123 13:20:15.542641 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:20:15.542689 139631495815168 alphageometry.py:566] LM output (score=-0.966329): "h : C a c h 08 D a h c h 09 ;"
I0123 13:20:15.542723 139631495815168 alphageometry.py:567] Translation: "h = on_line h a c, on_bline h c a"

I0123 13:20:15.542759 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h a c, on_bline h c a ? simtri d b f e a f"
I0123 13:20:15.542876 139631495815168 graph.py:498] 
I0123 13:20:15.542922 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h a c, on_bline h c a ? simtri d b f e a f
I0123 13:20:15.730935 139631495815168 ddar.py:60] Depth 1/1000 time = 0.17702889442443848
I0123 13:20:16.706117 139631495815168 ddar.py:60] Depth 2/1000 time = 0.9750747680664062
I0123 13:20:17.806686 139631495815168 ddar.py:60] Depth 3/1000 time = 1.100398302078247
I0123 13:20:18.415962 139631495815168 ddar.py:60] Depth 4/1000 time = 0.6090409755706787
I0123 13:20:19.568647 139631495815168 ddar.py:60] Depth 5/1000 time = 1.1524550914764404
I0123 13:20:20.187696 139631495815168 ddar.py:60] Depth 6/1000 time = 0.6184864044189453
I0123 13:20:21.344924 139631495815168 ddar.py:60] Depth 7/1000 time = 1.1495113372802734
I0123 13:20:21.345295 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:20:21.345351 139631495815168 alphageometry.py:566] LM output (score=-1.005403): "h : C d b h 08 D d h b h 09 ;"
I0123 13:20:21.345386 139631495815168 alphageometry.py:567] Translation: "h = on_line h d b, on_bline h b d"

I0123 13:20:21.345424 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h d b, on_bline h b d ? simtri d b f e a f"
I0123 13:20:21.345543 139631495815168 graph.py:498] 
I0123 13:20:21.345590 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h d b, on_bline h b d ? simtri d b f e a f
I0123 13:20:21.509164 139631495815168 ddar.py:60] Depth 1/1000 time = 0.15268611907958984
I0123 13:20:21.860532 139631495815168 ddar.py:60] Depth 2/1000 time = 0.3512704372406006
I0123 13:20:22.805138 139631495815168 ddar.py:60] Depth 3/1000 time = 0.9444763660430908
I0123 13:20:23.273602 139631495815168 ddar.py:60] Depth 4/1000 time = 0.46823930740356445
I0123 13:20:24.272238 139631495815168 ddar.py:60] Depth 5/1000 time = 0.9984006881713867
I0123 13:20:24.741205 139631495815168 ddar.py:60] Depth 6/1000 time = 0.46843671798706055
I0123 13:20:25.222399 139631495815168 ddar.py:60] Depth 7/1000 time = 0.47486448287963867
I0123 13:20:25.222733 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:20:25.222784 139631495815168 alphageometry.py:566] LM output (score=-1.176888): "h : C a b h 08 D a h b h 09 ;"
I0123 13:20:25.222819 139631495815168 alphageometry.py:567] Translation: "h = on_line h a b, on_bline h b a"

I0123 13:20:25.222855 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h a b, on_bline h b a ? simtri d b f e a f"
I0123 13:20:25.222971 139631495815168 graph.py:498] 
I0123 13:20:25.223017 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h a b, on_bline h b a ? simtri d b f e a f
I0123 13:20:25.405731 139631495815168 ddar.py:60] Depth 1/1000 time = 0.17064785957336426
I0123 13:20:26.325145 139631495815168 ddar.py:60] Depth 2/1000 time = 0.9193029403686523
I0123 13:20:27.327116 139631495815168 ddar.py:60] Depth 3/1000 time = 1.0018024444580078
I0123 13:20:27.851426 139631495815168 ddar.py:60] Depth 4/1000 time = 0.5240919589996338
I0123 13:20:28.920540 139631495815168 ddar.py:60] Depth 5/1000 time = 1.0688951015472412
I0123 13:20:29.445328 139631495815168 ddar.py:60] Depth 6/1000 time = 0.5242571830749512
I0123 13:20:30.509289 139631495815168 ddar.py:60] Depth 7/1000 time = 1.0583415031433105
I0123 13:20:30.509624 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:20:30.509678 139631495815168 alphageometry.py:566] LM output (score=-1.644429): "h : C b e h 08 D b h e h 09 ;"
I0123 13:20:30.509712 139631495815168 alphageometry.py:567] Translation: "h = on_line h b e, on_bline h e b"

I0123 13:20:30.509748 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h b e, on_bline h e b ? simtri d b f e a f"
I0123 13:20:30.509867 139631495815168 graph.py:498] 
I0123 13:20:30.509914 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h b e, on_bline h e b ? simtri d b f e a f
I0123 13:20:30.702110 139631495815168 ddar.py:60] Depth 1/1000 time = 0.17922091484069824
I0123 13:20:31.652964 139631495815168 ddar.py:60] Depth 2/1000 time = 0.9507412910461426
I0123 13:20:32.159105 139631495815168 ddar.py:60] Depth 3/1000 time = 0.505967378616333
I0123 13:20:33.262845 139631495815168 ddar.py:60] Depth 4/1000 time = 1.1035130023956299
I0123 13:20:34.412662 139631495815168 ddar.py:60] Depth 5/1000 time = 1.1495778560638428
I0123 13:20:35.008628 139631495815168 ddar.py:60] Depth 6/1000 time = 0.5957388877868652
I0123 13:20:36.153098 139631495815168 ddar.py:60] Depth 7/1000 time = 1.1438183784484863
I0123 13:20:36.769174 139631495815168 ddar.py:60] Depth 8/1000 time = 0.6094241142272949
I0123 13:20:36.771697 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:20:36.771749 139631495815168 alphageometry.py:566] LM output (score=-1.804886): "h : C b f h 08 D b h f h 09 ;"
I0123 13:20:36.771785 139631495815168 alphageometry.py:567] Translation: "h = on_line h b f, on_bline h f b"

I0123 13:20:36.771821 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h b f, on_bline h f b ? simtri d b f e a f"
I0123 13:20:36.771938 139631495815168 graph.py:498] 
I0123 13:20:36.771984 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h b f, on_bline h f b ? simtri d b f e a f
I0123 13:20:37.478054 139631495815168 ddar.py:60] Depth 1/1000 time = 0.6950595378875732
I0123 13:20:37.963435 139631495815168 ddar.py:60] Depth 2/1000 time = 0.485198974609375
I0123 13:20:39.092833 139631495815168 ddar.py:60] Depth 3/1000 time = 1.129244327545166
I0123 13:20:39.750074 139631495815168 ddar.py:60] Depth 4/1000 time = 0.6570084095001221
I0123 13:20:40.930123 139631495815168 ddar.py:60] Depth 5/1000 time = 1.1798126697540283
I0123 13:20:42.131839 139631495815168 ddar.py:60] Depth 6/1000 time = 1.2011497020721436
I0123 13:20:42.808415 139631495815168 ddar.py:60] Depth 7/1000 time = 0.6691195964813232
I0123 13:20:42.808769 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:20:42.808816 139631495815168 alphageometry.py:566] LM output (score=-1.943692): "h : C f b h 08 D f h b h 09 ;"
I0123 13:20:42.808850 139631495815168 alphageometry.py:567] Translation: "h = on_line h f b, on_bline h b f"

I0123 13:20:42.808886 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h f b, on_bline h b f ? simtri d b f e a f"
I0123 13:20:42.809005 139631495815168 graph.py:498] 
I0123 13:20:42.809051 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h f b, on_bline h b f ? simtri d b f e a f
I0123 13:20:42.991204 139631495815168 ddar.py:60] Depth 1/1000 time = 0.16984772682189941
I0123 13:20:44.029001 139631495815168 ddar.py:60] Depth 2/1000 time = 1.037691593170166
I0123 13:20:45.161317 139631495815168 ddar.py:60] Depth 3/1000 time = 1.1321489810943604
I0123 13:20:45.816571 139631495815168 ddar.py:60] Depth 4/1000 time = 0.6550116539001465
I0123 13:20:47.003777 139631495815168 ddar.py:60] Depth 5/1000 time = 1.1869826316833496
I0123 13:20:48.204466 139631495815168 ddar.py:60] Depth 6/1000 time = 1.2001135349273682
I0123 13:20:48.873269 139631495815168 ddar.py:60] Depth 7/1000 time = 0.6613056659698486
I0123 13:20:48.873616 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:20:48.873674 139631495815168 alphageometry.py:566] LM output (score=-1.975173): "h : C f e h 08 D f h e h 09 ;"
I0123 13:20:48.873725 139631495815168 alphageometry.py:567] Translation: "h = on_line h f e, on_bline h e f"

I0123 13:20:48.873763 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h f e, on_bline h e f ? simtri d b f e a f"
I0123 13:20:48.873881 139631495815168 graph.py:498] 
I0123 13:20:48.873926 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h f e, on_bline h e f ? simtri d b f e a f
I0123 13:20:49.035704 139631495815168 ddar.py:60] Depth 1/1000 time = 0.15067195892333984
I0123 13:20:49.934995 139631495815168 ddar.py:60] Depth 2/1000 time = 0.8991844654083252
I0123 13:20:50.332126 139631495815168 ddar.py:60] Depth 3/1000 time = 0.39696645736694336
I0123 13:20:50.744794 139631495815168 ddar.py:60] Depth 4/1000 time = 0.41246962547302246
I0123 13:20:51.161651 139631495815168 ddar.py:60] Depth 5/1000 time = 0.41666269302368164
I0123 13:20:52.146438 139631495815168 ddar.py:60] Depth 6/1000 time = 0.9842574596405029
I0123 13:20:52.586782 139631495815168 ddar.py:60] Depth 7/1000 time = 0.4353489875793457
I0123 13:20:52.588286 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:20:52.588346 139631495815168 alphageometry.py:566] LM output (score=-2.043429): "h : P c a g h 08 P c g a h 09 ;"
I0123 13:20:52.588382 139631495815168 alphageometry.py:567] Translation: "h = on_pline h g c a, on_pline h a c g"

I0123 13:20:52.588420 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_pline h g c a, on_pline h a c g ? simtri d b f e a f"
I0123 13:20:52.588543 139631495815168 graph.py:498] 
I0123 13:20:52.588595 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_pline h g c a, on_pline h a c g ? simtri d b f e a f
I0123 13:20:52.769353 139631495815168 ddar.py:60] Depth 1/1000 time = 0.16344022750854492
I0123 13:20:53.195755 139631495815168 ddar.py:60] Depth 2/1000 time = 0.42627859115600586
I0123 13:20:54.236911 139631495815168 ddar.py:60] Depth 3/1000 time = 1.0409741401672363
I0123 13:20:54.777493 139631495815168 ddar.py:60] Depth 4/1000 time = 0.5403473377227783
I0123 13:20:55.320201 139631495815168 ddar.py:60] Depth 5/1000 time = 0.5424637794494629
I0123 13:20:56.418355 139631495815168 ddar.py:60] Depth 6/1000 time = 1.097672939300537
I0123 13:20:56.975562 139631495815168 ddar.py:60] Depth 7/1000 time = 0.55055832862854
I0123 13:20:56.975875 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:20:56.975925 139631495815168 alphageometry.py:566] LM output (score=-2.048383): "h : C b d h 08 D b h d h 09 ;"
I0123 13:20:56.975959 139631495815168 alphageometry.py:567] Translation: "h = on_line h b d, on_bline h d b"

I0123 13:20:56.975996 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h b d, on_bline h d b ? simtri d b f e a f"
I0123 13:20:56.976115 139631495815168 graph.py:498] 
I0123 13:20:56.976164 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h b d, on_bline h d b ? simtri d b f e a f
I0123 13:20:57.139221 139631495815168 ddar.py:60] Depth 1/1000 time = 0.15175652503967285
I0123 13:20:57.511310 139631495815168 ddar.py:60] Depth 2/1000 time = 0.37199950218200684
I0123 13:20:58.489445 139631495815168 ddar.py:60] Depth 3/1000 time = 0.9780080318450928
I0123 13:20:58.958140 139631495815168 ddar.py:60] Depth 4/1000 time = 0.46845412254333496
I0123 13:20:59.431994 139631495815168 ddar.py:60] Depth 5/1000 time = 0.47363877296447754
I0123 13:21:00.440473 139631495815168 ddar.py:60] Depth 6/1000 time = 1.0079636573791504
I0123 13:21:00.927195 139631495815168 ddar.py:60] Depth 7/1000 time = 0.4805731773376465
I0123 13:21:00.927510 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:21:00.927557 139631495815168 alphageometry.py:566] LM output (score=-2.108575): "h : C e b h 08 D e h b h 09 ;"
I0123 13:21:00.927590 139631495815168 alphageometry.py:567] Translation: "h = on_line h e b, on_bline h b e"

I0123 13:21:00.927625 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h e b, on_bline h b e ? simtri d b f e a f"
I0123 13:21:00.927739 139631495815168 graph.py:498] 
I0123 13:21:00.927784 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h e b, on_bline h b e ? simtri d b f e a f
I0123 13:21:01.119293 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1781635284423828
I0123 13:21:02.093132 139631495815168 ddar.py:60] Depth 2/1000 time = 0.9737300872802734
I0123 13:21:02.590631 139631495815168 ddar.py:60] Depth 3/1000 time = 0.497328519821167
I0123 13:21:03.700490 139631495815168 ddar.py:60] Depth 4/1000 time = 1.1096482276916504
I0123 13:21:04.866700 139631495815168 ddar.py:60] Depth 5/1000 time = 1.1659777164459229
I0123 13:21:05.468192 139631495815168 ddar.py:60] Depth 6/1000 time = 0.6012630462646484
I0123 13:21:06.618740 139631495815168 ddar.py:60] Depth 7/1000 time = 1.1498992443084717
I0123 13:21:07.803136 139631495815168 ddar.py:60] Depth 8/1000 time = 1.177851915359497
I0123 13:21:07.805702 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:21:07.805755 139631495815168 alphageometry.py:566] LM output (score=-2.169895): "h : C c d h 08 D c h d h 09 ;"
I0123 13:21:07.805790 139631495815168 alphageometry.py:567] Translation: "h = on_line h c d, on_bline h d c"

I0123 13:21:07.805827 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h c d, on_bline h d c ? simtri d b f e a f"
I0123 13:21:07.805945 139631495815168 graph.py:498] 
I0123 13:21:07.805991 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h c d, on_bline h d c ? simtri d b f e a f
I0123 13:21:07.984670 139631495815168 ddar.py:60] Depth 1/1000 time = 0.16774749755859375
I0123 13:21:08.387588 139631495815168 ddar.py:60] Depth 2/1000 time = 0.40282225608825684
I0123 13:21:09.446989 139631495815168 ddar.py:60] Depth 3/1000 time = 1.0592641830444336
I0123 13:21:10.085215 139631495815168 ddar.py:60] Depth 4/1000 time = 0.637991189956665
I0123 13:21:11.279950 139631495815168 ddar.py:60] Depth 5/1000 time = 1.1944973468780518
I0123 13:21:11.931875 139631495815168 ddar.py:60] Depth 6/1000 time = 0.6513657569885254
I0123 13:21:13.170986 139631495815168 ddar.py:60] Depth 7/1000 time = 1.2297906875610352
I0123 13:21:13.171363 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:21:13.171412 139631495815168 alphageometry.py:566] LM output (score=-2.185822): "h : C c f h 08 D c h f h 09 ;"
I0123 13:21:13.171446 139631495815168 alphageometry.py:567] Translation: "h = on_line h c f, on_bline h f c"

I0123 13:21:13.171481 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h c f, on_bline h f c ? simtri d b f e a f"
I0123 13:21:13.171611 139631495815168 graph.py:498] 
I0123 13:21:13.171658 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h c f, on_bline h f c ? simtri d b f e a f
I0123 13:21:13.333610 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1512773036956787
I0123 13:21:13.728256 139631495815168 ddar.py:60] Depth 2/1000 time = 0.3945019245147705
I0123 13:21:14.773302 139631495815168 ddar.py:60] Depth 3/1000 time = 1.0448238849639893
I0123 13:21:15.302270 139631495815168 ddar.py:60] Depth 4/1000 time = 0.528749942779541
I0123 13:21:15.832929 139631495815168 ddar.py:60] Depth 5/1000 time = 0.5304501056671143
I0123 13:21:16.912348 139631495815168 ddar.py:60] Depth 6/1000 time = 1.0789000988006592
I0123 13:21:17.451718 139631495815168 ddar.py:60] Depth 7/1000 time = 0.5340404510498047
I0123 13:21:17.452044 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:21:17.452091 139631495815168 alphageometry.py:566] LM output (score=-2.226300): "h : C f g h 08 D f g g h 09 ;"
I0123 13:21:17.452124 139631495815168 alphageometry.py:567] Translation: "h = on_line h f g, on_circle h g f"

I0123 13:21:17.452160 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h f g, on_circle h g f ? simtri d b f e a f"
I0123 13:21:17.452295 139631495815168 graph.py:498] 
I0123 13:21:17.452346 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h f g, on_circle h g f ? simtri d b f e a f
I0123 13:21:17.626270 139631495815168 ddar.py:60] Depth 1/1000 time = 0.16245055198669434
I0123 13:21:18.691552 139631495815168 ddar.py:60] Depth 2/1000 time = 1.065178632736206
I0123 13:21:19.484422 139631495815168 ddar.py:60] Depth 3/1000 time = 0.7927050590515137
I0123 13:21:20.910833 139631495815168 ddar.py:60] Depth 4/1000 time = 1.4261643886566162
I0123 13:21:21.793917 139631495815168 ddar.py:60] Depth 5/1000 time = 0.8828363418579102
I0123 13:21:23.213321 139631495815168 ddar.py:60] Depth 6/1000 time = 1.418792724609375
I0123 13:21:23.223721 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:21:23.223783 139631495815168 alphageometry.py:566] LM output (score=-2.326006): "h : C c e h 08 D c h e h 09 ;"
I0123 13:21:23.223820 139631495815168 alphageometry.py:567] Translation: "h = on_line h c e, on_bline h e c"

I0123 13:21:23.223856 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h c e, on_bline h e c ? simtri d b f e a f"
I0123 13:21:23.223972 139631495815168 graph.py:498] 
I0123 13:21:23.224018 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h c e, on_bline h e c ? simtri d b f e a f
I0123 13:21:23.406584 139631495815168 ddar.py:60] Depth 1/1000 time = 0.16988039016723633
I0123 13:21:24.309725 139631495815168 ddar.py:60] Depth 2/1000 time = 0.9030325412750244
I0123 13:21:24.710523 139631495815168 ddar.py:60] Depth 3/1000 time = 0.400637149810791
I0123 13:21:25.722222 139631495815168 ddar.py:60] Depth 4/1000 time = 1.0114974975585938
I0123 13:21:26.178456 139631495815168 ddar.py:60] Depth 5/1000 time = 0.4560070037841797
I0123 13:21:27.198607 139631495815168 ddar.py:60] Depth 6/1000 time = 1.0194664001464844
I0123 13:21:27.716449 139631495815168 ddar.py:60] Depth 7/1000 time = 0.5176036357879639
I0123 13:21:28.852345 139631495815168 ddar.py:60] Depth 8/1000 time = 1.135673999786377
I0123 13:21:30.013870 139631495815168 ddar.py:60] Depth 9/1000 time = 1.1612827777862549
I0123 13:21:30.644076 139631495815168 ddar.py:60] Depth 10/1000 time = 0.6253964900970459
I0123 13:21:31.941487 139631495815168 ddar.py:60] Depth 11/1000 time = 1.2971954345703125
I0123 13:21:32.644734 139631495815168 ddar.py:60] Depth 12/1000 time = 0.7030143737792969
I0123 13:21:33.935727 139631495815168 ddar.py:60] Depth 13/1000 time = 1.2907612323760986
I0123 13:21:35.244825 139631495815168 ddar.py:60] Depth 14/1000 time = 1.3015131950378418
I0123 13:21:35.245207 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:21:35.245263 139631495815168 alphageometry.py:566] LM output (score=-2.375240): "h : P c f g h 08 P c g f h 09 ;"
I0123 13:21:35.245298 139631495815168 alphageometry.py:567] Translation: "h = on_pline h g c f, on_pline h f c g"

I0123 13:21:35.245335 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_pline h g c f, on_pline h f c g ? simtri d b f e a f"
I0123 13:21:35.245462 139631495815168 graph.py:498] 
I0123 13:21:35.245512 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_pline h g c f, on_pline h f c g ? simtri d b f e a f
I0123 13:21:35.446957 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1853184700012207
I0123 13:21:35.860596 139631495815168 ddar.py:60] Depth 2/1000 time = 0.4135475158691406
I0123 13:21:36.570595 139631495815168 ddar.py:60] Depth 3/1000 time = 0.7098884582519531
I0123 13:21:37.909633 139631495815168 ddar.py:60] Depth 4/1000 time = 1.3388288021087646
I0123 13:21:38.690924 139631495815168 ddar.py:60] Depth 5/1000 time = 0.7810580730438232
I0123 13:21:39.477938 139631495815168 ddar.py:60] Depth 6/1000 time = 0.786487340927124
I0123 13:21:40.847761 139631495815168 ddar.py:60] Depth 7/1000 time = 1.36055588722229
I0123 13:21:40.848129 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:21:40.848176 139631495815168 alphageometry.py:566] LM output (score=-2.421799): "h : C d c h 08 D d h c h 09 ;"
I0123 13:21:40.848210 139631495815168 alphageometry.py:567] Translation: "h = on_line h d c, on_bline h c d"

I0123 13:21:40.848245 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h d c, on_bline h c d ? simtri d b f e a f"
I0123 13:21:40.848361 139631495815168 graph.py:498] 
I0123 13:21:40.848407 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h d c, on_bline h c d ? simtri d b f e a f
I0123 13:21:41.027467 139631495815168 ddar.py:60] Depth 1/1000 time = 0.16783881187438965
I0123 13:21:42.003827 139631495815168 ddar.py:60] Depth 2/1000 time = 0.976250171661377
I0123 13:21:42.506083 139631495815168 ddar.py:60] Depth 3/1000 time = 0.5020782947540283
I0123 13:21:43.713239 139631495815168 ddar.py:60] Depth 4/1000 time = 1.2069344520568848
I0123 13:21:44.357262 139631495815168 ddar.py:60] Depth 5/1000 time = 0.6437892913818359
I0123 13:21:45.571620 139631495815168 ddar.py:60] Depth 6/1000 time = 1.213801383972168
I0123 13:21:46.246841 139631495815168 ddar.py:60] Depth 7/1000 time = 0.6653139591217041
I0123 13:21:46.247196 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:21:46.247243 139631495815168 alphageometry.py:566] LM output (score=-2.455993): "h : C d g h 08 D d g g h 09 ;"
I0123 13:21:46.247277 139631495815168 alphageometry.py:567] Translation: "h = on_line h d g, on_circle h g d"

I0123 13:21:46.247312 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h d g, on_circle h g d ? simtri d b f e a f"
I0123 13:21:46.247449 139631495815168 graph.py:498] 
I0123 13:21:46.247495 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h d g, on_circle h g d ? simtri d b f e a f
I0123 13:21:46.423033 139631495815168 ddar.py:60] Depth 1/1000 time = 0.16466259956359863
I0123 13:21:47.440799 139631495815168 ddar.py:60] Depth 2/1000 time = 1.0176606178283691
I0123 13:21:48.014674 139631495815168 ddar.py:60] Depth 3/1000 time = 0.5737037658691406
I0123 13:21:49.230108 139631495815168 ddar.py:60] Depth 4/1000 time = 1.215207576751709
I0123 13:21:49.874099 139631495815168 ddar.py:60] Depth 5/1000 time = 0.6437544822692871
I0123 13:21:50.521841 139631495815168 ddar.py:60] Depth 6/1000 time = 0.6472148895263672
I0123 13:21:51.787930 139631495815168 ddar.py:60] Depth 7/1000 time = 1.2568609714508057
I0123 13:21:51.788419 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:21:51.788487 139631495815168 alphageometry.py:566] LM output (score=-2.558902): "h : C a e h 08 D a h e h 09 ;"
I0123 13:21:51.788522 139631495815168 alphageometry.py:567] Translation: "h = on_line h a e, on_bline h e a"

I0123 13:21:51.788567 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h a e, on_bline h e a ? simtri d b f e a f"
I0123 13:21:51.788704 139631495815168 graph.py:498] 
I0123 13:21:51.788758 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h a e, on_bline h e a ? simtri d b f e a f
I0123 13:21:51.951386 139631495815168 ddar.py:60] Depth 1/1000 time = 0.15147900581359863
I0123 13:21:52.241412 139631495815168 ddar.py:60] Depth 2/1000 time = 0.28993821144104004
I0123 13:21:53.187808 139631495815168 ddar.py:60] Depth 3/1000 time = 0.9462826251983643
I0123 13:21:53.583992 139631495815168 ddar.py:60] Depth 4/1000 time = 0.39595770835876465
I0123 13:21:53.983734 139631495815168 ddar.py:60] Depth 5/1000 time = 0.3995473384857178
I0123 13:21:54.379551 139631495815168 ddar.py:60] Depth 6/1000 time = 0.3953227996826172
I0123 13:21:55.365699 139631495815168 ddar.py:60] Depth 7/1000 time = 0.9808886051177979
I0123 13:21:55.366054 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:21:55.366104 139631495815168 alphageometry.py:566] LM output (score=-2.570830): "h : P c g e h 08 P c e g h 09 ;"
I0123 13:21:55.366139 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2570, in add_clause
    raise DepCheckFailError(
graph.DepCheckFailError: ncoll e c g
"

I0123 13:21:55.366175 139631495815168 alphageometry.py:566] LM output (score=-2.571307): "h : C b g h 08 D b g b h 09 ;"
I0123 13:21:55.366204 139631495815168 alphageometry.py:567] Translation: "h = on_line h b g, on_circle h b g"

I0123 13:21:55.366234 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h b g, on_circle h b g ? simtri d b f e a f"
I0123 13:21:55.366353 139631495815168 graph.py:498] 
I0123 13:21:55.366400 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h b g, on_circle h b g ? simtri d b f e a f
I0123 13:21:55.560464 139631495815168 ddar.py:60] Depth 1/1000 time = 0.18209433555603027
I0123 13:21:55.994199 139631495815168 ddar.py:60] Depth 2/1000 time = 0.4336428642272949
I0123 13:21:57.002447 139631495815168 ddar.py:60] Depth 3/1000 time = 1.0081140995025635
I0123 13:21:57.508669 139631495815168 ddar.py:60] Depth 4/1000 time = 0.506005048751831
I0123 13:21:58.580505 139631495815168 ddar.py:60] Depth 5/1000 time = 1.07163667678833
I0123 13:21:59.676793 139631495815168 ddar.py:60] Depth 6/1000 time = 1.09548020362854
I0123 13:22:00.206182 139631495815168 ddar.py:60] Depth 7/1000 time = 0.525052547454834
I0123 13:22:00.206501 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:22:00.206547 139631495815168 alphageometry.py:566] LM output (score=-2.623303): "h : P c f b h 08 P c h b f 09 ;"
I0123 13:22:00.206581 139631495815168 alphageometry.py:567] Translation: "h = on_pline h b c f, on_pline h c b f"

I0123 13:22:00.206617 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_pline h b c f, on_pline h c b f ? simtri d b f e a f"
I0123 13:22:00.206734 139631495815168 graph.py:498] 
I0123 13:22:00.206781 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_pline h b c f, on_pline h c b f ? simtri d b f e a f
I0123 13:22:00.419530 139631495815168 ddar.py:60] Depth 1/1000 time = 0.19678664207458496
I0123 13:22:01.071173 139631495815168 ddar.py:60] Depth 2/1000 time = 0.6515417098999023
I0123 13:22:02.414304 139631495815168 ddar.py:60] Depth 3/1000 time = 1.3429880142211914
I0123 13:22:03.866917 139631495815168 ddar.py:60] Depth 4/1000 time = 1.452373743057251
I0123 13:22:04.754654 139631495815168 ddar.py:60] Depth 5/1000 time = 0.8874547481536865
I0123 13:22:06.222847 139631495815168 ddar.py:60] Depth 6/1000 time = 1.4675188064575195
I0123 13:22:06.233332 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:22:06.233396 139631495815168 alphageometry.py:566] LM output (score=-2.634322): "h : P c d e h 08 P c e d h 09 ;"
I0123 13:22:06.233432 139631495815168 alphageometry.py:567] Translation: "h = on_pline h e c d, on_pline h d c e"

I0123 13:22:06.233469 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_pline h e c d, on_pline h d c e ? simtri d b f e a f"
I0123 13:22:06.233586 139631495815168 graph.py:498] 
I0123 13:22:06.233632 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_pline h e c d, on_pline h d c e ? simtri d b f e a f
I0123 13:22:06.412333 139631495815168 ddar.py:60] Depth 1/1000 time = 0.16147875785827637
I0123 13:22:06.758945 139631495815168 ddar.py:60] Depth 2/1000 time = 0.3465147018432617
I0123 13:22:07.152083 139631495815168 ddar.py:60] Depth 3/1000 time = 0.3930246829986572
I0123 13:22:08.195676 139631495815168 ddar.py:60] Depth 4/1000 time = 1.0434062480926514
I0123 13:22:08.642626 139631495815168 ddar.py:60] Depth 5/1000 time = 0.44672203063964844
I0123 13:22:09.081315 139631495815168 ddar.py:60] Depth 6/1000 time = 0.43824005126953125
I0123 13:22:09.542979 139631495815168 ddar.py:60] Depth 7/1000 time = 0.4547080993652344
I0123 13:22:09.543294 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:22:09.543355 139631495815168 alphageometry.py:566] LM output (score=-2.757290): "h : P c d g h 08 P c g d h 09 ;"
I0123 13:22:09.543391 139631495815168 alphageometry.py:567] Translation: "h = on_pline h g c d, on_pline h d c g"

I0123 13:22:09.543431 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_pline h g c d, on_pline h d c g ? simtri d b f e a f"
I0123 13:22:09.543577 139631495815168 graph.py:498] 
I0123 13:22:09.543629 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_pline h g c d, on_pline h d c g ? simtri d b f e a f
I0123 13:22:09.722460 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1610581874847412
I0123 13:22:10.710085 139631495815168 ddar.py:60] Depth 2/1000 time = 0.9875178337097168
I0123 13:22:11.187690 139631495815168 ddar.py:60] Depth 3/1000 time = 0.4774057865142822
I0123 13:22:11.710246 139631495815168 ddar.py:60] Depth 4/1000 time = 0.522261381149292
I0123 13:22:12.844942 139631495815168 ddar.py:60] Depth 5/1000 time = 1.1344923973083496
I0123 13:22:13.364810 139631495815168 ddar.py:60] Depth 6/1000 time = 0.5193421840667725
I0123 13:22:13.902874 139631495815168 ddar.py:60] Depth 7/1000 time = 0.5318593978881836
I0123 13:22:13.903182 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:22:13.903233 139631495815168 alphageometry.py:566] LM output (score=-2.776386): "h : C a g h 08 D a g g h 09 ;"
I0123 13:22:13.903267 139631495815168 alphageometry.py:567] Translation: "h = on_line h a g, on_circle h g a"

I0123 13:22:13.903306 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h a g, on_circle h g a ? simtri d b f e a f"
I0123 13:22:13.903433 139631495815168 graph.py:498] 
I0123 13:22:13.903485 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h a g, on_circle h g a ? simtri d b f e a f
I0123 13:22:14.081260 139631495815168 ddar.py:60] Depth 1/1000 time = 0.16666483879089355
I0123 13:22:14.516378 139631495815168 ddar.py:60] Depth 2/1000 time = 0.43502259254455566
I0123 13:22:15.572764 139631495815168 ddar.py:60] Depth 3/1000 time = 1.056251049041748
I0123 13:22:16.111508 139631495815168 ddar.py:60] Depth 4/1000 time = 0.5385274887084961
I0123 13:22:17.247752 139631495815168 ddar.py:60] Depth 5/1000 time = 1.1360421180725098
I0123 13:22:17.789101 139631495815168 ddar.py:60] Depth 6/1000 time = 0.5408170223236084
I0123 13:22:18.345911 139631495815168 ddar.py:60] Depth 7/1000 time = 0.5482125282287598
I0123 13:22:18.346227 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:22:18.346277 139631495815168 alphageometry.py:566] LM output (score=-2.846653): "h : P c e d h 08 P c h d e 09 ;"
I0123 13:22:18.346310 139631495815168 alphageometry.py:567] Translation: "h = on_pline h d c e, on_pline h c d e"

I0123 13:22:18.346348 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_pline h d c e, on_pline h c d e ? simtri d b f e a f"
I0123 13:22:18.346468 139631495815168 graph.py:498] 
I0123 13:22:18.346516 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_pline h d c e, on_pline h c d e ? simtri d b f e a f
I0123 13:22:18.521886 139631495815168 ddar.py:60] Depth 1/1000 time = 0.15797710418701172
I0123 13:22:18.868116 139631495815168 ddar.py:60] Depth 2/1000 time = 0.3461334705352783
I0123 13:22:19.823079 139631495815168 ddar.py:60] Depth 3/1000 time = 0.954843282699585
I0123 13:22:20.243072 139631495815168 ddar.py:60] Depth 4/1000 time = 0.4197673797607422
I0123 13:22:20.664445 139631495815168 ddar.py:60] Depth 5/1000 time = 0.42119693756103516
I0123 13:22:21.661737 139631495815168 ddar.py:60] Depth 6/1000 time = 0.996845006942749
I0123 13:22:22.092859 139631495815168 ddar.py:60] Depth 7/1000 time = 0.42557835578918457
I0123 13:22:22.093163 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:22:22.093226 139631495815168 alphageometry.py:566] LM output (score=-2.852614): "h : P c g f h 08 P c h g f 09 ;"
I0123 13:22:22.093261 139631495815168 alphageometry.py:567] Translation: "h = on_pline h f c g, on_pline h c g f"

I0123 13:22:22.093297 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_pline h f c g, on_pline h c g f ? simtri d b f e a f"
I0123 13:22:22.093415 139631495815168 graph.py:498] 
I0123 13:22:22.093461 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_pline h f c g, on_pline h c g f ? simtri d b f e a f
I0123 13:22:22.266345 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1557302474975586
I0123 13:22:22.741844 139631495815168 ddar.py:60] Depth 2/1000 time = 0.4754068851470947
I0123 13:22:23.281222 139631495815168 ddar.py:60] Depth 3/1000 time = 0.5392670631408691
I0123 13:22:24.471384 139631495815168 ddar.py:60] Depth 4/1000 time = 1.1899521350860596
I0123 13:22:25.084028 139631495815168 ddar.py:60] Depth 5/1000 time = 0.6124167442321777
I0123 13:22:25.698499 139631495815168 ddar.py:60] Depth 6/1000 time = 0.6139712333679199
I0123 13:22:26.924937 139631495815168 ddar.py:60] Depth 7/1000 time = 1.220353603363037
I0123 13:22:26.925281 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:22:26.925329 139631495815168 alphageometry.py:566] LM output (score=-2.861751): "h : C c g h 08 D c g c h 09 ;"
I0123 13:22:26.925363 139631495815168 alphageometry.py:567] Translation: "h = on_line h c g, on_circle h c g"

I0123 13:22:26.925398 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h c g, on_circle h c g ? simtri d b f e a f"
I0123 13:22:26.925513 139631495815168 graph.py:498] 
I0123 13:22:26.925558 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h c g, on_circle h c g ? simtri d b f e a f
I0123 13:22:27.106679 139631495815168 ddar.py:60] Depth 1/1000 time = 0.16917681694030762
I0123 13:22:27.464830 139631495815168 ddar.py:60] Depth 2/1000 time = 0.35805678367614746
I0123 13:22:28.475550 139631495815168 ddar.py:60] Depth 3/1000 time = 1.0105912685394287
I0123 13:22:28.944708 139631495815168 ddar.py:60] Depth 4/1000 time = 0.4689147472381592
I0123 13:22:30.032326 139631495815168 ddar.py:60] Depth 5/1000 time = 1.0873713493347168
I0123 13:22:30.513541 139631495815168 ddar.py:60] Depth 6/1000 time = 0.4803009033203125
I0123 13:22:31.643059 139631495815168 ddar.py:60] Depth 7/1000 time = 1.1251816749572754
I0123 13:22:31.643450 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:22:31.643507 139631495815168 alphageometry.py:566] LM output (score=-2.885955): "h : P c g f h 08 P c h f g 09 ;"
I0123 13:22:31.643544 139631495815168 alphageometry.py:567] Translation: "h = on_pline h f c g, on_pline h c f g"

I0123 13:22:31.643584 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_pline h f c g, on_pline h c f g ? simtri d b f e a f"
I0123 13:22:31.643724 139631495815168 graph.py:498] 
I0123 13:22:31.643785 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_pline h f c g, on_pline h c f g ? simtri d b f e a f
I0123 13:22:31.814274 139631495815168 ddar.py:60] Depth 1/1000 time = 0.15264201164245605
I0123 13:22:32.287293 139631495815168 ddar.py:60] Depth 2/1000 time = 0.4729137420654297
I0123 13:22:32.916296 139631495815168 ddar.py:60] Depth 3/1000 time = 0.6288862228393555
I0123 13:22:34.123380 139631495815168 ddar.py:60] Depth 4/1000 time = 1.2068874835968018
I0123 13:22:34.725475 139631495815168 ddar.py:60] Depth 5/1000 time = 0.601870059967041
I0123 13:22:35.334097 139631495815168 ddar.py:60] Depth 6/1000 time = 0.6081318855285645
I0123 13:22:36.556854 139631495815168 ddar.py:60] Depth 7/1000 time = 1.216705083847046
I0123 13:22:36.557206 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:22:36.557254 139631495815168 alphageometry.py:566] LM output (score=-3.036089): "h : C b c h 08 D b h c h 09 ;"
I0123 13:22:36.557289 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 13:22:36.557325 139631495815168 alphageometry.py:566] LM output (score=-3.290981): "h : C b c h 08 D b c b h 09 ;"
I0123 13:22:36.557352 139631495815168 alphageometry.py:567] Translation: "h = on_line h b c, on_circle h b c"

I0123 13:22:36.557382 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h b c, on_circle h b c ? simtri d b f e a f"
I0123 13:22:36.557497 139631495815168 graph.py:498] 
I0123 13:22:36.557543 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_line g c b, on_bline g b c; h = on_line h b c, on_circle h b c ? simtri d b f e a f
I0123 13:22:36.739931 139631495815168 ddar.py:60] Depth 1/1000 time = 0.16869258880615234
I0123 13:22:37.086979 139631495815168 ddar.py:60] Depth 2/1000 time = 0.3469545841217041
I0123 13:22:38.076905 139631495815168 ddar.py:60] Depth 3/1000 time = 0.9897983074188232
I0123 13:22:38.532513 139631495815168 ddar.py:60] Depth 4/1000 time = 0.4553868770599365
I0123 13:22:39.584514 139631495815168 ddar.py:60] Depth 5/1000 time = 1.0517923831939697
I0123 13:22:40.047228 139631495815168 ddar.py:60] Depth 6/1000 time = 0.461651086807251
I0123 13:22:41.119992 139631495815168 ddar.py:60] Depth 7/1000 time = 1.0674872398376465
I0123 13:22:41.120332 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:22:41.120380 139631495815168 alphageometry.py:566] LM output (score=-3.349736): "h : P c e c h 08 P g f g h 09 ;"
I0123 13:22:41.120415 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c e c h"

I0123 13:22:41.120453 139631495815168 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C a c d 00 T a b b d 01 ; e : C b c e 02 T a b a e 03 ; f : C a b f 04 T a b c f 05 ? S d b f e a f {F1} x00 g : P a b e g 06 ; x00
I0123 13:22:44.549908 139631495815168 alphageometry.py:566] LM output (score=-0.674971): "h : P c e g h 07 P c h e g 08 ;"
I0123 13:22:44.550060 139631495815168 alphageometry.py:567] Translation: "h = on_pline h g c e, on_pline h c e g"

I0123 13:22:44.550102 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h g c e, on_pline h c e g ? simtri d b f e a f"
I0123 13:22:44.550216 139631495815168 graph.py:498] 
I0123 13:22:44.550264 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h g c e, on_pline h c e g ? simtri d b f e a f
I0123 13:22:44.692936 139631495815168 ddar.py:60] Depth 1/1000 time = 0.12157845497131348
I0123 13:22:44.868148 139631495815168 ddar.py:60] Depth 2/1000 time = 0.1751258373260498
I0123 13:22:45.061660 139631495815168 ddar.py:60] Depth 3/1000 time = 0.1934189796447754
I0123 13:22:45.293089 139631495815168 ddar.py:60] Depth 4/1000 time = 0.23128676414489746
I0123 13:22:45.522909 139631495815168 ddar.py:60] Depth 5/1000 time = 0.22968220710754395
I0123 13:22:45.527118 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:22:45.527168 139631495815168 alphageometry.py:566] LM output (score=-1.082986): "h : P c h e g 07 ;"
I0123 13:22:45.527203 139631495815168 alphageometry.py:567] Translation: "h = on_pline h c e g"

I0123 13:22:45.527235 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h c e g ? simtri d b f e a f"
I0123 13:22:45.527335 139631495815168 graph.py:498] 
I0123 13:22:45.527380 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h c e g ? simtri d b f e a f
I0123 13:22:45.628523 139631495815168 ddar.py:60] Depth 1/1000 time = 0.08700346946716309
I0123 13:22:45.745724 139631495815168 ddar.py:60] Depth 2/1000 time = 0.11712026596069336
I0123 13:22:45.874181 139631495815168 ddar.py:60] Depth 3/1000 time = 0.12837743759155273
I0123 13:22:46.032485 139631495815168 ddar.py:60] Depth 4/1000 time = 0.1581721305847168
I0123 13:22:46.192896 139631495815168 ddar.py:60] Depth 5/1000 time = 0.16028475761413574
I0123 13:22:46.196012 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:22:46.196058 139631495815168 alphageometry.py:566] LM output (score=-1.493120): "h : P c f e h 07 P e g e h 08 ;"
I0123 13:22:46.196092 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P e g e h"

I0123 13:22:46.196124 139631495815168 alphageometry.py:566] LM output (score=-1.902227): "h : P c g e h 07 P c h e g 08 ;"
I0123 13:22:46.196151 139631495815168 alphageometry.py:567] Translation: "h = on_pline h e c g, on_pline h c e g"

I0123 13:22:46.196181 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h e c g, on_pline h c e g ? simtri d b f e a f"
I0123 13:22:46.196280 139631495815168 graph.py:498] 
I0123 13:22:46.196323 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h e c g, on_pline h c e g ? simtri d b f e a f
I0123 13:22:46.334618 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1181190013885498
I0123 13:22:46.498256 139631495815168 ddar.py:60] Depth 2/1000 time = 0.16355562210083008
I0123 13:22:46.678094 139631495815168 ddar.py:60] Depth 3/1000 time = 0.17975687980651855
I0123 13:22:46.887889 139631495815168 ddar.py:60] Depth 4/1000 time = 0.2096576690673828
I0123 13:22:47.108946 139631495815168 ddar.py:60] Depth 5/1000 time = 0.22092747688293457
I0123 13:22:47.113190 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:22:47.113238 139631495815168 alphageometry.py:566] LM output (score=-1.946056): "h : P c f e h 07 ;"
I0123 13:22:47.113273 139631495815168 alphageometry.py:567] Translation: "h = on_pline h e c f"

I0123 13:22:47.113305 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h e c f ? simtri d b f e a f"
I0123 13:22:47.113402 139631495815168 graph.py:498] 
I0123 13:22:47.113445 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h e c f ? simtri d b f e a f
I0123 13:22:47.215383 139631495815168 ddar.py:60] Depth 1/1000 time = 0.08830118179321289
I0123 13:22:47.355756 139631495815168 ddar.py:60] Depth 2/1000 time = 0.14028000831604004
I0123 13:22:47.507865 139631495815168 ddar.py:60] Depth 3/1000 time = 0.1520237922668457
I0123 13:22:47.691141 139631495815168 ddar.py:60] Depth 4/1000 time = 0.18313908576965332
I0123 13:22:47.877634 139631495815168 ddar.py:60] Depth 5/1000 time = 0.18635940551757812
I0123 13:22:47.880962 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:22:47.881007 139631495815168 alphageometry.py:566] LM output (score=-1.972223): "h : P c e f h 07 P c f e h 08 ;"
I0123 13:22:47.881042 139631495815168 alphageometry.py:567] Translation: "h = on_pline h f c e, on_pline h e c f"

I0123 13:22:47.881074 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h f c e, on_pline h e c f ? simtri d b f e a f"
I0123 13:22:47.881176 139631495815168 graph.py:498] 
I0123 13:22:47.881220 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h f c e, on_pline h e c f ? simtri d b f e a f
I0123 13:22:48.024256 139631495815168 ddar.py:60] Depth 1/1000 time = 0.12323117256164551
I0123 13:22:48.266858 139631495815168 ddar.py:60] Depth 2/1000 time = 0.24251413345336914
I0123 13:22:48.565845 139631495815168 ddar.py:60] Depth 3/1000 time = 0.29889822006225586
I0123 13:22:48.900653 139631495815168 ddar.py:60] Depth 4/1000 time = 0.33465576171875
I0123 13:22:49.239654 139631495815168 ddar.py:60] Depth 5/1000 time = 0.33886170387268066
I0123 13:22:49.247849 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:22:49.247896 139631495815168 alphageometry.py:566] LM output (score=-1.998869): "h : P b c c h 07 T c e g h 08 ;"
I0123 13:22:49.247929 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b c c h"

I0123 13:22:49.247959 139631495815168 alphageometry.py:566] LM output (score=-2.009131): "h : P c e d h 07 P c h d e 08 ;"
I0123 13:22:49.247985 139631495815168 alphageometry.py:567] Translation: "h = on_pline h d c e, on_pline h c d e"

I0123 13:22:49.248013 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h d c e, on_pline h c d e ? simtri d b f e a f"
I0123 13:22:49.248112 139631495815168 graph.py:498] 
I0123 13:22:49.248154 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h d c e, on_pline h c d e ? simtri d b f e a f
I0123 13:22:49.373113 139631495815168 ddar.py:60] Depth 1/1000 time = 0.10395026206970215
I0123 13:22:49.524339 139631495815168 ddar.py:60] Depth 2/1000 time = 0.15114045143127441
I0123 13:22:49.692553 139631495815168 ddar.py:60] Depth 3/1000 time = 0.16813039779663086
I0123 13:22:49.891901 139631495815168 ddar.py:60] Depth 4/1000 time = 0.19920921325683594
I0123 13:22:50.095064 139631495815168 ddar.py:60] Depth 5/1000 time = 0.20302581787109375
I0123 13:22:50.099442 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:22:50.099488 139631495815168 alphageometry.py:566] LM output (score=-2.041141): "h : P c e c h 07 P e g e h 08 ;"
I0123 13:22:50.099522 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c e c h"

I0123 13:22:50.099553 139631495815168 alphageometry.py:566] LM output (score=-2.104367): "h : P c d e h 07 P c e d h 08 ;"
I0123 13:22:50.099581 139631495815168 alphageometry.py:567] Translation: "h = on_pline h e c d, on_pline h d c e"

I0123 13:22:50.099609 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h e c d, on_pline h d c e ? simtri d b f e a f"
I0123 13:22:50.099717 139631495815168 graph.py:498] 
I0123 13:22:50.099760 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h e c d, on_pline h d c e ? simtri d b f e a f
I0123 13:22:50.230215 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1096036434173584
I0123 13:22:50.392819 139631495815168 ddar.py:60] Depth 2/1000 time = 0.16251087188720703
I0123 13:22:50.572205 139631495815168 ddar.py:60] Depth 3/1000 time = 0.17929887771606445
I0123 13:22:50.785489 139631495815168 ddar.py:60] Depth 4/1000 time = 0.21314644813537598
I0123 13:22:50.997572 139631495815168 ddar.py:60] Depth 5/1000 time = 0.21195125579833984
I0123 13:22:51.002957 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:22:51.003004 139631495815168 alphageometry.py:566] LM output (score=-2.152169): "h : P c f e h 07 P c h e g 08 ;"
I0123 13:22:51.003037 139631495815168 alphageometry.py:567] Translation: "h = on_pline h e c f, on_pline h c e g"

I0123 13:22:51.003069 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h e c f, on_pline h c e g ? simtri d b f e a f"
I0123 13:22:51.003171 139631495815168 graph.py:498] 
I0123 13:22:51.003214 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h e c f, on_pline h c e g ? simtri d b f e a f
I0123 13:22:51.161467 139631495815168 ddar.py:60] Depth 1/1000 time = 0.13945722579956055
I0123 13:22:51.427225 139631495815168 ddar.py:60] Depth 2/1000 time = 0.2656702995300293
I0123 13:22:51.771723 139631495815168 ddar.py:60] Depth 3/1000 time = 0.34441161155700684
I0123 13:22:52.225707 139631495815168 ddar.py:60] Depth 4/1000 time = 0.45383524894714355
I0123 13:22:52.694684 139631495815168 ddar.py:60] Depth 5/1000 time = 0.4688291549682617
I0123 13:22:52.705146 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:22:52.705196 139631495815168 alphageometry.py:566] LM output (score=-2.196610): "h : P c f c h 07 P e g e h 08 ;"
I0123 13:22:52.705230 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c f c h"

I0123 13:22:52.705263 139631495815168 alphageometry.py:566] LM output (score=-2.515060): "h : P b c d h 07 T e g e h 08 ;"
I0123 13:22:52.705292 139631495815168 alphageometry.py:567] Translation: "h = on_pline h d b c, on_tline h e e g"

I0123 13:22:52.705321 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h d b c, on_tline h e e g ? simtri d b f e a f"
I0123 13:22:52.705424 139631495815168 graph.py:498] 
I0123 13:22:52.705467 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h d b c, on_tline h e e g ? simtri d b f e a f
I0123 13:22:52.834014 139631495815168 ddar.py:60] Depth 1/1000 time = 0.10895800590515137
I0123 13:22:53.054291 139631495815168 ddar.py:60] Depth 2/1000 time = 0.22018980979919434
I0123 13:22:53.322902 139631495815168 ddar.py:60] Depth 3/1000 time = 0.2685220241546631
I0123 13:22:53.643378 139631495815168 ddar.py:60] Depth 4/1000 time = 0.320328950881958
I0123 13:22:53.977857 139631495815168 ddar.py:60] Depth 5/1000 time = 0.3343393802642822
I0123 13:22:53.985803 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:22:53.985852 139631495815168 alphageometry.py:566] LM output (score=-2.521766): "h : P c g d h 07 P c h d g 08 ;"
I0123 13:22:53.985887 139631495815168 alphageometry.py:567] Translation: "h = on_pline h d c g, on_pline h c d g"

I0123 13:22:53.985920 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h d c g, on_pline h c d g ? simtri d b f e a f"
I0123 13:22:53.986033 139631495815168 graph.py:498] 
I0123 13:22:53.986078 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h d c g, on_pline h c d g ? simtri d b f e a f
I0123 13:22:54.104595 139631495815168 ddar.py:60] Depth 1/1000 time = 0.09722208976745605
I0123 13:22:54.251948 139631495815168 ddar.py:60] Depth 2/1000 time = 0.14726948738098145
I0123 13:22:54.409075 139631495815168 ddar.py:60] Depth 3/1000 time = 0.15704560279846191
I0123 13:22:54.594901 139631495815168 ddar.py:60] Depth 4/1000 time = 0.18568873405456543
I0123 13:22:54.783418 139631495815168 ddar.py:60] Depth 5/1000 time = 0.1883847713470459
I0123 13:22:54.787687 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:22:54.787734 139631495815168 alphageometry.py:566] LM output (score=-2.545627): "h : P c d e h 07 T e g e h 08 ;"
I0123 13:22:54.787768 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 13:22:54.787802 139631495815168 alphageometry.py:566] LM output (score=-2.563498): "h : P c f e h 07 P c e f h 08 ;"
I0123 13:22:54.787830 139631495815168 alphageometry.py:567] Translation: "h = on_pline h e c f, on_pline h f c e"

I0123 13:22:54.787860 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h e c f, on_pline h f c e ? simtri d b f e a f"
I0123 13:22:54.787961 139631495815168 graph.py:498] 
I0123 13:22:54.788005 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h e c f, on_pline h f c e ? simtri d b f e a f
I0123 13:22:54.932757 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1249237060546875
I0123 13:22:55.174711 139631495815168 ddar.py:60] Depth 2/1000 time = 0.2418684959411621
I0123 13:22:55.473898 139631495815168 ddar.py:60] Depth 3/1000 time = 0.29909610748291016
I0123 13:22:55.808755 139631495815168 ddar.py:60] Depth 4/1000 time = 0.3347048759460449
I0123 13:22:56.150913 139631495815168 ddar.py:60] Depth 5/1000 time = 0.3420119285583496
I0123 13:22:56.158819 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:22:56.158868 139631495815168 alphageometry.py:566] LM output (score=-2.586970): "h : P c e g h 07 P c g e h 08 ;"
I0123 13:22:56.158901 139631495815168 alphageometry.py:567] Translation: "h = on_pline h g c e, on_pline h e c g"

I0123 13:22:56.158935 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h g c e, on_pline h e c g ? simtri d b f e a f"
I0123 13:22:56.159039 139631495815168 graph.py:498] 
I0123 13:22:56.159084 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h g c e, on_pline h e c g ? simtri d b f e a f
I0123 13:22:56.281130 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1009981632232666
I0123 13:22:56.429820 139631495815168 ddar.py:60] Depth 2/1000 time = 0.1486053466796875
I0123 13:22:56.589380 139631495815168 ddar.py:60] Depth 3/1000 time = 0.15947747230529785
I0123 13:22:56.781278 139631495815168 ddar.py:60] Depth 4/1000 time = 0.19176030158996582
I0123 13:22:56.973441 139631495815168 ddar.py:60] Depth 5/1000 time = 0.19202256202697754
I0123 13:22:56.977636 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:22:56.977687 139631495815168 alphageometry.py:566] LM output (score=-2.599945): "h : P c f c h 07 T c h e g 08 ;"
I0123 13:22:56.977728 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c f c h"

I0123 13:22:56.977758 139631495815168 alphageometry.py:566] LM output (score=-2.623351): "h : P c g e h 07 P c e g h 08 ;"
I0123 13:22:56.977785 139631495815168 alphageometry.py:567] Translation: "h = on_pline h e c g, on_pline h g c e"

I0123 13:22:56.977814 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h e c g, on_pline h g c e ? simtri d b f e a f"
I0123 13:22:56.977916 139631495815168 graph.py:498] 
I0123 13:22:56.977959 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h e c g, on_pline h g c e ? simtri d b f e a f
I0123 13:22:57.100357 139631495815168 ddar.py:60] Depth 1/1000 time = 0.10171842575073242
I0123 13:22:57.246908 139631495815168 ddar.py:60] Depth 2/1000 time = 0.14646506309509277
I0123 13:22:57.409859 139631495815168 ddar.py:60] Depth 3/1000 time = 0.16286778450012207
I0123 13:22:57.600934 139631495815168 ddar.py:60] Depth 4/1000 time = 0.19094181060791016
I0123 13:22:57.796850 139631495815168 ddar.py:60] Depth 5/1000 time = 0.19578766822814941
I0123 13:22:57.802055 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:22:57.802102 139631495815168 alphageometry.py:566] LM output (score=-2.660082): "h : P c a e h 07 P c e a h 08 ;"
I0123 13:22:57.802134 139631495815168 alphageometry.py:567] Translation: "h = on_pline h e c a, on_pline h a c e"

I0123 13:22:57.802165 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h e c a, on_pline h a c e ? simtri d b f e a f"
I0123 13:22:57.802264 139631495815168 graph.py:498] 
I0123 13:22:57.802307 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h e c a, on_pline h a c e ? simtri d b f e a f
I0123 13:22:57.943315 139631495815168 ddar.py:60] Depth 1/1000 time = 0.12015938758850098
I0123 13:22:58.106281 139631495815168 ddar.py:60] Depth 2/1000 time = 0.16287899017333984
I0123 13:22:58.283954 139631495815168 ddar.py:60] Depth 3/1000 time = 0.17758870124816895
I0123 13:22:58.491683 139631495815168 ddar.py:60] Depth 4/1000 time = 0.2075939178466797
I0123 13:22:58.701110 139631495815168 ddar.py:60] Depth 5/1000 time = 0.20929789543151855
I0123 13:22:58.706788 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:22:58.706836 139631495815168 alphageometry.py:566] LM output (score=-2.666285): "h : P c d g h 07 T g h e h 08 ;"
I0123 13:22:58.706870 139631495815168 alphageometry.py:567] Translation: "h = on_pline h g c d, on_dia h e g"

I0123 13:22:58.706902 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h g c d, on_dia h e g ? simtri d b f e a f"
I0123 13:22:58.707000 139631495815168 graph.py:498] 
I0123 13:22:58.707043 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h g c d, on_dia h e g ? simtri d b f e a f
I0123 13:22:58.804705 139631495815168 ddar.py:60] Depth 1/1000 time = 0.07907724380493164
I0123 13:22:58.946988 139631495815168 ddar.py:60] Depth 2/1000 time = 0.142195463180542
I0123 13:22:59.101559 139631495815168 ddar.py:60] Depth 3/1000 time = 0.1544814109802246
I0123 13:22:59.291212 139631495815168 ddar.py:60] Depth 4/1000 time = 0.18950510025024414
I0123 13:22:59.484089 139631495815168 ddar.py:60] Depth 5/1000 time = 0.19274258613586426
I0123 13:22:59.488397 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:22:59.488444 139631495815168 alphageometry.py:566] LM output (score=-2.733183): "h : D c e g h 07 D c h e g 08 ;"
I0123 13:22:59.488477 139631495815168 alphageometry.py:567] Translation: "h = eqdistance h g c e, eqdistance h c e g"

I0123 13:22:59.488508 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = eqdistance h g c e, eqdistance h c e g ? simtri d b f e a f"
I0123 13:22:59.488609 139631495815168 graph.py:498] 
I0123 13:22:59.488651 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = eqdistance h g c e, eqdistance h c e g ? simtri d b f e a f
I0123 13:22:59.610668 139631495815168 ddar.py:60] Depth 1/1000 time = 0.10958743095397949
I0123 13:22:59.756506 139631495815168 ddar.py:60] Depth 2/1000 time = 0.14575529098510742
I0123 13:22:59.925609 139631495815168 ddar.py:60] Depth 3/1000 time = 0.1690196990966797
I0123 13:23:00.142785 139631495815168 ddar.py:60] Depth 4/1000 time = 0.2170255184173584
I0123 13:23:00.361107 139631495815168 ddar.py:60] Depth 5/1000 time = 0.218184232711792
I0123 13:23:00.366288 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:23:00.366336 139631495815168 alphageometry.py:566] LM output (score=-2.738453): "h : P c e d h 07 P d h e g 08 ;"
I0123 13:23:00.366370 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 13:23:00.366402 139631495815168 alphageometry.py:566] LM output (score=-2.783310): "h : P c e g h 07 P d h e g 08 ;"
I0123 13:23:00.366430 139631495815168 alphageometry.py:567] Translation: "h = on_pline h g c e, on_pline h d e g"

I0123 13:23:00.366459 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h g c e, on_pline h d e g ? simtri d b f e a f"
I0123 13:23:00.366557 139631495815168 graph.py:498] 
I0123 13:23:00.366599 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h g c e, on_pline h d e g ? simtri d b f e a f
I0123 13:23:00.486850 139631495815168 ddar.py:60] Depth 1/1000 time = 0.10033011436462402
I0123 13:23:00.617313 139631495815168 ddar.py:60] Depth 2/1000 time = 0.13037896156311035
I0123 13:23:00.760680 139631495815168 ddar.py:60] Depth 3/1000 time = 0.14328455924987793
I0123 13:23:00.935647 139631495815168 ddar.py:60] Depth 4/1000 time = 0.17483139038085938
I0123 13:23:01.113248 139631495815168 ddar.py:60] Depth 5/1000 time = 0.1774752140045166
I0123 13:23:01.116513 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:23:01.116559 139631495815168 alphageometry.py:566] LM output (score=-2.813069): "h : P c d c h 07 T c h e g 08 ;"
I0123 13:23:01.116593 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c d c h"

I0123 13:23:01.116626 139631495815168 alphageometry.py:566] LM output (score=-2.843342): "h : P a c c h 07 T c h e g 08 ;"
I0123 13:23:01.116654 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P a c c h"

I0123 13:23:01.116690 139631495815168 alphageometry.py:566] LM output (score=-2.871422): "h : P c f e h 07 P e g g h 08 ;"
I0123 13:23:01.116719 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P e g g h"

I0123 13:23:01.116746 139631495815168 alphageometry.py:566] LM output (score=-2.909929): "h : P c d e h 07 ;"
I0123 13:23:01.116771 139631495815168 alphageometry.py:567] Translation: "h = on_pline h e c d"

I0123 13:23:01.116798 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h e c d ? simtri d b f e a f"
I0123 13:23:01.116893 139631495815168 graph.py:498] 
I0123 13:23:01.116935 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h e c d ? simtri d b f e a f
I0123 13:23:01.203290 139631495815168 ddar.py:60] Depth 1/1000 time = 0.07192230224609375
I0123 13:23:01.304078 139631495815168 ddar.py:60] Depth 2/1000 time = 0.10070514678955078
I0123 13:23:01.417971 139631495815168 ddar.py:60] Depth 3/1000 time = 0.11381387710571289
I0123 13:23:01.565549 139631495815168 ddar.py:60] Depth 4/1000 time = 0.14744353294372559
I0123 13:23:01.708695 139631495815168 ddar.py:60] Depth 5/1000 time = 0.14300990104675293
I0123 13:23:01.711547 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:23:01.711595 139631495815168 alphageometry.py:566] LM output (score=-2.986140): "h : P c f g h 07 P c h e g 08 ;"
I0123 13:23:01.711628 139631495815168 alphageometry.py:567] Translation: "h = on_pline h g c f, on_pline h c e g"

I0123 13:23:01.711661 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h g c f, on_pline h c e g ? simtri d b f e a f"
I0123 13:23:01.711760 139631495815168 graph.py:498] 
I0123 13:23:01.711804 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h g c f, on_pline h c e g ? simtri d b f e a f
I0123 13:23:01.860741 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1300814151763916
I0123 13:23:02.022322 139631495815168 ddar.py:60] Depth 2/1000 time = 0.16149592399597168
I0123 13:23:02.197314 139631495815168 ddar.py:60] Depth 3/1000 time = 0.1749117374420166
I0123 13:23:02.401460 139631495815168 ddar.py:60] Depth 4/1000 time = 0.2040119171142578
I0123 13:23:02.608475 139631495815168 ddar.py:60] Depth 5/1000 time = 0.20688700675964355
I0123 13:23:02.611860 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:23:02.611909 139631495815168 alphageometry.py:566] LM output (score=-2.987467): "h : P b c g h 07 T c h e g 08 ;"
I0123 13:23:02.611944 139631495815168 alphageometry.py:567] Translation: "h = on_pline h g b c, on_tline h c e g"

I0123 13:23:02.611978 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h g b c, on_tline h c e g ? simtri d b f e a f"
I0123 13:23:02.612083 139631495815168 graph.py:498] 
I0123 13:23:02.612127 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h g b c, on_tline h c e g ? simtri d b f e a f
I0123 13:23:02.725160 139631495815168 ddar.py:60] Depth 1/1000 time = 0.09235978126525879
I0123 13:23:02.862457 139631495815168 ddar.py:60] Depth 2/1000 time = 0.13721537590026855
I0123 13:23:03.011824 139631495815168 ddar.py:60] Depth 3/1000 time = 0.14928221702575684
I0123 13:23:03.192352 139631495815168 ddar.py:60] Depth 4/1000 time = 0.1803898811340332
I0123 13:23:03.376221 139631495815168 ddar.py:60] Depth 5/1000 time = 0.18373560905456543
I0123 13:23:03.379837 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:23:03.379883 139631495815168 alphageometry.py:566] LM output (score=-3.040814): "h : P c e g h 07 P c h g e 08 ;"
I0123 13:23:03.379915 139631495815168 alphageometry.py:567] Translation: "h = on_pline h g c e, on_pline h c g e"

I0123 13:23:03.379946 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h g c e, on_pline h c g e ? simtri d b f e a f"
I0123 13:23:03.380045 139631495815168 graph.py:498] 
I0123 13:23:03.380086 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h g c e, on_pline h c g e ? simtri d b f e a f
I0123 13:23:03.523274 139631495815168 ddar.py:60] Depth 1/1000 time = 0.12343096733093262
I0123 13:23:03.695497 139631495815168 ddar.py:60] Depth 2/1000 time = 0.17213773727416992
I0123 13:23:03.885658 139631495815168 ddar.py:60] Depth 3/1000 time = 0.19007062911987305
I0123 13:23:04.106256 139631495815168 ddar.py:60] Depth 4/1000 time = 0.2204606533050537
I0123 13:23:04.330674 139631495815168 ddar.py:60] Depth 5/1000 time = 0.2242894172668457
I0123 13:23:04.335574 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:23:04.335621 139631495815168 alphageometry.py:566] LM output (score=-3.052170): "h : P c f g h 07 P c h g e 08 ;"
I0123 13:23:04.335654 139631495815168 alphageometry.py:567] Translation: "h = on_pline h g c f, on_pline h c g e"

I0123 13:23:04.335687 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h g c f, on_pline h c g e ? simtri d b f e a f"
I0123 13:23:04.335786 139631495815168 graph.py:498] 
I0123 13:23:04.335829 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a b; h = on_pline h g c f, on_pline h c g e ? simtri d b f e a f
I0123 13:23:04.483330 139631495815168 ddar.py:60] Depth 1/1000 time = 0.12856578826904297
I0123 13:23:04.646129 139631495815168 ddar.py:60] Depth 2/1000 time = 0.16271328926086426
I0123 13:23:04.823917 139631495815168 ddar.py:60] Depth 3/1000 time = 0.17770624160766602
I0123 13:23:05.032557 139631495815168 ddar.py:60] Depth 4/1000 time = 0.20850133895874023
I0123 13:23:05.241582 139631495815168 ddar.py:60] Depth 5/1000 time = 0.2088937759399414
I0123 13:23:05.244941 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:23:05.244992 139631495815168 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C a c d 00 T a b b d 01 ; e : C b c e 02 T a b a e 03 ; f : C a b f 04 T a b c f 05 ? S d b f e a f {F1} x00 g : P a c e g 06 P a g c e 07 ; x00
I0123 13:23:10.977365 139631495815168 alphageometry.py:566] LM output (score=-0.006819): "h : C c g h 08 D c h g h 09 ;"
I0123 13:23:10.977503 139631495815168 alphageometry.py:567] Translation: "h = on_line h c g, on_bline h g c"

I0123 13:23:10.977545 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_line h c g, on_bline h g c ? simtri d b f e a f"
I0123 13:23:10.977671 139631495815168 graph.py:498] 
I0123 13:23:10.977721 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_line h c g, on_bline h g c ? simtri d b f e a f
I0123 13:23:11.145861 139631495815168 ddar.py:60] Depth 1/1000 time = 0.15085339546203613
I0123 13:23:11.406926 139631495815168 ddar.py:60] Depth 2/1000 time = 0.26097702980041504
I0123 13:23:11.677319 139631495815168 ddar.py:60] Depth 3/1000 time = 0.2702968120574951
I0123 13:23:11.985858 139631495815168 ddar.py:60] Depth 4/1000 time = 0.30839967727661133
I0123 13:23:12.295718 139631495815168 ddar.py:60] Depth 5/1000 time = 0.3097257614135742
I0123 13:23:12.606248 139631495815168 ddar.py:60] Depth 6/1000 time = 0.3101541996002197
I0123 13:23:12.612653 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:23:12.612702 139631495815168 alphageometry.py:566] LM output (score=-2.730893): "h : C b g h 08 D b h g h 09 ;"
I0123 13:23:12.612737 139631495815168 alphageometry.py:567] Translation: "h = on_line h b g, on_bline h g b"

I0123 13:23:12.612771 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_line h b g, on_bline h g b ? simtri d b f e a f"
I0123 13:23:12.612875 139631495815168 graph.py:498] 
I0123 13:23:12.612920 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_line h b g, on_bline h g b ? simtri d b f e a f
I0123 13:23:12.764895 139631495815168 ddar.py:60] Depth 1/1000 time = 0.13551664352416992
I0123 13:23:13.563792 139631495815168 ddar.py:60] Depth 2/1000 time = 0.7987921237945557
I0123 13:23:13.762643 139631495815168 ddar.py:60] Depth 3/1000 time = 0.1986699104309082
I0123 13:23:13.992845 139631495815168 ddar.py:60] Depth 4/1000 time = 0.2300245761871338
I0123 13:23:14.223059 139631495815168 ddar.py:60] Depth 5/1000 time = 0.23007726669311523
I0123 13:23:14.450893 139631495815168 ddar.py:60] Depth 6/1000 time = 0.22742867469787598
I0123 13:23:14.456378 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:23:14.456429 139631495815168 alphageometry.py:566] LM output (score=-3.298340): "h : C a e h 08 D a h e h 09 ;"
I0123 13:23:14.456464 139631495815168 alphageometry.py:567] Translation: "h = on_line h a e, on_bline h e a"

I0123 13:23:14.456500 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_line h a e, on_bline h e a ? simtri d b f e a f"
I0123 13:23:14.456613 139631495815168 graph.py:498] 
I0123 13:23:14.456660 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_line h a e, on_bline h e a ? simtri d b f e a f
I0123 13:23:14.637569 139631495815168 ddar.py:60] Depth 1/1000 time = 0.16419672966003418
I0123 13:23:14.897933 139631495815168 ddar.py:60] Depth 2/1000 time = 0.2602684497833252
I0123 13:23:15.168715 139631495815168 ddar.py:60] Depth 3/1000 time = 0.27069592475891113
I0123 13:23:15.473045 139631495815168 ddar.py:60] Depth 4/1000 time = 0.30419230461120605
I0123 13:23:15.781704 139631495815168 ddar.py:60] Depth 5/1000 time = 0.30852413177490234
I0123 13:23:16.092058 139631495815168 ddar.py:60] Depth 6/1000 time = 0.30997705459594727
I0123 13:23:16.098764 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:23:16.098814 139631495815168 alphageometry.py:566] LM output (score=-3.634578): "h : P c g e h 08 P c h e g 09 ;"
I0123 13:23:16.098848 139631495815168 alphageometry.py:567] Translation: "h = on_pline h e c g, on_pline h c e g"

I0123 13:23:16.098882 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_pline h e c g, on_pline h c e g ? simtri d b f e a f"
I0123 13:23:16.098996 139631495815168 graph.py:498] 
I0123 13:23:16.099041 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_pline h e c g, on_pline h c e g ? simtri d b f e a f
I0123 13:23:16.290899 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1638169288635254
I0123 13:23:16.599292 139631495815168 ddar.py:60] Depth 2/1000 time = 0.3083062171936035
I0123 13:23:16.929103 139631495815168 ddar.py:60] Depth 3/1000 time = 0.3297271728515625
I0123 13:23:17.294218 139631495815168 ddar.py:60] Depth 4/1000 time = 0.3649740219116211
I0123 13:23:17.663098 139631495815168 ddar.py:60] Depth 5/1000 time = 0.36873650550842285
I0123 13:23:18.036070 139631495815168 ddar.py:60] Depth 6/1000 time = 0.37253427505493164
I0123 13:23:18.042510 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:23:18.042565 139631495815168 alphageometry.py:566] LM output (score=-3.680969): "f : C c g f 08 D c f g f 09 ;"
I0123 13:23:18.042600 139631495815168 alphageometry.py:567] Translation: "ERROR: point f already exists."

I0123 13:23:18.042633 139631495815168 alphageometry.py:566] LM output (score=-3.857847): "h : C e g h 08 D e h g h 09 ;"
I0123 13:23:18.042661 139631495815168 alphageometry.py:567] Translation: "h = on_line h e g, on_bline h g e"

I0123 13:23:18.042693 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_line h e g, on_bline h g e ? simtri d b f e a f"
I0123 13:23:18.042806 139631495815168 graph.py:498] 
I0123 13:23:18.042855 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_line h e g, on_bline h g e ? simtri d b f e a f
I0123 13:23:18.202539 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1427454948425293
I0123 13:23:18.389337 139631495815168 ddar.py:60] Depth 2/1000 time = 0.18671488761901855
I0123 13:23:18.594048 139631495815168 ddar.py:60] Depth 3/1000 time = 0.20463061332702637
I0123 13:23:18.833843 139631495815168 ddar.py:60] Depth 4/1000 time = 0.23964953422546387
I0123 13:23:19.072350 139631495815168 ddar.py:60] Depth 5/1000 time = 0.2383425235748291
I0123 13:23:19.308074 139631495815168 ddar.py:60] Depth 6/1000 time = 0.2353227138519287
I0123 13:23:19.313483 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:23:19.313541 139631495815168 alphageometry.py:566] LM output (score=-4.024013): "b : C c g b 08 D c b g b 09 ;"
I0123 13:23:19.313575 139631495815168 alphageometry.py:567] Translation: "ERROR: point b already exists."

I0123 13:23:19.313610 139631495815168 alphageometry.py:566] LM output (score=-4.044264): "h : P c g f h 08 P c h g f 09 ;"
I0123 13:23:19.313638 139631495815168 alphageometry.py:567] Translation: "h = on_pline h f c g, on_pline h c g f"

I0123 13:23:19.313677 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_pline h f c g, on_pline h c g f ? simtri d b f e a f"
I0123 13:23:19.313792 139631495815168 graph.py:498] 
I0123 13:23:19.313841 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_pline h f c g, on_pline h c g f ? simtri d b f e a f
I0123 13:23:19.490407 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1449270248413086
I0123 13:23:19.699973 139631495815168 ddar.py:60] Depth 2/1000 time = 0.20948004722595215
I0123 13:23:19.928651 139631495815168 ddar.py:60] Depth 3/1000 time = 0.228590726852417
I0123 13:23:20.185293 139631495815168 ddar.py:60] Depth 4/1000 time = 0.25650644302368164
I0123 13:23:20.447671 139631495815168 ddar.py:60] Depth 5/1000 time = 0.26224803924560547
I0123 13:23:20.454209 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:23:20.454267 139631495815168 alphageometry.py:566] LM output (score=-4.049945): "i : C c g i 08 D c i g i 09 ;"
I0123 13:23:20.454303 139631495815168 alphageometry.py:567] Translation: "i = on_line i c g, on_bline i g c"

I0123 13:23:20.454337 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; i = on_line i c g, on_bline i g c ? simtri d b f e a f"
I0123 13:23:20.454442 139631495815168 graph.py:498] 
I0123 13:23:20.454486 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_line h c g, on_bline h g c ? simtri d b f e a f
I0123 13:23:20.621630 139631495815168 ddar.py:60] Depth 1/1000 time = 0.15051841735839844
I0123 13:23:20.893362 139631495815168 ddar.py:60] Depth 2/1000 time = 0.2715928554534912
I0123 13:23:21.174920 139631495815168 ddar.py:60] Depth 3/1000 time = 0.28147077560424805
I0123 13:23:21.501032 139631495815168 ddar.py:60] Depth 4/1000 time = 0.325972318649292
I0123 13:23:21.827451 139631495815168 ddar.py:60] Depth 5/1000 time = 0.3262825012207031
I0123 13:23:22.155291 139631495815168 ddar.py:60] Depth 6/1000 time = 0.3274564743041992
I0123 13:23:22.160789 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:23:22.160842 139631495815168 alphageometry.py:566] LM output (score=-4.079454): "h : C a g h 08 D a h g h 09 ;"
I0123 13:23:22.160877 139631495815168 alphageometry.py:567] Translation: "h = on_line h a g, on_bline h g a"

I0123 13:23:22.160917 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_line h a g, on_bline h g a ? simtri d b f e a f"
I0123 13:23:22.161032 139631495815168 graph.py:498] 
I0123 13:23:22.161077 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_line h a g, on_bline h g a ? simtri d b f e a f
I0123 13:23:22.322031 139631495815168 ddar.py:60] Depth 1/1000 time = 0.14423561096191406
I0123 13:23:22.513578 139631495815168 ddar.py:60] Depth 2/1000 time = 0.1914653778076172
I0123 13:23:22.721025 139631495815168 ddar.py:60] Depth 3/1000 time = 0.20735955238342285
I0123 13:23:22.957167 139631495815168 ddar.py:60] Depth 4/1000 time = 0.23600530624389648
I0123 13:23:23.195538 139631495815168 ddar.py:60] Depth 5/1000 time = 0.23824238777160645
I0123 13:23:23.432366 139631495815168 ddar.py:60] Depth 6/1000 time = 0.23643851280212402
I0123 13:23:23.437962 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:23:23.438011 139631495815168 alphageometry.py:566] LM output (score=-4.102407): "h : P c g f h 08 P c h f g 09 ;"
I0123 13:23:23.438045 139631495815168 alphageometry.py:567] Translation: "h = on_pline h f c g, on_pline h c f g"

I0123 13:23:23.438077 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_pline h f c g, on_pline h c f g ? simtri d b f e a f"
I0123 13:23:23.438184 139631495815168 graph.py:498] 
I0123 13:23:23.438227 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_pline h f c g, on_pline h c f g ? simtri d b f e a f
I0123 13:23:23.617752 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1480417251586914
I0123 13:23:23.815648 139631495815168 ddar.py:60] Depth 2/1000 time = 0.19781017303466797
I0123 13:23:24.039278 139631495815168 ddar.py:60] Depth 3/1000 time = 0.22353553771972656
I0123 13:23:24.289175 139631495815168 ddar.py:60] Depth 4/1000 time = 0.24973773956298828
I0123 13:23:24.544027 139631495815168 ddar.py:60] Depth 5/1000 time = 0.2547123432159424
I0123 13:23:24.550873 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:23:24.550930 139631495815168 alphageometry.py:566] LM output (score=-4.215005): "h : C d g h 08 D d h g h 09 ;"
I0123 13:23:24.550964 139631495815168 alphageometry.py:567] Translation: "h = on_line h d g, on_bline h g d"

I0123 13:23:24.551002 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_line h d g, on_bline h g d ? simtri d b f e a f"
I0123 13:23:24.551111 139631495815168 graph.py:498] 
I0123 13:23:24.551156 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_line h d g, on_bline h g d ? simtri d b f e a f
I0123 13:23:24.698964 139631495815168 ddar.py:60] Depth 1/1000 time = 0.13100314140319824
I0123 13:23:24.876758 139631495815168 ddar.py:60] Depth 2/1000 time = 0.17771029472351074
I0123 13:23:25.068071 139631495815168 ddar.py:60] Depth 3/1000 time = 0.19122910499572754
I0123 13:23:25.290055 139631495815168 ddar.py:60] Depth 4/1000 time = 0.221848726272583
I0123 13:23:25.516106 139631495815168 ddar.py:60] Depth 5/1000 time = 0.2259211540222168
I0123 13:23:25.743856 139631495815168 ddar.py:60] Depth 6/1000 time = 0.2273409366607666
I0123 13:23:25.749249 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:23:25.749296 139631495815168 alphageometry.py:566] LM output (score=-4.223349): "g : C c g d 08 D c g g g 09 ;"
I0123 13:23:25.749329 139631495815168 alphageometry.py:567] Translation: "ERROR: point g already exists."

I0123 13:23:25.749364 139631495815168 alphageometry.py:566] LM output (score=-4.327930): "e : C c g e 08 D c e g e 09 ;"
I0123 13:23:25.749392 139631495815168 alphageometry.py:567] Translation: "ERROR: point e already exists."

I0123 13:23:25.749420 139631495815168 alphageometry.py:566] LM output (score=-4.365457): "g : C c g g 08 T c g g e 09 ;"
I0123 13:23:25.749447 139631495815168 alphageometry.py:567] Translation: "ERROR: point g already exists."

I0123 13:23:25.749474 139631495815168 alphageometry.py:566] LM output (score=-4.433239): "h : C a c h 08 D a h c h 09 ;"
I0123 13:23:25.749499 139631495815168 alphageometry.py:567] Translation: "h = on_line h a c, on_bline h c a"

I0123 13:23:25.749527 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_line h a c, on_bline h c a ? simtri d b f e a f"
I0123 13:23:25.749629 139631495815168 graph.py:498] 
I0123 13:23:25.749678 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_line h a c, on_bline h c a ? simtri d b f e a f
I0123 13:23:25.937438 139631495815168 ddar.py:60] Depth 1/1000 time = 0.17040562629699707
I0123 13:23:27.006498 139631495815168 ddar.py:60] Depth 2/1000 time = 1.0689482688903809
I0123 13:23:27.406017 139631495815168 ddar.py:60] Depth 3/1000 time = 0.3993206024169922
I0123 13:23:27.846171 139631495815168 ddar.py:60] Depth 4/1000 time = 0.43994927406311035
I0123 13:23:28.289778 139631495815168 ddar.py:60] Depth 5/1000 time = 0.4434330463409424
I0123 13:23:29.405416 139631495815168 ddar.py:60] Depth 6/1000 time = 1.1151764392852783
I0123 13:23:29.856774 139631495815168 ddar.py:60] Depth 7/1000 time = 0.4447457790374756
I0123 13:23:29.857093 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:23:29.857141 139631495815168 alphageometry.py:566] LM output (score=-4.467584): "g : C c g g 08 T c g e g 09 ;"
I0123 13:23:29.857176 139631495815168 alphageometry.py:567] Translation: "ERROR: point g already exists."

I0123 13:23:29.857239 139631495815168 alphageometry.py:566] LM output (score=-4.483396): "h : C c e h 08 D c h e h 09 ;"
I0123 13:23:29.857269 139631495815168 alphageometry.py:567] Translation: "h = on_line h c e, on_bline h e c"

I0123 13:23:29.857301 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_line h c e, on_bline h e c ? simtri d b f e a f"
I0123 13:23:29.857418 139631495815168 graph.py:498] 
I0123 13:23:29.857465 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_line h c e, on_bline h e c ? simtri d b f e a f
I0123 13:23:30.033514 139631495815168 ddar.py:60] Depth 1/1000 time = 0.15805435180664062
I0123 13:23:30.240919 139631495815168 ddar.py:60] Depth 2/1000 time = 0.20731520652770996
I0123 13:23:30.466978 139631495815168 ddar.py:60] Depth 3/1000 time = 0.22597861289978027
I0123 13:23:30.723560 139631495815168 ddar.py:60] Depth 4/1000 time = 0.25644946098327637
I0123 13:23:30.991396 139631495815168 ddar.py:60] Depth 5/1000 time = 0.2677030563354492
I0123 13:23:31.251934 139631495815168 ddar.py:60] Depth 6/1000 time = 0.26013922691345215
I0123 13:23:31.257373 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:23:31.257421 139631495815168 alphageometry.py:566] LM output (score=-4.542287): "g : C c g e 08 D c g g g 09 ;"
I0123 13:23:31.257455 139631495815168 alphageometry.py:567] Translation: "ERROR: point g already exists."

I0123 13:23:31.257485 139631495815168 alphageometry.py:566] LM output (score=-4.598907): "h : P c g c h 08 P d e d h 09 ;"
I0123 13:23:31.257513 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c g c h"

I0123 13:23:31.257541 139631495815168 alphageometry.py:566] LM output (score=-4.700211): "c : T a b a c 08 ;"
I0123 13:23:31.257567 139631495815168 alphageometry.py:567] Translation: "ERROR: point c already exists."

I0123 13:23:31.257595 139631495815168 alphageometry.py:566] LM output (score=-4.710911): "c : C a c g 08 D a c c g 09 ;"
I0123 13:23:31.257621 139631495815168 alphageometry.py:567] Translation: "ERROR: point c already exists."

I0123 13:23:31.257652 139631495815168 alphageometry.py:566] LM output (score=-4.751692): "h : P a e g h 08 P a g e h 09 ;"
I0123 13:23:31.257680 139631495815168 alphageometry.py:567] Translation: "h = on_pline h g a e, on_pline h e a g"

I0123 13:23:31.257709 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_pline h g a e, on_pline h e a g ? simtri d b f e a f"
I0123 13:23:31.257817 139631495815168 graph.py:498] 
I0123 13:23:31.257860 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_pline h g a e, on_pline h e a g ? simtri d b f e a f
I0123 13:23:31.469965 139631495815168 ddar.py:60] Depth 1/1000 time = 0.18629074096679688
I0123 13:23:31.821585 139631495815168 ddar.py:60] Depth 2/1000 time = 0.35152745246887207
I0123 13:23:32.161433 139631495815168 ddar.py:60] Depth 3/1000 time = 0.3397536277770996
I0123 13:23:32.540336 139631495815168 ddar.py:60] Depth 4/1000 time = 0.37876296043395996
I0123 13:23:32.930674 139631495815168 ddar.py:60] Depth 5/1000 time = 0.3902013301849365
I0123 13:23:33.318379 139631495815168 ddar.py:60] Depth 6/1000 time = 0.38722658157348633
I0123 13:23:33.325808 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:23:33.325857 139631495815168 alphageometry.py:566] LM output (score=-4.779863): "h : P c g e h 08 P c e g h 09 ;"
I0123 13:23:33.325891 139631495815168 alphageometry.py:567] Translation: "h = on_pline h e c g, on_pline h g c e"

I0123 13:23:33.325937 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_pline h e c g, on_pline h g c e ? simtri d b f e a f"
I0123 13:23:33.326048 139631495815168 graph.py:498] 
I0123 13:23:33.326093 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_pline h e c g, on_pline h g c e ? simtri d b f e a f
I0123 13:23:33.505821 139631495815168 ddar.py:60] Depth 1/1000 time = 0.15108203887939453
I0123 13:23:33.785601 139631495815168 ddar.py:60] Depth 2/1000 time = 0.279693603515625
I0123 13:23:34.064096 139631495815168 ddar.py:60] Depth 3/1000 time = 0.27840471267700195
I0123 13:23:34.373994 139631495815168 ddar.py:60] Depth 4/1000 time = 0.3097567558288574
I0123 13:23:34.688229 139631495815168 ddar.py:60] Depth 5/1000 time = 0.3141005039215088
I0123 13:23:35.003301 139631495815168 ddar.py:60] Depth 6/1000 time = 0.3146476745605469
I0123 13:23:35.009504 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:23:35.009551 139631495815168 alphageometry.py:566] LM output (score=-4.843452): "h : P c g g h 08 P d e d h 09 ;"
I0123 13:23:35.009584 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P c g g h"

I0123 13:23:35.009615 139631495815168 alphageometry.py:566] LM output (score=-4.860240): "h : P a c g h 08 P a g c h 09 ;"
I0123 13:23:35.009648 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 13:23:35.009679 139631495815168 alphageometry.py:566] LM output (score=-4.868937): "j : C c g j 08 D c j g j 09 ;"
I0123 13:23:35.009707 139631495815168 alphageometry.py:567] Translation: "j = on_line j c g, on_bline j g c"

I0123 13:23:35.009736 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; j = on_line j c g, on_bline j g c ? simtri d b f e a f"
I0123 13:23:35.009839 139631495815168 graph.py:498] 
I0123 13:23:35.009883 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_line h c g, on_bline h g c ? simtri d b f e a f
I0123 13:23:35.174900 139631495815168 ddar.py:60] Depth 1/1000 time = 0.14832615852355957
I0123 13:23:35.434973 139631495815168 ddar.py:60] Depth 2/1000 time = 0.25998783111572266
I0123 13:23:35.702723 139631495815168 ddar.py:60] Depth 3/1000 time = 0.26766467094421387
I0123 13:23:36.010636 139631495815168 ddar.py:60] Depth 4/1000 time = 0.3077735900878906
I0123 13:23:36.325190 139631495815168 ddar.py:60] Depth 5/1000 time = 0.31441807746887207
I0123 13:23:36.632093 139631495815168 ddar.py:60] Depth 6/1000 time = 0.3065333366394043
I0123 13:23:36.638372 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:23:36.638420 139631495815168 alphageometry.py:566] LM output (score=-4.883550): "c : C a g c 08 D a c g c 09 ;"
I0123 13:23:36.638453 139631495815168 alphageometry.py:567] Translation: "ERROR: point c already exists."

I0123 13:23:36.638485 139631495815168 alphageometry.py:566] LM output (score=-4.918200): "h : P a g b h 08 P b f e h 09 ;"
I0123 13:23:36.638512 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 13:23:36.638552 139631495815168 alphageometry.py:566] LM output (score=-4.951052): "h : P a b e h 08 P a e b h 09 ;"
I0123 13:23:36.638581 139631495815168 alphageometry.py:567] Translation: "h = on_pline h e a b, on_pline h b a e"

I0123 13:23:36.638610 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_pline h e a b, on_pline h b a e ? simtri d b f e a f"
I0123 13:23:36.638715 139631495815168 graph.py:498] 
I0123 13:23:36.638759 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_pline h e a b, on_pline h b a e ? simtri d b f e a f
I0123 13:23:36.846028 139631495815168 ddar.py:60] Depth 1/1000 time = 0.17937946319580078
I0123 13:23:37.180344 139631495815168 ddar.py:60] Depth 2/1000 time = 0.3342289924621582
I0123 13:23:37.579256 139631495815168 ddar.py:60] Depth 3/1000 time = 0.3988211154937744
I0123 13:23:38.032020 139631495815168 ddar.py:60] Depth 4/1000 time = 0.45261216163635254
I0123 13:23:38.479972 139631495815168 ddar.py:60] Depth 5/1000 time = 0.4478025436401367
I0123 13:23:38.940635 139631495815168 ddar.py:60] Depth 6/1000 time = 0.4515862464904785
I0123 13:23:38.940934 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:23:38.940978 139631495815168 alphageometry.py:566] LM output (score=-4.952269): "h : P a g b h 08 P a h b g 09 ;"
I0123 13:23:38.941012 139631495815168 alphageometry.py:567] Translation: "h = on_pline h b a g, on_pline h a b g"

I0123 13:23:38.941045 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_pline h b a g, on_pline h a b g ? simtri d b f e a f"
I0123 13:23:38.941154 139631495815168 graph.py:498] 
I0123 13:23:38.941199 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e a c, on_pline g a c e; h = on_pline h b a g, on_pline h a b g ? simtri d b f e a f
I0123 13:23:39.132855 139631495815168 ddar.py:60] Depth 1/1000 time = 0.16318011283874512
I0123 13:23:39.477146 139631495815168 ddar.py:60] Depth 2/1000 time = 0.344205379486084
I0123 13:23:40.492105 139631495815168 ddar.py:60] Depth 3/1000 time = 1.0148563385009766
I0123 13:23:40.897520 139631495815168 ddar.py:60] Depth 4/1000 time = 0.4052011966705322
I0123 13:23:41.300805 139631495815168 ddar.py:60] Depth 5/1000 time = 0.4031367301940918
I0123 13:23:41.308890 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:23:41.308941 139631495815168 alphageometry.py:566] LM output (score=-5.086750): "c : T a b c g 08 ;"
I0123 13:23:41.308976 139631495815168 alphageometry.py:567] Translation: "ERROR: point c already exists."

I0123 13:23:41.309013 139631495815168 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C a c d 00 T a b b d 01 ; e : C b c e 02 T a b a e 03 ; f : C a b f 04 T a b c f 05 ? S d b f e a f {F1} x00 g : P a g c f 06 ; x00
I0123 13:23:45.672628 139631495815168 alphageometry.py:566] LM output (score=-1.312195): "h : C c e h 07 P a g b h 08 ;"
I0123 13:23:45.672749 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 13:23:45.672790 139631495815168 alphageometry.py:566] LM output (score=-1.523724): "h : C c e h 07 P a g e h 08 ;"
I0123 13:23:45.672829 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2570, in add_clause
    raise DepCheckFailError(
graph.DepCheckFailError: ncoll e a g
"

I0123 13:23:45.672859 139631495815168 alphageometry.py:566] LM output (score=-1.742377): "h : C c b h 07 D c h b h 08 ;"
I0123 13:23:45.672886 139631495815168 alphageometry.py:567] Translation: "h = on_line h c b, on_bline h b c"

I0123 13:23:45.672914 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h c b, on_bline h b c ? simtri d b f e a f"
I0123 13:23:45.673022 139631495815168 graph.py:498] 
I0123 13:23:45.673067 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h c b, on_bline h b c ? simtri d b f e a f
I0123 13:23:45.815725 139631495815168 ddar.py:60] Depth 1/1000 time = 0.13106012344360352
I0123 13:23:46.140808 139631495815168 ddar.py:60] Depth 2/1000 time = 0.32499170303344727
I0123 13:23:46.500060 139631495815168 ddar.py:60] Depth 3/1000 time = 0.35913872718811035
I0123 13:23:46.910773 139631495815168 ddar.py:60] Depth 4/1000 time = 0.4105210304260254
I0123 13:23:47.985990 139631495815168 ddar.py:60] Depth 5/1000 time = 1.0750317573547363
I0123 13:23:48.397675 139631495815168 ddar.py:60] Depth 6/1000 time = 0.41112518310546875
I0123 13:23:48.816112 139631495815168 ddar.py:60] Depth 7/1000 time = 0.41406893730163574
I0123 13:23:48.816423 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:23:48.816472 139631495815168 alphageometry.py:566] LM output (score=-1.856472): "h : C a e h 07 D a h e h 08 ;"
I0123 13:23:48.816507 139631495815168 alphageometry.py:567] Translation: "h = on_line h a e, on_bline h e a"

I0123 13:23:48.816542 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h a e, on_bline h e a ? simtri d b f e a f"
I0123 13:23:48.816655 139631495815168 graph.py:498] 
I0123 13:23:48.816700 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h a e, on_bline h e a ? simtri d b f e a f
I0123 13:23:48.967895 139631495815168 ddar.py:60] Depth 1/1000 time = 0.14065957069396973
I0123 13:23:49.191050 139631495815168 ddar.py:60] Depth 2/1000 time = 0.22306537628173828
I0123 13:23:49.427689 139631495815168 ddar.py:60] Depth 3/1000 time = 0.2365550994873047
I0123 13:23:49.705577 139631495815168 ddar.py:60] Depth 4/1000 time = 0.277740478515625
I0123 13:23:49.983554 139631495815168 ddar.py:60] Depth 5/1000 time = 0.2778284549713135
I0123 13:23:50.259773 139631495815168 ddar.py:60] Depth 6/1000 time = 0.2757577896118164
I0123 13:23:50.262535 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:23:50.262584 139631495815168 alphageometry.py:566] LM output (score=-1.927841): "h : C c f h 07 D c f f h 08 ;"
I0123 13:23:50.262618 139631495815168 alphageometry.py:567] Translation: "h = on_line h c f, on_circle h f c"

I0123 13:23:50.262652 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h c f, on_circle h f c ? simtri d b f e a f"
I0123 13:23:50.262755 139631495815168 graph.py:498] 
I0123 13:23:50.262800 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h c f, on_circle h f c ? simtri d b f e a f
I0123 13:23:50.443650 139631495815168 ddar.py:60] Depth 1/1000 time = 0.17098760604858398
I0123 13:23:50.780287 139631495815168 ddar.py:60] Depth 2/1000 time = 0.3365504741668701
I0123 13:23:51.143162 139631495815168 ddar.py:60] Depth 3/1000 time = 0.36278486251831055
I0123 13:23:51.555510 139631495815168 ddar.py:60] Depth 4/1000 time = 0.4121835231781006
I0123 13:23:51.968549 139631495815168 ddar.py:60] Depth 5/1000 time = 0.41287779808044434
I0123 13:23:52.383995 139631495815168 ddar.py:60] Depth 6/1000 time = 0.41496920585632324
I0123 13:23:52.817311 139631495815168 ddar.py:60] Depth 7/1000 time = 0.4239165782928467
I0123 13:23:52.817632 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:23:52.817683 139631495815168 alphageometry.py:566] LM output (score=-1.931105): "h : C a c h 07 D a h c h 08 ;"
I0123 13:23:52.817718 139631495815168 alphageometry.py:567] Translation: "h = on_line h a c, on_bline h c a"

I0123 13:23:52.817752 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h a c, on_bline h c a ? simtri d b f e a f"
I0123 13:23:52.817859 139631495815168 graph.py:498] 
I0123 13:23:52.817905 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h a c, on_bline h c a ? simtri d b f e a f
I0123 13:23:52.962874 139631495815168 ddar.py:60] Depth 1/1000 time = 0.13498330116271973
I0123 13:23:53.945068 139631495815168 ddar.py:60] Depth 2/1000 time = 0.9820926189422607
I0123 13:23:54.300579 139631495815168 ddar.py:60] Depth 3/1000 time = 0.35535240173339844
I0123 13:23:54.725020 139631495815168 ddar.py:60] Depth 4/1000 time = 0.4242265224456787
I0123 13:23:55.843183 139631495815168 ddar.py:60] Depth 5/1000 time = 1.117967128753662
I0123 13:23:56.268674 139631495815168 ddar.py:60] Depth 6/1000 time = 0.4249298572540283
I0123 13:23:56.709038 139631495815168 ddar.py:60] Depth 7/1000 time = 0.43550682067871094
I0123 13:23:56.709365 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:23:56.709416 139631495815168 alphageometry.py:566] LM output (score=-1.933450): "h : C c e h 07 P g e c h 08 ;"
I0123 13:23:56.709453 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 13:23:56.709491 139631495815168 alphageometry.py:566] LM output (score=-1.953982): "h : C c e h 07 C g e h 08 ;"
I0123 13:23:56.709520 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 13:23:56.709550 139631495815168 alphageometry.py:566] LM output (score=-1.954746): "h : C c b h 07 C b g h 08 ;"
I0123 13:23:56.709576 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 13:23:56.709605 139631495815168 alphageometry.py:566] LM output (score=-1.962672): "h : C b c h 07 D b h c h 08 ;"
I0123 13:23:56.709631 139631495815168 alphageometry.py:567] Translation: "h = on_line h b c, on_bline h c b"

I0123 13:23:56.709685 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h b c, on_bline h c b ? simtri d b f e a f"
I0123 13:23:56.709804 139631495815168 graph.py:498] 
I0123 13:23:56.709851 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h b c, on_bline h c b ? simtri d b f e a f
I0123 13:23:56.857366 139631495815168 ddar.py:60] Depth 1/1000 time = 0.13641881942749023
I0123 13:23:57.186019 139631495815168 ddar.py:60] Depth 2/1000 time = 0.32856130599975586
I0123 13:23:58.215901 139631495815168 ddar.py:60] Depth 3/1000 time = 1.0297706127166748
I0123 13:23:58.632284 139631495815168 ddar.py:60] Depth 4/1000 time = 0.4161560535430908
I0123 13:23:59.042336 139631495815168 ddar.py:60] Depth 5/1000 time = 0.4098525047302246
I0123 13:23:59.449101 139631495815168 ddar.py:60] Depth 6/1000 time = 0.4062817096710205
I0123 13:24:00.533334 139631495815168 ddar.py:60] Depth 7/1000 time = 1.0799603462219238
I0123 13:24:00.533713 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:24:00.533765 139631495815168 alphageometry.py:566] LM output (score=-1.965828): "h : C c e h 07 P a g a h 08 ;"
I0123 13:24:00.533801 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P a g a h"

I0123 13:24:00.533835 139631495815168 alphageometry.py:566] LM output (score=-2.024807): "h : C c g h 07 D c h g h 08 ;"
I0123 13:24:00.533863 139631495815168 alphageometry.py:567] Translation: "h = on_line h c g, on_bline h g c"

I0123 13:24:00.533895 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h c g, on_bline h g c ? simtri d b f e a f"
I0123 13:24:00.534008 139631495815168 graph.py:498] 
I0123 13:24:00.534056 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h c g, on_bline h g c ? simtri d b f e a f
I0123 13:24:00.649596 139631495815168 ddar.py:60] Depth 1/1000 time = 0.10516119003295898
I0123 13:24:00.806676 139631495815168 ddar.py:60] Depth 2/1000 time = 0.1569843292236328
I0123 13:24:00.972718 139631495815168 ddar.py:60] Depth 3/1000 time = 0.16595840454101562
I0123 13:24:01.171926 139631495815168 ddar.py:60] Depth 4/1000 time = 0.19906067848205566
I0123 13:24:01.371274 139631495815168 ddar.py:60] Depth 5/1000 time = 0.19921422004699707
I0123 13:24:01.572043 139631495815168 ddar.py:60] Depth 6/1000 time = 0.2003328800201416
I0123 13:24:01.574924 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:24:01.574971 139631495815168 alphageometry.py:566] LM output (score=-2.053016): "h : C d e h 07 D d h e h 08 ;"
I0123 13:24:01.575005 139631495815168 alphageometry.py:567] Translation: "h = on_line h d e, on_bline h e d"

I0123 13:24:01.575038 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h d e, on_bline h e d ? simtri d b f e a f"
I0123 13:24:01.575138 139631495815168 graph.py:498] 
I0123 13:24:01.575182 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h d e, on_bline h e d ? simtri d b f e a f
I0123 13:24:01.687684 139631495815168 ddar.py:60] Depth 1/1000 time = 0.10257840156555176
I0123 13:24:01.848747 139631495815168 ddar.py:60] Depth 2/1000 time = 0.1609799861907959
I0123 13:24:02.019582 139631495815168 ddar.py:60] Depth 3/1000 time = 0.17075109481811523
I0123 13:24:02.223136 139631495815168 ddar.py:60] Depth 4/1000 time = 0.20341157913208008
I0123 13:24:02.428811 139631495815168 ddar.py:60] Depth 5/1000 time = 0.20552682876586914
I0123 13:24:02.633739 139631495815168 ddar.py:60] Depth 6/1000 time = 0.20447826385498047
I0123 13:24:02.636445 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:24:02.636491 139631495815168 alphageometry.py:566] LM output (score=-2.084806): "h : C c e h 07 P a g d h 08 ;"
I0123 13:24:02.636524 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 13:24:02.636557 139631495815168 alphageometry.py:566] LM output (score=-2.147827): "h : C c e h 07 P e g e h 08 ;"
I0123 13:24:02.636586 139631495815168 alphageometry.py:567] Translation: "ERROR: Invalid predicate P e g e h"

I0123 13:24:02.636614 139631495815168 alphageometry.py:566] LM output (score=-2.157626): "h : C c f h 07 D c f c h 08 ;"
I0123 13:24:02.636641 139631495815168 alphageometry.py:567] Translation: "h = on_line h c f, on_circle h c f"

I0123 13:24:02.636669 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h c f, on_circle h c f ? simtri d b f e a f"
I0123 13:24:02.636766 139631495815168 graph.py:498] 
I0123 13:24:02.636808 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h c f, on_circle h c f ? simtri d b f e a f
I0123 13:24:02.789554 139631495815168 ddar.py:60] Depth 1/1000 time = 0.14283275604248047
I0123 13:24:03.004678 139631495815168 ddar.py:60] Depth 2/1000 time = 0.21503901481628418
I0123 13:24:03.252920 139631495815168 ddar.py:60] Depth 3/1000 time = 0.24816131591796875
I0123 13:24:03.601735 139631495815168 ddar.py:60] Depth 4/1000 time = 0.3486645221710205
I0123 13:24:03.971238 139631495815168 ddar.py:60] Depth 5/1000 time = 0.3693568706512451
I0123 13:24:04.345275 139631495815168 ddar.py:60] Depth 6/1000 time = 0.37389254570007324
I0123 13:24:04.722918 139631495815168 ddar.py:60] Depth 7/1000 time = 0.37698793411254883
I0123 13:24:04.730149 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:24:04.730198 139631495815168 alphageometry.py:566] LM output (score=-2.186299): "h : C c f h 07 C g e h 08 ;"
I0123 13:24:04.730232 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2622, in add_clause
    nums = draw_fn()
  File "/home/chi/alphageometry-test/graph.py", line 2608, in draw_fn
    return nm.reduce(to_be_intersected, existing_points)
  File "/home/chi/alphageometry-test/numericals.py", line 1310, in reduce
    result = a.intersect(b)
  File "/home/chi/alphageometry-test/numericals.py", line 213, in intersect
    return line_line_intersection(self, obj)
  File "/home/chi/alphageometry-test/numericals.py", line 584, in line_line_intersection
    raise InvalidLineIntersectError
numericals.InvalidLineIntersectError
"

I0123 13:24:04.730283 139631495815168 alphageometry.py:566] LM output (score=-2.189211): "h : C f e h 07 D f h e h 08 ;"
I0123 13:24:04.730314 139631495815168 alphageometry.py:567] Translation: "h = on_line h f e, on_bline h e f"

I0123 13:24:04.730344 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h f e, on_bline h e f ? simtri d b f e a f"
I0123 13:24:04.730445 139631495815168 graph.py:498] 
I0123 13:24:04.730499 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h f e, on_bline h e f ? simtri d b f e a f
I0123 13:24:04.852085 139631495815168 ddar.py:60] Depth 1/1000 time = 0.11149406433105469
I0123 13:24:05.111386 139631495815168 ddar.py:60] Depth 2/1000 time = 0.2592141628265381
I0123 13:24:05.406769 139631495815168 ddar.py:60] Depth 3/1000 time = 0.2952864170074463
I0123 13:24:05.748535 139631495815168 ddar.py:60] Depth 4/1000 time = 0.34160852432250977
I0123 13:24:06.096499 139631495815168 ddar.py:60] Depth 5/1000 time = 0.3478081226348877
I0123 13:24:07.140852 139631495815168 ddar.py:60] Depth 6/1000 time = 1.0438663959503174
I0123 13:24:07.144391 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:24:07.144443 139631495815168 alphageometry.py:566] LM output (score=-2.226020): "h : C a b h 07 D a h b h 08 ;"
I0123 13:24:07.144480 139631495815168 alphageometry.py:567] Translation: "h = on_line h a b, on_bline h b a"

I0123 13:24:07.144515 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h a b, on_bline h b a ? simtri d b f e a f"
I0123 13:24:07.144629 139631495815168 graph.py:498] 
I0123 13:24:07.144676 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h a b, on_bline h b a ? simtri d b f e a f
I0123 13:24:07.295478 139631495815168 ddar.py:60] Depth 1/1000 time = 0.13928627967834473
I0123 13:24:07.490075 139631495815168 ddar.py:60] Depth 2/1000 time = 0.19451260566711426
I0123 13:24:07.694759 139631495815168 ddar.py:60] Depth 3/1000 time = 0.20460081100463867
I0123 13:24:07.938076 139631495815168 ddar.py:60] Depth 4/1000 time = 0.24317479133605957
I0123 13:24:08.183113 139631495815168 ddar.py:60] Depth 5/1000 time = 0.24489355087280273
I0123 13:24:08.428716 139631495815168 ddar.py:60] Depth 6/1000 time = 0.24517250061035156
I0123 13:24:08.431602 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:24:08.431647 139631495815168 alphageometry.py:566] LM output (score=-2.258954): "h : C c b h 07 D c b b h 08 ;"
I0123 13:24:08.431681 139631495815168 alphageometry.py:567] Translation: "h = on_line h c b, on_circle h b c"

I0123 13:24:08.431715 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h c b, on_circle h b c ? simtri d b f e a f"
I0123 13:24:08.431816 139631495815168 graph.py:498] 
I0123 13:24:08.431859 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h c b, on_circle h b c ? simtri d b f e a f
I0123 13:24:08.563734 139631495815168 ddar.py:60] Depth 1/1000 time = 0.12192106246948242
I0123 13:24:08.737198 139631495815168 ddar.py:60] Depth 2/1000 time = 0.17337727546691895
I0123 13:24:08.924469 139631495815168 ddar.py:60] Depth 3/1000 time = 0.18719172477722168
I0123 13:24:09.144543 139631495815168 ddar.py:60] Depth 4/1000 time = 0.21993756294250488
I0123 13:24:09.365972 139631495815168 ddar.py:60] Depth 5/1000 time = 0.22129583358764648
I0123 13:24:09.591015 139631495815168 ddar.py:60] Depth 6/1000 time = 0.2246112823486328
I0123 13:24:09.594728 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:24:09.594774 139631495815168 alphageometry.py:566] LM output (score=-2.261784): "h : C c e h 07 T c e g h 08 ;"
I0123 13:24:09.594807 139631495815168 alphageometry.py:567] Translation: "h = on_line h c e, on_tline h g c e"

I0123 13:24:09.594839 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h c e, on_tline h g c e ? simtri d b f e a f"
I0123 13:24:09.594955 139631495815168 graph.py:498] 
I0123 13:24:09.595000 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h c e, on_tline h g c e ? simtri d b f e a f
I0123 13:24:09.720918 139631495815168 ddar.py:60] Depth 1/1000 time = 0.11256623268127441
I0123 13:24:09.938321 139631495815168 ddar.py:60] Depth 2/1000 time = 0.2173168659210205
I0123 13:24:10.243062 139631495815168 ddar.py:60] Depth 3/1000 time = 0.30464863777160645
I0123 13:24:10.606088 139631495815168 ddar.py:60] Depth 4/1000 time = 0.3628685474395752
I0123 13:24:10.975575 139631495815168 ddar.py:60] Depth 5/1000 time = 0.36933350563049316
I0123 13:24:10.980989 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:24:10.981037 139631495815168 alphageometry.py:566] LM output (score=-2.285733): "h : C c e h 07 P f e c h 08 ;"
I0123 13:24:10.981070 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 13:24:10.981102 139631495815168 alphageometry.py:566] LM output (score=-2.403339): "h : C c e h 07 P b g f h 08 ;"
I0123 13:24:10.981129 139631495815168 alphageometry.py:567] Translation: "h = on_line h c e, on_pline h f b g"

I0123 13:24:10.981157 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h c e, on_pline h f b g ? simtri d b f e a f"
I0123 13:24:10.981256 139631495815168 graph.py:498] 
I0123 13:24:10.981298 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h c e, on_pline h f b g ? simtri d b f e a f
I0123 13:24:11.116228 139631495815168 ddar.py:60] Depth 1/1000 time = 0.12041425704956055
I0123 13:24:11.307010 139631495815168 ddar.py:60] Depth 2/1000 time = 0.19069528579711914
I0123 13:24:11.518377 139631495815168 ddar.py:60] Depth 3/1000 time = 0.21127676963806152
I0123 13:24:11.772401 139631495815168 ddar.py:60] Depth 4/1000 time = 0.253878116607666
I0123 13:24:12.029472 139631495815168 ddar.py:60] Depth 5/1000 time = 0.2569296360015869
I0123 13:24:12.297165 139631495815168 ddar.py:60] Depth 6/1000 time = 0.2649991512298584
I0123 13:24:12.299103 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:24:12.299150 139631495815168 alphageometry.py:566] LM output (score=-2.404027): "h : C c e h 07 P a g c h 08 ;"
I0123 13:24:12.299183 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 13:24:12.299214 139631495815168 alphageometry.py:566] LM output (score=-2.420405): "h : C c e h 07 P g e d h 08 ;"
I0123 13:24:12.299242 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 13:24:12.299270 139631495815168 alphageometry.py:566] LM output (score=-2.477726): "h : C c e h 07 P f e g h 08 ;"
I0123 13:24:12.299303 139631495815168 alphageometry.py:567] Translation: "h = on_line h c e, on_pline h g f e"

I0123 13:24:12.299333 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h c e, on_pline h g f e ? simtri d b f e a f"
I0123 13:24:12.299433 139631495815168 graph.py:498] 
I0123 13:24:12.299475 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h c e, on_pline h g f e ? simtri d b f e a f
I0123 13:24:12.433963 139631495815168 ddar.py:60] Depth 1/1000 time = 0.12085890769958496
I0123 13:24:12.625963 139631495815168 ddar.py:60] Depth 2/1000 time = 0.19191479682922363
I0123 13:24:12.835920 139631495815168 ddar.py:60] Depth 3/1000 time = 0.2098710536956787
I0123 13:24:13.076642 139631495815168 ddar.py:60] Depth 4/1000 time = 0.24057769775390625
I0123 13:24:13.323291 139631495815168 ddar.py:60] Depth 5/1000 time = 0.24650931358337402
I0123 13:24:13.326808 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:24:13.326858 139631495815168 alphageometry.py:566] LM output (score=-2.488084): "h : C d b h 07 D d h b h 08 ;"
I0123 13:24:13.326894 139631495815168 alphageometry.py:567] Translation: "h = on_line h d b, on_bline h b d"

I0123 13:24:13.326928 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h d b, on_bline h b d ? simtri d b f e a f"
I0123 13:24:13.327033 139631495815168 graph.py:498] 
I0123 13:24:13.327078 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h d b, on_bline h b d ? simtri d b f e a f
I0123 13:24:13.485820 139631495815168 ddar.py:60] Depth 1/1000 time = 0.14827275276184082
I0123 13:24:13.695089 139631495815168 ddar.py:60] Depth 2/1000 time = 0.2091832160949707
I0123 13:24:13.918035 139631495815168 ddar.py:60] Depth 3/1000 time = 0.22286343574523926
I0123 13:24:14.174974 139631495815168 ddar.py:60] Depth 4/1000 time = 0.25679492950439453
I0123 13:24:14.437355 139631495815168 ddar.py:60] Depth 5/1000 time = 0.2622385025024414
I0123 13:24:14.698436 139631495815168 ddar.py:60] Depth 6/1000 time = 0.26062989234924316
I0123 13:24:14.701585 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:24:14.701631 139631495815168 alphageometry.py:566] LM output (score=-2.507699): "h : C a b h 07 D a b b h 08 ;"
I0123 13:24:14.701674 139631495815168 alphageometry.py:567] Translation: "h = on_line h a b, on_circle h b a"

I0123 13:24:14.701708 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h a b, on_circle h b a ? simtri d b f e a f"
I0123 13:24:14.701810 139631495815168 graph.py:498] 
I0123 13:24:14.701854 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h a b, on_circle h b a ? simtri d b f e a f
I0123 13:24:14.865321 139631495815168 ddar.py:60] Depth 1/1000 time = 0.15290260314941406
I0123 13:24:15.114398 139631495815168 ddar.py:60] Depth 2/1000 time = 0.24898982048034668
I0123 13:24:15.379598 139631495815168 ddar.py:60] Depth 3/1000 time = 0.2651174068450928
I0123 13:24:15.689299 139631495815168 ddar.py:60] Depth 4/1000 time = 0.3095536231994629
I0123 13:24:16.000764 139631495815168 ddar.py:60] Depth 5/1000 time = 0.311323881149292
I0123 13:24:16.312333 139631495815168 ddar.py:60] Depth 6/1000 time = 0.311124324798584
I0123 13:24:16.634088 139631495815168 ddar.py:60] Depth 7/1000 time = 0.3161625862121582
I0123 13:24:16.634381 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:24:16.634424 139631495815168 alphageometry.py:566] LM output (score=-2.508025): "h : C c e h 07 P c g e h 08 ;"
I0123 13:24:16.634457 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 13:24:16.634489 139631495815168 alphageometry.py:566] LM output (score=-2.526714): "h : C c e h 07 P a g f h 08 ;"
I0123 13:24:16.634517 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 13:24:16.634545 139631495815168 alphageometry.py:566] LM output (score=-2.605372): "h : C c e h 07 D c h e h 08 ;"
I0123 13:24:16.634571 139631495815168 alphageometry.py:567] Translation: "h = on_line h c e, on_bline h e c"

I0123 13:24:16.634599 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h c e, on_bline h e c ? simtri d b f e a f"
I0123 13:24:16.634696 139631495815168 graph.py:498] 
I0123 13:24:16.634738 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g a c f; h = on_line h c e, on_bline h e c ? simtri d b f e a f
I0123 13:24:16.766898 139631495815168 ddar.py:60] Depth 1/1000 time = 0.12216711044311523
I0123 13:24:16.942559 139631495815168 ddar.py:60] Depth 2/1000 time = 0.17557716369628906
I0123 13:24:17.131481 139631495815168 ddar.py:60] Depth 3/1000 time = 0.18883824348449707
I0123 13:24:17.351239 139631495815168 ddar.py:60] Depth 4/1000 time = 0.2196180820465088
I0123 13:24:17.572538 139631495815168 ddar.py:60] Depth 5/1000 time = 0.22116494178771973
I0123 13:24:17.793184 139631495815168 ddar.py:60] Depth 6/1000 time = 0.22021722793579102
I0123 13:24:17.795842 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:24:17.795889 139631495815168 alphageometry.py:566] LM output (score=-2.708404): "h : C d b h 07 C b g h 08 ;"
I0123 13:24:17.795922 139631495815168 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0123 13:24:17.795959 139631495815168 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : C a c d 00 T a b b d 01 ; e : C b c e 02 T a b a e 03 ; f : C a b f 04 T a b c f 05 ? S d b f e a f {F1} x00 g : P c f e g 06 P c e f g 07 ; x00
I0123 13:24:23.003323 139631495815168 alphageometry.py:566] LM output (score=-0.059766): "h : C c g h 08 D c h g h 09 ;"
I0123 13:24:23.003494 139631495815168 alphageometry.py:567] Translation: "h = on_line h c g, on_bline h g c"

I0123 13:24:23.003552 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_line h c g, on_bline h g c ? simtri d b f e a f"
I0123 13:24:23.003680 139631495815168 graph.py:498] 
I0123 13:24:23.003736 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_line h c g, on_bline h g c ? simtri d b f e a f
I0123 13:24:23.176259 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1568896770477295
I0123 13:24:24.263667 139631495815168 ddar.py:60] Depth 2/1000 time = 1.0872855186462402
I0123 13:24:24.842044 139631495815168 ddar.py:60] Depth 3/1000 time = 0.5781643390655518
I0123 13:24:25.528448 139631495815168 ddar.py:60] Depth 4/1000 time = 0.6861753463745117
I0123 13:24:26.231697 139631495815168 ddar.py:60] Depth 5/1000 time = 0.7029838562011719
I0123 13:24:27.655609 139631495815168 ddar.py:60] Depth 6/1000 time = 1.4233777523040771
I0123 13:24:27.666295 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:24:27.666352 139631495815168 alphageometry.py:566] LM output (score=-1.545194): "h : C b g h 08 D b h g h 09 ;"
I0123 13:24:27.666388 139631495815168 alphageometry.py:567] Translation: "h = on_line h b g, on_bline h g b"

I0123 13:24:27.666424 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_line h b g, on_bline h g b ? simtri d b f e a f"
I0123 13:24:27.666550 139631495815168 graph.py:498] 
I0123 13:24:27.666597 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_line h b g, on_bline h g b ? simtri d b f e a f
I0123 13:24:27.825649 139631495815168 ddar.py:60] Depth 1/1000 time = 0.14286208152770996
I0123 13:24:28.104193 139631495815168 ddar.py:60] Depth 2/1000 time = 0.2784557342529297
I0123 13:24:28.578916 139631495815168 ddar.py:60] Depth 3/1000 time = 0.47461915016174316
I0123 13:24:29.136770 139631495815168 ddar.py:60] Depth 4/1000 time = 0.5576648712158203
I0123 13:24:29.686334 139631495815168 ddar.py:60] Depth 5/1000 time = 0.5493707656860352
I0123 13:24:30.233256 139631495815168 ddar.py:60] Depth 6/1000 time = 0.5463910102844238
I0123 13:24:31.504921 139631495815168 ddar.py:60] Depth 7/1000 time = 1.2615540027618408
I0123 13:24:31.505300 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:24:31.505350 139631495815168 alphageometry.py:566] LM output (score=-1.824036): "h : C a g h 08 D a h g h 09 ;"
I0123 13:24:31.505385 139631495815168 alphageometry.py:567] Translation: "h = on_line h a g, on_bline h g a"

I0123 13:24:31.505421 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_line h a g, on_bline h g a ? simtri d b f e a f"
I0123 13:24:31.505537 139631495815168 graph.py:498] 
I0123 13:24:31.505585 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_line h a g, on_bline h g a ? simtri d b f e a f
I0123 13:24:31.660942 139631495815168 ddar.py:60] Depth 1/1000 time = 0.13981103897094727
I0123 13:24:32.001181 139631495815168 ddar.py:60] Depth 2/1000 time = 0.34014892578125
I0123 13:24:32.420021 139631495815168 ddar.py:60] Depth 3/1000 time = 0.4187471866607666
I0123 13:24:32.876010 139631495815168 ddar.py:60] Depth 4/1000 time = 0.45583415031433105
I0123 13:24:33.341221 139631495815168 ddar.py:60] Depth 5/1000 time = 0.4650585651397705
I0123 13:24:33.800991 139631495815168 ddar.py:60] Depth 6/1000 time = 0.4592583179473877
I0123 13:24:33.808764 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:24:33.808815 139631495815168 alphageometry.py:566] LM output (score=-2.221774): "h : C e g h 08 D e h g h 09 ;"
I0123 13:24:33.808850 139631495815168 alphageometry.py:567] Translation: "h = on_line h e g, on_bline h g e"

I0123 13:24:33.808885 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_line h e g, on_bline h g e ? simtri d b f e a f"
I0123 13:24:33.809010 139631495815168 graph.py:498] 
I0123 13:24:33.809057 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_line h e g, on_bline h g e ? simtri d b f e a f
I0123 13:24:34.003022 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1789684295654297
I0123 13:24:34.351983 139631495815168 ddar.py:60] Depth 2/1000 time = 0.3488731384277344
I0123 13:24:34.762467 139631495815168 ddar.py:60] Depth 3/1000 time = 0.41039276123046875
I0123 13:24:35.213024 139631495815168 ddar.py:60] Depth 4/1000 time = 0.45040082931518555
I0123 13:24:35.670181 139631495815168 ddar.py:60] Depth 5/1000 time = 0.45700597763061523
I0123 13:24:36.129444 139631495815168 ddar.py:60] Depth 6/1000 time = 0.4587526321411133
I0123 13:24:36.137523 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:24:36.137572 139631495815168 alphageometry.py:566] LM output (score=-2.578322): "h : C d g h 08 D d h g h 09 ;"
I0123 13:24:36.137605 139631495815168 alphageometry.py:567] Translation: "h = on_line h d g, on_bline h g d"

I0123 13:24:36.137644 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_line h d g, on_bline h g d ? simtri d b f e a f"
I0123 13:24:36.137756 139631495815168 graph.py:498] 
I0123 13:24:36.137800 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_line h d g, on_bline h g d ? simtri d b f e a f
I0123 13:24:36.289392 139631495815168 ddar.py:60] Depth 1/1000 time = 0.13656854629516602
I0123 13:24:36.544187 139631495815168 ddar.py:60] Depth 2/1000 time = 0.25470781326293945
I0123 13:24:36.867918 139631495815168 ddar.py:60] Depth 3/1000 time = 0.323641300201416
I0123 13:24:37.229211 139631495815168 ddar.py:60] Depth 4/1000 time = 0.3611421585083008
I0123 13:24:37.589508 139631495815168 ddar.py:60] Depth 5/1000 time = 0.3601524829864502
I0123 13:24:37.960401 139631495815168 ddar.py:60] Depth 6/1000 time = 0.37040138244628906
I0123 13:24:37.968176 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:24:37.968225 139631495815168 alphageometry.py:566] LM output (score=-2.599102): "h : C f e h 08 D f h e h 09 ;"
I0123 13:24:37.968259 139631495815168 alphageometry.py:567] Translation: "h = on_line h f e, on_bline h e f"

I0123 13:24:37.968294 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_line h f e, on_bline h e f ? simtri d b f e a f"
I0123 13:24:37.968404 139631495815168 graph.py:498] 
I0123 13:24:37.968449 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_line h f e, on_bline h e f ? simtri d b f e a f
I0123 13:24:38.157762 139631495815168 ddar.py:60] Depth 1/1000 time = 0.17375636100769043
I0123 13:24:38.669517 139631495815168 ddar.py:60] Depth 2/1000 time = 0.5116605758666992
I0123 13:24:39.996107 139631495815168 ddar.py:60] Depth 3/1000 time = 1.3264482021331787
I0123 13:24:40.669904 139631495815168 ddar.py:60] Depth 4/1000 time = 0.673553466796875
I0123 13:24:41.366837 139631495815168 ddar.py:60] Depth 5/1000 time = 0.6967079639434814
I0123 13:24:42.061394 139631495815168 ddar.py:60] Depth 6/1000 time = 0.6939990520477295
I0123 13:24:42.071508 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:24:42.071572 139631495815168 alphageometry.py:566] LM output (score=-2.915801): "h : C f g h 08 D f h g h 09 ;"
I0123 13:24:42.071626 139631495815168 alphageometry.py:567] Translation: "h = on_line h f g, on_bline h g f"

I0123 13:24:42.071667 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_line h f g, on_bline h g f ? simtri d b f e a f"
I0123 13:24:42.071788 139631495815168 graph.py:498] 
I0123 13:24:42.071833 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_line h f g, on_bline h g f ? simtri d b f e a f
I0123 13:24:42.240624 139631495815168 ddar.py:60] Depth 1/1000 time = 0.15338683128356934
I0123 13:24:42.529721 139631495815168 ddar.py:60] Depth 2/1000 time = 0.2890002727508545
I0123 13:24:43.744518 139631495815168 ddar.py:60] Depth 3/1000 time = 1.2146925926208496
I0123 13:24:44.337267 139631495815168 ddar.py:60] Depth 4/1000 time = 0.5925180912017822
I0123 13:24:44.937690 139631495815168 ddar.py:60] Depth 5/1000 time = 0.6002111434936523
I0123 13:24:45.524713 139631495815168 ddar.py:60] Depth 6/1000 time = 0.5864484310150146
I0123 13:24:46.130767 139631495815168 ddar.py:60] Depth 7/1000 time = 0.5972235202789307
I0123 13:24:46.131095 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:24:46.131163 139631495815168 alphageometry.py:566] LM output (score=-3.224257): "h : C d e h 08 D d h e h 09 ;"
I0123 13:24:46.131199 139631495815168 alphageometry.py:567] Translation: "h = on_line h d e, on_bline h e d"

I0123 13:24:46.131235 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_line h d e, on_bline h e d ? simtri d b f e a f"
I0123 13:24:46.131354 139631495815168 graph.py:498] 
I0123 13:24:46.131401 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_line h d e, on_bline h e d ? simtri d b f e a f
I0123 13:24:46.288711 139631495815168 ddar.py:60] Depth 1/1000 time = 0.14197325706481934
I0123 13:24:47.240369 139631495815168 ddar.py:60] Depth 2/1000 time = 0.9515492916107178
I0123 13:24:47.561810 139631495815168 ddar.py:60] Depth 3/1000 time = 0.32128167152404785
I0123 13:24:47.924020 139631495815168 ddar.py:60] Depth 4/1000 time = 0.3620595932006836
I0123 13:24:48.292747 139631495815168 ddar.py:60] Depth 5/1000 time = 0.36858034133911133
I0123 13:24:48.652988 139631495815168 ddar.py:60] Depth 6/1000 time = 0.3597526550292969
I0123 13:24:48.660994 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:24:48.661045 139631495815168 alphageometry.py:566] LM output (score=-3.441608): "g : C c g e 08 D c g g g 09 ;"
I0123 13:24:48.661080 139631495815168 alphageometry.py:567] Translation: "ERROR: point g already exists."

I0123 13:24:48.661113 139631495815168 alphageometry.py:566] LM output (score=-3.650081): "h : C g e h 08 D g h e h 09 ;"
I0123 13:24:48.661140 139631495815168 alphageometry.py:567] Translation: "h = on_line h g e, on_bline h e g"

I0123 13:24:48.661171 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_line h g e, on_bline h e g ? simtri d b f e a f"
I0123 13:24:48.661283 139631495815168 graph.py:498] 
I0123 13:24:48.661328 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_line h g e, on_bline h e g ? simtri d b f e a f
I0123 13:24:48.851300 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1747570037841797
I0123 13:24:49.195306 139631495815168 ddar.py:60] Depth 2/1000 time = 0.3439157009124756
I0123 13:24:49.602079 139631495815168 ddar.py:60] Depth 3/1000 time = 0.40667128562927246
I0123 13:24:50.052061 139631495815168 ddar.py:60] Depth 4/1000 time = 0.44982194900512695
I0123 13:24:50.503702 139631495815168 ddar.py:60] Depth 5/1000 time = 0.45148444175720215
I0123 13:24:50.952971 139631495815168 ddar.py:60] Depth 6/1000 time = 0.4487738609313965
I0123 13:24:50.960789 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:24:50.960838 139631495815168 alphageometry.py:566] LM output (score=-3.662519): "h : C c e h 08 D c h e h 09 ;"
I0123 13:24:50.960871 139631495815168 alphageometry.py:567] Translation: "h = on_line h c e, on_bline h e c"

I0123 13:24:50.960904 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_line h c e, on_bline h e c ? simtri d b f e a f"
I0123 13:24:50.961013 139631495815168 graph.py:498] 
I0123 13:24:50.961059 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_line h c e, on_bline h e c ? simtri d b f e a f
I0123 13:24:51.145511 139631495815168 ddar.py:60] Depth 1/1000 time = 0.16893410682678223
I0123 13:24:51.443400 139631495815168 ddar.py:60] Depth 2/1000 time = 0.29780149459838867
I0123 13:24:51.809982 139631495815168 ddar.py:60] Depth 3/1000 time = 0.3664882183074951
I0123 13:24:52.205751 139631495815168 ddar.py:60] Depth 4/1000 time = 0.39562153816223145
I0123 13:24:52.605482 139631495815168 ddar.py:60] Depth 5/1000 time = 0.3995847702026367
I0123 13:24:53.001779 139631495815168 ddar.py:60] Depth 6/1000 time = 0.3958127498626709
I0123 13:24:53.009804 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:24:53.009853 139631495815168 alphageometry.py:566] LM output (score=-3.795013): "f : C c g f 08 D c f g f 09 ;"
I0123 13:24:53.009887 139631495815168 alphageometry.py:567] Translation: "ERROR: point f already exists."

I0123 13:24:53.009920 139631495815168 alphageometry.py:566] LM output (score=-3.813626): "h : C a c h 08 D a h c h 09 ;"
I0123 13:24:53.009947 139631495815168 alphageometry.py:567] Translation: "h = on_line h a c, on_bline h c a"

I0123 13:24:53.009976 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_line h a c, on_bline h c a ? simtri d b f e a f"
I0123 13:24:53.010083 139631495815168 graph.py:498] 
I0123 13:24:53.010128 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_line h a c, on_bline h c a ? simtri d b f e a f
I0123 13:24:53.201112 139631495815168 ddar.py:60] Depth 1/1000 time = 0.17539739608764648
I0123 13:24:53.680404 139631495815168 ddar.py:60] Depth 2/1000 time = 0.47919511795043945
I0123 13:24:54.971317 139631495815168 ddar.py:60] Depth 3/1000 time = 1.2907724380493164
I0123 13:24:55.598128 139631495815168 ddar.py:60] Depth 4/1000 time = 0.6265835762023926
I0123 13:24:56.219243 139631495815168 ddar.py:60] Depth 5/1000 time = 0.6208992004394531
I0123 13:24:57.580135 139631495815168 ddar.py:60] Depth 6/1000 time = 1.36033034324646
I0123 13:24:58.211953 139631495815168 ddar.py:60] Depth 7/1000 time = 0.6214742660522461
I0123 13:24:58.212286 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:24:58.212334 139631495815168 alphageometry.py:566] LM output (score=-3.861125): "b : C c g b 08 D c b g b 09 ;"
I0123 13:24:58.212368 139631495815168 alphageometry.py:567] Translation: "ERROR: point b already exists."

I0123 13:24:58.212401 139631495815168 alphageometry.py:566] LM output (score=-3.938489): "b : C a g b 08 D a b g b 09 ;"
I0123 13:24:58.212428 139631495815168 alphageometry.py:567] Translation: "ERROR: point b already exists."

I0123 13:24:58.212475 139631495815168 alphageometry.py:566] LM output (score=-3.965043): "h : C e g h 08 D e g e h 09 ;"
I0123 13:24:58.212505 139631495815168 alphageometry.py:567] Translation: "h = on_line h e g, on_circle h e g"

I0123 13:24:58.212536 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_line h e g, on_circle h e g ? simtri d b f e a f"
I0123 13:24:58.212651 139631495815168 graph.py:498] 
I0123 13:24:58.212697 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_line h e g, on_circle h e g ? simtri d b f e a f
I0123 13:24:58.400473 139631495815168 ddar.py:60] Depth 1/1000 time = 0.17246341705322266
I0123 13:24:58.781541 139631495815168 ddar.py:60] Depth 2/1000 time = 0.38097548484802246
I0123 13:24:59.270036 139631495815168 ddar.py:60] Depth 3/1000 time = 0.4884016513824463
I0123 13:24:59.829019 139631495815168 ddar.py:60] Depth 4/1000 time = 0.5588192939758301
I0123 13:25:00.396659 139631495815168 ddar.py:60] Depth 5/1000 time = 0.5674748420715332
I0123 13:25:00.966521 139631495815168 ddar.py:60] Depth 6/1000 time = 0.5693533420562744
I0123 13:25:00.974677 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:25:00.974726 139631495815168 alphageometry.py:566] LM output (score=-4.107825): "h : P c g e h 08 P c h e g 09 ;"
I0123 13:25:00.974761 139631495815168 alphageometry.py:567] Translation: "h = on_pline h e c g, on_pline h c e g"

I0123 13:25:00.974794 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_pline h e c g, on_pline h c e g ? simtri d b f e a f"
I0123 13:25:00.974905 139631495815168 graph.py:498] 
I0123 13:25:00.974949 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_pline h e c g, on_pline h c e g ? simtri d b f e a f
I0123 13:25:01.170056 139631495815168 ddar.py:60] Depth 1/1000 time = 0.16930580139160156
I0123 13:25:01.574850 139631495815168 ddar.py:60] Depth 2/1000 time = 0.40470433235168457
I0123 13:25:02.083821 139631495815168 ddar.py:60] Depth 3/1000 time = 0.5088756084442139
I0123 13:25:02.728458 139631495815168 ddar.py:60] Depth 4/1000 time = 0.6444666385650635
I0123 13:25:03.374004 139631495815168 ddar.py:60] Depth 5/1000 time = 0.6453876495361328
I0123 13:25:04.023225 139631495815168 ddar.py:60] Depth 6/1000 time = 0.64864182472229
I0123 13:25:04.036103 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:25:04.036154 139631495815168 alphageometry.py:566] LM output (score=-4.129300): "h : C b e h 08 D b h e h 09 ;"
I0123 13:25:04.036188 139631495815168 alphageometry.py:567] Translation: "h = on_line h b e, on_bline h e b"

I0123 13:25:04.036223 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_line h b e, on_bline h e b ? simtri d b f e a f"
I0123 13:25:04.036336 139631495815168 graph.py:498] 
I0123 13:25:04.036381 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_line h b e, on_bline h e b ? simtri d b f e a f
I0123 13:25:04.231940 139631495815168 ddar.py:60] Depth 1/1000 time = 0.17973756790161133
I0123 13:25:05.399358 139631495815168 ddar.py:60] Depth 2/1000 time = 1.1673107147216797
I0123 13:25:06.008980 139631495815168 ddar.py:60] Depth 3/1000 time = 0.6094439029693604
I0123 13:25:06.666740 139631495815168 ddar.py:60] Depth 4/1000 time = 0.6575343608856201
I0123 13:25:08.053476 139631495815168 ddar.py:60] Depth 5/1000 time = 1.386507272720337
I0123 13:25:08.702807 139631495815168 ddar.py:60] Depth 6/1000 time = 0.6487343311309814
I0123 13:25:09.379163 139631495815168 ddar.py:60] Depth 7/1000 time = 0.6665616035461426
I0123 13:25:09.379518 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:25:09.379576 139631495815168 alphageometry.py:566] LM output (score=-4.169289): "e : C c g e 08 D c e g e 09 ;"
I0123 13:25:09.379612 139631495815168 alphageometry.py:567] Translation: "ERROR: point e already exists."

I0123 13:25:09.379646 139631495815168 alphageometry.py:566] LM output (score=-4.219851): "h : C b c h 08 D b h c h 09 ;"
I0123 13:25:09.379674 139631495815168 alphageometry.py:567] Translation: "h = on_line h b c, on_bline h c b"

I0123 13:25:09.379706 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_line h b c, on_bline h c b ? simtri d b f e a f"
I0123 13:25:09.379823 139631495815168 graph.py:498] 
I0123 13:25:09.379869 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_line h b c, on_bline h c b ? simtri d b f e a f
I0123 13:25:09.576399 139631495815168 ddar.py:60] Depth 1/1000 time = 0.18050146102905273
I0123 13:25:10.770426 139631495815168 ddar.py:60] Depth 2/1000 time = 1.1939091682434082
I0123 13:25:11.382105 139631495815168 ddar.py:60] Depth 3/1000 time = 0.6114945411682129
I0123 13:25:12.031772 139631495815168 ddar.py:60] Depth 4/1000 time = 0.6494479179382324
I0123 13:25:13.475155 139631495815168 ddar.py:60] Depth 5/1000 time = 1.4431402683258057
I0123 13:25:14.121751 139631495815168 ddar.py:60] Depth 6/1000 time = 0.645951509475708
I0123 13:25:14.790436 139631495815168 ddar.py:60] Depth 7/1000 time = 0.6594505310058594
I0123 13:25:14.790954 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:25:14.791015 139631495815168 alphageometry.py:566] LM output (score=-4.237135): "g : C c g g 08 T c g a g 09 ;"
I0123 13:25:14.791050 139631495815168 alphageometry.py:567] Translation: "ERROR: point g already exists."

I0123 13:25:14.791087 139631495815168 alphageometry.py:566] LM output (score=-4.291012): "h : P c g f h 08 P c h f g 09 ;"
I0123 13:25:14.791114 139631495815168 alphageometry.py:567] Translation: "h = on_pline h f c g, on_pline h c f g"

I0123 13:25:14.791145 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_pline h f c g, on_pline h c f g ? simtri d b f e a f"
I0123 13:25:14.791281 139631495815168 graph.py:498] 
I0123 13:25:14.791332 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_pline h f c g, on_pline h c f g ? simtri d b f e a f
I0123 13:25:14.987621 139631495815168 ddar.py:60] Depth 1/1000 time = 0.16990232467651367
I0123 13:25:15.385570 139631495815168 ddar.py:60] Depth 2/1000 time = 0.39785075187683105
I0123 13:25:15.879353 139631495815168 ddar.py:60] Depth 3/1000 time = 0.4936816692352295
I0123 13:25:17.140046 139631495815168 ddar.py:60] Depth 4/1000 time = 1.2605221271514893
I0123 13:25:17.687170 139631495815168 ddar.py:60] Depth 5/1000 time = 0.5469145774841309
I0123 13:25:18.240422 139631495815168 ddar.py:60] Depth 6/1000 time = 0.5527439117431641
I0123 13:25:18.249967 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:25:18.250021 139631495815168 alphageometry.py:566] LM output (score=-4.319925): "h : P c g e h 08 P c h g e 09 ;"
I0123 13:25:18.250056 139631495815168 alphageometry.py:567] Translation: "h = on_pline h e c g, on_pline h c g e"

I0123 13:25:18.250106 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_pline h e c g, on_pline h c g e ? simtri d b f e a f"
I0123 13:25:18.250227 139631495815168 graph.py:498] 
I0123 13:25:18.250275 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_pline h e c g, on_pline h c g e ? simtri d b f e a f
I0123 13:25:18.445838 139631495815168 ddar.py:60] Depth 1/1000 time = 0.169050931930542
I0123 13:25:18.874536 139631495815168 ddar.py:60] Depth 2/1000 time = 0.42860913276672363
I0123 13:25:19.376836 139631495815168 ddar.py:60] Depth 3/1000 time = 0.5022056102752686
I0123 13:25:20.003686 139631495815168 ddar.py:60] Depth 4/1000 time = 0.6266894340515137
I0123 13:25:20.657976 139631495815168 ddar.py:60] Depth 5/1000 time = 0.6541357040405273
I0123 13:25:21.315493 139631495815168 ddar.py:60] Depth 6/1000 time = 0.6569452285766602
I0123 13:25:21.328931 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:25:21.328982 139631495815168 alphageometry.py:566] LM output (score=-4.476812): "h : P a g b h 08 P a h b g 09 ;"
I0123 13:25:21.329016 139631495815168 alphageometry.py:567] Translation: "h = on_pline h b a g, on_pline h a b g"

I0123 13:25:21.329051 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_pline h b a g, on_pline h a b g ? simtri d b f e a f"
I0123 13:25:21.329162 139631495815168 graph.py:498] 
I0123 13:25:21.329209 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_pline h b a g, on_pline h a b g ? simtri d b f e a f
I0123 13:25:21.514486 139631495815168 ddar.py:60] Depth 1/1000 time = 0.1558992862701416
I0123 13:25:21.844140 139631495815168 ddar.py:60] Depth 2/1000 time = 0.32956624031066895
I0123 13:25:22.297680 139631495815168 ddar.py:60] Depth 3/1000 time = 0.453449010848999
I0123 13:25:22.794661 139631495815168 ddar.py:60] Depth 4/1000 time = 0.49681925773620605
I0123 13:25:23.294534 139631495815168 ddar.py:60] Depth 5/1000 time = 0.49971437454223633
I0123 13:25:23.304173 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:25:23.304224 139631495815168 alphageometry.py:566] LM output (score=-4.478210): "g : C c g g 08 T c g g e 09 ;"
I0123 13:25:23.304259 139631495815168 alphageometry.py:567] Translation: "ERROR: point g already exists."

I0123 13:25:23.304291 139631495815168 alphageometry.py:566] LM output (score=-4.482038): "i : C c g i 08 D c i g i 09 ;"
I0123 13:25:23.304319 139631495815168 alphageometry.py:567] Translation: "i = on_line i c g, on_bline i g c"

I0123 13:25:23.304349 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; i = on_line i c g, on_bline i g c ? simtri d b f e a f"
I0123 13:25:23.304457 139631495815168 graph.py:498] 
I0123 13:25:23.304502 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_line h c g, on_bline h g c ? simtri d b f e a f
I0123 13:25:23.480572 139631495815168 ddar.py:60] Depth 1/1000 time = 0.16075372695922852
I0123 13:25:23.829043 139631495815168 ddar.py:60] Depth 2/1000 time = 0.34838104248046875
I0123 13:25:24.429998 139631495815168 ddar.py:60] Depth 3/1000 time = 0.6008455753326416
I0123 13:25:25.144114 139631495815168 ddar.py:60] Depth 4/1000 time = 0.7139039039611816
I0123 13:25:26.633899 139631495815168 ddar.py:60] Depth 5/1000 time = 1.489542007446289
I0123 13:25:27.376271 139631495815168 ddar.py:60] Depth 6/1000 time = 0.7416775226593018
I0123 13:25:27.386689 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:25:27.386773 139631495815168 alphageometry.py:566] LM output (score=-4.524248): "g : C c g g 08 T c g e g 09 ;"
I0123 13:25:27.386812 139631495815168 alphageometry.py:567] Translation: "ERROR: point g already exists."

I0123 13:25:27.386850 139631495815168 alphageometry.py:566] LM output (score=-4.565431): "h : P c g f h 08 P c h g f 09 ;"
I0123 13:25:27.386879 139631495815168 alphageometry.py:567] Translation: "h = on_pline h f c g, on_pline h c g f"

I0123 13:25:27.386913 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_pline h f c g, on_pline h c g f ? simtri d b f e a f"
I0123 13:25:27.387039 139631495815168 graph.py:498] 
I0123 13:25:27.387087 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_pline h f c g, on_pline h c g f ? simtri d b f e a f
I0123 13:25:27.593818 139631495815168 ddar.py:60] Depth 1/1000 time = 0.17937159538269043
I0123 13:25:28.038139 139631495815168 ddar.py:60] Depth 2/1000 time = 0.44412970542907715
I0123 13:25:28.552436 139631495815168 ddar.py:60] Depth 3/1000 time = 0.514115571975708
I0123 13:25:29.121592 139631495815168 ddar.py:60] Depth 4/1000 time = 0.5688967704772949
I0123 13:25:29.698553 139631495815168 ddar.py:60] Depth 5/1000 time = 0.5766959190368652
I0123 13:25:30.268579 139631495815168 ddar.py:60] Depth 6/1000 time = 0.5693347454071045
I0123 13:25:30.279338 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:25:30.279444 139631495815168 alphageometry.py:566] LM output (score=-4.597847): "h : P b g f h 08 P b h f g 09 ;"
I0123 13:25:30.279486 139631495815168 alphageometry.py:567] Translation: "h = on_pline h f b g, on_pline h b f g"

I0123 13:25:30.279526 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_pline h f b g, on_pline h b f g ? simtri d b f e a f"
I0123 13:25:30.279691 139631495815168 graph.py:498] 
I0123 13:25:30.279747 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_pline h f b g, on_pline h b f g ? simtri d b f e a f
I0123 13:25:30.487673 139631495815168 ddar.py:60] Depth 1/1000 time = 0.18010640144348145
I0123 13:25:30.956797 139631495815168 ddar.py:60] Depth 2/1000 time = 0.46886682510375977
I0123 13:25:31.510375 139631495815168 ddar.py:60] Depth 3/1000 time = 0.5532686710357666
I0123 13:25:32.107148 139631495815168 ddar.py:60] Depth 4/1000 time = 0.596522331237793
I0123 13:25:32.715016 139631495815168 ddar.py:60] Depth 5/1000 time = 0.6076006889343262
I0123 13:25:32.726514 139631495815168 alphageometry.py:221] DD+AR failed to solve the problem.
I0123 13:25:32.726603 139631495815168 alphageometry.py:566] LM output (score=-4.602944): "h : C e g h 08 T c h e g 09 ;"
I0123 13:25:32.726640 139631495815168 alphageometry.py:567] Translation: "h = on_line h e g, on_tline h c e g"

I0123 13:25:32.726692 139631495815168 alphageometry.py:576] Solving: "a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_line h e g, on_tline h c e g ? simtri d b f e a f"
I0123 13:25:32.726847 139631495815168 graph.py:498] 
I0123 13:25:32.726903 139631495815168 graph.py:499] a b c = triangle a b c; d = lc_tangent d b a, on_line d c a; e = lc_tangent e a b, on_line e c b; f = foot f c b a; g = on_pline g e c f, on_pline g f c e; h = on_line h e g, on_tline h c e g ? simtri d b f e a f
I0123 13:25:32.960482 139631495815168 ddar.py:60] Depth 1/1000 time = 0.21151018142700195
I0123 13:25:33.467863 139631495815168 ddar.py:60] Depth 2/1000 time = 0.5072331428527832
I0123 13:25:35.072794 139631495815168 ddar.py:60] Depth 3/1000 time = 1.6046531200408936
I0123 13:25:35.983211 139631495815168 ddar.py:60] Depth 4/1000 time = 0.9100532531738281
I0123 13:25:36.919518 139631495815168 ddar.py:60] Depth 5/1000 time = 0.9360406398773193
