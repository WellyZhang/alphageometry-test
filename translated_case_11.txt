I0124 00:41:10.495104 139966267543552 inference_utils.py:69] Parsing gin configuration.
I0124 00:41:10.495200 139966267543552 inference_utils.py:71] Added Gin search path meliad_lib/meliad/transformer/configs
I0124 00:41:10.495404 139966267543552 inference_utils.py:74] Loading Gin config file base_htrans.gin
I0124 00:41:10.495437 139966267543552 inference_utils.py:74] Loading Gin config file size/medium_150M.gin
I0124 00:41:10.495468 139966267543552 inference_utils.py:74] Loading Gin config file options/positions_t5.gin
I0124 00:41:10.495496 139966267543552 inference_utils.py:74] Loading Gin config file options/lr_cosine_decay.gin
I0124 00:41:10.495523 139966267543552 inference_utils.py:74] Loading Gin config file options/seq_1024_nocache.gin
I0124 00:41:10.495550 139966267543552 inference_utils.py:74] Loading Gin config file geometry_150M_generate.gin
I0124 00:41:10.495576 139966267543552 inference_utils.py:76] Overriding Gin param DecoderOnlyLanguageModelGenerate.output_token_losses=True
I0124 00:41:10.495602 139966267543552 inference_utils.py:76] Overriding Gin param TransformerTaskConfig.batch_size=32
I0124 00:41:10.495628 139966267543552 inference_utils.py:76] Overriding Gin param TransformerTaskConfig.sequence_length=128
I0124 00:41:10.495654 139966267543552 inference_utils.py:76] Overriding Gin param Trainer.restore_state_variables=False
I0124 00:41:10.495698 139966267543552 resource_reader.py:50] system_path_file_exists:base_htrans.gin
E0124 00:41:10.495831 139966267543552 resource_reader.py:55] Path not found: base_htrans.gin
I0124 00:41:10.496028 139966267543552 resource_reader.py:50] system_path_file_exists:trainer_configuration.gin
E0124 00:41:10.496128 139966267543552 resource_reader.py:55] Path not found: trainer_configuration.gin
I0124 00:41:10.502353 139966267543552 resource_reader.py:50] system_path_file_exists:size/medium_150M.gin
E0124 00:41:10.502474 139966267543552 resource_reader.py:55] Path not found: size/medium_150M.gin
I0124 00:41:10.502791 139966267543552 resource_reader.py:50] system_path_file_exists:options/positions_t5.gin
E0124 00:41:10.502898 139966267543552 resource_reader.py:55] Path not found: options/positions_t5.gin
I0124 00:41:10.503172 139966267543552 resource_reader.py:50] system_path_file_exists:options/lr_cosine_decay.gin
E0124 00:41:10.503273 139966267543552 resource_reader.py:55] Path not found: options/lr_cosine_decay.gin
I0124 00:41:10.503674 139966267543552 resource_reader.py:50] system_path_file_exists:options/seq_1024_nocache.gin
E0124 00:41:10.503776 139966267543552 resource_reader.py:55] Path not found: options/seq_1024_nocache.gin
I0124 00:41:10.507371 139966267543552 training_loop.py:334] ==== Training loop: initializing model ====
I0124 00:41:10.613915 139966267543552 xla_bridge.py:660] Unable to initialize backend 'rocm': NOT_FOUND: Could not find registered platform with name: "rocm". Available platform names are: CUDA
I0124 00:41:10.614642 139966267543552 xla_bridge.py:660] Unable to initialize backend 'tpu': INTERNAL: Failed to open libtpu.so: libtpu.so: cannot open shared object file: No such file or directory
I0124 00:41:10.621257 139966267543552 training_loop.py:335] Process 0 of 1
I0124 00:41:10.621313 139966267543552 training_loop.py:336] Local device count = 1
I0124 00:41:10.621353 139966267543552 training_loop.py:337] Number of replicas = 1
I0124 00:41:10.621384 139966267543552 training_loop.py:339] Using random number seed 42
I0124 00:41:11.109225 139966267543552 training_loop.py:359] Initializing the model.
I0124 00:41:11.519276 139966267543552 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.519532 139966267543552 decoder_stack.py:316] dstack: scanning over 1 windows.
I0124 00:41:11.519637 139966267543552 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0124 00:41:11.519714 139966267543552 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0124 00:41:11.519790 139966267543552 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0124 00:41:11.519876 139966267543552 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0124 00:41:11.519948 139966267543552 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0124 00:41:11.520018 139966267543552 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0124 00:41:11.520086 139966267543552 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0124 00:41:11.520152 139966267543552 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0124 00:41:11.520220 139966267543552 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0124 00:41:11.520287 139966267543552 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0124 00:41:11.520353 139966267543552 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0124 00:41:11.520419 139966267543552 transformer_layer.py:657] tlayer: Skipping XL cache for mode init.
I0124 00:41:11.520458 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:11.520503 139966267543552 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0124 00:41:11.520617 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:11.520657 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:11.520689 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:11.522686 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.527868 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:11.538260 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.538532 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:11.542816 139966267543552 transformer_layer.py:213] tlayer: windowed attention.
I0124 00:41:11.553214 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:11.553274 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:11.553313 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:11.553346 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.553409 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.554582 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.554664 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.555355 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.557766 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.563316 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.565018 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.565101 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:11.565138 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:11.565199 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.565331 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:11.565666 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:11.565717 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:11.567598 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.567702 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:11.570529 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.570614 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:11.571106 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:11.580894 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:11.589555 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.589663 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:11.589962 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.590045 139966267543552 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0124 00:41:11.590158 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:11.590199 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:11.590231 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:11.592091 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.594527 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:11.600044 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.600313 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:11.602887 139966267543552 transformer_layer.py:213] tlayer: windowed attention.
I0124 00:41:11.606647 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:11.606707 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:11.606744 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:11.606776 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.606840 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.607406 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.607486 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.607841 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.608598 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.611018 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.611636 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.611715 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:11.611751 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:11.611811 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.611937 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:11.612257 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:11.612303 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:11.614232 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.614329 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:11.616746 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.616831 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:11.617255 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:11.619532 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:11.621368 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.621463 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:11.621757 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.621841 139966267543552 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0124 00:41:11.621950 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:11.621991 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:11.622023 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:11.623915 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.626215 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:11.632067 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.632332 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:11.634935 139966267543552 transformer_layer.py:213] tlayer: windowed attention.
I0124 00:41:11.638720 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:11.638817 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:11.638856 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:11.638888 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.638950 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.639508 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.639588 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.639939 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.640686 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.643123 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.643785 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.643865 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:11.643900 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:11.643961 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.644088 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:11.644413 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:11.644459 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:11.646364 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.646461 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:11.648899 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.648987 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:11.649479 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:11.651723 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:11.653601 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.653706 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:11.653996 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.654079 139966267543552 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0124 00:41:11.654190 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:11.654229 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:11.654261 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:11.656159 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.658503 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:11.664026 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.664286 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:11.666881 139966267543552 transformer_layer.py:213] tlayer: windowed attention.
I0124 00:41:11.670660 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:11.670719 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:11.670756 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:11.670787 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.670854 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.671409 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.671492 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.671853 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.672601 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.675106 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.675732 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.675813 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:11.675852 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:11.675913 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.676045 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:11.676368 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:11.676415 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:11.678313 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.678414 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:11.680937 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.681025 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:11.681461 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:11.683698 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:11.685571 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.685679 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:11.685969 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.686052 139966267543552 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0124 00:41:11.686160 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:11.686200 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:11.686232 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:11.688137 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.690477 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:11.695988 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.696247 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:11.698881 139966267543552 transformer_layer.py:213] tlayer: windowed attention.
I0124 00:41:11.702610 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:11.702669 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:11.702705 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:11.702737 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.702801 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.703367 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.703447 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.703801 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.704567 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.707401 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.708023 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.708104 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:11.708140 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:11.708200 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.708338 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:11.708664 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:11.708711 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:11.710584 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.710681 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:11.713160 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.713243 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:11.713683 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:11.715930 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:11.717885 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.717983 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:11.718269 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.718351 139966267543552 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0124 00:41:11.718461 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:11.718501 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:11.718533 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:11.720349 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.722685 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:11.728194 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.728456 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:11.731100 139966267543552 transformer_layer.py:213] tlayer: windowed attention.
I0124 00:41:11.734814 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:11.734873 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:11.734910 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:11.734941 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.735003 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.735598 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.735678 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.736037 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.736809 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.739230 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.739848 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.739927 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:11.739962 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:11.740021 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.740148 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:11.740470 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:11.740517 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:11.742387 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.742484 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:11.744978 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.745061 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:11.745499 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:11.747796 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:11.749699 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.749799 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:11.750089 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.750171 139966267543552 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0124 00:41:11.750282 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:11.750321 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:11.750354 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:11.752184 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.755433 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:11.761116 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.761394 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:11.763977 139966267543552 transformer_layer.py:213] tlayer: windowed attention.
I0124 00:41:11.767787 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:11.767849 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:11.767887 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:11.767919 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.767983 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.768555 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.768650 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.769014 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.769785 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.772179 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.772804 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.772884 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:11.772920 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:11.772978 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.773108 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:11.773432 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:11.773479 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:11.775383 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.775480 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:11.777906 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.777990 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:11.778416 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:11.781024 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:11.782902 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.783008 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:11.783299 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.783389 139966267543552 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0124 00:41:11.783499 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:11.783540 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:11.783572 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:11.920830 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.923934 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:11.929790 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.930085 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:11.932724 139966267543552 transformer_layer.py:213] tlayer: windowed attention.
I0124 00:41:11.936627 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:11.936688 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:11.936727 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:11.936761 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.936824 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.937439 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.937519 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.937889 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.938660 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.941176 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.941832 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.941914 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:11.941952 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:11.942014 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.942147 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:11.942490 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:11.942537 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:11.944414 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.944510 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:11.947052 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.947136 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:11.947578 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:11.949873 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:11.951768 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.951879 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:11.952177 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.952263 139966267543552 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0124 00:41:11.952375 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:11.952415 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:11.952447 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:11.954399 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.956751 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:11.962350 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.962608 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:11.965235 139966267543552 transformer_layer.py:213] tlayer: windowed attention.
I0124 00:41:11.968981 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:11.969041 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:11.969078 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:11.969110 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.969174 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.969743 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.969823 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.970182 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.970948 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.973459 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.974092 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.974173 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:11.974209 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:11.974268 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.974396 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:11.974722 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:11.974767 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:11.976659 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.976754 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:11.979265 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.979347 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:11.979782 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:11.982032 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:11.983978 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.984075 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:11.984367 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.984458 139966267543552 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0124 00:41:11.984573 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:11.984614 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:11.984646 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:11.986515 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.988910 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:11.994538 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:11.994799 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:11.997783 139966267543552 transformer_layer.py:213] tlayer: windowed attention.
I0124 00:41:12.001474 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:12.001532 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:12.001569 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:12.001603 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.001674 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.002279 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.002358 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.002717 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.003476 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.005905 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.006527 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.006607 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:12.006643 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:12.006701 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.006829 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:12.007148 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:12.007195 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.009100 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.009196 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.011717 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.011803 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:12.012231 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:12.014520 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.016407 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.016503 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.016790 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.016883 139966267543552 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0124 00:41:12.016996 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:12.017036 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:12.017068 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:12.018920 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.021318 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:12.026868 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.027142 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:12.029719 139966267543552 transformer_layer.py:213] tlayer: windowed attention.
I0124 00:41:12.033464 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:12.033522 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:12.033560 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:12.033592 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.033663 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.034256 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.034338 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.034694 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.035466 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.037928 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.038552 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.038632 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:12.038667 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:12.038727 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.038855 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:12.039176 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:12.039223 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.041140 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.041241 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.043957 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.044040 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:12.044476 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:12.046783 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.048688 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.048787 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.049078 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.049163 139966267543552 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0124 00:41:12.049285 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:12.049329 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:12.049361 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:12.051279 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.053614 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:12.059205 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.059469 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:12.062060 139966267543552 transformer_layer.py:213] tlayer: windowed attention.
I0124 00:41:12.065845 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:12.065904 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:12.065941 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:12.065973 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.066041 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.066598 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.066676 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.067031 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.067792 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.070222 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.071204 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.071285 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:12.071322 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:12.071382 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.071509 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:12.071835 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:12.071882 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.073767 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.073864 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.076297 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.076379 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:12.076870 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:12.079088 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.080971 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.081068 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.081359 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.081655 139966267543552 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0124 00:41:12.081731 139966267543552 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0124 00:41:12.081800 139966267543552 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0124 00:41:12.081858 139966267543552 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0124 00:41:12.081915 139966267543552 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0124 00:41:12.081969 139966267543552 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0124 00:41:12.082024 139966267543552 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0124 00:41:12.082078 139966267543552 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0124 00:41:12.082132 139966267543552 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0124 00:41:12.082187 139966267543552 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0124 00:41:12.082244 139966267543552 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0124 00:41:12.082299 139966267543552 transformer_layer.py:673] tlayer: Skipping XL cache update for mode init.
I0124 00:41:12.082338 139966267543552 decoder_stack.py:344] dstack: Final layernorm.
I0124 00:41:12.085776 139966267543552 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:12.132956 139966267543552 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.133047 139966267543552 decoder_stack.py:333] dstack: autoregressive generator.
I0124 00:41:12.133103 139966267543552 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0124 00:41:12.133209 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:12.133249 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:12.133280 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:12.133344 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.135760 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:12.141194 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.141455 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:12.144078 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:12.160545 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:12.160607 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:12.160646 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:12.160680 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.160748 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.161882 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.161964 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.162657 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.164628 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.169274 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.170574 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.170664 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:12.170702 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:12.170763 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.170896 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:12.171006 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:12.171046 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.172912 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.173007 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.175397 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.175484 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:12.175596 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:12.177808 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.179733 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.179832 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.180119 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.180203 139966267543552 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0124 00:41:12.180312 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:12.180352 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:12.180385 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:12.180451 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.182668 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:12.188085 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.188345 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:12.190958 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:12.204014 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:12.204076 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:12.204114 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:12.204146 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.204210 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.204769 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.204849 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.205206 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.205905 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.208338 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.208951 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.209030 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:12.209073 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:12.209133 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.209264 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:12.209374 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:12.209415 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.211338 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.211436 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.213811 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.213892 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:12.214004 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:12.216198 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.218120 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.218220 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.218507 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.218590 139966267543552 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0124 00:41:12.218701 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:12.218742 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:12.218774 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:12.218838 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.221055 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:12.226466 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.226727 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:12.229349 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:12.241965 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:12.242026 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:12.242064 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:12.242096 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.242162 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.242719 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.242798 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.243148 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.243834 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.246270 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.246895 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.246975 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:12.247011 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:12.247078 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.247207 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:12.247318 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:12.247357 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.249237 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.249334 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.251722 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.251806 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:12.251916 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:12.254101 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.255988 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.256084 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.256367 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.256450 139966267543552 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0124 00:41:12.256561 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:12.256601 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:12.256633 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:12.256697 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.258903 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:12.264249 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.264507 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:12.267144 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:12.279756 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:12.279815 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:12.279853 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:12.279885 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.279949 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.280497 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.280578 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.280933 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.281611 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.284042 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.284656 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.284736 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:12.284771 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:12.284830 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.284975 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:12.285090 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:12.285131 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.287031 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.287129 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.289478 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.289560 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:12.289676 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:12.291869 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.293696 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.293795 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.294080 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.294163 139966267543552 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0124 00:41:12.294272 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:12.294312 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:12.294344 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:12.294408 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.296967 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:12.302343 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.302606 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:12.305153 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:12.317755 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:12.317816 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:12.317854 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:12.317887 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.317954 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.318512 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.318592 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.318947 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.319622 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.322114 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.322748 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.322829 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:12.322866 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:12.322926 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.323060 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:12.323171 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:12.323211 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.325061 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.325157 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.327516 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.327598 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:12.327706 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:12.329966 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.331799 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.331897 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.332180 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.332261 139966267543552 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0124 00:41:12.332368 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:12.332408 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:12.332439 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:12.332502 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.334730 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:12.340087 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.340345 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:12.342983 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:12.355581 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:12.355644 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:12.355681 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:12.355712 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.355776 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.356335 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.356415 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.356770 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.357465 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.359906 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.360542 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.360623 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:12.360658 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:12.360717 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.360846 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:12.360966 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:12.361007 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.362922 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.363022 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.365365 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.365447 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:12.365558 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:12.367763 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.369599 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.369707 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.369991 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.370073 139966267543552 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0124 00:41:12.370182 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:12.370223 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:12.370254 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:12.370318 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.372532 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:12.378030 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.378294 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:12.380865 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:12.393453 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:12.393514 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:12.393551 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:12.393582 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.393652 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.394211 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.394291 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.394645 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.395330 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.397765 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.398753 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.398834 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:12.398871 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:12.398931 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.399063 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:12.399174 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:12.399223 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.401087 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.401185 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.403541 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.403624 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:12.403734 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:12.405933 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.407841 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.407941 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.408226 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.408309 139966267543552 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0124 00:41:12.408419 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:12.408458 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:12.408492 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:12.408557 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.417230 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:12.422844 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.423149 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:12.425896 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:12.438793 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:12.438856 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:12.438897 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:12.438931 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.438996 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.439642 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.439723 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.440089 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.440783 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.443276 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.443906 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.443989 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:12.444024 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:12.444084 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.444215 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:12.444330 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:12.444379 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.446267 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.446366 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.448836 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.448920 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:12.449033 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:12.451284 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.453143 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.453241 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.453528 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.453611 139966267543552 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0124 00:41:12.453733 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:12.453777 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:12.453810 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:12.453875 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.456096 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:12.461568 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.461833 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:12.464429 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:12.477057 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:12.477117 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:12.477155 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:12.477187 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.477250 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.477823 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.477904 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.478258 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.478941 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.481379 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.482071 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.482153 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:12.482189 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:12.482250 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.482381 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:12.482492 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:12.482533 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.484401 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.484498 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.486866 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.486950 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:12.487061 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:12.489251 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.491188 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.491287 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.491576 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.491662 139966267543552 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0124 00:41:12.491773 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:12.491813 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:12.491847 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:12.491912 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.494149 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:12.499657 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.499927 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:12.502628 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:12.515486 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:12.515547 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:12.515584 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:12.515616 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.515679 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.516290 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.516371 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.516725 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.517428 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.519865 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.520493 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.520573 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:12.520609 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:12.520671 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.520801 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:12.520911 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:12.520953 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.522831 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.522940 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.525388 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.525472 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:12.525587 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:12.527804 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.529675 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.529776 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.530061 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.530144 139966267543552 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0124 00:41:12.530254 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:12.530294 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:12.530327 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:12.530390 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.532630 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:12.538111 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.538373 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:12.540980 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:12.553556 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:12.553617 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:12.553664 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:12.553698 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.553761 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.554314 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.554394 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.554751 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.555436 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.557885 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.558552 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.558633 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:12.558669 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:12.558729 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.558859 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:12.558972 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:12.559013 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.560903 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.561008 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.563449 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.563539 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:12.563649 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:12.565860 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.567777 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.567874 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.568161 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.568245 139966267543552 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0124 00:41:12.568356 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:12.568396 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:12.568429 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:12.568494 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.570697 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:12.576049 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.576309 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:12.578956 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:12.591563 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:12.591625 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:12.591662 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:12.591694 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.591758 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.592318 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.592397 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.592752 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.593488 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.595940 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.596565 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.596646 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:12.596682 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:12.596741 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.596870 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:12.596982 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:12.597022 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.598890 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.598989 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.601377 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.601460 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:12.601571 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:12.603828 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.605710 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.605810 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.606097 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.606189 139966267543552 decoder_stack.py:344] dstack: Final layernorm.
I0124 00:41:12.609040 139966267543552 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:12.664086 139966267543552 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.664178 139966267543552 decoder_stack.py:333] dstack: autoregressive generator.
I0124 00:41:12.664235 139966267543552 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0124 00:41:12.664340 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:12.664380 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:12.664412 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:12.664477 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.667138 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:12.672474 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.672737 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:12.675286 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:12.687605 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:12.687669 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:12.687707 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:12.687740 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.687803 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.688359 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.688438 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.688791 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.689456 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.691899 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.692513 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.692595 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:12.692631 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:12.692691 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.692818 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:12.692941 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:12.692983 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.694815 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.694915 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.697273 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.697355 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:12.697467 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:12.699688 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.701510 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.701609 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.701900 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.701985 139966267543552 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0124 00:41:12.702093 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:12.702134 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:12.702166 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:12.702231 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.704410 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:12.709716 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.709979 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:12.712594 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:12.724719 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:12.724780 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:12.724817 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:12.724848 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.724911 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.725456 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.725534 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.725887 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.726557 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.728995 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.729608 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.729698 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:12.729735 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:12.729795 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.729925 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:12.730035 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:12.730083 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.731899 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.731997 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.734334 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.734417 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:12.734528 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:12.736744 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.738564 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.738663 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.738946 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.739029 139966267543552 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0124 00:41:12.739138 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:12.739180 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:12.739212 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:12.739277 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.741449 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:12.746738 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.746995 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:12.749591 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:12.761790 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:12.761851 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:12.761888 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:12.761921 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.761984 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.762537 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.762616 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.762968 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.763632 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.766094 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.766712 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.766793 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:12.766829 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:12.766889 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.767019 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:12.767129 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:12.767168 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.768999 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.769098 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.771451 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.771534 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:12.771644 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:12.774313 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.776132 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.776232 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.776516 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.776598 139966267543552 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0124 00:41:12.776705 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:12.776746 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:12.776778 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:12.776843 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.779054 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:12.784350 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.784609 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:12.787233 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:12.799468 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:12.799527 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:12.799566 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:12.799608 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.799673 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.800228 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.800307 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.800656 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.801327 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.803787 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.804402 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.804481 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:12.804516 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:12.804578 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.804703 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:12.804809 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:12.804849 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.806689 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.806787 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.809125 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.809205 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:12.809313 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:12.811559 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.813386 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.813482 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.813773 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.813856 139966267543552 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0124 00:41:12.813964 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:12.814002 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:12.814032 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:12.814096 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.816263 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:12.821637 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.821902 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:12.824534 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:12.836885 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:12.836943 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:12.836978 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:12.837008 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.837071 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.837623 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.837709 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.838058 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.838738 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.841226 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.841848 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.841928 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:12.841964 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:12.842022 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.842150 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:12.842260 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:12.842299 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.844142 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.844246 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.846609 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.846692 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:12.846801 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:12.849017 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.850837 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.850935 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.851214 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.851296 139966267543552 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0124 00:41:12.851403 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:12.851442 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:12.851473 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:12.851536 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.853728 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:12.859040 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.859298 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:12.861940 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:12.874240 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:12.874298 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:12.874337 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:12.874367 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.874430 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.874987 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.875064 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.875409 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.876091 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.878587 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.879199 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.879278 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:12.879312 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:12.879370 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.879494 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:12.879602 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:12.879640 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.881475 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.881578 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.883942 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.884023 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:12.884133 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:12.886774 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.888622 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.888720 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.889002 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.889083 139966267543552 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0124 00:41:12.889191 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:12.889230 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:12.889261 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:12.889323 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.891517 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:12.896903 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.897160 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:12.899809 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:12.912266 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:12.912325 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:12.912360 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:12.912390 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.912452 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.913007 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.913084 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.913436 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.914119 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.916567 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.917193 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.917273 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:12.917307 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:12.917366 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.917495 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:12.917605 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:12.917651 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.919478 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.919573 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.921931 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.922014 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:12.922122 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:12.924355 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.926179 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.926276 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.926558 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.926639 139966267543552 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0124 00:41:12.926746 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:12.926784 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:12.926817 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:12.926881 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.929059 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:12.934425 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.934685 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:12.937334 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:12.949823 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:12.949883 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:12.949919 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:12.949949 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.950012 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.950585 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.950664 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.951023 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.951710 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.954224 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.954845 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.954925 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:12.954959 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:12.955018 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.955144 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:12.955251 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:12.955289 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.957124 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.957219 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.959571 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.959660 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:12.959770 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:12.962015 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.963823 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.963920 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.964201 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.964282 139966267543552 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0124 00:41:12.964388 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:12.964426 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:12.964457 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:12.964519 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.966716 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:12.972048 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.972306 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:12.974939 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:12.987331 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:12.987389 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:12.987424 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:12.987455 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.987516 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.988070 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.988148 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.988506 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.989181 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.991672 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.992291 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.992370 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:12.992405 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:12.992461 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.992585 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:12.992691 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:12.992728 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:12.994565 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.994661 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:12.996992 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:12.997080 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:12.997191 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:12.999814 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:13.001648 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.001746 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:13.002025 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.002106 139966267543552 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0124 00:41:13.002211 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:13.002250 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:13.002279 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:13.002342 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.004506 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:13.009814 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.010071 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:13.012682 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:13.025049 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:13.025108 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:13.025144 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:13.025175 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.025237 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.025804 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.025883 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.026232 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.026909 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.029364 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.029997 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.030079 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:13.030113 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:13.030170 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.030293 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:13.030405 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:13.030443 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:13.032797 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.032894 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:13.035222 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.035308 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:13.035426 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:13.037638 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:13.039453 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.039548 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:13.039827 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.039906 139966267543552 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0124 00:41:13.040010 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:13.040049 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:13.040078 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:13.040141 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.042314 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:13.047594 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.047853 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:13.050474 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:13.062714 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:13.062773 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:13.062808 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:13.062839 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.062901 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.063457 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.063534 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.063882 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.064554 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.067027 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.067642 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.067722 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:13.067757 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:13.067814 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.067938 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:13.068046 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:13.068084 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:13.069921 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.070016 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:13.072345 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.072425 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:13.072533 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:13.074779 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:13.076603 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.076699 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:13.076977 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.077056 139966267543552 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0124 00:41:13.077163 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:13.077201 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:13.077230 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:13.077293 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.079464 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:13.084753 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.085010 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:13.087642 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:13.099996 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:13.100054 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:13.100089 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:13.100119 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.100181 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.100731 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.100808 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.101158 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.101847 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.104317 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.104932 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.105010 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:13.105045 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:13.105101 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.105224 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:13.105331 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:13.105369 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:13.107210 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.107305 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:13.109655 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.109736 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:13.109846 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:13.112464 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:13.114326 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.114424 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:13.114705 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:13.114790 139966267543552 decoder_stack.py:344] dstack: Final layernorm.
I0124 00:41:13.117570 139966267543552 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:17.530203 139966267543552 optimizer_config.py:74] Using Flax Adafactor Optimizer. lr=1.000000, b1=0.900000
I0124 00:41:18.077770 139966267543552 training_loop.py:409] No working directory specified.
I0124 00:41:18.077903 139966267543552 training_loop.py:431] Loading pre-trained model from ag_ckpt_vocab:
I0124 00:41:18.078675 139966267543552 checkpoints.py:1062] Restoring legacy Flax checkpoint from ag_ckpt_vocab/checkpoint_10999999
I0124 00:41:21.421803 139966267543552 training_loop.py:447] Only restoring trainable parameters.
I0124 00:41:21.422449 139966267543552 training_loop.py:724] parameter: decoder/embed/embedding, shape (1024, 1024), size 1048576
I0124 00:41:21.422534 139966267543552 training_loop.py:724] parameter: decoder/final_layernorm/scale, shape (1024,), size 1024
I0124 00:41:21.422588 139966267543552 training_loop.py:724] parameter: decoder/transformer0/relative_positions/rel_embedding, shape (8, 32), size 256
I0124 00:41:21.422635 139966267543552 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/attention_scale, shape (8,), size 8
I0124 00:41:21.422679 139966267543552 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.422722 139966267543552 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0124 00:41:21.422764 139966267543552 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.422805 139966267543552 training_loop.py:724] parameter: decoder/transformer0/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.422844 139966267543552 training_loop.py:724] parameter: decoder/transformer0/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0124 00:41:21.422883 139966267543552 training_loop.py:724] parameter: decoder/transformer0/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0124 00:41:21.422923 139966267543552 training_loop.py:724] parameter: decoder/transformer0/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.422963 139966267543552 training_loop.py:724] parameter: decoder/transformer0/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0124 00:41:21.423002 139966267543552 training_loop.py:724] parameter: decoder/transformer1/relative_positions/rel_embedding, shape (8, 32), size 256
I0124 00:41:21.423040 139966267543552 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/attention_scale, shape (8,), size 8
I0124 00:41:21.423079 139966267543552 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.423118 139966267543552 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0124 00:41:21.423156 139966267543552 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.423193 139966267543552 training_loop.py:724] parameter: decoder/transformer1/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.423234 139966267543552 training_loop.py:724] parameter: decoder/transformer1/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0124 00:41:21.423274 139966267543552 training_loop.py:724] parameter: decoder/transformer1/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0124 00:41:21.423333 139966267543552 training_loop.py:724] parameter: decoder/transformer1/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.423374 139966267543552 training_loop.py:724] parameter: decoder/transformer1/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0124 00:41:21.423413 139966267543552 training_loop.py:724] parameter: decoder/transformer10/relative_positions/rel_embedding, shape (8, 32), size 256
I0124 00:41:21.423451 139966267543552 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/attention_scale, shape (8,), size 8
I0124 00:41:21.423489 139966267543552 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.423526 139966267543552 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0124 00:41:21.423563 139966267543552 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.423600 139966267543552 training_loop.py:724] parameter: decoder/transformer10/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.423637 139966267543552 training_loop.py:724] parameter: decoder/transformer10/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0124 00:41:21.423676 139966267543552 training_loop.py:724] parameter: decoder/transformer10/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0124 00:41:21.423712 139966267543552 training_loop.py:724] parameter: decoder/transformer10/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.423749 139966267543552 training_loop.py:724] parameter: decoder/transformer10/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0124 00:41:21.423787 139966267543552 training_loop.py:724] parameter: decoder/transformer11/relative_positions/rel_embedding, shape (8, 32), size 256
I0124 00:41:21.423823 139966267543552 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/attention_scale, shape (8,), size 8
I0124 00:41:21.423861 139966267543552 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.423897 139966267543552 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0124 00:41:21.423934 139966267543552 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.423969 139966267543552 training_loop.py:724] parameter: decoder/transformer11/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.424006 139966267543552 training_loop.py:724] parameter: decoder/transformer11/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0124 00:41:21.424043 139966267543552 training_loop.py:724] parameter: decoder/transformer11/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0124 00:41:21.424080 139966267543552 training_loop.py:724] parameter: decoder/transformer11/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.424116 139966267543552 training_loop.py:724] parameter: decoder/transformer11/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0124 00:41:21.424152 139966267543552 training_loop.py:724] parameter: decoder/transformer2/relative_positions/rel_embedding, shape (8, 32), size 256
I0124 00:41:21.424188 139966267543552 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/attention_scale, shape (8,), size 8
I0124 00:41:21.424225 139966267543552 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.424260 139966267543552 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0124 00:41:21.424305 139966267543552 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.424343 139966267543552 training_loop.py:724] parameter: decoder/transformer2/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.424380 139966267543552 training_loop.py:724] parameter: decoder/transformer2/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0124 00:41:21.424418 139966267543552 training_loop.py:724] parameter: decoder/transformer2/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0124 00:41:21.424455 139966267543552 training_loop.py:724] parameter: decoder/transformer2/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.424492 139966267543552 training_loop.py:724] parameter: decoder/transformer2/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0124 00:41:21.424529 139966267543552 training_loop.py:724] parameter: decoder/transformer3/relative_positions/rel_embedding, shape (8, 32), size 256
I0124 00:41:21.424566 139966267543552 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/attention_scale, shape (8,), size 8
I0124 00:41:21.424605 139966267543552 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.424642 139966267543552 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0124 00:41:21.424680 139966267543552 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.424718 139966267543552 training_loop.py:724] parameter: decoder/transformer3/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.424754 139966267543552 training_loop.py:724] parameter: decoder/transformer3/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0124 00:41:21.424792 139966267543552 training_loop.py:724] parameter: decoder/transformer3/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0124 00:41:21.424829 139966267543552 training_loop.py:724] parameter: decoder/transformer3/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.424865 139966267543552 training_loop.py:724] parameter: decoder/transformer3/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0124 00:41:21.424902 139966267543552 training_loop.py:724] parameter: decoder/transformer4/relative_positions/rel_embedding, shape (8, 32), size 256
I0124 00:41:21.424939 139966267543552 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/attention_scale, shape (8,), size 8
I0124 00:41:21.424977 139966267543552 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.425014 139966267543552 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0124 00:41:21.425050 139966267543552 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.425086 139966267543552 training_loop.py:724] parameter: decoder/transformer4/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.425124 139966267543552 training_loop.py:724] parameter: decoder/transformer4/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0124 00:41:21.425162 139966267543552 training_loop.py:724] parameter: decoder/transformer4/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0124 00:41:21.425199 139966267543552 training_loop.py:724] parameter: decoder/transformer4/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.425236 139966267543552 training_loop.py:724] parameter: decoder/transformer4/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0124 00:41:21.425273 139966267543552 training_loop.py:724] parameter: decoder/transformer5/relative_positions/rel_embedding, shape (8, 32), size 256
I0124 00:41:21.425318 139966267543552 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/attention_scale, shape (8,), size 8
I0124 00:41:21.425357 139966267543552 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.425394 139966267543552 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0124 00:41:21.425431 139966267543552 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.425468 139966267543552 training_loop.py:724] parameter: decoder/transformer5/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.425507 139966267543552 training_loop.py:724] parameter: decoder/transformer5/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0124 00:41:21.425544 139966267543552 training_loop.py:724] parameter: decoder/transformer5/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0124 00:41:21.425580 139966267543552 training_loop.py:724] parameter: decoder/transformer5/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.425617 139966267543552 training_loop.py:724] parameter: decoder/transformer5/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0124 00:41:21.425668 139966267543552 training_loop.py:724] parameter: decoder/transformer6/relative_positions/rel_embedding, shape (8, 32), size 256
I0124 00:41:21.425710 139966267543552 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/attention_scale, shape (8,), size 8
I0124 00:41:21.425747 139966267543552 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.425783 139966267543552 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0124 00:41:21.425820 139966267543552 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.425856 139966267543552 training_loop.py:724] parameter: decoder/transformer6/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.425893 139966267543552 training_loop.py:724] parameter: decoder/transformer6/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0124 00:41:21.425930 139966267543552 training_loop.py:724] parameter: decoder/transformer6/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0124 00:41:21.425966 139966267543552 training_loop.py:724] parameter: decoder/transformer6/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.426003 139966267543552 training_loop.py:724] parameter: decoder/transformer6/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0124 00:41:21.426040 139966267543552 training_loop.py:724] parameter: decoder/transformer7/relative_positions/rel_embedding, shape (8, 32), size 256
I0124 00:41:21.426078 139966267543552 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/attention_scale, shape (8,), size 8
I0124 00:41:21.426115 139966267543552 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.426150 139966267543552 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0124 00:41:21.426187 139966267543552 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.426222 139966267543552 training_loop.py:724] parameter: decoder/transformer7/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.426259 139966267543552 training_loop.py:724] parameter: decoder/transformer7/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0124 00:41:21.426295 139966267543552 training_loop.py:724] parameter: decoder/transformer7/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0124 00:41:21.426339 139966267543552 training_loop.py:724] parameter: decoder/transformer7/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.426378 139966267543552 training_loop.py:724] parameter: decoder/transformer7/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0124 00:41:21.426415 139966267543552 training_loop.py:724] parameter: decoder/transformer8/relative_positions/rel_embedding, shape (8, 32), size 256
I0124 00:41:21.426452 139966267543552 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/attention_scale, shape (8,), size 8
I0124 00:41:21.426488 139966267543552 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.426524 139966267543552 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0124 00:41:21.426561 139966267543552 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.426597 139966267543552 training_loop.py:724] parameter: decoder/transformer8/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.426635 139966267543552 training_loop.py:724] parameter: decoder/transformer8/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0124 00:41:21.426672 139966267543552 training_loop.py:724] parameter: decoder/transformer8/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0124 00:41:21.426709 139966267543552 training_loop.py:724] parameter: decoder/transformer8/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.426745 139966267543552 training_loop.py:724] parameter: decoder/transformer8/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0124 00:41:21.426782 139966267543552 training_loop.py:724] parameter: decoder/transformer9/relative_positions/rel_embedding, shape (8, 32), size 256
I0124 00:41:21.426820 139966267543552 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/attention_scale, shape (8,), size 8
I0124 00:41:21.426857 139966267543552 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/keys_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.426894 139966267543552 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/pre_attn_layernorm/scale, shape (1024,), size 1024
I0124 00:41:21.426930 139966267543552 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/queries_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.426968 139966267543552 training_loop.py:724] parameter: decoder/transformer9/tbase/_kvq/values_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.427005 139966267543552 training_loop.py:724] parameter: decoder/transformer9/tbase/ffn/hidden0/kernel, shape (1024, 4096), size 4194304
I0124 00:41:21.427042 139966267543552 training_loop.py:724] parameter: decoder/transformer9/tbase/ffn/output_layer/kernel, shape (4096, 1024), size 4194304
I0124 00:41:21.427078 139966267543552 training_loop.py:724] parameter: decoder/transformer9/tbase/post_attn_mlp/output_layer/kernel, shape (1024, 1024), size 1048576
I0124 00:41:21.427114 139966267543552 training_loop.py:724] parameter: decoder/transformer9/tbase/pre_ffn_layernorm/scale, shape (1024,), size 1024
I0124 00:41:21.427143 139966267543552 training_loop.py:725] Total parameters: 152072288
I0124 00:41:21.427377 139966267543552 training_loop.py:739] Total state size: 0
I0124 00:41:21.453372 139966267543552 training_loop.py:492] Training loop: creating task for mode beam_search
I0124 00:41:21.453618 139966267543552 training_loop.py:685] Creating logging writer (train) for mode beam_search
I0124 00:41:21.454361 139966267543552 training_loop.py:652] Compiling mode beam_search with jit.
I0124 00:41:21.454704 139966267543552 training_loop.py:89] registering functions: dict_keys([])
I0124 00:41:21.471154 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a ? cong b e a g
I0124 00:41:21.534384 139966267543552 ddar.py:60] Depth 1/1000 time = 0.05449938774108887
I0124 00:41:21.588251 139966267543552 ddar.py:60] Depth 2/1000 time = 0.05368995666503906
I0124 00:41:21.588324 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:41:21.588378 139966267543552 alphageometry.py:540] Depth 0. There are 1 nodes to expand:
I0124 00:41:21.588413 139966267543552 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00
I0124 00:41:21.588443 139966267543552 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00
I0124 00:41:21.706322 139966267543552 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.706511 139966267543552 decoder_stack.py:316] dstack: scanning over 1 windows.
I0124 00:41:21.706612 139966267543552 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0124 00:41:21.706688 139966267543552 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0124 00:41:21.706760 139966267543552 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0124 00:41:21.706828 139966267543552 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0124 00:41:21.706896 139966267543552 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0124 00:41:21.706963 139966267543552 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0124 00:41:21.707031 139966267543552 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0124 00:41:21.707098 139966267543552 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0124 00:41:21.707165 139966267543552 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0124 00:41:21.707232 139966267543552 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0124 00:41:21.707297 139966267543552 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0124 00:41:21.707364 139966267543552 transformer_layer.py:657] tlayer: Skipping XL cache for mode beam_search.
I0124 00:41:21.707402 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:21.707446 139966267543552 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0124 00:41:21.707551 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:21.707590 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:21.707621 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:21.709479 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.711890 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:21.717472 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.717746 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:21.720251 139966267543552 transformer_layer.py:213] tlayer: windowed attention.
I0124 00:41:21.724007 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:21.724065 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:21.724102 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:21.724134 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.724211 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.724871 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.724949 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.725303 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.726062 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.728487 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.729100 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.729178 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:21.729213 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:21.729269 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.729394 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:21.729744 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:21.729789 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:21.731609 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.731703 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:21.734142 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.734223 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:21.734647 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:21.736880 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:21.738748 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.738844 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:21.739129 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.739212 139966267543552 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0124 00:41:21.739317 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:21.739355 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:21.739386 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:21.741144 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.743467 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:21.748842 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.749095 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:21.751584 139966267543552 transformer_layer.py:213] tlayer: windowed attention.
I0124 00:41:21.755186 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:21.755243 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:21.755278 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:21.755307 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.755427 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.755984 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.756060 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.756404 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.757136 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.759506 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.760118 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.760197 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:21.760232 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:21.760289 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.760414 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:21.760728 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:21.760771 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:21.762636 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.762732 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:21.765153 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.765235 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:21.765666 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:21.767858 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:21.769711 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.769809 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:21.770090 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.770171 139966267543552 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0124 00:41:21.770277 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:21.770316 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:21.770346 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:21.772089 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.774394 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:21.779795 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.780047 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:21.782519 139966267543552 transformer_layer.py:213] tlayer: windowed attention.
I0124 00:41:21.786070 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:21.786127 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:21.786162 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:21.786192 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.786254 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.786863 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.786941 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.787292 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.788046 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.790426 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.791040 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.791116 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:21.791151 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:21.791207 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.791332 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:21.791644 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:21.791688 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:21.793540 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.793632 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:21.796066 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.796146 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:21.796573 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:21.798799 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:21.800676 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.800772 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:21.801057 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.801140 139966267543552 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0124 00:41:21.801246 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:21.801285 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:21.801316 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:21.803116 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.805443 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:21.810941 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.811197 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:21.813704 139966267543552 transformer_layer.py:213] tlayer: windowed attention.
I0124 00:41:21.817238 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:21.817296 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:21.817331 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:21.817360 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.817422 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.818033 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.818122 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.818474 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.819217 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.821561 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.822175 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.822255 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:21.822289 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:21.822345 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.822471 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:21.822787 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:21.822830 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:21.824677 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.824770 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:21.827795 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.827877 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:21.828297 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:21.830504 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:21.832360 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.832455 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:21.832738 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.832819 139966267543552 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0124 00:41:21.832926 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:21.832964 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:21.832994 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:21.834750 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.837078 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:21.842517 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.842769 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:21.845253 139966267543552 transformer_layer.py:213] tlayer: windowed attention.
I0124 00:41:21.848816 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:21.848873 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:21.848908 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:21.848939 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.849000 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.849605 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.849698 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.850052 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.850801 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.853170 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.853786 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.853866 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:21.853900 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:21.853957 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.854083 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:21.854395 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:21.854439 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:21.856306 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.856399 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:21.858863 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.858945 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:21.859377 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:21.861578 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:21.863445 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.863541 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:21.863822 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.863906 139966267543552 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0124 00:41:21.864012 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:21.864051 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:21.864081 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:21.865855 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.868170 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:21.873608 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.873872 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:21.876355 139966267543552 transformer_layer.py:213] tlayer: windowed attention.
I0124 00:41:21.879920 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:21.879977 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:21.880012 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:21.880043 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.880105 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.880704 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.880783 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.881143 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.881907 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.884335 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.884941 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.885019 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:21.885053 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:21.885111 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.885257 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:21.885576 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:21.885620 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:21.887487 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.887580 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:21.890047 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.890128 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:21.890552 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:21.892758 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:21.894661 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.894759 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:21.895044 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.895127 139966267543552 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0124 00:41:21.895235 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:21.895274 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:21.895305 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:21.897082 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.899450 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:21.904939 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.905194 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:21.907691 139966267543552 transformer_layer.py:213] tlayer: windowed attention.
I0124 00:41:21.911299 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:21.911357 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:21.911392 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:21.911422 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.911483 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.912088 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.912165 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.912512 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.913279 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.915685 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.916294 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.916373 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:21.916407 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:21.916464 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.916591 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:21.916908 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:21.916953 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:21.918830 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.918925 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:21.921356 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.921437 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:21.921868 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:21.924069 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:21.925950 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.926046 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:21.926331 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.926415 139966267543552 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0124 00:41:21.926522 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:21.926561 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:21.926593 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:21.928353 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.930710 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:21.936167 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.936422 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:21.938953 139966267543552 transformer_layer.py:213] tlayer: windowed attention.
I0124 00:41:21.942548 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:21.942605 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:21.942640 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:21.942670 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.942732 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.943341 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.943420 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.943771 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.944541 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.946971 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.947582 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.947661 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:21.947696 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:21.947753 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.947882 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:21.948195 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:21.948240 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:21.950113 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.950209 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:21.953047 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.953129 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:21.953550 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:21.955765 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:21.957627 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.957732 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:21.958014 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.958097 139966267543552 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0124 00:41:21.958203 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:21.958241 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:21.958271 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:21.960025 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.962345 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:21.967782 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.968036 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:21.970561 139966267543552 transformer_layer.py:213] tlayer: windowed attention.
I0124 00:41:21.974154 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:21.974212 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:21.974247 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:21.974278 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.974339 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.974956 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.975036 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.975389 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.976145 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.978560 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.979167 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.979247 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:21.979281 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:21.979337 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.979464 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:21.979775 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:21.979819 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:21.981672 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.981765 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:21.984194 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.984275 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:21.984696 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:21.986906 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:21.988776 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.988870 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:21.989150 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.989233 139966267543552 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0124 00:41:21.989339 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:21.989378 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:21.989409 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:21.991188 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.993526 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:21.999023 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:21.999277 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:22.001788 139966267543552 transformer_layer.py:213] tlayer: windowed attention.
I0124 00:41:22.005388 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:22.005444 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:22.005480 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:22.005511 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.005573 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.006192 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.006272 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.006626 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.007387 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.009817 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.010443 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.010522 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:22.010557 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:22.010613 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.010740 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:22.011056 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:22.011101 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.012980 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.013074 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.015555 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.015637 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:22.016069 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:22.018289 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.020163 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.020259 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.020544 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.020628 139966267543552 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0124 00:41:22.020735 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:22.020773 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:22.020804 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:22.022590 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.024930 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:22.030366 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.030627 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:22.033125 139966267543552 transformer_layer.py:213] tlayer: windowed attention.
I0124 00:41:22.036713 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:22.036770 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:22.036805 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:22.036836 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.036898 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.037509 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.037588 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.037948 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.038698 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.041052 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.041689 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.041782 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:22.041816 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:22.041873 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.041998 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:22.042310 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:22.042354 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.044204 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.044298 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.046746 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.046828 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:22.047255 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:22.049471 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.051355 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.051452 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.051736 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.051819 139966267543552 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0124 00:41:22.051925 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:22.051964 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:22.051994 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:22.053773 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.056139 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:22.061617 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.061891 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:22.064403 139966267543552 transformer_layer.py:213] tlayer: windowed attention.
I0124 00:41:22.068016 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:22.068073 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:22.068108 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:22.068138 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.068201 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.068812 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.068891 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[1,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.069244 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.070006 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.072410 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.073023 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.073110 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:22.073146 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:22.073204 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.073332 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:22.073652 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:22.073698 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.075562 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.075656 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.078510 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.078593 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:22.079019 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:22.081238 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.083122 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.083218 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.083501 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.083742 139966267543552 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0124 00:41:22.083811 139966267543552 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0124 00:41:22.083868 139966267543552 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0124 00:41:22.083924 139966267543552 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0124 00:41:22.083978 139966267543552 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0124 00:41:22.084031 139966267543552 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0124 00:41:22.084083 139966267543552 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0124 00:41:22.084136 139966267543552 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0124 00:41:22.084188 139966267543552 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0124 00:41:22.084240 139966267543552 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0124 00:41:22.084292 139966267543552 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0124 00:41:22.084343 139966267543552 transformer_layer.py:673] tlayer: Skipping XL cache update for mode beam_search.
I0124 00:41:22.084379 139966267543552 decoder_stack.py:344] dstack: Final layernorm.
I0124 00:41:22.087204 139966267543552 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=1/0)>
I0124 00:41:22.130832 139966267543552 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.130922 139966267543552 decoder_stack.py:333] dstack: autoregressive generator.
I0124 00:41:22.130975 139966267543552 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0124 00:41:22.131078 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:22.131117 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:22.131147 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:22.131209 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.133529 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:22.138802 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.139061 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:22.141554 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:22.154356 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:22.154415 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:22.154451 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:22.154482 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.154545 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.155095 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.155173 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.155520 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.156190 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.158647 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.159260 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.159339 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:22.159374 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:22.159431 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.159556 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:22.159664 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:22.159703 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.161516 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.161610 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.163947 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.164029 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:22.164137 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:22.166353 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.168145 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.168242 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.168527 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.168607 139966267543552 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0124 00:41:22.168712 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:22.168751 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:22.168781 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:22.168843 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.171006 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:22.176282 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.176543 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:22.179143 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:22.191432 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:22.191491 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:22.191528 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:22.191559 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.191622 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.192175 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.192255 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.192606 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.193281 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.195743 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.196357 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.196436 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:22.196471 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:22.196529 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.196658 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:22.196765 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:22.196804 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.198695 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.198791 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.201131 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.201211 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:22.201322 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:22.203548 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.205360 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.205456 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.205750 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.205834 139966267543552 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0124 00:41:22.205941 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:22.205980 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:22.206011 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:22.206073 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.208245 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:22.213564 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.213838 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:22.216454 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:22.228709 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:22.228770 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:22.228805 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:22.228835 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.228898 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.229447 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.229525 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.229887 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.230569 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.233048 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.233668 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.233748 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:22.233783 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:22.233842 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.233970 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:22.234078 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:22.234117 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.235921 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.236016 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.238364 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.238445 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:22.238553 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:22.240765 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.242569 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.242666 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.242951 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.243033 139966267543552 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0124 00:41:22.243139 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:22.243179 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:22.243210 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:22.243273 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.245449 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:22.250703 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.250969 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:22.253962 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:22.266128 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:22.266187 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:22.266223 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:22.266254 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.266316 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.266865 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.266943 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.267298 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.267968 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.270426 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.271037 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.271115 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:22.271149 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:22.271207 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.271333 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:22.271439 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:22.271478 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.273279 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.273373 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.275717 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.275798 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:22.275906 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:22.278118 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.279942 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.280037 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.280322 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.280404 139966267543552 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0124 00:41:22.280510 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:22.280548 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:22.280577 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:22.280638 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.282833 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:22.288131 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.288389 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:22.290994 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:22.303195 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:22.303252 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:22.303287 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:22.303317 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.303377 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.303921 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.303997 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.304344 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.305012 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.307457 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.308063 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.308140 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:22.308175 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:22.308232 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.308356 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:22.308461 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:22.308501 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.310317 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.310413 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.312729 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.312808 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:22.312916 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:22.315120 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.316922 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.317017 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.317301 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.317382 139966267543552 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0124 00:41:22.317490 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:22.317529 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:22.317559 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:22.317620 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.319805 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:22.325052 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.325309 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:22.327890 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:22.340067 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:22.340126 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:22.340162 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:22.340192 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.340254 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.340801 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.340877 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.341223 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.341895 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.344316 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.344917 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.344995 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:22.345029 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:22.345086 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.345210 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:22.345316 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:22.345354 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.347152 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.347248 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.349538 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.349618 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:22.349740 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:22.351931 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.353729 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.353826 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.354111 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.354193 139966267543552 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0124 00:41:22.354300 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:22.354337 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:22.354367 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:22.354430 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.356584 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:22.361870 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.362126 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:22.365094 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:22.377151 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:22.377211 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:22.377246 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:22.377276 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.377338 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.377891 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.377970 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.378318 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.378985 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.381424 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.382042 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.382122 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:22.382156 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:22.382214 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.382340 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:22.382447 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:22.382484 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.384291 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.384385 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.386717 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.386798 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:22.386907 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:22.389111 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.390930 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.391026 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.391309 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.391393 139966267543552 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0124 00:41:22.391501 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:22.391540 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:22.391570 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:22.391632 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.393818 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:22.399115 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.399385 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:22.401978 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:22.414160 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:22.414227 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:22.414264 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:22.414294 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.414357 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.414913 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.414991 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.415343 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.416021 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.418485 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.419095 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.419174 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:22.419208 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:22.419264 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.419389 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:22.419497 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:22.419535 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.421341 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.421435 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.423769 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.423850 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:22.423959 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:22.426173 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.427989 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.428084 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.428369 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.428452 139966267543552 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0124 00:41:22.428559 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:22.428598 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:22.428628 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:22.428690 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.430878 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:22.436172 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.436429 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:22.439018 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:22.451175 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:22.451235 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:22.451279 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:22.451312 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.451374 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.451927 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.452005 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.452352 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.453017 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.455444 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.456056 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.456134 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:22.456168 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:22.456226 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.456352 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:22.456458 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:22.456497 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.458327 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.458422 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.460750 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.460830 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:22.460937 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:22.463181 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.465005 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.465101 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.465385 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.465468 139966267543552 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0124 00:41:22.465575 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:22.465614 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:22.465651 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:22.465716 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.467935 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:22.473212 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.473470 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:22.476491 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:22.488955 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:22.489014 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:22.489051 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:22.489094 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.489160 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.489723 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.489802 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.490151 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.490820 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.493245 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.493860 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.493939 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:22.493973 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:22.494032 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.494159 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:22.494266 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:22.494304 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.496103 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.496196 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.498519 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.498601 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:22.498709 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:22.500893 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.502703 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.502798 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.503081 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.503163 139966267543552 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0124 00:41:22.503270 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:22.503308 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:22.503338 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:22.503399 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.505554 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:22.510827 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.511085 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:22.513664 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:22.525794 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:22.525852 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:22.525887 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:22.525917 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.525985 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.526538 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.526615 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.526960 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.527618 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.530050 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.530656 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.530735 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:22.530769 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:22.530826 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.530951 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:22.531059 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:22.531096 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.532895 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.532988 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.535318 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.535400 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:22.535509 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:22.537725 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.539527 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.539622 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.539905 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.539988 139966267543552 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0124 00:41:22.540094 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:22.540133 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:22.540163 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:22.540224 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.542399 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:22.547677 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.547936 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:22.550521 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:22.562622 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:22.562681 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:22.562716 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:22.562746 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.562814 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.563374 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.563456 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.563804 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.564478 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.566931 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.567544 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.567623 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:22.567658 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:22.567715 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.567842 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:22.567949 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:22.567986 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.569809 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.569905 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.572241 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.572320 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:22.572429 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:22.574631 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.576427 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.576524 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.576807 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.576895 139966267543552 decoder_stack.py:344] dstack: Final layernorm.
I0124 00:41:22.579650 139966267543552 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=3/0)>
I0124 00:41:22.629364 139966267543552 decoder_stack.py:275] dstack: embeddings = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.629452 139966267543552 decoder_stack.py:333] dstack: autoregressive generator.
I0124 00:41:22.629505 139966267543552 decoder_stack.py:224] dstack: ---- Layer 0 ----
I0124 00:41:22.629609 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:22.629655 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:22.629687 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:22.629751 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.631974 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:22.637273 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.637531 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:22.640103 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:22.652648 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:22.652707 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:22.652742 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:22.652772 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.652835 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.653377 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.653454 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.653807 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.654467 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.656812 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.657415 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.657493 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:22.657529 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:22.657586 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.657718 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:22.657828 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:22.657866 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.659714 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.659808 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.662130 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.662212 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:22.662320 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:22.664440 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.666261 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.666359 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.666645 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.666728 139966267543552 decoder_stack.py:224] dstack: ---- Layer 1 ----
I0124 00:41:22.666834 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:22.666872 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:22.666902 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:22.666965 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.669133 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:22.674483 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.674742 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:22.677254 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:22.689477 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:22.689536 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:22.689571 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:22.689601 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.689672 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.690218 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.690294 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.690640 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.691299 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.693679 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.694292 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.694370 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:22.694403 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:22.694461 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.694586 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:22.694694 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:22.694732 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.696592 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.696685 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.699021 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.699102 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:22.699213 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:22.701333 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.703139 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.703235 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.703518 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.703599 139966267543552 decoder_stack.py:224] dstack: ---- Layer 2 ----
I0124 00:41:22.703705 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:22.703743 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:22.703774 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:22.703837 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.706005 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:22.711328 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.711587 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:22.714085 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:22.726201 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:22.726267 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:22.726305 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:22.726336 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.726400 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.726950 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.727028 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.727377 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.728039 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.730401 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.731008 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.731086 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:22.731120 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:22.731177 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.731302 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:22.731408 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:22.731446 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.733306 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.733401 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.735743 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.735825 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:22.735934 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:22.738150 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.739947 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.740042 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.740347 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.740428 139966267543552 decoder_stack.py:224] dstack: ---- Layer 3 ----
I0124 00:41:22.740535 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:22.740575 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:22.740607 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:22.740669 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.742819 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:22.748098 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.748360 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:22.750849 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:22.763469 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:22.763527 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:22.763570 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:22.763602 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.763664 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.764212 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.764289 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.764635 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.765297 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.767653 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.768258 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.768337 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:22.768371 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:22.768428 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.768552 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:22.768658 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:22.768696 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.770561 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.770657 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.772964 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.773044 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:22.773152 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:22.775270 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.777056 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.777152 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.777436 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.777516 139966267543552 decoder_stack.py:224] dstack: ---- Layer 4 ----
I0124 00:41:22.777622 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:22.777668 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:22.777701 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:22.777764 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.779907 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:22.785174 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.785434 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:22.787931 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:22.800023 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:22.800080 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:22.800116 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:22.800155 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.800221 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.800771 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.800848 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.801193 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.801864 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.804224 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.804834 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.804914 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:22.804949 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:22.805005 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.805130 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:22.805237 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:22.805274 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.807134 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.807230 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.809545 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.809626 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:22.809743 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:22.811853 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.813635 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.813740 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.814026 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.814107 139966267543552 decoder_stack.py:224] dstack: ---- Layer 5 ----
I0124 00:41:22.814213 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:22.814251 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:22.814282 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:22.814343 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.816509 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:22.821818 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.822077 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:22.824567 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:22.836654 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:22.836714 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:22.836750 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:22.836781 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.836852 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.837409 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.837487 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.837843 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.838505 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.840871 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.841480 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.841558 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:22.841592 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:22.841658 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.841787 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:22.841893 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:22.841931 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.843796 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.843890 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.846222 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.846305 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:22.846413 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:22.848539 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.850330 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.850428 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.850710 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.850792 139966267543552 decoder_stack.py:224] dstack: ---- Layer 6 ----
I0124 00:41:22.850898 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:22.850936 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:22.850968 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:22.851030 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.853168 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:22.858474 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.858731 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:22.861196 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:22.873804 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:22.873862 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:22.873898 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:22.873928 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.873998 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.874583 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.874658 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.875005 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.875697 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.878066 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.878677 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.878755 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:22.878789 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:22.878848 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.878974 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:22.879081 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:22.879118 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.880978 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.881071 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.883379 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.883461 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:22.883569 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:22.885683 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.887464 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.887559 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.887841 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.887922 139966267543552 decoder_stack.py:224] dstack: ---- Layer 7 ----
I0124 00:41:22.888027 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:22.888065 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:22.888095 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:22.888157 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.890304 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:22.895566 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.895824 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:22.898347 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:22.910544 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:22.910603 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:22.910639 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:22.910669 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.910731 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.911294 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.911372 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.911721 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.912389 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.914798 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.915408 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.915485 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:22.915519 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:22.915577 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.915707 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:22.915815 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:22.915854 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.917724 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.917819 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.920141 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.920221 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:22.920330 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:22.922472 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.924268 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.924362 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.924643 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.924721 139966267543552 decoder_stack.py:224] dstack: ---- Layer 8 ----
I0124 00:41:22.924828 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:22.924866 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:22.924896 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:22.924957 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.927120 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:22.932402 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.932658 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:22.935156 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:22.947273 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:22.947332 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:22.947368 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:22.947398 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.947459 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.948012 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.948088 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.948434 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.949104 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.951479 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.952085 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.952162 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:22.952196 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:22.952251 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.952373 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:22.952478 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:22.952516 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.954401 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.954494 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.956790 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.956868 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:22.956976 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:22.959115 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.960900 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.960994 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.961274 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.961351 139966267543552 decoder_stack.py:224] dstack: ---- Layer 9 ----
I0124 00:41:22.961459 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:22.961497 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:22.961527 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:22.961589 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.963754 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:22.969032 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.969285 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:22.971768 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:22.984312 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:22.984371 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:22.984406 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:22.984436 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.984497 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.985046 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.985130 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.985479 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.986160 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.988519 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.989117 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.989194 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:22.989228 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:22.989285 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.989407 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:22.989511 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:22.989549 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.991437 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.991530 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.993842 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.993922 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:22.994028 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:22.996154 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:22.997954 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.998049 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:22.998332 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:22.998410 139966267543552 decoder_stack.py:224] dstack: ---- Layer 10 ----
I0124 00:41:22.998516 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:22.998554 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:22.998585 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:22.998646 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:23.000776 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:23.006047 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:23.006302 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:23.008794 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:23.020917 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:23.020976 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:23.021011 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:23.021042 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:23.021102 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:23.021656 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:23.021741 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:23.022090 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:23.022753 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:23.025118 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:23.025736 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:23.025815 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:23.025849 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:23.025905 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:23.026027 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:23.026138 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:23.026176 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:23.028044 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:23.028136 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:23.030467 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:23.030551 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:23.030660 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:23.032787 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:23.034594 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:23.034689 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:23.034968 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:23.035048 139966267543552 decoder_stack.py:224] dstack: ---- Layer 11 ----
I0124 00:41:23.035153 139966267543552 transformer_layer.py:154] tlayer: recurrent = False
I0124 00:41:23.035191 139966267543552 transformer_layer.py:155] tlayer: compute_importance = False
I0124 00:41:23.035220 139966267543552 transformer_layer.py:161] tlayer: compute keys,values,queries.
I0124 00:41:23.035282 139966267543552 transformer_base.py:146] kvq: pre_attn xs = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:23.037410 139966267543552 transformer_base.py:161] kvq: pre_attn dropout.
I0124 00:41:23.042756 139966267543552 transformer_base.py:173] kvq: queries = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:23.043013 139966267543552 transformer_base.py:194] kvq: normalize keys, queries.
I0124 00:41:23.045509 139966267543552 transformer_layer.py:169] tlayer: using autoregressive decoder.
I0124 00:41:23.057730 139966267543552 transformer_layer.py:299] tlayer: num_windows = 1.
I0124 00:41:23.057787 139966267543552 attention.py:418] Single window, no scan.
I0124 00:41:23.057823 139966267543552 transformer_layer.py:389] tlayer: self-attention.
I0124 00:41:23.057853 139966267543552 attention.py:133] attn: keys = Traced<ShapedArray(bfloat16[32,1024,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:23.057917 139966267543552 attention.py:134] attn: queries = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:23.058474 139966267543552 attention.py:139] attn: content attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:23.058551 139966267543552 attention.py:143] attn: pbias = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:23.058904 139966267543552 attention.py:150] attn: learned attention scale: Traced<ShapedArray(bfloat16[8])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:23.059575 139966267543552 attention.py:161] attn: pre-softmax attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:23.061965 139966267543552 attention.py:177] attn: final attn = Traced<ShapedArray(bfloat16[32,8,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:23.062570 139966267543552 attention.py:182] attn: y = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:23.062646 139966267543552 transformer_layer.py:468] tlayer: End windows.
I0124 00:41:23.062680 139966267543552 transformer_layer.py:472] tlayer: final FFN.
I0124 00:41:23.062736 139966267543552 transformer_base.py:399] tbase: attn_ys = Traced<ShapedArray(bfloat16[32,1,8,128])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:23.062865 139966267543552 transformer_base.py:410] tbase: post-attention MLP.
I0124 00:41:23.062974 139966267543552 nn_components.py:325] mlp: activation = None
I0124 00:41:23.063012 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:23.064882 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:23.064975 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:23.067299 139966267543552 transformer_base.py:431] tbase: pre-FFN layernorm = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:23.067379 139966267543552 transformer_base.py:443] tbase: final FFN
I0124 00:41:23.067487 139966267543552 nn_components.py:320] mlp: hidden 4096, relu
I0124 00:41:23.069618 139966267543552 nn_components.py:329] mlp: final activation = None
I0124 00:41:23.071429 139966267543552 nn_components.py:332] mlp: final = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:23.071523 139966267543552 nn_components.py:261] mlp: residual
I0124 00:41:23.071802 139966267543552 transformer_base.py:450] tbase: ys = Traced<ShapedArray(bfloat16[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:23.071884 139966267543552 decoder_stack.py:344] dstack: Final layernorm.
I0124 00:41:23.074637 139966267543552 decoder_stack.py:365] dstack: logits = Traced<ShapedArray(float32[32,1,1024])>with<DynamicJaxprTrace(level=2/0)>
I0124 00:41:36.451620 139966267543552 alphageometry.py:566] LM output (score=-0.195928): "h : C b c h 08 T b c d h 09 ;"
I0124 00:41:36.451939 139966267543552 alphageometry.py:567] Translation: "h = on_line h b c, on_tline h d b c"

I0124 00:41:36.451995 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c ? cong b e a g"
I0124 00:41:36.452116 139966267543552 graph.py:498] 
I0124 00:41:36.452171 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c ? cong b e a g
I0124 00:41:36.545489 139966267543552 ddar.py:60] Depth 1/1000 time = 0.0868387222290039
I0124 00:41:36.646470 139966267543552 ddar.py:60] Depth 2/1000 time = 0.1009068489074707
I0124 00:41:36.788209 139966267543552 ddar.py:60] Depth 3/1000 time = 0.14166903495788574
I0124 00:41:36.934134 139966267543552 ddar.py:60] Depth 4/1000 time = 0.14573931694030762
I0124 00:41:36.934497 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:41:36.934584 139966267543552 alphageometry.py:566] LM output (score=-0.657914): "h : C a c h 08 T a c d h 09 ;"
I0124 00:41:36.934622 139966267543552 alphageometry.py:567] Translation: "h = on_line h a c, on_tline h d a c"

I0124 00:41:36.934656 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c ? cong b e a g"
I0124 00:41:36.934773 139966267543552 graph.py:498] 
I0124 00:41:36.934821 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c ? cong b e a g
I0124 00:41:37.033483 139966267543552 ddar.py:60] Depth 1/1000 time = 0.09262776374816895
I0124 00:41:37.528448 139966267543552 ddar.py:60] Depth 2/1000 time = 0.4948689937591553
I0124 00:41:38.115456 139966267543552 ddar.py:60] Depth 3/1000 time = 0.5868306159973145
I0124 00:41:38.682801 139966267543552 ddar.py:60] Depth 4/1000 time = 0.567164421081543
I0124 00:41:39.244713 139966267543552 ddar.py:60] Depth 5/1000 time = 0.561591625213623
I0124 00:41:39.246823 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:41:39.246904 139966267543552 alphageometry.py:566] LM output (score=-2.210329): "h : D d e d h 08 T b c d h 09 ;"
I0124 00:41:39.246942 139966267543552 alphageometry.py:567] Translation: "h = on_circle h d e, on_tline h d b c"

I0124 00:41:39.246980 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c ? cong b e a g"
I0124 00:41:39.247096 139966267543552 graph.py:498] 
I0124 00:41:39.247144 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c ? cong b e a g
I0124 00:41:39.396798 139966267543552 ddar.py:60] Depth 1/1000 time = 0.14200472831726074
I0124 00:41:39.753022 139966267543552 ddar.py:60] Depth 2/1000 time = 0.35611987113952637
I0124 00:41:39.951657 139966267543552 ddar.py:60] Depth 3/1000 time = 0.19845104217529297
I0124 00:41:40.313162 139966267543552 ddar.py:60] Depth 4/1000 time = 0.3612401485443115
I0124 00:41:40.696366 139966267543552 ddar.py:60] Depth 5/1000 time = 0.38124728202819824
I0124 00:41:40.696552 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:41:40.696630 139966267543552 alphageometry.py:566] LM output (score=-2.545871): "h : D d h d e 08 T b c d h 09 ;"
I0124 00:41:40.696670 139966267543552 alphageometry.py:567] Translation: "h = on_circle h d e, on_tline h d b c"

I0124 00:41:40.696707 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c ? cong b e a g"
I0124 00:41:40.696822 139966267543552 graph.py:498] 
I0124 00:41:40.696870 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c ? cong b e a g
I0124 00:41:40.853752 139966267543552 ddar.py:60] Depth 1/1000 time = 0.14922714233398438
I0124 00:41:41.038967 139966267543552 ddar.py:60] Depth 2/1000 time = 0.1851208209991455
I0124 00:41:41.396418 139966267543552 ddar.py:60] Depth 3/1000 time = 0.35735440254211426
I0124 00:41:41.767705 139966267543552 ddar.py:60] Depth 4/1000 time = 0.3709888458251953
I0124 00:41:41.978943 139966267543552 ddar.py:60] Depth 5/1000 time = 0.20926260948181152
I0124 00:41:41.979080 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:41:41.979152 139966267543552 alphageometry.py:566] LM output (score=-2.709590): "h : ^ a b a h a h a c 08 ^ c a c h c h c b 09 ;"
I0124 00:41:41.979190 139966267543552 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ a b a h a h a c"

I0124 00:41:41.979224 139966267543552 alphageometry.py:566] LM output (score=-2.846339): "h : C f g h 08 D f h g h 09 ;"
I0124 00:41:41.979252 139966267543552 alphageometry.py:567] Translation: "h = on_line h f g, on_bline h g f"

I0124 00:41:41.979308 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f ? cong b e a g"
I0124 00:41:41.979425 139966267543552 graph.py:498] 
I0124 00:41:41.979473 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f ? cong b e a g
I0124 00:41:42.098218 139966267543552 ddar.py:60] Depth 1/1000 time = 0.11063766479492188
I0124 00:41:42.770255 139966267543552 ddar.py:60] Depth 2/1000 time = 0.6719403266906738
I0124 00:41:43.340716 139966267543552 ddar.py:60] Depth 3/1000 time = 0.5702791213989258
I0124 00:41:44.092328 139966267543552 ddar.py:60] Depth 4/1000 time = 0.7513079643249512
I0124 00:41:44.093674 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:41:44.093754 139966267543552 alphageometry.py:566] LM output (score=-3.165908): "h : T a c d h 08 T a h c d 09 ;"
I0124 00:41:44.093793 139966267543552 alphageometry.py:567] Translation: "h = on_tline h d a c, on_tline h a c d"

I0124 00:41:44.093831 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d ? cong b e a g"
I0124 00:41:44.093947 139966267543552 graph.py:498] 
I0124 00:41:44.093995 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d ? cong b e a g
I0124 00:41:44.174100 139966267543552 ddar.py:60] Depth 1/1000 time = 0.07014131546020508
I0124 00:41:44.255254 139966267543552 ddar.py:60] Depth 2/1000 time = 0.08108139038085938
I0124 00:41:44.337461 139966267543552 ddar.py:60] Depth 3/1000 time = 0.08204913139343262
I0124 00:41:44.421393 139966267543552 ddar.py:60] Depth 4/1000 time = 0.0826258659362793
I0124 00:41:44.421466 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:41:44.421515 139966267543552 alphageometry.py:566] LM output (score=-3.172720): "h : ^ d e d h d h d g 08 ^ g d g h g h g e 09 ;"
I0124 00:41:44.421550 139966267543552 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ d e d h d h d g"

I0124 00:41:44.421582 139966267543552 alphageometry.py:566] LM output (score=-3.192701): "h : C b d h 08 D b h d h 09 ;"
I0124 00:41:44.421611 139966267543552 alphageometry.py:567] Translation: "h = on_line h b d, on_bline h d b"

I0124 00:41:44.421646 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b ? cong b e a g"
I0124 00:41:44.421748 139966267543552 graph.py:498] 
I0124 00:41:44.421793 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b ? cong b e a g
I0124 00:41:44.515591 139966267543552 ddar.py:60] Depth 1/1000 time = 0.08660745620727539
I0124 00:41:44.715997 139966267543552 ddar.py:60] Depth 2/1000 time = 0.2003319263458252
I0124 00:41:45.114527 139966267543552 ddar.py:60] Depth 3/1000 time = 0.39842844009399414
I0124 00:41:45.499398 139966267543552 ddar.py:60] Depth 4/1000 time = 0.3845183849334717
I0124 00:41:45.499702 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:41:45.499775 139966267543552 alphageometry.py:566] LM output (score=-3.221685): "h : D d h d e 08 T a c d h 09 ;"
I0124 00:41:45.499813 139966267543552 alphageometry.py:567] Translation: "h = on_circle h d e, on_tline h d a c"

I0124 00:41:45.499849 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c ? cong b e a g"
I0124 00:41:45.499988 139966267543552 graph.py:498] 
I0124 00:41:45.500036 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c ? cong b e a g
I0124 00:41:45.654922 139966267543552 ddar.py:60] Depth 1/1000 time = 0.14702248573303223
I0124 00:41:46.017250 139966267543552 ddar.py:60] Depth 2/1000 time = 0.36222314834594727
I0124 00:41:46.211663 139966267543552 ddar.py:60] Depth 3/1000 time = 0.19423294067382812
I0124 00:41:46.590591 139966267543552 ddar.py:60] Depth 4/1000 time = 0.37868475914001465
I0124 00:41:46.849082 139966267543552 ddar.py:60] Depth 5/1000 time = 0.2571899890899658
I0124 00:41:47.404822 139966267543552 ddar.py:60] Depth 6/1000 time = 0.5556135177612305
I0124 00:41:48.004093 139966267543552 ddar.py:60] Depth 7/1000 time = 0.5990853309631348
I0124 00:41:48.648708 139966267543552 ddar.py:60] Depth 8/1000 time = 0.6444308757781982
I0124 00:41:48.650981 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:41:48.651061 139966267543552 alphageometry.py:566] LM output (score=-3.304336): "h : C a e h 08 D a e a h 09 ;"
I0124 00:41:48.651099 139966267543552 alphageometry.py:567] Translation: "h = on_line h a e, on_circle h a e"

I0124 00:41:48.651135 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a e, on_circle h a e ? cong b e a g"
I0124 00:41:48.651245 139966267543552 graph.py:498] 
I0124 00:41:48.651293 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a e, on_circle h a e ? cong b e a g
I0124 00:41:48.781567 139966267543552 ddar.py:60] Depth 1/1000 time = 0.1217033863067627
I0124 00:41:48.925993 139966267543552 ddar.py:60] Depth 2/1000 time = 0.14435124397277832
I0124 00:41:49.245442 139966267543552 ddar.py:60] Depth 3/1000 time = 0.319352388381958
I0124 00:41:49.395709 139966267543552 ddar.py:60] Depth 4/1000 time = 0.14995431900024414
I0124 00:41:49.396570 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:41:49.396646 139966267543552 alphageometry.py:566] LM output (score=-3.323273): "h : C a b h 08 T a b c h 09 ;"
I0124 00:41:49.396684 139966267543552 alphageometry.py:567] Translation: "h = on_line h a b, on_tline h c a b"

I0124 00:41:49.396720 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a b, on_tline h c a b ? cong b e a g"
I0124 00:41:49.396831 139966267543552 graph.py:498] 
I0124 00:41:49.396879 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a b, on_tline h c a b ? cong b e a g
I0124 00:41:49.585630 139966267543552 ddar.py:60] Depth 1/1000 time = 0.1797013282775879
I0124 00:41:49.943226 139966267543552 ddar.py:60] Depth 2/1000 time = 0.3574669361114502
I0124 00:41:50.128690 139966267543552 ddar.py:60] Depth 3/1000 time = 0.18512535095214844
I0124 00:41:50.129051 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:41:50.129128 139966267543552 alphageometry.py:566] LM output (score=-3.429072): "h : C g f h 08 D g h f h 09 ;"
I0124 00:41:50.129165 139966267543552 alphageometry.py:567] Translation: "h = on_line h g f, on_bline h f g"

I0124 00:41:50.129201 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h g f, on_bline h f g ? cong b e a g"
I0124 00:41:50.129331 139966267543552 graph.py:498] 
I0124 00:41:50.129379 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h g f, on_bline h f g ? cong b e a g
I0124 00:41:50.423455 139966267543552 ddar.py:60] Depth 1/1000 time = 0.28624463081359863
I0124 00:41:50.948030 139966267543552 ddar.py:60] Depth 2/1000 time = 0.5243926048278809
I0124 00:41:51.513220 139966267543552 ddar.py:60] Depth 3/1000 time = 0.5650110244750977
I0124 00:41:52.268785 139966267543552 ddar.py:60] Depth 4/1000 time = 0.7552576065063477
I0124 00:41:52.270118 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:41:52.270198 139966267543552 alphageometry.py:566] LM output (score=-3.446244): "h : T b c d h 08 ;"
I0124 00:41:52.270236 139966267543552 alphageometry.py:567] Translation: "h = on_tline h d b c"

I0124 00:41:52.270273 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d b c ? cong b e a g"
I0124 00:41:52.270385 139966267543552 graph.py:498] 
I0124 00:41:52.270433 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d b c ? cong b e a g
I0124 00:41:52.337496 139966267543552 ddar.py:60] Depth 1/1000 time = 0.06097817420959473
I0124 00:41:52.402292 139966267543552 ddar.py:60] Depth 2/1000 time = 0.06472420692443848
I0124 00:41:52.467526 139966267543552 ddar.py:60] Depth 3/1000 time = 0.06507587432861328
I0124 00:41:52.467858 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:41:52.467911 139966267543552 alphageometry.py:566] LM output (score=-3.477334): "h : C a b h 08 T c d c h 09 ;"
I0124 00:41:52.467948 139966267543552 alphageometry.py:567] Translation: "h = on_line h a b, on_tline h c c d"

I0124 00:41:52.467983 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a b, on_tline h c c d ? cong b e a g"
I0124 00:41:52.468081 139966267543552 graph.py:498] 
I0124 00:41:52.468127 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a b, on_tline h c c d ? cong b e a g
I0124 00:41:52.601380 139966267543552 ddar.py:60] Depth 1/1000 time = 0.1267242431640625
I0124 00:41:52.919310 139966267543552 ddar.py:60] Depth 2/1000 time = 0.3178379535675049
I0124 00:41:53.105452 139966267543552 ddar.py:60] Depth 3/1000 time = 0.18596982955932617
I0124 00:41:53.298147 139966267543552 ddar.py:60] Depth 4/1000 time = 0.1924889087677002
I0124 00:41:53.667406 139966267543552 ddar.py:60] Depth 5/1000 time = 0.3687005043029785
I0124 00:41:53.864212 139966267543552 ddar.py:60] Depth 6/1000 time = 0.19664430618286133
I0124 00:41:53.864398 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:41:53.864455 139966267543552 alphageometry.py:566] LM output (score=-3.564630): "h : C a d h 08 T a d c h 09 ;"
I0124 00:41:53.864491 139966267543552 alphageometry.py:567] Translation: "h = on_line h a d, on_tline h c a d"

I0124 00:41:53.864529 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a d, on_tline h c a d ? cong b e a g"
I0124 00:41:53.864637 139966267543552 graph.py:498] 
I0124 00:41:53.864684 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a d, on_tline h c a d ? cong b e a g
I0124 00:41:53.964363 139966267543552 ddar.py:60] Depth 1/1000 time = 0.09371042251586914
I0124 00:41:54.074399 139966267543552 ddar.py:60] Depth 2/1000 time = 0.10995125770568848
I0124 00:41:54.198619 139966267543552 ddar.py:60] Depth 3/1000 time = 0.12414288520812988
I0124 00:41:54.499908 139966267543552 ddar.py:60] Depth 4/1000 time = 0.30120134353637695
I0124 00:41:54.501179 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:41:54.501265 139966267543552 alphageometry.py:566] LM output (score=-3.565212): "h : C a b h 08 T a b d h 09 ;"
I0124 00:41:54.501304 139966267543552 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0124 00:41:54.501341 139966267543552 alphageometry.py:566] LM output (score=-3.565480): "h : T a c d h 08 T a d c h 09 ;"
I0124 00:41:54.501371 139966267543552 alphageometry.py:567] Translation: "h = on_tline h d a c, on_tline h c a d"

I0124 00:41:54.501403 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h c a d ? cong b e a g"
I0124 00:41:54.501514 139966267543552 graph.py:498] 
I0124 00:41:54.501561 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h c a d ? cong b e a g
I0124 00:41:54.580783 139966267543552 ddar.py:60] Depth 1/1000 time = 0.06969046592712402
I0124 00:41:54.667226 139966267543552 ddar.py:60] Depth 2/1000 time = 0.08636260032653809
I0124 00:41:54.753852 139966267543552 ddar.py:60] Depth 3/1000 time = 0.08646440505981445
I0124 00:41:54.754888 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:41:54.754945 139966267543552 alphageometry.py:566] LM output (score=-3.682681): "h : T b c d h 08 T b h c d 09 ;"
I0124 00:41:54.754981 139966267543552 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2637, in add_clause
    raise PointTooFarError()
graph.PointTooFarError
"

I0124 00:41:54.755014 139966267543552 alphageometry.py:566] LM output (score=-3.729646): "h : C b e h 08 D b e e h 09 ;"
I0124 00:41:54.755043 139966267543552 alphageometry.py:567] Translation: "h = on_line h b e, on_circle h e b"

I0124 00:41:54.755074 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b e, on_circle h e b ? cong b e a g"
I0124 00:41:54.755175 139966267543552 graph.py:498] 
I0124 00:41:54.755221 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b e, on_circle h e b ? cong b e a g
I0124 00:41:54.895430 139966267543552 ddar.py:60] Depth 1/1000 time = 0.1324620246887207
I0124 00:41:55.313471 139966267543552 ddar.py:60] Depth 2/1000 time = 0.41794776916503906
I0124 00:41:55.567309 139966267543552 ddar.py:60] Depth 3/1000 time = 0.253673791885376
I0124 00:41:55.820454 139966267543552 ddar.py:60] Depth 4/1000 time = 0.25290846824645996
I0124 00:41:55.821256 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:41:55.821331 139966267543552 alphageometry.py:566] LM output (score=-3.768883): "h : C e g h 08 D e g g h 09 ;"
I0124 00:41:55.821370 139966267543552 alphageometry.py:567] Translation: "h = on_line h e g, on_circle h g e"

I0124 00:41:55.821429 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h e g, on_circle h g e ? cong b e a g"
I0124 00:41:55.821542 139966267543552 graph.py:498] 
I0124 00:41:55.821591 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h e g, on_circle h g e ? cong b e a g
I0124 00:41:56.129894 139966267543552 ddar.py:60] Depth 1/1000 time = 0.29947876930236816
I0124 00:41:56.288435 139966267543552 ddar.py:60] Depth 2/1000 time = 0.15837621688842773
I0124 00:41:56.446200 139966267543552 ddar.py:60] Depth 3/1000 time = 0.1576519012451172
I0124 00:41:56.777457 139966267543552 ddar.py:60] Depth 4/1000 time = 0.3310515880584717
I0124 00:41:56.778322 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:41:56.778407 139966267543552 alphageometry.py:566] LM output (score=-3.778012): "h : C e g h 08 D e h g h 09 ;"
I0124 00:41:56.778447 139966267543552 alphageometry.py:567] Translation: "h = on_line h e g, on_bline h g e"

I0124 00:41:56.778486 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h e g, on_bline h g e ? cong b e a g"
I0124 00:41:56.778599 139966267543552 graph.py:498] 
I0124 00:41:56.778648 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h e g, on_bline h g e ? cong b e a g
I0124 00:41:56.910451 139966267543552 ddar.py:60] Depth 1/1000 time = 0.12283921241760254
I0124 00:41:57.248130 139966267543552 ddar.py:60] Depth 2/1000 time = 0.33757758140563965
I0124 00:41:57.415219 139966267543552 ddar.py:60] Depth 3/1000 time = 0.16692662239074707
I0124 00:41:57.583851 139966267543552 ddar.py:60] Depth 4/1000 time = 0.16843366622924805
I0124 00:41:57.584630 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:41:57.584691 139966267543552 alphageometry.py:566] LM output (score=-3.800540): "h : C a f h 08 D a h f h 09 ;"
I0124 00:41:57.584729 139966267543552 alphageometry.py:567] Translation: "h = on_line h a f, on_bline h f a"

I0124 00:41:57.584768 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a f, on_bline h f a ? cong b e a g"
I0124 00:41:57.584876 139966267543552 graph.py:498] 
I0124 00:41:57.584921 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a f, on_bline h f a ? cong b e a g
I0124 00:41:57.858674 139966267543552 ddar.py:60] Depth 1/1000 time = 0.2663702964782715
I0124 00:41:58.110189 139966267543552 ddar.py:60] Depth 2/1000 time = 0.25134944915771484
I0124 00:41:58.589411 139966267543552 ddar.py:60] Depth 3/1000 time = 0.47907114028930664
I0124 00:41:59.080223 139966267543552 ddar.py:60] Depth 4/1000 time = 0.4905061721801758
I0124 00:41:59.081540 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:41:59.081619 139966267543552 alphageometry.py:566] LM output (score=-3.843992): "h : ^ d e d h d h d g 08 ^ e d e h e h e g 09 ;"
I0124 00:41:59.081665 139966267543552 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ d e d h d h d g"

I0124 00:41:59.081702 139966267543552 alphageometry.py:566] LM output (score=-3.854403): "h : C g e h 08 D g h e h 09 ;"
I0124 00:41:59.081731 139966267543552 alphageometry.py:567] Translation: "h = on_line h g e, on_bline h e g"

I0124 00:41:59.081763 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h g e, on_bline h e g ? cong b e a g"
I0124 00:41:59.081894 139966267543552 graph.py:498] 
I0124 00:41:59.081943 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h g e, on_bline h e g ? cong b e a g
I0124 00:41:59.215607 139966267543552 ddar.py:60] Depth 1/1000 time = 0.12463641166687012
I0124 00:41:59.561849 139966267543552 ddar.py:60] Depth 2/1000 time = 0.3461439609527588
I0124 00:41:59.732875 139966267543552 ddar.py:60] Depth 3/1000 time = 0.17085957527160645
I0124 00:41:59.901208 139966267543552 ddar.py:60] Depth 4/1000 time = 0.1681196689605713
I0124 00:41:59.901967 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:41:59.902030 139966267543552 alphageometry.py:566] LM output (score=-3.870089): "h : C a b h 08 T c d f h 09 ;"
I0124 00:41:59.902068 139966267543552 alphageometry.py:567] Translation: "h = on_line h a b, on_tline h f c d"

I0124 00:41:59.902104 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a b, on_tline h f c d ? cong b e a g"
I0124 00:41:59.902213 139966267543552 graph.py:498] 
I0124 00:41:59.902259 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a b, on_tline h f c d ? cong b e a g
I0124 00:42:00.209106 139966267543552 ddar.py:60] Depth 1/1000 time = 0.30019068717956543
I0124 00:42:00.339344 139966267543552 ddar.py:60] Depth 2/1000 time = 0.13006210327148438
I0124 00:42:00.471462 139966267543552 ddar.py:60] Depth 3/1000 time = 0.13191747665405273
I0124 00:42:00.774403 139966267543552 ddar.py:60] Depth 4/1000 time = 0.3024115562438965
I0124 00:42:00.774588 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:42:00.774666 139966267543552 alphageometry.py:566] LM output (score=-3.975170): "h : C a e h 08 D a e e h 09 ;"
I0124 00:42:00.774707 139966267543552 alphageometry.py:567] Translation: "h = on_line h a e, on_circle h e a"

I0124 00:42:00.774743 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a e, on_circle h e a ? cong b e a g"
I0124 00:42:00.774858 139966267543552 graph.py:498] 
I0124 00:42:00.774908 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a e, on_circle h e a ? cong b e a g
I0124 00:42:00.919679 139966267543552 ddar.py:60] Depth 1/1000 time = 0.13635540008544922
I0124 00:42:01.339085 139966267543552 ddar.py:60] Depth 2/1000 time = 0.41925716400146484
I0124 00:42:01.578927 139966267543552 ddar.py:60] Depth 3/1000 time = 0.23958730697631836
I0124 00:42:01.820451 139966267543552 ddar.py:60] Depth 4/1000 time = 0.2412877082824707
I0124 00:42:01.821493 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:42:01.821603 139966267543552 alphageometry.py:566] LM output (score=-4.006315): "h : C b f h 08 D b h f h 09 ;"
I0124 00:42:01.821647 139966267543552 alphageometry.py:567] Translation: "h = on_line h b f, on_bline h f b"

I0124 00:42:01.821694 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b f, on_bline h f b ? cong b e a g"
I0124 00:42:01.821826 139966267543552 graph.py:498] 
I0124 00:42:01.821878 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b f, on_bline h f b ? cong b e a g
I0124 00:42:01.919661 139966267543552 ddar.py:60] Depth 1/1000 time = 0.08970165252685547
I0124 00:42:02.380085 139966267543552 ddar.py:60] Depth 2/1000 time = 0.46031713485717773
I0124 00:42:02.876661 139966267543552 ddar.py:60] Depth 3/1000 time = 0.4963839054107666
I0124 00:42:03.361705 139966267543552 ddar.py:60] Depth 4/1000 time = 0.48473453521728516
I0124 00:42:03.362991 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:42:03.363077 139966267543552 alphageometry.py:566] LM output (score=-4.010590): "h : C b c h 08 D b h c h 09 ;"
I0124 00:42:03.363115 139966267543552 alphageometry.py:567] Translation: "h = on_line h b c, on_bline h c b"

I0124 00:42:03.363153 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_bline h c b ? cong b e a g"
I0124 00:42:03.363269 139966267543552 graph.py:498] 
I0124 00:42:03.363317 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_bline h c b ? cong b e a g
I0124 00:42:03.452755 139966267543552 ddar.py:60] Depth 1/1000 time = 0.08110809326171875
I0124 00:42:03.533405 139966267543552 ddar.py:60] Depth 2/1000 time = 0.08057475090026855
I0124 00:42:03.615425 139966267543552 ddar.py:60] Depth 3/1000 time = 0.08185577392578125
I0124 00:42:03.615831 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:42:03.615885 139966267543552 alphageometry.py:566] LM output (score=-4.044349): "h : C c f h 08 D c h f h 09 ;"
I0124 00:42:03.615921 139966267543552 alphageometry.py:567] Translation: "h = on_line h c f, on_bline h f c"

I0124 00:42:03.615956 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h c f, on_bline h f c ? cong b e a g"
I0124 00:42:03.616056 139966267543552 graph.py:498] 
I0124 00:42:03.616102 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h c f, on_bline h f c ? cong b e a g
I0124 00:42:03.732441 139966267543552 ddar.py:60] Depth 1/1000 time = 0.10893726348876953
I0124 00:42:03.869720 139966267543552 ddar.py:60] Depth 2/1000 time = 0.13720178604125977
I0124 00:42:04.011059 139966267543552 ddar.py:60] Depth 3/1000 time = 0.1412644386291504
I0124 00:42:04.347903 139966267543552 ddar.py:60] Depth 4/1000 time = 0.3366382122039795
I0124 00:42:04.348629 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:42:04.348715 139966267543552 alphageometry.py:566] LM output (score=-4.126736): "h : T a d a h 08 ;"
I0124 00:42:04.348756 139966267543552 alphageometry.py:567] Translation: "h = on_tline h a a d"

I0124 00:42:04.348793 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h a a d ? cong b e a g"
I0124 00:42:04.348904 139966267543552 graph.py:498] 
I0124 00:42:04.348953 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h a a d ? cong b e a g
I0124 00:42:04.419663 139966267543552 ddar.py:60] Depth 1/1000 time = 0.0638422966003418
I0124 00:42:04.489078 139966267543552 ddar.py:60] Depth 2/1000 time = 0.06933164596557617
I0124 00:42:04.559091 139966267543552 ddar.py:60] Depth 3/1000 time = 0.06985735893249512
I0124 00:42:04.559545 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:42:04.559600 139966267543552 alphageometry.py:566] LM output (score=-4.145683): "h : C a e h 08 T c d c h 09 ;"
I0124 00:42:04.559638 139966267543552 alphageometry.py:567] Translation: "h = on_line h a e, on_tline h c c d"

I0124 00:42:04.559688 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a e, on_tline h c c d ? cong b e a g"
I0124 00:42:04.559795 139966267543552 graph.py:498] 
I0124 00:42:04.559841 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a e, on_tline h c c d ? cong b e a g
I0124 00:42:04.693916 139966267543552 ddar.py:60] Depth 1/1000 time = 0.12728118896484375
I0124 00:42:05.019659 139966267543552 ddar.py:60] Depth 2/1000 time = 0.3256525993347168
I0124 00:42:05.209106 139966267543552 ddar.py:60] Depth 3/1000 time = 0.1892843246459961
I0124 00:42:05.403503 139966267543552 ddar.py:60] Depth 4/1000 time = 0.19419407844543457
I0124 00:42:05.782206 139966267543552 ddar.py:60] Depth 5/1000 time = 0.3781273365020752
I0124 00:42:05.983359 139966267543552 ddar.py:60] Depth 6/1000 time = 0.20099449157714844
I0124 00:42:05.983573 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:42:05.983638 139966267543552 alphageometry.py:540] Depth 1. There are 27 nodes to expand:
I0124 00:42:05.983676 139966267543552 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : C b c h 08 T b c d h 09 ; x00
I0124 00:42:05.983708 139966267543552 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : C a c h 08 T a c d h 09 ; x00
I0124 00:42:05.983736 139966267543552 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : D d e d h 08 T b c d h 09 ; x00
I0124 00:42:05.983763 139966267543552 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : D d h d e 08 T b c d h 09 ; x00
I0124 00:42:05.983789 139966267543552 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : C f g h 08 D f h g h 09 ; x00
I0124 00:42:05.983815 139966267543552 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : T a c d h 08 T a h c d 09 ; x00
I0124 00:42:05.983840 139966267543552 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : C b d h 08 D b h d h 09 ; x00
I0124 00:42:05.983866 139966267543552 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : D d h d e 08 T a c d h 09 ; x00
I0124 00:42:05.983892 139966267543552 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : C a e h 08 D a e a h 09 ; x00
I0124 00:42:05.983917 139966267543552 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : C a b h 08 T a b c h 09 ; x00
I0124 00:42:05.983941 139966267543552 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : C g f h 08 D g h f h 09 ; x00
I0124 00:42:05.983983 139966267543552 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : T b c d h 08 ; x00
I0124 00:42:05.984011 139966267543552 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : C a b h 08 T c d c h 09 ; x00
I0124 00:42:05.984036 139966267543552 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : C a d h 08 T a d c h 09 ; x00
I0124 00:42:05.984062 139966267543552 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : T a c d h 08 T a d c h 09 ; x00
I0124 00:42:05.984088 139966267543552 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : C b e h 08 D b e e h 09 ; x00
I0124 00:42:05.984112 139966267543552 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : C e g h 08 D e g g h 09 ; x00
I0124 00:42:05.984137 139966267543552 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : C e g h 08 D e h g h 09 ; x00
I0124 00:42:05.984162 139966267543552 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : C a f h 08 D a h f h 09 ; x00
I0124 00:42:05.984186 139966267543552 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : C g e h 08 D g h e h 09 ; x00
I0124 00:42:05.984211 139966267543552 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : C a b h 08 T c d f h 09 ; x00
I0124 00:42:05.984235 139966267543552 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : C a e h 08 D a e e h 09 ; x00
I0124 00:42:05.984260 139966267543552 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : C b f h 08 D b h f h 09 ; x00
I0124 00:42:05.984285 139966267543552 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : C b c h 08 D b h c h 09 ; x00
I0124 00:42:05.984308 139966267543552 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : C c f h 08 D c h f h 09 ; x00
I0124 00:42:05.984332 139966267543552 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : T a d a h 08 ; x00
I0124 00:42:05.984361 139966267543552 alphageometry.py:544] {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : C a e h 08 T c d c h 09 ; x00
I0124 00:42:05.984390 139966267543552 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : C b c h 08 T b c d h 09 ; x00
I0124 00:42:14.579157 139966267543552 alphageometry.py:566] LM output (score=-0.504369): "i : D d i d h 10 T a c d i 11 ;"
I0124 00:42:14.579350 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d h, on_tline i d a c"

I0124 00:42:14.579406 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_circle i d h, on_tline i d a c ? cong b e a g"
I0124 00:42:14.579537 139966267543552 graph.py:498] 
I0124 00:42:14.579589 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_circle i d h, on_tline i d a c ? cong b e a g
I0124 00:42:14.706970 139966267543552 ddar.py:60] Depth 1/1000 time = 0.11434340476989746
I0124 00:42:14.848021 139966267543552 ddar.py:60] Depth 2/1000 time = 0.14097380638122559
I0124 00:42:15.037608 139966267543552 ddar.py:60] Depth 3/1000 time = 0.18951654434204102
I0124 00:42:15.230409 139966267543552 ddar.py:60] Depth 4/1000 time = 0.19261455535888672
I0124 00:42:15.428524 139966267543552 ddar.py:60] Depth 5/1000 time = 0.19800448417663574
I0124 00:42:15.631330 139966267543552 ddar.py:60] Depth 6/1000 time = 0.20133614540100098
I0124 00:42:15.631774 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:42:15.631836 139966267543552 alphageometry.py:566] LM output (score=-0.509003): "i : C a c i 10 T a c d i 11 ;"
I0124 00:42:15.631871 139966267543552 alphageometry.py:567] Translation: "i = on_line i a c, on_tline i d a c"

I0124 00:42:15.631910 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_line i a c, on_tline i d a c ? cong b e a g"
I0124 00:42:15.632032 139966267543552 graph.py:498] 
I0124 00:42:15.632081 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_line i a c, on_tline i d a c ? cong b e a g
I0124 00:42:16.018459 139966267543552 ddar.py:60] Depth 1/1000 time = 0.3765535354614258
I0124 00:42:16.847806 139966267543552 ddar.py:60] Depth 2/1000 time = 0.8291735649108887
I0124 00:42:18.755664 139966267543552 ddar.py:60] Depth 3/1000 time = 1.907667636871338
I0124 00:42:20.607592 139966267543552 ddar.py:60] Depth 4/1000 time = 1.8517494201660156
I0124 00:42:20.623522 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:42:20.623582 139966267543552 alphageometry.py:566] LM output (score=-0.642275): "i : D d i d e 10 T a c d i 11 ;"
I0124 00:42:20.623619 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e, on_tline i d a c"

I0124 00:42:20.623657 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_circle i d e, on_tline i d a c ? cong b e a g"
I0124 00:42:20.623781 139966267543552 graph.py:498] 
I0124 00:42:20.623847 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_circle i d e, on_tline i d a c ? cong b e a g
I0124 00:42:20.849531 139966267543552 ddar.py:60] Depth 1/1000 time = 0.21373534202575684
I0124 00:42:21.378818 139966267543552 ddar.py:60] Depth 2/1000 time = 0.5291807651519775
I0124 00:42:21.759347 139966267543552 ddar.py:60] Depth 3/1000 time = 0.3803715705871582
I0124 00:42:22.339263 139966267543552 ddar.py:60] Depth 4/1000 time = 0.5796835422515869
I0124 00:42:23.004334 139966267543552 ddar.py:60] Depth 5/1000 time = 0.6634488105773926
I0124 00:42:23.759824 139966267543552 ddar.py:60] Depth 6/1000 time = 0.7553155422210693
I0124 00:42:24.535767 139966267543552 ddar.py:60] Depth 7/1000 time = 0.7757513523101807
I0124 00:42:25.323366 139966267543552 ddar.py:60] Depth 8/1000 time = 0.7858338356018066
I0124 00:42:26.129252 139966267543552 ddar.py:60] Depth 9/1000 time = 0.8018453121185303
I0124 00:42:26.129431 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:42:26.129479 139966267543552 alphageometry.py:566] LM output (score=-2.126715): "i : D d h d i 10 T a c d i 11 ;"
I0124 00:42:26.129513 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d h, on_tline i d a c"

I0124 00:42:26.129549 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_circle i d h, on_tline i d a c ? cong b e a g"
I0124 00:42:26.129679 139966267543552 graph.py:498] 
I0124 00:42:26.129730 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_circle i d h, on_tline i d a c ? cong b e a g
I0124 00:42:26.260394 139966267543552 ddar.py:60] Depth 1/1000 time = 0.11737942695617676
I0124 00:42:26.404814 139966267543552 ddar.py:60] Depth 2/1000 time = 0.14434528350830078
I0124 00:42:26.600513 139966267543552 ddar.py:60] Depth 3/1000 time = 0.19562816619873047
I0124 00:42:26.802950 139966267543552 ddar.py:60] Depth 4/1000 time = 0.20226693153381348
I0124 00:42:27.014132 139966267543552 ddar.py:60] Depth 5/1000 time = 0.21050190925598145
I0124 00:42:27.256858 139966267543552 ddar.py:60] Depth 6/1000 time = 0.24265241622924805
I0124 00:42:27.628208 139966267543552 ddar.py:60] Depth 7/1000 time = 0.37127208709716797
I0124 00:42:27.969545 139966267543552 ddar.py:60] Depth 8/1000 time = 0.3412601947784424
I0124 00:42:28.353769 139966267543552 ddar.py:60] Depth 9/1000 time = 0.38415050506591797
I0124 00:42:29.394974 139966267543552 ddar.py:60] Depth 10/1000 time = 1.041102647781372
I0124 00:42:32.047893 139966267543552 ddar.py:60] Depth 11/1000 time = 2.652740716934204
I0124 00:42:34.112968 139966267543552 ddar.py:60] Depth 12/1000 time = 2.064901828765869
I0124 00:42:34.131523 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:42:34.131581 139966267543552 alphageometry.py:566] LM output (score=-2.822829): "i : D d e d i 10 T a c d i 11 ;"
I0124 00:42:34.131616 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e, on_tline i d a c"

I0124 00:42:34.131652 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_circle i d e, on_tline i d a c ? cong b e a g"
I0124 00:42:34.131772 139966267543552 graph.py:498] 
I0124 00:42:34.131818 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_circle i d e, on_tline i d a c ? cong b e a g
I0124 00:42:34.357007 139966267543552 ddar.py:60] Depth 1/1000 time = 0.21383905410766602
I0124 00:42:34.875396 139966267543552 ddar.py:60] Depth 2/1000 time = 0.5182602405548096
I0124 00:42:35.476748 139966267543552 ddar.py:60] Depth 3/1000 time = 0.6011772155761719
I0124 00:42:35.868413 139966267543552 ddar.py:60] Depth 4/1000 time = 0.3913867473602295
I0124 00:42:36.556503 139966267543552 ddar.py:60] Depth 5/1000 time = 0.6864833831787109
I0124 00:42:37.336909 139966267543552 ddar.py:60] Depth 6/1000 time = 0.7802326679229736
I0124 00:42:38.134006 139966267543552 ddar.py:60] Depth 7/1000 time = 0.7969081401824951
I0124 00:42:38.937675 139966267543552 ddar.py:60] Depth 8/1000 time = 0.80191969871521
I0124 00:42:39.748787 139966267543552 ddar.py:60] Depth 9/1000 time = 0.8069639205932617
I0124 00:42:39.748968 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:42:39.749014 139966267543552 alphageometry.py:566] LM output (score=-3.877230): "i : D d e d i 10 T b c d i 11 ;"
I0124 00:42:39.749049 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e, on_tline i d b c"

I0124 00:42:39.749084 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_circle i d e, on_tline i d b c ? cong b e a g"
I0124 00:42:39.749204 139966267543552 graph.py:498] 
I0124 00:42:39.749251 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_circle i d e, on_tline i d b c ? cong b e a g
I0124 00:42:40.245853 139966267543552 ddar.py:60] Depth 1/1000 time = 0.4890463352203369
I0124 00:42:40.839916 139966267543552 ddar.py:60] Depth 2/1000 time = 0.5938889980316162
I0124 00:42:41.515545 139966267543552 ddar.py:60] Depth 3/1000 time = 0.6754508018493652
I0124 00:42:42.203150 139966267543552 ddar.py:60] Depth 4/1000 time = 0.6873164176940918
I0124 00:42:42.913110 139966267543552 ddar.py:60] Depth 5/1000 time = 0.7078583240509033
I0124 00:42:43.626719 139966267543552 ddar.py:60] Depth 6/1000 time = 0.7128574848175049
I0124 00:42:43.626903 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:42:43.626949 139966267543552 alphageometry.py:566] LM output (score=-4.236068): "i : P a c a i 10 T a c d i 11 ;"
I0124 00:42:43.626983 139966267543552 alphageometry.py:567] Translation: "ERROR: Invalid predicate P a c a i"

I0124 00:42:43.627017 139966267543552 alphageometry.py:566] LM output (score=-4.307088): "i : C h f i 10 D h i f i 11 ;"
I0124 00:42:43.627046 139966267543552 alphageometry.py:567] Translation: "i = on_line i h f, on_bline i f h"

I0124 00:42:43.627077 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_line i h f, on_bline i f h ? cong b e a g"
I0124 00:42:43.627199 139966267543552 graph.py:498] 
I0124 00:42:43.627247 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_line i h f, on_bline i f h ? cong b e a g
I0124 00:42:43.759486 139966267543552 ddar.py:60] Depth 1/1000 time = 0.12258076667785645
I0124 00:42:43.926303 139966267543552 ddar.py:60] Depth 2/1000 time = 0.16673851013183594
I0124 00:42:44.135783 139966267543552 ddar.py:60] Depth 3/1000 time = 0.20940136909484863
I0124 00:42:44.351385 139966267543552 ddar.py:60] Depth 4/1000 time = 0.21541881561279297
I0124 00:42:44.352333 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:42:44.352381 139966267543552 alphageometry.py:566] LM output (score=-4.459948): "i : D d i d e 10 T b c d i 11 ;"
I0124 00:42:44.352416 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e, on_tline i d b c"

I0124 00:42:44.352467 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_circle i d e, on_tline i d b c ? cong b e a g"
I0124 00:42:44.352582 139966267543552 graph.py:498] 
I0124 00:42:44.352630 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_circle i d e, on_tline i d b c ? cong b e a g
I0124 00:42:44.842765 139966267543552 ddar.py:60] Depth 1/1000 time = 0.48294496536254883
I0124 00:42:45.437778 139966267543552 ddar.py:60] Depth 2/1000 time = 0.5948336124420166
I0124 00:42:46.116225 139966267543552 ddar.py:60] Depth 3/1000 time = 0.6782686710357666
I0124 00:42:46.800592 139966267543552 ddar.py:60] Depth 4/1000 time = 0.6840736865997314
I0124 00:42:47.511722 139966267543552 ddar.py:60] Depth 5/1000 time = 0.7090251445770264
I0124 00:42:48.222406 139966267543552 ddar.py:60] Depth 6/1000 time = 0.709932804107666
I0124 00:42:48.222592 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:42:48.222638 139966267543552 alphageometry.py:566] LM output (score=-4.496804): "i : D d e d i 10 T b h d i 11 ;"
I0124 00:42:48.222672 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e, on_tline i d b h"

I0124 00:42:48.222708 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_circle i d e, on_tline i d b h ? cong b e a g"
I0124 00:42:48.222833 139966267543552 graph.py:498] 
I0124 00:42:48.222881 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_circle i d e, on_tline i d b h ? cong b e a g
I0124 00:42:48.713438 139966267543552 ddar.py:60] Depth 1/1000 time = 0.48291683197021484
I0124 00:42:49.308208 139966267543552 ddar.py:60] Depth 2/1000 time = 0.5945932865142822
I0124 00:42:49.992720 139966267543552 ddar.py:60] Depth 3/1000 time = 0.684279203414917
I0124 00:42:50.712275 139966267543552 ddar.py:60] Depth 4/1000 time = 0.7191348075866699
I0124 00:42:51.427735 139966267543552 ddar.py:60] Depth 5/1000 time = 0.7133538722991943
I0124 00:42:52.156772 139966267543552 ddar.py:60] Depth 6/1000 time = 0.7282679080963135
I0124 00:42:52.156960 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:42:52.157016 139966267543552 alphageometry.py:566] LM output (score=-4.531090): "i : P a c c i 10 T a c d i 11 ;"
I0124 00:42:52.157051 139966267543552 alphageometry.py:567] Translation: "ERROR: Invalid predicate P a c c i"

I0124 00:42:52.157085 139966267543552 alphageometry.py:566] LM output (score=-4.721890): "i : D d e d i 10 T h e e i 11 ;"
I0124 00:42:52.157113 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e, on_tline i e h e"

I0124 00:42:52.157145 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_circle i d e, on_tline i e h e ? cong b e a g"
I0124 00:42:52.157282 139966267543552 graph.py:498] 
I0124 00:42:52.157342 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_circle i d e, on_tline i e h e ? cong b e a g
I0124 00:42:52.615000 139966267543552 ddar.py:60] Depth 1/1000 time = 0.44638895988464355
I0124 00:42:52.953358 139966267543552 ddar.py:60] Depth 2/1000 time = 0.33818697929382324
I0124 00:42:53.597920 139966267543552 ddar.py:60] Depth 3/1000 time = 0.6444084644317627
I0124 00:42:54.250416 139966267543552 ddar.py:60] Depth 4/1000 time = 0.6523036956787109
I0124 00:42:54.907059 139966267543552 ddar.py:60] Depth 5/1000 time = 0.6563363075256348
I0124 00:42:54.909922 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:42:54.909978 139966267543552 alphageometry.py:566] LM output (score=-4.783881): "i : D d j d i 10 T a c d i 11 ;"
I0124 00:42:54.910014 139966267543552 alphageometry.py:567] Translation: "ERROR: point j does not exist."

I0124 00:42:54.910050 139966267543552 alphageometry.py:566] LM output (score=-4.789176): "i : D d e d i 10 T h e f i 11 ;"
I0124 00:42:54.910078 139966267543552 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0124 00:42:54.910108 139966267543552 alphageometry.py:566] LM output (score=-4.990604): "h : D d h d e 10 T a c d h 11 ;"
I0124 00:42:54.910135 139966267543552 alphageometry.py:567] Translation: "ERROR: point h already exists."

I0124 00:42:54.910162 139966267543552 alphageometry.py:566] LM output (score=-5.072295): "i : D d i d g 10 T a c d i 11 ;"
I0124 00:42:54.910188 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d g, on_tline i d a c"

I0124 00:42:54.910218 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_circle i d g, on_tline i d a c ? cong b e a g"
I0124 00:42:54.910335 139966267543552 graph.py:498] 
I0124 00:42:54.910381 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_circle i d g, on_tline i d a c ? cong b e a g
I0124 00:42:55.038529 139966267543552 ddar.py:60] Depth 1/1000 time = 0.11493849754333496
I0124 00:42:55.192246 139966267543552 ddar.py:60] Depth 2/1000 time = 0.1536409854888916
I0124 00:42:55.405541 139966267543552 ddar.py:60] Depth 3/1000 time = 0.21322202682495117
I0124 00:42:55.625006 139966267543552 ddar.py:60] Depth 4/1000 time = 0.21928977966308594
I0124 00:42:55.850630 139966267543552 ddar.py:60] Depth 5/1000 time = 0.22411203384399414
I0124 00:42:55.850725 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:42:55.850766 139966267543552 alphageometry.py:566] LM output (score=-5.081704): "i : D c i d i 10 D c i h i 11 ;"
I0124 00:42:55.850799 139966267543552 alphageometry.py:567] Translation: "i = on_bline i d c, on_bline i h c"

I0124 00:42:55.850833 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_bline i d c, on_bline i h c ? cong b e a g"
I0124 00:42:55.850944 139966267543552 graph.py:498] 
I0124 00:42:55.850991 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_bline i d c, on_bline i h c ? cong b e a g
I0124 00:42:56.328775 139966267543552 ddar.py:60] Depth 1/1000 time = 0.4633805751800537
I0124 00:42:56.587049 139966267543552 ddar.py:60] Depth 2/1000 time = 0.2581183910369873
I0124 00:42:57.121656 139966267543552 ddar.py:60] Depth 3/1000 time = 0.5344860553741455
I0124 00:42:57.441909 139966267543552 ddar.py:60] Depth 4/1000 time = 0.3199639320373535
I0124 00:42:58.008766 139966267543552 ddar.py:60] Depth 5/1000 time = 0.5666723251342773
I0124 00:42:58.599636 139966267543552 ddar.py:60] Depth 6/1000 time = 0.5906872749328613
I0124 00:42:58.601361 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:42:58.601414 139966267543552 alphageometry.py:566] LM output (score=-5.082591): "i : D d e d i 10 T b d e i 11 ;"
I0124 00:42:58.601450 139966267543552 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0124 00:42:58.601486 139966267543552 alphageometry.py:566] LM output (score=-5.086481): "i : D d e d i 10 T b h e i 11 ;"
I0124 00:42:58.601515 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e, on_tline i e b h"

I0124 00:42:58.601546 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_circle i d e, on_tline i e b h ? cong b e a g"
I0124 00:42:58.601677 139966267543552 graph.py:498] 
I0124 00:42:58.601728 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_circle i d e, on_tline i e b h ? cong b e a g
I0124 00:42:59.080580 139966267543552 ddar.py:60] Depth 1/1000 time = 0.4656715393066406
I0124 00:42:59.469146 139966267543552 ddar.py:60] Depth 2/1000 time = 0.3883960247039795
I0124 00:43:00.458054 139966267543552 ddar.py:60] Depth 3/1000 time = 0.9887547492980957
I0124 00:43:00.994925 139966267543552 ddar.py:60] Depth 4/1000 time = 0.536686897277832
I0124 00:43:01.756839 139966267543552 ddar.py:60] Depth 5/1000 time = 0.7615902423858643
I0124 00:43:01.759809 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:43:01.759863 139966267543552 alphageometry.py:566] LM output (score=-5.093920): "i : D d e e i 10 T d e e i 11 ;"
I0124 00:43:01.759899 139966267543552 alphageometry.py:567] Translation: "i = on_circle i e d, on_tline i e d e"

I0124 00:43:01.759936 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_circle i e d, on_tline i e d e ? cong b e a g"
I0124 00:43:01.760058 139966267543552 graph.py:498] 
I0124 00:43:01.760105 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_circle i e d, on_tline i e d e ? cong b e a g
I0124 00:43:02.175953 139966267543552 ddar.py:60] Depth 1/1000 time = 0.40792393684387207
I0124 00:43:02.400260 139966267543552 ddar.py:60] Depth 2/1000 time = 0.22414422035217285
I0124 00:43:02.892287 139966267543552 ddar.py:60] Depth 3/1000 time = 0.4919145107269287
I0124 00:43:03.184912 139966267543552 ddar.py:60] Depth 4/1000 time = 0.2923252582550049
I0124 00:43:03.696080 139966267543552 ddar.py:60] Depth 5/1000 time = 0.5108890533447266
I0124 00:43:03.696535 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:43:03.696590 139966267543552 alphageometry.py:566] LM output (score=-5.095457): "i : C h e i 10 D h i e i 11 ;"
I0124 00:43:03.696627 139966267543552 alphageometry.py:567] Translation: "i = on_line i h e, on_bline i e h"

I0124 00:43:03.696665 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_line i h e, on_bline i e h ? cong b e a g"
I0124 00:43:03.696789 139966267543552 graph.py:498] 
I0124 00:43:03.696838 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_line i h e, on_bline i e h ? cong b e a g
I0124 00:43:03.830554 139966267543552 ddar.py:60] Depth 1/1000 time = 0.12403225898742676
I0124 00:43:04.000620 139966267543552 ddar.py:60] Depth 2/1000 time = 0.1699833869934082
I0124 00:43:04.213265 139966267543552 ddar.py:60] Depth 3/1000 time = 0.2125685214996338
I0124 00:43:04.434671 139966267543552 ddar.py:60] Depth 4/1000 time = 0.22121977806091309
I0124 00:43:04.435742 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:43:04.435790 139966267543552 alphageometry.py:566] LM output (score=-5.122382): "i : D d e d i 10 T d h e i 11 ;"
I0124 00:43:04.435825 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e, on_tline i e d h"

I0124 00:43:04.435860 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_circle i d e, on_tline i e d h ? cong b e a g"
I0124 00:43:04.435975 139966267543552 graph.py:498] 
I0124 00:43:04.436021 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_circle i d e, on_tline i e d h ? cong b e a g
I0124 00:43:04.902524 139966267543552 ddar.py:60] Depth 1/1000 time = 0.45465707778930664
I0124 00:43:05.289087 139966267543552 ddar.py:60] Depth 2/1000 time = 0.38639044761657715
I0124 00:43:06.024155 139966267543552 ddar.py:60] Depth 3/1000 time = 0.734907865524292
I0124 00:43:06.775351 139966267543552 ddar.py:60] Depth 4/1000 time = 0.7509937286376953
I0124 00:43:07.526183 139966267543552 ddar.py:60] Depth 5/1000 time = 0.7504293918609619
I0124 00:43:07.529791 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:43:07.529862 139966267543552 alphageometry.py:566] LM output (score=-5.136913): "h : C a c h 10 T a c d h 11 ;"
I0124 00:43:07.529899 139966267543552 alphageometry.py:567] Translation: "ERROR: point h already exists."

I0124 00:43:07.529941 139966267543552 alphageometry.py:566] LM output (score=-5.143407): "i : C b d i 10 D b i d i 11 ;"
I0124 00:43:07.529970 139966267543552 alphageometry.py:567] Translation: "i = on_line i b d, on_bline i d b"

I0124 00:43:07.530003 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_line i b d, on_bline i d b ? cong b e a g"
I0124 00:43:07.530143 139966267543552 graph.py:498] 
I0124 00:43:07.530200 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_line i b d, on_bline i d b ? cong b e a g
I0124 00:43:07.671813 139966267543552 ddar.py:60] Depth 1/1000 time = 0.13175249099731445
I0124 00:43:08.321929 139966267543552 ddar.py:60] Depth 2/1000 time = 0.6500163078308105
I0124 00:43:09.024430 139966267543552 ddar.py:60] Depth 3/1000 time = 0.7023277282714844
I0124 00:43:09.739701 139966267543552 ddar.py:60] Depth 4/1000 time = 0.7150695323944092
I0124 00:43:10.450171 139966267543552 ddar.py:60] Depth 5/1000 time = 0.71010422706604
I0124 00:43:10.451283 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:43:10.451336 139966267543552 alphageometry.py:566] LM output (score=-5.252496): "i : C d h i 10 D d h d i 11 ;"
I0124 00:43:10.451372 139966267543552 alphageometry.py:567] Translation: "i = on_line i d h, on_circle i d h"

I0124 00:43:10.451408 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_line i d h, on_circle i d h ? cong b e a g"
I0124 00:43:10.451555 139966267543552 graph.py:498] 
I0124 00:43:10.451605 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_line i d h, on_circle i d h ? cong b e a g
I0124 00:43:10.612060 139966267543552 ddar.py:60] Depth 1/1000 time = 0.15060782432556152
I0124 00:43:10.862928 139966267543552 ddar.py:60] Depth 2/1000 time = 0.25078868865966797
I0124 00:43:11.163712 139966267543552 ddar.py:60] Depth 3/1000 time = 0.3007025718688965
I0124 00:43:11.471419 139966267543552 ddar.py:60] Depth 4/1000 time = 0.3075253963470459
I0124 00:43:11.472886 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:43:11.472933 139966267543552 alphageometry.py:566] LM output (score=-5.278731): "g : C a c g 10 T a c d g 11 ;"
I0124 00:43:11.472968 139966267543552 alphageometry.py:567] Translation: "ERROR: point g already exists."

I0124 00:43:11.473001 139966267543552 alphageometry.py:566] LM output (score=-5.289472): "i : D d e d i 10 T b e e i 11 ;"
I0124 00:43:11.473031 139966267543552 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0124 00:43:11.473061 139966267543552 alphageometry.py:566] LM output (score=-5.366750): "i : D d e d i 10 T d e d i 11 ;"
I0124 00:43:11.473088 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e, on_tline i d d e"

I0124 00:43:11.473116 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_circle i d e, on_tline i d d e ? cong b e a g"
I0124 00:43:11.473226 139966267543552 graph.py:498] 
I0124 00:43:11.473272 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_circle i d e, on_tline i d d e ? cong b e a g
I0124 00:43:11.964805 139966267543552 ddar.py:60] Depth 1/1000 time = 0.47773075103759766
I0124 00:43:12.585331 139966267543552 ddar.py:60] Depth 2/1000 time = 0.6203510761260986
I0124 00:43:13.278795 139966267543552 ddar.py:60] Depth 3/1000 time = 0.6932868957519531
I0124 00:43:13.731525 139966267543552 ddar.py:60] Depth 4/1000 time = 0.452404260635376
I0124 00:43:14.430144 139966267543552 ddar.py:60] Depth 5/1000 time = 0.6980104446411133
I0124 00:43:14.431723 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:43:14.431775 139966267543552 alphageometry.py:566] LM output (score=-5.397023): "i : C e h i 10 D e i h i 11 ;"
I0124 00:43:14.431809 139966267543552 alphageometry.py:567] Translation: "i = on_line i e h, on_bline i h e"

I0124 00:43:14.431846 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_line i e h, on_bline i h e ? cong b e a g"
I0124 00:43:14.431968 139966267543552 graph.py:498] 
I0124 00:43:14.432016 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_line i e h, on_bline i h e ? cong b e a g
I0124 00:43:14.565650 139966267543552 ddar.py:60] Depth 1/1000 time = 0.12387847900390625
I0124 00:43:14.735114 139966267543552 ddar.py:60] Depth 2/1000 time = 0.1693859100341797
I0124 00:43:14.948488 139966267543552 ddar.py:60] Depth 3/1000 time = 0.21329450607299805
I0124 00:43:15.168926 139966267543552 ddar.py:60] Depth 4/1000 time = 0.22023820877075195
I0124 00:43:15.170042 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:43:15.170093 139966267543552 alphageometry.py:566] LM output (score=-5.418656): "g : D d g d h 10 T a c d g 11 ;"
I0124 00:43:15.170127 139966267543552 alphageometry.py:567] Translation: "ERROR: point g already exists."

I0124 00:43:15.170160 139966267543552 alphageometry.py:566] LM output (score=-5.479608): "i : C h f i 10 D h f h i 11 ;"
I0124 00:43:15.170188 139966267543552 alphageometry.py:567] Translation: "i = on_line i h f, on_circle i h f"

I0124 00:43:15.170218 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_line i h f, on_circle i h f ? cong b e a g"
I0124 00:43:15.170327 139966267543552 graph.py:498] 
I0124 00:43:15.170374 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b c, on_tline h d b c; i = on_line i h f, on_circle i h f ? cong b e a g
I0124 00:43:15.300725 139966267543552 ddar.py:60] Depth 1/1000 time = 0.12127804756164551
I0124 00:43:15.465225 139966267543552 ddar.py:60] Depth 2/1000 time = 0.16442346572875977
I0124 00:43:15.917990 139966267543552 ddar.py:60] Depth 3/1000 time = 0.45266294479370117
I0124 00:43:16.143649 139966267543552 ddar.py:60] Depth 4/1000 time = 0.22538185119628906
I0124 00:43:16.144990 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:43:16.145041 139966267543552 alphageometry.py:566] LM output (score=-5.604580): "f : C a c f 10 T a c d f 11 ;"
I0124 00:43:16.145076 139966267543552 alphageometry.py:567] Translation: "ERROR: point f already exists."

I0124 00:43:16.145113 139966267543552 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : C a c h 08 T a c d h 09 ; x00
I0124 00:43:24.854338 139966267543552 alphageometry.py:566] LM output (score=-0.072618): "i : C b c i 10 T b c d i 11 ;"
I0124 00:43:24.854488 139966267543552 alphageometry.py:567] Translation: "i = on_line i b c, on_tline i d b c"

I0124 00:43:24.854529 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_line i b c, on_tline i d b c ? cong b e a g"
I0124 00:43:24.854649 139966267543552 graph.py:498] 
I0124 00:43:24.854698 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_line i b c, on_tline i d b c ? cong b e a g
I0124 00:43:25.012273 139966267543552 ddar.py:60] Depth 1/1000 time = 0.14603233337402344
I0124 00:43:25.875495 139966267543552 ddar.py:60] Depth 2/1000 time = 0.8631246089935303
I0124 00:43:27.856242 139966267543552 ddar.py:60] Depth 3/1000 time = 1.9805078506469727
I0124 00:43:29.514363 139966267543552 ddar.py:60] Depth 4/1000 time = 1.657827377319336
I0124 00:43:31.390275 139966267543552 ddar.py:60] Depth 5/1000 time = 1.8755333423614502
I0124 00:43:31.406097 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:43:31.406160 139966267543552 alphageometry.py:566] LM output (score=-1.379006): "i : D d i d e 10 T b c d i 11 ;"
I0124 00:43:31.406196 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e, on_tline i d b c"

I0124 00:43:31.406234 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_circle i d e, on_tline i d b c ? cong b e a g"
I0124 00:43:31.406379 139966267543552 graph.py:498] 
I0124 00:43:31.406438 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_circle i d e, on_tline i d b c ? cong b e a g
I0124 00:43:31.642875 139966267543552 ddar.py:60] Depth 1/1000 time = 0.22447609901428223
I0124 00:43:32.334956 139966267543552 ddar.py:60] Depth 2/1000 time = 0.6919708251953125
I0124 00:43:33.335959 139966267543552 ddar.py:60] Depth 3/1000 time = 1.000830888748169
I0124 00:43:34.320671 139966267543552 ddar.py:60] Depth 4/1000 time = 0.984529972076416
I0124 00:43:35.051405 139966267543552 ddar.py:60] Depth 5/1000 time = 0.7304353713989258
I0124 00:43:36.073685 139966267543552 ddar.py:60] Depth 6/1000 time = 1.021742343902588
I0124 00:43:37.075075 139966267543552 ddar.py:60] Depth 7/1000 time = 1.0012106895446777
I0124 00:43:38.089029 139966267543552 ddar.py:60] Depth 8/1000 time = 1.0137672424316406
I0124 00:43:39.109515 139966267543552 ddar.py:60] Depth 9/1000 time = 1.0103776454925537
I0124 00:43:39.109722 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:43:39.109771 139966267543552 alphageometry.py:566] LM output (score=-1.518821): "i : D d i d h 10 T b c d i 11 ;"
I0124 00:43:39.109806 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d h, on_tline i d b c"

I0124 00:43:39.109843 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_circle i d h, on_tline i d b c ? cong b e a g"
I0124 00:43:39.109966 139966267543552 graph.py:498] 
I0124 00:43:39.110014 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_circle i d h, on_tline i d b c ? cong b e a g
I0124 00:43:39.252920 139966267543552 ddar.py:60] Depth 1/1000 time = 0.12987661361694336
I0124 00:43:39.882517 139966267543552 ddar.py:60] Depth 2/1000 time = 0.6294941902160645
I0124 00:43:40.847393 139966267543552 ddar.py:60] Depth 3/1000 time = 0.9646995067596436
I0124 00:43:41.823855 139966267543552 ddar.py:60] Depth 4/1000 time = 0.9762887954711914
I0124 00:43:42.780654 139966267543552 ddar.py:60] Depth 5/1000 time = 0.9566159248352051
I0124 00:43:43.490596 139966267543552 ddar.py:60] Depth 6/1000 time = 0.709644079208374
I0124 00:43:44.474087 139966267543552 ddar.py:60] Depth 7/1000 time = 0.9822907447814941
I0124 00:43:45.548413 139966267543552 ddar.py:60] Depth 8/1000 time = 1.0741398334503174
I0124 00:43:47.211221 139966267543552 ddar.py:60] Depth 9/1000 time = 1.6626379489898682
I0124 00:43:48.520828 139966267543552 ddar.py:60] Depth 10/1000 time = 1.3094112873077393
I0124 00:43:49.912183 139966267543552 ddar.py:60] Depth 11/1000 time = 1.3911664485931396
I0124 00:43:51.368648 139966267543552 ddar.py:60] Depth 12/1000 time = 1.456291913986206
I0124 00:43:53.265085 139966267543552 ddar.py:60] Depth 13/1000 time = 1.8962790966033936
I0124 00:43:55.403398 139966267543552 ddar.py:60] Depth 14/1000 time = 2.1381351947784424
I0124 00:43:55.422840 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:43:55.422898 139966267543552 alphageometry.py:566] LM output (score=-1.835839): "i : D d e d i 10 T b c d i 11 ;"
I0124 00:43:55.422933 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e, on_tline i d b c"

I0124 00:43:55.422968 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_circle i d e, on_tline i d b c ? cong b e a g"
I0124 00:43:55.423086 139966267543552 graph.py:498] 
I0124 00:43:55.423147 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_circle i d e, on_tline i d b c ? cong b e a g
I0124 00:43:55.658536 139966267543552 ddar.py:60] Depth 1/1000 time = 0.22406721115112305
I0124 00:43:56.349318 139966267543552 ddar.py:60] Depth 2/1000 time = 0.6906588077545166
I0124 00:43:57.394825 139966267543552 ddar.py:60] Depth 3/1000 time = 1.0453295707702637
I0124 00:43:58.409043 139966267543552 ddar.py:60] Depth 4/1000 time = 1.0140392780303955
I0124 00:43:59.436291 139966267543552 ddar.py:60] Depth 5/1000 time = 1.0269486904144287
I0124 00:44:00.232565 139966267543552 ddar.py:60] Depth 6/1000 time = 0.7957282066345215
I0124 00:44:01.536826 139966267543552 ddar.py:60] Depth 7/1000 time = 1.3041036128997803
I0124 00:44:02.363981 139966267543552 ddar.py:60] Depth 8/1000 time = 0.8172094821929932
I0124 00:44:02.364153 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:44:02.364201 139966267543552 alphageometry.py:566] LM output (score=-2.549545): "i : D d h d i 10 T b c d i 11 ;"
I0124 00:44:02.364234 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d h, on_tline i d b c"

I0124 00:44:02.364269 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_circle i d h, on_tline i d b c ? cong b e a g"
I0124 00:44:02.364391 139966267543552 graph.py:498] 
I0124 00:44:02.364439 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_circle i d h, on_tline i d b c ? cong b e a g
I0124 00:44:02.748522 139966267543552 ddar.py:60] Depth 1/1000 time = 0.3714101314544678
I0124 00:44:03.141936 139966267543552 ddar.py:60] Depth 2/1000 time = 0.3932487964630127
I0124 00:44:04.133736 139966267543552 ddar.py:60] Depth 3/1000 time = 0.9916565418243408
I0124 00:44:05.177613 139966267543552 ddar.py:60] Depth 4/1000 time = 1.0436995029449463
I0124 00:44:06.219637 139966267543552 ddar.py:60] Depth 5/1000 time = 1.0418317317962646
I0124 00:44:07.261525 139966267543552 ddar.py:60] Depth 6/1000 time = 1.0415887832641602
I0124 00:44:08.354962 139966267543552 ddar.py:60] Depth 7/1000 time = 1.0931906700134277
I0124 00:44:09.460275 139966267543552 ddar.py:60] Depth 8/1000 time = 1.1051356792449951
I0124 00:44:10.560491 139966267543552 ddar.py:60] Depth 9/1000 time = 1.0891895294189453
I0124 00:44:10.560664 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:44:10.560709 139966267543552 alphageometry.py:566] LM output (score=-3.543241): "i : P b c c i 10 T b c d i 11 ;"
I0124 00:44:10.560743 139966267543552 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b c c i"

I0124 00:44:10.560776 139966267543552 alphageometry.py:566] LM output (score=-3.825565): "i : D d e d i 10 ;"
I0124 00:44:10.560804 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e"

I0124 00:44:10.560834 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_circle i d e ? cong b e a g"
I0124 00:44:10.560947 139966267543552 graph.py:498] 
I0124 00:44:10.560994 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_circle i d e ? cong b e a g
I0124 00:44:10.779226 139966267543552 ddar.py:60] Depth 1/1000 time = 0.21024346351623535
I0124 00:44:11.442487 139966267543552 ddar.py:60] Depth 2/1000 time = 0.6631436347961426
I0124 00:44:12.407675 139966267543552 ddar.py:60] Depth 3/1000 time = 0.9650099277496338
I0124 00:44:13.072099 139966267543552 ddar.py:60] Depth 4/1000 time = 0.6642436981201172
I0124 00:44:13.989880 139966267543552 ddar.py:60] Depth 5/1000 time = 0.9174833297729492
I0124 00:44:13.994892 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:44:13.994956 139966267543552 alphageometry.py:566] LM output (score=-4.035056): "i : C h f i 10 D h i f i 11 ;"
I0124 00:44:13.994992 139966267543552 alphageometry.py:567] Translation: "i = on_line i h f, on_bline i f h"

I0124 00:44:13.995031 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_line i h f, on_bline i f h ? cong b e a g"
I0124 00:44:13.995161 139966267543552 graph.py:498] 
I0124 00:44:13.995219 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_line i h f, on_bline i f h ? cong b e a g
I0124 00:44:14.138832 139966267543552 ddar.py:60] Depth 1/1000 time = 0.1331164836883545
I0124 00:44:14.792498 139966267543552 ddar.py:60] Depth 2/1000 time = 0.6535680294036865
I0124 00:44:15.782165 139966267543552 ddar.py:60] Depth 3/1000 time = 0.9894928932189941
I0124 00:44:16.758092 139966267543552 ddar.py:60] Depth 4/1000 time = 0.9757499694824219
I0124 00:44:18.003551 139966267543552 ddar.py:60] Depth 5/1000 time = 1.245143175125122
I0124 00:44:18.007556 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:44:18.007611 139966267543552 alphageometry.py:566] LM output (score=-4.166009): "i : D d i d e 10 P b c c i 11 T b c d i 12 ;"
I0124 00:44:18.007646 139966267543552 alphageometry.py:567] Translation: "ERROR: there cannot be more than two predicates."

I0124 00:44:18.007680 139966267543552 alphageometry.py:566] LM output (score=-4.633189): "i : C e h i 10 D e i h i 11 ;"
I0124 00:44:18.007707 139966267543552 alphageometry.py:567] Translation: "i = on_line i e h, on_bline i h e"

I0124 00:44:18.007737 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_line i e h, on_bline i h e ? cong b e a g"
I0124 00:44:18.007855 139966267543552 graph.py:498] 
I0124 00:44:18.007903 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_line i e h, on_bline i h e ? cong b e a g
I0124 00:44:18.153204 139966267543552 ddar.py:60] Depth 1/1000 time = 0.135206937789917
I0124 00:44:18.558493 139966267543552 ddar.py:60] Depth 2/1000 time = 0.40520310401916504
I0124 00:44:19.974284 139966267543552 ddar.py:60] Depth 3/1000 time = 1.415663719177246
I0124 00:44:21.452696 139966267543552 ddar.py:60] Depth 4/1000 time = 1.478236198425293
I0124 00:44:22.757763 139966267543552 ddar.py:60] Depth 5/1000 time = 1.3048882484436035
I0124 00:44:24.343893 139966267543552 ddar.py:60] Depth 6/1000 time = 1.5858056545257568
I0124 00:44:24.350598 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:44:24.350654 139966267543552 alphageometry.py:566] LM output (score=-4.655876): "h : C b c h 10 T b c d h 11 ;"
I0124 00:44:24.350690 139966267543552 alphageometry.py:567] Translation: "ERROR: point h already exists."

I0124 00:44:24.350725 139966267543552 alphageometry.py:566] LM output (score=-4.676420): "i : D d i d e 10 P b c b i 11 T b c d i 12 ;"
I0124 00:44:24.350755 139966267543552 alphageometry.py:567] Translation: "ERROR: there cannot be more than two predicates."

I0124 00:44:24.350784 139966267543552 alphageometry.py:566] LM output (score=-5.073928): "i : T a c h i 10 T e h f i 11 ;"
I0124 00:44:24.350811 139966267543552 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0124 00:44:24.350857 139966267543552 alphageometry.py:566] LM output (score=-5.131783): "i : C d h i 10 D d h d i 11 ;"
I0124 00:44:24.350888 139966267543552 alphageometry.py:567] Translation: "i = on_line i d h, on_circle i d h"

I0124 00:44:24.350920 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_line i d h, on_circle i d h ? cong b e a g"
I0124 00:44:24.351041 139966267543552 graph.py:498] 
I0124 00:44:24.351089 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_line i d h, on_circle i d h ? cong b e a g
I0124 00:44:24.526851 139966267543552 ddar.py:60] Depth 1/1000 time = 0.16562557220458984
I0124 00:44:25.388729 139966267543552 ddar.py:60] Depth 2/1000 time = 0.8617813587188721
I0124 00:44:26.827640 139966267543552 ddar.py:60] Depth 3/1000 time = 1.4387321472167969
I0124 00:44:28.263966 139966267543552 ddar.py:60] Depth 4/1000 time = 1.4361422061920166
I0124 00:44:29.982785 139966267543552 ddar.py:60] Depth 5/1000 time = 1.7184743881225586
I0124 00:44:29.989277 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:44:29.989341 139966267543552 alphageometry.py:566] LM output (score=-5.158686): "i : D d j d i 10 T b c d i 11 ;"
I0124 00:44:29.989378 139966267543552 alphageometry.py:567] Translation: "ERROR: point j does not exist."

I0124 00:44:29.989413 139966267543552 alphageometry.py:566] LM output (score=-5.170343): "i : C b c i 10 D d i d h 11 ;"
I0124 00:44:29.989442 139966267543552 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2622, in add_clause
    nums = draw_fn()
  File "/home/chi/alphageometry-test/graph.py", line 2608, in draw_fn
    return nm.reduce(to_be_intersected, existing_points)
  File "/home/chi/alphageometry-test/numericals.py", line 1310, in reduce
    result = a.intersect(b)
  File "/home/chi/alphageometry-test/numericals.py", line 215, in intersect
    return line_circle_intersection(self, obj)
  File "/home/chi/alphageometry-test/numericals.py", line 544, in line_circle_intersection
    raise InvalidQuadSolveError()
numericals.InvalidQuadSolveError
"

I0124 00:44:29.989505 139966267543552 alphageometry.py:566] LM output (score=-5.188153): "g : C b c g 10 T b c d g 11 ;"
I0124 00:44:29.989536 139966267543552 alphageometry.py:567] Translation: "ERROR: point g already exists."

I0124 00:44:29.989565 139966267543552 alphageometry.py:566] LM output (score=-5.252155): "i : C h f i 10 D f g g i 11 ;"
I0124 00:44:29.989593 139966267543552 alphageometry.py:567] Translation: "i = on_line i h f, on_circle i g f"

I0124 00:44:29.989624 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_line i h f, on_circle i g f ? cong b e a g"
I0124 00:44:29.989755 139966267543552 graph.py:498] 
I0124 00:44:29.989805 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_line i h f, on_circle i g f ? cong b e a g
I0124 00:44:30.134422 139966267543552 ddar.py:60] Depth 1/1000 time = 0.13525962829589844
I0124 00:44:30.768711 139966267543552 ddar.py:60] Depth 2/1000 time = 0.6341803073883057
I0124 00:44:31.681392 139966267543552 ddar.py:60] Depth 3/1000 time = 0.9125020503997803
I0124 00:44:32.560180 139966267543552 ddar.py:60] Depth 4/1000 time = 0.8786013126373291
I0124 00:44:33.441720 139966267543552 ddar.py:60] Depth 5/1000 time = 0.881216287612915
I0124 00:44:34.335675 139966267543552 ddar.py:60] Depth 6/1000 time = 0.8901276588439941
I0124 00:44:34.336158 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:44:34.336218 139966267543552 alphageometry.py:566] LM output (score=-5.293779): "i : C b h i 10 D b i h i 11 ;"
I0124 00:44:34.336253 139966267543552 alphageometry.py:567] Translation: "i = on_line i b h, on_bline i h b"

I0124 00:44:34.336288 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_line i b h, on_bline i h b ? cong b e a g"
I0124 00:44:34.336423 139966267543552 graph.py:498] 
I0124 00:44:34.336478 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_line i b h, on_bline i h b ? cong b e a g
I0124 00:44:34.483218 139966267543552 ddar.py:60] Depth 1/1000 time = 0.13643527030944824
I0124 00:44:34.812099 139966267543552 ddar.py:60] Depth 2/1000 time = 0.3287947177886963
I0124 00:44:35.578309 139966267543552 ddar.py:60] Depth 3/1000 time = 0.766089916229248
I0124 00:44:36.347195 139966267543552 ddar.py:60] Depth 4/1000 time = 0.768709659576416
I0124 00:44:37.111040 139966267543552 ddar.py:60] Depth 5/1000 time = 0.7635402679443359
I0124 00:44:37.114018 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:44:37.114072 139966267543552 alphageometry.py:566] LM output (score=-5.295819): "i : D d f d i 10 T c d f i 11 ;"
I0124 00:44:37.114108 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d f, on_tline i f c d"

I0124 00:44:37.114145 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_circle i d f, on_tline i f c d ? cong b e a g"
I0124 00:44:37.114265 139966267543552 graph.py:498] 
I0124 00:44:37.114313 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_circle i d f, on_tline i f c d ? cong b e a g
I0124 00:44:37.380729 139966267543552 ddar.py:60] Depth 1/1000 time = 0.2547602653503418
I0124 00:44:38.137998 139966267543552 ddar.py:60] Depth 2/1000 time = 0.7571535110473633
I0124 00:44:39.400650 139966267543552 ddar.py:60] Depth 3/1000 time = 1.2624783515930176
I0124 00:44:40.635626 139966267543552 ddar.py:60] Depth 4/1000 time = 1.234802007675171
I0124 00:44:41.540877 139966267543552 ddar.py:60] Depth 5/1000 time = 0.904944658279419
I0124 00:44:42.725905 139966267543552 ddar.py:60] Depth 6/1000 time = 1.1814701557159424
I0124 00:44:43.915454 139966267543552 ddar.py:60] Depth 7/1000 time = 1.1826989650726318
I0124 00:44:43.916141 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:44:43.916195 139966267543552 alphageometry.py:566] LM output (score=-5.298843): "i : D d i d h 10 T a b d i 11 ;"
I0124 00:44:43.916229 139966267543552 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0124 00:44:43.916266 139966267543552 alphageometry.py:566] LM output (score=-5.305797): "i : T b c d i 10 ;"
I0124 00:44:43.916318 139966267543552 alphageometry.py:567] Translation: "i = on_tline i d b c"

I0124 00:44:43.916352 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_tline i d b c ? cong b e a g"
I0124 00:44:43.916469 139966267543552 graph.py:498] 
I0124 00:44:43.916518 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_tline i d b c ? cong b e a g
I0124 00:44:44.030974 139966267543552 ddar.py:60] Depth 1/1000 time = 0.1042788028717041
I0124 00:44:44.589428 139966267543552 ddar.py:60] Depth 2/1000 time = 0.5583558082580566
I0124 00:44:45.337219 139966267543552 ddar.py:60] Depth 3/1000 time = 0.7476189136505127
I0124 00:44:45.779695 139966267543552 ddar.py:60] Depth 4/1000 time = 0.44231557846069336
I0124 00:44:46.499527 139966267543552 ddar.py:60] Depth 5/1000 time = 0.7181551456451416
I0124 00:44:46.501802 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:44:46.501855 139966267543552 alphageometry.py:566] LM output (score=-5.343591): "i : D d i d e 10 ;"
I0124 00:44:46.501890 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e"

I0124 00:44:46.501927 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_circle i d e ? cong b e a g"
I0124 00:44:46.502044 139966267543552 graph.py:498] 
I0124 00:44:46.502090 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_circle i d e ? cong b e a g
I0124 00:44:46.720737 139966267543552 ddar.py:60] Depth 1/1000 time = 0.21074390411376953
I0124 00:44:47.390323 139966267543552 ddar.py:60] Depth 2/1000 time = 0.6694767475128174
I0124 00:44:48.361630 139966267543552 ddar.py:60] Depth 3/1000 time = 0.97113037109375
I0124 00:44:49.335793 139966267543552 ddar.py:60] Depth 4/1000 time = 0.9739663600921631
I0124 00:44:50.023901 139966267543552 ddar.py:60] Depth 5/1000 time = 0.6877782344818115
I0124 00:44:50.029344 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:44:50.029417 139966267543552 alphageometry.py:566] LM output (score=-5.361005): "e : C b c e 10 T b c d e 11 ;"
I0124 00:44:50.029453 139966267543552 alphageometry.py:567] Translation: "ERROR: point e already exists."

I0124 00:44:50.029494 139966267543552 alphageometry.py:566] LM output (score=-5.368064): "i : D d i d e 10 P b c c i 11 ;"
I0124 00:44:50.029523 139966267543552 alphageometry.py:567] Translation: "ERROR: Invalid predicate P b c c i"

I0124 00:44:50.029552 139966267543552 alphageometry.py:566] LM output (score=-5.375546): "i : C e f i 10 D c f c i 11 ;"
I0124 00:44:50.029577 139966267543552 alphageometry.py:567] Translation: "i = on_line i e f, on_circle i c f"

I0124 00:44:50.029608 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_line i e f, on_circle i c f ? cong b e a g"
I0124 00:44:50.029755 139966267543552 graph.py:498] 
I0124 00:44:50.029810 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_line i e f, on_circle i c f ? cong b e a g
I0124 00:44:50.522392 139966267543552 ddar.py:60] Depth 1/1000 time = 0.4828300476074219
I0124 00:44:51.313447 139966267543552 ddar.py:60] Depth 2/1000 time = 0.7908821105957031
I0124 00:44:52.595031 139966267543552 ddar.py:60] Depth 3/1000 time = 1.281383991241455
I0124 00:44:53.863670 139966267543552 ddar.py:60] Depth 4/1000 time = 1.2684576511383057
I0124 00:44:55.142632 139966267543552 ddar.py:60] Depth 5/1000 time = 1.2786600589752197
I0124 00:44:56.149306 139966267543552 ddar.py:60] Depth 6/1000 time = 1.005342960357666
I0124 00:44:56.150881 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:44:56.150937 139966267543552 alphageometry.py:566] LM output (score=-5.386115): "f : C b c f 10 T b c d f 11 ;"
I0124 00:44:56.150973 139966267543552 alphageometry.py:567] Translation: "ERROR: point f already exists."

I0124 00:44:56.151008 139966267543552 alphageometry.py:566] LM output (score=-5.407218): "i : T a c h i 10 T a i c d 11 ;"
I0124 00:44:56.151036 139966267543552 alphageometry.py:567] Translation: "i = on_tline i h a c, on_tline i a c d"

I0124 00:44:56.151067 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_tline i h a c, on_tline i a c d ? cong b e a g"
I0124 00:44:56.151189 139966267543552 graph.py:498] 
I0124 00:44:56.151237 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_tline i h a c, on_tline i a c d ? cong b e a g
I0124 00:44:56.299906 139966267543552 ddar.py:60] Depth 1/1000 time = 0.13812899589538574
I0124 00:44:56.981615 139966267543552 ddar.py:60] Depth 2/1000 time = 0.6816098690032959
I0124 00:44:57.929625 139966267543552 ddar.py:60] Depth 3/1000 time = 0.9478278160095215
I0124 00:44:59.747133 139966267543552 ddar.py:60] Depth 4/1000 time = 1.8173151016235352
I0124 00:45:01.217701 139966267543552 ddar.py:60] Depth 5/1000 time = 1.470379114151001
I0124 00:45:02.937933 139966267543552 ddar.py:60] Depth 6/1000 time = 1.7200589179992676
I0124 00:45:04.413945 139966267543552 ddar.py:60] Depth 7/1000 time = 1.475663661956787
I0124 00:45:04.424910 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:45:04.424967 139966267543552 alphageometry.py:566] LM output (score=-5.435508): "i : D d e d i 10 T h e h i 11 ;"
I0124 00:45:04.425003 139966267543552 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0124 00:45:04.425040 139966267543552 alphageometry.py:566] LM output (score=-5.467356): "i : D c i d i 10 D c i h i 11 ;"
I0124 00:45:04.425068 139966267543552 alphageometry.py:567] Translation: "i = on_bline i d c, on_bline i h c"

I0124 00:45:04.425098 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_bline i d c, on_bline i h c ? cong b e a g"
I0124 00:45:04.425217 139966267543552 graph.py:498] 
I0124 00:45:04.425263 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_bline i d c, on_bline i h c ? cong b e a g
I0124 00:45:04.689534 139966267543552 ddar.py:60] Depth 1/1000 time = 0.24917149543762207
I0124 00:45:05.312653 139966267543552 ddar.py:60] Depth 2/1000 time = 0.6229944229125977
I0124 00:45:06.122569 139966267543552 ddar.py:60] Depth 3/1000 time = 0.8097484111785889
I0124 00:45:06.633895 139966267543552 ddar.py:60] Depth 4/1000 time = 0.5111706256866455
I0124 00:45:07.410942 139966267543552 ddar.py:60] Depth 5/1000 time = 0.7768034934997559
I0124 00:45:08.232036 139966267543552 ddar.py:60] Depth 6/1000 time = 0.8207855224609375
I0124 00:45:09.072344 139966267543552 ddar.py:60] Depth 7/1000 time = 0.8400743007659912
I0124 00:45:09.076312 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:45:09.076388 139966267543552 alphageometry.py:566] LM output (score=-5.559099): "i : C h f i 10 D h i h i 11 ;"
I0124 00:45:09.076424 139966267543552 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2570, in add_clause
    raise DepCheckFailError(
graph.DepCheckFailError: diff h h
"

I0124 00:45:09.076472 139966267543552 alphageometry.py:566] LM output (score=-5.566641): "i : T a c h i 10 ;"
I0124 00:45:09.076500 139966267543552 alphageometry.py:567] Translation: "i = on_tline i h a c"

I0124 00:45:09.076535 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_tline i h a c ? cong b e a g"
I0124 00:45:09.076668 139966267543552 graph.py:498] 
I0124 00:45:09.076721 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a c, on_tline h d a c; i = on_tline i h a c ? cong b e a g
I0124 00:45:09.208468 139966267543552 ddar.py:60] Depth 1/1000 time = 0.12457776069641113
I0124 00:45:09.879766 139966267543552 ddar.py:60] Depth 2/1000 time = 0.6712009906768799
I0124 00:45:10.419868 139966267543552 ddar.py:60] Depth 3/1000 time = 0.5399363040924072
I0124 00:45:11.213606 139966267543552 ddar.py:60] Depth 4/1000 time = 0.7935683727264404
I0124 00:45:12.299440 139966267543552 ddar.py:60] Depth 5/1000 time = 1.0855307579040527
I0124 00:45:12.301573 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:45:12.301632 139966267543552 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : D d e d h 08 T b c d h 09 ; x00
I0124 00:45:19.573619 139966267543552 alphageometry.py:566] LM output (score=-0.048089): "i : C a c i 10 T a c d i 11 ;"
I0124 00:45:19.573784 139966267543552 alphageometry.py:567] Translation: "i = on_line i a c, on_tline i d a c"

I0124 00:45:19.573828 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i a c, on_tline i d a c ? cong b e a g"
I0124 00:45:19.573950 139966267543552 graph.py:498] 
I0124 00:45:19.573999 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i a c, on_tline i d a c ? cong b e a g
I0124 00:45:19.813184 139966267543552 ddar.py:60] Depth 1/1000 time = 0.22640419006347656
I0124 00:45:20.546485 139966267543552 ddar.py:60] Depth 2/1000 time = 0.7331929206848145
I0124 00:45:21.333570 139966267543552 ddar.py:60] Depth 3/1000 time = 0.7869141101837158
I0124 00:45:22.349735 139966267543552 ddar.py:60] Depth 4/1000 time = 1.0159990787506104
I0124 00:45:23.382946 139966267543552 ddar.py:60] Depth 5/1000 time = 1.0328996181488037
I0124 00:45:24.483569 139966267543552 ddar.py:60] Depth 6/1000 time = 1.0990571975708008
I0124 00:45:25.698900 139966267543552 ddar.py:60] Depth 7/1000 time = 1.2151339054107666
I0124 00:45:27.320116 139966267543552 ddar.py:60] Depth 8/1000 time = 1.6210370063781738
I0124 00:45:28.733328 139966267543552 ddar.py:60] Depth 9/1000 time = 1.4130229949951172
I0124 00:45:30.238586 139966267543552 ddar.py:60] Depth 10/1000 time = 1.5050296783447266
I0124 00:45:31.796135 139966267543552 ddar.py:60] Depth 11/1000 time = 1.5573694705963135
I0124 00:45:33.822247 139966267543552 ddar.py:60] Depth 12/1000 time = 2.025933027267456
I0124 00:45:36.126455 139966267543552 ddar.py:60] Depth 13/1000 time = 2.3040223121643066
I0124 00:45:36.145105 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:45:36.145163 139966267543552 alphageometry.py:566] LM output (score=-1.185691): "i : D d i d h 10 T a c d i 11 ;"
I0124 00:45:36.145199 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d h, on_tline i d a c"

I0124 00:45:36.145236 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_circle i d h, on_tline i d a c ? cong b e a g"
I0124 00:45:36.145361 139966267543552 graph.py:498] 
I0124 00:45:36.145408 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_circle i d h, on_tline i d a c ? cong b e a g
I0124 00:45:36.444760 139966267543552 ddar.py:60] Depth 1/1000 time = 0.28604960441589355
I0124 00:45:36.925875 139966267543552 ddar.py:60] Depth 2/1000 time = 0.48102474212646484
I0124 00:45:37.666286 139966267543552 ddar.py:60] Depth 3/1000 time = 0.7403016090393066
I0124 00:45:38.128725 139966267543552 ddar.py:60] Depth 4/1000 time = 0.46227455139160156
I0124 00:45:38.869228 139966267543552 ddar.py:60] Depth 5/1000 time = 0.7402803897857666
I0124 00:45:39.777399 139966267543552 ddar.py:60] Depth 6/1000 time = 0.9049046039581299
I0124 00:45:40.623247 139966267543552 ddar.py:60] Depth 7/1000 time = 0.8456771373748779
I0124 00:45:41.858818 139966267543552 ddar.py:60] Depth 8/1000 time = 1.2354066371917725
I0124 00:45:43.115887 139966267543552 ddar.py:60] Depth 9/1000 time = 1.25687837600708
I0124 00:45:44.364913 139966267543552 ddar.py:60] Depth 10/1000 time = 1.2356367111206055
I0124 00:45:45.313660 139966267543552 ddar.py:60] Depth 11/1000 time = 0.9465556144714355
I0124 00:45:45.313838 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:45:45.313900 139966267543552 alphageometry.py:566] LM output (score=-2.960520): "i : C h f i 10 D h i f i 11 ;"
I0124 00:45:45.313936 139966267543552 alphageometry.py:567] Translation: "i = on_line i h f, on_bline i f h"

I0124 00:45:45.313976 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i h f, on_bline i f h ? cong b e a g"
I0124 00:45:45.314112 139966267543552 graph.py:498] 
I0124 00:45:45.314167 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i h f, on_bline i f h ? cong b e a g
I0124 00:45:45.835712 139966267543552 ddar.py:60] Depth 1/1000 time = 0.5094683170318604
I0124 00:45:46.182107 139966267543552 ddar.py:60] Depth 2/1000 time = 0.34619736671447754
I0124 00:45:46.852320 139966267543552 ddar.py:60] Depth 3/1000 time = 0.6700241565704346
I0124 00:45:47.529533 139966267543552 ddar.py:60] Depth 4/1000 time = 0.6768991947174072
I0124 00:45:48.256787 139966267543552 ddar.py:60] Depth 5/1000 time = 0.7246026992797852
I0124 00:45:48.257539 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:45:48.257597 139966267543552 alphageometry.py:566] LM output (score=-3.611312): "i : D d h d i 10 T a c d i 11 ;"
I0124 00:45:48.257633 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d h, on_tline i d a c"

I0124 00:45:48.257677 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_circle i d h, on_tline i d a c ? cong b e a g"
I0124 00:45:48.257833 139966267543552 graph.py:498] 
I0124 00:45:48.257881 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_circle i d h, on_tline i d a c ? cong b e a g
I0124 00:45:48.557740 139966267543552 ddar.py:60] Depth 1/1000 time = 0.2859334945678711
I0124 00:45:48.969095 139966267543552 ddar.py:60] Depth 2/1000 time = 0.4112696647644043
I0124 00:45:49.702094 139966267543552 ddar.py:60] Depth 3/1000 time = 0.7328841686248779
I0124 00:45:50.148312 139966267543552 ddar.py:60] Depth 4/1000 time = 0.4460422992706299
I0124 00:45:50.882045 139966267543552 ddar.py:60] Depth 5/1000 time = 0.7335124015808105
I0124 00:45:51.447484 139966267543552 ddar.py:60] Depth 6/1000 time = 0.5631701946258545
I0124 00:45:52.439717 139966267543552 ddar.py:60] Depth 7/1000 time = 0.9920840263366699
I0124 00:45:53.448454 139966267543552 ddar.py:60] Depth 8/1000 time = 1.0085489749908447
I0124 00:45:54.480413 139966267543552 ddar.py:60] Depth 9/1000 time = 1.0197205543518066
I0124 00:45:54.480595 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:45:54.480642 139966267543552 alphageometry.py:566] LM output (score=-4.216526): "i : C e h i 10 D e i h i 11 ;"
I0124 00:45:54.480676 139966267543552 alphageometry.py:567] Translation: "i = on_line i e h, on_bline i h e"

I0124 00:45:54.480710 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i e h, on_bline i h e ? cong b e a g"
I0124 00:45:54.480829 139966267543552 graph.py:498] 
I0124 00:45:54.480877 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i e h, on_bline i h e ? cong b e a g
I0124 00:45:54.713191 139966267543552 ddar.py:60] Depth 1/1000 time = 0.22018957138061523
I0124 00:45:55.371139 139966267543552 ddar.py:60] Depth 2/1000 time = 0.6578285694122314
I0124 00:45:55.754079 139966267543552 ddar.py:60] Depth 3/1000 time = 0.38277149200439453
I0124 00:45:56.436254 139966267543552 ddar.py:60] Depth 4/1000 time = 0.6819145679473877
I0124 00:45:57.160917 139966267543552 ddar.py:60] Depth 5/1000 time = 0.7222156524658203
I0124 00:45:57.161689 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:45:57.161744 139966267543552 alphageometry.py:566] LM output (score=-4.634122): "i : C f h i 10 D f i h i 11 ;"
I0124 00:45:57.161779 139966267543552 alphageometry.py:567] Translation: "i = on_line i f h, on_bline i h f"

I0124 00:45:57.161815 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i f h, on_bline i h f ? cong b e a g"
I0124 00:45:57.161938 139966267543552 graph.py:498] 
I0124 00:45:57.161986 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i f h, on_bline i h f ? cong b e a g
I0124 00:45:57.387933 139966267543552 ddar.py:60] Depth 1/1000 time = 0.21387052536010742
I0124 00:45:58.055181 139966267543552 ddar.py:60] Depth 2/1000 time = 0.6671457290649414
I0124 00:45:58.437231 139966267543552 ddar.py:60] Depth 3/1000 time = 0.3818843364715576
I0124 00:45:59.123199 139966267543552 ddar.py:60] Depth 4/1000 time = 0.6857259273529053
I0124 00:45:59.857958 139966267543552 ddar.py:60] Depth 5/1000 time = 0.7321012020111084
I0124 00:45:59.858855 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:45:59.858909 139966267543552 alphageometry.py:566] LM output (score=-4.713733): "i : C h f i 10 D h f h i 11 ;"
I0124 00:45:59.858944 139966267543552 alphageometry.py:567] Translation: "i = on_line i h f, on_circle i h f"

I0124 00:45:59.858981 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i h f, on_circle i h f ? cong b e a g"
I0124 00:45:59.859103 139966267543552 graph.py:498] 
I0124 00:45:59.859152 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i h f, on_circle i h f ? cong b e a g
I0124 00:46:00.077971 139966267543552 ddar.py:60] Depth 1/1000 time = 0.20683503150939941
I0124 00:46:00.407782 139966267543552 ddar.py:60] Depth 2/1000 time = 0.32972097396850586
I0124 00:46:01.067366 139966267543552 ddar.py:60] Depth 3/1000 time = 0.6594657897949219
I0124 00:46:01.736113 139966267543552 ddar.py:60] Depth 4/1000 time = 0.6684529781341553
I0124 00:46:02.141650 139966267543552 ddar.py:60] Depth 5/1000 time = 0.40302133560180664
I0124 00:46:02.142282 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:46:02.142334 139966267543552 alphageometry.py:566] LM output (score=-4.747191): "i : C d h i 10 D d h d i 11 ;"
I0124 00:46:02.142369 139966267543552 alphageometry.py:567] Translation: "i = on_line i d h, on_circle i d h"

I0124 00:46:02.142405 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i d h, on_circle i d h ? cong b e a g"
I0124 00:46:02.142528 139966267543552 graph.py:498] 
I0124 00:46:02.142576 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i d h, on_circle i d h ? cong b e a g
I0124 00:46:02.782622 139966267543552 ddar.py:60] Depth 1/1000 time = 0.6298911571502686
I0124 00:46:04.026719 139966267543552 ddar.py:60] Depth 2/1000 time = 1.2439193725585938
I0124 00:46:04.785948 139966267543552 ddar.py:60] Depth 3/1000 time = 0.7590541839599609
I0124 00:46:05.837563 139966267543552 ddar.py:60] Depth 4/1000 time = 1.0513391494750977
I0124 00:46:06.945106 139966267543552 ddar.py:60] Depth 5/1000 time = 1.1043963432312012
I0124 00:46:06.945620 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:46:06.945676 139966267543552 alphageometry.py:566] LM output (score=-4.971588): "i : C a h i 10 D a h a i 11 ;"
I0124 00:46:06.945712 139966267543552 alphageometry.py:567] Translation: "i = on_line i a h, on_circle i a h"

I0124 00:46:06.945749 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i a h, on_circle i a h ? cong b e a g"
I0124 00:46:06.945869 139966267543552 graph.py:498] 
I0124 00:46:06.945917 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i a h, on_circle i a h ? cong b e a g
I0124 00:46:07.163754 139966267543552 ddar.py:60] Depth 1/1000 time = 0.20600605010986328
I0124 00:46:07.711487 139966267543552 ddar.py:60] Depth 2/1000 time = 0.5476212501525879
I0124 00:46:07.974585 139966267543552 ddar.py:60] Depth 3/1000 time = 0.2629263401031494
I0124 00:46:08.535886 139966267543552 ddar.py:60] Depth 4/1000 time = 0.5610613822937012
I0124 00:46:08.812775 139966267543552 ddar.py:60] Depth 5/1000 time = 0.2745320796966553
I0124 00:46:08.812872 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:46:08.812917 139966267543552 alphageometry.py:566] LM output (score=-5.016266): "i : C h f i 10 D h i h i 11 ;"
I0124 00:46:08.812952 139966267543552 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2570, in add_clause
    raise DepCheckFailError(
graph.DepCheckFailError: diff h h
"

I0124 00:46:08.812986 139966267543552 alphageometry.py:566] LM output (score=-5.168593): "h : C a c h 10 T a c d h 11 ;"
I0124 00:46:08.813015 139966267543552 alphageometry.py:567] Translation: "ERROR: point h already exists."

I0124 00:46:08.813044 139966267543552 alphageometry.py:566] LM output (score=-5.235134): "i : C h f i 10 D f g g i 11 ;"
I0124 00:46:08.813070 139966267543552 alphageometry.py:567] Translation: "i = on_line i h f, on_circle i g f"

I0124 00:46:08.813101 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i h f, on_circle i g f ? cong b e a g"
I0124 00:46:08.813220 139966267543552 graph.py:498] 
I0124 00:46:08.813266 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i h f, on_circle i g f ? cong b e a g
I0124 00:46:09.332109 139966267543552 ddar.py:60] Depth 1/1000 time = 0.5077164173126221
I0124 00:46:09.622215 139966267543552 ddar.py:60] Depth 2/1000 time = 0.2899441719055176
I0124 00:46:10.231779 139966267543552 ddar.py:60] Depth 3/1000 time = 0.6094460487365723
I0124 00:46:10.546480 139966267543552 ddar.py:60] Depth 4/1000 time = 0.3144228458404541
I0124 00:46:11.190722 139966267543552 ddar.py:60] Depth 5/1000 time = 0.6409571170806885
I0124 00:46:11.190906 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:46:11.190953 139966267543552 alphageometry.py:566] LM output (score=-5.251453): "i : D d e d i 10 T a c d i 11 ;"
I0124 00:46:11.190987 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e, on_tline i d a c"

I0124 00:46:11.191022 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_circle i d e, on_tline i d a c ? cong b e a g"
I0124 00:46:11.191144 139966267543552 graph.py:498] 
I0124 00:46:11.191193 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_circle i d e, on_tline i d a c ? cong b e a g
I0124 00:46:11.440405 139966267543552 ddar.py:60] Depth 1/1000 time = 0.23598456382751465
I0124 00:46:12.155113 139966267543552 ddar.py:60] Depth 2/1000 time = 0.7145960330963135
I0124 00:46:12.622581 139966267543552 ddar.py:60] Depth 3/1000 time = 0.4672982692718506
I0124 00:46:13.393392 139966267543552 ddar.py:60] Depth 4/1000 time = 0.7706794738769531
I0124 00:46:13.865493 139966267543552 ddar.py:60] Depth 5/1000 time = 0.47181034088134766
I0124 00:46:14.793623 139966267543552 ddar.py:60] Depth 6/1000 time = 0.9246976375579834
I0124 00:46:16.031779 139966267543552 ddar.py:60] Depth 7/1000 time = 1.2379186153411865
I0124 00:46:17.048813 139966267543552 ddar.py:60] Depth 8/1000 time = 1.0167646408081055
I0124 00:46:18.406012 139966267543552 ddar.py:60] Depth 9/1000 time = 1.357015609741211
I0124 00:46:19.674988 139966267543552 ddar.py:60] Depth 10/1000 time = 1.255039930343628
I0124 00:46:20.925889 139966267543552 ddar.py:60] Depth 11/1000 time = 1.2487459182739258
I0124 00:46:20.926068 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:46:20.926135 139966267543552 alphageometry.py:566] LM output (score=-5.251678): "i : T a c d i 10 T a i c d 11 ;"
I0124 00:46:20.926169 139966267543552 alphageometry.py:567] Translation: "i = on_tline i d a c, on_tline i a c d"

I0124 00:46:20.926203 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_tline i d a c, on_tline i a c d ? cong b e a g"
I0124 00:46:20.926334 139966267543552 graph.py:498] 
I0124 00:46:20.926391 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_tline i d a c, on_tline i a c d ? cong b e a g
I0124 00:46:21.129303 139966267543552 ddar.py:60] Depth 1/1000 time = 0.18726253509521484
I0124 00:46:21.415289 139966267543552 ddar.py:60] Depth 2/1000 time = 0.28589749336242676
I0124 00:46:22.021495 139966267543552 ddar.py:60] Depth 3/1000 time = 0.6061007976531982
I0124 00:46:22.315202 139966267543552 ddar.py:60] Depth 4/1000 time = 0.29099035263061523
I0124 00:46:22.987513 139966267543552 ddar.py:60] Depth 5/1000 time = 0.6689620018005371
I0124 00:46:22.987693 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:46:22.987739 139966267543552 alphageometry.py:566] LM output (score=-5.307256): "i : D d i d e 10 T a c d i 11 ;"
I0124 00:46:22.987773 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e, on_tline i d a c"

I0124 00:46:22.987810 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_circle i d e, on_tline i d a c ? cong b e a g"
I0124 00:46:22.987932 139966267543552 graph.py:498] 
I0124 00:46:22.987980 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_circle i d e, on_tline i d a c ? cong b e a g
I0124 00:46:23.239370 139966267543552 ddar.py:60] Depth 1/1000 time = 0.2376554012298584
I0124 00:46:23.651026 139966267543552 ddar.py:60] Depth 2/1000 time = 0.4115614891052246
I0124 00:46:24.427510 139966267543552 ddar.py:60] Depth 3/1000 time = 0.7763690948486328
I0124 00:46:24.900855 139966267543552 ddar.py:60] Depth 4/1000 time = 0.4731779098510742
I0124 00:46:25.687072 139966267543552 ddar.py:60] Depth 5/1000 time = 0.7859909534454346
I0124 00:46:26.292128 139966267543552 ddar.py:60] Depth 6/1000 time = 0.6030588150024414
I0124 00:46:27.343371 139966267543552 ddar.py:60] Depth 7/1000 time = 1.0510857105255127
I0124 00:46:28.407518 139966267543552 ddar.py:60] Depth 8/1000 time = 1.0639581680297852
I0124 00:46:29.148013 139966267543552 ddar.py:60] Depth 9/1000 time = 0.7282137870788574
I0124 00:46:29.148172 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:46:29.148217 139966267543552 alphageometry.py:566] LM output (score=-5.392922): "i : C a c i 10 D d i d h 11 ;"
I0124 00:46:29.148251 139966267543552 alphageometry.py:567] Translation: "i = on_line i a c, on_circle i d h"

I0124 00:46:29.148287 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i a c, on_circle i d h ? cong b e a g"
I0124 00:46:29.148406 139966267543552 graph.py:498] 
I0124 00:46:29.148455 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i a c, on_circle i d h ? cong b e a g
I0124 00:46:29.766033 139966267543552 ddar.py:60] Depth 1/1000 time = 0.6078906059265137
I0124 00:46:30.249550 139966267543552 ddar.py:60] Depth 2/1000 time = 0.4833528995513916
I0124 00:46:31.023975 139966267543552 ddar.py:60] Depth 3/1000 time = 0.7742860317230225
I0124 00:46:31.473980 139966267543552 ddar.py:60] Depth 4/1000 time = 0.4498281478881836
I0124 00:46:32.249128 139966267543552 ddar.py:60] Depth 5/1000 time = 0.7748751640319824
I0124 00:46:32.724415 139966267543552 ddar.py:60] Depth 6/1000 time = 0.4705023765563965
I0124 00:46:32.724538 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:46:32.724583 139966267543552 alphageometry.py:566] LM output (score=-5.403439): "i : P a c a i 10 T a c d i 11 ;"
I0124 00:46:32.724617 139966267543552 alphageometry.py:567] Translation: "ERROR: Invalid predicate P a c a i"

I0124 00:46:32.724651 139966267543552 alphageometry.py:566] LM output (score=-5.416162): "i : C a c i 10 D d i d h 11 T a c d i 12 ;"
I0124 00:46:32.724679 139966267543552 alphageometry.py:567] Translation: "ERROR: there cannot be more than two predicates."

I0124 00:46:32.724707 139966267543552 alphageometry.py:566] LM output (score=-5.424934): "i : C a d i 10 D a i d i 11 ;"
I0124 00:46:32.724733 139966267543552 alphageometry.py:567] Translation: "i = on_line i a d, on_bline i d a"

I0124 00:46:32.724762 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i a d, on_bline i d a ? cong b e a g"
I0124 00:46:32.724881 139966267543552 graph.py:498] 
I0124 00:46:32.724927 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i a d, on_bline i d a ? cong b e a g
I0124 00:46:33.258849 139966267543552 ddar.py:60] Depth 1/1000 time = 0.5220179557800293
I0124 00:46:33.554288 139966267543552 ddar.py:60] Depth 2/1000 time = 0.29526376724243164
I0124 00:46:34.222688 139966267543552 ddar.py:60] Depth 3/1000 time = 0.6682839393615723
I0124 00:46:34.565457 139966267543552 ddar.py:60] Depth 4/1000 time = 0.3425922393798828
I0124 00:46:35.251749 139966267543552 ddar.py:60] Depth 5/1000 time = 0.6859455108642578
I0124 00:46:35.625462 139966267543552 ddar.py:60] Depth 6/1000 time = 0.3715028762817383
I0124 00:46:36.321748 139966267543552 ddar.py:60] Depth 7/1000 time = 0.6961588859558105
I0124 00:46:36.322946 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:46:36.323014 139966267543552 alphageometry.py:566] LM output (score=-5.433294): "i : C h f i 10 D h f f i 11 ;"
I0124 00:46:36.323050 139966267543552 alphageometry.py:567] Translation: "i = on_line i h f, on_circle i f h"

I0124 00:46:36.323087 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i h f, on_circle i f h ? cong b e a g"
I0124 00:46:36.323217 139966267543552 graph.py:498] 
I0124 00:46:36.323280 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i h f, on_circle i f h ? cong b e a g
I0124 00:46:36.535898 139966267543552 ddar.py:60] Depth 1/1000 time = 0.2006087303161621
I0124 00:46:37.138909 139966267543552 ddar.py:60] Depth 2/1000 time = 0.6028833389282227
I0124 00:46:37.426125 139966267543552 ddar.py:60] Depth 3/1000 time = 0.2870333194732666
I0124 00:46:38.042771 139966267543552 ddar.py:60] Depth 4/1000 time = 0.6163520812988281
I0124 00:46:38.361801 139966267543552 ddar.py:60] Depth 5/1000 time = 0.3169386386871338
I0124 00:46:38.361919 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:46:38.361966 139966267543552 alphageometry.py:566] LM output (score=-5.445171): "i : T a c d i 10 ;"
I0124 00:46:38.362000 139966267543552 alphageometry.py:567] Translation: "i = on_tline i d a c"

I0124 00:46:38.362036 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_tline i d a c ? cong b e a g"
I0124 00:46:38.362163 139966267543552 graph.py:498] 
I0124 00:46:38.362213 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_tline i d a c ? cong b e a g
I0124 00:46:38.539510 139966267543552 ddar.py:60] Depth 1/1000 time = 0.16526055335998535
I0124 00:46:39.075441 139966267543552 ddar.py:60] Depth 2/1000 time = 0.5358281135559082
I0124 00:46:39.316673 139966267543552 ddar.py:60] Depth 3/1000 time = 0.24106311798095703
I0124 00:46:39.881186 139966267543552 ddar.py:60] Depth 4/1000 time = 0.5643072128295898
I0124 00:46:40.129722 139966267543552 ddar.py:60] Depth 5/1000 time = 0.2468738555908203
I0124 00:46:40.393728 139966267543552 ddar.py:60] Depth 6/1000 time = 0.26180148124694824
I0124 00:46:40.393826 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:46:40.393872 139966267543552 alphageometry.py:566] LM output (score=-5.456863): "i : C f h i 10 D f h h i 11 ;"
I0124 00:46:40.393906 139966267543552 alphageometry.py:567] Translation: "i = on_line i f h, on_circle i h f"

I0124 00:46:40.393942 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i f h, on_circle i h f ? cong b e a g"
I0124 00:46:40.394062 139966267543552 graph.py:498] 
I0124 00:46:40.394110 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i f h, on_circle i h f ? cong b e a g
I0124 00:46:40.922806 139966267543552 ddar.py:60] Depth 1/1000 time = 0.5165140628814697
I0124 00:46:41.245505 139966267543552 ddar.py:60] Depth 2/1000 time = 0.3225383758544922
I0124 00:46:41.928329 139966267543552 ddar.py:60] Depth 3/1000 time = 0.6826989650726318
I0124 00:46:42.635864 139966267543552 ddar.py:60] Depth 4/1000 time = 0.7072269916534424
I0124 00:46:43.027321 139966267543552 ddar.py:60] Depth 5/1000 time = 0.38894104957580566
I0124 00:46:43.027917 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:46:43.027968 139966267543552 alphageometry.py:566] LM output (score=-5.495676): "i : C c f i 10 D c i f i 11 ;"
I0124 00:46:43.028003 139966267543552 alphageometry.py:567] Translation: "i = on_line i c f, on_bline i f c"

I0124 00:46:43.028039 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i c f, on_bline i f c ? cong b e a g"
I0124 00:46:43.028158 139966267543552 graph.py:498] 
I0124 00:46:43.028205 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i c f, on_bline i f c ? cong b e a g
I0124 00:46:43.624116 139966267543552 ddar.py:60] Depth 1/1000 time = 0.5834670066833496
I0124 00:46:44.331443 139966267543552 ddar.py:60] Depth 2/1000 time = 0.7071459293365479
I0124 00:46:45.052881 139966267543552 ddar.py:60] Depth 3/1000 time = 0.7212588787078857
I0124 00:46:45.441156 139966267543552 ddar.py:60] Depth 4/1000 time = 0.38795995712280273
I0124 00:46:46.160713 139966267543552 ddar.py:60] Depth 5/1000 time = 0.7173175811767578
I0124 00:46:46.161468 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:46:46.161520 139966267543552 alphageometry.py:566] LM output (score=-5.502200): "i : C f h i 10 D d h d i 11 ;"
I0124 00:46:46.161555 139966267543552 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0124 00:46:46.161600 139966267543552 alphageometry.py:566] LM output (score=-5.514319): "i : C a h i 10 D a i h i 11 ;"
I0124 00:46:46.161629 139966267543552 alphageometry.py:567] Translation: "i = on_line i a h, on_bline i h a"

I0124 00:46:46.161669 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i a h, on_bline i h a ? cong b e a g"
I0124 00:46:46.161789 139966267543552 graph.py:498] 
I0124 00:46:46.161836 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i a h, on_bline i h a ? cong b e a g
I0124 00:46:46.699984 139966267543552 ddar.py:60] Depth 1/1000 time = 0.5259184837341309
I0124 00:46:46.960173 139966267543552 ddar.py:60] Depth 2/1000 time = 0.2600255012512207
I0124 00:46:47.549399 139966267543552 ddar.py:60] Depth 3/1000 time = 0.5890896320343018
I0124 00:46:47.816294 139966267543552 ddar.py:60] Depth 4/1000 time = 0.2665860652923584
I0124 00:46:48.098867 139966267543552 ddar.py:60] Depth 5/1000 time = 0.2803969383239746
I0124 00:46:48.098959 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:46:48.099004 139966267543552 alphageometry.py:566] LM output (score=-5.529291): "i : P a c c i 10 T a c d i 11 ;"
I0124 00:46:48.099038 139966267543552 alphageometry.py:567] Translation: "ERROR: Invalid predicate P a c c i"

I0124 00:46:48.099071 139966267543552 alphageometry.py:566] LM output (score=-5.575905): "i : C h e i 10 D h i e i 11 ;"
I0124 00:46:48.099099 139966267543552 alphageometry.py:567] Translation: "i = on_line i h e, on_bline i e h"

I0124 00:46:48.099129 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i h e, on_bline i e h ? cong b e a g"
I0124 00:46:48.099246 139966267543552 graph.py:498] 
I0124 00:46:48.099293 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i h e, on_bline i e h ? cong b e a g
I0124 00:46:48.631712 139966267543552 ddar.py:60] Depth 1/1000 time = 0.520587682723999
I0124 00:46:48.980225 139966267543552 ddar.py:60] Depth 2/1000 time = 0.34834742546081543
I0124 00:46:49.668694 139966267543552 ddar.py:60] Depth 3/1000 time = 0.6883277893066406
I0124 00:46:50.385065 139966267543552 ddar.py:60] Depth 4/1000 time = 0.7160651683807373
I0124 00:46:50.792365 139966267543552 ddar.py:60] Depth 5/1000 time = 0.4048736095428467
I0124 00:46:50.793064 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:46:50.793117 139966267543552 alphageometry.py:566] LM output (score=-5.645514): "i : D d h d i 10 T d h d i 11 ;"
I0124 00:46:50.793152 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d h, on_tline i d d h"

I0124 00:46:50.793189 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_circle i d h, on_tline i d d h ? cong b e a g"
I0124 00:46:50.793327 139966267543552 graph.py:498] 
I0124 00:46:50.793377 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_circle i d h, on_tline i d d h ? cong b e a g
I0124 00:46:51.407994 139966267543552 ddar.py:60] Depth 1/1000 time = 0.600426197052002
I0124 00:46:51.799637 139966267543552 ddar.py:60] Depth 2/1000 time = 0.3914833068847656
I0124 00:46:52.585261 139966267543552 ddar.py:60] Depth 3/1000 time = 0.7855045795440674
I0124 00:46:53.035970 139966267543552 ddar.py:60] Depth 4/1000 time = 0.4505341053009033
I0124 00:46:53.831747 139966267543552 ddar.py:60] Depth 5/1000 time = 0.7954866886138916
I0124 00:46:54.303694 139966267543552 ddar.py:60] Depth 6/1000 time = 0.47091031074523926
I0124 00:46:54.787585 139966267543552 ddar.py:60] Depth 7/1000 time = 0.4782891273498535
I0124 00:46:54.787708 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:46:54.787777 139966267543552 alphageometry.py:566] LM output (score=-5.673298): "i : C h f i 10 D a h a i 11 ;"
I0124 00:46:54.787812 139966267543552 alphageometry.py:567] Translation: "i = on_line i h f, on_circle i a h"

I0124 00:46:54.787858 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i h f, on_circle i a h ? cong b e a g"
I0124 00:46:54.788000 139966267543552 graph.py:498] 
I0124 00:46:54.788054 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i h f, on_circle i a h ? cong b e a g
I0124 00:46:55.363973 139966267543552 ddar.py:60] Depth 1/1000 time = 0.5644192695617676
I0124 00:46:55.658890 139966267543552 ddar.py:60] Depth 2/1000 time = 0.29474663734436035
I0124 00:46:56.300777 139966267543552 ddar.py:60] Depth 3/1000 time = 0.6417467594146729
I0124 00:46:56.954571 139966267543552 ddar.py:60] Depth 4/1000 time = 0.6534876823425293
I0124 00:46:57.301010 139966267543552 ddar.py:60] Depth 5/1000 time = 0.34308505058288574
I0124 00:46:57.301142 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:46:57.301190 139966267543552 alphageometry.py:566] LM output (score=-5.679781): "i : C a b i 10 T c d h i 11 ;"
I0124 00:46:57.301224 139966267543552 alphageometry.py:567] Translation: "i = on_line i a b, on_tline i h c d"

I0124 00:46:57.301260 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i a b, on_tline i h c d ? cong b e a g"
I0124 00:46:57.301382 139966267543552 graph.py:498] 
I0124 00:46:57.301430 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i a b, on_tline i h c d ? cong b e a g
I0124 00:46:57.966816 139966267543552 ddar.py:60] Depth 1/1000 time = 0.6520845890045166
I0124 00:46:58.714660 139966267543552 ddar.py:60] Depth 2/1000 time = 0.7476663589477539
I0124 00:46:59.466732 139966267543552 ddar.py:60] Depth 3/1000 time = 0.751873254776001
I0124 00:47:00.226954 139966267543552 ddar.py:60] Depth 4/1000 time = 0.7599165439605713
I0124 00:47:01.030530 139966267543552 ddar.py:60] Depth 5/1000 time = 0.800039529800415
I0124 00:47:01.030720 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:47:01.030781 139966267543552 alphageometry.py:566] LM output (score=-5.743015): "i : C a f i 10 D a i f i 11 ;"
I0124 00:47:01.030818 139966267543552 alphageometry.py:567] Translation: "i = on_line i a f, on_bline i f a"

I0124 00:47:01.030855 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i a f, on_bline i f a ? cong b e a g"
I0124 00:47:01.030976 139966267543552 graph.py:498] 
I0124 00:47:01.031024 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i a f, on_bline i f a ? cong b e a g
I0124 00:47:01.594921 139966267543552 ddar.py:60] Depth 1/1000 time = 0.5514016151428223
I0124 00:47:02.004493 139966267543552 ddar.py:60] Depth 2/1000 time = 0.4094092845916748
I0124 00:47:02.793234 139966267543552 ddar.py:60] Depth 3/1000 time = 0.788599967956543
I0124 00:47:03.249468 139966267543552 ddar.py:60] Depth 4/1000 time = 0.45592713356018066
I0124 00:47:04.041874 139966267543552 ddar.py:60] Depth 5/1000 time = 0.7895205020904541
I0124 00:47:04.043230 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:47:04.043281 139966267543552 alphageometry.py:566] LM output (score=-5.799754): "i : C f h i 10 D d f d i 11 ;"
I0124 00:47:04.043316 139966267543552 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0124 00:47:04.043357 139966267543552 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : D d h d e 08 T b c d h 09 ; x00
I0124 00:47:12.507160 139966267543552 alphageometry.py:566] LM output (score=-0.017282): "i : C a c i 10 T a c d i 11 ;"
I0124 00:47:12.507323 139966267543552 alphageometry.py:567] Translation: "i = on_line i a c, on_tline i d a c"

I0124 00:47:12.507367 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i a c, on_tline i d a c ? cong b e a g"
I0124 00:47:12.507490 139966267543552 graph.py:498] 
I0124 00:47:12.507539 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i a c, on_tline i d a c ? cong b e a g
I0124 00:47:12.749162 139966267543552 ddar.py:60] Depth 1/1000 time = 0.2296733856201172
I0124 00:47:13.524231 139966267543552 ddar.py:60] Depth 2/1000 time = 0.7749471664428711
I0124 00:47:14.618057 139966267543552 ddar.py:60] Depth 3/1000 time = 1.093639850616455
I0124 00:47:15.335019 139966267543552 ddar.py:60] Depth 4/1000 time = 0.716789722442627
I0124 00:47:16.382307 139966267543552 ddar.py:60] Depth 5/1000 time = 1.0470082759857178
I0124 00:47:17.511012 139966267543552 ddar.py:60] Depth 6/1000 time = 1.1271631717681885
I0124 00:47:18.739549 139966267543552 ddar.py:60] Depth 7/1000 time = 1.2283470630645752
I0124 00:47:19.901660 139966267543552 ddar.py:60] Depth 8/1000 time = 1.161928653717041
I0124 00:47:21.303761 139966267543552 ddar.py:60] Depth 9/1000 time = 1.4019155502319336
I0124 00:47:22.815108 139966267543552 ddar.py:60] Depth 10/1000 time = 1.5111327171325684
I0124 00:47:24.371145 139966267543552 ddar.py:60] Depth 11/1000 time = 1.5558357238769531
I0124 00:47:26.739804 139966267543552 ddar.py:60] Depth 12/1000 time = 2.368466854095459
I0124 00:47:28.773885 139966267543552 ddar.py:60] Depth 13/1000 time = 2.0338869094848633
I0124 00:47:28.793419 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:47:28.793489 139966267543552 alphageometry.py:566] LM output (score=-1.799310): "i : D d h d i 10 T a c d i 11 ;"
I0124 00:47:28.793525 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d h, on_tline i d a c"

I0124 00:47:28.793562 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_circle i d h, on_tline i d a c ? cong b e a g"
I0124 00:47:28.793699 139966267543552 graph.py:498] 
I0124 00:47:28.793756 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_circle i d h, on_tline i d a c ? cong b e a g
I0124 00:47:29.099493 139966267543552 ddar.py:60] Depth 1/1000 time = 0.29108095169067383
I0124 00:47:29.520002 139966267543552 ddar.py:60] Depth 2/1000 time = 0.42040514945983887
I0124 00:47:30.296744 139966267543552 ddar.py:60] Depth 3/1000 time = 0.7766304016113281
I0124 00:47:30.754009 139966267543552 ddar.py:60] Depth 4/1000 time = 0.4570925235748291
I0124 00:47:31.533784 139966267543552 ddar.py:60] Depth 5/1000 time = 0.7795300483703613
I0124 00:47:32.103898 139966267543552 ddar.py:60] Depth 6/1000 time = 0.5679683685302734
I0124 00:47:33.153542 139966267543552 ddar.py:60] Depth 7/1000 time = 1.0495021343231201
I0124 00:47:33.868743 139966267543552 ddar.py:60] Depth 8/1000 time = 0.7150101661682129
I0124 00:47:34.947507 139966267543552 ddar.py:60] Depth 9/1000 time = 1.066199779510498
I0124 00:47:34.947702 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:47:34.947749 139966267543552 alphageometry.py:566] LM output (score=-2.637787): "i : D d i d h 10 T a c d i 11 ;"
I0124 00:47:34.947783 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d h, on_tline i d a c"

I0124 00:47:34.947820 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_circle i d h, on_tline i d a c ? cong b e a g"
I0124 00:47:34.947941 139966267543552 graph.py:498] 
I0124 00:47:34.947989 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_circle i d h, on_tline i d a c ? cong b e a g
I0124 00:47:35.246870 139966267543552 ddar.py:60] Depth 1/1000 time = 0.28548550605773926
I0124 00:47:35.979088 139966267543552 ddar.py:60] Depth 2/1000 time = 0.7321038246154785
I0124 00:47:36.432443 139966267543552 ddar.py:60] Depth 3/1000 time = 0.4531862735748291
I0124 00:47:37.232162 139966267543552 ddar.py:60] Depth 4/1000 time = 0.7995865345001221
I0124 00:47:37.683971 139966267543552 ddar.py:60] Depth 5/1000 time = 0.45152974128723145
I0124 00:47:38.614055 139966267543552 ddar.py:60] Depth 6/1000 time = 0.9282588958740234
I0124 00:47:39.302152 139966267543552 ddar.py:60] Depth 7/1000 time = 0.6879315376281738
I0124 00:47:40.360568 139966267543552 ddar.py:60] Depth 8/1000 time = 1.0582630634307861
I0124 00:47:41.081735 139966267543552 ddar.py:60] Depth 9/1000 time = 0.7089884281158447
I0124 00:47:41.081886 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:47:41.081931 139966267543552 alphageometry.py:566] LM output (score=-2.816573): "i : C h f i 10 D h i f i 11 ;"
I0124 00:47:41.081964 139966267543552 alphageometry.py:567] Translation: "i = on_line i h f, on_bline i f h"

I0124 00:47:41.081999 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i h f, on_bline i f h ? cong b e a g"
I0124 00:47:41.082141 139966267543552 graph.py:498] 
I0124 00:47:41.082188 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i h f, on_bline i f h ? cong b e a g
I0124 00:47:41.657934 139966267543552 ddar.py:60] Depth 1/1000 time = 0.5639183521270752
I0124 00:47:42.003811 139966267543552 ddar.py:60] Depth 2/1000 time = 0.34570765495300293
I0124 00:47:42.727562 139966267543552 ddar.py:60] Depth 3/1000 time = 0.7236108779907227
I0124 00:47:43.107091 139966267543552 ddar.py:60] Depth 4/1000 time = 0.3792409896850586
I0124 00:47:43.864333 139966267543552 ddar.py:60] Depth 5/1000 time = 0.7546961307525635
I0124 00:47:43.865067 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:47:43.865120 139966267543552 alphageometry.py:566] LM output (score=-4.269534): "i : C h f i 10 D h i h i 11 ;"
I0124 00:47:43.865156 139966267543552 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2570, in add_clause
    raise DepCheckFailError(
graph.DepCheckFailError: diff h h
"

I0124 00:47:43.865191 139966267543552 alphageometry.py:566] LM output (score=-4.344590): "i : C e h i 10 D e i h i 11 ;"
I0124 00:47:43.865220 139966267543552 alphageometry.py:567] Translation: "i = on_line i e h, on_bline i h e"

I0124 00:47:43.865251 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i e h, on_bline i h e ? cong b e a g"
I0124 00:47:43.865372 139966267543552 graph.py:498] 
I0124 00:47:43.865421 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i e h, on_bline i h e ? cong b e a g
I0124 00:47:44.089984 139966267543552 ddar.py:60] Depth 1/1000 time = 0.21259021759033203
I0124 00:47:44.777453 139966267543552 ddar.py:60] Depth 2/1000 time = 0.6873588562011719
I0124 00:47:45.533959 139966267543552 ddar.py:60] Depth 3/1000 time = 0.7563364505767822
I0124 00:47:45.919688 139966267543552 ddar.py:60] Depth 4/1000 time = 0.385439395904541
I0124 00:47:46.693980 139966267543552 ddar.py:60] Depth 5/1000 time = 0.7718818187713623
I0124 00:47:46.694745 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:47:46.694796 139966267543552 alphageometry.py:566] LM output (score=-4.427846): "i : C d h i 10 D d h d i 11 ;"
I0124 00:47:46.694831 139966267543552 alphageometry.py:567] Translation: "i = on_line i d h, on_circle i d h"

I0124 00:47:46.694873 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i d h, on_circle i d h ? cong b e a g"
I0124 00:47:46.694995 139966267543552 graph.py:498] 
I0124 00:47:46.695042 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i d h, on_circle i d h ? cong b e a g
I0124 00:47:47.019785 139966267543552 ddar.py:60] Depth 1/1000 time = 0.3146076202392578
I0124 00:47:48.046437 139966267543552 ddar.py:60] Depth 2/1000 time = 1.0265328884124756
I0124 00:47:48.683624 139966267543552 ddar.py:60] Depth 3/1000 time = 0.6370232105255127
I0124 00:47:49.682302 139966267543552 ddar.py:60] Depth 4/1000 time = 0.9983744621276855
I0124 00:47:50.720218 139966267543552 ddar.py:60] Depth 5/1000 time = 1.034679651260376
I0124 00:47:50.720728 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:47:50.720780 139966267543552 alphageometry.py:566] LM output (score=-4.584559): "i : P a c c i 10 T a c d i 11 ;"
I0124 00:47:50.720815 139966267543552 alphageometry.py:567] Translation: "ERROR: Invalid predicate P a c c i"

I0124 00:47:50.720849 139966267543552 alphageometry.py:566] LM output (score=-4.810376): "i : C a h i 10 D a h a i 11 ;"
I0124 00:47:50.720877 139966267543552 alphageometry.py:567] Translation: "i = on_line i a h, on_circle i a h"

I0124 00:47:50.720907 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i a h, on_circle i a h ? cong b e a g"
I0124 00:47:50.721028 139966267543552 graph.py:498] 
I0124 00:47:50.721077 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i a h, on_circle i a h ? cong b e a g
I0124 00:47:50.937848 139966267543552 ddar.py:60] Depth 1/1000 time = 0.20479106903076172
I0124 00:47:51.198140 139966267543552 ddar.py:60] Depth 2/1000 time = 0.26019906997680664
I0124 00:47:51.809376 139966267543552 ddar.py:60] Depth 3/1000 time = 0.611119270324707
I0124 00:47:52.075344 139966267543552 ddar.py:60] Depth 4/1000 time = 0.2656707763671875
I0124 00:47:52.708532 139966267543552 ddar.py:60] Depth 5/1000 time = 0.6309270858764648
I0124 00:47:52.708708 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:47:52.708753 139966267543552 alphageometry.py:566] LM output (score=-4.815129): "h : C a c h 10 T a c d h 11 ;"
I0124 00:47:52.708788 139966267543552 alphageometry.py:567] Translation: "ERROR: point h already exists."

I0124 00:47:52.708822 139966267543552 alphageometry.py:566] LM output (score=-4.968675): "i : P a c a i 10 T a c d i 11 ;"
I0124 00:47:52.708849 139966267543552 alphageometry.py:567] Translation: "ERROR: Invalid predicate P a c a i"

I0124 00:47:52.708877 139966267543552 alphageometry.py:566] LM output (score=-5.138148): "i : C c f i 10 D c i f i 11 ;"
I0124 00:47:52.708904 139966267543552 alphageometry.py:567] Translation: "i = on_line i c f, on_bline i f c"

I0124 00:47:52.708933 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i c f, on_bline i f c ? cong b e a g"
I0124 00:47:52.709054 139966267543552 graph.py:498] 
I0124 00:47:52.709100 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i c f, on_bline i f c ? cong b e a g
I0124 00:47:52.982703 139966267543552 ddar.py:60] Depth 1/1000 time = 0.261566162109375
I0124 00:47:53.707851 139966267543552 ddar.py:60] Depth 2/1000 time = 0.7250270843505859
I0124 00:47:54.449749 139966267543552 ddar.py:60] Depth 3/1000 time = 0.7417244911193848
I0124 00:47:55.209775 139966267543552 ddar.py:60] Depth 4/1000 time = 0.7597219944000244
I0124 00:47:55.620367 139966267543552 ddar.py:60] Depth 5/1000 time = 0.40835094451904297
I0124 00:47:55.621062 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:47:55.621113 139966267543552 alphageometry.py:566] LM output (score=-5.140997): "i : C h e i 10 D h i e i 11 ;"
I0124 00:47:55.621148 139966267543552 alphageometry.py:567] Translation: "i = on_line i h e, on_bline i e h"

I0124 00:47:55.621184 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i h e, on_bline i e h ? cong b e a g"
I0124 00:47:55.621323 139966267543552 graph.py:498] 
I0124 00:47:55.621372 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i h e, on_bline i e h ? cong b e a g
I0124 00:47:56.183322 139966267543552 ddar.py:60] Depth 1/1000 time = 0.5500736236572266
I0124 00:47:56.524984 139966267543552 ddar.py:60] Depth 2/1000 time = 0.34149765968322754
I0124 00:47:57.262804 139966267543552 ddar.py:60] Depth 3/1000 time = 0.7376971244812012
I0124 00:47:58.013971 139966267543552 ddar.py:60] Depth 4/1000 time = 0.7508673667907715
I0124 00:47:58.429603 139966267543552 ddar.py:60] Depth 5/1000 time = 0.41321277618408203
I0124 00:47:58.430289 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:47:58.430342 139966267543552 alphageometry.py:566] LM output (score=-5.219666): "i : C h e i 10 D h i h i 11 ;"
I0124 00:47:58.430377 139966267543552 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2570, in add_clause
    raise DepCheckFailError(
graph.DepCheckFailError: diff h h
"

I0124 00:47:58.430412 139966267543552 alphageometry.py:566] LM output (score=-5.232567): "i : C f h i 10 D f i h i 11 ;"
I0124 00:47:58.430440 139966267543552 alphageometry.py:567] Translation: "i = on_line i f h, on_bline i h f"

I0124 00:47:58.430471 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i f h, on_bline i h f ? cong b e a g"
I0124 00:47:58.430590 139966267543552 graph.py:498] 
I0124 00:47:58.430637 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i f h, on_bline i h f ? cong b e a g
I0124 00:47:58.654201 139966267543552 ddar.py:60] Depth 1/1000 time = 0.21175336837768555
I0124 00:47:59.337390 139966267543552 ddar.py:60] Depth 2/1000 time = 0.6830792427062988
I0124 00:48:00.086741 139966267543552 ddar.py:60] Depth 3/1000 time = 0.7491769790649414
I0124 00:48:00.468810 139966267543552 ddar.py:60] Depth 4/1000 time = 0.3817753791809082
I0124 00:48:01.248014 139966267543552 ddar.py:60] Depth 5/1000 time = 0.7766361236572266
I0124 00:48:01.248872 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:48:01.248925 139966267543552 alphageometry.py:566] LM output (score=-5.301041): "i : C a d i 10 D a i d i 11 ;"
I0124 00:48:01.248960 139966267543552 alphageometry.py:567] Translation: "i = on_line i a d, on_bline i d a"

I0124 00:48:01.248997 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i a d, on_bline i d a ? cong b e a g"
I0124 00:48:01.249121 139966267543552 graph.py:498] 
I0124 00:48:01.249169 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i a d, on_bline i d a ? cong b e a g
I0124 00:48:01.467133 139966267543552 ddar.py:60] Depth 1/1000 time = 0.20596933364868164
I0124 00:48:02.169034 139966267543552 ddar.py:60] Depth 2/1000 time = 0.7017879486083984
I0124 00:48:02.531037 139966267543552 ddar.py:60] Depth 3/1000 time = 0.36184024810791016
I0124 00:48:02.873690 139966267543552 ddar.py:60] Depth 4/1000 time = 0.3425261974334717
I0124 00:48:03.568671 139966267543552 ddar.py:60] Depth 5/1000 time = 0.6946823596954346
I0124 00:48:04.347019 139966267543552 ddar.py:60] Depth 6/1000 time = 0.7760980129241943
I0124 00:48:04.718976 139966267543552 ddar.py:60] Depth 7/1000 time = 0.37176942825317383
I0124 00:48:04.720111 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:48:04.720169 139966267543552 alphageometry.py:566] LM output (score=-5.328094): "i : C a f i 10 D a i f i 11 ;"
I0124 00:48:04.720205 139966267543552 alphageometry.py:567] Translation: "i = on_line i a f, on_bline i f a"

I0124 00:48:04.720242 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i a f, on_bline i f a ? cong b e a g"
I0124 00:48:04.720367 139966267543552 graph.py:498] 
I0124 00:48:04.720423 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i a f, on_bline i f a ? cong b e a g
I0124 00:48:04.946309 139966267543552 ddar.py:60] Depth 1/1000 time = 0.21395254135131836
I0124 00:48:05.681142 139966267543552 ddar.py:60] Depth 2/1000 time = 0.7347133159637451
I0124 00:48:06.134948 139966267543552 ddar.py:60] Depth 3/1000 time = 0.4536244869232178
I0124 00:48:06.948736 139966267543552 ddar.py:60] Depth 4/1000 time = 0.813539981842041
I0124 00:48:07.793092 139966267543552 ddar.py:60] Depth 5/1000 time = 0.8414392471313477
I0124 00:48:07.794436 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:48:07.794492 139966267543552 alphageometry.py:566] LM output (score=-5.416377): "i : D d i d e 10 T a c d i 11 ;"
I0124 00:48:07.794528 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e, on_tline i d a c"

I0124 00:48:07.794566 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_circle i d e, on_tline i d a c ? cong b e a g"
I0124 00:48:07.794687 139966267543552 graph.py:498] 
I0124 00:48:07.794735 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_circle i d e, on_tline i d a c ? cong b e a g
I0124 00:48:08.044687 139966267543552 ddar.py:60] Depth 1/1000 time = 0.23631906509399414
I0124 00:48:08.442637 139966267543552 ddar.py:60] Depth 2/1000 time = 0.39784765243530273
I0124 00:48:09.259871 139966267543552 ddar.py:60] Depth 3/1000 time = 0.8171188831329346
I0124 00:48:09.719938 139966267543552 ddar.py:60] Depth 4/1000 time = 0.45989346504211426
I0124 00:48:10.556106 139966267543552 ddar.py:60] Depth 5/1000 time = 0.8359410762786865
I0124 00:48:11.139559 139966267543552 ddar.py:60] Depth 6/1000 time = 0.5814917087554932
I0124 00:48:12.222806 139966267543552 ddar.py:60] Depth 7/1000 time = 1.0830926895141602
I0124 00:48:12.953408 139966267543552 ddar.py:60] Depth 8/1000 time = 0.730424165725708
I0124 00:48:14.050088 139966267543552 ddar.py:60] Depth 9/1000 time = 1.0842537879943848
I0124 00:48:14.050278 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:48:14.050326 139966267543552 alphageometry.py:566] LM output (score=-5.420246): "i : C h f i 10 D f g g i 11 ;"
I0124 00:48:14.050360 139966267543552 alphageometry.py:567] Translation: "i = on_line i h f, on_circle i g f"

I0124 00:48:14.050397 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i h f, on_circle i g f ? cong b e a g"
I0124 00:48:14.050541 139966267543552 graph.py:498] 
I0124 00:48:14.050590 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i h f, on_circle i g f ? cong b e a g
I0124 00:48:14.276817 139966267543552 ddar.py:60] Depth 1/1000 time = 0.21491622924804688
I0124 00:48:14.947366 139966267543552 ddar.py:60] Depth 2/1000 time = 0.6704366207122803
I0124 00:48:15.259083 139966267543552 ddar.py:60] Depth 3/1000 time = 0.31154417991638184
I0124 00:48:15.953213 139966267543552 ddar.py:60] Depth 4/1000 time = 0.6938972473144531
I0124 00:48:16.309028 139966267543552 ddar.py:60] Depth 5/1000 time = 0.35247015953063965
I0124 00:48:16.309156 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:48:16.309201 139966267543552 alphageometry.py:566] LM output (score=-5.529496): "i : C a e i 10 D a e a i 11 ;"
I0124 00:48:16.309235 139966267543552 alphageometry.py:567] Translation: "i = on_line i a e, on_circle i a e"

I0124 00:48:16.309270 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i a e, on_circle i a e ? cong b e a g"
I0124 00:48:16.309390 139966267543552 graph.py:498] 
I0124 00:48:16.309437 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i a e, on_circle i a e ? cong b e a g
I0124 00:48:17.006988 139966267543552 ddar.py:60] Depth 1/1000 time = 0.6847736835479736
I0124 00:48:17.806456 139966267543552 ddar.py:60] Depth 2/1000 time = 0.7992973327636719
I0124 00:48:18.618596 139966267543552 ddar.py:60] Depth 3/1000 time = 0.8119630813598633
I0124 00:48:19.434859 139966267543552 ddar.py:60] Depth 4/1000 time = 0.8159518241882324
I0124 00:48:20.277799 139966267543552 ddar.py:60] Depth 5/1000 time = 0.840289831161499
I0124 00:48:20.278570 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:48:20.278621 139966267543552 alphageometry.py:566] LM output (score=-5.551475): "i : D d h d i 10 T d h d i 11 ;"
I0124 00:48:20.278656 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d h, on_tline i d d h"

I0124 00:48:20.278692 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_circle i d h, on_tline i d d h ? cong b e a g"
I0124 00:48:20.278817 139966267543552 graph.py:498] 
I0124 00:48:20.278865 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_circle i d h, on_tline i d d h ? cong b e a g
I0124 00:48:20.578727 139966267543552 ddar.py:60] Depth 1/1000 time = 0.2856442928314209
I0124 00:48:21.445888 139966267543552 ddar.py:60] Depth 2/1000 time = 0.8670454025268555
I0124 00:48:21.895016 139966267543552 ddar.py:60] Depth 3/1000 time = 0.44895029067993164
I0124 00:48:22.732146 139966267543552 ddar.py:60] Depth 4/1000 time = 0.8369603157043457
I0124 00:48:23.185887 139966267543552 ddar.py:60] Depth 5/1000 time = 0.4533040523529053
I0124 00:48:23.641057 139966267543552 ddar.py:60] Depth 6/1000 time = 0.4542274475097656
I0124 00:48:24.505673 139966267543552 ddar.py:60] Depth 7/1000 time = 0.8591954708099365
I0124 00:48:24.505878 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:48:24.505937 139966267543552 alphageometry.py:566] LM output (score=-5.592204): "f : C a c f 10 T a c d f 11 ;"
I0124 00:48:24.505972 139966267543552 alphageometry.py:567] Translation: "ERROR: point f already exists."

I0124 00:48:24.506031 139966267543552 alphageometry.py:566] LM output (score=-5.622371): "i : D d h h i 10 T d h h i 11 ;"
I0124 00:48:24.506062 139966267543552 alphageometry.py:567] Translation: "i = on_circle i h d, on_tline i h d h"

I0124 00:48:24.506094 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_circle i h d, on_tline i h d h ? cong b e a g"
I0124 00:48:24.506225 139966267543552 graph.py:498] 
I0124 00:48:24.506284 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_circle i h d, on_tline i h d h ? cong b e a g
I0124 00:48:24.759194 139966267543552 ddar.py:60] Depth 1/1000 time = 0.2383251190185547
I0124 00:48:25.092152 139966267543552 ddar.py:60] Depth 2/1000 time = 0.33286333084106445
I0124 00:48:25.794968 139966267543552 ddar.py:60] Depth 3/1000 time = 0.7027060985565186
I0124 00:48:26.132895 139966267543552 ddar.py:60] Depth 4/1000 time = 0.337587833404541
I0124 00:48:26.846654 139966267543552 ddar.py:60] Depth 5/1000 time = 0.71337890625
I0124 00:48:27.202011 139966267543552 ddar.py:60] Depth 6/1000 time = 0.35288500785827637
I0124 00:48:27.202129 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:48:27.202174 139966267543552 alphageometry.py:566] LM output (score=-5.666234): "i : C a d i 10 T a d c i 11 ;"
I0124 00:48:27.202209 139966267543552 alphageometry.py:567] Translation: "i = on_line i a d, on_tline i c a d"

I0124 00:48:27.202244 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i a d, on_tline i c a d ? cong b e a g"
I0124 00:48:27.202364 139966267543552 graph.py:498] 
I0124 00:48:27.202412 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i a d, on_tline i c a d ? cong b e a g
I0124 00:48:27.445561 139966267543552 ddar.py:60] Depth 1/1000 time = 0.23204755783081055
I0124 00:48:28.139312 139966267543552 ddar.py:60] Depth 2/1000 time = 0.6936414241790771
I0124 00:48:28.504813 139966267543552 ddar.py:60] Depth 3/1000 time = 0.36534571647644043
I0124 00:48:29.240087 139966267543552 ddar.py:60] Depth 4/1000 time = 0.7351419925689697
I0124 00:48:29.613350 139966267543552 ddar.py:60] Depth 5/1000 time = 0.3729548454284668
I0124 00:48:30.427053 139966267543552 ddar.py:60] Depth 6/1000 time = 0.8120138645172119
I0124 00:48:31.305366 139966267543552 ddar.py:60] Depth 7/1000 time = 0.8781373500823975
I0124 00:48:31.310728 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:48:31.310783 139966267543552 alphageometry.py:566] LM output (score=-5.689384): "i : D d h f i 10 D d f h i 11 ;"
I0124 00:48:31.310819 139966267543552 alphageometry.py:567] Translation: "i = eqdistance i f d h, eqdistance i h d f"

I0124 00:48:31.310857 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = eqdistance i f d h, eqdistance i h d f ? cong b e a g"
I0124 00:48:31.310981 139966267543552 graph.py:498] 
I0124 00:48:31.311028 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = eqdistance i f d h, eqdistance i h d f ? cong b e a g
I0124 00:48:31.764141 139966267543552 ddar.py:60] Depth 1/1000 time = 0.44091343879699707
I0124 00:48:32.333273 139966267543552 ddar.py:60] Depth 2/1000 time = 0.5690248012542725
I0124 00:48:33.237856 139966267543552 ddar.py:60] Depth 3/1000 time = 0.9044435024261475
I0124 00:48:34.171707 139966267543552 ddar.py:60] Depth 4/1000 time = 0.9335508346557617
I0124 00:48:34.757163 139966267543552 ddar.py:60] Depth 5/1000 time = 0.5819656848907471
I0124 00:48:34.757553 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:48:34.757605 139966267543552 alphageometry.py:566] LM output (score=-5.766099): "i : C h f i 10 D h f h i 11 ;"
I0124 00:48:34.759503 139966267543552 alphageometry.py:567] Translation: "i = on_line i h f, on_circle i h f"

I0124 00:48:34.759560 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i h f, on_circle i h f ? cong b e a g"
I0124 00:48:34.759690 139966267543552 graph.py:498] 
I0124 00:48:34.759737 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i h f, on_circle i h f ? cong b e a g
I0124 00:48:34.976357 139966267543552 ddar.py:60] Depth 1/1000 time = 0.2045755386352539
I0124 00:48:35.682090 139966267543552 ddar.py:60] Depth 2/1000 time = 0.7056286334991455
I0124 00:48:36.058323 139966267543552 ddar.py:60] Depth 3/1000 time = 0.37607264518737793
I0124 00:48:36.810602 139966267543552 ddar.py:60] Depth 4/1000 time = 0.752030611038208
I0124 00:48:37.216035 139966267543552 ddar.py:60] Depth 5/1000 time = 0.4029726982116699
I0124 00:48:37.216612 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:48:37.216663 139966267543552 alphageometry.py:566] LM output (score=-5.766897): "i : C f h i 10 D f h h i 11 ;"
I0124 00:48:37.216697 139966267543552 alphageometry.py:567] Translation: "i = on_line i f h, on_circle i h f"

I0124 00:48:37.216733 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i f h, on_circle i h f ? cong b e a g"
I0124 00:48:37.216853 139966267543552 graph.py:498] 
I0124 00:48:37.216900 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i f h, on_circle i h f ? cong b e a g
I0124 00:48:37.807707 139966267543552 ddar.py:60] Depth 1/1000 time = 0.5790481567382812
I0124 00:48:38.134244 139966267543552 ddar.py:60] Depth 2/1000 time = 0.326371431350708
I0124 00:48:38.896421 139966267543552 ddar.py:60] Depth 3/1000 time = 0.7620387077331543
I0124 00:48:39.271497 139966267543552 ddar.py:60] Depth 4/1000 time = 0.3747835159301758
I0124 00:48:40.060094 139966267543552 ddar.py:60] Depth 5/1000 time = 0.7861471176147461
I0124 00:48:40.060755 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:48:40.060819 139966267543552 alphageometry.py:566] LM output (score=-5.789330): "i : T a c d i 10 T a i c d 11 ;"
I0124 00:48:40.060854 139966267543552 alphageometry.py:567] Translation: "i = on_tline i d a c, on_tline i a c d"

I0124 00:48:40.060891 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_tline i d a c, on_tline i a c d ? cong b e a g"
I0124 00:48:40.061024 139966267543552 graph.py:498] 
I0124 00:48:40.061074 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_tline i d a c, on_tline i a c d ? cong b e a g
I0124 00:48:40.263380 139966267543552 ddar.py:60] Depth 1/1000 time = 0.1867506504058838
I0124 00:48:40.547730 139966267543552 ddar.py:60] Depth 2/1000 time = 0.284252405166626
I0124 00:48:41.237628 139966267543552 ddar.py:60] Depth 3/1000 time = 0.6897923946380615
I0124 00:48:41.531791 139966267543552 ddar.py:60] Depth 4/1000 time = 0.2938666343688965
I0124 00:48:41.836531 139966267543552 ddar.py:60] Depth 5/1000 time = 0.3019576072692871
I0124 00:48:42.602959 139966267543552 ddar.py:60] Depth 6/1000 time = 0.7629518508911133
I0124 00:48:42.603133 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:48:42.603189 139966267543552 alphageometry.py:566] LM output (score=-5.884311): "i : C b d i 10 D b i d i 11 ;"
I0124 00:48:42.603224 139966267543552 alphageometry.py:567] Translation: "i = on_line i b d, on_bline i d b"

I0124 00:48:42.603259 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i b d, on_bline i d b ? cong b e a g"
I0124 00:48:42.603386 139966267543552 graph.py:498] 
I0124 00:48:42.603442 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i b d, on_bline i d b ? cong b e a g
I0124 00:48:42.824735 139966267543552 ddar.py:60] Depth 1/1000 time = 0.20939993858337402
I0124 00:48:43.534209 139966267543552 ddar.py:60] Depth 2/1000 time = 0.7093496322631836
I0124 00:48:43.880605 139966267543552 ddar.py:60] Depth 3/1000 time = 0.3461904525756836
I0124 00:48:44.633638 139966267543552 ddar.py:60] Depth 4/1000 time = 0.7527165412902832
I0124 00:48:45.004387 139966267543552 ddar.py:60] Depth 5/1000 time = 0.3686041831970215
I0124 00:48:45.004517 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:48:45.004566 139966267543552 alphageometry.py:566] LM output (score=-5.928777): "i : C h f i 10 D a h a i 11 ;"
I0124 00:48:45.004601 139966267543552 alphageometry.py:567] Translation: "i = on_line i h f, on_circle i a h"

I0124 00:48:45.004637 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i h f, on_circle i a h ? cong b e a g"
I0124 00:48:45.004762 139966267543552 graph.py:498] 
I0124 00:48:45.004810 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d b c; i = on_line i h f, on_circle i a h ? cong b e a g
I0124 00:48:45.235835 139966267543552 ddar.py:60] Depth 1/1000 time = 0.21952104568481445
I0124 00:48:45.904876 139966267543552 ddar.py:60] Depth 2/1000 time = 0.6689291000366211
I0124 00:48:46.217661 139966267543552 ddar.py:60] Depth 3/1000 time = 0.3126044273376465
I0124 00:48:46.909448 139966267543552 ddar.py:60] Depth 4/1000 time = 0.6915624141693115
I0124 00:48:47.254002 139966267543552 ddar.py:60] Depth 5/1000 time = 0.34123730659484863
I0124 00:48:47.254118 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:48:47.254164 139966267543552 alphageometry.py:566] LM output (score=-5.935925): "i : C a b i 10 T h f h i 11 ;"
I0124 00:48:47.254198 139966267543552 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0124 00:48:47.254233 139966267543552 alphageometry.py:566] LM output (score=-5.971684): "i : C b c i 10 T b c d i 11 ;"
I0124 00:48:47.254261 139966267543552 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0124 00:48:47.254310 139966267543552 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : C f g h 08 D f h g h 09 ; x00
I0124 00:48:53.098630 139966267543552 alphageometry.py:566] LM output (score=-0.753025): "i : D d h d i 10 T c d h i 11 ;"
I0124 00:48:53.098773 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d h, on_tline i h c d"

I0124 00:48:53.098814 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i d h, on_tline i h c d ? cong b e a g"
I0124 00:48:53.098932 139966267543552 graph.py:498] 
I0124 00:48:53.098980 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i d h, on_tline i h c d ? cong b e a g
I0124 00:48:53.267376 139966267543552 ddar.py:60] Depth 1/1000 time = 0.15262794494628906
I0124 00:48:54.062031 139966267543552 ddar.py:60] Depth 2/1000 time = 0.7945530414581299
I0124 00:48:54.940330 139966267543552 ddar.py:60] Depth 3/1000 time = 0.8781170845031738
I0124 00:48:55.870625 139966267543552 ddar.py:60] Depth 4/1000 time = 0.93011474609375
I0124 00:48:56.823587 139966267543552 ddar.py:60] Depth 5/1000 time = 0.952770471572876
I0124 00:48:57.779704 139966267543552 ddar.py:60] Depth 6/1000 time = 0.9557909965515137
I0124 00:48:58.735820 139966267543552 ddar.py:60] Depth 7/1000 time = 0.9551200866699219
I0124 00:48:59.703979 139966267543552 ddar.py:60] Depth 8/1000 time = 0.9665036201477051
I0124 00:49:00.673597 139966267543552 ddar.py:60] Depth 9/1000 time = 0.9668958187103271
I0124 00:49:00.673787 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:49:00.673835 139966267543552 alphageometry.py:566] LM output (score=-0.913034): "i : D d e d i 10 ;"
I0124 00:49:00.673871 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e"

I0124 00:49:00.673908 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i d e ? cong b e a g"
I0124 00:49:00.674030 139966267543552 graph.py:498] 
I0124 00:49:00.674080 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i d e ? cong b e a g
I0124 00:49:01.348723 139966267543552 ddar.py:60] Depth 1/1000 time = 0.6640434265136719
I0124 00:49:01.804184 139966267543552 ddar.py:60] Depth 2/1000 time = 0.45528531074523926
I0124 00:49:02.707760 139966267543552 ddar.py:60] Depth 3/1000 time = 0.9034087657928467
I0124 00:49:03.618084 139966267543552 ddar.py:60] Depth 4/1000 time = 0.91001296043396
I0124 00:49:03.620705 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:49:03.620759 139966267543552 alphageometry.py:566] LM output (score=-1.054422): "i : C b f i 10 D b i f i 11 ;"
I0124 00:49:03.620795 139966267543552 alphageometry.py:567] Translation: "i = on_line i b f, on_bline i f b"

I0124 00:49:03.620832 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_line i b f, on_bline i f b ? cong b e a g"
I0124 00:49:03.620979 139966267543552 graph.py:498] 
I0124 00:49:03.621030 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_line i b f, on_bline i f b ? cong b e a g
I0124 00:49:03.806280 139966267543552 ddar.py:60] Depth 1/1000 time = 0.1720116138458252
I0124 00:49:05.324376 139966267543552 ddar.py:60] Depth 2/1000 time = 1.5179939270019531
I0124 00:49:06.632142 139966267543552 ddar.py:60] Depth 3/1000 time = 1.3075854778289795
I0124 00:49:08.344977 139966267543552 ddar.py:60] Depth 4/1000 time = 1.7126452922821045
I0124 00:49:10.078153 139966267543552 ddar.py:60] Depth 5/1000 time = 1.7328071594238281
I0124 00:49:10.084273 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:49:10.084329 139966267543552 alphageometry.py:566] LM output (score=-1.239507): "i : C b c i 10 T b c d i 11 ;"
I0124 00:49:10.084366 139966267543552 alphageometry.py:567] Translation: "i = on_line i b c, on_tline i d b c"

I0124 00:49:10.084402 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_line i b c, on_tline i d b c ? cong b e a g"
I0124 00:49:10.084525 139966267543552 graph.py:498] 
I0124 00:49:10.084573 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_line i b c, on_tline i d b c ? cong b e a g
I0124 00:49:10.247949 139966267543552 ddar.py:60] Depth 1/1000 time = 0.15351581573486328
I0124 00:49:11.145947 139966267543552 ddar.py:60] Depth 2/1000 time = 0.8979005813598633
I0124 00:49:12.162771 139966267543552 ddar.py:60] Depth 3/1000 time = 1.0166468620300293
I0124 00:49:13.203765 139966267543552 ddar.py:60] Depth 4/1000 time = 1.0406887531280518
I0124 00:49:13.205950 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:49:13.206006 139966267543552 alphageometry.py:566] LM output (score=-1.443320): "i : D d i d e 10 T b c d i 11 ;"
I0124 00:49:13.206041 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e, on_tline i d b c"

I0124 00:49:13.206079 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i d e, on_tline i d b c ? cong b e a g"
I0124 00:49:13.206202 139966267543552 graph.py:498] 
I0124 00:49:13.206248 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i d e, on_tline i d b c ? cong b e a g
I0124 00:49:13.484650 139966267543552 ddar.py:60] Depth 1/1000 time = 0.26616477966308594
I0124 00:49:14.378849 139966267543552 ddar.py:60] Depth 2/1000 time = 0.8940749168395996
I0124 00:49:15.348131 139966267543552 ddar.py:60] Depth 3/1000 time = 0.9691007137298584
I0124 00:49:16.320065 139966267543552 ddar.py:60] Depth 4/1000 time = 0.9716253280639648
I0124 00:49:17.300878 139966267543552 ddar.py:60] Depth 5/1000 time = 0.9778871536254883
I0124 00:49:17.302365 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:49:17.302421 139966267543552 alphageometry.py:566] LM output (score=-1.618487): "i : D d e d i 10 T b c d i 11 ;"
I0124 00:49:17.302456 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e, on_tline i d b c"

I0124 00:49:17.302495 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i d e, on_tline i d b c ? cong b e a g"
I0124 00:49:17.302641 139966267543552 graph.py:498] 
I0124 00:49:17.302691 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i d e, on_tline i d b c ? cong b e a g
I0124 00:49:17.581497 139966267543552 ddar.py:60] Depth 1/1000 time = 0.2668137550354004
I0124 00:49:18.431463 139966267543552 ddar.py:60] Depth 2/1000 time = 0.8498389720916748
I0124 00:49:19.400461 139966267543552 ddar.py:60] Depth 3/1000 time = 0.9688165187835693
I0124 00:49:20.370877 139966267543552 ddar.py:60] Depth 4/1000 time = 0.9701123237609863
I0124 00:49:21.360422 139966267543552 ddar.py:60] Depth 5/1000 time = 0.9865224361419678
I0124 00:49:21.361958 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:49:21.362014 139966267543552 alphageometry.py:566] LM output (score=-1.653385): "i : C b g i 10 D b i g i 11 ;"
I0124 00:49:21.362049 139966267543552 alphageometry.py:567] Translation: "i = on_line i b g, on_bline i g b"

I0124 00:49:21.362087 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_line i b g, on_bline i g b ? cong b e a g"
I0124 00:49:21.362210 139966267543552 graph.py:498] 
I0124 00:49:21.362258 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_line i b g, on_bline i g b ? cong b e a g
I0124 00:49:21.619065 139966267543552 ddar.py:60] Depth 1/1000 time = 0.24172139167785645
I0124 00:49:23.201878 139966267543552 ddar.py:60] Depth 2/1000 time = 1.5826952457427979
I0124 00:49:25.330950 139966267543552 ddar.py:60] Depth 3/1000 time = 2.128896474838257
I0124 00:49:27.042794 139966267543552 ddar.py:60] Depth 4/1000 time = 1.7116515636444092
I0124 00:49:28.774376 139966267543552 ddar.py:60] Depth 5/1000 time = 1.7312242984771729
I0124 00:49:28.777516 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:49:28.777570 139966267543552 alphageometry.py:566] LM output (score=-1.676080): "i : D a c a i 10 D c d d i 11 ;"
I0124 00:49:28.777606 139966267543552 alphageometry.py:567] Translation: "i = on_circle i a c, on_circle i d c"

I0124 00:49:28.777647 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i a c, on_circle i d c ? cong b e a g"
I0124 00:49:28.777772 139966267543552 graph.py:498] 
I0124 00:49:28.777821 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i a c, on_circle i d c ? cong b e a g
I0124 00:49:28.963939 139966267543552 ddar.py:60] Depth 1/1000 time = 0.1679229736328125
I0124 00:49:29.846532 139966267543552 ddar.py:60] Depth 2/1000 time = 0.8824689388275146
I0124 00:49:30.962315 139966267543552 ddar.py:60] Depth 3/1000 time = 1.1155667304992676
I0124 00:49:32.780248 139966267543552 ddar.py:60] Depth 4/1000 time = 1.8177409172058105
I0124 00:49:34.618904 139966267543552 ddar.py:60] Depth 5/1000 time = 1.8384499549865723
I0124 00:49:36.519037 139966267543552 ddar.py:60] Depth 6/1000 time = 1.8999485969543457
I0124 00:49:38.435685 139966267543552 ddar.py:60] Depth 7/1000 time = 1.9164540767669678
I0124 00:49:40.755232 139966267543552 ddar.py:60] Depth 8/1000 time = 2.319211006164551
I0124 00:49:40.760208 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:49:40.760270 139966267543552 alphageometry.py:566] LM output (score=-1.887790): "i : C a c i 10 T a c d i 11 ;"
I0124 00:49:40.760306 139966267543552 alphageometry.py:567] Translation: "i = on_line i a c, on_tline i d a c"

I0124 00:49:40.760360 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_line i a c, on_tline i d a c ? cong b e a g"
I0124 00:49:40.760492 139966267543552 graph.py:498] 
I0124 00:49:40.760546 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_line i a c, on_tline i d a c ? cong b e a g
I0124 00:49:40.939928 139966267543552 ddar.py:60] Depth 1/1000 time = 0.16833901405334473
I0124 00:49:41.912940 139966267543552 ddar.py:60] Depth 2/1000 time = 0.9729127883911133
I0124 00:49:43.181405 139966267543552 ddar.py:60] Depth 3/1000 time = 1.2682898044586182
I0124 00:49:44.445416 139966267543552 ddar.py:60] Depth 4/1000 time = 1.2638330459594727
I0124 00:49:45.688541 139966267543552 ddar.py:60] Depth 5/1000 time = 1.242781639099121
I0124 00:49:45.693425 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:49:45.693480 139966267543552 alphageometry.py:566] LM output (score=-2.070947): "i : D d g f i 10 D d i f g 11 ;"
I0124 00:49:45.693516 139966267543552 alphageometry.py:567] Translation: "i = eqdistance i f d g, eqdistance i d f g"

I0124 00:49:45.693554 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = eqdistance i f d g, eqdistance i d f g ? cong b e a g"
I0124 00:49:45.693682 139966267543552 graph.py:498] 
I0124 00:49:45.693732 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = eqdistance i f d g, eqdistance i d f g ? cong b e a g
I0124 00:49:45.882569 139966267543552 ddar.py:60] Depth 1/1000 time = 0.17061138153076172
I0124 00:49:46.696446 139966267543552 ddar.py:60] Depth 2/1000 time = 0.8137753009796143
I0124 00:49:47.695492 139966267543552 ddar.py:60] Depth 3/1000 time = 0.9988696575164795
I0124 00:49:48.694269 139966267543552 ddar.py:60] Depth 4/1000 time = 0.9984662532806396
I0124 00:49:48.696547 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:49:48.696600 139966267543552 alphageometry.py:566] LM output (score=-2.148265): "i : D d h d i 10 T a c d i 11 ;"
I0124 00:49:48.696636 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d h, on_tline i d a c"

I0124 00:49:48.696672 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i d h, on_tline i d a c ? cong b e a g"
I0124 00:49:48.696796 139966267543552 graph.py:498] 
I0124 00:49:48.696844 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i d h, on_tline i d a c ? cong b e a g
I0124 00:49:48.860148 139966267543552 ddar.py:60] Depth 1/1000 time = 0.1489105224609375
I0124 00:49:49.655046 139966267543552 ddar.py:60] Depth 2/1000 time = 0.7947955131530762
I0124 00:49:50.548232 139966267543552 ddar.py:60] Depth 3/1000 time = 0.8930099010467529
I0124 00:49:51.476341 139966267543552 ddar.py:60] Depth 4/1000 time = 0.9278120994567871
I0124 00:49:52.386620 139966267543552 ddar.py:60] Depth 5/1000 time = 0.9099068641662598
I0124 00:49:53.332304 139966267543552 ddar.py:60] Depth 6/1000 time = 0.944786787033081
I0124 00:49:53.820896 139966267543552 ddar.py:60] Depth 7/1000 time = 0.48759007453918457
I0124 00:49:53.822133 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:49:53.822217 139966267543552 alphageometry.py:566] LM output (score=-2.201244): "i : D c i f i 10 D d i f i 11 ;"
I0124 00:49:53.822255 139966267543552 alphageometry.py:567] Translation: "i = on_bline i f c, on_bline i f d"

I0124 00:49:53.822293 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_bline i f c, on_bline i f d ? cong b e a g"
I0124 00:49:53.822422 139966267543552 graph.py:498] 
I0124 00:49:53.822481 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_bline i f c, on_bline i f d ? cong b e a g
I0124 00:49:54.576400 139966267543552 ddar.py:60] Depth 1/1000 time = 0.7358064651489258
I0124 00:49:55.398060 139966267543552 ddar.py:60] Depth 2/1000 time = 0.8214776515960693
I0124 00:49:56.335563 139966267543552 ddar.py:60] Depth 3/1000 time = 0.9373235702514648
I0124 00:49:57.274215 139966267543552 ddar.py:60] Depth 4/1000 time = 0.9383468627929688
I0124 00:49:57.802605 139966267543552 ddar.py:60] Depth 5/1000 time = 0.5276505947113037
I0124 00:49:58.805283 139966267543552 ddar.py:60] Depth 6/1000 time = 1.0008985996246338
I0124 00:49:59.806556 139966267543552 ddar.py:60] Depth 7/1000 time = 1.0010976791381836
I0124 00:49:59.808781 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:49:59.808836 139966267543552 alphageometry.py:566] LM output (score=-2.242220): "i : D d g d i 10 T c d g i 11 ;"
I0124 00:49:59.808872 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d g, on_tline i g c d"

I0124 00:49:59.808911 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i d g, on_tline i g c d ? cong b e a g"
I0124 00:49:59.809036 139966267543552 graph.py:498] 
I0124 00:49:59.809086 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i d g, on_tline i g c d ? cong b e a g
I0124 00:49:59.977386 139966267543552 ddar.py:60] Depth 1/1000 time = 0.1533522605895996
I0124 00:50:00.825655 139966267543552 ddar.py:60] Depth 2/1000 time = 0.8481616973876953
I0124 00:50:01.768448 139966267543552 ddar.py:60] Depth 3/1000 time = 0.9426224231719971
I0124 00:50:02.684733 139966267543552 ddar.py:60] Depth 4/1000 time = 0.9159739017486572
I0124 00:50:03.609290 139966267543552 ddar.py:60] Depth 5/1000 time = 0.9236481189727783
I0124 00:50:04.569080 139966267543552 ddar.py:60] Depth 6/1000 time = 0.9584803581237793
I0124 00:50:05.574822 139966267543552 ddar.py:60] Depth 7/1000 time = 1.0055723190307617
I0124 00:50:06.155298 139966267543552 ddar.py:60] Depth 8/1000 time = 0.5802931785583496
I0124 00:50:07.152531 139966267543552 ddar.py:60] Depth 9/1000 time = 0.9949676990509033
I0124 00:50:07.152713 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:50:07.152760 139966267543552 alphageometry.py:566] LM output (score=-2.252576): "i : D d g d i 10 T a c d i 11 ;"
I0124 00:50:07.152794 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d g, on_tline i d a c"

I0124 00:50:07.152831 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i d g, on_tline i d a c ? cong b e a g"
I0124 00:50:07.152953 139966267543552 graph.py:498] 
I0124 00:50:07.153001 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i d g, on_tline i d a c ? cong b e a g
I0124 00:50:07.313339 139966267543552 ddar.py:60] Depth 1/1000 time = 0.145859956741333
I0124 00:50:08.139363 139966267543552 ddar.py:60] Depth 2/1000 time = 0.8259234428405762
I0124 00:50:09.048905 139966267543552 ddar.py:60] Depth 3/1000 time = 0.9093656539916992
I0124 00:50:09.970176 139966267543552 ddar.py:60] Depth 4/1000 time = 0.9209690093994141
I0124 00:50:10.912887 139966267543552 ddar.py:60] Depth 5/1000 time = 0.9417822360992432
I0124 00:50:10.914496 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:50:10.914551 139966267543552 alphageometry.py:566] LM output (score=-2.331032): "i : D a c c i 10 D a d d i 11 ;"
I0124 00:50:10.914587 139966267543552 alphageometry.py:567] Translation: "i = on_circle i c a, on_circle i d a"

I0124 00:50:10.914623 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i c a, on_circle i d a ? cong b e a g"
I0124 00:50:10.914745 139966267543552 graph.py:498] 
I0124 00:50:10.914802 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i c a, on_circle i d a ? cong b e a g
I0124 00:50:11.098316 139966267543552 ddar.py:60] Depth 1/1000 time = 0.16548442840576172
I0124 00:50:11.986807 139966267543552 ddar.py:60] Depth 2/1000 time = 0.8883740901947021
I0124 00:50:12.967517 139966267543552 ddar.py:60] Depth 3/1000 time = 0.980527400970459
I0124 00:50:14.008676 139966267543552 ddar.py:60] Depth 4/1000 time = 1.0409581661224365
I0124 00:50:15.056272 139966267543552 ddar.py:60] Depth 5/1000 time = 1.0474059581756592
I0124 00:50:16.170734 139966267543552 ddar.py:60] Depth 6/1000 time = 1.1142852306365967
I0124 00:50:17.296361 139966267543552 ddar.py:60] Depth 7/1000 time = 1.1254310607910156
I0124 00:50:18.422952 139966267543552 ddar.py:60] Depth 8/1000 time = 1.1262805461883545
I0124 00:50:18.428028 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:50:18.428093 139966267543552 alphageometry.py:566] LM output (score=-2.380167): "i : D d g d i 10 T a d g i 11 ;"
I0124 00:50:18.428131 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d g, on_tline i g a d"

I0124 00:50:18.428167 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i d g, on_tline i g a d ? cong b e a g"
I0124 00:50:18.428293 139966267543552 graph.py:498] 
I0124 00:50:18.428348 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i d g, on_tline i g a d ? cong b e a g
I0124 00:50:18.598080 139966267543552 ddar.py:60] Depth 1/1000 time = 0.1545088291168213
I0124 00:50:19.471365 139966267543552 ddar.py:60] Depth 2/1000 time = 0.8731856346130371
I0124 00:50:19.980181 139966267543552 ddar.py:60] Depth 3/1000 time = 0.5086498260498047
I0124 00:50:20.901509 139966267543552 ddar.py:60] Depth 4/1000 time = 0.921046257019043
I0124 00:50:21.855295 139966267543552 ddar.py:60] Depth 5/1000 time = 0.9518978595733643
I0124 00:50:22.847838 139966267543552 ddar.py:60] Depth 6/1000 time = 0.9923679828643799
I0124 00:50:23.851430 139966267543552 ddar.py:60] Depth 7/1000 time = 1.0034055709838867
I0124 00:50:24.910517 139966267543552 ddar.py:60] Depth 8/1000 time = 1.0588982105255127
I0124 00:50:24.912192 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:50:24.912244 139966267543552 alphageometry.py:566] LM output (score=-2.392137): "i : C a f i 10 D a i f i 11 ;"
I0124 00:50:24.912299 139966267543552 alphageometry.py:567] Translation: "i = on_line i a f, on_bline i f a"

I0124 00:50:24.912338 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_line i a f, on_bline i f a ? cong b e a g"
I0124 00:50:24.912458 139966267543552 graph.py:498] 
I0124 00:50:24.912506 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_line i a f, on_bline i f a ? cong b e a g
I0124 00:50:25.100146 139966267543552 ddar.py:60] Depth 1/1000 time = 0.17482614517211914
I0124 00:50:26.245946 139966267543552 ddar.py:60] Depth 2/1000 time = 1.1456971168518066
I0124 00:50:28.051841 139966267543552 ddar.py:60] Depth 3/1000 time = 1.8057160377502441
I0124 00:50:29.859567 139966267543552 ddar.py:60] Depth 4/1000 time = 1.8075363636016846
I0124 00:50:31.256440 139966267543552 ddar.py:60] Depth 5/1000 time = 1.3964903354644775
I0124 00:50:31.262617 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:50:31.262679 139966267543552 alphageometry.py:566] LM output (score=-2.485705): "i : D d h d i 10 T a d h i 11 ;"
I0124 00:50:31.262715 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d h, on_tline i h a d"

I0124 00:50:31.262753 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i d h, on_tline i h a d ? cong b e a g"
I0124 00:50:31.262878 139966267543552 graph.py:498] 
I0124 00:50:31.262933 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i d h, on_tline i h a d ? cong b e a g
I0124 00:50:31.429807 139966267543552 ddar.py:60] Depth 1/1000 time = 0.15228676795959473
I0124 00:50:32.249331 139966267543552 ddar.py:60] Depth 2/1000 time = 0.819415807723999
I0124 00:50:33.188397 139966267543552 ddar.py:60] Depth 3/1000 time = 0.9388701915740967
I0124 00:50:34.200010 139966267543552 ddar.py:60] Depth 4/1000 time = 1.0114378929138184
I0124 00:50:35.222492 139966267543552 ddar.py:60] Depth 5/1000 time = 1.0222969055175781
I0124 00:50:35.797450 139966267543552 ddar.py:60] Depth 6/1000 time = 0.5746448040008545
I0124 00:50:35.801117 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:50:35.801175 139966267543552 alphageometry.py:566] LM output (score=-2.500561): "i : C d g i 10 D d i g i 11 ;"
I0124 00:50:35.801212 139966267543552 alphageometry.py:567] Translation: "i = on_line i d g, on_bline i g d"

I0124 00:50:35.801250 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_line i d g, on_bline i g d ? cong b e a g"
I0124 00:50:35.801374 139966267543552 graph.py:498] 
I0124 00:50:35.801423 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_line i d g, on_bline i g d ? cong b e a g
I0124 00:50:36.403939 139966267543552 ddar.py:60] Depth 1/1000 time = 0.5888998508453369
I0124 00:50:37.432077 139966267543552 ddar.py:60] Depth 2/1000 time = 1.0279645919799805
I0124 00:50:38.630599 139966267543552 ddar.py:60] Depth 3/1000 time = 1.1983494758605957
I0124 00:50:39.828971 139966267543552 ddar.py:60] Depth 4/1000 time = 1.1981799602508545
I0124 00:50:41.042372 139966267543552 ddar.py:60] Depth 5/1000 time = 1.2130346298217773
I0124 00:50:41.046918 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:50:41.046989 139966267543552 alphageometry.py:566] LM output (score=-2.525873): "i : D d f d i 10 ;"
I0124 00:50:41.047026 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d f"

I0124 00:50:41.047065 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i d f ? cong b e a g"
I0124 00:50:41.047182 139966267543552 graph.py:498] 
I0124 00:50:41.047230 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i d f ? cong b e a g
I0124 00:50:41.335787 139966267543552 ddar.py:60] Depth 1/1000 time = 0.2778444290161133
I0124 00:50:42.201231 139966267543552 ddar.py:60] Depth 2/1000 time = 0.865319013595581
I0124 00:50:43.137923 139966267543552 ddar.py:60] Depth 3/1000 time = 0.936514139175415
I0124 00:50:44.084676 139966267543552 ddar.py:60] Depth 4/1000 time = 0.9464418888092041
I0124 00:50:44.087247 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:50:44.087303 139966267543552 alphageometry.py:566] LM output (score=-2.534901): "i : D d g d i 10 T d e g i 11 ;"
I0124 00:50:44.087338 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d g, on_tline i g d e"

I0124 00:50:44.087374 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i d g, on_tline i g d e ? cong b e a g"
I0124 00:50:44.087494 139966267543552 graph.py:498] 
I0124 00:50:44.087542 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i d g, on_tline i g d e ? cong b e a g
I0124 00:50:44.352196 139966267543552 ddar.py:60] Depth 1/1000 time = 0.25176525115966797
I0124 00:50:45.946279 139966267543552 ddar.py:60] Depth 2/1000 time = 1.5939650535583496
I0124 00:50:48.178087 139966267543552 ddar.py:60] Depth 3/1000 time = 2.231623649597168
I0124 00:50:50.222065 139966267543552 ddar.py:60] Depth 4/1000 time = 2.043776750564575
I0124 00:50:52.267921 139966267543552 ddar.py:60] Depth 5/1000 time = 2.0456314086914062
I0124 00:50:54.711122 139966267543552 ddar.py:60] Depth 6/1000 time = 2.4430041313171387
I0124 00:50:57.169451 139966267543552 ddar.py:60] Depth 7/1000 time = 2.4580044746398926
I0124 00:50:57.173584 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:50:57.173662 139966267543552 alphageometry.py:566] LM output (score=-2.555212): "i : D d g f i 10 P d g f i 11 ;"
I0124 00:50:57.173701 139966267543552 alphageometry.py:567] Translation: "i = eqdistance i f d g, on_pline i f d g"

I0124 00:50:57.173738 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = eqdistance i f d g, on_pline i f d g ? cong b e a g"
I0124 00:50:57.173868 139966267543552 graph.py:498] 
I0124 00:50:57.173927 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = eqdistance i f d g, on_pline i f d g ? cong b e a g
I0124 00:50:57.356904 139966267543552 ddar.py:60] Depth 1/1000 time = 0.1655406951904297
I0124 00:50:57.869276 139966267543552 ddar.py:60] Depth 2/1000 time = 0.5122799873352051
I0124 00:50:59.330968 139966267543552 ddar.py:60] Depth 3/1000 time = 1.4615309238433838
I0124 00:50:59.936722 139966267543552 ddar.py:60] Depth 4/1000 time = 0.6054484844207764
I0124 00:50:59.938887 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:50:59.938963 139966267543552 alphageometry.py:566] LM output (score=-2.562952): "i : D d g d i 10 T d h g i 11 ;"
I0124 00:50:59.939000 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d g, on_tline i g d h"

I0124 00:50:59.939039 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i d g, on_tline i g d h ? cong b e a g"
I0124 00:50:59.939162 139966267543552 graph.py:498] 
I0124 00:50:59.939210 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i d g, on_tline i g d h ? cong b e a g
I0124 00:51:00.535971 139966267543552 ddar.py:60] Depth 1/1000 time = 0.5823559761047363
I0124 00:51:00.988717 139966267543552 ddar.py:60] Depth 2/1000 time = 0.4525766372680664
I0124 00:51:02.012931 139966267543552 ddar.py:60] Depth 3/1000 time = 1.0240552425384521
I0124 00:51:03.710175 139966267543552 ddar.py:60] Depth 4/1000 time = 1.6970648765563965
I0124 00:51:05.305837 139966267543552 ddar.py:60] Depth 5/1000 time = 1.5954794883728027
I0124 00:51:07.047836 139966267543552 ddar.py:60] Depth 6/1000 time = 1.7418181896209717
I0124 00:51:09.243646 139966267543552 ddar.py:60] Depth 7/1000 time = 2.1954293251037598
I0124 00:51:09.250731 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:51:09.250814 139966267543552 alphageometry.py:566] LM output (score=-2.576027): "i : D d i d e 10 T a c d i 11 ;"
I0124 00:51:09.250851 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e, on_tline i d a c"

I0124 00:51:09.250896 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i d e, on_tline i d a c ? cong b e a g"
I0124 00:51:09.251036 139966267543552 graph.py:498] 
I0124 00:51:09.251091 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i d e, on_tline i d a c ? cong b e a g
I0124 00:51:09.534046 139966267543552 ddar.py:60] Depth 1/1000 time = 0.269852876663208
I0124 00:51:10.462938 139966267543552 ddar.py:60] Depth 2/1000 time = 0.9287502765655518
I0124 00:51:11.458447 139966267543552 ddar.py:60] Depth 3/1000 time = 0.9953100681304932
I0124 00:51:12.450418 139966267543552 ddar.py:60] Depth 4/1000 time = 0.991657018661499
I0124 00:51:13.539185 139966267543552 ddar.py:60] Depth 5/1000 time = 1.0871474742889404
I0124 00:51:14.710928 139966267543552 ddar.py:60] Depth 6/1000 time = 1.1715667247772217
I0124 00:51:15.896265 139966267543552 ddar.py:60] Depth 7/1000 time = 1.185152530670166
I0124 00:51:17.099904 139966267543552 ddar.py:60] Depth 8/1000 time = 1.1977097988128662
I0124 00:51:17.100102 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:51:17.100152 139966267543552 alphageometry.py:566] LM output (score=-2.672042): "i : D a e a i 10 D e h h i 11 ;"
I0124 00:51:17.100186 139966267543552 alphageometry.py:567] Translation: "i = on_circle i a e, on_circle i h e"

I0124 00:51:17.100223 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i a e, on_circle i h e ? cong b e a g"
I0124 00:51:17.100345 139966267543552 graph.py:498] 
I0124 00:51:17.100394 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i a e, on_circle i h e ? cong b e a g
I0124 00:51:17.288355 139966267543552 ddar.py:60] Depth 1/1000 time = 0.16919159889221191
I0124 00:51:17.828716 139966267543552 ddar.py:60] Depth 2/1000 time = 0.5402698516845703
I0124 00:51:19.118672 139966267543552 ddar.py:60] Depth 3/1000 time = 1.2898075580596924
I0124 00:51:20.472211 139966267543552 ddar.py:60] Depth 4/1000 time = 1.3533518314361572
I0124 00:51:21.816048 139966267543552 ddar.py:60] Depth 5/1000 time = 1.3435311317443848
I0124 00:51:23.613200 139966267543552 ddar.py:60] Depth 6/1000 time = 1.7901692390441895
I0124 00:51:23.613390 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:51:23.613438 139966267543552 alphageometry.py:566] LM output (score=-2.719443): "i : D a i c i 10 D c i d i 11 ;"
I0124 00:51:23.613472 139966267543552 alphageometry.py:567] Translation: "i = on_bline i c a, on_bline i d c"

I0124 00:51:23.613509 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_bline i c a, on_bline i d c ? cong b e a g"
I0124 00:51:23.613631 139966267543552 graph.py:498] 
I0124 00:51:23.613689 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_bline i c a, on_bline i d c ? cong b e a g
I0124 00:51:23.953294 139966267543552 ddar.py:60] Depth 1/1000 time = 0.32115888595581055
I0124 00:51:24.825744 139966267543552 ddar.py:60] Depth 2/1000 time = 0.8723139762878418
I0124 00:51:25.793690 139966267543552 ddar.py:60] Depth 3/1000 time = 0.9677700996398926
I0124 00:51:26.305131 139966267543552 ddar.py:60] Depth 4/1000 time = 0.5111651420593262
I0124 00:51:27.269945 139966267543552 ddar.py:60] Depth 5/1000 time = 0.9637341499328613
I0124 00:51:28.288872 139966267543552 ddar.py:60] Depth 6/1000 time = 1.016561508178711
I0124 00:51:29.300214 139966267543552 ddar.py:60] Depth 7/1000 time = 1.0111405849456787
I0124 00:51:30.410367 139966267543552 ddar.py:60] Depth 8/1000 time = 1.1099655628204346
I0124 00:51:31.496527 139966267543552 ddar.py:60] Depth 9/1000 time = 1.085977554321289
I0124 00:51:32.672804 139966267543552 ddar.py:60] Depth 10/1000 time = 1.1760904788970947
I0124 00:51:32.674880 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:51:32.674941 139966267543552 alphageometry.py:566] LM output (score=-2.773395): "i : C d f i 10 D d i f i 11 ;"
I0124 00:51:32.674974 139966267543552 alphageometry.py:567] Translation: "i = on_line i d f, on_bline i f d"

I0124 00:51:32.675009 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_line i d f, on_bline i f d ? cong b e a g"
I0124 00:51:32.675136 139966267543552 graph.py:498] 
I0124 00:51:32.675189 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_line i d f, on_bline i f d ? cong b e a g
I0124 00:51:32.905774 139966267543552 ddar.py:60] Depth 1/1000 time = 0.21442627906799316
I0124 00:51:34.467629 139966267543552 ddar.py:60] Depth 2/1000 time = 1.5617616176605225
I0124 00:51:36.157522 139966267543552 ddar.py:60] Depth 3/1000 time = 1.6897304058074951
I0124 00:51:37.409409 139966267543552 ddar.py:60] Depth 4/1000 time = 1.2517004013061523
I0124 00:51:39.098089 139966267543552 ddar.py:60] Depth 5/1000 time = 1.6879582405090332
I0124 00:51:39.100947 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:51:39.100998 139966267543552 alphageometry.py:566] LM output (score=-2.857791): "i : C c f i 10 D c i f i 11 ;"
I0124 00:51:39.101031 139966267543552 alphageometry.py:567] Translation: "i = on_line i c f, on_bline i f c"

I0124 00:51:39.101080 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_line i c f, on_bline i f c ? cong b e a g"
I0124 00:51:39.101202 139966267543552 graph.py:498] 
I0124 00:51:39.101248 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_line i c f, on_bline i f c ? cong b e a g
I0124 00:51:39.782836 139966267543552 ddar.py:60] Depth 1/1000 time = 0.6664676666259766
I0124 00:51:40.944884 139966267543552 ddar.py:60] Depth 2/1000 time = 1.1618833541870117
I0124 00:51:42.671522 139966267543552 ddar.py:60] Depth 3/1000 time = 1.7264716625213623
I0124 00:51:44.397049 139966267543552 ddar.py:60] Depth 4/1000 time = 1.725346326828003
I0124 00:51:46.621702 139966267543552 ddar.py:60] Depth 5/1000 time = 2.2241885662078857
I0124 00:51:46.625850 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:51:46.625922 139966267543552 alphageometry.py:566] LM output (score=-2.985936): "i : D d f h i 10 P d f h i 11 ;"
I0124 00:51:46.625957 139966267543552 alphageometry.py:567] Translation: "i = eqdistance i h d f, on_pline i h d f"

I0124 00:51:46.626003 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = eqdistance i h d f, on_pline i h d f ? cong b e a g"
I0124 00:51:46.626145 139966267543552 graph.py:498] 
I0124 00:51:46.626197 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = eqdistance i h d f, on_pline i h d f ? cong b e a g
I0124 00:51:46.841252 139966267543552 ddar.py:60] Depth 1/1000 time = 0.19994378089904785
I0124 00:51:47.690909 139966267543552 ddar.py:60] Depth 2/1000 time = 0.849560022354126
I0124 00:51:49.638949 139966267543552 ddar.py:60] Depth 3/1000 time = 1.9478631019592285
I0124 00:51:51.124504 139966267543552 ddar.py:60] Depth 4/1000 time = 1.4853887557983398
I0124 00:51:52.630864 139966267543552 ddar.py:60] Depth 5/1000 time = 1.5061793327331543
I0124 00:51:54.122722 139966267543552 ddar.py:60] Depth 6/1000 time = 1.4914851188659668
I0124 00:51:54.127601 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:51:54.127655 139966267543552 alphageometry.py:566] LM output (score=-3.094905): "i : D d f d i 10 T a c d i 11 ;"
I0124 00:51:54.127689 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d f, on_tline i d a c"

I0124 00:51:54.127725 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i d f, on_tline i d a c ? cong b e a g"
I0124 00:51:54.127846 139966267543552 graph.py:498] 
I0124 00:51:54.127892 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i d f, on_tline i d a c ? cong b e a g
I0124 00:51:54.866054 139966267543552 ddar.py:60] Depth 1/1000 time = 0.7250463962554932
I0124 00:51:55.809284 139966267543552 ddar.py:60] Depth 2/1000 time = 0.9430694580078125
I0124 00:51:56.828870 139966267543552 ddar.py:60] Depth 3/1000 time = 1.0194151401519775
I0124 00:51:57.387618 139966267543552 ddar.py:60] Depth 4/1000 time = 0.558445930480957
I0124 00:51:58.458480 139966267543552 ddar.py:60] Depth 5/1000 time = 1.0695483684539795
I0124 00:51:59.609874 139966267543552 ddar.py:60] Depth 6/1000 time = 1.1512236595153809
I0124 00:52:00.781732 139966267543552 ddar.py:60] Depth 7/1000 time = 1.171661615371704
I0124 00:52:01.980003 139966267543552 ddar.py:60] Depth 8/1000 time = 1.1924989223480225
I0124 00:52:01.980182 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:52:01.980227 139966267543552 alphageometry.py:566] LM output (score=-3.143476): "i : C a g i 10 D a i g i 11 ;"
I0124 00:52:01.980259 139966267543552 alphageometry.py:567] Translation: "i = on_line i a g, on_bline i g a"

I0124 00:52:01.980294 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_line i a g, on_bline i g a ? cong b e a g"
I0124 00:52:01.980413 139966267543552 graph.py:498] 
I0124 00:52:01.980459 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_line i a g, on_bline i g a ? cong b e a g
I0124 00:52:02.675536 139966267543552 ddar.py:60] Depth 1/1000 time = 0.6815900802612305
I0124 00:52:04.332516 139966267543552 ddar.py:60] Depth 2/1000 time = 1.6568217277526855
I0124 00:52:06.151396 139966267543552 ddar.py:60] Depth 3/1000 time = 1.8187041282653809
I0124 00:52:07.970516 139966267543552 ddar.py:60] Depth 4/1000 time = 1.8188824653625488
I0124 00:52:09.773370 139966267543552 ddar.py:60] Depth 5/1000 time = 1.8024909496307373
I0124 00:52:09.776575 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:52:09.776636 139966267543552 alphageometry.py:566] LM output (score=-3.148780): "i : D a b a i 10 D b d d i 11 ;"
I0124 00:52:09.776670 139966267543552 alphageometry.py:567] Translation: "i = on_circle i a b, on_circle i d b"

I0124 00:52:09.776706 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i a b, on_circle i d b ? cong b e a g"
I0124 00:52:09.776838 139966267543552 graph.py:498] 
I0124 00:52:09.776893 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h f g, on_bline h g f; i = on_circle i a b, on_circle i d b ? cong b e a g
I0124 00:52:09.968840 139966267543552 ddar.py:60] Depth 1/1000 time = 0.17318058013916016
I0124 00:52:10.434418 139966267543552 ddar.py:60] Depth 2/1000 time = 0.46549129486083984
I0124 00:52:11.440834 139966267543552 ddar.py:60] Depth 3/1000 time = 1.0062682628631592
I0124 00:52:12.502642 139966267543552 ddar.py:60] Depth 4/1000 time = 1.0616273880004883
I0124 00:52:13.566848 139966267543552 ddar.py:60] Depth 5/1000 time = 1.063908338546753
I0124 00:52:13.570467 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:52:13.570524 139966267543552 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : T a c d h 08 T a h c d 09 ; x00
I0124 00:52:20.281723 139966267543552 alphageometry.py:566] LM output (score=-0.207536): "i : C a c i 10 T a c d i 11 ;"
I0124 00:52:20.281870 139966267543552 alphageometry.py:567] Translation: "i = on_line i a c, on_tline i d a c"

I0124 00:52:20.281911 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_line i a c, on_tline i d a c ? cong b e a g"
I0124 00:52:20.283266 139966267543552 graph.py:498] 
I0124 00:52:20.283317 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_line i a c, on_tline i d a c ? cong b e a g
I0124 00:52:20.432150 139966267543552 ddar.py:60] Depth 1/1000 time = 0.13877654075622559
I0124 00:52:21.292824 139966267543552 ddar.py:60] Depth 2/1000 time = 0.8605835437774658
I0124 00:52:22.433116 139966267543552 ddar.py:60] Depth 3/1000 time = 1.1401233673095703
I0124 00:52:24.243544 139966267543552 ddar.py:60] Depth 4/1000 time = 1.8102571964263916
I0124 00:52:25.957028 139966267543552 ddar.py:60] Depth 5/1000 time = 1.7133066654205322
I0124 00:52:27.685882 139966267543552 ddar.py:60] Depth 6/1000 time = 1.7286808490753174
I0124 00:52:27.696924 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:52:27.696976 139966267543552 alphageometry.py:566] LM output (score=-1.144778): "i : C b c i 10 T b c d i 11 ;"
I0124 00:52:27.697010 139966267543552 alphageometry.py:567] Translation: "i = on_line i b c, on_tline i d b c"

I0124 00:52:27.697046 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_line i b c, on_tline i d b c ? cong b e a g"
I0124 00:52:27.697167 139966267543552 graph.py:498] 
I0124 00:52:27.697213 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_line i b c, on_tline i d b c ? cong b e a g
I0124 00:52:27.817883 139966267543552 ddar.py:60] Depth 1/1000 time = 0.10653996467590332
I0124 00:52:27.966164 139966267543552 ddar.py:60] Depth 2/1000 time = 0.14821338653564453
I0124 00:52:28.167811 139966267543552 ddar.py:60] Depth 3/1000 time = 0.20157623291015625
I0124 00:52:28.374662 139966267543552 ddar.py:60] Depth 4/1000 time = 0.20669031143188477
I0124 00:52:28.584246 139966267543552 ddar.py:60] Depth 5/1000 time = 0.20716452598571777
I0124 00:52:28.584323 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:52:28.584363 139966267543552 alphageometry.py:566] LM output (score=-1.492760): "i : D d i d e 10 T b c d i 11 ;"
I0124 00:52:28.584395 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e, on_tline i d b c"

I0124 00:52:28.584427 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_circle i d e, on_tline i d b c ? cong b e a g"
I0124 00:52:28.584539 139966267543552 graph.py:498] 
I0124 00:52:28.584584 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_circle i d e, on_tline i d b c ? cong b e a g
I0124 00:52:28.785360 139966267543552 ddar.py:60] Depth 1/1000 time = 0.18605732917785645
I0124 00:52:29.073146 139966267543552 ddar.py:60] Depth 2/1000 time = 0.2877068519592285
I0124 00:52:29.361909 139966267543552 ddar.py:60] Depth 3/1000 time = 0.288677453994751
I0124 00:52:30.100085 139966267543552 ddar.py:60] Depth 4/1000 time = 0.737983226776123
I0124 00:52:30.395876 139966267543552 ddar.py:60] Depth 5/1000 time = 0.29305267333984375
I0124 00:52:30.764410 139966267543552 ddar.py:60] Depth 6/1000 time = 0.36522793769836426
I0124 00:52:30.764508 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:52:30.764550 139966267543552 alphageometry.py:566] LM output (score=-1.731186): "i : C a h i 10 D a i h i 11 ;"
I0124 00:52:30.764582 139966267543552 alphageometry.py:567] Translation: "i = on_line i a h, on_bline i h a"

I0124 00:52:30.764614 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_line i a h, on_bline i h a ? cong b e a g"
I0124 00:52:30.764754 139966267543552 graph.py:498] 
I0124 00:52:30.764800 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_line i a h, on_bline i h a ? cong b e a g
I0124 00:52:30.884129 139966267543552 ddar.py:60] Depth 1/1000 time = 0.10608816146850586
I0124 00:52:31.442225 139966267543552 ddar.py:60] Depth 2/1000 time = 0.5579988956451416
I0124 00:52:31.562250 139966267543552 ddar.py:60] Depth 3/1000 time = 0.11975622177124023
I0124 00:52:31.684028 139966267543552 ddar.py:60] Depth 4/1000 time = 0.12045145034790039
I0124 00:52:31.684288 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:52:31.684334 139966267543552 alphageometry.py:566] LM output (score=-1.979851): "i : D d h d i 10 ;"
I0124 00:52:31.684367 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d h"

I0124 00:52:31.684400 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_circle i d h ? cong b e a g"
I0124 00:52:31.684518 139966267543552 graph.py:498] 
I0124 00:52:31.684563 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_circle i d h ? cong b e a g
I0124 00:52:31.785635 139966267543552 ddar.py:60] Depth 1/1000 time = 0.08858299255371094
I0124 00:52:31.893956 139966267543552 ddar.py:60] Depth 2/1000 time = 0.10824775695800781
I0124 00:52:32.003019 139966267543552 ddar.py:60] Depth 3/1000 time = 0.10890793800354004
I0124 00:52:32.114757 139966267543552 ddar.py:60] Depth 4/1000 time = 0.1103963851928711
I0124 00:52:32.114828 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:52:32.114866 139966267543552 alphageometry.py:566] LM output (score=-2.051161): "i : D d i d h 10 T b c d i 11 ;"
I0124 00:52:32.114897 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d h, on_tline i d b c"

I0124 00:52:32.114928 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_circle i d h, on_tline i d b c ? cong b e a g"
I0124 00:52:32.115036 139966267543552 graph.py:498] 
I0124 00:52:32.115080 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_circle i d h, on_tline i d b c ? cong b e a g
I0124 00:52:32.232570 139966267543552 ddar.py:60] Depth 1/1000 time = 0.10162019729614258
I0124 00:52:32.371658 139966267543552 ddar.py:60] Depth 2/1000 time = 0.13901925086975098
I0124 00:52:32.548087 139966267543552 ddar.py:60] Depth 3/1000 time = 0.17636322975158691
I0124 00:52:32.772465 139966267543552 ddar.py:60] Depth 4/1000 time = 0.22430872917175293
I0124 00:52:33.013868 139966267543552 ddar.py:60] Depth 5/1000 time = 0.2413349151611328
I0124 00:52:33.282042 139966267543552 ddar.py:60] Depth 6/1000 time = 0.26810359954833984
I0124 00:52:33.597822 139966267543552 ddar.py:60] Depth 7/1000 time = 0.31571245193481445
I0124 00:52:33.893186 139966267543552 ddar.py:60] Depth 8/1000 time = 0.2952890396118164
I0124 00:52:34.193233 139966267543552 ddar.py:60] Depth 9/1000 time = 0.29987025260925293
I0124 00:52:34.200848 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:52:34.200896 139966267543552 alphageometry.py:566] LM output (score=-2.187460): "i : D a c a i 10 D c d d i 11 ;"
I0124 00:52:34.200928 139966267543552 alphageometry.py:567] Translation: "i = on_circle i a c, on_circle i d c"

I0124 00:52:34.200979 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_circle i a c, on_circle i d c ? cong b e a g"
I0124 00:52:34.201092 139966267543552 graph.py:498] 
I0124 00:52:34.201136 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_circle i a c, on_circle i d c ? cong b e a g
I0124 00:52:34.338238 139966267543552 ddar.py:60] Depth 1/1000 time = 0.12102079391479492
I0124 00:52:34.499649 139966267543552 ddar.py:60] Depth 2/1000 time = 0.16133832931518555
I0124 00:52:34.744616 139966267543552 ddar.py:60] Depth 3/1000 time = 0.24489569664001465
I0124 00:52:35.147193 139966267543552 ddar.py:60] Depth 4/1000 time = 0.40250515937805176
I0124 00:52:36.044493 139966267543552 ddar.py:60] Depth 5/1000 time = 0.8972094058990479
I0124 00:52:36.690560 139966267543552 ddar.py:60] Depth 6/1000 time = 0.6459205150604248
I0124 00:52:37.285728 139966267543552 ddar.py:60] Depth 7/1000 time = 0.5950734615325928
I0124 00:52:38.303713 139966267543552 ddar.py:60] Depth 8/1000 time = 1.0177619457244873
I0124 00:52:38.314253 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:52:38.314318 139966267543552 alphageometry.py:566] LM output (score=-2.226573): "i : D d i d e 10 T a c d i 11 ;"
I0124 00:52:38.314354 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e, on_tline i d a c"

I0124 00:52:38.314389 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_circle i d e, on_tline i d a c ? cong b e a g"
I0124 00:52:38.314512 139966267543552 graph.py:498] 
I0124 00:52:38.314558 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_circle i d e, on_tline i d a c ? cong b e a g
I0124 00:52:38.538475 139966267543552 ddar.py:60] Depth 1/1000 time = 0.2123725414276123
I0124 00:52:38.829468 139966267543552 ddar.py:60] Depth 2/1000 time = 0.29090332984924316
I0124 00:52:39.600465 139966267543552 ddar.py:60] Depth 3/1000 time = 0.7708828449249268
I0124 00:52:39.902242 139966267543552 ddar.py:60] Depth 4/1000 time = 0.3015127182006836
I0124 00:52:40.284765 139966267543552 ddar.py:60] Depth 5/1000 time = 0.3810436725616455
I0124 00:52:41.402077 139966267543552 ddar.py:60] Depth 6/1000 time = 1.1171870231628418
I0124 00:52:42.491041 139966267543552 ddar.py:60] Depth 7/1000 time = 1.0887846946716309
I0124 00:52:43.175747 139966267543552 ddar.py:60] Depth 8/1000 time = 0.6845293045043945
I0124 00:52:44.361518 139966267543552 ddar.py:60] Depth 9/1000 time = 1.185612678527832
I0124 00:52:46.565490 139966267543552 ddar.py:60] Depth 10/1000 time = 2.203796863555908
I0124 00:52:48.767703 139966267543552 ddar.py:60] Depth 11/1000 time = 2.2020156383514404
I0124 00:52:50.939810 139966267543552 ddar.py:60] Depth 12/1000 time = 2.1719274520874023
I0124 00:52:50.952134 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:52:50.952189 139966267543552 alphageometry.py:566] LM output (score=-2.472803): "i : T a c d i 10 T a i c d 11 ;"
I0124 00:52:50.952223 139966267543552 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0124 00:52:50.952260 139966267543552 alphageometry.py:566] LM output (score=-2.590741): "i : D a h h i 10 ;"
I0124 00:52:50.952300 139966267543552 alphageometry.py:567] Translation: "i = on_circle i h a"

I0124 00:52:50.952332 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_circle i h a ? cong b e a g"
I0124 00:52:50.952452 139966267543552 graph.py:498] 
I0124 00:52:50.952498 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_circle i h a ? cong b e a g
I0124 00:52:51.051595 139966267543552 ddar.py:60] Depth 1/1000 time = 0.08635640144348145
I0124 00:52:51.156068 139966267543552 ddar.py:60] Depth 2/1000 time = 0.10440325736999512
I0124 00:52:51.260982 139966267543552 ddar.py:60] Depth 3/1000 time = 0.10476016998291016
I0124 00:52:51.369723 139966267543552 ddar.py:60] Depth 4/1000 time = 0.10741662979125977
I0124 00:52:51.369795 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:52:51.369839 139966267543552 alphageometry.py:566] LM output (score=-2.602925): "i : D a c a i 10 D c h h i 11 ;"
I0124 00:52:51.369871 139966267543552 alphageometry.py:567] Translation: "i = on_circle i a c, on_circle i h c"

I0124 00:52:51.369904 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_circle i a c, on_circle i h c ? cong b e a g"
I0124 00:52:51.370013 139966267543552 graph.py:498] 
I0124 00:52:51.370059 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_circle i a c, on_circle i h c ? cong b e a g
I0124 00:52:51.510395 139966267543552 ddar.py:60] Depth 1/1000 time = 0.12428164482116699
I0124 00:52:51.698602 139966267543552 ddar.py:60] Depth 2/1000 time = 0.18813586235046387
I0124 00:52:52.359216 139966267543552 ddar.py:60] Depth 3/1000 time = 0.6605267524719238
I0124 00:52:52.584612 139966267543552 ddar.py:60] Depth 4/1000 time = 0.22525548934936523
I0124 00:52:52.847927 139966267543552 ddar.py:60] Depth 5/1000 time = 0.26323604583740234
I0124 00:52:53.106118 139966267543552 ddar.py:60] Depth 6/1000 time = 0.2581191062927246
I0124 00:52:53.365737 139966267543552 ddar.py:60] Depth 7/1000 time = 0.2594294548034668
I0124 00:52:53.370707 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:52:53.370766 139966267543552 alphageometry.py:566] LM output (score=-2.633073): "i : D a h a i 10 D d h d i 11 ;"
I0124 00:52:53.370800 139966267543552 alphageometry.py:567] Translation: "i = on_circle i a h, on_circle i d h"

I0124 00:52:53.370835 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_circle i a h, on_circle i d h ? cong b e a g"
I0124 00:52:53.370964 139966267543552 graph.py:498] 
I0124 00:52:53.371015 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_circle i a h, on_circle i d h ? cong b e a g
I0124 00:52:53.509403 139966267543552 ddar.py:60] Depth 1/1000 time = 0.12198615074157715
I0124 00:52:53.666334 139966267543552 ddar.py:60] Depth 2/1000 time = 0.1568620204925537
I0124 00:52:53.903883 139966267543552 ddar.py:60] Depth 3/1000 time = 0.23748040199279785
I0124 00:52:54.340961 139966267543552 ddar.py:60] Depth 4/1000 time = 0.43699145317077637
I0124 00:52:54.757289 139966267543552 ddar.py:60] Depth 5/1000 time = 0.4162099361419678
I0124 00:52:55.674343 139966267543552 ddar.py:60] Depth 6/1000 time = 0.9168455600738525
I0124 00:52:55.680791 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:52:55.680843 139966267543552 alphageometry.py:566] LM output (score=-2.715675): "i : T b c d i 10 ;"
I0124 00:52:55.680877 139966267543552 alphageometry.py:567] Translation: "i = on_tline i d b c"

I0124 00:52:55.680914 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_tline i d b c ? cong b e a g"
I0124 00:52:55.681037 139966267543552 graph.py:498] 
I0124 00:52:55.681095 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_tline i d b c ? cong b e a g
I0124 00:52:55.778307 139966267543552 ddar.py:60] Depth 1/1000 time = 0.08318233489990234
I0124 00:52:55.884750 139966267543552 ddar.py:60] Depth 2/1000 time = 0.10634922981262207
I0124 00:52:55.990430 139966267543552 ddar.py:60] Depth 3/1000 time = 0.10546159744262695
I0124 00:52:56.100027 139966267543552 ddar.py:60] Depth 4/1000 time = 0.1071634292602539
I0124 00:52:56.100104 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:52:56.100155 139966267543552 alphageometry.py:566] LM output (score=-2.913043): "i : T a c d i 10 T a h c i 11 ;"
I0124 00:52:56.100188 139966267543552 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0124 00:52:56.100227 139966267543552 alphageometry.py:566] LM output (score=-3.014801): "i : D a h a i 10 ;"
I0124 00:52:56.100255 139966267543552 alphageometry.py:567] Translation: "i = on_circle i a h"

I0124 00:52:56.100285 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_circle i a h ? cong b e a g"
I0124 00:52:56.100404 139966267543552 graph.py:498] 
I0124 00:52:56.100450 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_circle i a h ? cong b e a g
I0124 00:52:56.200272 139966267543552 ddar.py:60] Depth 1/1000 time = 0.08751249313354492
I0124 00:52:56.307338 139966267543552 ddar.py:60] Depth 2/1000 time = 0.10700273513793945
I0124 00:52:56.416313 139966267543552 ddar.py:60] Depth 3/1000 time = 0.10881972312927246
I0124 00:52:56.527203 139966267543552 ddar.py:60] Depth 4/1000 time = 0.10953760147094727
I0124 00:52:56.527274 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:52:56.527312 139966267543552 alphageometry.py:566] LM output (score=-3.125053): "i : D a c c i 10 D a d d i 11 ;"
I0124 00:52:56.527344 139966267543552 alphageometry.py:567] Translation: "i = on_circle i c a, on_circle i d a"

I0124 00:52:56.527375 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_circle i c a, on_circle i d a ? cong b e a g"
I0124 00:52:56.527483 139966267543552 graph.py:498] 
I0124 00:52:56.527526 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_circle i c a, on_circle i d a ? cong b e a g
I0124 00:52:56.666189 139966267543552 ddar.py:60] Depth 1/1000 time = 0.12274551391601562
I0124 00:52:56.857728 139966267543552 ddar.py:60] Depth 2/1000 time = 0.1914656162261963
I0124 00:52:57.060449 139966267543552 ddar.py:60] Depth 3/1000 time = 0.2026529312133789
I0124 00:52:57.329254 139966267543552 ddar.py:60] Depth 4/1000 time = 0.26873183250427246
I0124 00:52:57.653878 139966267543552 ddar.py:60] Depth 5/1000 time = 0.3245425224304199
I0124 00:52:58.127684 139966267543552 ddar.py:60] Depth 6/1000 time = 0.473710298538208
I0124 00:52:58.570338 139966267543552 ddar.py:60] Depth 7/1000 time = 0.44257211685180664
I0124 00:52:59.011373 139966267543552 ddar.py:60] Depth 8/1000 time = 0.44083309173583984
I0124 00:52:59.019971 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:52:59.020026 139966267543552 alphageometry.py:566] LM output (score=-3.161569): "i : C a h i 10 D a h a i 11 ;"
I0124 00:52:59.020059 139966267543552 alphageometry.py:567] Translation: "i = on_line i a h, on_circle i a h"

I0124 00:52:59.020097 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_line i a h, on_circle i a h ? cong b e a g"
I0124 00:52:59.020212 139966267543552 graph.py:498] 
I0124 00:52:59.020257 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_line i a h, on_circle i a h ? cong b e a g
I0124 00:52:59.136925 139966267543552 ddar.py:60] Depth 1/1000 time = 0.1037747859954834
I0124 00:52:59.257612 139966267543552 ddar.py:60] Depth 2/1000 time = 0.12061142921447754
I0124 00:52:59.385400 139966267543552 ddar.py:60] Depth 3/1000 time = 0.12761473655700684
I0124 00:52:59.510085 139966267543552 ddar.py:60] Depth 4/1000 time = 0.12334489822387695
I0124 00:52:59.510428 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:52:59.510470 139966267543552 alphageometry.py:566] LM output (score=-3.180126): "i : D d i d h 10 T a c d i 11 ;"
I0124 00:52:59.510501 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d h, on_tline i d a c"

I0124 00:52:59.510533 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_circle i d h, on_tline i d a c ? cong b e a g"
I0124 00:52:59.510642 139966267543552 graph.py:498] 
I0124 00:52:59.510686 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_circle i d h, on_tline i d a c ? cong b e a g
I0124 00:52:59.647355 139966267543552 ddar.py:60] Depth 1/1000 time = 0.12361025810241699
I0124 00:52:59.853209 139966267543552 ddar.py:60] Depth 2/1000 time = 0.20578432083129883
I0124 00:53:00.060381 139966267543552 ddar.py:60] Depth 3/1000 time = 0.20710182189941406
I0124 00:53:00.269932 139966267543552 ddar.py:60] Depth 4/1000 time = 0.20937848091125488
I0124 00:53:00.962906 139966267543552 ddar.py:60] Depth 5/1000 time = 0.6916036605834961
I0124 00:53:00.964047 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:53:00.964095 139966267543552 alphageometry.py:566] LM output (score=-3.315507): "i : T a c d i 10 ;"
I0124 00:53:00.964129 139966267543552 alphageometry.py:567] Translation: "i = on_tline i d a c"

I0124 00:53:00.964165 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_tline i d a c ? cong b e a g"
I0124 00:53:00.964283 139966267543552 graph.py:498] 
I0124 00:53:00.964329 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_tline i d a c ? cong b e a g
I0124 00:53:01.064854 139966267543552 ddar.py:60] Depth 1/1000 time = 0.09020256996154785
I0124 00:53:01.178153 139966267543552 ddar.py:60] Depth 2/1000 time = 0.11323213577270508
I0124 00:53:01.285250 139966267543552 ddar.py:60] Depth 3/1000 time = 0.10694575309753418
I0124 00:53:01.394541 139966267543552 ddar.py:60] Depth 4/1000 time = 0.10803079605102539
I0124 00:53:01.394608 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:53:01.394649 139966267543552 alphageometry.py:566] LM output (score=-3.375651): "i : D a i d i 10 D a i h i 11 ;"
I0124 00:53:01.394681 139966267543552 alphageometry.py:567] Translation: "i = on_bline i d a, on_bline i h a"

I0124 00:53:01.394713 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_bline i d a, on_bline i h a ? cong b e a g"
I0124 00:53:01.394822 139966267543552 graph.py:498] 
I0124 00:53:01.394866 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_bline i d a, on_bline i h a ? cong b e a g
I0124 00:53:01.621937 139966267543552 ddar.py:60] Depth 1/1000 time = 0.20646309852600098
I0124 00:53:01.845170 139966267543552 ddar.py:60] Depth 2/1000 time = 0.22315716743469238
I0124 00:53:02.070548 139966267543552 ddar.py:60] Depth 3/1000 time = 0.2252025604248047
I0124 00:53:02.789088 139966267543552 ddar.py:60] Depth 4/1000 time = 0.715087890625
I0124 00:53:03.047791 139966267543552 ddar.py:60] Depth 5/1000 time = 0.25854015350341797
I0124 00:53:03.301611 139966267543552 ddar.py:60] Depth 6/1000 time = 0.253720760345459
I0124 00:53:04.077422 139966267543552 ddar.py:60] Depth 7/1000 time = 0.7732257843017578
I0124 00:53:04.077592 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:53:04.077636 139966267543552 alphageometry.py:566] LM output (score=-3.391316): "i : T b c d i 10 T b i c d 11 ;"
I0124 00:53:04.077675 139966267543552 alphageometry.py:567] Translation: "i = on_tline i d b c, on_tline i b c d"

I0124 00:53:04.077711 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_tline i d b c, on_tline i b c d ? cong b e a g"
I0124 00:53:04.077835 139966267543552 graph.py:498] 
I0124 00:53:04.077880 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_tline i d b c, on_tline i b c d ? cong b e a g
I0124 00:53:04.188033 139966267543552 ddar.py:60] Depth 1/1000 time = 0.08966779708862305
I0124 00:53:04.310307 139966267543552 ddar.py:60] Depth 2/1000 time = 0.12220954895019531
I0124 00:53:04.434203 139966267543552 ddar.py:60] Depth 3/1000 time = 0.12367892265319824
I0124 00:53:04.558766 139966267543552 ddar.py:60] Depth 4/1000 time = 0.12191653251647949
I0124 00:53:04.558840 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:53:04.558880 139966267543552 alphageometry.py:566] LM output (score=-3.396815): "i : T c h e i 10 ;"
I0124 00:53:04.558911 139966267543552 alphageometry.py:567] Translation: "i = on_tline i e c h"

I0124 00:53:04.558943 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_tline i e c h ? cong b e a g"
I0124 00:53:04.559052 139966267543552 graph.py:498] 
I0124 00:53:04.559110 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_tline i e c h ? cong b e a g
I0124 00:53:04.658635 139966267543552 ddar.py:60] Depth 1/1000 time = 0.08576846122741699
I0124 00:53:04.766119 139966267543552 ddar.py:60] Depth 2/1000 time = 0.10741662979125977
I0124 00:53:04.875012 139966267543552 ddar.py:60] Depth 3/1000 time = 0.10874032974243164
I0124 00:53:04.987865 139966267543552 ddar.py:60] Depth 4/1000 time = 0.11044478416442871
I0124 00:53:04.987935 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:53:04.987974 139966267543552 alphageometry.py:566] LM output (score=-3.620934): "i : C a h i 10 C c d i 11 ;"
I0124 00:53:04.988006 139966267543552 alphageometry.py:567] Translation: "i = on_line i a h, on_line i c d"

I0124 00:53:04.988039 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_line i a h, on_line i c d ? cong b e a g"
I0124 00:53:04.988147 139966267543552 graph.py:498] 
I0124 00:53:04.988191 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_line i a h, on_line i c d ? cong b e a g
I0124 00:53:05.130771 139966267543552 ddar.py:60] Depth 1/1000 time = 0.13284921646118164
I0124 00:53:05.311774 139966267543552 ddar.py:60] Depth 2/1000 time = 0.18093442916870117
I0124 00:53:05.532257 139966267543552 ddar.py:60] Depth 3/1000 time = 0.22040653228759766
I0124 00:53:05.820652 139966267543552 ddar.py:60] Depth 4/1000 time = 0.28832340240478516
I0124 00:53:06.120537 139966267543552 ddar.py:60] Depth 5/1000 time = 0.29980897903442383
I0124 00:53:06.418957 139966267543552 ddar.py:60] Depth 6/1000 time = 0.2982337474822998
I0124 00:53:06.422386 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:53:06.422433 139966267543552 alphageometry.py:566] LM output (score=-3.632766): "i : T a d h i 10 T a h d i 11 ;"
I0124 00:53:06.422466 139966267543552 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0124 00:53:06.422499 139966267543552 alphageometry.py:566] LM output (score=-3.647444): "i : T a h f i 10 ;"
I0124 00:53:06.422527 139966267543552 alphageometry.py:567] Translation: "i = on_tline i f a h"

I0124 00:53:06.422558 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_tline i f a h ? cong b e a g"
I0124 00:53:06.422666 139966267543552 graph.py:498] 
I0124 00:53:06.422710 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_tline i f a h ? cong b e a g
I0124 00:53:06.517420 139966267543552 ddar.py:60] Depth 1/1000 time = 0.07993483543395996
I0124 00:53:06.613720 139966267543552 ddar.py:60] Depth 2/1000 time = 0.09623551368713379
I0124 00:53:06.711337 139966267543552 ddar.py:60] Depth 3/1000 time = 0.0974130630493164
I0124 00:53:06.811682 139966267543552 ddar.py:60] Depth 4/1000 time = 0.09852814674377441
I0124 00:53:06.811750 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:53:06.811788 139966267543552 alphageometry.py:566] LM output (score=-3.710238): "i : D a i c i 10 D c i d i 11 ;"
I0124 00:53:06.811831 139966267543552 alphageometry.py:567] Translation: "i = on_bline i c a, on_bline i d c"

I0124 00:53:06.811864 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_bline i c a, on_bline i d c ? cong b e a g"
I0124 00:53:06.811972 139966267543552 graph.py:498] 
I0124 00:53:06.812015 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_bline i c a, on_bline i d c ? cong b e a g
I0124 00:53:07.059859 139966267543552 ddar.py:60] Depth 1/1000 time = 0.22925424575805664
I0124 00:53:07.758220 139966267543552 ddar.py:60] Depth 2/1000 time = 0.6982641220092773
I0124 00:53:07.988921 139966267543552 ddar.py:60] Depth 3/1000 time = 0.23043012619018555
I0124 00:53:08.226217 139966267543552 ddar.py:60] Depth 4/1000 time = 0.23464584350585938
I0124 00:53:09.015816 139966267543552 ddar.py:60] Depth 5/1000 time = 0.7864551544189453
I0124 00:53:09.323109 139966267543552 ddar.py:60] Depth 6/1000 time = 0.30713391304016113
I0124 00:53:09.737138 139966267543552 ddar.py:60] Depth 7/1000 time = 0.4139251708984375
I0124 00:53:10.131578 139966267543552 ddar.py:60] Depth 8/1000 time = 0.3943459987640381
I0124 00:53:11.069191 139966267543552 ddar.py:60] Depth 9/1000 time = 0.9374969005584717
I0124 00:53:11.535389 139966267543552 ddar.py:60] Depth 10/1000 time = 0.46603846549987793
I0124 00:53:12.622744 139966267543552 ddar.py:60] Depth 11/1000 time = 1.0872266292572021
I0124 00:53:13.226375 139966267543552 ddar.py:60] Depth 12/1000 time = 0.6034729480743408
I0124 00:53:13.233855 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:53:13.233906 139966267543552 alphageometry.py:566] LM output (score=-3.722042): "i : ^ d a d i d h d a 10 ;"
I0124 00:53:13.233939 139966267543552 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ d a d i d h d a"

I0124 00:53:13.233974 139966267543552 alphageometry.py:566] LM output (score=-3.723383): "i : C a h i 10 D a h h i 11 ;"
I0124 00:53:13.234002 139966267543552 alphageometry.py:567] Translation: "i = on_line i a h, on_circle i h a"

I0124 00:53:13.234032 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_line i a h, on_circle i h a ? cong b e a g"
I0124 00:53:13.234147 139966267543552 graph.py:498] 
I0124 00:53:13.234193 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_line i a h, on_circle i h a ? cong b e a g
I0124 00:53:13.350068 139966267543552 ddar.py:60] Depth 1/1000 time = 0.10287952423095703
I0124 00:53:13.468644 139966267543552 ddar.py:60] Depth 2/1000 time = 0.11850762367248535
I0124 00:53:13.588240 139966267543552 ddar.py:60] Depth 3/1000 time = 0.11943268775939941
I0124 00:53:13.711867 139966267543552 ddar.py:60] Depth 4/1000 time = 0.12229800224304199
I0124 00:53:13.712218 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:53:13.712261 139966267543552 alphageometry.py:566] LM output (score=-3.741773): "i : T a h e i 10 ;"
I0124 00:53:13.712293 139966267543552 alphageometry.py:567] Translation: "i = on_tline i e a h"

I0124 00:53:13.712325 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_tline i e a h ? cong b e a g"
I0124 00:53:13.712432 139966267543552 graph.py:498] 
I0124 00:53:13.712476 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_tline i e a h ? cong b e a g
I0124 00:53:13.806797 139966267543552 ddar.py:60] Depth 1/1000 time = 0.07961487770080566
I0124 00:53:13.904332 139966267543552 ddar.py:60] Depth 2/1000 time = 0.09747004508972168
I0124 00:53:14.003625 139966267543552 ddar.py:60] Depth 3/1000 time = 0.09908890724182129
I0124 00:53:14.103884 139966267543552 ddar.py:60] Depth 4/1000 time = 0.09847450256347656
I0124 00:53:14.103956 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:53:14.103995 139966267543552 alphageometry.py:566] LM output (score=-3.770325): "i : C h f i 10 D h i f i 11 ;"
I0124 00:53:14.104027 139966267543552 alphageometry.py:567] Translation: "i = on_line i h f, on_bline i f h"

I0124 00:53:14.104059 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_line i h f, on_bline i f h ? cong b e a g"
I0124 00:53:14.104165 139966267543552 graph.py:498] 
I0124 00:53:14.104209 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_line i h f, on_bline i f h ? cong b e a g
I0124 00:53:14.221297 139966267543552 ddar.py:60] Depth 1/1000 time = 0.10452055931091309
I0124 00:53:14.360134 139966267543552 ddar.py:60] Depth 2/1000 time = 0.13876867294311523
I0124 00:53:14.503155 139966267543552 ddar.py:60] Depth 3/1000 time = 0.14295244216918945
I0124 00:53:14.648667 139966267543552 ddar.py:60] Depth 4/1000 time = 0.14533376693725586
I0124 00:53:14.798179 139966267543552 ddar.py:60] Depth 5/1000 time = 0.14812850952148438
I0124 00:53:14.798780 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:53:14.798824 139966267543552 alphageometry.py:566] LM output (score=-3.842366): "i : D a c c i 10 ;"
I0124 00:53:14.798856 139966267543552 alphageometry.py:567] Translation: "i = on_circle i c a"

I0124 00:53:14.798888 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_circle i c a ? cong b e a g"
I0124 00:53:14.798996 139966267543552 graph.py:498] 
I0124 00:53:14.799041 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_circle i c a ? cong b e a g
I0124 00:53:15.375621 139966267543552 ddar.py:60] Depth 1/1000 time = 0.5645761489868164
I0124 00:53:15.483001 139966267543552 ddar.py:60] Depth 2/1000 time = 0.10722661018371582
I0124 00:53:15.590855 139966267543552 ddar.py:60] Depth 3/1000 time = 0.10769438743591309
I0124 00:53:15.701707 139966267543552 ddar.py:60] Depth 4/1000 time = 0.10953235626220703
I0124 00:53:15.701780 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:53:15.701823 139966267543552 alphageometry.py:566] LM output (score=-4.087603): "i : C d h i 10 D d h d i 11 ;"
I0124 00:53:15.701856 139966267543552 alphageometry.py:567] Translation: "i = on_line i d h, on_circle i d h"

I0124 00:53:15.701890 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_line i d h, on_circle i d h ? cong b e a g"
I0124 00:53:15.702008 139966267543552 graph.py:498] 
I0124 00:53:15.702053 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_tline h d a c, on_tline h a c d; i = on_line i d h, on_circle i d h ? cong b e a g
I0124 00:53:15.839051 139966267543552 ddar.py:60] Depth 1/1000 time = 0.12371110916137695
I0124 00:53:16.044675 139966267543552 ddar.py:60] Depth 2/1000 time = 0.205552339553833
I0124 00:53:16.250374 139966267543552 ddar.py:60] Depth 3/1000 time = 0.2056262493133545
I0124 00:53:16.460009 139966267543552 ddar.py:60] Depth 4/1000 time = 0.20946621894836426
I0124 00:53:16.674149 139966267543552 ddar.py:60] Depth 5/1000 time = 0.2127842903137207
I0124 00:53:16.675294 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:53:16.675342 139966267543552 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : C b d h 08 D b h d h 09 ; x00
I0124 00:53:23.754420 139966267543552 alphageometry.py:566] LM output (score=-0.308136): "i : C b c i 10 T b c d i 11 ;"
I0124 00:53:23.754571 139966267543552 alphageometry.py:567] Translation: "i = on_line i b c, on_tline i d b c"

I0124 00:53:23.754612 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_line i b c, on_tline i d b c ? cong b e a g"
I0124 00:53:23.754731 139966267543552 graph.py:498] 
I0124 00:53:23.754778 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_line i b c, on_tline i d b c ? cong b e a g
I0124 00:53:23.896183 139966267543552 ddar.py:60] Depth 1/1000 time = 0.13194918632507324
I0124 00:53:24.300828 139966267543552 ddar.py:60] Depth 2/1000 time = 0.40456700325012207
I0124 00:53:25.334610 139966267543552 ddar.py:60] Depth 3/1000 time = 1.0336658954620361
I0124 00:53:25.812925 139966267543552 ddar.py:60] Depth 4/1000 time = 0.4781482219696045
I0124 00:53:26.786833 139966267543552 ddar.py:60] Depth 5/1000 time = 0.9736592769622803
I0124 00:53:26.787931 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:53:26.787991 139966267543552 alphageometry.py:566] LM output (score=-0.781064): "i : C a c i 10 T a c d i 11 ;"
I0124 00:53:26.788024 139966267543552 alphageometry.py:567] Translation: "i = on_line i a c, on_tline i d a c"

I0124 00:53:26.788059 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_line i a c, on_tline i d a c ? cong b e a g"
I0124 00:53:26.788181 139966267543552 graph.py:498] 
I0124 00:53:26.788227 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_line i a c, on_tline i d a c ? cong b e a g
I0124 00:53:26.936954 139966267543552 ddar.py:60] Depth 1/1000 time = 0.13863682746887207
I0124 00:53:27.324721 139966267543552 ddar.py:60] Depth 2/1000 time = 0.38768839836120605
I0124 00:53:28.417931 139966267543552 ddar.py:60] Depth 3/1000 time = 1.0930883884429932
I0124 00:53:28.997106 139966267543552 ddar.py:60] Depth 4/1000 time = 0.5790095329284668
I0124 00:53:30.046933 139966267543552 ddar.py:60] Depth 5/1000 time = 1.0494744777679443
I0124 00:53:30.049489 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:53:30.049538 139966267543552 alphageometry.py:566] LM output (score=-0.950111): "i : D d e d i 10 T b c d i 11 ;"
I0124 00:53:30.049571 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e, on_tline i d b c"

I0124 00:53:30.049606 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i d e, on_tline i d b c ? cong b e a g"
I0124 00:53:30.049750 139966267543552 graph.py:498] 
I0124 00:53:30.049799 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i d e, on_tline i d b c ? cong b e a g
I0124 00:53:30.270534 139966267543552 ddar.py:60] Depth 1/1000 time = 0.20891857147216797
I0124 00:53:31.098791 139966267543552 ddar.py:60] Depth 2/1000 time = 0.8281524181365967
I0124 00:53:31.444839 139966267543552 ddar.py:60] Depth 3/1000 time = 0.3458864688873291
I0124 00:53:31.794403 139966267543552 ddar.py:60] Depth 4/1000 time = 0.3492918014526367
I0124 00:53:32.669054 139966267543552 ddar.py:60] Depth 5/1000 time = 0.8725936412811279
I0124 00:53:32.669229 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:53:32.669276 139966267543552 alphageometry.py:566] LM output (score=-1.858679): "i : C b c i 10 D b i c i 11 ;"
I0124 00:53:32.669311 139966267543552 alphageometry.py:567] Translation: "i = on_line i b c, on_bline i c b"

I0124 00:53:32.669348 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_line i b c, on_bline i c b ? cong b e a g"
I0124 00:53:32.669477 139966267543552 graph.py:498] 
I0124 00:53:32.669529 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_line i b c, on_bline i c b ? cong b e a g
I0124 00:53:32.812737 139966267543552 ddar.py:60] Depth 1/1000 time = 0.13013219833374023
I0124 00:53:33.121867 139966267543552 ddar.py:60] Depth 2/1000 time = 0.3090548515319824
I0124 00:53:33.459639 139966267543552 ddar.py:60] Depth 3/1000 time = 0.33768129348754883
I0124 00:53:34.279308 139966267543552 ddar.py:60] Depth 4/1000 time = 0.8195602893829346
I0124 00:53:34.598949 139966267543552 ddar.py:60] Depth 5/1000 time = 0.3193016052246094
I0124 00:53:34.600805 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:53:34.600863 139966267543552 alphageometry.py:566] LM output (score=-2.139300): "i : D d i d e 10 T b c d i 11 ;"
I0124 00:53:34.600898 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e, on_tline i d b c"

I0124 00:53:34.600936 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i d e, on_tline i d b c ? cong b e a g"
I0124 00:53:34.601065 139966267543552 graph.py:498] 
I0124 00:53:34.601115 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i d e, on_tline i d b c ? cong b e a g
I0124 00:53:35.343073 139966267543552 ddar.py:60] Depth 1/1000 time = 0.7298569679260254
I0124 00:53:35.664897 139966267543552 ddar.py:60] Depth 2/1000 time = 0.32167768478393555
I0124 00:53:36.033343 139966267543552 ddar.py:60] Depth 3/1000 time = 0.3683490753173828
I0124 00:53:36.882831 139966267543552 ddar.py:60] Depth 4/1000 time = 0.8492085933685303
I0124 00:53:37.241004 139966267543552 ddar.py:60] Depth 5/1000 time = 0.35603880882263184
I0124 00:53:37.241108 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:53:37.241157 139966267543552 alphageometry.py:566] LM output (score=-2.186518): "i : C a b i 10 D a i b i 11 ;"
I0124 00:53:37.241190 139966267543552 alphageometry.py:567] Translation: "i = on_line i a b, on_bline i b a"

I0124 00:53:37.241226 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_line i a b, on_bline i b a ? cong b e a g"
I0124 00:53:37.241364 139966267543552 graph.py:498] 
I0124 00:53:37.241410 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_line i a b, on_bline i b a ? cong b e a g
I0124 00:53:37.441782 139966267543552 ddar.py:60] Depth 1/1000 time = 0.18687105178833008
I0124 00:53:38.418779 139966267543552 ddar.py:60] Depth 2/1000 time = 0.9768941402435303
I0124 00:53:39.419787 139966267543552 ddar.py:60] Depth 3/1000 time = 1.00083589553833
I0124 00:53:40.423921 139966267543552 ddar.py:60] Depth 4/1000 time = 1.0039522647857666
I0124 00:53:41.427930 139966267543552 ddar.py:60] Depth 5/1000 time = 1.003669261932373
I0124 00:53:41.429897 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:53:41.429952 139966267543552 alphageometry.py:566] LM output (score=-2.621589): "i : C b e i 10 D b i e i 11 ;"
I0124 00:53:41.429986 139966267543552 alphageometry.py:567] Translation: "i = on_line i b e, on_bline i e b"

I0124 00:53:41.430022 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_line i b e, on_bline i e b ? cong b e a g"
I0124 00:53:41.430143 139966267543552 graph.py:498] 
I0124 00:53:41.430190 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_line i b e, on_bline i e b ? cong b e a g
I0124 00:53:42.120088 139966267543552 ddar.py:60] Depth 1/1000 time = 0.6758253574371338
I0124 00:53:43.271315 139966267543552 ddar.py:60] Depth 2/1000 time = 1.1510624885559082
I0124 00:53:44.472473 139966267543552 ddar.py:60] Depth 3/1000 time = 1.2009925842285156
I0124 00:53:45.660640 139966267543552 ddar.py:60] Depth 4/1000 time = 1.187976360321045
I0124 00:53:47.354097 139966267543552 ddar.py:60] Depth 5/1000 time = 1.6931040287017822
I0124 00:53:47.356994 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:53:47.357044 139966267543552 alphageometry.py:566] LM output (score=-2.750447): "i : C a d i 10 D a i d i 11 ;"
I0124 00:53:47.357077 139966267543552 alphageometry.py:567] Translation: "i = on_line i a d, on_bline i d a"

I0124 00:53:47.357112 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_line i a d, on_bline i d a ? cong b e a g"
I0124 00:53:47.357232 139966267543552 graph.py:498] 
I0124 00:53:47.357278 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_line i a d, on_bline i d a ? cong b e a g
I0124 00:53:47.502791 139966267543552 ddar.py:60] Depth 1/1000 time = 0.1324164867401123
I0124 00:53:47.875041 139966267543552 ddar.py:60] Depth 2/1000 time = 0.37216639518737793
I0124 00:53:48.882353 139966267543552 ddar.py:60] Depth 3/1000 time = 1.0071895122528076
I0124 00:53:49.365819 139966267543552 ddar.py:60] Depth 4/1000 time = 0.48331141471862793
I0124 00:53:50.369146 139966267543552 ddar.py:60] Depth 5/1000 time = 1.0029947757720947
I0124 00:53:50.371527 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:53:50.371578 139966267543552 alphageometry.py:566] LM output (score=-2.767458): "i : D d e e i 10 T d e e i 11 ;"
I0124 00:53:50.371611 139966267543552 alphageometry.py:567] Translation: "i = on_circle i e d, on_tline i e d e"

I0124 00:53:50.371646 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i e d, on_tline i e d e ? cong b e a g"
I0124 00:53:50.371786 139966267543552 graph.py:498] 
I0124 00:53:50.371834 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i e d, on_tline i e d e ? cong b e a g
I0124 00:53:50.569593 139966267543552 ddar.py:60] Depth 1/1000 time = 0.18691611289978027
I0124 00:53:51.541915 139966267543552 ddar.py:60] Depth 2/1000 time = 0.9722194671630859
I0124 00:53:52.540338 139966267543552 ddar.py:60] Depth 3/1000 time = 0.998241662979126
I0124 00:53:53.547883 139966267543552 ddar.py:60] Depth 4/1000 time = 1.0071897506713867
I0124 00:53:54.569133 139966267543552 ddar.py:60] Depth 5/1000 time = 1.0209250450134277
I0124 00:53:54.569527 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:53:54.569574 139966267543552 alphageometry.py:566] LM output (score=-2.812034): "i : D d e d i 10 T c d e i 11 ;"
I0124 00:53:54.569607 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e, on_tline i e c d"

I0124 00:53:54.569647 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i d e, on_tline i e c d ? cong b e a g"
I0124 00:53:54.569773 139966267543552 graph.py:498] 
I0124 00:53:54.569820 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i d e, on_tline i e c d ? cong b e a g
I0124 00:53:54.799455 139966267543552 ddar.py:60] Depth 1/1000 time = 0.21733880043029785
I0124 00:53:55.125333 139966267543552 ddar.py:60] Depth 2/1000 time = 0.32578444480895996
I0124 00:53:56.056638 139966267543552 ddar.py:60] Depth 3/1000 time = 0.9311931133270264
I0124 00:53:56.479307 139966267543552 ddar.py:60] Depth 4/1000 time = 0.4225034713745117
I0124 00:53:56.917045 139966267543552 ddar.py:60] Depth 5/1000 time = 0.43744874000549316
I0124 00:53:57.847489 139966267543552 ddar.py:60] Depth 6/1000 time = 0.9295992851257324
I0124 00:53:58.278354 139966267543552 ddar.py:60] Depth 7/1000 time = 0.4294891357421875
I0124 00:53:59.218266 139966267543552 ddar.py:60] Depth 8/1000 time = 0.9383838176727295
I0124 00:53:59.218443 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:53:59.218488 139966267543552 alphageometry.py:566] LM output (score=-2.813521): "i : D d e d i 10 ;"
I0124 00:53:59.218521 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e"

I0124 00:53:59.218555 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i d e ? cong b e a g"
I0124 00:53:59.218671 139966267543552 graph.py:498] 
I0124 00:53:59.218716 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i d e ? cong b e a g
I0124 00:53:59.424491 139966267543552 ddar.py:60] Depth 1/1000 time = 0.19562745094299316
I0124 00:53:59.703627 139966267543552 ddar.py:60] Depth 2/1000 time = 0.2790565490722656
I0124 00:54:00.532240 139966267543552 ddar.py:60] Depth 3/1000 time = 0.8285117149353027
I0124 00:54:00.845286 139966267543552 ddar.py:60] Depth 4/1000 time = 0.31270456314086914
I0124 00:54:00.845794 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:54:00.845843 139966267543552 alphageometry.py:566] LM output (score=-2.935936): "i : D d h h i 10 T c d d i 11 ;"
I0124 00:54:00.845895 139966267543552 alphageometry.py:567] Translation: "i = on_circle i h d, on_tline i d c d"

I0124 00:54:00.845933 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i h d, on_tline i d c d ? cong b e a g"
I0124 00:54:00.846054 139966267543552 graph.py:498] 
I0124 00:54:00.846100 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i h d, on_tline i d c d ? cong b e a g
I0124 00:54:01.096908 139966267543552 ddar.py:60] Depth 1/1000 time = 0.23848176002502441
I0124 00:54:01.486686 139966267543552 ddar.py:60] Depth 2/1000 time = 0.3896970748901367
I0124 00:54:02.417901 139966267543552 ddar.py:60] Depth 3/1000 time = 0.9311108589172363
I0124 00:54:02.854420 139966267543552 ddar.py:60] Depth 4/1000 time = 0.4363529682159424
I0124 00:54:03.810259 139966267543552 ddar.py:60] Depth 5/1000 time = 0.9555580615997314
I0124 00:54:04.248284 139966267543552 ddar.py:60] Depth 6/1000 time = 0.43715333938598633
I0124 00:54:04.694307 139966267543552 ddar.py:60] Depth 7/1000 time = 0.4448564052581787
I0124 00:54:04.695650 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:54:04.695698 139966267543552 alphageometry.py:566] LM output (score=-2.953492): "i : D d e d i 10 T a c d i 11 ;"
I0124 00:54:04.695731 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e, on_tline i d a c"

I0124 00:54:04.695765 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i d e, on_tline i d a c ? cong b e a g"
I0124 00:54:04.695888 139966267543552 graph.py:498] 
I0124 00:54:04.695934 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i d e, on_tline i d a c ? cong b e a g
I0124 00:54:05.407885 139966267543552 ddar.py:60] Depth 1/1000 time = 0.6995487213134766
I0124 00:54:05.716104 139966267543552 ddar.py:60] Depth 2/1000 time = 0.3080623149871826
I0124 00:54:06.058699 139966267543552 ddar.py:60] Depth 3/1000 time = 0.3424677848815918
I0124 00:54:06.898038 139966267543552 ddar.py:60] Depth 4/1000 time = 0.8390560150146484
I0124 00:54:07.319599 139966267543552 ddar.py:60] Depth 5/1000 time = 0.42018675804138184
I0124 00:54:08.499758 139966267543552 ddar.py:60] Depth 6/1000 time = 1.180027961730957
I0124 00:54:09.103609 139966267543552 ddar.py:60] Depth 7/1000 time = 0.6036772727966309
I0124 00:54:10.299125 139966267543552 ddar.py:60] Depth 8/1000 time = 1.1953625679016113
I0124 00:54:10.301952 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:54:10.302003 139966267543552 alphageometry.py:566] LM output (score=-2.967580): "i : D d i d e 10 T a c d i 11 ;"
I0124 00:54:10.302038 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e, on_tline i d a c"

I0124 00:54:10.302074 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i d e, on_tline i d a c ? cong b e a g"
I0124 00:54:10.302193 139966267543552 graph.py:498] 
I0124 00:54:10.302239 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i d e, on_tline i d a c ? cong b e a g
I0124 00:54:10.525013 139966267543552 ddar.py:60] Depth 1/1000 time = 0.2106330394744873
I0124 00:54:10.849218 139966267543552 ddar.py:60] Depth 2/1000 time = 0.3241145610809326
I0124 00:54:11.742593 139966267543552 ddar.py:60] Depth 3/1000 time = 0.8932492733001709
I0124 00:54:12.094064 139966267543552 ddar.py:60] Depth 4/1000 time = 0.35117363929748535
I0124 00:54:12.519780 139966267543552 ddar.py:60] Depth 5/1000 time = 0.42434120178222656
I0124 00:54:13.529273 139966267543552 ddar.py:60] Depth 6/1000 time = 1.0093631744384766
I0124 00:54:14.031131 139966267543552 ddar.py:60] Depth 7/1000 time = 0.5016841888427734
I0124 00:54:15.067563 139966267543552 ddar.py:60] Depth 8/1000 time = 1.0326550006866455
I0124 00:54:15.067744 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:54:15.067790 139966267543552 alphageometry.py:566] LM output (score=-2.979715): "i : C a b i 10 T a b h i 11 ;"
I0124 00:54:15.067822 139966267543552 alphageometry.py:567] Translation: "i = on_line i a b, on_tline i h a b"

I0124 00:54:15.067856 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_line i a b, on_tline i h a b ? cong b e a g"
I0124 00:54:15.067976 139966267543552 graph.py:498] 
I0124 00:54:15.068022 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_line i a b, on_tline i h a b ? cong b e a g
I0124 00:54:15.315917 139966267543552 ddar.py:60] Depth 1/1000 time = 0.2355949878692627
I0124 00:54:16.396276 139966267543552 ddar.py:60] Depth 2/1000 time = 1.0802640914916992
I0124 00:54:17.608993 139966267543552 ddar.py:60] Depth 3/1000 time = 1.2125496864318848
I0124 00:54:18.807333 139966267543552 ddar.py:60] Depth 4/1000 time = 1.1981256008148193
I0124 00:54:20.552312 139966267543552 ddar.py:60] Depth 5/1000 time = 1.7446796894073486
I0124 00:54:21.775449 139966267543552 ddar.py:60] Depth 6/1000 time = 1.2227439880371094
I0124 00:54:21.778602 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:54:21.778661 139966267543552 alphageometry.py:566] LM output (score=-2.999764): "i : C h f i 10 D h f h i 11 ;"
I0124 00:54:21.778696 139966267543552 alphageometry.py:567] Translation: "i = on_line i h f, on_circle i h f"

I0124 00:54:21.778731 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_line i h f, on_circle i h f ? cong b e a g"
I0124 00:54:21.778866 139966267543552 graph.py:498] 
I0124 00:54:21.778923 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_line i h f, on_circle i h f ? cong b e a g
I0124 00:54:21.945383 139966267543552 ddar.py:60] Depth 1/1000 time = 0.15294957160949707
I0124 00:54:22.475843 139966267543552 ddar.py:60] Depth 2/1000 time = 0.5303716659545898
I0124 00:54:23.593487 139966267543552 ddar.py:60] Depth 3/1000 time = 1.1174921989440918
I0124 00:54:24.734714 139966267543552 ddar.py:60] Depth 4/1000 time = 1.1408805847167969
I0124 00:54:24.737748 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:54:24.737798 139966267543552 alphageometry.py:566] LM output (score=-3.077232): "i : C h e i 10 D h e h i 11 ;"
I0124 00:54:24.737831 139966267543552 alphageometry.py:567] Translation: "i = on_line i h e, on_circle i h e"

I0124 00:54:24.737866 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_line i h e, on_circle i h e ? cong b e a g"
I0124 00:54:24.737987 139966267543552 graph.py:498] 
I0124 00:54:24.738033 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_line i h e, on_circle i h e ? cong b e a g
I0124 00:54:24.905434 139966267543552 ddar.py:60] Depth 1/1000 time = 0.15438604354858398
I0124 00:54:25.546966 139966267543552 ddar.py:60] Depth 2/1000 time = 0.6414406299591064
I0124 00:54:26.939747 139966267543552 ddar.py:60] Depth 3/1000 time = 1.3926303386688232
I0124 00:54:28.340711 139966267543552 ddar.py:60] Depth 4/1000 time = 1.4006357192993164
I0124 00:54:28.343411 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:54:28.343461 139966267543552 alphageometry.py:566] LM output (score=-3.225430): "i : D d h h i 10 T d h h i 11 ;"
I0124 00:54:28.343496 139966267543552 alphageometry.py:567] Translation: "i = on_circle i h d, on_tline i h d h"

I0124 00:54:28.343530 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i h d, on_tline i h d h ? cong b e a g"
I0124 00:54:28.343653 139966267543552 graph.py:498] 
I0124 00:54:28.343701 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i h d, on_tline i h d h ? cong b e a g
I0124 00:54:28.606494 139966267543552 ddar.py:60] Depth 1/1000 time = 0.25046753883361816
I0124 00:54:29.051945 139966267543552 ddar.py:60] Depth 2/1000 time = 0.445357084274292
I0124 00:54:30.175987 139966267543552 ddar.py:60] Depth 3/1000 time = 1.1239256858825684
I0124 00:54:30.702552 139966267543552 ddar.py:60] Depth 4/1000 time = 0.5263850688934326
I0124 00:54:31.746850 139966267543552 ddar.py:60] Depth 5/1000 time = 1.0439658164978027
I0124 00:54:32.281147 139966267543552 ddar.py:60] Depth 6/1000 time = 0.5337932109832764
I0124 00:54:32.283523 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:54:32.283575 139966267543552 alphageometry.py:566] LM output (score=-3.254991): "i : D c h c i 10 D d h d i 11 ;"
I0124 00:54:32.283608 139966267543552 alphageometry.py:567] Translation: "i = on_circle i c h, on_circle i d h"

I0124 00:54:32.283643 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i c h, on_circle i d h ? cong b e a g"
I0124 00:54:32.283764 139966267543552 graph.py:498] 
I0124 00:54:32.283810 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i c h, on_circle i d h ? cong b e a g
I0124 00:54:32.468221 139966267543552 ddar.py:60] Depth 1/1000 time = 0.16887140274047852
I0124 00:54:32.892463 139966267543552 ddar.py:60] Depth 2/1000 time = 0.42415952682495117
I0124 00:54:33.817123 139966267543552 ddar.py:60] Depth 3/1000 time = 0.924553394317627
I0124 00:54:34.234863 139966267543552 ddar.py:60] Depth 4/1000 time = 0.4174065589904785
I0124 00:54:35.188148 139966267543552 ddar.py:60] Depth 5/1000 time = 0.9512476921081543
I0124 00:54:35.188328 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:54:35.188373 139966267543552 alphageometry.py:566] LM output (score=-3.395375): "i : D d e d i 10 T h e f i 11 ;"
I0124 00:54:35.188405 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e, on_tline i f h e"

I0124 00:54:35.188439 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i d e, on_tline i f h e ? cong b e a g"
I0124 00:54:35.188580 139966267543552 graph.py:498] 
I0124 00:54:35.188628 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i d e, on_tline i f h e ? cong b e a g
I0124 00:54:35.425767 139966267543552 ddar.py:60] Depth 1/1000 time = 0.22514033317565918
I0124 00:54:35.839291 139966267543552 ddar.py:60] Depth 2/1000 time = 0.41342997550964355
I0124 00:54:36.950259 139966267543552 ddar.py:60] Depth 3/1000 time = 1.1108405590057373
I0124 00:54:37.489907 139966267543552 ddar.py:60] Depth 4/1000 time = 0.5394353866577148
I0124 00:54:38.543785 139966267543552 ddar.py:60] Depth 5/1000 time = 1.0535988807678223
I0124 00:54:39.597363 139966267543552 ddar.py:60] Depth 6/1000 time = 1.0532395839691162
I0124 00:54:39.600333 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:54:39.600401 139966267543552 alphageometry.py:566] LM output (score=-3.436201): "i : C g h i 10 D g h h i 11 ;"
I0124 00:54:39.600434 139966267543552 alphageometry.py:567] Translation: "i = on_line i g h, on_circle i h g"

I0124 00:54:39.600470 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_line i g h, on_circle i h g ? cong b e a g"
I0124 00:54:39.600595 139966267543552 graph.py:498] 
I0124 00:54:39.600649 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_line i g h, on_circle i h g ? cong b e a g
I0124 00:54:39.771965 139966267543552 ddar.py:60] Depth 1/1000 time = 0.15863275527954102
I0124 00:54:40.249689 139966267543552 ddar.py:60] Depth 2/1000 time = 0.47763562202453613
I0124 00:54:41.405731 139966267543552 ddar.py:60] Depth 3/1000 time = 1.155904769897461
I0124 00:54:41.992427 139966267543552 ddar.py:60] Depth 4/1000 time = 0.5865182876586914
I0124 00:54:43.126930 139966267543552 ddar.py:60] Depth 5/1000 time = 1.1342148780822754
I0124 00:54:43.726235 139966267543552 ddar.py:60] Depth 6/1000 time = 0.5955209732055664
I0124 00:54:43.726390 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:54:43.726441 139966267543552 alphageometry.py:566] LM output (score=-3.463871): "i : D a h a i 10 D d h d i 11 ;"
I0124 00:54:43.726473 139966267543552 alphageometry.py:567] Translation: "i = on_circle i a h, on_circle i d h"

I0124 00:54:43.726507 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i a h, on_circle i d h ? cong b e a g"
I0124 00:54:43.726633 139966267543552 graph.py:498] 
I0124 00:54:43.726680 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i a h, on_circle i d h ? cong b e a g
I0124 00:54:43.913964 139966267543552 ddar.py:60] Depth 1/1000 time = 0.17103981971740723
I0124 00:54:44.287335 139966267543552 ddar.py:60] Depth 2/1000 time = 0.3732917308807373
I0124 00:54:45.234745 139966267543552 ddar.py:60] Depth 3/1000 time = 0.9473073482513428
I0124 00:54:45.669253 139966267543552 ddar.py:60] Depth 4/1000 time = 0.43416357040405273
I0124 00:54:46.590688 139966267543552 ddar.py:60] Depth 5/1000 time = 0.9194612503051758
I0124 00:54:46.982051 139966267543552 ddar.py:60] Depth 6/1000 time = 0.39119744300842285
I0124 00:54:46.982622 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:54:46.982670 139966267543552 alphageometry.py:566] LM output (score=-3.477024): "i : D d h h i 10 T d i h f 11 ;"
I0124 00:54:46.982703 139966267543552 alphageometry.py:567] Translation: "i = on_circle i h d, on_tline i d h f"

I0124 00:54:46.982757 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i h d, on_tline i d h f ? cong b e a g"
I0124 00:54:46.982883 139966267543552 graph.py:498] 
I0124 00:54:46.982930 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i h d, on_tline i d h f ? cong b e a g
I0124 00:54:47.241905 139966267543552 ddar.py:60] Depth 1/1000 time = 0.24663400650024414
I0124 00:54:48.181768 139966267543552 ddar.py:60] Depth 2/1000 time = 0.9397618770599365
I0124 00:54:48.759387 139966267543552 ddar.py:60] Depth 3/1000 time = 0.577465295791626
I0124 00:54:49.376791 139966267543552 ddar.py:60] Depth 4/1000 time = 0.6172680854797363
I0124 00:54:50.510175 139966267543552 ddar.py:60] Depth 5/1000 time = 1.133082389831543
I0124 00:54:50.513870 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:54:50.513921 139966267543552 alphageometry.py:566] LM output (score=-3.617826): "i : C d e i 10 D d i e i 11 ;"
I0124 00:54:50.513954 139966267543552 alphageometry.py:567] Translation: "i = on_line i d e, on_bline i e d"

I0124 00:54:50.513989 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_line i d e, on_bline i e d ? cong b e a g"
I0124 00:54:50.514108 139966267543552 graph.py:498] 
I0124 00:54:50.514154 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_line i d e, on_bline i e d ? cong b e a g
I0124 00:54:50.701988 139966267543552 ddar.py:60] Depth 1/1000 time = 0.17455601692199707
I0124 00:54:51.743770 139966267543552 ddar.py:60] Depth 2/1000 time = 1.0416858196258545
I0124 00:54:52.845553 139966267543552 ddar.py:60] Depth 3/1000 time = 1.1016147136688232
I0124 00:54:53.914032 139966267543552 ddar.py:60] Depth 4/1000 time = 1.0681979656219482
I0124 00:54:53.915643 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:54:53.915693 139966267543552 alphageometry.py:566] LM output (score=-3.626374): "i : C e h i 10 D e h h i 11 ;"
I0124 00:54:53.915727 139966267543552 alphageometry.py:567] Translation: "i = on_line i e h, on_circle i h e"

I0124 00:54:53.915761 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_line i e h, on_circle i h e ? cong b e a g"
I0124 00:54:53.915885 139966267543552 graph.py:498] 
I0124 00:54:53.915932 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_line i e h, on_circle i h e ? cong b e a g
I0124 00:54:54.081542 139966267543552 ddar.py:60] Depth 1/1000 time = 0.1527400016784668
I0124 00:54:55.212334 139966267543552 ddar.py:60] Depth 2/1000 time = 1.130697250366211
I0124 00:54:56.088123 139966267543552 ddar.py:60] Depth 3/1000 time = 0.8756215572357178
I0124 00:54:57.472908 139966267543552 ddar.py:60] Depth 4/1000 time = 1.3844566345214844
I0124 00:54:57.475545 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:54:57.475601 139966267543552 alphageometry.py:566] LM output (score=-3.697167): "i : D d h h i 10 T a c d i 11 ;"
I0124 00:54:57.475635 139966267543552 alphageometry.py:567] Translation: "i = on_circle i h d, on_tline i d a c"

I0124 00:54:57.475671 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i h d, on_tline i d a c ? cong b e a g"
I0124 00:54:57.475807 139966267543552 graph.py:498] 
I0124 00:54:57.475853 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i h d, on_tline i d a c ? cong b e a g
I0124 00:54:57.723844 139966267543552 ddar.py:60] Depth 1/1000 time = 0.23565936088562012
I0124 00:54:58.660788 139966267543552 ddar.py:60] Depth 2/1000 time = 0.9368340969085693
I0124 00:54:59.094328 139966267543552 ddar.py:60] Depth 3/1000 time = 0.43338513374328613
I0124 00:55:00.079391 139966267543552 ddar.py:60] Depth 4/1000 time = 0.9848837852478027
I0124 00:55:00.513317 139966267543552 ddar.py:60] Depth 5/1000 time = 0.4334750175476074
I0124 00:55:00.952175 139966267543552 ddar.py:60] Depth 6/1000 time = 0.43802666664123535
I0124 00:55:00.953970 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:55:00.954046 139966267543552 alphageometry.py:566] LM output (score=-3.710373): "i : D a c a i 10 D c d d i 11 ;"
I0124 00:55:00.954080 139966267543552 alphageometry.py:567] Translation: "i = on_circle i a c, on_circle i d c"

I0124 00:55:00.954123 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i a c, on_circle i d c ? cong b e a g"
I0124 00:55:00.954275 139966267543552 graph.py:498] 
I0124 00:55:00.954329 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i a c, on_circle i d c ? cong b e a g
I0124 00:55:01.112845 139966267543552 ddar.py:60] Depth 1/1000 time = 0.14023375511169434
I0124 00:55:01.982163 139966267543552 ddar.py:60] Depth 2/1000 time = 0.8692178726196289
I0124 00:55:02.368267 139966267543552 ddar.py:60] Depth 3/1000 time = 0.38593554496765137
I0124 00:55:03.474799 139966267543552 ddar.py:60] Depth 4/1000 time = 1.106398105621338
I0124 00:55:04.598512 139966267543552 ddar.py:60] Depth 5/1000 time = 1.123535394668579
I0124 00:55:05.805160 139966267543552 ddar.py:60] Depth 6/1000 time = 1.2064776420593262
I0124 00:55:07.044802 139966267543552 ddar.py:60] Depth 7/1000 time = 1.2394673824310303
I0124 00:55:08.271161 139966267543552 ddar.py:60] Depth 8/1000 time = 1.2259876728057861
I0124 00:55:08.275685 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:55:08.275740 139966267543552 alphageometry.py:566] LM output (score=-3.845276): "i : D d h h i 10 P a d d i 11 ;"
I0124 00:55:08.275774 139966267543552 alphageometry.py:567] Translation: "ERROR: Invalid predicate P a d d i"

I0124 00:55:08.275808 139966267543552 alphageometry.py:566] LM output (score=-3.865702): "i : C b g i 10 D b i g i 11 ;"
I0124 00:55:08.275834 139966267543552 alphageometry.py:567] Translation: "i = on_line i b g, on_bline i g b"

I0124 00:55:08.275865 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_line i b g, on_bline i g b ? cong b e a g"
I0124 00:55:08.275984 139966267543552 graph.py:498] 
I0124 00:55:08.276030 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_line i b g, on_bline i g b ? cong b e a g
I0124 00:55:09.001798 139966267543552 ddar.py:60] Depth 1/1000 time = 0.7119784355163574
I0124 00:55:10.048355 139966267543552 ddar.py:60] Depth 2/1000 time = 1.0463926792144775
I0124 00:55:11.129362 139966267543552 ddar.py:60] Depth 3/1000 time = 1.0808253288269043
I0124 00:55:11.662286 139966267543552 ddar.py:60] Depth 4/1000 time = 0.5327420234680176
I0124 00:55:12.717909 139966267543552 ddar.py:60] Depth 5/1000 time = 1.0553016662597656
I0124 00:55:12.719811 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:55:12.719860 139966267543552 alphageometry.py:566] LM output (score=-3.874563): "i : C f h i 10 D f h h i 11 ;"
I0124 00:55:12.719892 139966267543552 alphageometry.py:567] Translation: "i = on_line i f h, on_circle i h f"

I0124 00:55:12.719926 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_line i f h, on_circle i h f ? cong b e a g"
I0124 00:55:12.720046 139966267543552 graph.py:498] 
I0124 00:55:12.720092 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_line i f h, on_circle i h f ? cong b e a g
I0124 00:55:13.404178 139966267543552 ddar.py:60] Depth 1/1000 time = 0.6710906028747559
I0124 00:55:13.964198 139966267543552 ddar.py:60] Depth 2/1000 time = 0.5598585605621338
I0124 00:55:15.161224 139966267543552 ddar.py:60] Depth 3/1000 time = 1.1968629360198975
I0124 00:55:15.776426 139966267543552 ddar.py:60] Depth 4/1000 time = 0.6148679256439209
I0124 00:55:15.779474 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:55:15.779526 139966267543552 alphageometry.py:566] LM output (score=-3.976472): "i : D d e e i 10 T d i h e 11 ;"
I0124 00:55:15.779560 139966267543552 alphageometry.py:567] Translation: "i = on_circle i e d, on_tline i d h e"

I0124 00:55:15.779596 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i e d, on_tline i d h e ? cong b e a g"
I0124 00:55:15.779718 139966267543552 graph.py:498] 
I0124 00:55:15.779765 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_circle i e d, on_tline i d h e ? cong b e a g
I0124 00:55:15.923000 139966267543552 ddar.py:60] Depth 1/1000 time = 0.13118791580200195
I0124 00:55:16.209870 139966267543552 ddar.py:60] Depth 2/1000 time = 0.28679561614990234
I0124 00:55:17.084701 139966267543552 ddar.py:60] Depth 3/1000 time = 0.874730110168457
I0124 00:55:17.539339 139966267543552 ddar.py:60] Depth 4/1000 time = 0.454481840133667
I0124 00:55:18.695308 139966267543552 ddar.py:60] Depth 5/1000 time = 1.1557996273040771
I0124 00:55:19.291926 139966267543552 ddar.py:60] Depth 6/1000 time = 0.5961699485778809
I0124 00:55:19.880094 139966267543552 ddar.py:60] Depth 7/1000 time = 0.5880284309387207
I0124 00:55:19.883668 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:55:19.883735 139966267543552 alphageometry.py:566] LM output (score=-4.078874): "i : C d g i 10 D d i g i 11 ;"
I0124 00:55:19.883769 139966267543552 alphageometry.py:567] Translation: "i = on_line i d g, on_bline i g d"

I0124 00:55:19.883814 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_line i d g, on_bline i g d ? cong b e a g"
I0124 00:55:19.883956 139966267543552 graph.py:498] 
I0124 00:55:19.884007 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h b d, on_bline h d b; i = on_line i d g, on_bline i g d ? cong b e a g
I0124 00:55:20.586424 139966267543552 ddar.py:60] Depth 1/1000 time = 0.6896381378173828
I0124 00:55:21.002430 139966267543552 ddar.py:60] Depth 2/1000 time = 0.41582822799682617
I0124 00:55:21.489865 139966267543552 ddar.py:60] Depth 3/1000 time = 0.4872877597808838
I0124 00:55:22.514029 139966267543552 ddar.py:60] Depth 4/1000 time = 1.0238258838653564
I0124 00:55:22.516318 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:55:22.516375 139966267543552 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : D d h d e 08 T a c d h 09 ; x00
I0124 00:55:30.170055 139966267543552 alphageometry.py:566] LM output (score=-0.002960): "i : C b c i 10 T b c d i 11 ;"
I0124 00:55:30.170201 139966267543552 alphageometry.py:567] Translation: "i = on_line i b c, on_tline i d b c"

I0124 00:55:30.170242 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i b c, on_tline i d b c ? cong b e a g"
I0124 00:55:30.170361 139966267543552 graph.py:498] 
I0124 00:55:30.170409 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i b c, on_tline i d b c ? cong b e a g
I0124 00:55:30.403356 139966267543552 ddar.py:60] Depth 1/1000 time = 0.22126054763793945
I0124 00:55:31.262911 139966267543552 ddar.py:60] Depth 2/1000 time = 0.8594484329223633
I0124 00:55:31.654489 139966267543552 ddar.py:60] Depth 3/1000 time = 0.3914206027984619
I0124 00:55:32.047340 139966267543552 ddar.py:60] Depth 4/1000 time = 0.39261341094970703
I0124 00:55:33.068593 139966267543552 ddar.py:60] Depth 5/1000 time = 1.0195350646972656
I0124 00:55:33.719059 139966267543552 ddar.py:60] Depth 6/1000 time = 0.6502988338470459
I0124 00:55:34.371946 139966267543552 ddar.py:60] Depth 7/1000 time = 0.6527371406555176
I0124 00:55:35.632930 139966267543552 ddar.py:60] Depth 8/1000 time = 1.260845422744751
I0124 00:55:37.169363 139966267543552 ddar.py:60] Depth 9/1000 time = 1.536266803741455
I0124 00:55:39.830620 139966267543552 ddar.py:60] Depth 10/1000 time = 2.661085367202759
I0124 00:55:42.033177 139966267543552 ddar.py:60] Depth 11/1000 time = 2.2023818492889404
I0124 00:55:42.049250 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:55:42.049308 139966267543552 alphageometry.py:566] LM output (score=-3.166341): "i : D d h d i 10 T b c d i 11 ;"
I0124 00:55:42.049343 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d h, on_tline i d b c"

I0124 00:55:42.049380 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_circle i d h, on_tline i d b c ? cong b e a g"
I0124 00:55:42.049501 139966267543552 graph.py:498] 
I0124 00:55:42.049546 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_circle i d h, on_tline i d b c ? cong b e a g
I0124 00:55:42.351299 139966267543552 ddar.py:60] Depth 1/1000 time = 0.28839945793151855
I0124 00:55:43.336175 139966267543552 ddar.py:60] Depth 2/1000 time = 0.9847676753997803
I0124 00:55:43.786976 139966267543552 ddar.py:60] Depth 3/1000 time = 0.45062732696533203
I0124 00:55:44.240310 139966267543552 ddar.py:60] Depth 4/1000 time = 0.45323657989501953
I0124 00:55:44.696108 139966267543552 ddar.py:60] Depth 5/1000 time = 0.45560359954833984
I0124 00:55:45.832515 139966267543552 ddar.py:60] Depth 6/1000 time = 1.1335604190826416
I0124 00:55:47.220240 139966267543552 ddar.py:60] Depth 7/1000 time = 1.3875579833984375
I0124 00:55:48.931308 139966267543552 ddar.py:60] Depth 8/1000 time = 1.7108850479125977
I0124 00:55:51.622380 139966267543552 ddar.py:60] Depth 9/1000 time = 2.6908953189849854
I0124 00:55:54.047781 139966267543552 ddar.py:60] Depth 10/1000 time = 2.425201177597046
I0124 00:55:56.011857 139966267543552 ddar.py:60] Depth 11/1000 time = 1.963876485824585
I0124 00:55:58.548604 139966267543552 ddar.py:60] Depth 12/1000 time = 2.536550760269165
I0124 00:56:02.257280 139966267543552 ddar.py:60] Depth 13/1000 time = 3.7084813117980957
I0124 00:56:05.439921 139966267543552 ddar.py:60] Depth 14/1000 time = 3.1824393272399902
I0124 00:56:05.461335 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:56:05.461390 139966267543552 alphageometry.py:566] LM output (score=-3.395319): "i : D d i d h 10 T b c d i 11 ;"
I0124 00:56:05.461424 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d h, on_tline i d b c"

I0124 00:56:05.461460 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_circle i d h, on_tline i d b c ? cong b e a g"
I0124 00:56:05.461582 139966267543552 graph.py:498] 
I0124 00:56:05.461628 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_circle i d h, on_tline i d b c ? cong b e a g
I0124 00:56:05.764021 139966267543552 ddar.py:60] Depth 1/1000 time = 0.28893470764160156
I0124 00:56:06.247531 139966267543552 ddar.py:60] Depth 2/1000 time = 0.48342180252075195
I0124 00:56:06.713845 139966267543552 ddar.py:60] Depth 3/1000 time = 0.4662184715270996
I0124 00:56:07.731984 139966267543552 ddar.py:60] Depth 4/1000 time = 1.0180251598358154
I0124 00:56:08.202604 139966267543552 ddar.py:60] Depth 5/1000 time = 0.4703361988067627
I0124 00:56:08.817737 139966267543552 ddar.py:60] Depth 6/1000 time = 0.6119835376739502
I0124 00:56:10.223704 139966267543552 ddar.py:60] Depth 7/1000 time = 1.405837059020996
I0124 00:56:11.198175 139966267543552 ddar.py:60] Depth 8/1000 time = 0.974301815032959
I0124 00:56:12.747479 139966267543552 ddar.py:60] Depth 9/1000 time = 1.5491001605987549
I0124 00:56:13.743999 139966267543552 ddar.py:60] Depth 10/1000 time = 0.9830951690673828
I0124 00:56:15.333618 139966267543552 ddar.py:60] Depth 11/1000 time = 1.5875048637390137
I0124 00:56:15.333803 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:56:15.333854 139966267543552 alphageometry.py:566] LM output (score=-3.850586): "i : C b d i 10 D b i d i 11 ;"
I0124 00:56:15.333886 139966267543552 alphageometry.py:567] Translation: "i = on_line i b d, on_bline i d b"

I0124 00:56:15.333920 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i b d, on_bline i d b ? cong b e a g"
I0124 00:56:15.334050 139966267543552 graph.py:498] 
I0124 00:56:15.334108 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i b d, on_bline i d b ? cong b e a g
I0124 00:56:15.557100 139966267543552 ddar.py:60] Depth 1/1000 time = 0.2105085849761963
I0124 00:56:15.880661 139966267543552 ddar.py:60] Depth 2/1000 time = 0.3234584331512451
I0124 00:56:16.223294 139966267543552 ddar.py:60] Depth 3/1000 time = 0.3425154685974121
I0124 00:56:17.127892 139966267543552 ddar.py:60] Depth 4/1000 time = 0.9043130874633789
I0124 00:56:17.552555 139966267543552 ddar.py:60] Depth 5/1000 time = 0.4230802059173584
I0124 00:56:18.655349 139966267543552 ddar.py:60] Depth 6/1000 time = 1.102651596069336
I0124 00:56:19.235629 139966267543552 ddar.py:60] Depth 7/1000 time = 0.5800890922546387
I0124 00:56:19.865799 139966267543552 ddar.py:60] Depth 8/1000 time = 0.6300396919250488
I0124 00:56:19.868291 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:56:19.868341 139966267543552 alphageometry.py:566] LM output (score=-3.966095): "i : C b h i 10 D b i h i 11 ;"
I0124 00:56:19.868375 139966267543552 alphageometry.py:567] Translation: "i = on_line i b h, on_bline i h b"

I0124 00:56:19.868411 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i b h, on_bline i h b ? cong b e a g"
I0124 00:56:19.868531 139966267543552 graph.py:498] 
I0124 00:56:19.868576 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i b h, on_bline i h b ? cong b e a g
I0124 00:56:20.626585 139966267543552 ddar.py:60] Depth 1/1000 time = 0.7453835010528564
I0124 00:56:20.884996 139966267543552 ddar.py:60] Depth 2/1000 time = 0.25826334953308105
I0124 00:56:21.153057 139966267543552 ddar.py:60] Depth 3/1000 time = 0.2679712772369385
I0124 00:56:21.971617 139966267543552 ddar.py:60] Depth 4/1000 time = 0.8183579444885254
I0124 00:56:22.309375 139966267543552 ddar.py:60] Depth 5/1000 time = 0.33646225929260254
I0124 00:56:22.777828 139966267543552 ddar.py:60] Depth 6/1000 time = 0.4683356285095215
I0124 00:56:23.851609 139966267543552 ddar.py:60] Depth 7/1000 time = 1.0736541748046875
I0124 00:56:24.424440 139966267543552 ddar.py:60] Depth 8/1000 time = 0.5726556777954102
I0124 00:56:24.426967 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:56:24.427018 139966267543552 alphageometry.py:566] LM output (score=-3.982494): "i : C h f i 10 D h i f i 11 ;"
I0124 00:56:24.427052 139966267543552 alphageometry.py:567] Translation: "i = on_line i h f, on_bline i f h"

I0124 00:56:24.427087 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i h f, on_bline i f h ? cong b e a g"
I0124 00:56:24.427207 139966267543552 graph.py:498] 
I0124 00:56:24.427252 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i h f, on_bline i f h ? cong b e a g
I0124 00:56:24.653217 139966267543552 ddar.py:60] Depth 1/1000 time = 0.21320462226867676
I0124 00:56:25.563719 139966267543552 ddar.py:60] Depth 2/1000 time = 0.9103994369506836
I0124 00:56:25.946392 139966267543552 ddar.py:60] Depth 3/1000 time = 0.38251829147338867
I0124 00:56:26.910221 139966267543552 ddar.py:60] Depth 4/1000 time = 0.9635868072509766
I0124 00:56:27.409389 139966267543552 ddar.py:60] Depth 5/1000 time = 0.49733448028564453
I0124 00:56:28.697806 139966267543552 ddar.py:60] Depth 6/1000 time = 1.2882626056671143
I0124 00:56:29.545529 139966267543552 ddar.py:60] Depth 7/1000 time = 0.8475589752197266
I0124 00:56:30.958297 139966267543552 ddar.py:60] Depth 8/1000 time = 1.4125895500183105
I0124 00:56:32.425091 139966267543552 ddar.py:60] Depth 9/1000 time = 1.466616153717041
I0124 00:56:32.431661 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:56:32.431717 139966267543552 alphageometry.py:566] LM output (score=-4.148383): "i : C e h i 10 D e i h i 11 ;"
I0124 00:56:32.431751 139966267543552 alphageometry.py:567] Translation: "i = on_line i e h, on_bline i h e"

I0124 00:56:32.431786 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i e h, on_bline i h e ? cong b e a g"
I0124 00:56:32.431926 139966267543552 graph.py:498] 
I0124 00:56:32.431976 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i e h, on_bline i h e ? cong b e a g
I0124 00:56:32.660307 139966267543552 ddar.py:60] Depth 1/1000 time = 0.21596217155456543
I0124 00:56:33.015898 139966267543552 ddar.py:60] Depth 2/1000 time = 0.3554549217224121
I0124 00:56:34.011914 139966267543552 ddar.py:60] Depth 3/1000 time = 0.9958055019378662
I0124 00:56:34.403961 139966267543552 ddar.py:60] Depth 4/1000 time = 0.3917422294616699
I0124 00:56:34.909453 139966267543552 ddar.py:60] Depth 5/1000 time = 0.5039002895355225
I0124 00:56:36.370711 139966267543552 ddar.py:60] Depth 6/1000 time = 1.4610939025878906
I0124 00:56:37.935655 139966267543552 ddar.py:60] Depth 7/1000 time = 1.5647728443145752
I0124 00:56:39.631190 139966267543552 ddar.py:60] Depth 8/1000 time = 1.6953508853912354
I0124 00:56:39.637306 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:56:39.637366 139966267543552 alphageometry.py:566] LM output (score=-4.165428): "i : C d h i 10 D d h d i 11 ;"
I0124 00:56:39.637399 139966267543552 alphageometry.py:567] Translation: "i = on_line i d h, on_circle i d h"

I0124 00:56:39.637434 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i d h, on_circle i d h ? cong b e a g"
I0124 00:56:39.637560 139966267543552 graph.py:498] 
I0124 00:56:39.637614 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i d h, on_circle i d h ? cong b e a g
I0124 00:56:39.964097 139966267543552 ddar.py:60] Depth 1/1000 time = 0.31545162200927734
I0124 00:56:41.413322 139966267543552 ddar.py:60] Depth 2/1000 time = 1.44911789894104
I0124 00:56:42.197265 139966267543552 ddar.py:60] Depth 3/1000 time = 0.783780574798584
I0124 00:56:43.586855 139966267543552 ddar.py:60] Depth 4/1000 time = 1.3892903327941895
I0124 00:56:44.623141 139966267543552 ddar.py:60] Depth 5/1000 time = 1.0313875675201416
I0124 00:56:48.311230 139966267543552 ddar.py:60] Depth 6/1000 time = 3.6879119873046875
I0124 00:56:51.188945 139966267543552 ddar.py:60] Depth 7/1000 time = 2.8775088787078857
I0124 00:56:54.240695 139966267543552 ddar.py:60] Depth 8/1000 time = 3.051520586013794
I0124 00:56:54.248038 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:56:54.248106 139966267543552 alphageometry.py:566] LM output (score=-4.266291): "i : C c f i 10 D c i f i 11 ;"
I0124 00:56:54.248142 139966267543552 alphageometry.py:567] Translation: "i = on_line i c f, on_bline i f c"

I0124 00:56:54.248182 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i c f, on_bline i f c ? cong b e a g"
I0124 00:56:54.248315 139966267543552 graph.py:498] 
I0124 00:56:54.248368 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i c f, on_bline i f c ? cong b e a g
I0124 00:56:55.100617 139966267543552 ddar.py:60] Depth 1/1000 time = 0.8387143611907959
I0124 00:56:55.475987 139966267543552 ddar.py:60] Depth 2/1000 time = 0.3752095699310303
I0124 00:56:56.430346 139966267543552 ddar.py:60] Depth 3/1000 time = 0.9542288780212402
I0124 00:56:56.816661 139966267543552 ddar.py:60] Depth 4/1000 time = 0.3860146999359131
I0124 00:56:57.833517 139966267543552 ddar.py:60] Depth 5/1000 time = 1.0155243873596191
I0124 00:56:59.012736 139966267543552 ddar.py:60] Depth 6/1000 time = 1.1790432929992676
I0124 00:56:59.643146 139966267543552 ddar.py:60] Depth 7/1000 time = 0.6302342414855957
I0124 00:57:00.919365 139966267543552 ddar.py:60] Depth 8/1000 time = 1.2760601043701172
I0124 00:57:00.922497 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:57:00.922548 139966267543552 alphageometry.py:566] LM output (score=-4.286941): "i : C a h i 10 D a h a i 11 ;"
I0124 00:57:00.922581 139966267543552 alphageometry.py:567] Translation: "i = on_line i a h, on_circle i a h"

I0124 00:57:00.922616 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i a h, on_circle i a h ? cong b e a g"
I0124 00:57:00.922732 139966267543552 graph.py:498] 
I0124 00:57:00.922778 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i a h, on_circle i a h ? cong b e a g
I0124 00:57:01.140825 139966267543552 ddar.py:60] Depth 1/1000 time = 0.20566105842590332
I0124 00:57:01.400439 139966267543552 ddar.py:60] Depth 2/1000 time = 0.25952768325805664
I0124 00:57:02.235609 139966267543552 ddar.py:60] Depth 3/1000 time = 0.8350679874420166
I0124 00:57:02.502236 139966267543552 ddar.py:60] Depth 4/1000 time = 0.2663431167602539
I0124 00:57:02.845305 139966267543552 ddar.py:60] Depth 5/1000 time = 0.34181809425354004
I0124 00:57:03.911905 139966267543552 ddar.py:60] Depth 6/1000 time = 1.066488265991211
I0124 00:57:04.430905 139966267543552 ddar.py:60] Depth 7/1000 time = 0.5188360214233398
I0124 00:57:04.966770 139966267543552 ddar.py:60] Depth 8/1000 time = 0.5314226150512695
I0124 00:57:04.966906 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:57:04.966951 139966267543552 alphageometry.py:566] LM output (score=-4.386137): "i : C b c i 10 D d h d i 11 ;"
I0124 00:57:04.966984 139966267543552 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2622, in add_clause
    nums = draw_fn()
  File "/home/chi/alphageometry-test/graph.py", line 2608, in draw_fn
    return nm.reduce(to_be_intersected, existing_points)
  File "/home/chi/alphageometry-test/numericals.py", line 1310, in reduce
    result = a.intersect(b)
  File "/home/chi/alphageometry-test/numericals.py", line 215, in intersect
    return line_circle_intersection(self, obj)
  File "/home/chi/alphageometry-test/numericals.py", line 544, in line_circle_intersection
    raise InvalidQuadSolveError()
numericals.InvalidQuadSolveError
"

I0124 00:57:04.967032 139966267543552 alphageometry.py:566] LM output (score=-4.490593): "i : C a d i 10 D a i d i 11 ;"
I0124 00:57:04.967061 139966267543552 alphageometry.py:567] Translation: "i = on_line i a d, on_bline i d a"

I0124 00:57:04.967092 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i a d, on_bline i d a ? cong b e a g"
I0124 00:57:04.967213 139966267543552 graph.py:498] 
I0124 00:57:04.967259 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i a d, on_bline i d a ? cong b e a g
I0124 00:57:05.742882 139966267543552 ddar.py:60] Depth 1/1000 time = 0.7631406784057617
I0124 00:57:06.060785 139966267543552 ddar.py:60] Depth 2/1000 time = 0.3177502155303955
I0124 00:57:06.398626 139966267543552 ddar.py:60] Depth 3/1000 time = 0.33772826194763184
I0124 00:57:07.359724 139966267543552 ddar.py:60] Depth 4/1000 time = 0.9609918594360352
I0124 00:57:08.759793 139966267543552 ddar.py:60] Depth 5/1000 time = 1.3999032974243164
I0124 00:57:10.445405 139966267543552 ddar.py:60] Depth 6/1000 time = 1.6854429244995117
I0124 00:57:12.234541 139966267543552 ddar.py:60] Depth 7/1000 time = 1.7889487743377686
I0124 00:57:14.000869 139966267543552 ddar.py:60] Depth 8/1000 time = 1.7659952640533447
I0124 00:57:14.007503 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:57:14.007555 139966267543552 alphageometry.py:566] LM output (score=-4.528995): "i : C b c i 10 D d i d h 11 T b c d i 12 ;"
I0124 00:57:14.007589 139966267543552 alphageometry.py:567] Translation: "ERROR: there cannot be more than two predicates."

I0124 00:57:14.007622 139966267543552 alphageometry.py:566] LM output (score=-4.558497): "i : C b h i 10 D b h h i 11 ;"
I0124 00:57:14.007650 139966267543552 alphageometry.py:567] Translation: "i = on_line i b h, on_circle i h b"

I0124 00:57:14.007679 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i b h, on_circle i h b ? cong b e a g"
I0124 00:57:14.007799 139966267543552 graph.py:498] 
I0124 00:57:14.007844 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i b h, on_circle i h b ? cong b e a g
I0124 00:57:14.227325 139966267543552 ddar.py:60] Depth 1/1000 time = 0.20711231231689453
I0124 00:57:14.488192 139966267543552 ddar.py:60] Depth 2/1000 time = 0.26077866554260254
I0124 00:57:14.752372 139966267543552 ddar.py:60] Depth 3/1000 time = 0.26409268379211426
I0124 00:57:15.584418 139966267543552 ddar.py:60] Depth 4/1000 time = 0.8318386077880859
I0124 00:57:15.918238 139966267543552 ddar.py:60] Depth 5/1000 time = 0.33246946334838867
I0124 00:57:16.307023 139966267543552 ddar.py:60] Depth 6/1000 time = 0.38867688179016113
I0124 00:57:17.280443 139966267543552 ddar.py:60] Depth 7/1000 time = 0.9732935428619385
I0124 00:57:17.698940 139966267543552 ddar.py:60] Depth 8/1000 time = 0.41492390632629395
I0124 00:57:17.699059 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:57:17.699104 139966267543552 alphageometry.py:566] LM output (score=-4.620313): "h : C b c h 10 T b c d h 11 ;"
I0124 00:57:17.699136 139966267543552 alphageometry.py:567] Translation: "ERROR: point h already exists."

I0124 00:57:17.699168 139966267543552 alphageometry.py:566] LM output (score=-4.892355): "i : C h f i 10 D h i h i 11 ;"
I0124 00:57:17.699196 139966267543552 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2570, in add_clause
    raise DepCheckFailError(
graph.DepCheckFailError: diff h h
"

I0124 00:57:17.699224 139966267543552 alphageometry.py:566] LM output (score=-4.913119): "i : C b f i 10 D b i f i 11 ;"
I0124 00:57:17.699250 139966267543552 alphageometry.py:567] Translation: "i = on_line i b f, on_bline i f b"

I0124 00:57:17.699278 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i b f, on_bline i f b ? cong b e a g"
I0124 00:57:17.699398 139966267543552 graph.py:498] 
I0124 00:57:17.699444 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i b f, on_bline i f b ? cong b e a g
I0124 00:57:17.927263 139966267543552 ddar.py:60] Depth 1/1000 time = 0.21508193016052246
I0124 00:57:18.902570 139966267543552 ddar.py:60] Depth 2/1000 time = 0.9752013683319092
I0124 00:57:19.351201 139966267543552 ddar.py:60] Depth 3/1000 time = 0.44847846031188965
I0124 00:57:19.802089 139966267543552 ddar.py:60] Depth 4/1000 time = 0.4506528377532959
I0124 00:57:20.904711 139966267543552 ddar.py:60] Depth 5/1000 time = 1.1013028621673584
I0124 00:57:21.574125 139966267543552 ddar.py:60] Depth 6/1000 time = 0.6692419052124023
I0124 00:57:22.870958 139966267543552 ddar.py:60] Depth 7/1000 time = 1.2966747283935547
I0124 00:57:23.656791 139966267543552 ddar.py:60] Depth 8/1000 time = 0.7856576442718506
I0124 00:57:23.661470 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:57:23.661522 139966267543552 alphageometry.py:566] LM output (score=-4.940400): "i : C a c i 10 D a i c i 11 ;"
I0124 00:57:23.661557 139966267543552 alphageometry.py:567] Translation: "i = on_line i a c, on_bline i c a"

I0124 00:57:23.661592 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i a c, on_bline i c a ? cong b e a g"
I0124 00:57:23.661722 139966267543552 graph.py:498] 
I0124 00:57:23.661769 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i a c, on_bline i c a ? cong b e a g
I0124 00:57:24.460402 139966267543552 ddar.py:60] Depth 1/1000 time = 0.78578782081604
I0124 00:57:24.736461 139966267543552 ddar.py:60] Depth 2/1000 time = 0.2759079933166504
I0124 00:57:25.025807 139966267543552 ddar.py:60] Depth 3/1000 time = 0.28925013542175293
I0124 00:57:25.897053 139966267543552 ddar.py:60] Depth 4/1000 time = 0.8710260391235352
I0124 00:57:26.262370 139966267543552 ddar.py:60] Depth 5/1000 time = 0.36388278007507324
I0124 00:57:26.684721 139966267543552 ddar.py:60] Depth 6/1000 time = 0.4222235679626465
I0124 00:57:27.708528 139966267543552 ddar.py:60] Depth 7/1000 time = 1.0236608982086182
I0124 00:57:28.166565 139966267543552 ddar.py:60] Depth 8/1000 time = 0.45447826385498047
I0124 00:57:28.166701 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:57:28.166746 139966267543552 alphageometry.py:566] LM output (score=-5.019975): "i : C b e i 10 D b e e i 11 ;"
I0124 00:57:28.166778 139966267543552 alphageometry.py:567] Translation: "i = on_line i b e, on_circle i e b"

I0124 00:57:28.166812 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i b e, on_circle i e b ? cong b e a g"
I0124 00:57:28.166934 139966267543552 graph.py:498] 
I0124 00:57:28.166980 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i b e, on_circle i e b ? cong b e a g
I0124 00:57:29.094541 139966267543552 ddar.py:60] Depth 1/1000 time = 0.9145803451538086
I0124 00:57:29.688069 139966267543552 ddar.py:60] Depth 2/1000 time = 0.593367338180542
I0124 00:57:30.901733 139966267543552 ddar.py:60] Depth 3/1000 time = 1.2135107517242432
I0124 00:57:32.089947 139966267543552 ddar.py:60] Depth 4/1000 time = 1.1878280639648438
I0124 00:57:33.433222 139966267543552 ddar.py:60] Depth 5/1000 time = 1.3414926528930664
I0124 00:57:34.989452 139966267543552 ddar.py:60] Depth 6/1000 time = 1.556039571762085
I0124 00:57:35.916146 139966267543552 ddar.py:60] Depth 7/1000 time = 0.926518440246582
I0124 00:57:38.067032 139966267543552 ddar.py:60] Depth 8/1000 time = 2.1506900787353516
I0124 00:57:38.071062 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:57:38.071124 139966267543552 alphageometry.py:566] LM output (score=-5.029180): "i : C a e i 10 D a e a i 11 ;"
I0124 00:57:38.071159 139966267543552 alphageometry.py:567] Translation: "i = on_line i a e, on_circle i a e"

I0124 00:57:38.071195 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i a e, on_circle i a e ? cong b e a g"
I0124 00:57:38.071325 139966267543552 graph.py:498] 
I0124 00:57:38.071380 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i a e, on_circle i a e ? cong b e a g
I0124 00:57:38.399327 139966267543552 ddar.py:60] Depth 1/1000 time = 0.3143448829650879
I0124 00:57:39.415204 139966267543552 ddar.py:60] Depth 2/1000 time = 1.015749216079712
I0124 00:57:39.851948 139966267543552 ddar.py:60] Depth 3/1000 time = 0.4365823268890381
I0124 00:57:40.858106 139966267543552 ddar.py:60] Depth 4/1000 time = 1.0058763027191162
I0124 00:57:42.018412 139966267543552 ddar.py:60] Depth 5/1000 time = 1.1588401794433594
I0124 00:57:43.510349 139966267543552 ddar.py:60] Depth 6/1000 time = 1.4917652606964111
I0124 00:57:45.041855 139966267543552 ddar.py:60] Depth 7/1000 time = 1.531334400177002
I0124 00:57:47.247847 139966267543552 ddar.py:60] Depth 8/1000 time = 2.2058069705963135
I0124 00:57:47.252086 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:57:47.252139 139966267543552 alphageometry.py:566] LM output (score=-5.165045): "i : C c d i 10 D c i d i 11 ;"
I0124 00:57:47.252171 139966267543552 alphageometry.py:567] Translation: "i = on_line i c d, on_bline i d c"

I0124 00:57:47.252207 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i c d, on_bline i d c ? cong b e a g"
I0124 00:57:47.252327 139966267543552 graph.py:498] 
I0124 00:57:47.252373 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i c d, on_bline i d c ? cong b e a g
I0124 00:57:47.462984 139966267543552 ddar.py:60] Depth 1/1000 time = 0.1982412338256836
I0124 00:57:47.713122 139966267543552 ddar.py:60] Depth 2/1000 time = 0.25006103515625
I0124 00:57:47.965676 139966267543552 ddar.py:60] Depth 3/1000 time = 0.25247788429260254
I0124 00:57:48.797054 139966267543552 ddar.py:60] Depth 4/1000 time = 0.8311812877655029
I0124 00:57:49.127888 139966267543552 ddar.py:60] Depth 5/1000 time = 0.32952213287353516
I0124 00:57:49.572505 139966267543552 ddar.py:60] Depth 6/1000 time = 0.4444868564605713
I0124 00:57:50.684564 139966267543552 ddar.py:60] Depth 7/1000 time = 1.1119379997253418
I0124 00:57:51.240443 139966267543552 ddar.py:60] Depth 8/1000 time = 0.5556566715240479
I0124 00:57:52.463418 139966267543552 ddar.py:60] Depth 9/1000 time = 1.2227258682250977
I0124 00:57:53.078715 139966267543552 ddar.py:60] Depth 10/1000 time = 0.6151232719421387
I0124 00:57:53.701469 139966267543552 ddar.py:60] Depth 11/1000 time = 0.6225738525390625
I0124 00:57:53.704372 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:57:53.704434 139966267543552 alphageometry.py:566] LM output (score=-5.261296): "i : C b h i 10 D b h b i 11 ;"
I0124 00:57:53.704469 139966267543552 alphageometry.py:567] Translation: "i = on_line i b h, on_circle i b h"

I0124 00:57:53.704506 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i b h, on_circle i b h ? cong b e a g"
I0124 00:57:53.704651 139966267543552 graph.py:498] 
I0124 00:57:53.704702 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i b h, on_circle i b h ? cong b e a g
I0124 00:57:54.515246 139966267543552 ddar.py:60] Depth 1/1000 time = 0.7977454662322998
I0124 00:57:54.776620 139966267543552 ddar.py:60] Depth 2/1000 time = 0.2612323760986328
I0124 00:57:55.040922 139966267543552 ddar.py:60] Depth 3/1000 time = 0.26421189308166504
I0124 00:57:55.881396 139966267543552 ddar.py:60] Depth 4/1000 time = 0.8402705192565918
I0124 00:57:56.215217 139966267543552 ddar.py:60] Depth 5/1000 time = 0.3325009346008301
I0124 00:57:56.608027 139966267543552 ddar.py:60] Depth 6/1000 time = 0.39269042015075684
I0124 00:57:57.017157 139966267543552 ddar.py:60] Depth 7/1000 time = 0.40902161598205566
I0124 00:57:58.007248 139966267543552 ddar.py:60] Depth 8/1000 time = 0.986621618270874
I0124 00:57:58.007428 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:57:58.007474 139966267543552 alphageometry.py:566] LM output (score=-5.318877): "i : D d h h i 10 T d h h i 11 ;"
I0124 00:57:58.007506 139966267543552 alphageometry.py:567] Translation: "i = on_circle i h d, on_tline i h d h"

I0124 00:57:58.007541 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_circle i h d, on_tline i h d h ? cong b e a g"
I0124 00:57:58.007663 139966267543552 graph.py:498] 
I0124 00:57:58.007710 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_circle i h d, on_tline i h d h ? cong b e a g
I0124 00:57:58.266230 139966267543552 ddar.py:60] Depth 1/1000 time = 0.24347853660583496
I0124 00:57:58.602615 139966267543552 ddar.py:60] Depth 2/1000 time = 0.3363034725189209
I0124 00:57:59.524182 139966267543552 ddar.py:60] Depth 3/1000 time = 0.9214644432067871
I0124 00:57:59.863853 139966267543552 ddar.py:60] Depth 4/1000 time = 0.3393433094024658
I0124 00:58:00.279696 139966267543552 ddar.py:60] Depth 5/1000 time = 0.41445207595825195
I0124 00:58:00.957508 139966267543552 ddar.py:60] Depth 6/1000 time = 0.6777112483978271
I0124 00:58:02.152674 139966267543552 ddar.py:60] Depth 7/1000 time = 1.195030927658081
I0124 00:58:03.557348 139966267543552 ddar.py:60] Depth 8/1000 time = 1.4044976234436035
I0124 00:58:03.560544 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:58:03.560596 139966267543552 alphageometry.py:566] LM output (score=-5.351809): "i : C b c i 10 D d i d h 11 ;"
I0124 00:58:03.560631 139966267543552 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2622, in add_clause
    nums = draw_fn()
  File "/home/chi/alphageometry-test/graph.py", line 2608, in draw_fn
    return nm.reduce(to_be_intersected, existing_points)
  File "/home/chi/alphageometry-test/numericals.py", line 1310, in reduce
    result = a.intersect(b)
  File "/home/chi/alphageometry-test/numericals.py", line 215, in intersect
    return line_circle_intersection(self, obj)
  File "/home/chi/alphageometry-test/numericals.py", line 544, in line_circle_intersection
    raise InvalidQuadSolveError()
numericals.InvalidQuadSolveError
"

I0124 00:58:03.560691 139966267543552 alphageometry.py:566] LM output (score=-5.372644): "i : C d g i 10 D d g d i 11 ;"
I0124 00:58:03.560742 139966267543552 alphageometry.py:567] Translation: "i = on_line i d g, on_circle i d g"

I0124 00:58:03.560775 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i d g, on_circle i d g ? cong b e a g"
I0124 00:58:03.560895 139966267543552 graph.py:498] 
I0124 00:58:03.560942 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i d g, on_circle i d g ? cong b e a g
I0124 00:58:03.812304 139966267543552 ddar.py:60] Depth 1/1000 time = 0.23875904083251953
I0124 00:58:04.242467 139966267543552 ddar.py:60] Depth 2/1000 time = 0.4300711154937744
I0124 00:58:04.723509 139966267543552 ddar.py:60] Depth 3/1000 time = 0.4809250831604004
I0124 00:58:05.766953 139966267543552 ddar.py:60] Depth 4/1000 time = 1.043184757232666
I0124 00:58:06.345222 139966267543552 ddar.py:60] Depth 5/1000 time = 0.5769007205963135
I0124 00:58:07.581443 139966267543552 ddar.py:60] Depth 6/1000 time = 1.2360689640045166
I0124 00:58:08.256044 139966267543552 ddar.py:60] Depth 7/1000 time = 0.674419641494751
I0124 00:58:09.573234 139966267543552 ddar.py:60] Depth 8/1000 time = 1.3117878437042236
I0124 00:58:09.573422 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:58:09.573469 139966267543552 alphageometry.py:566] LM output (score=-5.463297): "i : C d h i 10 D d i h i 11 ;"
I0124 00:58:09.573501 139966267543552 alphageometry.py:567] Translation: "i = on_line i d h, on_bline i h d"

I0124 00:58:09.573537 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i d h, on_bline i h d ? cong b e a g"
I0124 00:58:09.573666 139966267543552 graph.py:498] 
I0124 00:58:09.573722 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i d h, on_bline i h d ? cong b e a g
I0124 00:58:09.791082 139966267543552 ddar.py:60] Depth 1/1000 time = 0.2044682502746582
I0124 00:58:10.062939 139966267543552 ddar.py:60] Depth 2/1000 time = 0.2717149257659912
I0124 00:58:10.337618 139966267543552 ddar.py:60] Depth 3/1000 time = 0.27448081970214844
I0124 00:58:11.227937 139966267543552 ddar.py:60] Depth 4/1000 time = 0.8899946212768555
I0124 00:58:11.589406 139966267543552 ddar.py:60] Depth 5/1000 time = 0.3600485324859619
I0124 00:58:12.645838 139966267543552 ddar.py:60] Depth 6/1000 time = 1.0562834739685059
I0124 00:58:13.081840 139966267543552 ddar.py:60] Depth 7/1000 time = 0.43583083152770996
I0124 00:58:13.530375 139966267543552 ddar.py:60] Depth 8/1000 time = 0.44513869285583496
I0124 00:58:13.530499 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:58:13.530556 139966267543552 alphageometry.py:566] LM output (score=-5.523412): "i : C a c i 10 D a c a i 11 ;"
I0124 00:58:13.530589 139966267543552 alphageometry.py:567] Translation: "i = on_line i a c, on_circle i a c"

I0124 00:58:13.530625 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i a c, on_circle i a c ? cong b e a g"
I0124 00:58:13.530755 139966267543552 graph.py:498] 
I0124 00:58:13.530807 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i a c, on_circle i a c ? cong b e a g
I0124 00:58:13.756491 139966267543552 ddar.py:60] Depth 1/1000 time = 0.21273565292358398
I0124 00:58:14.603590 139966267543552 ddar.py:60] Depth 2/1000 time = 0.8469836711883545
I0124 00:58:14.884468 139966267543552 ddar.py:60] Depth 3/1000 time = 0.2807152271270752
I0124 00:58:15.167754 139966267543552 ddar.py:60] Depth 4/1000 time = 0.2830774784088135
I0124 00:58:16.122014 139966267543552 ddar.py:60] Depth 5/1000 time = 0.9529154300689697
I0124 00:58:16.545161 139966267543552 ddar.py:60] Depth 6/1000 time = 0.42299413681030273
I0124 00:58:16.990260 139966267543552 ddar.py:60] Depth 7/1000 time = 0.44497251510620117
I0124 00:58:18.028799 139966267543552 ddar.py:60] Depth 8/1000 time = 1.034989833831787
I0124 00:58:18.028972 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:58:18.029029 139966267543552 alphageometry.py:566] LM output (score=-5.571500): "i : D d h f i 10 D d f h i 11 ;"
I0124 00:58:18.029061 139966267543552 alphageometry.py:567] Translation: "i = eqdistance i f d h, eqdistance i h d f"

I0124 00:58:18.029095 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = eqdistance i f d h, eqdistance i h d f ? cong b e a g"
I0124 00:58:18.029217 139966267543552 graph.py:498] 
I0124 00:58:18.029262 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = eqdistance i f d h, eqdistance i h d f ? cong b e a g
I0124 00:58:18.485266 139966267543552 ddar.py:60] Depth 1/1000 time = 0.4436342716217041
I0124 00:58:19.060668 139966267543552 ddar.py:60] Depth 2/1000 time = 0.5753068923950195
I0124 00:58:20.323483 139966267543552 ddar.py:60] Depth 3/1000 time = 1.2626936435699463
I0124 00:58:20.897837 139966267543552 ddar.py:60] Depth 4/1000 time = 0.5740635395050049
I0124 00:58:22.288575 139966267543552 ddar.py:60] Depth 5/1000 time = 1.3887388706207275
I0124 00:58:23.275308 139966267543552 ddar.py:60] Depth 6/1000 time = 0.9865670204162598
I0124 00:58:24.883158 139966267543552 ddar.py:60] Depth 7/1000 time = 1.6076734066009521
I0124 00:58:25.899626 139966267543552 ddar.py:60] Depth 8/1000 time = 1.0088915824890137
I0124 00:58:25.899799 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:58:25.899846 139966267543552 alphageometry.py:566] LM output (score=-5.621067): "i : T b c d i 10 ;"
I0124 00:58:25.899878 139966267543552 alphageometry.py:567] Translation: "i = on_tline i d b c"

I0124 00:58:25.899913 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_tline i d b c ? cong b e a g"
I0124 00:58:25.900029 139966267543552 graph.py:498] 
I0124 00:58:25.900074 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_tline i d b c ? cong b e a g
I0124 00:58:26.668323 139966267543552 ddar.py:60] Depth 1/1000 time = 0.7566986083984375
I0124 00:58:26.900226 139966267543552 ddar.py:60] Depth 2/1000 time = 0.23175835609436035
I0124 00:58:27.141712 139966267543552 ddar.py:60] Depth 3/1000 time = 0.24140048027038574
I0124 00:58:27.390604 139966267543552 ddar.py:60] Depth 4/1000 time = 0.24871563911437988
I0124 00:58:27.704722 139966267543552 ddar.py:60] Depth 5/1000 time = 0.31267881393432617
I0124 00:58:28.715466 139966267543552 ddar.py:60] Depth 6/1000 time = 1.010636568069458
I0124 00:58:29.127166 139966267543552 ddar.py:60] Depth 7/1000 time = 0.41149187088012695
I0124 00:58:29.535486 139966267543552 ddar.py:60] Depth 8/1000 time = 0.406660795211792
I0124 00:58:30.581550 139966267543552 ddar.py:60] Depth 9/1000 time = 1.0423853397369385
I0124 00:58:30.581740 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:58:30.581797 139966267543552 alphageometry.py:566] LM output (score=-5.647795): "i : C f g i 10 D f i g i 11 ;"
I0124 00:58:30.581830 139966267543552 alphageometry.py:567] Translation: "i = on_line i f g, on_bline i g f"

I0124 00:58:30.581866 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i f g, on_bline i g f ? cong b e a g"
I0124 00:58:30.581995 139966267543552 graph.py:498] 
I0124 00:58:30.582050 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i f g, on_bline i g f ? cong b e a g
I0124 00:58:30.864188 139966267543552 ddar.py:60] Depth 1/1000 time = 0.2695126533508301
I0124 00:58:31.975389 139966267543552 ddar.py:60] Depth 2/1000 time = 1.1110568046569824
I0124 00:58:32.534909 139966267543552 ddar.py:60] Depth 3/1000 time = 0.5593602657318115
I0124 00:58:33.705614 139966267543552 ddar.py:60] Depth 4/1000 time = 1.1704187393188477
I0124 00:58:34.347836 139966267543552 ddar.py:60] Depth 5/1000 time = 0.6407949924468994
I0124 00:58:35.645904 139966267543552 ddar.py:60] Depth 6/1000 time = 1.2979085445404053
I0124 00:58:36.976691 139966267543552 ddar.py:60] Depth 7/1000 time = 1.3306005001068115
I0124 00:58:38.353425 139966267543552 ddar.py:60] Depth 8/1000 time = 1.3709917068481445
I0124 00:58:38.353614 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:58:38.353666 139966267543552 alphageometry.py:566] LM output (score=-5.655364): "i : C a f i 10 D a i f i 11 ;"
I0124 00:58:38.353701 139966267543552 alphageometry.py:567] Translation: "i = on_line i a f, on_bline i f a"

I0124 00:58:38.353736 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i a f, on_bline i f a ? cong b e a g"
I0124 00:58:38.353857 139966267543552 graph.py:498] 
I0124 00:58:38.353904 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i a f, on_bline i f a ? cong b e a g
I0124 00:58:38.627513 139966267543552 ddar.py:60] Depth 1/1000 time = 0.26082301139831543
I0124 00:58:39.039729 139966267543552 ddar.py:60] Depth 2/1000 time = 0.4121241569519043
I0124 00:58:40.110917 139966267543552 ddar.py:60] Depth 3/1000 time = 1.0710580348968506
I0124 00:58:40.572598 139966267543552 ddar.py:60] Depth 4/1000 time = 0.4613931179046631
I0124 00:58:41.214332 139966267543552 ddar.py:60] Depth 5/1000 time = 0.6404008865356445
I0124 00:58:42.499902 139966267543552 ddar.py:60] Depth 6/1000 time = 1.2854273319244385
I0124 00:58:43.254044 139966267543552 ddar.py:60] Depth 7/1000 time = 0.7539639472961426
I0124 00:58:44.669217 139966267543552 ddar.py:60] Depth 8/1000 time = 1.415001392364502
I0124 00:58:44.673787 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:58:44.673838 139966267543552 alphageometry.py:566] LM output (score=-5.666368): "i : C f h i 10 D f i h i 11 ;"
I0124 00:58:44.673871 139966267543552 alphageometry.py:567] Translation: "i = on_line i f h, on_bline i h f"

I0124 00:58:44.673906 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i f h, on_bline i h f ? cong b e a g"
I0124 00:58:44.674026 139966267543552 graph.py:498] 
I0124 00:58:44.674071 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_circle h d e, on_tline h d a c; i = on_line i f h, on_bline i h f ? cong b e a g
I0124 00:58:44.899794 139966267543552 ddar.py:60] Depth 1/1000 time = 0.2131671905517578
I0124 00:58:45.253792 139966267543552 ddar.py:60] Depth 2/1000 time = 0.3539106845855713
I0124 00:58:46.236717 139966267543552 ddar.py:60] Depth 3/1000 time = 0.9828131198883057
I0124 00:58:46.629101 139966267543552 ddar.py:60] Depth 4/1000 time = 0.39209938049316406
I0124 00:58:47.762728 139966267543552 ddar.py:60] Depth 5/1000 time = 1.1321136951446533
I0124 00:58:48.511878 139966267543552 ddar.py:60] Depth 6/1000 time = 0.7489242553710938
I0124 00:58:49.880506 139966267543552 ddar.py:60] Depth 7/1000 time = 1.3683311939239502
I0124 00:58:50.665488 139966267543552 ddar.py:60] Depth 8/1000 time = 0.7847888469696045
I0124 00:58:50.669449 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:58:50.669517 139966267543552 alphageometry.py:549] Decoding from {S} a : ; b : ; c : ; d : ^ a b a d a d a c 00 ^ c a c d c d c b 01 ; e : C a b e 02 T a b d e 03 ; f : C d e f 04 D d e d f 05 ; g : C a b g 06 C c f g 07 ? D b e a g {F1} x00 h : C a e h 08 D a e a h 09 ; x00
I0124 00:58:56.735095 139966267543552 alphageometry.py:566] LM output (score=-0.265696): "i : D d i d e 10 T b c d i 11 ;"
I0124 00:58:56.735224 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e, on_tline i d b c"

I0124 00:58:56.735264 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a e, on_circle h a e; i = on_circle i d e, on_tline i d b c ? cong b e a g"
I0124 00:58:56.735382 139966267543552 graph.py:498] 
I0124 00:58:56.735435 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a e, on_circle h a e; i = on_circle i d e, on_tline i d b c ? cong b e a g
I0124 00:58:57.687243 139966267543552 ddar.py:60] Depth 1/1000 time = 0.9386627674102783
I0124 00:58:58.110592 139966267543552 ddar.py:60] Depth 2/1000 time = 0.42318034172058105
I0124 00:58:59.153756 139966267543552 ddar.py:60] Depth 3/1000 time = 1.0430076122283936
I0124 00:59:00.214300 139966267543552 ddar.py:60] Depth 4/1000 time = 1.0602428913116455
I0124 00:59:00.699220 139966267543552 ddar.py:60] Depth 5/1000 time = 0.48230981826782227
I0124 00:59:00.700065 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:59:00.700113 139966267543552 alphageometry.py:566] LM output (score=-0.920065): "i : C b c i 10 T b c d i 11 ;"
I0124 00:59:00.700146 139966267543552 alphageometry.py:567] Translation: "i = on_line i b c, on_tline i d b c"

I0124 00:59:00.700180 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a e, on_circle h a e; i = on_line i b c, on_tline i d b c ? cong b e a g"
I0124 00:59:00.700304 139966267543552 graph.py:498] 
I0124 00:59:00.700351 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a e, on_circle h a e; i = on_line i b c, on_tline i d b c ? cong b e a g
I0124 00:59:01.479181 139966267543552 ddar.py:60] Depth 1/1000 time = 0.7684555053710938
I0124 00:59:01.703436 139966267543552 ddar.py:60] Depth 2/1000 time = 0.2241058349609375
I0124 00:59:01.981528 139966267543552 ddar.py:60] Depth 3/1000 time = 0.2779877185821533
I0124 00:59:02.266330 139966267543552 ddar.py:60] Depth 4/1000 time = 0.28459906578063965
I0124 00:59:02.267526 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:59:02.267573 139966267543552 alphageometry.py:566] LM output (score=-1.426960): "i : C a c i 10 T a c d i 11 ;"
I0124 00:59:02.267605 139966267543552 alphageometry.py:567] Translation: "i = on_line i a c, on_tline i d a c"

I0124 00:59:02.267652 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a e, on_circle h a e; i = on_line i a c, on_tline i d a c ? cong b e a g"
I0124 00:59:02.267770 139966267543552 graph.py:498] 
I0124 00:59:02.267816 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a e, on_circle h a e; i = on_line i a c, on_tline i d a c ? cong b e a g
I0124 00:59:02.467720 139966267543552 ddar.py:60] Depth 1/1000 time = 0.18958735466003418
I0124 00:59:03.652222 139966267543552 ddar.py:60] Depth 2/1000 time = 1.1844112873077393
I0124 00:59:05.949523 139966267543552 ddar.py:60] Depth 3/1000 time = 2.2971279621124268
I0124 00:59:07.660525 139966267543552 ddar.py:60] Depth 4/1000 time = 1.7108166217803955
I0124 00:59:09.369930 139966267543552 ddar.py:60] Depth 5/1000 time = 1.709089994430542
I0124 00:59:09.374964 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:59:09.375015 139966267543552 alphageometry.py:566] LM output (score=-1.551786): "i : D a c a i 10 D c d d i 11 ;"
I0124 00:59:09.375050 139966267543552 alphageometry.py:567] Translation: "i = on_circle i a c, on_circle i d c"

I0124 00:59:09.375086 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a e, on_circle h a e; i = on_circle i a c, on_circle i d c ? cong b e a g"
I0124 00:59:09.375208 139966267543552 graph.py:498] 
I0124 00:59:09.375255 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a e, on_circle h a e; i = on_circle i a c, on_circle i d c ? cong b e a g
I0124 00:59:09.576533 139966267543552 ddar.py:60] Depth 1/1000 time = 0.1824328899383545
I0124 00:59:10.414644 139966267543552 ddar.py:60] Depth 2/1000 time = 0.8380210399627686
I0124 00:59:10.712955 139966267543552 ddar.py:60] Depth 3/1000 time = 0.29816484451293945
I0124 00:59:11.126695 139966267543552 ddar.py:60] Depth 4/1000 time = 0.4136621952056885
I0124 00:59:12.157424 139966267543552 ddar.py:60] Depth 5/1000 time = 1.0306305885314941
I0124 00:59:12.644403 139966267543552 ddar.py:60] Depth 6/1000 time = 0.486830472946167
I0124 00:59:13.141732 139966267543552 ddar.py:60] Depth 7/1000 time = 0.49724721908569336
I0124 00:59:14.238247 139966267543552 ddar.py:60] Depth 8/1000 time = 1.0962986946105957
I0124 00:59:14.242640 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:59:14.242691 139966267543552 alphageometry.py:566] LM output (score=-1.650167): "i : D d i d e 10 T a c d i 11 ;"
I0124 00:59:14.242724 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e, on_tline i d a c"

I0124 00:59:14.242760 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a e, on_circle h a e; i = on_circle i d e, on_tline i d a c ? cong b e a g"
I0124 00:59:14.242882 139966267543552 graph.py:498] 
I0124 00:59:14.242928 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a e, on_circle h a e; i = on_circle i d e, on_tline i d a c ? cong b e a g
I0124 00:59:14.571446 139966267543552 ddar.py:60] Depth 1/1000 time = 0.315399169921875
I0124 00:59:15.598020 139966267543552 ddar.py:60] Depth 2/1000 time = 1.026442050933838
I0124 00:59:16.656141 139966267543552 ddar.py:60] Depth 3/1000 time = 1.057948350906372
I0124 00:59:17.095840 139966267543552 ddar.py:60] Depth 4/1000 time = 0.43940114974975586
I0124 00:59:18.287499 139966267543552 ddar.py:60] Depth 5/1000 time = 1.1902577877044678
I0124 00:59:19.586504 139966267543552 ddar.py:60] Depth 6/1000 time = 1.2988333702087402
I0124 00:59:20.919661 139966267543552 ddar.py:60] Depth 7/1000 time = 1.3329803943634033
I0124 00:59:21.645261 139966267543552 ddar.py:60] Depth 8/1000 time = 0.7206251621246338
I0124 00:59:21.645430 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:59:21.645475 139966267543552 alphageometry.py:566] LM output (score=-1.850780): "i : D d h d i 10 T c d h i 11 ;"
I0124 00:59:21.645507 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d h, on_tline i h c d"

I0124 00:59:21.645542 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a e, on_circle h a e; i = on_circle i d h, on_tline i h c d ? cong b e a g"
I0124 00:59:21.645669 139966267543552 graph.py:498] 
I0124 00:59:21.645716 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a e, on_circle h a e; i = on_circle i d h, on_tline i h c d ? cong b e a g
I0124 00:59:22.424483 139966267543552 ddar.py:60] Depth 1/1000 time = 0.7641637325286865
I0124 00:59:22.632149 139966267543552 ddar.py:60] Depth 2/1000 time = 0.20752358436584473
I0124 00:59:22.843477 139966267543552 ddar.py:60] Depth 3/1000 time = 0.21125006675720215
I0124 00:59:23.056291 139966267543552 ddar.py:60] Depth 4/1000 time = 0.2126319408416748
I0124 00:59:23.270105 139966267543552 ddar.py:60] Depth 5/1000 time = 0.21308636665344238
I0124 00:59:23.502463 139966267543552 ddar.py:60] Depth 6/1000 time = 0.23142480850219727
I0124 00:59:23.771028 139966267543552 ddar.py:60] Depth 7/1000 time = 0.2684905529022217
I0124 00:59:24.626324 139966267543552 ddar.py:60] Depth 8/1000 time = 0.8552019596099854
I0124 00:59:24.901786 139966267543552 ddar.py:60] Depth 9/1000 time = 0.27367687225341797
I0124 00:59:24.901874 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:59:24.901916 139966267543552 alphageometry.py:566] LM output (score=-2.316127): "i : D d g f i 10 D d i f g 11 ;"
I0124 00:59:24.901948 139966267543552 alphageometry.py:567] Translation: "i = eqdistance i f d g, eqdistance i d f g"

I0124 00:59:24.901982 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a e, on_circle h a e; i = eqdistance i f d g, eqdistance i d f g ? cong b e a g"
I0124 00:59:24.902100 139966267543552 graph.py:498] 
I0124 00:59:24.902146 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a e, on_circle h a e; i = eqdistance i f d g, eqdistance i d f g ? cong b e a g
I0124 00:59:25.105550 139966267543552 ddar.py:60] Depth 1/1000 time = 0.18519830703735352
I0124 00:59:25.355131 139966267543552 ddar.py:60] Depth 2/1000 time = 0.24950790405273438
I0124 00:59:25.623174 139966267543552 ddar.py:60] Depth 3/1000 time = 0.26797056198120117
I0124 00:59:25.910229 139966267543552 ddar.py:60] Depth 4/1000 time = 0.28698182106018066
I0124 00:59:26.240012 139966267543552 ddar.py:60] Depth 5/1000 time = 0.32970762252807617
I0124 00:59:27.163836 139966267543552 ddar.py:60] Depth 6/1000 time = 0.9236133098602295
I0124 00:59:27.514571 139966267543552 ddar.py:60] Depth 7/1000 time = 0.34899187088012695
I0124 00:59:27.515325 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:59:27.515374 139966267543552 alphageometry.py:566] LM output (score=-2.335329): "i : D d g d i 10 T c d g i 11 ;"
I0124 00:59:27.515407 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d g, on_tline i g c d"

I0124 00:59:27.515441 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a e, on_circle h a e; i = on_circle i d g, on_tline i g c d ? cong b e a g"
I0124 00:59:27.515578 139966267543552 graph.py:498] 
I0124 00:59:27.515624 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a e, on_circle h a e; i = on_circle i d g, on_tline i g c d ? cong b e a g
I0124 00:59:27.699843 139966267543552 ddar.py:60] Depth 1/1000 time = 0.1696314811706543
I0124 00:59:27.906926 139966267543552 ddar.py:60] Depth 2/1000 time = 0.20700740814208984
I0124 00:59:28.117286 139966267543552 ddar.py:60] Depth 3/1000 time = 0.21028995513916016
I0124 00:59:28.330518 139966267543552 ddar.py:60] Depth 4/1000 time = 0.213057279586792
I0124 00:59:28.545611 139966267543552 ddar.py:60] Depth 5/1000 time = 0.21435546875
I0124 00:59:29.369877 139966267543552 ddar.py:60] Depth 6/1000 time = 0.8233053684234619
I0124 00:59:29.640964 139966267543552 ddar.py:60] Depth 7/1000 time = 0.27094292640686035
I0124 00:59:29.915343 139966267543552 ddar.py:60] Depth 8/1000 time = 0.27430200576782227
I0124 00:59:30.197337 139966267543552 ddar.py:60] Depth 9/1000 time = 0.28029370307922363
I0124 00:59:30.197424 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:59:30.197466 139966267543552 alphageometry.py:566] LM output (score=-2.481365): "i : ^ a b a i a i a c 10 ^ c a c i c i c b 11 ;"
I0124 00:59:30.197498 139966267543552 alphageometry.py:567] Translation: "ERROR: Invalid predicate ^ a b a i a i a c"

I0124 00:59:30.197531 139966267543552 alphageometry.py:566] LM output (score=-2.611077): "i : D d e e i 10 T d e e i 11 ;"
I0124 00:59:30.197557 139966267543552 alphageometry.py:567] Translation: "ERROR: Traceback (most recent call last):
  File "/home/chi/alphageometry-test/alphageometry.py", line 438, in try_translate_constrained_to_construct
    g.copy().add_clause(clause, 0, DEFINITIONS)
  File "/home/chi/alphageometry-test/graph.py", line 2635, in add_clause
    raise PointTooCloseError()
graph.PointTooCloseError
"

I0124 00:59:30.197586 139966267543552 alphageometry.py:566] LM output (score=-2.644365): "i : D d e d i 10 ;"
I0124 00:59:30.197611 139966267543552 alphageometry.py:567] Translation: "i = on_circle i d e"

I0124 00:59:30.197646 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a e, on_circle h a e; i = on_circle i d e ? cong b e a g"
I0124 00:59:30.197758 139966267543552 graph.py:498] 
I0124 00:59:30.197803 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a e, on_circle h a e; i = on_circle i d e ? cong b e a g
I0124 00:59:31.116286 139966267543552 ddar.py:60] Depth 1/1000 time = 0.9080657958984375
I0124 00:59:31.512437 139966267543552 ddar.py:60] Depth 2/1000 time = 0.39599084854125977
I0124 00:59:32.508239 139966267543552 ddar.py:60] Depth 3/1000 time = 0.9956514835357666
I0124 00:59:33.540109 139966267543552 ddar.py:60] Depth 4/1000 time = 1.0315771102905273
I0124 00:59:33.541514 139966267543552 alphageometry.py:221] DD+AR failed to solve the problem.
I0124 00:59:33.541564 139966267543552 alphageometry.py:566] LM output (score=-2.654483): "i : D d e e i 10 T d i e h 11 ;"
I0124 00:59:33.541598 139966267543552 alphageometry.py:567] Translation: "i = on_circle i e d, on_tline i d e h"

I0124 00:59:33.541633 139966267543552 alphageometry.py:576] Solving: "a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a e, on_circle h a e; i = on_circle i e d, on_tline i d e h ? cong b e a g"
I0124 00:59:33.541767 139966267543552 graph.py:498] 
I0124 00:59:33.541830 139966267543552 graph.py:499] a b c = triangle a b c; d = incenter d c b a; e = foot e d b a; f = on_circle f d e, on_line f d e; g = on_line g c f, on_line g b a; h = on_line h a e, on_circle h a e; i = on_circle i e d, on_tline i d e h ? cong b e a g
I0124 00:59:33.889110 139966267543552 ddar.py:60] Depth 1/1000 time = 0.33505940437316895
I0124 00:59:35.314130 139966267543552 ddar.py:60] Depth 2/1000 time = 1.4249169826507568
I0124 00:59:36.196896 139966267543552 ddar.py:60] Depth 3/1000 time = 0.8826122283935547
